// Generated from dt-sql-parser/src/grammar/trino/TrinoSql.g4 by ANTLR 4.13.1

// @ts-nocheck

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { TrinoSqlListener } from "./TrinoSqlListener.js";
import { TrinoSqlVisitor } from "./TrinoSqlVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


import { SQLParserBase } from '../SQLParserBase';


export class TrinoSqlParser extends SQLParserBase {
    public static readonly T__0 = 1;
    public static readonly T__1 = 2;
    public static readonly T__2 = 3;
    public static readonly T__3 = 4;
    public static readonly T__4 = 5;
    public static readonly T__5 = 6;
    public static readonly T__6 = 7;
    public static readonly T__7 = 8;
    public static readonly T__8 = 9;
    public static readonly T__9 = 10;
    public static readonly T__10 = 11;
    public static readonly T__11 = 12;
    public static readonly T__12 = 13;
    public static readonly T__13 = 14;
    public static readonly T__14 = 15;
    public static readonly T__15 = 16;
    public static readonly T__16 = 17;
    public static readonly KW_ABSENT = 18;
    public static readonly KW_ADD = 19;
    public static readonly KW_ADMIN = 20;
    public static readonly KW_AFTER = 21;
    public static readonly KW_ALL = 22;
    public static readonly KW_ALTER = 23;
    public static readonly KW_ANALYZE = 24;
    public static readonly KW_AND = 25;
    public static readonly KW_ANY = 26;
    public static readonly KW_ARRAY = 27;
    public static readonly KW_AS = 28;
    public static readonly KW_ASC = 29;
    public static readonly KW_AT = 30;
    public static readonly KW_AUTHORIZATION = 31;
    public static readonly KW_BEGIN = 32;
    public static readonly KW_BERNOULLI = 33;
    public static readonly KW_BETWEEN = 34;
    public static readonly KW_BOTH = 35;
    public static readonly KW_BY = 36;
    public static readonly KW_CALL = 37;
    public static readonly KW_CALLED = 38;
    public static readonly KW_CASCADE = 39;
    public static readonly KW_CASE = 40;
    public static readonly KW_CAST = 41;
    public static readonly KW_CATALOG = 42;
    public static readonly KW_CATALOGS = 43;
    public static readonly KW_COLUMN = 44;
    public static readonly KW_COLUMNS = 45;
    public static readonly KW_COMMENT = 46;
    public static readonly KW_COMMIT = 47;
    public static readonly KW_COMMITTED = 48;
    public static readonly KW_CONDITIONAL = 49;
    public static readonly KW_CONSTRAINT = 50;
    public static readonly KW_COUNT = 51;
    public static readonly KW_COPARTITION = 52;
    public static readonly KW_CREATE = 53;
    public static readonly KW_CROSS = 54;
    public static readonly KW_CUBE = 55;
    public static readonly KW_CURRENT = 56;
    public static readonly KW_CURRENT_CATALOG = 57;
    public static readonly KW_CURRENT_DATE = 58;
    public static readonly KW_CURRENT_PATH = 59;
    public static readonly KW_CURRENT_ROLE = 60;
    public static readonly KW_CURRENT_SCHEMA = 61;
    public static readonly KW_CURRENT_TIME = 62;
    public static readonly KW_CURRENT_TIMESTAMP = 63;
    public static readonly KW_CURRENT_USER = 64;
    public static readonly KW_DATA = 65;
    public static readonly KW_DATE = 66;
    public static readonly KW_DAY = 67;
    public static readonly KW_DEALLOCATE = 68;
    public static readonly KW_DECLARE = 69;
    public static readonly KW_DEFAULT = 70;
    public static readonly KW_DEFINE = 71;
    public static readonly KW_DEFINER = 72;
    public static readonly KW_DELETE = 73;
    public static readonly KW_DENY = 74;
    public static readonly KW_DESC = 75;
    public static readonly KW_DESCRIBE = 76;
    public static readonly KW_DESCRIPTOR = 77;
    public static readonly KW_DETERMINISTIC = 78;
    public static readonly KW_DISTINCT = 79;
    public static readonly KW_DISTRIBUTED = 80;
    public static readonly KW_DO = 81;
    public static readonly KW_DOUBLE = 82;
    public static readonly KW_DROP = 83;
    public static readonly KW_ELSE = 84;
    public static readonly KW_EMPTY = 85;
    public static readonly KW_ELSEIF = 86;
    public static readonly KW_ENCODING = 87;
    public static readonly KW_END = 88;
    public static readonly KW_ERROR = 89;
    public static readonly KW_ESCAPE = 90;
    public static readonly KW_EXCEPT = 91;
    public static readonly KW_EXCLUDING = 92;
    public static readonly KW_EXECUTE = 93;
    public static readonly KW_EXISTS = 94;
    public static readonly KW_EXPLAIN = 95;
    public static readonly KW_EXTRACT = 96;
    public static readonly KW_FALSE = 97;
    public static readonly KW_FETCH = 98;
    public static readonly KW_FILTER = 99;
    public static readonly KW_FINAL = 100;
    public static readonly KW_FIRST = 101;
    public static readonly KW_FOLLOWING = 102;
    public static readonly KW_FOR = 103;
    public static readonly KW_FORMAT = 104;
    public static readonly KW_FROM = 105;
    public static readonly KW_FULL = 106;
    public static readonly KW_FUNCTION = 107;
    public static readonly KW_FUNCTIONS = 108;
    public static readonly KW_GRACE = 109;
    public static readonly KW_GRANT = 110;
    public static readonly KW_GRANTED = 111;
    public static readonly KW_GRANTS = 112;
    public static readonly KW_GRAPHVIZ = 113;
    public static readonly KW_GROUP = 114;
    public static readonly KW_GROUPING = 115;
    public static readonly KW_GROUPS = 116;
    public static readonly KW_HAVING = 117;
    public static readonly KW_HOUR = 118;
    public static readonly KW_IF = 119;
    public static readonly KW_IGNORE = 120;
    public static readonly KW_IMMEDIATE = 121;
    public static readonly KW_IN = 122;
    public static readonly KW_INCLUDING = 123;
    public static readonly KW_INITIAL = 124;
    public static readonly KW_INNER = 125;
    public static readonly KW_INPUT = 126;
    public static readonly KW_INSERT = 127;
    public static readonly KW_INTERSECT = 128;
    public static readonly KW_INTERVAL = 129;
    public static readonly KW_INTO = 130;
    public static readonly KW_INVOKER = 131;
    public static readonly KW_IO = 132;
    public static readonly KW_IS = 133;
    public static readonly KW_ISOLATION = 134;
    public static readonly KW_ITERATE = 135;
    public static readonly KW_JOIN = 136;
    public static readonly KW_JSON = 137;
    public static readonly KW_JSON_ARRAY = 138;
    public static readonly KW_JSON_EXISTS = 139;
    public static readonly KW_JSON_OBJECT = 140;
    public static readonly KW_JSON_QUERY = 141;
    public static readonly KW_JSON_TABLE = 142;
    public static readonly KW_JSON_VALUE = 143;
    public static readonly KW_KEEP = 144;
    public static readonly KW_KEY = 145;
    public static readonly KW_KEYS = 146;
    public static readonly KW_LANGUAGE = 147;
    public static readonly KW_LAST = 148;
    public static readonly KW_LATERAL = 149;
    public static readonly KW_LEADING = 150;
    public static readonly KW_LEAVE = 151;
    public static readonly KW_LEFT = 152;
    public static readonly KW_LEVEL = 153;
    public static readonly KW_LIKE = 154;
    public static readonly KW_LIMIT = 155;
    public static readonly KW_LISTAGG = 156;
    public static readonly KW_LOCAL = 157;
    public static readonly KW_LOCALTIME = 158;
    public static readonly KW_LOCALTIMESTAMP = 159;
    public static readonly KW_LOGICAL = 160;
    public static readonly KW_LOOP = 161;
    public static readonly KW_MAP = 162;
    public static readonly KW_MATCH = 163;
    public static readonly KW_MATCHED = 164;
    public static readonly KW_MATCHES = 165;
    public static readonly KW_MATCH_RECOGNIZE = 166;
    public static readonly KW_MATERIALIZED = 167;
    public static readonly KW_MEASURES = 168;
    public static readonly KW_MERGE = 169;
    public static readonly KW_MINUTE = 170;
    public static readonly KW_MONTH = 171;
    public static readonly KW_NATURAL = 172;
    public static readonly KW_NESTED = 173;
    public static readonly KW_NEXT = 174;
    public static readonly KW_NFC = 175;
    public static readonly KW_NFD = 176;
    public static readonly KW_NFKC = 177;
    public static readonly KW_NFKD = 178;
    public static readonly KW_NO = 179;
    public static readonly KW_NONE = 180;
    public static readonly KW_NORMALIZE = 181;
    public static readonly KW_NOT = 182;
    public static readonly KW_NULL = 183;
    public static readonly KW_NULLIF = 184;
    public static readonly KW_NULLS = 185;
    public static readonly KW_OBJECT = 186;
    public static readonly KW_OF = 187;
    public static readonly KW_OFFSET = 188;
    public static readonly KW_OMIT = 189;
    public static readonly KW_ON = 190;
    public static readonly KW_ONE = 191;
    public static readonly KW_ONLY = 192;
    public static readonly KW_OPTION = 193;
    public static readonly KW_OR = 194;
    public static readonly KW_ORDER = 195;
    public static readonly KW_ORDINALITY = 196;
    public static readonly KW_OUTER = 197;
    public static readonly KW_OUTPUT = 198;
    public static readonly KW_OVER = 199;
    public static readonly KW_OVERFLOW = 200;
    public static readonly KW_PARTITION = 201;
    public static readonly KW_PARTITIONS = 202;
    public static readonly KW_PASSING = 203;
    public static readonly KW_PAST = 204;
    public static readonly KW_PATH = 205;
    public static readonly KW_PATTERN = 206;
    public static readonly KW_PER = 207;
    public static readonly KW_PERIOD = 208;
    public static readonly KW_PERMUTE = 209;
    public static readonly KW_PLAN = 210;
    public static readonly KW_POSITION = 211;
    public static readonly KW_PRECEDING = 212;
    public static readonly KW_PRECISION = 213;
    public static readonly KW_PREPARE = 214;
    public static readonly KW_PRIVILEGES = 215;
    public static readonly KW_PROPERTIES = 216;
    public static readonly KW_PRUNE = 217;
    public static readonly KW_QUOTES = 218;
    public static readonly KW_RANGE = 219;
    public static readonly KW_READ = 220;
    public static readonly KW_RECURSIVE = 221;
    public static readonly KW_REFRESH = 222;
    public static readonly KW_RENAME = 223;
    public static readonly KW_REPEAT = 224;
    public static readonly KW_REPEATABLE = 225;
    public static readonly KW_REPLACE = 226;
    public static readonly KW_RESET = 227;
    public static readonly KW_RESPECT = 228;
    public static readonly KW_RESTRICT = 229;
    public static readonly KW_RETURN = 230;
    public static readonly KW_RETURNING = 231;
    public static readonly KW_RETURNS = 232;
    public static readonly KW_REVOKE = 233;
    public static readonly KW_RIGHT = 234;
    public static readonly KW_ROLE = 235;
    public static readonly KW_ROLES = 236;
    public static readonly KW_ROLLBACK = 237;
    public static readonly KW_ROLLUP = 238;
    public static readonly KW_ROW = 239;
    public static readonly KW_ROWS = 240;
    public static readonly KW_RUNNING = 241;
    public static readonly KW_SCALAR = 242;
    public static readonly KW_SCHEMA = 243;
    public static readonly KW_SCHEMAS = 244;
    public static readonly KW_SECOND = 245;
    public static readonly KW_SECURITY = 246;
    public static readonly KW_SEEK = 247;
    public static readonly KW_SELECT = 248;
    public static readonly KW_SERIALIZABLE = 249;
    public static readonly KW_SESSION = 250;
    public static readonly KW_SET = 251;
    public static readonly KW_SETS = 252;
    public static readonly KW_SHOW = 253;
    public static readonly KW_SOME = 254;
    public static readonly KW_START = 255;
    public static readonly KW_STATS = 256;
    public static readonly KW_SUBSET = 257;
    public static readonly KW_SUBSTRING = 258;
    public static readonly KW_SYSTEM = 259;
    public static readonly KW_TABLE = 260;
    public static readonly KW_TABLES = 261;
    public static readonly KW_TABLESAMPLE = 262;
    public static readonly KW_TEXT = 263;
    public static readonly KW_TEXT_STRING = 264;
    public static readonly KW_THEN = 265;
    public static readonly KW_TIES = 266;
    public static readonly KW_TIME = 267;
    public static readonly KW_TIMESTAMP = 268;
    public static readonly KW_TO = 269;
    public static readonly KW_TRAILING = 270;
    public static readonly KW_TRANSACTION = 271;
    public static readonly KW_TRIM = 272;
    public static readonly KW_TRUE = 273;
    public static readonly KW_TRUNCATE = 274;
    public static readonly KW_TRY_CAST = 275;
    public static readonly KW_TYPE = 276;
    public static readonly KW_UESCAPE = 277;
    public static readonly KW_UNBOUNDED = 278;
    public static readonly KW_UNCOMMITTED = 279;
    public static readonly KW_UNCONDITIONAL = 280;
    public static readonly KW_UNION = 281;
    public static readonly KW_UNIQUE = 282;
    public static readonly KW_UNKNOWN = 283;
    public static readonly KW_UNMATCHED = 284;
    public static readonly KW_UNNEST = 285;
    public static readonly KW_UNTIL = 286;
    public static readonly KW_UPDATE = 287;
    public static readonly KW_USE = 288;
    public static readonly KW_USER = 289;
    public static readonly KW_USING = 290;
    public static readonly KW_UTF16 = 291;
    public static readonly KW_UTF32 = 292;
    public static readonly KW_UTF8 = 293;
    public static readonly KW_VALIDATE = 294;
    public static readonly KW_VALUE = 295;
    public static readonly KW_VALUES = 296;
    public static readonly KW_VERBOSE = 297;
    public static readonly KW_VERSION = 298;
    public static readonly KW_VIEW = 299;
    public static readonly KW_WHEN = 300;
    public static readonly KW_WHERE = 301;
    public static readonly KW_WHILE = 302;
    public static readonly KW_WINDOW = 303;
    public static readonly KW_WITH = 304;
    public static readonly KW_WITHIN = 305;
    public static readonly KW_WITHOUT = 306;
    public static readonly KW_WORK = 307;
    public static readonly KW_WRAPPER = 308;
    public static readonly KW_WRITE = 309;
    public static readonly KW_YEAR = 310;
    public static readonly KW_ZONE = 311;
    public static readonly EQ = 312;
    public static readonly NEQ = 313;
    public static readonly LT = 314;
    public static readonly LTE = 315;
    public static readonly GT = 316;
    public static readonly GTE = 317;
    public static readonly PLUS = 318;
    public static readonly MINUS = 319;
    public static readonly ASTERISK = 320;
    public static readonly SLASH = 321;
    public static readonly PERCENT = 322;
    public static readonly CONCAT = 323;
    public static readonly QUESTION_MARK = 324;
    public static readonly SEMICOLON = 325;
    public static readonly STRING = 326;
    public static readonly UNICODE_STRING = 327;
    public static readonly BINARY_LITERAL = 328;
    public static readonly INTEGER_VALUE = 329;
    public static readonly DECIMAL_VALUE = 330;
    public static readonly DOUBLE_VALUE = 331;
    public static readonly IDENTIFIER = 332;
    public static readonly DIGIT_IDENTIFIER = 333;
    public static readonly QUOTED_IDENTIFIER = 334;
    public static readonly BACKQUOTED_IDENTIFIER = 335;
    public static readonly LINE_COMMENT = 336;
    public static readonly BRACKETED_COMMENT = 337;
    public static readonly WHITE_SPACE = 338;
    public static readonly UNRECOGNIZED = 339;
    public static readonly DELIMITER = 340;
    public static readonly RULE_program = 0;
    public static readonly RULE_statements = 1;
    public static readonly RULE_singleStatement = 2;
    public static readonly RULE_standaloneExpression = 3;
    public static readonly RULE_standalonePathSpecification = 4;
    public static readonly RULE_standaloneType = 5;
    public static readonly RULE_standaloneRowPattern = 6;
    public static readonly RULE_standaloneFunctionSpecification = 7;
    public static readonly RULE_statement = 8;
    public static readonly RULE_rootQuery = 9;
    public static readonly RULE_withFunction = 10;
    public static readonly RULE_query = 11;
    public static readonly RULE_with = 12;
    public static readonly RULE_tableElement = 13;
    public static readonly RULE_columnDefinition = 14;
    public static readonly RULE_likeClause = 15;
    public static readonly RULE_properties = 16;
    public static readonly RULE_propertyAssignments = 17;
    public static readonly RULE_property = 18;
    public static readonly RULE_propertyValue = 19;
    public static readonly RULE_queryNoWith = 20;
    public static readonly RULE_limitRowCount = 21;
    public static readonly RULE_rowCount = 22;
    public static readonly RULE_queryTerm = 23;
    public static readonly RULE_queryPrimary = 24;
    public static readonly RULE_sortItem = 25;
    public static readonly RULE_querySpecification = 26;
    public static readonly RULE_whereClause = 27;
    public static readonly RULE_havingClause = 28;
    public static readonly RULE_selectList = 29;
    public static readonly RULE_groupBy = 30;
    public static readonly RULE_partitionBy = 31;
    public static readonly RULE_groupingElement = 32;
    public static readonly RULE_groupingSet = 33;
    public static readonly RULE_groupingTerm = 34;
    public static readonly RULE_windowDefinition = 35;
    public static readonly RULE_windowSpecification = 36;
    public static readonly RULE_namedQuery = 37;
    public static readonly RULE_setQuantifier = 38;
    public static readonly RULE_selectItem = 39;
    public static readonly RULE_selectAllWithoutTable = 40;
    public static readonly RULE_tableAllColumns = 41;
    public static readonly RULE_selectLiteralColumnName = 42;
    public static readonly RULE_selectExpressionColumnName = 43;
    public static readonly RULE_relation = 44;
    public static readonly RULE_joinType = 45;
    public static readonly RULE_joinCriteria = 46;
    public static readonly RULE_sampledRelation = 47;
    public static readonly RULE_sampleType = 48;
    public static readonly RULE_trimsSpecification = 49;
    public static readonly RULE_listAggOverflowBehavior = 50;
    public static readonly RULE_listAggCountIndication = 51;
    public static readonly RULE_patternRecognition = 52;
    public static readonly RULE_measureDefinition = 53;
    public static readonly RULE_rowsPerMatch = 54;
    public static readonly RULE_emptyMatchHandling = 55;
    public static readonly RULE_skipTo = 56;
    public static readonly RULE_subsetDefinition = 57;
    public static readonly RULE_variableDefinition = 58;
    public static readonly RULE_aliasedRelation = 59;
    public static readonly RULE_columnListCreate = 60;
    public static readonly RULE_columnList = 61;
    public static readonly RULE_columnAliases = 62;
    public static readonly RULE_relationPrimary = 63;
    public static readonly RULE_relationSourceTable = 64;
    public static readonly RULE_jsonTableColumn = 65;
    public static readonly RULE_jsonTableSpecificPlan = 66;
    public static readonly RULE_jsonTablePathName = 67;
    public static readonly RULE_planPrimary = 68;
    public static readonly RULE_jsonTableDefaultPlan = 69;
    public static readonly RULE_tableFunctionCall = 70;
    public static readonly RULE_tableFunctionArgument = 71;
    public static readonly RULE_tableArgument = 72;
    public static readonly RULE_tableArgumentRelation = 73;
    public static readonly RULE_descriptorArgument = 74;
    public static readonly RULE_descriptorField = 75;
    public static readonly RULE_coPartitionTables = 76;
    public static readonly RULE_expression = 77;
    public static readonly RULE_booleanExpression = 78;
    public static readonly RULE_predicate = 79;
    public static readonly RULE_valueExpression = 80;
    public static readonly RULE_primaryExpression = 81;
    public static readonly RULE_jsonPathInvocation = 82;
    public static readonly RULE_jsonValueExpression = 83;
    public static readonly RULE_jsonRepresentation = 84;
    public static readonly RULE_jsonArgument = 85;
    public static readonly RULE_jsonExistsErrorBehavior = 86;
    public static readonly RULE_jsonValueBehavior = 87;
    public static readonly RULE_jsonQueryWrapperBehavior = 88;
    public static readonly RULE_jsonQueryBehavior = 89;
    public static readonly RULE_jsonObjectMember = 90;
    public static readonly RULE_processingMode = 91;
    public static readonly RULE_nullTreatment = 92;
    public static readonly RULE_string = 93;
    public static readonly RULE_timeZoneSpecifier = 94;
    public static readonly RULE_comparisonOperator = 95;
    public static readonly RULE_comparisonQuantifier = 96;
    public static readonly RULE_booleanValue = 97;
    public static readonly RULE_interval = 98;
    public static readonly RULE_intervalField = 99;
    public static readonly RULE_normalForm = 100;
    public static readonly RULE_type = 101;
    public static readonly RULE_rowField = 102;
    public static readonly RULE_typeParameter = 103;
    public static readonly RULE_whenClause = 104;
    public static readonly RULE_filter = 105;
    public static readonly RULE_mergeCase = 106;
    public static readonly RULE_over = 107;
    public static readonly RULE_windowFrame = 108;
    public static readonly RULE_frameExtent = 109;
    public static readonly RULE_frameBound = 110;
    public static readonly RULE_rowPattern = 111;
    public static readonly RULE_patternPrimary = 112;
    public static readonly RULE_patternQuantifier = 113;
    public static readonly RULE_updateAssignment = 114;
    public static readonly RULE_explainOption = 115;
    public static readonly RULE_transactionMode = 116;
    public static readonly RULE_levelOfIsolation = 117;
    public static readonly RULE_callArgument = 118;
    public static readonly RULE_pathElement = 119;
    public static readonly RULE_pathSpecification = 120;
    public static readonly RULE_functionSpecification = 121;
    public static readonly RULE_functionDeclaration = 122;
    public static readonly RULE_functionSignature = 123;
    public static readonly RULE_parameterDeclaration = 124;
    public static readonly RULE_returnsClause = 125;
    public static readonly RULE_routineCharacteristic = 126;
    public static readonly RULE_controlStatement = 127;
    public static readonly RULE_caseStatementWhenClause = 128;
    public static readonly RULE_elseIfClause = 129;
    public static readonly RULE_elseClause = 130;
    public static readonly RULE_variableDeclaration = 131;
    public static readonly RULE_sqlStatementList = 132;
    public static readonly RULE_privilege = 133;
    public static readonly RULE_entityKind = 134;
    public static readonly RULE_grantObject = 135;
    public static readonly RULE_tableOrViewName = 136;
    public static readonly RULE_tableRef = 137;
    public static readonly RULE_tableNameCreate = 138;
    public static readonly RULE_viewRef = 139;
    public static readonly RULE_viewNameCreate = 140;
    public static readonly RULE_schemaRef = 141;
    public static readonly RULE_schemaNameCreate = 142;
    public static readonly RULE_catalogRef = 143;
    public static readonly RULE_catalogNameCreate = 144;
    public static readonly RULE_functionName = 145;
    public static readonly RULE_functionNameCreate = 146;
    public static readonly RULE_columnRef = 147;
    public static readonly RULE_columnName = 148;
    public static readonly RULE_columnNameCreate = 149;
    public static readonly RULE_qualifiedName = 150;
    public static readonly RULE_queryPeriod = 151;
    public static readonly RULE_rangeType = 152;
    public static readonly RULE_grantor = 153;
    public static readonly RULE_principal = 154;
    public static readonly RULE_roles = 155;
    public static readonly RULE_privilegeOrRole = 156;
    public static readonly RULE_identifier = 157;
    public static readonly RULE_number = 158;
    public static readonly RULE_authorizationUser = 159;
    public static readonly RULE_nonReserved = 160;

    public static readonly literalNames = [
        null, "'('", "')'", "','", "'.'", "'SKIP'", "'=>'", "'->'", "'['", 
        "']'", "':'", "'|'", "'^'", "'$'", "'{-'", "'-}'", "'{'", "'}'", 
        "'ABSENT'", "'ADD'", "'ADMIN'", "'AFTER'", "'ALL'", "'ALTER'", "'ANALYZE'", 
        "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", 
        "'BEGIN'", "'BERNOULLI'", "'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", 
        "'CALLED'", "'CASCADE'", "'CASE'", "'CAST'", "'CATALOG'", "'CATALOGS'", 
        "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMMITTED'", 
        "'CONDITIONAL'", "'CONSTRAINT'", "'COUNT'", "'COPARTITION'", "'CREATE'", 
        "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_CATALOG'", "'CURRENT_DATE'", 
        "'CURRENT_PATH'", "'CURRENT_ROLE'", "'CURRENT_SCHEMA'", "'CURRENT_TIME'", 
        "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DATA'", "'DATE'", "'DAY'", 
        "'DEALLOCATE'", "'DECLARE'", "'DEFAULT'", "'DEFINE'", "'DEFINER'", 
        "'DELETE'", "'DENY'", "'DESC'", "'DESCRIBE'", "'DESCRIPTOR'", "'DETERMINISTIC'", 
        "'DISTINCT'", "'DISTRIBUTED'", "'DO'", "'DOUBLE'", "'DROP'", "'ELSE'", 
        "'EMPTY'", "'ELSEIF'", "'ENCODING'", "'END'", "'ERROR'", "'ESCAPE'", 
        "'EXCEPT'", "'EXCLUDING'", "'EXECUTE'", "'EXISTS'", "'EXPLAIN'", 
        "'EXTRACT'", "'FALSE'", "'FETCH'", "'FILTER'", "'FINAL'", "'FIRST'", 
        "'FOLLOWING'", "'FOR'", "'FORMAT'", "'FROM'", "'FULL'", "'FUNCTION'", 
        "'FUNCTIONS'", "'GRACE'", "'GRANT'", "'GRANTED'", "'GRANTS'", "'GRAPHVIZ'", 
        "'GROUP'", "'GROUPING'", "'GROUPS'", "'HAVING'", "'HOUR'", "'IF'", 
        "'IGNORE'", "'IMMEDIATE'", "'IN'", "'INCLUDING'", "'INITIAL'", "'INNER'", 
        "'INPUT'", "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INTO'", "'INVOKER'", 
        "'IO'", "'IS'", "'ISOLATION'", "'ITERATE'", "'JOIN'", "'JSON'", 
        "'JSON_ARRAY'", "'JSON_EXISTS'", "'JSON_OBJECT'", "'JSON_QUERY'", 
        "'JSON_TABLE'", "'JSON_VALUE'", "'KEEP'", "'KEY'", "'KEYS'", "'LANGUAGE'", 
        "'LAST'", "'LATERAL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LEVEL'", 
        "'LIKE'", "'LIMIT'", "'LISTAGG'", "'LOCAL'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
        "'LOGICAL'", "'LOOP'", "'MAP'", "'MATCH'", "'MATCHED'", "'MATCHES'", 
        "'MATCH_RECOGNIZE'", "'MATERIALIZED'", "'MEASURES'", "'MERGE'", 
        "'MINUTE'", "'MONTH'", "'NATURAL'", "'NESTED'", "'NEXT'", "'NFC'", 
        "'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NONE'", "'NORMALIZE'", "'NOT'", 
        "'NULL'", "'NULLIF'", "'NULLS'", "'OBJECT'", "'OF'", "'OFFSET'", 
        "'OMIT'", "'ON'", "'ONE'", "'ONLY'", "'OPTION'", "'OR'", "'ORDER'", 
        "'ORDINALITY'", "'OUTER'", "'OUTPUT'", "'OVER'", "'OVERFLOW'", "'PARTITION'", 
        "'PARTITIONS'", "'PASSING'", "'PAST'", "'PATH'", "'PATTERN'", "'PER'", 
        "'PERIOD'", "'PERMUTE'", "'PLAN'", "'POSITION'", "'PRECEDING'", 
        "'PRECISION'", "'PREPARE'", "'PRIVILEGES'", "'PROPERTIES'", "'PRUNE'", 
        "'QUOTES'", "'RANGE'", "'READ'", "'RECURSIVE'", "'REFRESH'", "'RENAME'", 
        "'REPEAT'", "'REPEATABLE'", "'REPLACE'", "'RESET'", "'RESPECT'", 
        "'RESTRICT'", "'RETURN'", "'RETURNING'", "'RETURNS'", "'REVOKE'", 
        "'RIGHT'", "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", 
        "'ROWS'", "'RUNNING'", "'SCALAR'", "'SCHEMA'", "'SCHEMAS'", "'SECOND'", 
        "'SECURITY'", "'SEEK'", "'SELECT'", "'SERIALIZABLE'", "'SESSION'", 
        "'SET'", "'SETS'", "'SHOW'", "'SOME'", "'START'", "'STATS'", "'SUBSET'", 
        "'SUBSTRING'", "'SYSTEM'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", 
        "'TEXT'", "'STRING'", "'THEN'", "'TIES'", "'TIME'", "'TIMESTAMP'", 
        "'TO'", "'TRAILING'", "'TRANSACTION'", "'TRIM'", "'TRUE'", "'TRUNCATE'", 
        "'TRY_CAST'", "'TYPE'", "'UESCAPE'", "'UNBOUNDED'", "'UNCOMMITTED'", 
        "'UNCONDITIONAL'", "'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNMATCHED'", 
        "'UNNEST'", "'UNTIL'", "'UPDATE'", "'USE'", "'USER'", "'USING'", 
        "'UTF16'", "'UTF32'", "'UTF8'", "'VALIDATE'", "'VALUE'", "'VALUES'", 
        "'VERBOSE'", "'VERSION'", "'VIEW'", "'WHEN'", "'WHERE'", "'WHILE'", 
        "'WINDOW'", "'WITH'", "'WITHIN'", "'WITHOUT'", "'WORK'", "'WRAPPER'", 
        "'WRITE'", "'YEAR'", "'ZONE'", "'='", null, "'<'", "'<='", "'>'", 
        "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'||'", "'?'", "';'"
    ];

    public static readonly symbolicNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, "KW_ABSENT", "KW_ADD", 
        "KW_ADMIN", "KW_AFTER", "KW_ALL", "KW_ALTER", "KW_ANALYZE", "KW_AND", 
        "KW_ANY", "KW_ARRAY", "KW_AS", "KW_ASC", "KW_AT", "KW_AUTHORIZATION", 
        "KW_BEGIN", "KW_BERNOULLI", "KW_BETWEEN", "KW_BOTH", "KW_BY", "KW_CALL", 
        "KW_CALLED", "KW_CASCADE", "KW_CASE", "KW_CAST", "KW_CATALOG", "KW_CATALOGS", 
        "KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMMIT", "KW_COMMITTED", 
        "KW_CONDITIONAL", "KW_CONSTRAINT", "KW_COUNT", "KW_COPARTITION", 
        "KW_CREATE", "KW_CROSS", "KW_CUBE", "KW_CURRENT", "KW_CURRENT_CATALOG", 
        "KW_CURRENT_DATE", "KW_CURRENT_PATH", "KW_CURRENT_ROLE", "KW_CURRENT_SCHEMA", 
        "KW_CURRENT_TIME", "KW_CURRENT_TIMESTAMP", "KW_CURRENT_USER", "KW_DATA", 
        "KW_DATE", "KW_DAY", "KW_DEALLOCATE", "KW_DECLARE", "KW_DEFAULT", 
        "KW_DEFINE", "KW_DEFINER", "KW_DELETE", "KW_DENY", "KW_DESC", "KW_DESCRIBE", 
        "KW_DESCRIPTOR", "KW_DETERMINISTIC", "KW_DISTINCT", "KW_DISTRIBUTED", 
        "KW_DO", "KW_DOUBLE", "KW_DROP", "KW_ELSE", "KW_EMPTY", "KW_ELSEIF", 
        "KW_ENCODING", "KW_END", "KW_ERROR", "KW_ESCAPE", "KW_EXCEPT", "KW_EXCLUDING", 
        "KW_EXECUTE", "KW_EXISTS", "KW_EXPLAIN", "KW_EXTRACT", "KW_FALSE", 
        "KW_FETCH", "KW_FILTER", "KW_FINAL", "KW_FIRST", "KW_FOLLOWING", 
        "KW_FOR", "KW_FORMAT", "KW_FROM", "KW_FULL", "KW_FUNCTION", "KW_FUNCTIONS", 
        "KW_GRACE", "KW_GRANT", "KW_GRANTED", "KW_GRANTS", "KW_GRAPHVIZ", 
        "KW_GROUP", "KW_GROUPING", "KW_GROUPS", "KW_HAVING", "KW_HOUR", 
        "KW_IF", "KW_IGNORE", "KW_IMMEDIATE", "KW_IN", "KW_INCLUDING", "KW_INITIAL", 
        "KW_INNER", "KW_INPUT", "KW_INSERT", "KW_INTERSECT", "KW_INTERVAL", 
        "KW_INTO", "KW_INVOKER", "KW_IO", "KW_IS", "KW_ISOLATION", "KW_ITERATE", 
        "KW_JOIN", "KW_JSON", "KW_JSON_ARRAY", "KW_JSON_EXISTS", "KW_JSON_OBJECT", 
        "KW_JSON_QUERY", "KW_JSON_TABLE", "KW_JSON_VALUE", "KW_KEEP", "KW_KEY", 
        "KW_KEYS", "KW_LANGUAGE", "KW_LAST", "KW_LATERAL", "KW_LEADING", 
        "KW_LEAVE", "KW_LEFT", "KW_LEVEL", "KW_LIKE", "KW_LIMIT", "KW_LISTAGG", 
        "KW_LOCAL", "KW_LOCALTIME", "KW_LOCALTIMESTAMP", "KW_LOGICAL", "KW_LOOP", 
        "KW_MAP", "KW_MATCH", "KW_MATCHED", "KW_MATCHES", "KW_MATCH_RECOGNIZE", 
        "KW_MATERIALIZED", "KW_MEASURES", "KW_MERGE", "KW_MINUTE", "KW_MONTH", 
        "KW_NATURAL", "KW_NESTED", "KW_NEXT", "KW_NFC", "KW_NFD", "KW_NFKC", 
        "KW_NFKD", "KW_NO", "KW_NONE", "KW_NORMALIZE", "KW_NOT", "KW_NULL", 
        "KW_NULLIF", "KW_NULLS", "KW_OBJECT", "KW_OF", "KW_OFFSET", "KW_OMIT", 
        "KW_ON", "KW_ONE", "KW_ONLY", "KW_OPTION", "KW_OR", "KW_ORDER", 
        "KW_ORDINALITY", "KW_OUTER", "KW_OUTPUT", "KW_OVER", "KW_OVERFLOW", 
        "KW_PARTITION", "KW_PARTITIONS", "KW_PASSING", "KW_PAST", "KW_PATH", 
        "KW_PATTERN", "KW_PER", "KW_PERIOD", "KW_PERMUTE", "KW_PLAN", "KW_POSITION", 
        "KW_PRECEDING", "KW_PRECISION", "KW_PREPARE", "KW_PRIVILEGES", "KW_PROPERTIES", 
        "KW_PRUNE", "KW_QUOTES", "KW_RANGE", "KW_READ", "KW_RECURSIVE", 
        "KW_REFRESH", "KW_RENAME", "KW_REPEAT", "KW_REPEATABLE", "KW_REPLACE", 
        "KW_RESET", "KW_RESPECT", "KW_RESTRICT", "KW_RETURN", "KW_RETURNING", 
        "KW_RETURNS", "KW_REVOKE", "KW_RIGHT", "KW_ROLE", "KW_ROLES", "KW_ROLLBACK", 
        "KW_ROLLUP", "KW_ROW", "KW_ROWS", "KW_RUNNING", "KW_SCALAR", "KW_SCHEMA", 
        "KW_SCHEMAS", "KW_SECOND", "KW_SECURITY", "KW_SEEK", "KW_SELECT", 
        "KW_SERIALIZABLE", "KW_SESSION", "KW_SET", "KW_SETS", "KW_SHOW", 
        "KW_SOME", "KW_START", "KW_STATS", "KW_SUBSET", "KW_SUBSTRING", 
        "KW_SYSTEM", "KW_TABLE", "KW_TABLES", "KW_TABLESAMPLE", "KW_TEXT", 
        "KW_TEXT_STRING", "KW_THEN", "KW_TIES", "KW_TIME", "KW_TIMESTAMP", 
        "KW_TO", "KW_TRAILING", "KW_TRANSACTION", "KW_TRIM", "KW_TRUE", 
        "KW_TRUNCATE", "KW_TRY_CAST", "KW_TYPE", "KW_UESCAPE", "KW_UNBOUNDED", 
        "KW_UNCOMMITTED", "KW_UNCONDITIONAL", "KW_UNION", "KW_UNIQUE", "KW_UNKNOWN", 
        "KW_UNMATCHED", "KW_UNNEST", "KW_UNTIL", "KW_UPDATE", "KW_USE", 
        "KW_USER", "KW_USING", "KW_UTF16", "KW_UTF32", "KW_UTF8", "KW_VALIDATE", 
        "KW_VALUE", "KW_VALUES", "KW_VERBOSE", "KW_VERSION", "KW_VIEW", 
        "KW_WHEN", "KW_WHERE", "KW_WHILE", "KW_WINDOW", "KW_WITH", "KW_WITHIN", 
        "KW_WITHOUT", "KW_WORK", "KW_WRAPPER", "KW_WRITE", "KW_YEAR", "KW_ZONE", 
        "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", "ASTERISK", 
        "SLASH", "PERCENT", "CONCAT", "QUESTION_MARK", "SEMICOLON", "STRING", 
        "UNICODE_STRING", "BINARY_LITERAL", "INTEGER_VALUE", "DECIMAL_VALUE", 
        "DOUBLE_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", 
        "BACKQUOTED_IDENTIFIER", "LINE_COMMENT", "BRACKETED_COMMENT", "WHITE_SPACE", 
        "UNRECOGNIZED", "DELIMITER"
    ];
    public static readonly ruleNames = [
        "program", "statements", "singleStatement", "standaloneExpression", 
        "standalonePathSpecification", "standaloneType", "standaloneRowPattern", 
        "standaloneFunctionSpecification", "statement", "rootQuery", "withFunction", 
        "query", "with", "tableElement", "columnDefinition", "likeClause", 
        "properties", "propertyAssignments", "property", "propertyValue", 
        "queryNoWith", "limitRowCount", "rowCount", "queryTerm", "queryPrimary", 
        "sortItem", "querySpecification", "whereClause", "havingClause", 
        "selectList", "groupBy", "partitionBy", "groupingElement", "groupingSet", 
        "groupingTerm", "windowDefinition", "windowSpecification", "namedQuery", 
        "setQuantifier", "selectItem", "selectAllWithoutTable", "tableAllColumns", 
        "selectLiteralColumnName", "selectExpressionColumnName", "relation", 
        "joinType", "joinCriteria", "sampledRelation", "sampleType", "trimsSpecification", 
        "listAggOverflowBehavior", "listAggCountIndication", "patternRecognition", 
        "measureDefinition", "rowsPerMatch", "emptyMatchHandling", "skipTo", 
        "subsetDefinition", "variableDefinition", "aliasedRelation", "columnListCreate", 
        "columnList", "columnAliases", "relationPrimary", "relationSourceTable", 
        "jsonTableColumn", "jsonTableSpecificPlan", "jsonTablePathName", 
        "planPrimary", "jsonTableDefaultPlan", "tableFunctionCall", "tableFunctionArgument", 
        "tableArgument", "tableArgumentRelation", "descriptorArgument", 
        "descriptorField", "coPartitionTables", "expression", "booleanExpression", 
        "predicate", "valueExpression", "primaryExpression", "jsonPathInvocation", 
        "jsonValueExpression", "jsonRepresentation", "jsonArgument", "jsonExistsErrorBehavior", 
        "jsonValueBehavior", "jsonQueryWrapperBehavior", "jsonQueryBehavior", 
        "jsonObjectMember", "processingMode", "nullTreatment", "string", 
        "timeZoneSpecifier", "comparisonOperator", "comparisonQuantifier", 
        "booleanValue", "interval", "intervalField", "normalForm", "type", 
        "rowField", "typeParameter", "whenClause", "filter", "mergeCase", 
        "over", "windowFrame", "frameExtent", "frameBound", "rowPattern", 
        "patternPrimary", "patternQuantifier", "updateAssignment", "explainOption", 
        "transactionMode", "levelOfIsolation", "callArgument", "pathElement", 
        "pathSpecification", "functionSpecification", "functionDeclaration", 
        "functionSignature", "parameterDeclaration", "returnsClause", "routineCharacteristic", 
        "controlStatement", "caseStatementWhenClause", "elseIfClause", "elseClause", 
        "variableDeclaration", "sqlStatementList", "privilege", "entityKind", 
        "grantObject", "tableOrViewName", "tableRef", "tableNameCreate", 
        "viewRef", "viewNameCreate", "schemaRef", "schemaNameCreate", "catalogRef", 
        "catalogNameCreate", "functionName", "functionNameCreate", "columnRef", 
        "columnName", "columnNameCreate", "qualifiedName", "queryPeriod", 
        "rangeType", "grantor", "principal", "roles", "privilegeOrRole", 
        "identifier", "number", "authorizationUser", "nonReserved",
    ];

    public get grammarFileName(): string { return "TrinoSql.g4"; }
    public get literalNames(): (string | null)[] { return TrinoSqlParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return TrinoSqlParser.symbolicNames; }
    public get ruleNames(): string[] { return TrinoSqlParser.ruleNames; }
    public get serializedATN(): number[] { return TrinoSqlParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, TrinoSqlParser._ATN, TrinoSqlParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public program(): ProgramContext {
        let localContext = new ProgramContext(this.context, this.state);
        this.enterRule(localContext, 0, TrinoSqlParser.RULE_program);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 325;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 25165826) !== 0) || ((((_la - 37)) & ~0x1F) === 0 && ((1 << (_la - 37)) & 2147550721) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & 5243919) !== 0) || _la === 110 || _la === 127 || _la === 169 || ((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & 8921345) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & 67113129) !== 0) || ((((_la - 287)) & ~0x1F) === 0 && ((1 << (_la - 287)) & 131587) !== 0)) {
                {
                {
                this.state = 322;
                this.statements();
                }
                }
                this.state = 327;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 328;
            this.match(TrinoSqlParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statements(): StatementsContext {
        let localContext = new StatementsContext(this.context, this.state);
        this.enterRule(localContext, 2, TrinoSqlParser.RULE_statements);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 330;
            this.singleStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleStatement(): SingleStatementContext {
        let localContext = new SingleStatementContext(this.context, this.state);
        this.enterRule(localContext, 4, TrinoSqlParser.RULE_singleStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 332;
            this.statement();
            this.state = 334;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 325) {
                {
                this.state = 333;
                this.match(TrinoSqlParser.SEMICOLON);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneExpression(): StandaloneExpressionContext {
        let localContext = new StandaloneExpressionContext(this.context, this.state);
        this.enterRule(localContext, 6, TrinoSqlParser.RULE_standaloneExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 336;
            this.expression();
            this.state = 338;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 325) {
                {
                this.state = 337;
                this.match(TrinoSqlParser.SEMICOLON);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standalonePathSpecification(): StandalonePathSpecificationContext {
        let localContext = new StandalonePathSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 8, TrinoSqlParser.RULE_standalonePathSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 340;
            this.pathSpecification();
            this.state = 342;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 325) {
                {
                this.state = 341;
                this.match(TrinoSqlParser.SEMICOLON);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneType(): StandaloneTypeContext {
        let localContext = new StandaloneTypeContext(this.context, this.state);
        this.enterRule(localContext, 10, TrinoSqlParser.RULE_standaloneType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 344;
            this.type_(0);
            this.state = 346;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 325) {
                {
                this.state = 345;
                this.match(TrinoSqlParser.SEMICOLON);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneRowPattern(): StandaloneRowPatternContext {
        let localContext = new StandaloneRowPatternContext(this.context, this.state);
        this.enterRule(localContext, 12, TrinoSqlParser.RULE_standaloneRowPattern);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 348;
            this.rowPattern(0);
            this.state = 350;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 325) {
                {
                this.state = 349;
                this.match(TrinoSqlParser.SEMICOLON);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public standaloneFunctionSpecification(): StandaloneFunctionSpecificationContext {
        let localContext = new StandaloneFunctionSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 14, TrinoSqlParser.RULE_standaloneFunctionSpecification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 352;
            this.functionSpecification();
            this.state = 353;
            this.match(TrinoSqlParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 16, TrinoSqlParser.RULE_statement);
        let _la: number;
        try {
            this.state = 1250;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 125, this.context) ) {
            case 1:
                localContext = new StatementDefaultContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 355;
                this.rootQuery();
                }
                break;
            case 2:
                localContext = new UseContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 356;
                this.match(TrinoSqlParser.KW_USE);
                this.state = 357;
                this.schemaRef();
                }
                break;
            case 3:
                localContext = new CreateCatalogContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 358;
                this.match(TrinoSqlParser.KW_CREATE);
                this.state = 359;
                this.match(TrinoSqlParser.KW_CATALOG);
                this.state = 363;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 6, this.context) ) {
                case 1:
                    {
                    this.state = 360;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 361;
                    this.match(TrinoSqlParser.KW_NOT);
                    this.state = 362;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 365;
                (localContext as CreateCatalogContext)._catalog = this.catalogNameCreate();
                this.state = 366;
                this.match(TrinoSqlParser.KW_USING);
                this.state = 367;
                (localContext as CreateCatalogContext)._connectorName = this.identifier();
                this.state = 370;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 7, this.context) ) {
                case 1:
                    {
                    this.state = 368;
                    this.match(TrinoSqlParser.KW_COMMENT);
                    this.state = 369;
                    this.string_();
                    }
                    break;
                }
                this.state = 374;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 31) {
                    {
                    this.state = 372;
                    this.match(TrinoSqlParser.KW_AUTHORIZATION);
                    this.state = 373;
                    this.principal();
                    }
                }

                this.state = 378;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 9, this.context) ) {
                case 1:
                    {
                    this.state = 376;
                    this.match(TrinoSqlParser.KW_WITH);
                    this.state = 377;
                    this.properties();
                    }
                    break;
                }
                }
                break;
            case 4:
                localContext = new DropCatalogContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 380;
                this.match(TrinoSqlParser.KW_DROP);
                this.state = 381;
                this.match(TrinoSqlParser.KW_CATALOG);
                this.state = 384;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 10, this.context) ) {
                case 1:
                    {
                    this.state = 382;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 383;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 386;
                (localContext as DropCatalogContext)._catalog = this.catalogRef();
                this.state = 388;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 39 || _la === 229) {
                    {
                    this.state = 387;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 39 || _la === 229)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 5:
                localContext = new CreateSchemaContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 390;
                this.match(TrinoSqlParser.KW_CREATE);
                this.state = 391;
                this.match(TrinoSqlParser.KW_SCHEMA);
                this.state = 395;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 12, this.context) ) {
                case 1:
                    {
                    this.state = 392;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 393;
                    this.match(TrinoSqlParser.KW_NOT);
                    this.state = 394;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 397;
                this.schemaNameCreate();
                this.state = 400;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 31) {
                    {
                    this.state = 398;
                    this.match(TrinoSqlParser.KW_AUTHORIZATION);
                    this.state = 399;
                    this.principal();
                    }
                }

                this.state = 404;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 14, this.context) ) {
                case 1:
                    {
                    this.state = 402;
                    this.match(TrinoSqlParser.KW_WITH);
                    this.state = 403;
                    this.properties();
                    }
                    break;
                }
                }
                break;
            case 6:
                localContext = new DropSchemaContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 406;
                this.match(TrinoSqlParser.KW_DROP);
                this.state = 407;
                this.match(TrinoSqlParser.KW_SCHEMA);
                this.state = 410;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 15, this.context) ) {
                case 1:
                    {
                    this.state = 408;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 409;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 412;
                this.schemaRef();
                this.state = 414;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 39 || _la === 229) {
                    {
                    this.state = 413;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 39 || _la === 229)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 7:
                localContext = new RenameSchemaContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 416;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 417;
                this.match(TrinoSqlParser.KW_SCHEMA);
                this.state = 418;
                this.schemaRef();
                this.state = 419;
                this.match(TrinoSqlParser.KW_RENAME);
                this.state = 420;
                this.match(TrinoSqlParser.KW_TO);
                this.state = 421;
                this.schemaNameCreate();
                }
                break;
            case 8:
                localContext = new SetSchemaAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 423;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 424;
                this.match(TrinoSqlParser.KW_SCHEMA);
                this.state = 425;
                this.schemaRef();
                this.state = 426;
                this.match(TrinoSqlParser.KW_SET);
                this.state = 427;
                this.match(TrinoSqlParser.KW_AUTHORIZATION);
                this.state = 428;
                this.principal();
                }
                break;
            case 9:
                localContext = new CreateTableAsSelectContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 430;
                this.match(TrinoSqlParser.KW_CREATE);
                this.state = 433;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 431;
                    this.match(TrinoSqlParser.KW_OR);
                    this.state = 432;
                    this.match(TrinoSqlParser.KW_REPLACE);
                    }
                }

                this.state = 435;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 439;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 18, this.context) ) {
                case 1:
                    {
                    this.state = 436;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 437;
                    this.match(TrinoSqlParser.KW_NOT);
                    this.state = 438;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 441;
                this.tableNameCreate();
                this.state = 443;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1) {
                    {
                    this.state = 442;
                    this.columnListCreate();
                    }
                }

                this.state = 447;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 46) {
                    {
                    this.state = 445;
                    this.match(TrinoSqlParser.KW_COMMENT);
                    this.state = 446;
                    (localContext as CreateTableAsSelectContext)._comment = this.string_();
                    }
                }

                this.state = 451;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 449;
                    this.match(TrinoSqlParser.KW_WITH);
                    this.state = 450;
                    this.properties();
                    }
                }

                this.state = 453;
                this.match(TrinoSqlParser.KW_AS);
                this.state = 459;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 22, this.context) ) {
                case 1:
                    {
                    this.state = 454;
                    this.rootQuery();
                    }
                    break;
                case 2:
                    {
                    this.state = 455;
                    this.match(TrinoSqlParser.T__0);
                    this.state = 456;
                    this.rootQuery();
                    this.state = 457;
                    this.match(TrinoSqlParser.T__1);
                    }
                    break;
                }
                this.state = 466;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 24, this.context) ) {
                case 1:
                    {
                    this.state = 461;
                    this.match(TrinoSqlParser.KW_WITH);
                    this.state = 463;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 179) {
                        {
                        this.state = 462;
                        this.match(TrinoSqlParser.KW_NO);
                        }
                    }

                    this.state = 465;
                    this.match(TrinoSqlParser.KW_DATA);
                    }
                    break;
                }
                }
                break;
            case 10:
                localContext = new CreateTableContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 468;
                this.match(TrinoSqlParser.KW_CREATE);
                this.state = 471;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 469;
                    this.match(TrinoSqlParser.KW_OR);
                    this.state = 470;
                    this.match(TrinoSqlParser.KW_REPLACE);
                    }
                }

                this.state = 473;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 477;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 26, this.context) ) {
                case 1:
                    {
                    this.state = 474;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 475;
                    this.match(TrinoSqlParser.KW_NOT);
                    this.state = 476;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 479;
                this.tableNameCreate();
                this.state = 480;
                this.match(TrinoSqlParser.T__0);
                this.state = 481;
                this.tableElement();
                this.state = 486;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 482;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 483;
                    this.tableElement();
                    }
                    }
                    this.state = 488;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 489;
                this.match(TrinoSqlParser.T__1);
                this.state = 492;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 28, this.context) ) {
                case 1:
                    {
                    this.state = 490;
                    this.match(TrinoSqlParser.KW_COMMENT);
                    this.state = 491;
                    (localContext as CreateTableContext)._comment = this.string_();
                    }
                    break;
                }
                this.state = 496;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 29, this.context) ) {
                case 1:
                    {
                    this.state = 494;
                    this.match(TrinoSqlParser.KW_WITH);
                    this.state = 495;
                    this.properties();
                    }
                    break;
                }
                }
                break;
            case 11:
                localContext = new DropTableContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 498;
                this.match(TrinoSqlParser.KW_DROP);
                this.state = 499;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 502;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 30, this.context) ) {
                case 1:
                    {
                    this.state = 500;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 501;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 504;
                this.tableRef();
                }
                break;
            case 12:
                localContext = new InsertIntoContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 505;
                this.match(TrinoSqlParser.KW_INSERT);
                this.state = 506;
                this.match(TrinoSqlParser.KW_INTO);
                this.state = 507;
                this.tableRef();
                this.state = 509;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 31, this.context) ) {
                case 1:
                    {
                    this.state = 508;
                    this.columnList();
                    }
                    break;
                }
                this.state = 511;
                this.rootQuery();
                }
                break;
            case 13:
                localContext = new DeleteContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 513;
                this.match(TrinoSqlParser.KW_DELETE);
                this.state = 514;
                this.match(TrinoSqlParser.KW_FROM);
                this.state = 515;
                this.tableRef();
                this.state = 517;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 301) {
                    {
                    this.state = 516;
                    this.whereClause();
                    }
                }

                }
                break;
            case 14:
                localContext = new TruncateTableContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 519;
                this.match(TrinoSqlParser.KW_TRUNCATE);
                this.state = 520;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 521;
                this.tableRef();
                }
                break;
            case 15:
                localContext = new CommentTableContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 522;
                this.match(TrinoSqlParser.KW_COMMENT);
                this.state = 523;
                this.match(TrinoSqlParser.KW_ON);
                this.state = 524;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 525;
                this.tableRef();
                this.state = 526;
                this.match(TrinoSqlParser.KW_IS);
                this.state = 529;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoSqlParser.STRING:
                case TrinoSqlParser.UNICODE_STRING:
                    {
                    this.state = 527;
                    this.string_();
                    }
                    break;
                case TrinoSqlParser.KW_NULL:
                    {
                    this.state = 528;
                    this.match(TrinoSqlParser.KW_NULL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 16:
                localContext = new CommentViewContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 531;
                this.match(TrinoSqlParser.KW_COMMENT);
                this.state = 532;
                this.match(TrinoSqlParser.KW_ON);
                this.state = 533;
                this.match(TrinoSqlParser.KW_VIEW);
                this.state = 534;
                this.viewRef();
                this.state = 535;
                this.match(TrinoSqlParser.KW_IS);
                this.state = 538;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoSqlParser.STRING:
                case TrinoSqlParser.UNICODE_STRING:
                    {
                    this.state = 536;
                    this.string_();
                    }
                    break;
                case TrinoSqlParser.KW_NULL:
                    {
                    this.state = 537;
                    this.match(TrinoSqlParser.KW_NULL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 17:
                localContext = new CommentColumnContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 540;
                this.match(TrinoSqlParser.KW_COMMENT);
                this.state = 541;
                this.match(TrinoSqlParser.KW_ON);
                this.state = 542;
                this.match(TrinoSqlParser.KW_COLUMN);
                this.state = 543;
                this.columnRef();
                this.state = 544;
                this.match(TrinoSqlParser.KW_IS);
                this.state = 547;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoSqlParser.STRING:
                case TrinoSqlParser.UNICODE_STRING:
                    {
                    this.state = 545;
                    this.string_();
                    }
                    break;
                case TrinoSqlParser.KW_NULL:
                    {
                    this.state = 546;
                    this.match(TrinoSqlParser.KW_NULL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 18:
                localContext = new RenameTableContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 549;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 550;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 553;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 36, this.context) ) {
                case 1:
                    {
                    this.state = 551;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 552;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 555;
                (localContext as RenameTableContext)._from_ = this.tableRef();
                this.state = 556;
                this.match(TrinoSqlParser.KW_RENAME);
                this.state = 557;
                this.match(TrinoSqlParser.KW_TO);
                this.state = 558;
                (localContext as RenameTableContext)._to = this.tableNameCreate();
                }
                break;
            case 19:
                localContext = new AddColumnContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 560;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 561;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 564;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 37, this.context) ) {
                case 1:
                    {
                    this.state = 562;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 563;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 566;
                (localContext as AddColumnContext)._tableName = this.tableRef();
                this.state = 567;
                this.match(TrinoSqlParser.KW_ADD);
                this.state = 568;
                this.match(TrinoSqlParser.KW_COLUMN);
                this.state = 572;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 38, this.context) ) {
                case 1:
                    {
                    this.state = 569;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 570;
                    this.match(TrinoSqlParser.KW_NOT);
                    this.state = 571;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 574;
                (localContext as AddColumnContext)._column = this.columnDefinition();
                }
                break;
            case 20:
                localContext = new RenameColumnContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 576;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 577;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 580;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 39, this.context) ) {
                case 1:
                    {
                    this.state = 578;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 579;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 582;
                (localContext as RenameColumnContext)._tableName = this.tableRef();
                this.state = 583;
                this.match(TrinoSqlParser.KW_RENAME);
                this.state = 584;
                this.match(TrinoSqlParser.KW_COLUMN);
                this.state = 587;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 40, this.context) ) {
                case 1:
                    {
                    this.state = 585;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 586;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 589;
                (localContext as RenameColumnContext)._from_ = this.columnRef();
                this.state = 590;
                this.match(TrinoSqlParser.KW_TO);
                this.state = 591;
                (localContext as RenameColumnContext)._to = this.columnNameCreate();
                }
                break;
            case 21:
                localContext = new DropColumnContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 593;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 594;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 597;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 41, this.context) ) {
                case 1:
                    {
                    this.state = 595;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 596;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 599;
                (localContext as DropColumnContext)._tableName = this.tableRef();
                this.state = 600;
                this.match(TrinoSqlParser.KW_DROP);
                this.state = 601;
                this.match(TrinoSqlParser.KW_COLUMN);
                this.state = 604;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 42, this.context) ) {
                case 1:
                    {
                    this.state = 602;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 603;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 606;
                (localContext as DropColumnContext)._column = this.columnRef();
                }
                break;
            case 22:
                localContext = new SetColumnTypeContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 608;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 609;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 612;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 43, this.context) ) {
                case 1:
                    {
                    this.state = 610;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 611;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 614;
                (localContext as SetColumnTypeContext)._tableName = this.tableRef();
                this.state = 615;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 616;
                this.match(TrinoSqlParser.KW_COLUMN);
                this.state = 617;
                (localContext as SetColumnTypeContext)._column = this.columnRef();
                this.state = 618;
                this.match(TrinoSqlParser.KW_SET);
                this.state = 619;
                this.match(TrinoSqlParser.KW_DATA);
                this.state = 620;
                this.match(TrinoSqlParser.KW_TYPE);
                this.state = 621;
                this.type_(0);
                }
                break;
            case 23:
                localContext = new DropNotNullConstraintContext(localContext);
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 623;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 624;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 627;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 44, this.context) ) {
                case 1:
                    {
                    this.state = 625;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 626;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 629;
                (localContext as DropNotNullConstraintContext)._tableName = this.tableRef();
                this.state = 630;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 631;
                this.match(TrinoSqlParser.KW_COLUMN);
                this.state = 632;
                (localContext as DropNotNullConstraintContext)._column = this.columnRef();
                this.state = 633;
                this.match(TrinoSqlParser.KW_DROP);
                this.state = 634;
                this.match(TrinoSqlParser.KW_NOT);
                this.state = 635;
                this.match(TrinoSqlParser.KW_NULL);
                }
                break;
            case 24:
                localContext = new SetTableAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 637;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 638;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 639;
                (localContext as SetTableAuthorizationContext)._tableName = this.tableRef();
                this.state = 640;
                this.match(TrinoSqlParser.KW_SET);
                this.state = 641;
                this.match(TrinoSqlParser.KW_AUTHORIZATION);
                this.state = 642;
                this.principal();
                }
                break;
            case 25:
                localContext = new SetTablePropertiesContext(localContext);
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 644;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 645;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 646;
                (localContext as SetTablePropertiesContext)._tableName = this.tableRef();
                this.state = 647;
                this.match(TrinoSqlParser.KW_SET);
                this.state = 648;
                this.match(TrinoSqlParser.KW_PROPERTIES);
                this.state = 649;
                this.propertyAssignments();
                }
                break;
            case 26:
                localContext = new TableExecuteContext(localContext);
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 651;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 652;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 653;
                (localContext as TableExecuteContext)._tableName = this.tableRef();
                this.state = 654;
                this.match(TrinoSqlParser.KW_EXECUTE);
                this.state = 655;
                (localContext as TableExecuteContext)._procedureName = this.functionName();
                this.state = 668;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 47, this.context) ) {
                case 1:
                    {
                    this.state = 656;
                    this.match(TrinoSqlParser.T__0);
                    this.state = 665;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326658) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4011589611) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 3538382319) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 1541142911) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4253015917) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 3758094335) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4024434665) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4286569983) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4008705783) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1618962301) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 4093) !== 0)) {
                        {
                        this.state = 657;
                        this.callArgument();
                        this.state = 662;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 3) {
                            {
                            {
                            this.state = 658;
                            this.match(TrinoSqlParser.T__2);
                            this.state = 659;
                            this.callArgument();
                            }
                            }
                            this.state = 664;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 667;
                    this.match(TrinoSqlParser.T__1);
                    }
                    break;
                }
                this.state = 671;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 301) {
                    {
                    this.state = 670;
                    this.whereClause();
                    }
                }

                }
                break;
            case 27:
                localContext = new AnalyzeContext(localContext);
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 673;
                this.match(TrinoSqlParser.KW_ANALYZE);
                this.state = 674;
                this.tableRef();
                this.state = 677;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 49, this.context) ) {
                case 1:
                    {
                    this.state = 675;
                    this.match(TrinoSqlParser.KW_WITH);
                    this.state = 676;
                    this.properties();
                    }
                    break;
                }
                }
                break;
            case 28:
                localContext = new CreateMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 679;
                this.match(TrinoSqlParser.KW_CREATE);
                this.state = 682;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 680;
                    this.match(TrinoSqlParser.KW_OR);
                    this.state = 681;
                    this.match(TrinoSqlParser.KW_REPLACE);
                    }
                }

                this.state = 684;
                this.match(TrinoSqlParser.KW_MATERIALIZED);
                this.state = 685;
                this.match(TrinoSqlParser.KW_VIEW);
                this.state = 689;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 51, this.context) ) {
                case 1:
                    {
                    this.state = 686;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 687;
                    this.match(TrinoSqlParser.KW_NOT);
                    this.state = 688;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 691;
                this.viewNameCreate();
                this.state = 695;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 692;
                    this.match(TrinoSqlParser.KW_GRACE);
                    this.state = 693;
                    this.match(TrinoSqlParser.KW_PERIOD);
                    this.state = 694;
                    this.interval();
                    }
                }

                this.state = 699;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 46) {
                    {
                    this.state = 697;
                    this.match(TrinoSqlParser.KW_COMMENT);
                    this.state = 698;
                    (localContext as CreateMaterializedViewContext)._comment = this.string_();
                    }
                }

                this.state = 703;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 701;
                    this.match(TrinoSqlParser.KW_WITH);
                    this.state = 702;
                    this.properties();
                    }
                }

                this.state = 705;
                this.match(TrinoSqlParser.KW_AS);
                this.state = 706;
                this.rootQuery();
                }
                break;
            case 29:
                localContext = new CreateViewContext(localContext);
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 708;
                this.match(TrinoSqlParser.KW_CREATE);
                this.state = 711;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 709;
                    this.match(TrinoSqlParser.KW_OR);
                    this.state = 710;
                    this.match(TrinoSqlParser.KW_REPLACE);
                    }
                }

                this.state = 713;
                this.match(TrinoSqlParser.KW_VIEW);
                this.state = 714;
                this.viewNameCreate();
                this.state = 717;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 46) {
                    {
                    this.state = 715;
                    this.match(TrinoSqlParser.KW_COMMENT);
                    this.state = 716;
                    (localContext as CreateViewContext)._comment = this.string_();
                    }
                }

                this.state = 721;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 246) {
                    {
                    this.state = 719;
                    this.match(TrinoSqlParser.KW_SECURITY);
                    this.state = 720;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 72 || _la === 131)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 725;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 723;
                    this.match(TrinoSqlParser.KW_WITH);
                    this.state = 724;
                    this.properties();
                    }
                }

                this.state = 727;
                this.match(TrinoSqlParser.KW_AS);
                this.state = 728;
                this.rootQuery();
                }
                break;
            case 30:
                localContext = new RefreshMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 730;
                this.match(TrinoSqlParser.KW_REFRESH);
                this.state = 731;
                this.match(TrinoSqlParser.KW_MATERIALIZED);
                this.state = 732;
                this.match(TrinoSqlParser.KW_VIEW);
                this.state = 733;
                this.viewRef();
                }
                break;
            case 31:
                localContext = new DropMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 734;
                this.match(TrinoSqlParser.KW_DROP);
                this.state = 735;
                this.match(TrinoSqlParser.KW_MATERIALIZED);
                this.state = 736;
                this.match(TrinoSqlParser.KW_VIEW);
                this.state = 739;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 59, this.context) ) {
                case 1:
                    {
                    this.state = 737;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 738;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 741;
                this.viewRef();
                }
                break;
            case 32:
                localContext = new RenameMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 742;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 743;
                this.match(TrinoSqlParser.KW_MATERIALIZED);
                this.state = 744;
                this.match(TrinoSqlParser.KW_VIEW);
                this.state = 747;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 60, this.context) ) {
                case 1:
                    {
                    this.state = 745;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 746;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 749;
                (localContext as RenameMaterializedViewContext)._from_ = this.viewRef();
                this.state = 750;
                this.match(TrinoSqlParser.KW_RENAME);
                this.state = 751;
                this.match(TrinoSqlParser.KW_TO);
                this.state = 752;
                (localContext as RenameMaterializedViewContext)._to = this.viewNameCreate();
                }
                break;
            case 33:
                localContext = new SetMaterializedViewPropertiesContext(localContext);
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 754;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 755;
                this.match(TrinoSqlParser.KW_MATERIALIZED);
                this.state = 756;
                this.match(TrinoSqlParser.KW_VIEW);
                this.state = 757;
                this.viewRef();
                this.state = 758;
                this.match(TrinoSqlParser.KW_SET);
                this.state = 759;
                this.match(TrinoSqlParser.KW_PROPERTIES);
                this.state = 760;
                this.propertyAssignments();
                }
                break;
            case 34:
                localContext = new DropViewContext(localContext);
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 762;
                this.match(TrinoSqlParser.KW_DROP);
                this.state = 763;
                this.match(TrinoSqlParser.KW_VIEW);
                this.state = 766;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 61, this.context) ) {
                case 1:
                    {
                    this.state = 764;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 765;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 768;
                this.viewRef();
                }
                break;
            case 35:
                localContext = new RenameViewContext(localContext);
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 769;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 770;
                this.match(TrinoSqlParser.KW_VIEW);
                this.state = 771;
                (localContext as RenameViewContext)._from_ = this.viewRef();
                this.state = 772;
                this.match(TrinoSqlParser.KW_RENAME);
                this.state = 773;
                this.match(TrinoSqlParser.KW_TO);
                this.state = 774;
                (localContext as RenameViewContext)._to = this.viewNameCreate();
                }
                break;
            case 36:
                localContext = new SetViewAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 776;
                this.match(TrinoSqlParser.KW_ALTER);
                this.state = 777;
                this.match(TrinoSqlParser.KW_VIEW);
                this.state = 778;
                (localContext as SetViewAuthorizationContext)._from_ = this.viewRef();
                this.state = 779;
                this.match(TrinoSqlParser.KW_SET);
                this.state = 780;
                this.match(TrinoSqlParser.KW_AUTHORIZATION);
                this.state = 781;
                this.principal();
                }
                break;
            case 37:
                localContext = new CallContext(localContext);
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 783;
                this.match(TrinoSqlParser.KW_CALL);
                this.state = 784;
                this.functionName();
                this.state = 785;
                this.match(TrinoSqlParser.T__0);
                this.state = 794;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326658) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4011589611) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 3538382319) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 1541142911) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4253015917) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 3758094335) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4024434665) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4286569983) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4008705783) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1618962301) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 4093) !== 0)) {
                    {
                    this.state = 786;
                    this.callArgument();
                    this.state = 791;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 787;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 788;
                        this.callArgument();
                        }
                        }
                        this.state = 793;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 796;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 38:
                localContext = new CreateFunctionContext(localContext);
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 798;
                this.match(TrinoSqlParser.KW_CREATE);
                this.state = 801;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 799;
                    this.match(TrinoSqlParser.KW_OR);
                    this.state = 800;
                    this.match(TrinoSqlParser.KW_REPLACE);
                    }
                }

                this.state = 803;
                this.functionSpecification();
                }
                break;
            case 39:
                localContext = new DropFunctionContext(localContext);
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 804;
                this.match(TrinoSqlParser.KW_DROP);
                this.state = 805;
                this.match(TrinoSqlParser.KW_FUNCTION);
                this.state = 808;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 65, this.context) ) {
                case 1:
                    {
                    this.state = 806;
                    this.match(TrinoSqlParser.KW_IF);
                    this.state = 807;
                    this.match(TrinoSqlParser.KW_EXISTS);
                    }
                    break;
                }
                this.state = 810;
                this.functionSignature();
                }
                break;
            case 40:
                localContext = new CreateRoleContext(localContext);
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 811;
                this.match(TrinoSqlParser.KW_CREATE);
                this.state = 812;
                this.match(TrinoSqlParser.KW_ROLE);
                this.state = 813;
                (localContext as CreateRoleContext)._name = this.identifier();
                this.state = 817;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 66, this.context) ) {
                case 1:
                    {
                    this.state = 814;
                    this.match(TrinoSqlParser.KW_WITH);
                    this.state = 815;
                    this.match(TrinoSqlParser.KW_ADMIN);
                    this.state = 816;
                    this.grantor();
                    }
                    break;
                }
                this.state = 821;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 819;
                    this.match(TrinoSqlParser.KW_IN);
                    this.state = 820;
                    (localContext as CreateRoleContext)._catalog = this.catalogRef();
                    }
                }

                }
                break;
            case 41:
                localContext = new DropRoleContext(localContext);
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 823;
                this.match(TrinoSqlParser.KW_DROP);
                this.state = 824;
                this.match(TrinoSqlParser.KW_ROLE);
                this.state = 825;
                (localContext as DropRoleContext)._name = this.identifier();
                this.state = 828;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 826;
                    this.match(TrinoSqlParser.KW_IN);
                    this.state = 827;
                    (localContext as DropRoleContext)._catalog = this.catalogRef();
                    }
                }

                }
                break;
            case 42:
                localContext = new GrantRolesContext(localContext);
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 830;
                this.match(TrinoSqlParser.KW_GRANT);
                this.state = 831;
                this.privilegeOrRole();
                this.state = 836;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 832;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 833;
                    this.privilegeOrRole();
                    }
                    }
                    this.state = 838;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 839;
                this.match(TrinoSqlParser.KW_TO);
                this.state = 840;
                this.principal();
                this.state = 845;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 841;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 842;
                    this.principal();
                    }
                    }
                    this.state = 847;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 851;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 71, this.context) ) {
                case 1:
                    {
                    this.state = 848;
                    this.match(TrinoSqlParser.KW_WITH);
                    this.state = 849;
                    this.match(TrinoSqlParser.KW_ADMIN);
                    this.state = 850;
                    this.match(TrinoSqlParser.KW_OPTION);
                    }
                    break;
                }
                this.state = 856;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 111) {
                    {
                    this.state = 853;
                    this.match(TrinoSqlParser.KW_GRANTED);
                    this.state = 854;
                    this.match(TrinoSqlParser.KW_BY);
                    this.state = 855;
                    this.grantor();
                    }
                }

                this.state = 860;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 858;
                    this.match(TrinoSqlParser.KW_IN);
                    this.state = 859;
                    (localContext as GrantRolesContext)._catalog = this.catalogRef();
                    }
                }

                }
                break;
            case 43:
                localContext = new GrantPrivilegesContext(localContext);
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 862;
                this.match(TrinoSqlParser.KW_GRANT);
                this.state = 873;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 75, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 863;
                    this.privilegeOrRole();
                    this.state = 868;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 864;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 865;
                        this.privilegeOrRole();
                        }
                        }
                        this.state = 870;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 871;
                    this.match(TrinoSqlParser.KW_ALL);
                    this.state = 872;
                    this.match(TrinoSqlParser.KW_PRIVILEGES);
                    }
                    break;
                }
                this.state = 875;
                this.match(TrinoSqlParser.KW_ON);
                this.state = 876;
                this.grantObject();
                this.state = 877;
                this.match(TrinoSqlParser.KW_TO);
                this.state = 878;
                this.principal();
                this.state = 882;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 76, this.context) ) {
                case 1:
                    {
                    this.state = 879;
                    this.match(TrinoSqlParser.KW_WITH);
                    this.state = 880;
                    this.match(TrinoSqlParser.KW_GRANT);
                    this.state = 881;
                    this.match(TrinoSqlParser.KW_OPTION);
                    }
                    break;
                }
                }
                break;
            case 44:
                localContext = new RevokeRolesContext(localContext);
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 884;
                this.match(TrinoSqlParser.KW_REVOKE);
                this.state = 888;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 77, this.context) ) {
                case 1:
                    {
                    this.state = 885;
                    this.match(TrinoSqlParser.KW_ADMIN);
                    this.state = 886;
                    this.match(TrinoSqlParser.KW_OPTION);
                    this.state = 887;
                    this.match(TrinoSqlParser.KW_FOR);
                    }
                    break;
                }
                this.state = 890;
                this.privilegeOrRole();
                this.state = 895;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 891;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 892;
                    this.privilegeOrRole();
                    }
                    }
                    this.state = 897;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 898;
                this.match(TrinoSqlParser.KW_FROM);
                this.state = 899;
                this.principal();
                this.state = 904;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 900;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 901;
                    this.principal();
                    }
                    }
                    this.state = 906;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 910;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 111) {
                    {
                    this.state = 907;
                    this.match(TrinoSqlParser.KW_GRANTED);
                    this.state = 908;
                    this.match(TrinoSqlParser.KW_BY);
                    this.state = 909;
                    this.grantor();
                    }
                }

                this.state = 914;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 912;
                    this.match(TrinoSqlParser.KW_IN);
                    this.state = 913;
                    (localContext as RevokeRolesContext)._catalog = this.catalogRef();
                    }
                }

                }
                break;
            case 45:
                localContext = new RevokePrivilegesContext(localContext);
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 916;
                this.match(TrinoSqlParser.KW_REVOKE);
                this.state = 920;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 82, this.context) ) {
                case 1:
                    {
                    this.state = 917;
                    this.match(TrinoSqlParser.KW_GRANT);
                    this.state = 918;
                    this.match(TrinoSqlParser.KW_OPTION);
                    this.state = 919;
                    this.match(TrinoSqlParser.KW_FOR);
                    }
                    break;
                }
                this.state = 932;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 84, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 922;
                    this.privilegeOrRole();
                    this.state = 927;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 923;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 924;
                        this.privilegeOrRole();
                        }
                        }
                        this.state = 929;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 930;
                    this.match(TrinoSqlParser.KW_ALL);
                    this.state = 931;
                    this.match(TrinoSqlParser.KW_PRIVILEGES);
                    }
                    break;
                }
                this.state = 934;
                this.match(TrinoSqlParser.KW_ON);
                this.state = 935;
                this.grantObject();
                this.state = 936;
                this.match(TrinoSqlParser.KW_FROM);
                this.state = 937;
                (localContext as RevokePrivilegesContext)._grantee = this.principal();
                }
                break;
            case 46:
                localContext = new DenyContext(localContext);
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 939;
                this.match(TrinoSqlParser.KW_DENY);
                this.state = 950;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 86, this.context) ) {
                case 1:
                    {
                    this.state = 940;
                    this.privilege();
                    this.state = 945;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 941;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 942;
                        this.privilege();
                        }
                        }
                        this.state = 947;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 948;
                    this.match(TrinoSqlParser.KW_ALL);
                    this.state = 949;
                    this.match(TrinoSqlParser.KW_PRIVILEGES);
                    }
                    break;
                }
                this.state = 952;
                this.match(TrinoSqlParser.KW_ON);
                this.state = 953;
                this.grantObject();
                this.state = 954;
                this.match(TrinoSqlParser.KW_TO);
                this.state = 955;
                (localContext as DenyContext)._grantee = this.principal();
                }
                break;
            case 47:
                localContext = new SetRoleContext(localContext);
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 957;
                this.match(TrinoSqlParser.KW_SET);
                this.state = 958;
                this.match(TrinoSqlParser.KW_ROLE);
                this.state = 962;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 87, this.context) ) {
                case 1:
                    {
                    this.state = 959;
                    this.match(TrinoSqlParser.KW_ALL);
                    }
                    break;
                case 2:
                    {
                    this.state = 960;
                    this.match(TrinoSqlParser.KW_NONE);
                    }
                    break;
                case 3:
                    {
                    this.state = 961;
                    (localContext as SetRoleContext)._role = this.identifier();
                    }
                    break;
                }
                this.state = 966;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 964;
                    this.match(TrinoSqlParser.KW_IN);
                    this.state = 965;
                    (localContext as SetRoleContext)._catalog = this.catalogRef();
                    }
                }

                }
                break;
            case 48:
                localContext = new ShowGrantsContext(localContext);
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 968;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 969;
                this.match(TrinoSqlParser.KW_GRANTS);
                this.state = 972;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 190) {
                    {
                    this.state = 970;
                    this.match(TrinoSqlParser.KW_ON);
                    this.state = 971;
                    this.grantObject();
                    }
                }

                }
                break;
            case 49:
                localContext = new ExplainContext(localContext);
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 974;
                this.match(TrinoSqlParser.KW_EXPLAIN);
                this.state = 986;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 91, this.context) ) {
                case 1:
                    {
                    this.state = 975;
                    this.match(TrinoSqlParser.T__0);
                    this.state = 976;
                    this.explainOption();
                    this.state = 981;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 977;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 978;
                        this.explainOption();
                        }
                        }
                        this.state = 983;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 984;
                    this.match(TrinoSqlParser.T__1);
                    }
                    break;
                }
                this.state = 988;
                this.statement();
                }
                break;
            case 50:
                localContext = new ExplainAnalyzeContext(localContext);
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 989;
                this.match(TrinoSqlParser.KW_EXPLAIN);
                this.state = 990;
                this.match(TrinoSqlParser.KW_ANALYZE);
                this.state = 992;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 297) {
                    {
                    this.state = 991;
                    this.match(TrinoSqlParser.KW_VERBOSE);
                    }
                }

                this.state = 994;
                this.statement();
                }
                break;
            case 51:
                localContext = new ShowCreateTableContext(localContext);
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 995;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 996;
                this.match(TrinoSqlParser.KW_CREATE);
                this.state = 997;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 998;
                this.tableRef();
                }
                break;
            case 52:
                localContext = new ShowCreateSchemaContext(localContext);
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 999;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1000;
                this.match(TrinoSqlParser.KW_CREATE);
                this.state = 1001;
                this.match(TrinoSqlParser.KW_SCHEMA);
                this.state = 1002;
                this.schemaRef();
                }
                break;
            case 53:
                localContext = new ShowCreateViewContext(localContext);
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 1003;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1004;
                this.match(TrinoSqlParser.KW_CREATE);
                this.state = 1005;
                this.match(TrinoSqlParser.KW_VIEW);
                this.state = 1006;
                this.viewRef();
                }
                break;
            case 54:
                localContext = new ShowCreateMaterializedViewContext(localContext);
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 1007;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1008;
                this.match(TrinoSqlParser.KW_CREATE);
                this.state = 1009;
                this.match(TrinoSqlParser.KW_MATERIALIZED);
                this.state = 1010;
                this.match(TrinoSqlParser.KW_VIEW);
                this.state = 1011;
                this.viewRef();
                }
                break;
            case 55:
                localContext = new ShowCreateFunctionContext(localContext);
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 1012;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1013;
                this.match(TrinoSqlParser.KW_CREATE);
                this.state = 1014;
                this.match(TrinoSqlParser.KW_FUNCTION);
                this.state = 1015;
                this.functionName();
                }
                break;
            case 56:
                localContext = new ShowTablesContext(localContext);
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 1016;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1017;
                this.match(TrinoSqlParser.KW_TABLES);
                this.state = 1020;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105 || _la === 122) {
                    {
                    this.state = 1018;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 105 || _la === 122)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1019;
                    this.schemaRef();
                    }
                }

                this.state = 1028;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 1022;
                    this.match(TrinoSqlParser.KW_LIKE);
                    this.state = 1023;
                    (localContext as ShowTablesContext)._pattern = this.string_();
                    this.state = 1026;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 90) {
                        {
                        this.state = 1024;
                        this.match(TrinoSqlParser.KW_ESCAPE);
                        this.state = 1025;
                        (localContext as ShowTablesContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 57:
                localContext = new ShowSchemasContext(localContext);
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 1030;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1031;
                this.match(TrinoSqlParser.KW_SCHEMAS);
                this.state = 1034;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105 || _la === 122) {
                    {
                    this.state = 1032;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 105 || _la === 122)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1033;
                    this.catalogRef();
                    }
                }

                this.state = 1042;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 1036;
                    this.match(TrinoSqlParser.KW_LIKE);
                    this.state = 1037;
                    (localContext as ShowSchemasContext)._pattern = this.string_();
                    this.state = 1040;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 90) {
                        {
                        this.state = 1038;
                        this.match(TrinoSqlParser.KW_ESCAPE);
                        this.state = 1039;
                        (localContext as ShowSchemasContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 58:
                localContext = new ShowCatalogsContext(localContext);
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 1044;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1045;
                this.match(TrinoSqlParser.KW_CATALOGS);
                this.state = 1052;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 1046;
                    this.match(TrinoSqlParser.KW_LIKE);
                    this.state = 1047;
                    (localContext as ShowCatalogsContext)._pattern = this.string_();
                    this.state = 1050;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 90) {
                        {
                        this.state = 1048;
                        this.match(TrinoSqlParser.KW_ESCAPE);
                        this.state = 1049;
                        (localContext as ShowCatalogsContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 59:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 1054;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1055;
                this.match(TrinoSqlParser.KW_COLUMNS);
                this.state = 1056;
                _la = this.tokenStream.LA(1);
                if(!(_la === 105 || _la === 122)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1057;
                this.tableOrViewName();
                this.state = 1064;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 1058;
                    this.match(TrinoSqlParser.KW_LIKE);
                    this.state = 1059;
                    (localContext as ShowColumnsContext)._pattern = this.string_();
                    this.state = 1062;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 90) {
                        {
                        this.state = 1060;
                        this.match(TrinoSqlParser.KW_ESCAPE);
                        this.state = 1061;
                        (localContext as ShowColumnsContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 60:
                localContext = new ShowStatsContext(localContext);
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 1066;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1067;
                this.match(TrinoSqlParser.KW_STATS);
                this.state = 1068;
                this.match(TrinoSqlParser.KW_FOR);
                this.state = 1069;
                this.tableOrViewName();
                }
                break;
            case 61:
                localContext = new ShowStatsForQueryContext(localContext);
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 1070;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1071;
                this.match(TrinoSqlParser.KW_STATS);
                this.state = 1072;
                this.match(TrinoSqlParser.KW_FOR);
                this.state = 1073;
                this.match(TrinoSqlParser.T__0);
                this.state = 1074;
                this.rootQuery();
                this.state = 1075;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 62:
                localContext = new ShowRolesContext(localContext);
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 1077;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1079;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 56) {
                    {
                    this.state = 1078;
                    this.match(TrinoSqlParser.KW_CURRENT);
                    }
                }

                this.state = 1081;
                this.match(TrinoSqlParser.KW_ROLES);
                this.state = 1084;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105 || _la === 122) {
                    {
                    this.state = 1082;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 105 || _la === 122)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1083;
                    this.catalogRef();
                    }
                }

                }
                break;
            case 63:
                localContext = new ShowRoleGrantsContext(localContext);
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 1086;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1087;
                this.match(TrinoSqlParser.KW_ROLE);
                this.state = 1088;
                this.match(TrinoSqlParser.KW_GRANTS);
                this.state = 1091;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105 || _la === 122) {
                    {
                    this.state = 1089;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 105 || _la === 122)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1090;
                    this.catalogRef();
                    }
                }

                }
                break;
            case 64:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 64);
                {
                this.state = 1093;
                this.match(TrinoSqlParser.KW_DESCRIBE);
                this.state = 1094;
                this.tableOrViewName();
                }
                break;
            case 65:
                localContext = new ShowColumnsContext(localContext);
                this.enterOuterAlt(localContext, 65);
                {
                this.state = 1095;
                this.match(TrinoSqlParser.KW_DESC);
                this.state = 1096;
                this.tableOrViewName();
                }
                break;
            case 66:
                localContext = new ShowFunctionsContext(localContext);
                this.enterOuterAlt(localContext, 66);
                {
                this.state = 1097;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1098;
                this.match(TrinoSqlParser.KW_FUNCTIONS);
                this.state = 1101;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105 || _la === 122) {
                    {
                    this.state = 1099;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 105 || _la === 122)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1100;
                    this.schemaRef();
                    }
                }

                this.state = 1109;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 1103;
                    this.match(TrinoSqlParser.KW_LIKE);
                    this.state = 1104;
                    (localContext as ShowFunctionsContext)._pattern = this.string_();
                    this.state = 1107;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 90) {
                        {
                        this.state = 1105;
                        this.match(TrinoSqlParser.KW_ESCAPE);
                        this.state = 1106;
                        (localContext as ShowFunctionsContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 67:
                localContext = new ShowSessionContext(localContext);
                this.enterOuterAlt(localContext, 67);
                {
                this.state = 1111;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1112;
                this.match(TrinoSqlParser.KW_SESSION);
                this.state = 1119;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 1113;
                    this.match(TrinoSqlParser.KW_LIKE);
                    this.state = 1114;
                    (localContext as ShowSessionContext)._pattern = this.string_();
                    this.state = 1117;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 90) {
                        {
                        this.state = 1115;
                        this.match(TrinoSqlParser.KW_ESCAPE);
                        this.state = 1116;
                        (localContext as ShowSessionContext)._escape = this.string_();
                        }
                    }

                    }
                }

                }
                break;
            case 68:
                localContext = new SetSessionAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 68);
                {
                this.state = 1121;
                this.match(TrinoSqlParser.KW_SET);
                this.state = 1122;
                this.match(TrinoSqlParser.KW_SESSION);
                this.state = 1123;
                this.match(TrinoSqlParser.KW_AUTHORIZATION);
                this.state = 1124;
                this.authorizationUser();
                }
                break;
            case 69:
                localContext = new ResetSessionAuthorizationContext(localContext);
                this.enterOuterAlt(localContext, 69);
                {
                this.state = 1125;
                this.match(TrinoSqlParser.KW_RESET);
                this.state = 1126;
                this.match(TrinoSqlParser.KW_SESSION);
                this.state = 1127;
                this.match(TrinoSqlParser.KW_AUTHORIZATION);
                }
                break;
            case 70:
                localContext = new SetSessionContext(localContext);
                this.enterOuterAlt(localContext, 70);
                {
                this.state = 1128;
                this.match(TrinoSqlParser.KW_SET);
                this.state = 1129;
                this.match(TrinoSqlParser.KW_SESSION);
                this.state = 1130;
                this.qualifiedName();
                this.state = 1131;
                this.match(TrinoSqlParser.EQ);
                this.state = 1132;
                this.expression();
                }
                break;
            case 71:
                localContext = new ResetSessionContext(localContext);
                this.enterOuterAlt(localContext, 71);
                {
                this.state = 1134;
                this.match(TrinoSqlParser.KW_RESET);
                this.state = 1135;
                this.match(TrinoSqlParser.KW_SESSION);
                this.state = 1136;
                this.qualifiedName();
                }
                break;
            case 72:
                localContext = new StartTransactionContext(localContext);
                this.enterOuterAlt(localContext, 72);
                {
                this.state = 1137;
                this.match(TrinoSqlParser.KW_START);
                this.state = 1138;
                this.match(TrinoSqlParser.KW_TRANSACTION);
                this.state = 1147;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 134 || _la === 220) {
                    {
                    this.state = 1139;
                    this.transactionMode();
                    this.state = 1144;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 1140;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 1141;
                        this.transactionMode();
                        }
                        }
                        this.state = 1146;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 73:
                localContext = new CommitContext(localContext);
                this.enterOuterAlt(localContext, 73);
                {
                this.state = 1149;
                this.match(TrinoSqlParser.KW_COMMIT);
                this.state = 1151;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 307) {
                    {
                    this.state = 1150;
                    this.match(TrinoSqlParser.KW_WORK);
                    }
                }

                }
                break;
            case 74:
                localContext = new RollbackContext(localContext);
                this.enterOuterAlt(localContext, 74);
                {
                this.state = 1153;
                this.match(TrinoSqlParser.KW_ROLLBACK);
                this.state = 1155;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 307) {
                    {
                    this.state = 1154;
                    this.match(TrinoSqlParser.KW_WORK);
                    }
                }

                }
                break;
            case 75:
                localContext = new PrepareContext(localContext);
                this.enterOuterAlt(localContext, 75);
                {
                this.state = 1157;
                this.match(TrinoSqlParser.KW_PREPARE);
                this.state = 1158;
                this.identifier();
                this.state = 1159;
                this.match(TrinoSqlParser.KW_FROM);
                this.state = 1160;
                this.statement();
                }
                break;
            case 76:
                localContext = new DeallocateContext(localContext);
                this.enterOuterAlt(localContext, 76);
                {
                this.state = 1162;
                this.match(TrinoSqlParser.KW_DEALLOCATE);
                this.state = 1163;
                this.match(TrinoSqlParser.KW_PREPARE);
                this.state = 1164;
                this.identifier();
                }
                break;
            case 77:
                localContext = new ExecuteContext(localContext);
                this.enterOuterAlt(localContext, 77);
                {
                this.state = 1165;
                this.match(TrinoSqlParser.KW_EXECUTE);
                this.state = 1166;
                this.identifier();
                this.state = 1176;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 290) {
                    {
                    this.state = 1167;
                    this.match(TrinoSqlParser.KW_USING);
                    this.state = 1168;
                    this.expression();
                    this.state = 1173;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 1169;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 1170;
                        this.expression();
                        }
                        }
                        this.state = 1175;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 78:
                localContext = new ExecuteImmediateContext(localContext);
                this.enterOuterAlt(localContext, 78);
                {
                this.state = 1178;
                this.match(TrinoSqlParser.KW_EXECUTE);
                this.state = 1179;
                this.match(TrinoSqlParser.KW_IMMEDIATE);
                this.state = 1180;
                this.string_();
                this.state = 1190;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 290) {
                    {
                    this.state = 1181;
                    this.match(TrinoSqlParser.KW_USING);
                    this.state = 1182;
                    this.expression();
                    this.state = 1187;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 1183;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 1184;
                        this.expression();
                        }
                        }
                        this.state = 1189;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                }
                break;
            case 79:
                localContext = new DescribeInputContext(localContext);
                this.enterOuterAlt(localContext, 79);
                {
                this.state = 1192;
                this.match(TrinoSqlParser.KW_DESCRIBE);
                this.state = 1193;
                this.match(TrinoSqlParser.KW_INPUT);
                this.state = 1194;
                this.identifier();
                }
                break;
            case 80:
                localContext = new DescribeOutputContext(localContext);
                this.enterOuterAlt(localContext, 80);
                {
                this.state = 1195;
                this.match(TrinoSqlParser.KW_DESCRIBE);
                this.state = 1196;
                this.match(TrinoSqlParser.KW_OUTPUT);
                this.state = 1197;
                this.identifier();
                }
                break;
            case 81:
                localContext = new SetPathContext(localContext);
                this.enterOuterAlt(localContext, 81);
                {
                this.state = 1198;
                this.match(TrinoSqlParser.KW_SET);
                this.state = 1199;
                this.match(TrinoSqlParser.KW_PATH);
                this.state = 1200;
                this.pathSpecification();
                }
                break;
            case 82:
                localContext = new SetTimeZoneContext(localContext);
                this.enterOuterAlt(localContext, 82);
                {
                this.state = 1201;
                this.match(TrinoSqlParser.KW_SET);
                this.state = 1202;
                this.match(TrinoSqlParser.KW_TIME);
                this.state = 1203;
                this.match(TrinoSqlParser.KW_ZONE);
                this.state = 1206;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 119, this.context) ) {
                case 1:
                    {
                    this.state = 1204;
                    this.match(TrinoSqlParser.KW_LOCAL);
                    }
                    break;
                case 2:
                    {
                    this.state = 1205;
                    this.expression();
                    }
                    break;
                }
                }
                break;
            case 83:
                localContext = new UpdateContext(localContext);
                this.enterOuterAlt(localContext, 83);
                {
                this.state = 1208;
                this.match(TrinoSqlParser.KW_UPDATE);
                this.state = 1209;
                this.tableRef();
                this.state = 1210;
                this.match(TrinoSqlParser.KW_SET);
                this.state = 1211;
                this.updateAssignment();
                this.state = 1216;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 1212;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 1213;
                    this.updateAssignment();
                    }
                    }
                    this.state = 1218;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1220;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 301) {
                    {
                    this.state = 1219;
                    this.whereClause();
                    }
                }

                }
                break;
            case 84:
                localContext = new MergeContext(localContext);
                this.enterOuterAlt(localContext, 84);
                {
                this.state = 1222;
                this.match(TrinoSqlParser.KW_MERGE);
                this.state = 1223;
                this.match(TrinoSqlParser.KW_INTO);
                this.state = 1224;
                this.tableRef();
                this.state = 1229;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4282056543) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 15) !== 0)) {
                    {
                    this.state = 1226;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 1225;
                        this.match(TrinoSqlParser.KW_AS);
                        }
                    }

                    this.state = 1228;
                    this.identifier();
                    }
                }

                this.state = 1231;
                this.match(TrinoSqlParser.KW_USING);
                this.state = 1232;
                this.relation(0);
                this.state = 1233;
                this.match(TrinoSqlParser.KW_ON);
                this.state = 1234;
                this.expression();
                this.state = 1236;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 1235;
                    this.mergeCase();
                    }
                    }
                    this.state = 1238;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 300);
                }
                break;
            case 85:
                localContext = new ShowTableCommentContext(localContext);
                this.enterOuterAlt(localContext, 85);
                {
                this.state = 1240;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1241;
                this.match(TrinoSqlParser.KW_COMMENT);
                this.state = 1242;
                this.match(TrinoSqlParser.KW_ON);
                this.state = 1243;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 1244;
                this.tableRef();
                }
                break;
            case 86:
                localContext = new ShowColumnCommentContext(localContext);
                this.enterOuterAlt(localContext, 86);
                {
                this.state = 1245;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1246;
                this.match(TrinoSqlParser.KW_COMMENT);
                this.state = 1247;
                this.match(TrinoSqlParser.KW_ON);
                this.state = 1248;
                this.match(TrinoSqlParser.KW_COLUMN);
                this.state = 1249;
                this.columnRef();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rootQuery(): RootQueryContext {
        let localContext = new RootQueryContext(this.context, this.state);
        this.enterRule(localContext, 18, TrinoSqlParser.RULE_rootQuery);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1253;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 126, this.context) ) {
            case 1:
                {
                this.state = 1252;
                this.withFunction();
                }
                break;
            }
            this.state = 1255;
            this.query();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withFunction(): WithFunctionContext {
        let localContext = new WithFunctionContext(this.context, this.state);
        this.enterRule(localContext, 20, TrinoSqlParser.RULE_withFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1257;
            this.match(TrinoSqlParser.KW_WITH);
            this.state = 1258;
            this.functionSpecification();
            this.state = 1263;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 3) {
                {
                {
                this.state = 1259;
                this.match(TrinoSqlParser.T__2);
                this.state = 1260;
                this.functionSpecification();
                }
                }
                this.state = 1265;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public query(): QueryContext {
        let localContext = new QueryContext(this.context, this.state);
        this.enterRule(localContext, 22, TrinoSqlParser.RULE_query);
        let _la: number;
        try {
            localContext = new QueryStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1267;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 304) {
                {
                this.state = 1266;
                this.with_();
                }
            }

            this.state = 1269;
            this.queryNoWith();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_(): WithContext {
        let localContext = new WithContext(this.context, this.state);
        this.enterRule(localContext, 24, TrinoSqlParser.RULE_with);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1271;
            this.match(TrinoSqlParser.KW_WITH);
            this.state = 1273;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 221) {
                {
                this.state = 1272;
                this.match(TrinoSqlParser.KW_RECURSIVE);
                }
            }

            this.state = 1275;
            this.namedQuery();
            this.state = 1280;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 3) {
                {
                {
                this.state = 1276;
                this.match(TrinoSqlParser.T__2);
                this.state = 1277;
                this.namedQuery();
                }
                }
                this.state = 1282;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableElement(): TableElementContext {
        let localContext = new TableElementContext(this.context, this.state);
        this.enterRule(localContext, 26, TrinoSqlParser.RULE_tableElement);
        try {
            this.state = 1285;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_ABSENT:
            case TrinoSqlParser.KW_ADD:
            case TrinoSqlParser.KW_ADMIN:
            case TrinoSqlParser.KW_AFTER:
            case TrinoSqlParser.KW_ALL:
            case TrinoSqlParser.KW_ANALYZE:
            case TrinoSqlParser.KW_ANY:
            case TrinoSqlParser.KW_ARRAY:
            case TrinoSqlParser.KW_ASC:
            case TrinoSqlParser.KW_AT:
            case TrinoSqlParser.KW_AUTHORIZATION:
            case TrinoSqlParser.KW_BEGIN:
            case TrinoSqlParser.KW_BERNOULLI:
            case TrinoSqlParser.KW_BOTH:
            case TrinoSqlParser.KW_CALL:
            case TrinoSqlParser.KW_CALLED:
            case TrinoSqlParser.KW_CASCADE:
            case TrinoSqlParser.KW_CATALOG:
            case TrinoSqlParser.KW_CATALOGS:
            case TrinoSqlParser.KW_COLUMN:
            case TrinoSqlParser.KW_COLUMNS:
            case TrinoSqlParser.KW_COMMENT:
            case TrinoSqlParser.KW_COMMIT:
            case TrinoSqlParser.KW_COMMITTED:
            case TrinoSqlParser.KW_CONDITIONAL:
            case TrinoSqlParser.KW_COUNT:
            case TrinoSqlParser.KW_COPARTITION:
            case TrinoSqlParser.KW_CURRENT:
            case TrinoSqlParser.KW_DATA:
            case TrinoSqlParser.KW_DATE:
            case TrinoSqlParser.KW_DAY:
            case TrinoSqlParser.KW_DECLARE:
            case TrinoSqlParser.KW_DEFAULT:
            case TrinoSqlParser.KW_DEFINE:
            case TrinoSqlParser.KW_DEFINER:
            case TrinoSqlParser.KW_DENY:
            case TrinoSqlParser.KW_DESC:
            case TrinoSqlParser.KW_DESCRIPTOR:
            case TrinoSqlParser.KW_DETERMINISTIC:
            case TrinoSqlParser.KW_DISTRIBUTED:
            case TrinoSqlParser.KW_DO:
            case TrinoSqlParser.KW_DOUBLE:
            case TrinoSqlParser.KW_EMPTY:
            case TrinoSqlParser.KW_ELSEIF:
            case TrinoSqlParser.KW_ENCODING:
            case TrinoSqlParser.KW_ERROR:
            case TrinoSqlParser.KW_EXCLUDING:
            case TrinoSqlParser.KW_EXPLAIN:
            case TrinoSqlParser.KW_FETCH:
            case TrinoSqlParser.KW_FILTER:
            case TrinoSqlParser.KW_FINAL:
            case TrinoSqlParser.KW_FIRST:
            case TrinoSqlParser.KW_FOLLOWING:
            case TrinoSqlParser.KW_FORMAT:
            case TrinoSqlParser.KW_FUNCTION:
            case TrinoSqlParser.KW_FUNCTIONS:
            case TrinoSqlParser.KW_GRACE:
            case TrinoSqlParser.KW_GRANT:
            case TrinoSqlParser.KW_GRANTED:
            case TrinoSqlParser.KW_GRANTS:
            case TrinoSqlParser.KW_GRAPHVIZ:
            case TrinoSqlParser.KW_GROUPS:
            case TrinoSqlParser.KW_HOUR:
            case TrinoSqlParser.KW_IF:
            case TrinoSqlParser.KW_IGNORE:
            case TrinoSqlParser.KW_IMMEDIATE:
            case TrinoSqlParser.KW_INCLUDING:
            case TrinoSqlParser.KW_INITIAL:
            case TrinoSqlParser.KW_INPUT:
            case TrinoSqlParser.KW_INTERVAL:
            case TrinoSqlParser.KW_INVOKER:
            case TrinoSqlParser.KW_IO:
            case TrinoSqlParser.KW_ISOLATION:
            case TrinoSqlParser.KW_ITERATE:
            case TrinoSqlParser.KW_JSON:
            case TrinoSqlParser.KW_KEEP:
            case TrinoSqlParser.KW_KEY:
            case TrinoSqlParser.KW_KEYS:
            case TrinoSqlParser.KW_LANGUAGE:
            case TrinoSqlParser.KW_LAST:
            case TrinoSqlParser.KW_LATERAL:
            case TrinoSqlParser.KW_LEADING:
            case TrinoSqlParser.KW_LEAVE:
            case TrinoSqlParser.KW_LEVEL:
            case TrinoSqlParser.KW_LIMIT:
            case TrinoSqlParser.KW_LOCAL:
            case TrinoSqlParser.KW_LOGICAL:
            case TrinoSqlParser.KW_LOOP:
            case TrinoSqlParser.KW_MAP:
            case TrinoSqlParser.KW_MATCH:
            case TrinoSqlParser.KW_MATCHED:
            case TrinoSqlParser.KW_MATCHES:
            case TrinoSqlParser.KW_MATCH_RECOGNIZE:
            case TrinoSqlParser.KW_MATERIALIZED:
            case TrinoSqlParser.KW_MEASURES:
            case TrinoSqlParser.KW_MERGE:
            case TrinoSqlParser.KW_MINUTE:
            case TrinoSqlParser.KW_MONTH:
            case TrinoSqlParser.KW_NESTED:
            case TrinoSqlParser.KW_NEXT:
            case TrinoSqlParser.KW_NFC:
            case TrinoSqlParser.KW_NFD:
            case TrinoSqlParser.KW_NFKC:
            case TrinoSqlParser.KW_NFKD:
            case TrinoSqlParser.KW_NO:
            case TrinoSqlParser.KW_NONE:
            case TrinoSqlParser.KW_NULLIF:
            case TrinoSqlParser.KW_NULLS:
            case TrinoSqlParser.KW_OBJECT:
            case TrinoSqlParser.KW_OF:
            case TrinoSqlParser.KW_OFFSET:
            case TrinoSqlParser.KW_OMIT:
            case TrinoSqlParser.KW_ONE:
            case TrinoSqlParser.KW_ONLY:
            case TrinoSqlParser.KW_OPTION:
            case TrinoSqlParser.KW_ORDINALITY:
            case TrinoSqlParser.KW_OUTPUT:
            case TrinoSqlParser.KW_OVER:
            case TrinoSqlParser.KW_OVERFLOW:
            case TrinoSqlParser.KW_PARTITION:
            case TrinoSqlParser.KW_PARTITIONS:
            case TrinoSqlParser.KW_PASSING:
            case TrinoSqlParser.KW_PAST:
            case TrinoSqlParser.KW_PATH:
            case TrinoSqlParser.KW_PATTERN:
            case TrinoSqlParser.KW_PER:
            case TrinoSqlParser.KW_PERIOD:
            case TrinoSqlParser.KW_PERMUTE:
            case TrinoSqlParser.KW_PLAN:
            case TrinoSqlParser.KW_POSITION:
            case TrinoSqlParser.KW_PRECEDING:
            case TrinoSqlParser.KW_PRECISION:
            case TrinoSqlParser.KW_PRIVILEGES:
            case TrinoSqlParser.KW_PROPERTIES:
            case TrinoSqlParser.KW_PRUNE:
            case TrinoSqlParser.KW_QUOTES:
            case TrinoSqlParser.KW_RANGE:
            case TrinoSqlParser.KW_READ:
            case TrinoSqlParser.KW_REFRESH:
            case TrinoSqlParser.KW_RENAME:
            case TrinoSqlParser.KW_REPEAT:
            case TrinoSqlParser.KW_REPEATABLE:
            case TrinoSqlParser.KW_REPLACE:
            case TrinoSqlParser.KW_RESET:
            case TrinoSqlParser.KW_RESPECT:
            case TrinoSqlParser.KW_RESTRICT:
            case TrinoSqlParser.KW_RETURN:
            case TrinoSqlParser.KW_RETURNING:
            case TrinoSqlParser.KW_RETURNS:
            case TrinoSqlParser.KW_REVOKE:
            case TrinoSqlParser.KW_ROLE:
            case TrinoSqlParser.KW_ROLES:
            case TrinoSqlParser.KW_ROLLBACK:
            case TrinoSqlParser.KW_ROW:
            case TrinoSqlParser.KW_ROWS:
            case TrinoSqlParser.KW_RUNNING:
            case TrinoSqlParser.KW_SCALAR:
            case TrinoSqlParser.KW_SCHEMA:
            case TrinoSqlParser.KW_SCHEMAS:
            case TrinoSqlParser.KW_SECOND:
            case TrinoSqlParser.KW_SECURITY:
            case TrinoSqlParser.KW_SEEK:
            case TrinoSqlParser.KW_SERIALIZABLE:
            case TrinoSqlParser.KW_SESSION:
            case TrinoSqlParser.KW_SET:
            case TrinoSqlParser.KW_SETS:
            case TrinoSqlParser.KW_SHOW:
            case TrinoSqlParser.KW_SOME:
            case TrinoSqlParser.KW_START:
            case TrinoSqlParser.KW_STATS:
            case TrinoSqlParser.KW_SUBSET:
            case TrinoSqlParser.KW_SUBSTRING:
            case TrinoSqlParser.KW_SYSTEM:
            case TrinoSqlParser.KW_TABLES:
            case TrinoSqlParser.KW_TABLESAMPLE:
            case TrinoSqlParser.KW_TEXT:
            case TrinoSqlParser.KW_TEXT_STRING:
            case TrinoSqlParser.KW_TIES:
            case TrinoSqlParser.KW_TIME:
            case TrinoSqlParser.KW_TIMESTAMP:
            case TrinoSqlParser.KW_TO:
            case TrinoSqlParser.KW_TRAILING:
            case TrinoSqlParser.KW_TRANSACTION:
            case TrinoSqlParser.KW_TRUNCATE:
            case TrinoSqlParser.KW_TRY_CAST:
            case TrinoSqlParser.KW_TYPE:
            case TrinoSqlParser.KW_UNBOUNDED:
            case TrinoSqlParser.KW_UNCOMMITTED:
            case TrinoSqlParser.KW_UNCONDITIONAL:
            case TrinoSqlParser.KW_UNIQUE:
            case TrinoSqlParser.KW_UNKNOWN:
            case TrinoSqlParser.KW_UNMATCHED:
            case TrinoSqlParser.KW_UNTIL:
            case TrinoSqlParser.KW_UPDATE:
            case TrinoSqlParser.KW_USE:
            case TrinoSqlParser.KW_USER:
            case TrinoSqlParser.KW_UTF16:
            case TrinoSqlParser.KW_UTF32:
            case TrinoSqlParser.KW_UTF8:
            case TrinoSqlParser.KW_VALIDATE:
            case TrinoSqlParser.KW_VALUE:
            case TrinoSqlParser.KW_VERBOSE:
            case TrinoSqlParser.KW_VERSION:
            case TrinoSqlParser.KW_VIEW:
            case TrinoSqlParser.KW_WHILE:
            case TrinoSqlParser.KW_WINDOW:
            case TrinoSqlParser.KW_WITHIN:
            case TrinoSqlParser.KW_WITHOUT:
            case TrinoSqlParser.KW_WORK:
            case TrinoSqlParser.KW_WRAPPER:
            case TrinoSqlParser.KW_WRITE:
            case TrinoSqlParser.KW_YEAR:
            case TrinoSqlParser.KW_ZONE:
            case TrinoSqlParser.IDENTIFIER:
            case TrinoSqlParser.DIGIT_IDENTIFIER:
            case TrinoSqlParser.QUOTED_IDENTIFIER:
            case TrinoSqlParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1283;
                this.columnDefinition();
                }
                break;
            case TrinoSqlParser.KW_LIKE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1284;
                this.likeClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnDefinition(): ColumnDefinitionContext {
        let localContext = new ColumnDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 28, TrinoSqlParser.RULE_columnDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1287;
            this.columnNameCreate();
            this.state = 1288;
            localContext._colType = this.type_(0);
            this.state = 1291;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 182) {
                {
                this.state = 1289;
                this.match(TrinoSqlParser.KW_NOT);
                this.state = 1290;
                this.match(TrinoSqlParser.KW_NULL);
                }
            }

            this.state = 1295;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 133, this.context) ) {
            case 1:
                {
                this.state = 1293;
                this.match(TrinoSqlParser.KW_COMMENT);
                this.state = 1294;
                localContext._comment = this.string_();
                }
                break;
            }
            this.state = 1299;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 134, this.context) ) {
            case 1:
                {
                this.state = 1297;
                this.match(TrinoSqlParser.KW_WITH);
                this.state = 1298;
                this.properties();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public likeClause(): LikeClauseContext {
        let localContext = new LikeClauseContext(this.context, this.state);
        this.enterRule(localContext, 30, TrinoSqlParser.RULE_likeClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1301;
            this.match(TrinoSqlParser.KW_LIKE);
            this.state = 1302;
            this.tableRef();
            this.state = 1305;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 92 || _la === 123) {
                {
                this.state = 1303;
                localContext._optionType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 92 || _la === 123)) {
                    localContext._optionType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1304;
                this.match(TrinoSqlParser.KW_PROPERTIES);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public properties(): PropertiesContext {
        let localContext = new PropertiesContext(this.context, this.state);
        this.enterRule(localContext, 32, TrinoSqlParser.RULE_properties);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1307;
            this.match(TrinoSqlParser.T__0);
            this.state = 1308;
            this.propertyAssignments();
            this.state = 1309;
            this.match(TrinoSqlParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        let localContext = new PropertyAssignmentsContext(this.context, this.state);
        this.enterRule(localContext, 34, TrinoSqlParser.RULE_propertyAssignments);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1311;
            this.property();
            this.state = 1316;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 3) {
                {
                {
                this.state = 1312;
                this.match(TrinoSqlParser.T__2);
                this.state = 1313;
                this.property();
                }
                }
                this.state = 1318;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public property(): PropertyContext {
        let localContext = new PropertyContext(this.context, this.state);
        this.enterRule(localContext, 36, TrinoSqlParser.RULE_property);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1319;
            this.identifier();
            this.state = 1320;
            this.match(TrinoSqlParser.EQ);
            this.state = 1321;
            this.propertyValue();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public propertyValue(): PropertyValueContext {
        let localContext = new PropertyValueContext(this.context, this.state);
        this.enterRule(localContext, 38, TrinoSqlParser.RULE_propertyValue);
        try {
            this.state = 1325;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 137, this.context) ) {
            case 1:
                localContext = new DefaultPropertyValueContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1323;
                this.match(TrinoSqlParser.KW_DEFAULT);
                }
                break;
            case 2:
                localContext = new NonDefaultPropertyValueContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1324;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryNoWith(): QueryNoWithContext {
        let localContext = new QueryNoWithContext(this.context, this.state);
        this.enterRule(localContext, 40, TrinoSqlParser.RULE_queryNoWith);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1327;
            this.queryTerm(0);
            this.state = 1338;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 195) {
                {
                this.state = 1328;
                this.match(TrinoSqlParser.KW_ORDER);
                this.state = 1329;
                this.match(TrinoSqlParser.KW_BY);
                this.state = 1330;
                this.sortItem();
                this.state = 1335;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 1331;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 1332;
                    this.sortItem();
                    }
                    }
                    this.state = 1337;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1345;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 188) {
                {
                this.state = 1340;
                this.match(TrinoSqlParser.KW_OFFSET);
                this.state = 1341;
                localContext._offset = this.rowCount();
                this.state = 1343;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 239 || _la === 240) {
                    {
                    this.state = 1342;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 239 || _la === 240)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
            }

            this.state = 1360;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_LIMIT:
                {
                {
                this.state = 1347;
                this.match(TrinoSqlParser.KW_LIMIT);
                this.state = 1348;
                localContext._limit = this.limitRowCount();
                }
                }
                break;
            case TrinoSqlParser.KW_FETCH:
                {
                {
                this.state = 1349;
                this.match(TrinoSqlParser.KW_FETCH);
                this.state = 1350;
                _la = this.tokenStream.LA(1);
                if(!(_la === 101 || _la === 174)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1352;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 324 || _la === 329) {
                    {
                    this.state = 1351;
                    localContext._fetchFirst = this.rowCount();
                    }
                }

                this.state = 1354;
                _la = this.tokenStream.LA(1);
                if(!(_la === 239 || _la === 240)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1358;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case TrinoSqlParser.KW_ONLY:
                    {
                    this.state = 1355;
                    this.match(TrinoSqlParser.KW_ONLY);
                    }
                    break;
                case TrinoSqlParser.KW_WITH:
                    {
                    this.state = 1356;
                    this.match(TrinoSqlParser.KW_WITH);
                    this.state = 1357;
                    this.match(TrinoSqlParser.KW_TIES);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                }
                break;
            case TrinoSqlParser.EOF:
            case TrinoSqlParser.T__0:
            case TrinoSqlParser.T__1:
            case TrinoSqlParser.KW_ALTER:
            case TrinoSqlParser.KW_ANALYZE:
            case TrinoSqlParser.KW_CALL:
            case TrinoSqlParser.KW_COMMENT:
            case TrinoSqlParser.KW_COMMIT:
            case TrinoSqlParser.KW_CREATE:
            case TrinoSqlParser.KW_DEALLOCATE:
            case TrinoSqlParser.KW_DELETE:
            case TrinoSqlParser.KW_DENY:
            case TrinoSqlParser.KW_DESC:
            case TrinoSqlParser.KW_DESCRIBE:
            case TrinoSqlParser.KW_DROP:
            case TrinoSqlParser.KW_EXECUTE:
            case TrinoSqlParser.KW_EXPLAIN:
            case TrinoSqlParser.KW_GRANT:
            case TrinoSqlParser.KW_INSERT:
            case TrinoSqlParser.KW_MERGE:
            case TrinoSqlParser.KW_PREPARE:
            case TrinoSqlParser.KW_REFRESH:
            case TrinoSqlParser.KW_RESET:
            case TrinoSqlParser.KW_REVOKE:
            case TrinoSqlParser.KW_ROLLBACK:
            case TrinoSqlParser.KW_SELECT:
            case TrinoSqlParser.KW_SET:
            case TrinoSqlParser.KW_SHOW:
            case TrinoSqlParser.KW_START:
            case TrinoSqlParser.KW_TABLE:
            case TrinoSqlParser.KW_TRUNCATE:
            case TrinoSqlParser.KW_UPDATE:
            case TrinoSqlParser.KW_USE:
            case TrinoSqlParser.KW_VALUES:
            case TrinoSqlParser.KW_WITH:
            case TrinoSqlParser.SEMICOLON:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitRowCount(): LimitRowCountContext {
        let localContext = new LimitRowCountContext(this.context, this.state);
        this.enterRule(localContext, 42, TrinoSqlParser.RULE_limitRowCount);
        try {
            this.state = 1364;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_ALL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1362;
                this.match(TrinoSqlParser.KW_ALL);
                }
                break;
            case TrinoSqlParser.QUESTION_MARK:
            case TrinoSqlParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1363;
                this.rowCount();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowCount(): RowCountContext {
        let localContext = new RowCountContext(this.context, this.state);
        this.enterRule(localContext, 44, TrinoSqlParser.RULE_rowCount);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1366;
            _la = this.tokenStream.LA(1);
            if(!(_la === 324 || _la === 329)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public queryTerm(): QueryTermContext;
    public queryTerm(_p: number): QueryTermContext;
    public queryTerm(_p?: number): QueryTermContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new QueryTermContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 46;
        this.enterRecursionRule(localContext, 46, TrinoSqlParser.RULE_queryTerm, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new QueryTermDefaultContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 1369;
            this.queryPrimary();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1385;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 149, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 1383;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 148, this.context) ) {
                    case 1:
                        {
                        localContext = new SetOperationContext(new QueryTermContext(parentContext, parentState));
                        (localContext as SetOperationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoSqlParser.RULE_queryTerm);
                        this.state = 1371;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 1372;
                        (localContext as SetOperationContext)._operator = this.match(TrinoSqlParser.KW_INTERSECT);
                        this.state = 1374;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 22 || _la === 79) {
                            {
                            this.state = 1373;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1376;
                        (localContext as SetOperationContext)._right = this.queryTerm(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new SetOperationContext(new QueryTermContext(parentContext, parentState));
                        (localContext as SetOperationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoSqlParser.RULE_queryTerm);
                        this.state = 1377;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 1378;
                        (localContext as SetOperationContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 91 || _la === 281)) {
                            (localContext as SetOperationContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1380;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 22 || _la === 79) {
                            {
                            this.state = 1379;
                            this.setQuantifier();
                            }
                        }

                        this.state = 1382;
                        (localContext as SetOperationContext)._right = this.queryTerm(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 1387;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 149, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public queryPrimary(): QueryPrimaryContext {
        let localContext = new QueryPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 48, TrinoSqlParser.RULE_queryPrimary);
        try {
            let alternative: number;
            this.state = 1404;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_SELECT:
                localContext = new QueryPrimaryDefaultContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1388;
                this.querySpecification();
                }
                break;
            case TrinoSqlParser.KW_TABLE:
                localContext = new TableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1389;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 1390;
                this.tableRef();
                }
                break;
            case TrinoSqlParser.KW_VALUES:
                localContext = new InlineTableContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1391;
                this.match(TrinoSqlParser.KW_VALUES);
                this.state = 1392;
                this.expression();
                this.state = 1397;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 150, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1393;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 1394;
                        this.expression();
                        }
                        }
                    }
                    this.state = 1399;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 150, this.context);
                }
                }
                break;
            case TrinoSqlParser.T__0:
                localContext = new SubqueryContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1400;
                this.match(TrinoSqlParser.T__0);
                this.state = 1401;
                this.queryNoWith();
                this.state = 1402;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortItem(): SortItemContext {
        let localContext = new SortItemContext(this.context, this.state);
        this.enterRule(localContext, 50, TrinoSqlParser.RULE_sortItem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1408;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 152, this.context) ) {
            case 1:
                {
                this.state = 1406;
                this.columnRef();
                }
                break;
            case 2:
                {
                this.state = 1407;
                this.expression();
                }
                break;
            }
            this.state = 1411;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 153, this.context) ) {
            case 1:
                {
                this.state = 1410;
                localContext._ordering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 29 || _la === 75)) {
                    localContext._ordering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 1415;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 185) {
                {
                this.state = 1413;
                this.match(TrinoSqlParser.KW_NULLS);
                this.state = 1414;
                localContext._nullOrdering = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 101 || _la === 148)) {
                    localContext._nullOrdering = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public querySpecification(): QuerySpecificationContext {
        let localContext = new QuerySpecificationContext(this.context, this.state);
        this.enterRule(localContext, 52, TrinoSqlParser.RULE_querySpecification);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1417;
            this.match(TrinoSqlParser.KW_SELECT);
            this.state = 1419;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 155, this.context) ) {
            case 1:
                {
                this.state = 1418;
                this.setQuantifier();
                }
                break;
            }
            this.state = 1421;
            this.selectList();
            this.state = 1431;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 157, this.context) ) {
            case 1:
                {
                this.state = 1422;
                this.match(TrinoSqlParser.KW_FROM);
                this.state = 1423;
                this.relation(0);
                this.state = 1428;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 156, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1424;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 1425;
                        this.relation(0);
                        }
                        }
                    }
                    this.state = 1430;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 156, this.context);
                }
                }
                break;
            }
            this.state = 1434;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 158, this.context) ) {
            case 1:
                {
                this.state = 1433;
                this.whereClause();
                }
                break;
            }
            this.state = 1439;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 159, this.context) ) {
            case 1:
                {
                this.state = 1436;
                this.match(TrinoSqlParser.KW_GROUP);
                this.state = 1437;
                this.match(TrinoSqlParser.KW_BY);
                this.state = 1438;
                this.groupBy();
                }
                break;
            }
            this.state = 1442;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 160, this.context) ) {
            case 1:
                {
                this.state = 1441;
                this.havingClause();
                }
                break;
            }
            this.state = 1453;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 162, this.context) ) {
            case 1:
                {
                this.state = 1444;
                this.match(TrinoSqlParser.KW_WINDOW);
                this.state = 1445;
                this.windowDefinition();
                this.state = 1450;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 161, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1446;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 1447;
                        this.windowDefinition();
                        }
                        }
                    }
                    this.state = 1452;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 161, this.context);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 54, TrinoSqlParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1455;
            this.match(TrinoSqlParser.KW_WHERE);
            this.state = 1456;
            localContext._where = this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 56, TrinoSqlParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1458;
            this.match(TrinoSqlParser.KW_HAVING);
            this.state = 1459;
            localContext._having = this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectList(): SelectListContext {
        let localContext = new SelectListContext(this.context, this.state);
        this.enterRule(localContext, 58, TrinoSqlParser.RULE_selectList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1461;
            this.selectItem();
            this.state = 1466;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 163, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1462;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 1463;
                    this.selectItem();
                    }
                    }
                }
                this.state = 1468;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 163, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupBy(): GroupByContext {
        let localContext = new GroupByContext(this.context, this.state);
        this.enterRule(localContext, 60, TrinoSqlParser.RULE_groupBy);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1470;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 164, this.context) ) {
            case 1:
                {
                this.state = 1469;
                this.setQuantifier();
                }
                break;
            }
            this.state = 1472;
            this.groupingElement();
            this.state = 1477;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 165, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1473;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 1474;
                    this.groupingElement();
                    }
                    }
                }
                this.state = 1479;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 165, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionBy(): PartitionByContext {
        let localContext = new PartitionByContext(this.context, this.state);
        this.enterRule(localContext, 62, TrinoSqlParser.RULE_partitionBy);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1480;
            this.expression();
            this.state = 1485;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 3) {
                {
                {
                this.state = 1481;
                this.match(TrinoSqlParser.T__2);
                this.state = 1482;
                this.expression();
                }
                }
                this.state = 1487;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingElement(): GroupingElementContext {
        let localContext = new GroupingElementContext(this.context, this.state);
        this.enterRule(localContext, 64, TrinoSqlParser.RULE_groupingElement);
        let _la: number;
        try {
            this.state = 1528;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 172, this.context) ) {
            case 1:
                localContext = new SingleGroupingSetContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1488;
                this.groupingSet();
                }
                break;
            case 2:
                localContext = new RollupContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1489;
                this.match(TrinoSqlParser.KW_ROLLUP);
                this.state = 1490;
                this.match(TrinoSqlParser.T__0);
                this.state = 1499;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 168, this.context) ) {
                case 1:
                    {
                    this.state = 1491;
                    this.groupingSet();
                    this.state = 1496;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 1492;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 1493;
                        this.groupingSet();
                        }
                        }
                        this.state = 1498;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                }
                this.state = 1501;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 3:
                localContext = new CubeContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1502;
                this.match(TrinoSqlParser.KW_CUBE);
                this.state = 1503;
                this.match(TrinoSqlParser.T__0);
                this.state = 1512;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 170, this.context) ) {
                case 1:
                    {
                    this.state = 1504;
                    this.groupingSet();
                    this.state = 1509;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 1505;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 1506;
                        this.groupingSet();
                        }
                        }
                        this.state = 1511;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                }
                this.state = 1514;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 4:
                localContext = new MultipleGroupingSetsContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1515;
                this.match(TrinoSqlParser.KW_GROUPING);
                this.state = 1516;
                this.match(TrinoSqlParser.KW_SETS);
                this.state = 1517;
                this.match(TrinoSqlParser.T__0);
                this.state = 1518;
                this.groupingSet();
                this.state = 1523;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 1519;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 1520;
                    this.groupingSet();
                    }
                    }
                    this.state = 1525;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1526;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingSet(): GroupingSetContext {
        let localContext = new GroupingSetContext(this.context, this.state);
        this.enterRule(localContext, 66, TrinoSqlParser.RULE_groupingSet);
        let _la: number;
        try {
            this.state = 1543;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 175, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1530;
                this.match(TrinoSqlParser.T__0);
                this.state = 1539;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 174, this.context) ) {
                case 1:
                    {
                    this.state = 1531;
                    this.groupingTerm();
                    this.state = 1536;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 1532;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 1533;
                        this.groupingTerm();
                        }
                        }
                        this.state = 1538;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    break;
                }
                this.state = 1541;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1542;
                this.groupingTerm();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupingTerm(): GroupingTermContext {
        let localContext = new GroupingTermContext(this.context, this.state);
        this.enterRule(localContext, 68, TrinoSqlParser.RULE_groupingTerm);
        try {
            this.state = 1547;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 176, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1545;
                this.columnRef();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1546;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowDefinition(): WindowDefinitionContext {
        let localContext = new WindowDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 70, TrinoSqlParser.RULE_windowDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1549;
            localContext._name = this.identifier();
            this.state = 1550;
            this.match(TrinoSqlParser.KW_AS);
            this.state = 1551;
            this.match(TrinoSqlParser.T__0);
            this.state = 1552;
            this.windowSpecification();
            this.state = 1553;
            this.match(TrinoSqlParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowSpecification(): WindowSpecificationContext {
        let localContext = new WindowSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 72, TrinoSqlParser.RULE_windowSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1556;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 177, this.context) ) {
            case 1:
                {
                this.state = 1555;
                localContext._existingWindowName = this.identifier();
                }
                break;
            }
            this.state = 1561;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 201) {
                {
                this.state = 1558;
                this.match(TrinoSqlParser.KW_PARTITION);
                this.state = 1559;
                this.match(TrinoSqlParser.KW_BY);
                this.state = 1560;
                this.partitionBy();
                }
            }

            this.state = 1573;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 195) {
                {
                this.state = 1563;
                this.match(TrinoSqlParser.KW_ORDER);
                this.state = 1564;
                this.match(TrinoSqlParser.KW_BY);
                this.state = 1565;
                this.sortItem();
                this.state = 1570;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 1566;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 1567;
                    this.sortItem();
                    }
                    }
                    this.state = 1572;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 1576;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 116 || _la === 168 || _la === 219 || _la === 240) {
                {
                this.state = 1575;
                this.windowFrame();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedQuery(): NamedQueryContext {
        let localContext = new NamedQueryContext(this.context, this.state);
        this.enterRule(localContext, 74, TrinoSqlParser.RULE_namedQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1578;
            localContext._name = this.identifier();
            this.state = 1580;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1) {
                {
                this.state = 1579;
                this.columnAliases();
                }
            }

            this.state = 1582;
            this.match(TrinoSqlParser.KW_AS);
            this.state = 1583;
            this.match(TrinoSqlParser.T__0);
            this.state = 1584;
            this.query();
            this.state = 1585;
            this.match(TrinoSqlParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setQuantifier(): SetQuantifierContext {
        let localContext = new SetQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 76, TrinoSqlParser.RULE_setQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1587;
            _la = this.tokenStream.LA(1);
            if(!(_la === 22 || _la === 79)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectItem(): SelectItemContext {
        let localContext = new SelectItemContext(this.context, this.state);
        this.enterRule(localContext, 78, TrinoSqlParser.RULE_selectItem);
        let _la: number;
        try {
            this.state = 1605;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 187, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1591;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 183, this.context) ) {
                case 1:
                    {
                    this.state = 1589;
                    this.selectLiteralColumnName();
                    }
                    break;
                case 2:
                    {
                    this.state = 1590;
                    this.selectExpressionColumnName();
                    }
                    break;
                }
                this.state = 1597;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 185, this.context) ) {
                case 1:
                    {
                    this.state = 1594;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 1593;
                        this.match(TrinoSqlParser.KW_AS);
                        }
                    }

                    this.state = 1596;
                    localContext._alias = this.identifier();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1599;
                this.tableAllColumns();
                this.state = 1602;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 186, this.context) ) {
                case 1:
                    {
                    this.state = 1600;
                    this.match(TrinoSqlParser.KW_AS);
                    this.state = 1601;
                    this.columnAliases();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1604;
                this.selectAllWithoutTable();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectAllWithoutTable(): SelectAllWithoutTableContext {
        let localContext = new SelectAllWithoutTableContext(this.context, this.state);
        this.enterRule(localContext, 80, TrinoSqlParser.RULE_selectAllWithoutTable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1607;
            this.match(TrinoSqlParser.ASTERISK);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableAllColumns(): TableAllColumnsContext {
        let localContext = new TableAllColumnsContext(this.context, this.state);
        this.enterRule(localContext, 82, TrinoSqlParser.RULE_tableAllColumns);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1609;
            this.primaryExpression(0);
            this.state = 1610;
            this.match(TrinoSqlParser.T__3);
            this.state = 1611;
            this.match(TrinoSqlParser.ASTERISK);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectLiteralColumnName(): SelectLiteralColumnNameContext {
        let localContext = new SelectLiteralColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 84, TrinoSqlParser.RULE_selectLiteralColumnName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1613;
            this.columnRef();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectExpressionColumnName(): SelectExpressionColumnNameContext {
        let localContext = new SelectExpressionColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 86, TrinoSqlParser.RULE_selectExpressionColumnName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1615;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public relation(): RelationContext;
    public relation(_p: number): RelationContext;
    public relation(_p?: number): RelationContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new RelationContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 88;
        this.enterRecursionRule(localContext, 88, TrinoSqlParser.RULE_relation, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new RelationDefaultContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 1618;
            this.sampledRelation();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1638;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 189, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new JoinRelationContext(new RelationContext(parentContext, parentState));
                    (localContext as JoinRelationContext)._left = previousContext;
                    this.pushNewRecursionContext(localContext, _startState, TrinoSqlParser.RULE_relation);
                    this.state = 1620;
                    if (!(this.precpred(this.context, 2))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                    }
                    this.state = 1634;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoSqlParser.KW_CROSS:
                        {
                        this.state = 1621;
                        this.match(TrinoSqlParser.KW_CROSS);
                        this.state = 1622;
                        this.match(TrinoSqlParser.KW_JOIN);
                        this.state = 1623;
                        (localContext as JoinRelationContext)._right = this.sampledRelation();
                        }
                        break;
                    case TrinoSqlParser.KW_FULL:
                    case TrinoSqlParser.KW_INNER:
                    case TrinoSqlParser.KW_JOIN:
                    case TrinoSqlParser.KW_LEFT:
                    case TrinoSqlParser.KW_RIGHT:
                        {
                        this.state = 1624;
                        this.joinType();
                        this.state = 1625;
                        this.match(TrinoSqlParser.KW_JOIN);
                        this.state = 1626;
                        (localContext as JoinRelationContext)._rightRelation = this.relation(0);
                        this.state = 1627;
                        this.joinCriteria();
                        }
                        break;
                    case TrinoSqlParser.KW_NATURAL:
                        {
                        this.state = 1629;
                        this.match(TrinoSqlParser.KW_NATURAL);
                        this.state = 1630;
                        this.joinType();
                        this.state = 1631;
                        this.match(TrinoSqlParser.KW_JOIN);
                        this.state = 1632;
                        (localContext as JoinRelationContext)._right = this.sampledRelation();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    }
                }
                this.state = 1640;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 189, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public joinType(): JoinTypeContext {
        let localContext = new JoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 90, TrinoSqlParser.RULE_joinType);
        let _la: number;
        try {
            this.state = 1656;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_INNER:
            case TrinoSqlParser.KW_JOIN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1642;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 125) {
                    {
                    this.state = 1641;
                    this.match(TrinoSqlParser.KW_INNER);
                    }
                }

                }
                break;
            case TrinoSqlParser.KW_LEFT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1644;
                this.match(TrinoSqlParser.KW_LEFT);
                this.state = 1646;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 1645;
                    this.match(TrinoSqlParser.KW_OUTER);
                    }
                }

                }
                break;
            case TrinoSqlParser.KW_RIGHT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1648;
                this.match(TrinoSqlParser.KW_RIGHT);
                this.state = 1650;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 1649;
                    this.match(TrinoSqlParser.KW_OUTER);
                    }
                }

                }
                break;
            case TrinoSqlParser.KW_FULL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1652;
                this.match(TrinoSqlParser.KW_FULL);
                this.state = 1654;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 197) {
                    {
                    this.state = 1653;
                    this.match(TrinoSqlParser.KW_OUTER);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinCriteria(): JoinCriteriaContext {
        let localContext = new JoinCriteriaContext(this.context, this.state);
        this.enterRule(localContext, 92, TrinoSqlParser.RULE_joinCriteria);
        let _la: number;
        try {
            this.state = 1672;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_ON:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1658;
                this.match(TrinoSqlParser.KW_ON);
                this.state = 1659;
                this.booleanExpression(0);
                }
                break;
            case TrinoSqlParser.KW_USING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1660;
                this.match(TrinoSqlParser.KW_USING);
                this.state = 1661;
                this.match(TrinoSqlParser.T__0);
                this.state = 1662;
                this.identifier();
                this.state = 1667;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 1663;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 1664;
                    this.identifier();
                    }
                    }
                    this.state = 1669;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1670;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampledRelation(): SampledRelationContext {
        let localContext = new SampledRelationContext(this.context, this.state);
        this.enterRule(localContext, 94, TrinoSqlParser.RULE_sampledRelation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1674;
            this.patternRecognition();
            this.state = 1681;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 197, this.context) ) {
            case 1:
                {
                this.state = 1675;
                this.match(TrinoSqlParser.KW_TABLESAMPLE);
                this.state = 1676;
                this.sampleType();
                this.state = 1677;
                this.match(TrinoSqlParser.T__0);
                this.state = 1678;
                localContext._percentage = this.expression();
                this.state = 1679;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleType(): SampleTypeContext {
        let localContext = new SampleTypeContext(this.context, this.state);
        this.enterRule(localContext, 96, TrinoSqlParser.RULE_sampleType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1683;
            _la = this.tokenStream.LA(1);
            if(!(_la === 33 || _la === 259)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trimsSpecification(): TrimsSpecificationContext {
        let localContext = new TrimsSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 98, TrinoSqlParser.RULE_trimsSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1685;
            _la = this.tokenStream.LA(1);
            if(!(_la === 35 || _la === 150 || _la === 270)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listAggOverflowBehavior(): ListAggOverflowBehaviorContext {
        let localContext = new ListAggOverflowBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 100, TrinoSqlParser.RULE_listAggOverflowBehavior);
        let _la: number;
        try {
            this.state = 1693;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_ERROR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1687;
                this.match(TrinoSqlParser.KW_ERROR);
                }
                break;
            case TrinoSqlParser.KW_TRUNCATE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1688;
                this.match(TrinoSqlParser.KW_TRUNCATE);
                this.state = 1690;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 326 || _la === 327) {
                    {
                    this.state = 1689;
                    this.string_();
                    }
                }

                this.state = 1692;
                this.listAggCountIndication();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listAggCountIndication(): ListAggCountIndicationContext {
        let localContext = new ListAggCountIndicationContext(this.context, this.state);
        this.enterRule(localContext, 102, TrinoSqlParser.RULE_listAggCountIndication);
        try {
            this.state = 1699;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_WITH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1695;
                this.match(TrinoSqlParser.KW_WITH);
                this.state = 1696;
                this.match(TrinoSqlParser.KW_COUNT);
                }
                break;
            case TrinoSqlParser.KW_WITHOUT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1697;
                this.match(TrinoSqlParser.KW_WITHOUT);
                this.state = 1698;
                this.match(TrinoSqlParser.KW_COUNT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternRecognition(): PatternRecognitionContext {
        let localContext = new PatternRecognitionContext(this.context, this.state);
        this.enterRule(localContext, 104, TrinoSqlParser.RULE_patternRecognition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1701;
            this.aliasedRelation();
            this.state = 1777;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 215, this.context) ) {
            case 1:
                {
                this.state = 1702;
                this.match(TrinoSqlParser.KW_MATCH_RECOGNIZE);
                this.state = 1703;
                this.match(TrinoSqlParser.T__0);
                this.state = 1707;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 201) {
                    {
                    this.state = 1704;
                    this.match(TrinoSqlParser.KW_PARTITION);
                    this.state = 1705;
                    this.match(TrinoSqlParser.KW_BY);
                    this.state = 1706;
                    this.partitionBy();
                    }
                }

                this.state = 1719;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 1709;
                    this.match(TrinoSqlParser.KW_ORDER);
                    this.state = 1710;
                    this.match(TrinoSqlParser.KW_BY);
                    this.state = 1711;
                    this.sortItem();
                    this.state = 1716;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 1712;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 1713;
                        this.sortItem();
                        }
                        }
                        this.state = 1718;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1730;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 168) {
                    {
                    this.state = 1721;
                    this.match(TrinoSqlParser.KW_MEASURES);
                    this.state = 1722;
                    this.measureDefinition();
                    this.state = 1727;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 1723;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 1724;
                        this.measureDefinition();
                        }
                        }
                        this.state = 1729;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1733;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 22 || _la === 191) {
                    {
                    this.state = 1732;
                    this.rowsPerMatch();
                    }
                }

                this.state = 1738;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 21) {
                    {
                    this.state = 1735;
                    this.match(TrinoSqlParser.KW_AFTER);
                    this.state = 1736;
                    this.match(TrinoSqlParser.KW_MATCH);
                    this.state = 1737;
                    this.skipTo();
                    }
                }

                this.state = 1741;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 124 || _la === 247) {
                    {
                    this.state = 1740;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 124 || _la === 247)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1743;
                this.match(TrinoSqlParser.KW_PATTERN);
                this.state = 1744;
                this.match(TrinoSqlParser.T__0);
                this.state = 1745;
                this.rowPattern(0);
                this.state = 1746;
                this.match(TrinoSqlParser.T__1);
                this.state = 1756;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 257) {
                    {
                    this.state = 1747;
                    this.match(TrinoSqlParser.KW_SUBSET);
                    this.state = 1748;
                    this.subsetDefinition();
                    this.state = 1753;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 1749;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 1750;
                        this.subsetDefinition();
                        }
                        }
                        this.state = 1755;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 1758;
                this.match(TrinoSqlParser.KW_DEFINE);
                this.state = 1759;
                this.variableDefinition();
                this.state = 1764;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 1760;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 1761;
                    this.variableDefinition();
                    }
                    }
                    this.state = 1766;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1767;
                this.match(TrinoSqlParser.T__1);
                this.state = 1775;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 214, this.context) ) {
                case 1:
                    {
                    this.state = 1769;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 1768;
                        this.match(TrinoSqlParser.KW_AS);
                        }
                    }

                    this.state = 1771;
                    this.identifier();
                    this.state = 1773;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 213, this.context) ) {
                    case 1:
                        {
                        this.state = 1772;
                        this.columnAliases();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public measureDefinition(): MeasureDefinitionContext {
        let localContext = new MeasureDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 106, TrinoSqlParser.RULE_measureDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1779;
            this.expression();
            this.state = 1780;
            this.match(TrinoSqlParser.KW_AS);
            this.state = 1781;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsPerMatch(): RowsPerMatchContext {
        let localContext = new RowsPerMatchContext(this.context, this.state);
        this.enterRule(localContext, 108, TrinoSqlParser.RULE_rowsPerMatch);
        let _la: number;
        try {
            this.state = 1794;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_ONE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1783;
                this.match(TrinoSqlParser.KW_ONE);
                this.state = 1784;
                this.match(TrinoSqlParser.KW_ROW);
                this.state = 1785;
                this.match(TrinoSqlParser.KW_PER);
                this.state = 1786;
                this.match(TrinoSqlParser.KW_MATCH);
                }
                break;
            case TrinoSqlParser.KW_ALL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1787;
                this.match(TrinoSqlParser.KW_ALL);
                this.state = 1788;
                this.match(TrinoSqlParser.KW_ROWS);
                this.state = 1789;
                this.match(TrinoSqlParser.KW_PER);
                this.state = 1790;
                this.match(TrinoSqlParser.KW_MATCH);
                this.state = 1792;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 189 || _la === 253 || _la === 304) {
                    {
                    this.state = 1791;
                    this.emptyMatchHandling();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public emptyMatchHandling(): EmptyMatchHandlingContext {
        let localContext = new EmptyMatchHandlingContext(this.context, this.state);
        this.enterRule(localContext, 110, TrinoSqlParser.RULE_emptyMatchHandling);
        try {
            this.state = 1805;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_SHOW:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1796;
                this.match(TrinoSqlParser.KW_SHOW);
                this.state = 1797;
                this.match(TrinoSqlParser.KW_EMPTY);
                this.state = 1798;
                this.match(TrinoSqlParser.KW_MATCHES);
                }
                break;
            case TrinoSqlParser.KW_OMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1799;
                this.match(TrinoSqlParser.KW_OMIT);
                this.state = 1800;
                this.match(TrinoSqlParser.KW_EMPTY);
                this.state = 1801;
                this.match(TrinoSqlParser.KW_MATCHES);
                }
                break;
            case TrinoSqlParser.KW_WITH:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1802;
                this.match(TrinoSqlParser.KW_WITH);
                this.state = 1803;
                this.match(TrinoSqlParser.KW_UNMATCHED);
                this.state = 1804;
                this.match(TrinoSqlParser.KW_ROWS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public skipTo(): SkipToContext {
        let localContext = new SkipToContext(this.context, this.state);
        this.enterRule(localContext, 112, TrinoSqlParser.RULE_skipTo);
        try {
            this.state = 1826;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 219, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1807;
                this.match(TrinoSqlParser.T__4);
                this.state = 1808;
                this.match(TrinoSqlParser.KW_TO);
                this.state = 1809;
                this.match(TrinoSqlParser.KW_NEXT);
                this.state = 1810;
                this.match(TrinoSqlParser.KW_ROW);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1811;
                this.match(TrinoSqlParser.T__4);
                this.state = 1812;
                this.match(TrinoSqlParser.KW_PAST);
                this.state = 1813;
                this.match(TrinoSqlParser.KW_LAST);
                this.state = 1814;
                this.match(TrinoSqlParser.KW_ROW);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1815;
                this.match(TrinoSqlParser.T__4);
                this.state = 1816;
                this.match(TrinoSqlParser.KW_TO);
                this.state = 1817;
                this.match(TrinoSqlParser.KW_FIRST);
                this.state = 1818;
                this.identifier();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1819;
                this.match(TrinoSqlParser.T__4);
                this.state = 1820;
                this.match(TrinoSqlParser.KW_TO);
                this.state = 1821;
                this.match(TrinoSqlParser.KW_LAST);
                this.state = 1822;
                this.identifier();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1823;
                this.match(TrinoSqlParser.T__4);
                this.state = 1824;
                this.match(TrinoSqlParser.KW_TO);
                this.state = 1825;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subsetDefinition(): SubsetDefinitionContext {
        let localContext = new SubsetDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 114, TrinoSqlParser.RULE_subsetDefinition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1828;
            localContext._name = this.identifier();
            this.state = 1829;
            this.match(TrinoSqlParser.EQ);
            this.state = 1830;
            this.match(TrinoSqlParser.T__0);
            this.state = 1831;
            localContext._identifier = this.identifier();
            localContext._union.push(localContext._identifier);
            this.state = 1836;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 3) {
                {
                {
                this.state = 1832;
                this.match(TrinoSqlParser.T__2);
                this.state = 1833;
                localContext._identifier = this.identifier();
                localContext._union.push(localContext._identifier);
                }
                }
                this.state = 1838;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1839;
            this.match(TrinoSqlParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableDefinition(): VariableDefinitionContext {
        let localContext = new VariableDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 116, TrinoSqlParser.RULE_variableDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1841;
            this.identifier();
            this.state = 1842;
            this.match(TrinoSqlParser.KW_AS);
            this.state = 1843;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aliasedRelation(): AliasedRelationContext {
        let localContext = new AliasedRelationContext(this.context, this.state);
        this.enterRule(localContext, 118, TrinoSqlParser.RULE_aliasedRelation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1845;
            this.relationPrimary();
            this.state = 1853;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 223, this.context) ) {
            case 1:
                {
                this.state = 1847;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 1846;
                    this.match(TrinoSqlParser.KW_AS);
                    }
                }

                this.state = 1849;
                localContext._alias = this.identifier();
                this.state = 1851;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 222, this.context) ) {
                case 1:
                    {
                    this.state = 1850;
                    this.columnAliases();
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnListCreate(): ColumnListCreateContext {
        let localContext = new ColumnListCreateContext(this.context, this.state);
        this.enterRule(localContext, 120, TrinoSqlParser.RULE_columnListCreate);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1855;
            this.match(TrinoSqlParser.T__0);
            this.state = 1856;
            this.columnNameCreate();
            this.state = 1861;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 3) {
                {
                {
                this.state = 1857;
                this.match(TrinoSqlParser.T__2);
                this.state = 1858;
                this.columnNameCreate();
                }
                }
                this.state = 1863;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1864;
            this.match(TrinoSqlParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnList(): ColumnListContext {
        let localContext = new ColumnListContext(this.context, this.state);
        this.enterRule(localContext, 122, TrinoSqlParser.RULE_columnList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1866;
            this.match(TrinoSqlParser.T__0);
            this.state = 1867;
            this.columnRef();
            this.state = 1872;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 3) {
                {
                {
                this.state = 1868;
                this.match(TrinoSqlParser.T__2);
                this.state = 1869;
                this.columnRef();
                }
                }
                this.state = 1874;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1875;
            this.match(TrinoSqlParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnAliases(): ColumnAliasesContext {
        let localContext = new ColumnAliasesContext(this.context, this.state);
        this.enterRule(localContext, 124, TrinoSqlParser.RULE_columnAliases);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1877;
            this.match(TrinoSqlParser.T__0);
            this.state = 1878;
            this.identifier();
            this.state = 1883;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 3) {
                {
                {
                this.state = 1879;
                this.match(TrinoSqlParser.T__2);
                this.state = 1880;
                this.identifier();
                }
                }
                this.state = 1885;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1886;
            this.match(TrinoSqlParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationPrimary(): RelationPrimaryContext {
        let localContext = new RelationPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 126, TrinoSqlParser.RULE_relationPrimary);
        try {
            this.state = 1897;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 228, this.context) ) {
            case 1:
                localContext = new TableNameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1888;
                this.tableOrViewName();
                this.state = 1890;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 227, this.context) ) {
                case 1:
                    {
                    this.state = 1889;
                    this.queryPeriod();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new ExpressionSourceTableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1892;
                this.relationSourceTable();
                }
                break;
            case 3:
                localContext = new ParenthesizedRelationContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1893;
                this.match(TrinoSqlParser.T__0);
                this.state = 1894;
                this.relation(0);
                this.state = 1895;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relationSourceTable(): RelationSourceTableContext {
        let localContext = new RelationSourceTableContext(this.context, this.state);
        this.enterRule(localContext, 128, TrinoSqlParser.RULE_relationSourceTable);
        let _la: number;
        try {
            this.state = 1962;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.T__0:
                localContext = new SubqueryRelationContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1899;
                this.match(TrinoSqlParser.T__0);
                this.state = 1900;
                this.query();
                this.state = 1901;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case TrinoSqlParser.KW_UNNEST:
                localContext = new UnnestContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1903;
                this.match(TrinoSqlParser.KW_UNNEST);
                this.state = 1904;
                this.match(TrinoSqlParser.T__0);
                this.state = 1905;
                this.expression();
                this.state = 1910;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 1906;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 1907;
                    this.expression();
                    }
                    }
                    this.state = 1912;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1913;
                this.match(TrinoSqlParser.T__1);
                this.state = 1916;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 230, this.context) ) {
                case 1:
                    {
                    this.state = 1914;
                    this.match(TrinoSqlParser.KW_WITH);
                    this.state = 1915;
                    this.match(TrinoSqlParser.KW_ORDINALITY);
                    }
                    break;
                }
                }
                break;
            case TrinoSqlParser.KW_LATERAL:
                localContext = new LateralContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1918;
                this.match(TrinoSqlParser.KW_LATERAL);
                this.state = 1919;
                this.match(TrinoSqlParser.T__0);
                this.state = 1920;
                this.query();
                this.state = 1921;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case TrinoSqlParser.KW_TABLE:
                localContext = new TableFunctionInvocationContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1923;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 1924;
                this.match(TrinoSqlParser.T__0);
                this.state = 1925;
                this.tableFunctionCall();
                this.state = 1926;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case TrinoSqlParser.KW_JSON_TABLE:
                localContext = new JsonTableContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1928;
                this.match(TrinoSqlParser.KW_JSON_TABLE);
                this.state = 1929;
                this.match(TrinoSqlParser.T__0);
                this.state = 1930;
                this.jsonPathInvocation();
                this.state = 1931;
                this.match(TrinoSqlParser.KW_COLUMNS);
                this.state = 1932;
                this.match(TrinoSqlParser.T__0);
                this.state = 1933;
                this.jsonTableColumn();
                this.state = 1938;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 1934;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 1935;
                    this.jsonTableColumn();
                    }
                    }
                    this.state = 1940;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1941;
                this.match(TrinoSqlParser.T__1);
                this.state = 1953;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 232, this.context) ) {
                case 1:
                    {
                    this.state = 1942;
                    this.match(TrinoSqlParser.KW_PLAN);
                    this.state = 1943;
                    this.match(TrinoSqlParser.T__0);
                    this.state = 1944;
                    this.jsonTableSpecificPlan();
                    this.state = 1945;
                    this.match(TrinoSqlParser.T__1);
                    }
                    break;
                case 2:
                    {
                    this.state = 1947;
                    this.match(TrinoSqlParser.KW_PLAN);
                    this.state = 1948;
                    this.match(TrinoSqlParser.KW_DEFAULT);
                    this.state = 1949;
                    this.match(TrinoSqlParser.T__0);
                    this.state = 1950;
                    this.jsonTableDefaultPlan();
                    this.state = 1951;
                    this.match(TrinoSqlParser.T__1);
                    }
                    break;
                }
                this.state = 1958;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 85 || _la === 89) {
                    {
                    this.state = 1955;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 85 || _la === 89)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1956;
                    this.match(TrinoSqlParser.KW_ON);
                    this.state = 1957;
                    this.match(TrinoSqlParser.KW_ERROR);
                    }
                }

                this.state = 1960;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonTableColumn(): JsonTableColumnContext {
        let localContext = new JsonTableColumnContext(this.context, this.state);
        this.enterRule(localContext, 130, TrinoSqlParser.RULE_jsonTableColumn);
        let _la: number;
        try {
            this.state = 2041;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 247, this.context) ) {
            case 1:
                localContext = new OrdinalityColumnContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1964;
                this.identifier();
                this.state = 1965;
                this.match(TrinoSqlParser.KW_FOR);
                this.state = 1966;
                this.match(TrinoSqlParser.KW_ORDINALITY);
                }
                break;
            case 2:
                localContext = new ValueColumnContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1968;
                this.identifier();
                this.state = 1969;
                this.type_(0);
                this.state = 1972;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 205) {
                    {
                    this.state = 1970;
                    this.match(TrinoSqlParser.KW_PATH);
                    this.state = 1971;
                    this.string_();
                    }
                }

                this.state = 1978;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 236, this.context) ) {
                case 1:
                    {
                    this.state = 1974;
                    (localContext as ValueColumnContext)._emptyBehavior = this.jsonValueBehavior();
                    this.state = 1975;
                    this.match(TrinoSqlParser.KW_ON);
                    this.state = 1976;
                    this.match(TrinoSqlParser.KW_EMPTY);
                    }
                    break;
                }
                this.state = 1984;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 70 || _la === 89 || _la === 183) {
                    {
                    this.state = 1980;
                    (localContext as ValueColumnContext)._errorBehavior = this.jsonValueBehavior();
                    this.state = 1981;
                    this.match(TrinoSqlParser.KW_ON);
                    this.state = 1982;
                    this.match(TrinoSqlParser.KW_ERROR);
                    }
                }

                }
                break;
            case 3:
                localContext = new QueryColumnContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1986;
                this.identifier();
                this.state = 1987;
                this.type_(0);
                this.state = 1988;
                this.match(TrinoSqlParser.KW_FORMAT);
                this.state = 1989;
                this.jsonRepresentation();
                this.state = 1992;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 205) {
                    {
                    this.state = 1990;
                    this.match(TrinoSqlParser.KW_PATH);
                    this.state = 1991;
                    this.string_();
                    }
                }

                this.state = 1997;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304 || _la === 306) {
                    {
                    this.state = 1994;
                    this.jsonQueryWrapperBehavior();
                    this.state = 1995;
                    this.match(TrinoSqlParser.KW_WRAPPER);
                    }
                }

                this.state = 2006;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144 || _la === 189) {
                    {
                    this.state = 1999;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 144 || _la === 189)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2000;
                    this.match(TrinoSqlParser.KW_QUOTES);
                    this.state = 2004;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 190) {
                        {
                        this.state = 2001;
                        this.match(TrinoSqlParser.KW_ON);
                        this.state = 2002;
                        this.match(TrinoSqlParser.KW_SCALAR);
                        this.state = 2003;
                        this.match(TrinoSqlParser.KW_TEXT_STRING);
                        }
                    }

                    }
                }

                this.state = 2012;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 242, this.context) ) {
                case 1:
                    {
                    this.state = 2008;
                    (localContext as QueryColumnContext)._emptyBehavior = this.jsonQueryBehavior();
                    this.state = 2009;
                    this.match(TrinoSqlParser.KW_ON);
                    this.state = 2010;
                    this.match(TrinoSqlParser.KW_EMPTY);
                    }
                    break;
                }
                this.state = 2018;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 85 || _la === 89 || _la === 183) {
                    {
                    this.state = 2014;
                    (localContext as QueryColumnContext)._errorBehavior = this.jsonQueryBehavior();
                    this.state = 2015;
                    this.match(TrinoSqlParser.KW_ON);
                    this.state = 2016;
                    this.match(TrinoSqlParser.KW_ERROR);
                    }
                }

                }
                break;
            case 4:
                localContext = new NestedColumnsContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2020;
                this.match(TrinoSqlParser.KW_NESTED);
                this.state = 2022;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 205) {
                    {
                    this.state = 2021;
                    this.match(TrinoSqlParser.KW_PATH);
                    }
                }

                this.state = 2024;
                this.string_();
                this.state = 2027;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2025;
                    this.match(TrinoSqlParser.KW_AS);
                    this.state = 2026;
                    this.identifier();
                    }
                }

                this.state = 2029;
                this.match(TrinoSqlParser.KW_COLUMNS);
                this.state = 2030;
                this.match(TrinoSqlParser.T__0);
                this.state = 2031;
                this.jsonTableColumn();
                this.state = 2036;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 2032;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 2033;
                    this.jsonTableColumn();
                    }
                    }
                    this.state = 2038;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2039;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonTableSpecificPlan(): JsonTableSpecificPlanContext {
        let localContext = new JsonTableSpecificPlanContext(this.context, this.state);
        this.enterRule(localContext, 132, TrinoSqlParser.RULE_jsonTableSpecificPlan);
        let _la: number;
        try {
            this.state = 2068;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 250, this.context) ) {
            case 1:
                localContext = new LeafPlanContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2043;
                this.jsonTablePathName();
                }
                break;
            case 2:
                localContext = new JoinPlanContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2044;
                this.jsonTablePathName();
                this.state = 2045;
                _la = this.tokenStream.LA(1);
                if(!(_la === 125 || _la === 197)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2046;
                this.planPrimary();
                }
                break;
            case 3:
                localContext = new UnionPlanContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2048;
                this.planPrimary();
                this.state = 2049;
                this.match(TrinoSqlParser.KW_UNION);
                this.state = 2050;
                this.planPrimary();
                this.state = 2055;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 281) {
                    {
                    {
                    this.state = 2051;
                    this.match(TrinoSqlParser.KW_UNION);
                    this.state = 2052;
                    this.planPrimary();
                    }
                    }
                    this.state = 2057;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 4:
                localContext = new CrossPlanContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2058;
                this.planPrimary();
                this.state = 2059;
                this.match(TrinoSqlParser.KW_CROSS);
                this.state = 2060;
                this.planPrimary();
                this.state = 2065;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 54) {
                    {
                    {
                    this.state = 2061;
                    this.match(TrinoSqlParser.KW_CROSS);
                    this.state = 2062;
                    this.planPrimary();
                    }
                    }
                    this.state = 2067;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonTablePathName(): JsonTablePathNameContext {
        let localContext = new JsonTablePathNameContext(this.context, this.state);
        this.enterRule(localContext, 134, TrinoSqlParser.RULE_jsonTablePathName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2070;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public planPrimary(): PlanPrimaryContext {
        let localContext = new PlanPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 136, TrinoSqlParser.RULE_planPrimary);
        try {
            this.state = 2077;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_ABSENT:
            case TrinoSqlParser.KW_ADD:
            case TrinoSqlParser.KW_ADMIN:
            case TrinoSqlParser.KW_AFTER:
            case TrinoSqlParser.KW_ALL:
            case TrinoSqlParser.KW_ANALYZE:
            case TrinoSqlParser.KW_ANY:
            case TrinoSqlParser.KW_ARRAY:
            case TrinoSqlParser.KW_ASC:
            case TrinoSqlParser.KW_AT:
            case TrinoSqlParser.KW_AUTHORIZATION:
            case TrinoSqlParser.KW_BEGIN:
            case TrinoSqlParser.KW_BERNOULLI:
            case TrinoSqlParser.KW_BOTH:
            case TrinoSqlParser.KW_CALL:
            case TrinoSqlParser.KW_CALLED:
            case TrinoSqlParser.KW_CASCADE:
            case TrinoSqlParser.KW_CATALOG:
            case TrinoSqlParser.KW_CATALOGS:
            case TrinoSqlParser.KW_COLUMN:
            case TrinoSqlParser.KW_COLUMNS:
            case TrinoSqlParser.KW_COMMENT:
            case TrinoSqlParser.KW_COMMIT:
            case TrinoSqlParser.KW_COMMITTED:
            case TrinoSqlParser.KW_CONDITIONAL:
            case TrinoSqlParser.KW_COUNT:
            case TrinoSqlParser.KW_COPARTITION:
            case TrinoSqlParser.KW_CURRENT:
            case TrinoSqlParser.KW_DATA:
            case TrinoSqlParser.KW_DATE:
            case TrinoSqlParser.KW_DAY:
            case TrinoSqlParser.KW_DECLARE:
            case TrinoSqlParser.KW_DEFAULT:
            case TrinoSqlParser.KW_DEFINE:
            case TrinoSqlParser.KW_DEFINER:
            case TrinoSqlParser.KW_DENY:
            case TrinoSqlParser.KW_DESC:
            case TrinoSqlParser.KW_DESCRIPTOR:
            case TrinoSqlParser.KW_DETERMINISTIC:
            case TrinoSqlParser.KW_DISTRIBUTED:
            case TrinoSqlParser.KW_DO:
            case TrinoSqlParser.KW_DOUBLE:
            case TrinoSqlParser.KW_EMPTY:
            case TrinoSqlParser.KW_ELSEIF:
            case TrinoSqlParser.KW_ENCODING:
            case TrinoSqlParser.KW_ERROR:
            case TrinoSqlParser.KW_EXCLUDING:
            case TrinoSqlParser.KW_EXPLAIN:
            case TrinoSqlParser.KW_FETCH:
            case TrinoSqlParser.KW_FILTER:
            case TrinoSqlParser.KW_FINAL:
            case TrinoSqlParser.KW_FIRST:
            case TrinoSqlParser.KW_FOLLOWING:
            case TrinoSqlParser.KW_FORMAT:
            case TrinoSqlParser.KW_FUNCTION:
            case TrinoSqlParser.KW_FUNCTIONS:
            case TrinoSqlParser.KW_GRACE:
            case TrinoSqlParser.KW_GRANT:
            case TrinoSqlParser.KW_GRANTED:
            case TrinoSqlParser.KW_GRANTS:
            case TrinoSqlParser.KW_GRAPHVIZ:
            case TrinoSqlParser.KW_GROUPS:
            case TrinoSqlParser.KW_HOUR:
            case TrinoSqlParser.KW_IF:
            case TrinoSqlParser.KW_IGNORE:
            case TrinoSqlParser.KW_IMMEDIATE:
            case TrinoSqlParser.KW_INCLUDING:
            case TrinoSqlParser.KW_INITIAL:
            case TrinoSqlParser.KW_INPUT:
            case TrinoSqlParser.KW_INTERVAL:
            case TrinoSqlParser.KW_INVOKER:
            case TrinoSqlParser.KW_IO:
            case TrinoSqlParser.KW_ISOLATION:
            case TrinoSqlParser.KW_ITERATE:
            case TrinoSqlParser.KW_JSON:
            case TrinoSqlParser.KW_KEEP:
            case TrinoSqlParser.KW_KEY:
            case TrinoSqlParser.KW_KEYS:
            case TrinoSqlParser.KW_LANGUAGE:
            case TrinoSqlParser.KW_LAST:
            case TrinoSqlParser.KW_LATERAL:
            case TrinoSqlParser.KW_LEADING:
            case TrinoSqlParser.KW_LEAVE:
            case TrinoSqlParser.KW_LEVEL:
            case TrinoSqlParser.KW_LIMIT:
            case TrinoSqlParser.KW_LOCAL:
            case TrinoSqlParser.KW_LOGICAL:
            case TrinoSqlParser.KW_LOOP:
            case TrinoSqlParser.KW_MAP:
            case TrinoSqlParser.KW_MATCH:
            case TrinoSqlParser.KW_MATCHED:
            case TrinoSqlParser.KW_MATCHES:
            case TrinoSqlParser.KW_MATCH_RECOGNIZE:
            case TrinoSqlParser.KW_MATERIALIZED:
            case TrinoSqlParser.KW_MEASURES:
            case TrinoSqlParser.KW_MERGE:
            case TrinoSqlParser.KW_MINUTE:
            case TrinoSqlParser.KW_MONTH:
            case TrinoSqlParser.KW_NESTED:
            case TrinoSqlParser.KW_NEXT:
            case TrinoSqlParser.KW_NFC:
            case TrinoSqlParser.KW_NFD:
            case TrinoSqlParser.KW_NFKC:
            case TrinoSqlParser.KW_NFKD:
            case TrinoSqlParser.KW_NO:
            case TrinoSqlParser.KW_NONE:
            case TrinoSqlParser.KW_NULLIF:
            case TrinoSqlParser.KW_NULLS:
            case TrinoSqlParser.KW_OBJECT:
            case TrinoSqlParser.KW_OF:
            case TrinoSqlParser.KW_OFFSET:
            case TrinoSqlParser.KW_OMIT:
            case TrinoSqlParser.KW_ONE:
            case TrinoSqlParser.KW_ONLY:
            case TrinoSqlParser.KW_OPTION:
            case TrinoSqlParser.KW_ORDINALITY:
            case TrinoSqlParser.KW_OUTPUT:
            case TrinoSqlParser.KW_OVER:
            case TrinoSqlParser.KW_OVERFLOW:
            case TrinoSqlParser.KW_PARTITION:
            case TrinoSqlParser.KW_PARTITIONS:
            case TrinoSqlParser.KW_PASSING:
            case TrinoSqlParser.KW_PAST:
            case TrinoSqlParser.KW_PATH:
            case TrinoSqlParser.KW_PATTERN:
            case TrinoSqlParser.KW_PER:
            case TrinoSqlParser.KW_PERIOD:
            case TrinoSqlParser.KW_PERMUTE:
            case TrinoSqlParser.KW_PLAN:
            case TrinoSqlParser.KW_POSITION:
            case TrinoSqlParser.KW_PRECEDING:
            case TrinoSqlParser.KW_PRECISION:
            case TrinoSqlParser.KW_PRIVILEGES:
            case TrinoSqlParser.KW_PROPERTIES:
            case TrinoSqlParser.KW_PRUNE:
            case TrinoSqlParser.KW_QUOTES:
            case TrinoSqlParser.KW_RANGE:
            case TrinoSqlParser.KW_READ:
            case TrinoSqlParser.KW_REFRESH:
            case TrinoSqlParser.KW_RENAME:
            case TrinoSqlParser.KW_REPEAT:
            case TrinoSqlParser.KW_REPEATABLE:
            case TrinoSqlParser.KW_REPLACE:
            case TrinoSqlParser.KW_RESET:
            case TrinoSqlParser.KW_RESPECT:
            case TrinoSqlParser.KW_RESTRICT:
            case TrinoSqlParser.KW_RETURN:
            case TrinoSqlParser.KW_RETURNING:
            case TrinoSqlParser.KW_RETURNS:
            case TrinoSqlParser.KW_REVOKE:
            case TrinoSqlParser.KW_ROLE:
            case TrinoSqlParser.KW_ROLES:
            case TrinoSqlParser.KW_ROLLBACK:
            case TrinoSqlParser.KW_ROW:
            case TrinoSqlParser.KW_ROWS:
            case TrinoSqlParser.KW_RUNNING:
            case TrinoSqlParser.KW_SCALAR:
            case TrinoSqlParser.KW_SCHEMA:
            case TrinoSqlParser.KW_SCHEMAS:
            case TrinoSqlParser.KW_SECOND:
            case TrinoSqlParser.KW_SECURITY:
            case TrinoSqlParser.KW_SEEK:
            case TrinoSqlParser.KW_SERIALIZABLE:
            case TrinoSqlParser.KW_SESSION:
            case TrinoSqlParser.KW_SET:
            case TrinoSqlParser.KW_SETS:
            case TrinoSqlParser.KW_SHOW:
            case TrinoSqlParser.KW_SOME:
            case TrinoSqlParser.KW_START:
            case TrinoSqlParser.KW_STATS:
            case TrinoSqlParser.KW_SUBSET:
            case TrinoSqlParser.KW_SUBSTRING:
            case TrinoSqlParser.KW_SYSTEM:
            case TrinoSqlParser.KW_TABLES:
            case TrinoSqlParser.KW_TABLESAMPLE:
            case TrinoSqlParser.KW_TEXT:
            case TrinoSqlParser.KW_TEXT_STRING:
            case TrinoSqlParser.KW_TIES:
            case TrinoSqlParser.KW_TIME:
            case TrinoSqlParser.KW_TIMESTAMP:
            case TrinoSqlParser.KW_TO:
            case TrinoSqlParser.KW_TRAILING:
            case TrinoSqlParser.KW_TRANSACTION:
            case TrinoSqlParser.KW_TRUNCATE:
            case TrinoSqlParser.KW_TRY_CAST:
            case TrinoSqlParser.KW_TYPE:
            case TrinoSqlParser.KW_UNBOUNDED:
            case TrinoSqlParser.KW_UNCOMMITTED:
            case TrinoSqlParser.KW_UNCONDITIONAL:
            case TrinoSqlParser.KW_UNIQUE:
            case TrinoSqlParser.KW_UNKNOWN:
            case TrinoSqlParser.KW_UNMATCHED:
            case TrinoSqlParser.KW_UNTIL:
            case TrinoSqlParser.KW_UPDATE:
            case TrinoSqlParser.KW_USE:
            case TrinoSqlParser.KW_USER:
            case TrinoSqlParser.KW_UTF16:
            case TrinoSqlParser.KW_UTF32:
            case TrinoSqlParser.KW_UTF8:
            case TrinoSqlParser.KW_VALIDATE:
            case TrinoSqlParser.KW_VALUE:
            case TrinoSqlParser.KW_VERBOSE:
            case TrinoSqlParser.KW_VERSION:
            case TrinoSqlParser.KW_VIEW:
            case TrinoSqlParser.KW_WHILE:
            case TrinoSqlParser.KW_WINDOW:
            case TrinoSqlParser.KW_WITHIN:
            case TrinoSqlParser.KW_WITHOUT:
            case TrinoSqlParser.KW_WORK:
            case TrinoSqlParser.KW_WRAPPER:
            case TrinoSqlParser.KW_WRITE:
            case TrinoSqlParser.KW_YEAR:
            case TrinoSqlParser.KW_ZONE:
            case TrinoSqlParser.IDENTIFIER:
            case TrinoSqlParser.DIGIT_IDENTIFIER:
            case TrinoSqlParser.QUOTED_IDENTIFIER:
            case TrinoSqlParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2072;
                this.jsonTablePathName();
                }
                break;
            case TrinoSqlParser.T__0:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2073;
                this.match(TrinoSqlParser.T__0);
                this.state = 2074;
                this.jsonTableSpecificPlan();
                this.state = 2075;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonTableDefaultPlan(): JsonTableDefaultPlanContext {
        let localContext = new JsonTableDefaultPlanContext(this.context, this.state);
        this.enterRule(localContext, 138, TrinoSqlParser.RULE_jsonTableDefaultPlan);
        let _la: number;
        try {
            this.state = 2089;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_INNER:
            case TrinoSqlParser.KW_OUTER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2079;
                _la = this.tokenStream.LA(1);
                if(!(_la === 125 || _la === 197)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2082;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 3) {
                    {
                    this.state = 2080;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 2081;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 54 || _la === 281)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case TrinoSqlParser.KW_CROSS:
            case TrinoSqlParser.KW_UNION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2084;
                _la = this.tokenStream.LA(1);
                if(!(_la === 54 || _la === 281)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2087;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 3) {
                    {
                    this.state = 2085;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 2086;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 125 || _la === 197)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFunctionCall(): TableFunctionCallContext {
        let localContext = new TableFunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 140, TrinoSqlParser.RULE_tableFunctionCall);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2091;
            this.functionName();
            this.state = 2092;
            this.match(TrinoSqlParser.T__0);
            this.state = 2101;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 256, this.context) ) {
            case 1:
                {
                this.state = 2093;
                this.tableFunctionArgument();
                this.state = 2098;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 2094;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 2095;
                    this.tableFunctionArgument();
                    }
                    }
                    this.state = 2100;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            this.state = 2112;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 52) {
                {
                this.state = 2103;
                this.match(TrinoSqlParser.KW_COPARTITION);
                this.state = 2104;
                this.coPartitionTables();
                this.state = 2109;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 2105;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 2106;
                    this.coPartitionTables();
                    }
                    }
                    this.state = 2111;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2114;
            this.match(TrinoSqlParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFunctionArgument(): TableFunctionArgumentContext {
        let localContext = new TableFunctionArgumentContext(this.context, this.state);
        this.enterRule(localContext, 142, TrinoSqlParser.RULE_tableFunctionArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2119;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 259, this.context) ) {
            case 1:
                {
                this.state = 2116;
                this.identifier();
                this.state = 2117;
                this.match(TrinoSqlParser.T__5);
                }
                break;
            }
            this.state = 2124;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 260, this.context) ) {
            case 1:
                {
                this.state = 2121;
                this.tableArgument();
                }
                break;
            case 2:
                {
                this.state = 2122;
                this.descriptorArgument();
                }
                break;
            case 3:
                {
                this.state = 2123;
                this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgument(): TableArgumentContext {
        let localContext = new TableArgumentContext(this.context, this.state);
        this.enterRule(localContext, 144, TrinoSqlParser.RULE_tableArgument);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2126;
            this.tableArgumentRelation();
            this.state = 2137;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 201) {
                {
                this.state = 2127;
                this.match(TrinoSqlParser.KW_PARTITION);
                this.state = 2128;
                this.match(TrinoSqlParser.KW_BY);
                this.state = 2135;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 262, this.context) ) {
                case 1:
                    {
                    this.state = 2129;
                    this.match(TrinoSqlParser.T__0);
                    this.state = 2131;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326658) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4011589611) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 3538382319) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 1541142911) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4253015917) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 3758094335) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4024434665) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4286569983) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4008705783) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1618962301) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 4093) !== 0)) {
                        {
                        this.state = 2130;
                        this.partitionBy();
                        }
                    }

                    this.state = 2133;
                    this.match(TrinoSqlParser.T__1);
                    }
                    break;
                case 2:
                    {
                    this.state = 2134;
                    this.expression();
                    }
                    break;
                }
                }
            }

            this.state = 2145;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_PRUNE:
                {
                this.state = 2139;
                this.match(TrinoSqlParser.KW_PRUNE);
                this.state = 2140;
                this.match(TrinoSqlParser.KW_WHEN);
                this.state = 2141;
                this.match(TrinoSqlParser.KW_EMPTY);
                }
                break;
            case TrinoSqlParser.KW_KEEP:
                {
                this.state = 2142;
                this.match(TrinoSqlParser.KW_KEEP);
                this.state = 2143;
                this.match(TrinoSqlParser.KW_WHEN);
                this.state = 2144;
                this.match(TrinoSqlParser.KW_EMPTY);
                }
                break;
            case TrinoSqlParser.T__1:
            case TrinoSqlParser.T__2:
            case TrinoSqlParser.KW_COPARTITION:
            case TrinoSqlParser.KW_ORDER:
                break;
            default:
                break;
            }
            this.state = 2163;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 195) {
                {
                this.state = 2147;
                this.match(TrinoSqlParser.KW_ORDER);
                this.state = 2148;
                this.match(TrinoSqlParser.KW_BY);
                this.state = 2161;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 266, this.context) ) {
                case 1:
                    {
                    this.state = 2149;
                    this.match(TrinoSqlParser.T__0);
                    this.state = 2150;
                    this.sortItem();
                    this.state = 2155;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 2151;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 2152;
                        this.sortItem();
                        }
                        }
                        this.state = 2157;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2158;
                    this.match(TrinoSqlParser.T__1);
                    }
                    break;
                case 2:
                    {
                    this.state = 2160;
                    this.sortItem();
                    }
                    break;
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgumentRelation(): TableArgumentRelationContext {
        let localContext = new TableArgumentRelationContext(this.context, this.state);
        this.enterRule(localContext, 146, TrinoSqlParser.RULE_tableArgumentRelation);
        let _la: number;
        try {
            this.state = 2191;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 274, this.context) ) {
            case 1:
                localContext = new TableArgumentTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2165;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 2166;
                this.match(TrinoSqlParser.T__0);
                this.state = 2167;
                this.tableRef();
                this.state = 2168;
                this.match(TrinoSqlParser.T__1);
                this.state = 2176;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 270, this.context) ) {
                case 1:
                    {
                    this.state = 2170;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 2169;
                        this.match(TrinoSqlParser.KW_AS);
                        }
                    }

                    this.state = 2172;
                    this.identifier();
                    this.state = 2174;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 1) {
                        {
                        this.state = 2173;
                        this.columnAliases();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new TableArgumentQueryContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2178;
                this.match(TrinoSqlParser.KW_TABLE);
                this.state = 2179;
                this.match(TrinoSqlParser.T__0);
                this.state = 2180;
                this.query();
                this.state = 2181;
                this.match(TrinoSqlParser.T__1);
                this.state = 2189;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 273, this.context) ) {
                case 1:
                    {
                    this.state = 2183;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 28) {
                        {
                        this.state = 2182;
                        this.match(TrinoSqlParser.KW_AS);
                        }
                    }

                    this.state = 2185;
                    this.identifier();
                    this.state = 2187;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 1) {
                        {
                        this.state = 2186;
                        this.columnAliases();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public descriptorArgument(): DescriptorArgumentContext {
        let localContext = new DescriptorArgumentContext(this.context, this.state);
        this.enterRule(localContext, 148, TrinoSqlParser.RULE_descriptorArgument);
        let _la: number;
        try {
            this.state = 2211;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_DESCRIPTOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2193;
                this.match(TrinoSqlParser.KW_DESCRIPTOR);
                this.state = 2194;
                this.match(TrinoSqlParser.T__0);
                this.state = 2195;
                this.descriptorField();
                this.state = 2200;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 2196;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 2197;
                    this.descriptorField();
                    }
                    }
                    this.state = 2202;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2203;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case TrinoSqlParser.KW_CAST:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2205;
                this.match(TrinoSqlParser.KW_CAST);
                this.state = 2206;
                this.match(TrinoSqlParser.T__0);
                this.state = 2207;
                this.match(TrinoSqlParser.KW_NULL);
                this.state = 2208;
                this.match(TrinoSqlParser.KW_AS);
                this.state = 2209;
                this.match(TrinoSqlParser.KW_DESCRIPTOR);
                this.state = 2210;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public descriptorField(): DescriptorFieldContext {
        let localContext = new DescriptorFieldContext(this.context, this.state);
        this.enterRule(localContext, 150, TrinoSqlParser.RULE_descriptorField);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2213;
            this.identifier();
            this.state = 2215;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4282055519) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 15) !== 0)) {
                {
                this.state = 2214;
                this.type_(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public coPartitionTables(): CoPartitionTablesContext {
        let localContext = new CoPartitionTablesContext(this.context, this.state);
        this.enterRule(localContext, 152, TrinoSqlParser.RULE_coPartitionTables);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2217;
            this.match(TrinoSqlParser.T__0);
            this.state = 2218;
            this.qualifiedName();
            this.state = 2219;
            this.match(TrinoSqlParser.T__2);
            this.state = 2220;
            this.qualifiedName();
            this.state = 2225;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 3) {
                {
                {
                this.state = 2221;
                this.match(TrinoSqlParser.T__2);
                this.state = 2222;
                this.qualifiedName();
                }
                }
                this.state = 2227;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2228;
            this.match(TrinoSqlParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 154, TrinoSqlParser.RULE_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2230;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public booleanExpression(): BooleanExpressionContext;
    public booleanExpression(_p: number): BooleanExpressionContext;
    public booleanExpression(_p?: number): BooleanExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BooleanExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 156;
        this.enterRecursionRule(localContext, 156, TrinoSqlParser.RULE_booleanExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2239;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.T__0:
            case TrinoSqlParser.KW_ABSENT:
            case TrinoSqlParser.KW_ADD:
            case TrinoSqlParser.KW_ADMIN:
            case TrinoSqlParser.KW_AFTER:
            case TrinoSqlParser.KW_ALL:
            case TrinoSqlParser.KW_ANALYZE:
            case TrinoSqlParser.KW_ANY:
            case TrinoSqlParser.KW_ARRAY:
            case TrinoSqlParser.KW_ASC:
            case TrinoSqlParser.KW_AT:
            case TrinoSqlParser.KW_AUTHORIZATION:
            case TrinoSqlParser.KW_BEGIN:
            case TrinoSqlParser.KW_BERNOULLI:
            case TrinoSqlParser.KW_BOTH:
            case TrinoSqlParser.KW_CALL:
            case TrinoSqlParser.KW_CALLED:
            case TrinoSqlParser.KW_CASCADE:
            case TrinoSqlParser.KW_CASE:
            case TrinoSqlParser.KW_CAST:
            case TrinoSqlParser.KW_CATALOG:
            case TrinoSqlParser.KW_CATALOGS:
            case TrinoSqlParser.KW_COLUMN:
            case TrinoSqlParser.KW_COLUMNS:
            case TrinoSqlParser.KW_COMMENT:
            case TrinoSqlParser.KW_COMMIT:
            case TrinoSqlParser.KW_COMMITTED:
            case TrinoSqlParser.KW_CONDITIONAL:
            case TrinoSqlParser.KW_COUNT:
            case TrinoSqlParser.KW_COPARTITION:
            case TrinoSqlParser.KW_CURRENT:
            case TrinoSqlParser.KW_CURRENT_CATALOG:
            case TrinoSqlParser.KW_CURRENT_DATE:
            case TrinoSqlParser.KW_CURRENT_PATH:
            case TrinoSqlParser.KW_CURRENT_SCHEMA:
            case TrinoSqlParser.KW_CURRENT_TIME:
            case TrinoSqlParser.KW_CURRENT_TIMESTAMP:
            case TrinoSqlParser.KW_CURRENT_USER:
            case TrinoSqlParser.KW_DATA:
            case TrinoSqlParser.KW_DATE:
            case TrinoSqlParser.KW_DAY:
            case TrinoSqlParser.KW_DECLARE:
            case TrinoSqlParser.KW_DEFAULT:
            case TrinoSqlParser.KW_DEFINE:
            case TrinoSqlParser.KW_DEFINER:
            case TrinoSqlParser.KW_DENY:
            case TrinoSqlParser.KW_DESC:
            case TrinoSqlParser.KW_DESCRIPTOR:
            case TrinoSqlParser.KW_DETERMINISTIC:
            case TrinoSqlParser.KW_DISTRIBUTED:
            case TrinoSqlParser.KW_DO:
            case TrinoSqlParser.KW_DOUBLE:
            case TrinoSqlParser.KW_EMPTY:
            case TrinoSqlParser.KW_ELSEIF:
            case TrinoSqlParser.KW_ENCODING:
            case TrinoSqlParser.KW_ERROR:
            case TrinoSqlParser.KW_EXCLUDING:
            case TrinoSqlParser.KW_EXISTS:
            case TrinoSqlParser.KW_EXPLAIN:
            case TrinoSqlParser.KW_EXTRACT:
            case TrinoSqlParser.KW_FALSE:
            case TrinoSqlParser.KW_FETCH:
            case TrinoSqlParser.KW_FILTER:
            case TrinoSqlParser.KW_FINAL:
            case TrinoSqlParser.KW_FIRST:
            case TrinoSqlParser.KW_FOLLOWING:
            case TrinoSqlParser.KW_FORMAT:
            case TrinoSqlParser.KW_FUNCTION:
            case TrinoSqlParser.KW_FUNCTIONS:
            case TrinoSqlParser.KW_GRACE:
            case TrinoSqlParser.KW_GRANT:
            case TrinoSqlParser.KW_GRANTED:
            case TrinoSqlParser.KW_GRANTS:
            case TrinoSqlParser.KW_GRAPHVIZ:
            case TrinoSqlParser.KW_GROUPING:
            case TrinoSqlParser.KW_GROUPS:
            case TrinoSqlParser.KW_HOUR:
            case TrinoSqlParser.KW_IF:
            case TrinoSqlParser.KW_IGNORE:
            case TrinoSqlParser.KW_IMMEDIATE:
            case TrinoSqlParser.KW_INCLUDING:
            case TrinoSqlParser.KW_INITIAL:
            case TrinoSqlParser.KW_INPUT:
            case TrinoSqlParser.KW_INTERVAL:
            case TrinoSqlParser.KW_INVOKER:
            case TrinoSqlParser.KW_IO:
            case TrinoSqlParser.KW_ISOLATION:
            case TrinoSqlParser.KW_ITERATE:
            case TrinoSqlParser.KW_JSON:
            case TrinoSqlParser.KW_JSON_ARRAY:
            case TrinoSqlParser.KW_JSON_EXISTS:
            case TrinoSqlParser.KW_JSON_OBJECT:
            case TrinoSqlParser.KW_JSON_QUERY:
            case TrinoSqlParser.KW_JSON_VALUE:
            case TrinoSqlParser.KW_KEEP:
            case TrinoSqlParser.KW_KEY:
            case TrinoSqlParser.KW_KEYS:
            case TrinoSqlParser.KW_LANGUAGE:
            case TrinoSqlParser.KW_LAST:
            case TrinoSqlParser.KW_LATERAL:
            case TrinoSqlParser.KW_LEADING:
            case TrinoSqlParser.KW_LEAVE:
            case TrinoSqlParser.KW_LEVEL:
            case TrinoSqlParser.KW_LIMIT:
            case TrinoSqlParser.KW_LISTAGG:
            case TrinoSqlParser.KW_LOCAL:
            case TrinoSqlParser.KW_LOCALTIME:
            case TrinoSqlParser.KW_LOCALTIMESTAMP:
            case TrinoSqlParser.KW_LOGICAL:
            case TrinoSqlParser.KW_LOOP:
            case TrinoSqlParser.KW_MAP:
            case TrinoSqlParser.KW_MATCH:
            case TrinoSqlParser.KW_MATCHED:
            case TrinoSqlParser.KW_MATCHES:
            case TrinoSqlParser.KW_MATCH_RECOGNIZE:
            case TrinoSqlParser.KW_MATERIALIZED:
            case TrinoSqlParser.KW_MEASURES:
            case TrinoSqlParser.KW_MERGE:
            case TrinoSqlParser.KW_MINUTE:
            case TrinoSqlParser.KW_MONTH:
            case TrinoSqlParser.KW_NESTED:
            case TrinoSqlParser.KW_NEXT:
            case TrinoSqlParser.KW_NFC:
            case TrinoSqlParser.KW_NFD:
            case TrinoSqlParser.KW_NFKC:
            case TrinoSqlParser.KW_NFKD:
            case TrinoSqlParser.KW_NO:
            case TrinoSqlParser.KW_NONE:
            case TrinoSqlParser.KW_NORMALIZE:
            case TrinoSqlParser.KW_NULL:
            case TrinoSqlParser.KW_NULLIF:
            case TrinoSqlParser.KW_NULLS:
            case TrinoSqlParser.KW_OBJECT:
            case TrinoSqlParser.KW_OF:
            case TrinoSqlParser.KW_OFFSET:
            case TrinoSqlParser.KW_OMIT:
            case TrinoSqlParser.KW_ONE:
            case TrinoSqlParser.KW_ONLY:
            case TrinoSqlParser.KW_OPTION:
            case TrinoSqlParser.KW_ORDINALITY:
            case TrinoSqlParser.KW_OUTPUT:
            case TrinoSqlParser.KW_OVER:
            case TrinoSqlParser.KW_OVERFLOW:
            case TrinoSqlParser.KW_PARTITION:
            case TrinoSqlParser.KW_PARTITIONS:
            case TrinoSqlParser.KW_PASSING:
            case TrinoSqlParser.KW_PAST:
            case TrinoSqlParser.KW_PATH:
            case TrinoSqlParser.KW_PATTERN:
            case TrinoSqlParser.KW_PER:
            case TrinoSqlParser.KW_PERIOD:
            case TrinoSqlParser.KW_PERMUTE:
            case TrinoSqlParser.KW_PLAN:
            case TrinoSqlParser.KW_POSITION:
            case TrinoSqlParser.KW_PRECEDING:
            case TrinoSqlParser.KW_PRECISION:
            case TrinoSqlParser.KW_PRIVILEGES:
            case TrinoSqlParser.KW_PROPERTIES:
            case TrinoSqlParser.KW_PRUNE:
            case TrinoSqlParser.KW_QUOTES:
            case TrinoSqlParser.KW_RANGE:
            case TrinoSqlParser.KW_READ:
            case TrinoSqlParser.KW_REFRESH:
            case TrinoSqlParser.KW_RENAME:
            case TrinoSqlParser.KW_REPEAT:
            case TrinoSqlParser.KW_REPEATABLE:
            case TrinoSqlParser.KW_REPLACE:
            case TrinoSqlParser.KW_RESET:
            case TrinoSqlParser.KW_RESPECT:
            case TrinoSqlParser.KW_RESTRICT:
            case TrinoSqlParser.KW_RETURN:
            case TrinoSqlParser.KW_RETURNING:
            case TrinoSqlParser.KW_RETURNS:
            case TrinoSqlParser.KW_REVOKE:
            case TrinoSqlParser.KW_ROLE:
            case TrinoSqlParser.KW_ROLES:
            case TrinoSqlParser.KW_ROLLBACK:
            case TrinoSqlParser.KW_ROW:
            case TrinoSqlParser.KW_ROWS:
            case TrinoSqlParser.KW_RUNNING:
            case TrinoSqlParser.KW_SCALAR:
            case TrinoSqlParser.KW_SCHEMA:
            case TrinoSqlParser.KW_SCHEMAS:
            case TrinoSqlParser.KW_SECOND:
            case TrinoSqlParser.KW_SECURITY:
            case TrinoSqlParser.KW_SEEK:
            case TrinoSqlParser.KW_SERIALIZABLE:
            case TrinoSqlParser.KW_SESSION:
            case TrinoSqlParser.KW_SET:
            case TrinoSqlParser.KW_SETS:
            case TrinoSqlParser.KW_SHOW:
            case TrinoSqlParser.KW_SOME:
            case TrinoSqlParser.KW_START:
            case TrinoSqlParser.KW_STATS:
            case TrinoSqlParser.KW_SUBSET:
            case TrinoSqlParser.KW_SUBSTRING:
            case TrinoSqlParser.KW_SYSTEM:
            case TrinoSqlParser.KW_TABLES:
            case TrinoSqlParser.KW_TABLESAMPLE:
            case TrinoSqlParser.KW_TEXT:
            case TrinoSqlParser.KW_TEXT_STRING:
            case TrinoSqlParser.KW_TIES:
            case TrinoSqlParser.KW_TIME:
            case TrinoSqlParser.KW_TIMESTAMP:
            case TrinoSqlParser.KW_TO:
            case TrinoSqlParser.KW_TRAILING:
            case TrinoSqlParser.KW_TRANSACTION:
            case TrinoSqlParser.KW_TRIM:
            case TrinoSqlParser.KW_TRUE:
            case TrinoSqlParser.KW_TRUNCATE:
            case TrinoSqlParser.KW_TRY_CAST:
            case TrinoSqlParser.KW_TYPE:
            case TrinoSqlParser.KW_UNBOUNDED:
            case TrinoSqlParser.KW_UNCOMMITTED:
            case TrinoSqlParser.KW_UNCONDITIONAL:
            case TrinoSqlParser.KW_UNIQUE:
            case TrinoSqlParser.KW_UNKNOWN:
            case TrinoSqlParser.KW_UNMATCHED:
            case TrinoSqlParser.KW_UNTIL:
            case TrinoSqlParser.KW_UPDATE:
            case TrinoSqlParser.KW_USE:
            case TrinoSqlParser.KW_USER:
            case TrinoSqlParser.KW_UTF16:
            case TrinoSqlParser.KW_UTF32:
            case TrinoSqlParser.KW_UTF8:
            case TrinoSqlParser.KW_VALIDATE:
            case TrinoSqlParser.KW_VALUE:
            case TrinoSqlParser.KW_VERBOSE:
            case TrinoSqlParser.KW_VERSION:
            case TrinoSqlParser.KW_VIEW:
            case TrinoSqlParser.KW_WHILE:
            case TrinoSqlParser.KW_WINDOW:
            case TrinoSqlParser.KW_WITHIN:
            case TrinoSqlParser.KW_WITHOUT:
            case TrinoSqlParser.KW_WORK:
            case TrinoSqlParser.KW_WRAPPER:
            case TrinoSqlParser.KW_WRITE:
            case TrinoSqlParser.KW_YEAR:
            case TrinoSqlParser.KW_ZONE:
            case TrinoSqlParser.PLUS:
            case TrinoSqlParser.MINUS:
            case TrinoSqlParser.QUESTION_MARK:
            case TrinoSqlParser.STRING:
            case TrinoSqlParser.UNICODE_STRING:
            case TrinoSqlParser.BINARY_LITERAL:
            case TrinoSqlParser.INTEGER_VALUE:
            case TrinoSqlParser.DECIMAL_VALUE:
            case TrinoSqlParser.DOUBLE_VALUE:
            case TrinoSqlParser.IDENTIFIER:
            case TrinoSqlParser.DIGIT_IDENTIFIER:
            case TrinoSqlParser.QUOTED_IDENTIFIER:
            case TrinoSqlParser.BACKQUOTED_IDENTIFIER:
                {
                localContext = new PredicatedContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2233;
                (localContext as PredicatedContext)._valueExpression = this.valueExpression(0);
                this.state = 2235;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 279, this.context) ) {
                case 1:
                    {
                    this.state = 2234;
                    this.predicate((localContext as PredicatedContext)._valueExpression);
                    }
                    break;
                }
                }
                break;
            case TrinoSqlParser.KW_NOT:
                {
                localContext = new LogicalNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2237;
                this.match(TrinoSqlParser.KW_NOT);
                this.state = 2238;
                this.booleanExpression(3);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2249;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 282, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2247;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 281, this.context) ) {
                    case 1:
                        {
                        localContext = new AndContext(new BooleanExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoSqlParser.RULE_booleanExpression);
                        this.state = 2241;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2242;
                        this.match(TrinoSqlParser.KW_AND);
                        this.state = 2243;
                        this.booleanExpression(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new OrContext(new BooleanExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoSqlParser.RULE_booleanExpression);
                        this.state = 2244;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2245;
                        this.match(TrinoSqlParser.KW_OR);
                        this.state = 2246;
                        this.booleanExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 2251;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 282, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public predicate(value: antlr.ParserRuleContext): PredicateContext {
        let localContext = new PredicateContext(this.context, this.state, value);
        this.enterRule(localContext, 158, TrinoSqlParser.RULE_predicate);
        let _la: number;
        try {
            this.state = 2313;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 291, this.context) ) {
            case 1:
                localContext = new ComparisonContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2252;
                this.comparisonOperator();
                this.state = 2253;
                (localContext as ComparisonContext)._right = this.valueExpression(0);
                }
                break;
            case 2:
                localContext = new QuantifiedComparisonContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2255;
                this.comparisonOperator();
                this.state = 2256;
                this.comparisonQuantifier();
                this.state = 2257;
                this.match(TrinoSqlParser.T__0);
                this.state = 2258;
                this.query();
                this.state = 2259;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 3:
                localContext = new BetweenContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2262;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 182) {
                    {
                    this.state = 2261;
                    this.match(TrinoSqlParser.KW_NOT);
                    }
                }

                this.state = 2264;
                this.match(TrinoSqlParser.KW_BETWEEN);
                this.state = 2265;
                (localContext as BetweenContext)._lower = this.valueExpression(0);
                this.state = 2266;
                this.match(TrinoSqlParser.KW_AND);
                this.state = 2267;
                (localContext as BetweenContext)._upper = this.valueExpression(0);
                }
                break;
            case 4:
                localContext = new InListContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2270;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 182) {
                    {
                    this.state = 2269;
                    this.match(TrinoSqlParser.KW_NOT);
                    }
                }

                this.state = 2272;
                this.match(TrinoSqlParser.KW_IN);
                this.state = 2273;
                this.match(TrinoSqlParser.T__0);
                this.state = 2274;
                this.expression();
                this.state = 2279;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 2275;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 2276;
                    this.expression();
                    }
                    }
                    this.state = 2281;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2282;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 5:
                localContext = new InSubqueryContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2285;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 182) {
                    {
                    this.state = 2284;
                    this.match(TrinoSqlParser.KW_NOT);
                    }
                }

                this.state = 2287;
                this.match(TrinoSqlParser.KW_IN);
                this.state = 2288;
                this.match(TrinoSqlParser.T__0);
                this.state = 2289;
                this.query();
                this.state = 2290;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 6:
                localContext = new LikeContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2293;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 182) {
                    {
                    this.state = 2292;
                    this.match(TrinoSqlParser.KW_NOT);
                    }
                }

                this.state = 2295;
                this.match(TrinoSqlParser.KW_LIKE);
                this.state = 2296;
                (localContext as LikeContext)._pattern = this.valueExpression(0);
                this.state = 2299;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 288, this.context) ) {
                case 1:
                    {
                    this.state = 2297;
                    this.match(TrinoSqlParser.KW_ESCAPE);
                    this.state = 2298;
                    (localContext as LikeContext)._escape = this.valueExpression(0);
                    }
                    break;
                }
                }
                break;
            case 7:
                localContext = new NullPredicateContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2301;
                this.match(TrinoSqlParser.KW_IS);
                this.state = 2303;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 182) {
                    {
                    this.state = 2302;
                    this.match(TrinoSqlParser.KW_NOT);
                    }
                }

                this.state = 2305;
                this.match(TrinoSqlParser.KW_NULL);
                }
                break;
            case 8:
                localContext = new DistinctFromContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2306;
                this.match(TrinoSqlParser.KW_IS);
                this.state = 2308;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 182) {
                    {
                    this.state = 2307;
                    this.match(TrinoSqlParser.KW_NOT);
                    }
                }

                this.state = 2310;
                this.match(TrinoSqlParser.KW_DISTINCT);
                this.state = 2311;
                this.match(TrinoSqlParser.KW_FROM);
                this.state = 2312;
                (localContext as DistinctFromContext)._right = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 160;
        this.enterRecursionRule(localContext, 160, TrinoSqlParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2319;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 292, this.context) ) {
            case 1:
                {
                localContext = new ValueExpressionDefaultContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2316;
                this.primaryExpression(0);
                }
                break;
            case 2:
                {
                localContext = new ArithmeticUnaryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2317;
                (localContext as ArithmeticUnaryContext)._operator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 318 || _la === 319)) {
                    (localContext as ArithmeticUnaryContext)._operator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2318;
                this.valueExpression(4);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2335;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 294, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2333;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 293, this.context) ) {
                    case 1:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoSqlParser.RULE_valueExpression);
                        this.state = 2321;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 2322;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 7) !== 0))) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2323;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoSqlParser.RULE_valueExpression);
                        this.state = 2324;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 2325;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 318 || _la === 319)) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2326;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(3);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ConcatenationContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ConcatenationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoSqlParser.RULE_valueExpression);
                        this.state = 2327;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 2328;
                        this.match(TrinoSqlParser.CONCAT);
                        this.state = 2329;
                        (localContext as ConcatenationContext)._right = this.valueExpression(2);
                        }
                        break;
                    case 4:
                        {
                        localContext = new AtTimeZoneContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoSqlParser.RULE_valueExpression);
                        this.state = 2330;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 2331;
                        this.match(TrinoSqlParser.KW_AT);
                        this.state = 2332;
                        this.timeZoneSpecifier();
                        }
                        break;
                    }
                    }
                }
                this.state = 2337;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 294, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public primaryExpression(): PrimaryExpressionContext;
    public primaryExpression(_p: number): PrimaryExpressionContext;
    public primaryExpression(_p?: number): PrimaryExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new PrimaryExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 162;
        this.enterRecursionRule(localContext, 162, TrinoSqlParser.RULE_primaryExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2791;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 358, this.context) ) {
            case 1:
                {
                localContext = new NullLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2339;
                this.match(TrinoSqlParser.KW_NULL);
                }
                break;
            case 2:
                {
                localContext = new IntervalLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2340;
                this.interval();
                }
                break;
            case 3:
                {
                localContext = new TypeConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2341;
                this.identifier();
                this.state = 2342;
                this.string_();
                }
                break;
            case 4:
                {
                localContext = new TypeConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2344;
                this.match(TrinoSqlParser.KW_DOUBLE);
                this.state = 2345;
                this.match(TrinoSqlParser.KW_PRECISION);
                this.state = 2346;
                this.string_();
                }
                break;
            case 5:
                {
                localContext = new NumericLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2347;
                this.number_();
                }
                break;
            case 6:
                {
                localContext = new BooleanLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2348;
                this.booleanValue();
                }
                break;
            case 7:
                {
                localContext = new StringLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2349;
                this.string_();
                }
                break;
            case 8:
                {
                localContext = new BinaryLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2350;
                this.match(TrinoSqlParser.BINARY_LITERAL);
                }
                break;
            case 9:
                {
                localContext = new ParameterContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2351;
                this.match(TrinoSqlParser.QUESTION_MARK);
                }
                break;
            case 10:
                {
                localContext = new PositionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2352;
                this.match(TrinoSqlParser.KW_POSITION);
                this.state = 2353;
                this.match(TrinoSqlParser.T__0);
                this.state = 2354;
                this.valueExpression(0);
                this.state = 2355;
                this.match(TrinoSqlParser.KW_IN);
                this.state = 2356;
                this.valueExpression(0);
                this.state = 2357;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 11:
                {
                localContext = new RowConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2359;
                this.match(TrinoSqlParser.T__0);
                this.state = 2360;
                this.expression();
                this.state = 2363;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2361;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 2362;
                    this.expression();
                    }
                    }
                    this.state = 2365;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 3);
                this.state = 2367;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 12:
                {
                localContext = new RowConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2369;
                this.match(TrinoSqlParser.KW_ROW);
                this.state = 2370;
                this.match(TrinoSqlParser.T__0);
                this.state = 2371;
                this.expression();
                this.state = 2376;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 2372;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 2373;
                    this.expression();
                    }
                    }
                    this.state = 2378;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2379;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 13:
                {
                localContext = new ListAggContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2381;
                (localContext as ListAggContext)._name = this.match(TrinoSqlParser.KW_LISTAGG);
                this.state = 2382;
                this.match(TrinoSqlParser.T__0);
                this.state = 2384;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 297, this.context) ) {
                case 1:
                    {
                    this.state = 2383;
                    this.setQuantifier();
                    }
                    break;
                }
                this.state = 2386;
                this.expression();
                this.state = 2389;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 3) {
                    {
                    this.state = 2387;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 2388;
                    this.string_();
                    }
                }

                this.state = 2394;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 190) {
                    {
                    this.state = 2391;
                    this.match(TrinoSqlParser.KW_ON);
                    this.state = 2392;
                    this.match(TrinoSqlParser.KW_OVERFLOW);
                    this.state = 2393;
                    this.listAggOverflowBehavior();
                    }
                }

                this.state = 2396;
                this.match(TrinoSqlParser.T__1);
                {
                this.state = 2397;
                this.match(TrinoSqlParser.KW_WITHIN);
                this.state = 2398;
                this.match(TrinoSqlParser.KW_GROUP);
                this.state = 2399;
                this.match(TrinoSqlParser.T__0);
                this.state = 2400;
                this.match(TrinoSqlParser.KW_ORDER);
                this.state = 2401;
                this.match(TrinoSqlParser.KW_BY);
                this.state = 2402;
                this.sortItem();
                this.state = 2407;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 2403;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 2404;
                    this.sortItem();
                    }
                    }
                    this.state = 2409;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2410;
                this.match(TrinoSqlParser.T__1);
                }
                this.state = 2413;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 301, this.context) ) {
                case 1:
                    {
                    this.state = 2412;
                    this.filter();
                    }
                    break;
                }
                }
                break;
            case 14:
                {
                localContext = new FunctionCallContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2416;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 302, this.context) ) {
                case 1:
                    {
                    this.state = 2415;
                    this.processingMode();
                    }
                    break;
                }
                this.state = 2418;
                this.functionName();
                this.state = 2419;
                this.match(TrinoSqlParser.T__0);
                this.state = 2423;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4282055519) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 15) !== 0)) {
                    {
                    this.state = 2420;
                    (localContext as FunctionCallContext)._label = this.identifier();
                    this.state = 2421;
                    this.match(TrinoSqlParser.T__3);
                    }
                }

                this.state = 2425;
                this.match(TrinoSqlParser.ASTERISK);
                this.state = 2426;
                this.match(TrinoSqlParser.T__1);
                this.state = 2428;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 304, this.context) ) {
                case 1:
                    {
                    this.state = 2427;
                    this.filter();
                    }
                    break;
                }
                this.state = 2431;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 305, this.context) ) {
                case 1:
                    {
                    this.state = 2430;
                    this.over();
                    }
                    break;
                }
                }
                break;
            case 15:
                {
                localContext = new FunctionCallContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2434;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 306, this.context) ) {
                case 1:
                    {
                    this.state = 2433;
                    this.processingMode();
                    }
                    break;
                }
                this.state = 2436;
                this.functionName();
                this.state = 2437;
                this.match(TrinoSqlParser.T__0);
                this.state = 2449;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326658) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4011589611) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 3538415087) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 1541142911) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4253015917) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 3758094335) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4024434665) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4286569983) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4008705783) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1618962301) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 4093) !== 0)) {
                    {
                    this.state = 2439;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 307, this.context) ) {
                    case 1:
                        {
                        this.state = 2438;
                        this.setQuantifier();
                        }
                        break;
                    }
                    this.state = 2441;
                    this.expression();
                    this.state = 2446;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 2442;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 2443;
                        this.expression();
                        }
                        }
                        this.state = 2448;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2461;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 2451;
                    this.match(TrinoSqlParser.KW_ORDER);
                    this.state = 2452;
                    this.match(TrinoSqlParser.KW_BY);
                    this.state = 2453;
                    this.sortItem();
                    this.state = 2458;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 2454;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 2455;
                        this.sortItem();
                        }
                        }
                        this.state = 2460;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2463;
                this.match(TrinoSqlParser.T__1);
                this.state = 2465;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 312, this.context) ) {
                case 1:
                    {
                    this.state = 2464;
                    this.filter();
                    }
                    break;
                }
                this.state = 2471;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 314, this.context) ) {
                case 1:
                    {
                    this.state = 2468;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 120 || _la === 228) {
                        {
                        this.state = 2467;
                        this.nullTreatment();
                        }
                    }

                    this.state = 2470;
                    this.over();
                    }
                    break;
                }
                }
                break;
            case 16:
                {
                localContext = new MeasureContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2473;
                this.identifier();
                this.state = 2474;
                this.over();
                }
                break;
            case 17:
                {
                localContext = new LambdaContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2476;
                this.identifier();
                this.state = 2477;
                this.match(TrinoSqlParser.T__6);
                this.state = 2478;
                this.expression();
                }
                break;
            case 18:
                {
                localContext = new LambdaContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2480;
                this.match(TrinoSqlParser.T__0);
                this.state = 2489;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4282055519) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 15) !== 0)) {
                    {
                    this.state = 2481;
                    this.identifier();
                    this.state = 2486;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 2482;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 2483;
                        this.identifier();
                        }
                        }
                        this.state = 2488;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2491;
                this.match(TrinoSqlParser.T__1);
                this.state = 2492;
                this.match(TrinoSqlParser.T__6);
                this.state = 2493;
                this.expression();
                }
                break;
            case 19:
                {
                localContext = new SubqueryExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2494;
                this.match(TrinoSqlParser.T__0);
                this.state = 2495;
                this.query();
                this.state = 2496;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 20:
                {
                localContext = new ExistsContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2498;
                this.match(TrinoSqlParser.KW_EXISTS);
                this.state = 2499;
                this.match(TrinoSqlParser.T__0);
                this.state = 2500;
                this.query();
                this.state = 2501;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 21:
                {
                localContext = new SimpleCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2503;
                this.match(TrinoSqlParser.KW_CASE);
                this.state = 2504;
                (localContext as SimpleCaseContext)._operand = this.expression();
                this.state = 2506;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2505;
                    this.whenClause();
                    }
                    }
                    this.state = 2508;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 300);
                this.state = 2512;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 84) {
                    {
                    this.state = 2510;
                    this.match(TrinoSqlParser.KW_ELSE);
                    this.state = 2511;
                    (localContext as SimpleCaseContext)._elseExpression = this.expression();
                    }
                }

                this.state = 2514;
                this.match(TrinoSqlParser.KW_END);
                }
                break;
            case 22:
                {
                localContext = new SearchedCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2516;
                this.match(TrinoSqlParser.KW_CASE);
                this.state = 2518;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2517;
                    this.whenClause();
                    }
                    }
                    this.state = 2520;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 300);
                this.state = 2524;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 84) {
                    {
                    this.state = 2522;
                    this.match(TrinoSqlParser.KW_ELSE);
                    this.state = 2523;
                    (localContext as SearchedCaseContext)._elseExpression = this.expression();
                    }
                }

                this.state = 2526;
                this.match(TrinoSqlParser.KW_END);
                }
                break;
            case 23:
                {
                localContext = new CastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2528;
                this.match(TrinoSqlParser.KW_CAST);
                this.state = 2529;
                this.match(TrinoSqlParser.T__0);
                this.state = 2530;
                this.expression();
                this.state = 2531;
                this.match(TrinoSqlParser.KW_AS);
                this.state = 2532;
                this.type_(0);
                this.state = 2533;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 24:
                {
                localContext = new CastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2535;
                this.match(TrinoSqlParser.KW_TRY_CAST);
                this.state = 2536;
                this.match(TrinoSqlParser.T__0);
                this.state = 2537;
                this.expression();
                this.state = 2538;
                this.match(TrinoSqlParser.KW_AS);
                this.state = 2539;
                this.type_(0);
                this.state = 2540;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 25:
                {
                localContext = new ArrayConstructorContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2542;
                this.match(TrinoSqlParser.KW_ARRAY);
                this.state = 2543;
                this.match(TrinoSqlParser.T__7);
                this.state = 2552;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326658) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4011589611) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 3538382319) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 1541142911) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4253015917) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 3758094335) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4024434665) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4286569983) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4008705783) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1618962301) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 4093) !== 0)) {
                    {
                    this.state = 2544;
                    this.expression();
                    this.state = 2549;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 2545;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 2546;
                        this.expression();
                        }
                        }
                        this.state = 2551;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2554;
                this.match(TrinoSqlParser.T__8);
                }
                break;
            case 26:
                {
                localContext = new ColumnReferenceContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2555;
                this.columnName();
                }
                break;
            case 27:
                {
                localContext = new CurrentDateContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2556;
                (localContext as CurrentDateContext)._name = this.match(TrinoSqlParser.KW_CURRENT_DATE);
                }
                break;
            case 28:
                {
                localContext = new CurrentTimeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2557;
                (localContext as CurrentTimeContext)._name = this.match(TrinoSqlParser.KW_CURRENT_TIME);
                this.state = 2561;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 323, this.context) ) {
                case 1:
                    {
                    this.state = 2558;
                    this.match(TrinoSqlParser.T__0);
                    this.state = 2559;
                    (localContext as CurrentTimeContext)._precision = this.match(TrinoSqlParser.INTEGER_VALUE);
                    this.state = 2560;
                    this.match(TrinoSqlParser.T__1);
                    }
                    break;
                }
                }
                break;
            case 29:
                {
                localContext = new CurrentTimestampContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2563;
                (localContext as CurrentTimestampContext)._name = this.match(TrinoSqlParser.KW_CURRENT_TIMESTAMP);
                this.state = 2567;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 324, this.context) ) {
                case 1:
                    {
                    this.state = 2564;
                    this.match(TrinoSqlParser.T__0);
                    this.state = 2565;
                    (localContext as CurrentTimestampContext)._precision = this.match(TrinoSqlParser.INTEGER_VALUE);
                    this.state = 2566;
                    this.match(TrinoSqlParser.T__1);
                    }
                    break;
                }
                }
                break;
            case 30:
                {
                localContext = new LocalTimeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2569;
                (localContext as LocalTimeContext)._name = this.match(TrinoSqlParser.KW_LOCALTIME);
                this.state = 2573;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 325, this.context) ) {
                case 1:
                    {
                    this.state = 2570;
                    this.match(TrinoSqlParser.T__0);
                    this.state = 2571;
                    (localContext as LocalTimeContext)._precision = this.match(TrinoSqlParser.INTEGER_VALUE);
                    this.state = 2572;
                    this.match(TrinoSqlParser.T__1);
                    }
                    break;
                }
                }
                break;
            case 31:
                {
                localContext = new LocalTimestampContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2575;
                (localContext as LocalTimestampContext)._name = this.match(TrinoSqlParser.KW_LOCALTIMESTAMP);
                this.state = 2579;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 326, this.context) ) {
                case 1:
                    {
                    this.state = 2576;
                    this.match(TrinoSqlParser.T__0);
                    this.state = 2577;
                    (localContext as LocalTimestampContext)._precision = this.match(TrinoSqlParser.INTEGER_VALUE);
                    this.state = 2578;
                    this.match(TrinoSqlParser.T__1);
                    }
                    break;
                }
                }
                break;
            case 32:
                {
                localContext = new CurrentUserContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2581;
                (localContext as CurrentUserContext)._name = this.match(TrinoSqlParser.KW_CURRENT_USER);
                }
                break;
            case 33:
                {
                localContext = new CurrentCatalogContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2582;
                (localContext as CurrentCatalogContext)._name = this.match(TrinoSqlParser.KW_CURRENT_CATALOG);
                }
                break;
            case 34:
                {
                localContext = new CurrentSchemaContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2583;
                (localContext as CurrentSchemaContext)._name = this.match(TrinoSqlParser.KW_CURRENT_SCHEMA);
                }
                break;
            case 35:
                {
                localContext = new CurrentPathContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2584;
                (localContext as CurrentPathContext)._name = this.match(TrinoSqlParser.KW_CURRENT_PATH);
                }
                break;
            case 36:
                {
                localContext = new TrimContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2585;
                this.match(TrinoSqlParser.KW_TRIM);
                this.state = 2586;
                this.match(TrinoSqlParser.T__0);
                this.state = 2594;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 329, this.context) ) {
                case 1:
                    {
                    this.state = 2588;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 327, this.context) ) {
                    case 1:
                        {
                        this.state = 2587;
                        this.trimsSpecification();
                        }
                        break;
                    }
                    this.state = 2591;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3984326658) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4011589611) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 3538382319) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 1541142911) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4253015917) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 3755997183) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4024434665) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4286569983) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4008705783) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 1618962301) !== 0) || ((((_la - 324)) & ~0x1F) === 0 && ((1 << (_la - 324)) & 4093) !== 0)) {
                        {
                        this.state = 2590;
                        (localContext as TrimContext)._trimChar = this.valueExpression(0);
                        }
                    }

                    this.state = 2593;
                    this.match(TrinoSqlParser.KW_FROM);
                    }
                    break;
                }
                this.state = 2596;
                (localContext as TrimContext)._trimSource = this.valueExpression(0);
                this.state = 2597;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 37:
                {
                localContext = new TrimContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2599;
                this.match(TrinoSqlParser.KW_TRIM);
                this.state = 2600;
                this.match(TrinoSqlParser.T__0);
                this.state = 2601;
                (localContext as TrimContext)._trimSource = this.valueExpression(0);
                this.state = 2602;
                this.match(TrinoSqlParser.T__2);
                this.state = 2603;
                (localContext as TrimContext)._trimChar = this.valueExpression(0);
                this.state = 2604;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 38:
                {
                localContext = new SubstringContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2606;
                this.match(TrinoSqlParser.KW_SUBSTRING);
                this.state = 2607;
                this.match(TrinoSqlParser.T__0);
                this.state = 2608;
                this.valueExpression(0);
                this.state = 2609;
                this.match(TrinoSqlParser.KW_FROM);
                this.state = 2610;
                this.valueExpression(0);
                this.state = 2613;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103) {
                    {
                    this.state = 2611;
                    this.match(TrinoSqlParser.KW_FOR);
                    this.state = 2612;
                    this.valueExpression(0);
                    }
                }

                this.state = 2615;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 39:
                {
                localContext = new NormalizeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2617;
                this.match(TrinoSqlParser.KW_NORMALIZE);
                this.state = 2618;
                this.match(TrinoSqlParser.T__0);
                this.state = 2619;
                this.valueExpression(0);
                this.state = 2622;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 3) {
                    {
                    this.state = 2620;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 2621;
                    this.normalForm();
                    }
                }

                this.state = 2624;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 40:
                {
                localContext = new ExtractContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2626;
                this.match(TrinoSqlParser.KW_EXTRACT);
                this.state = 2627;
                this.match(TrinoSqlParser.T__0);
                this.state = 2628;
                this.identifier();
                this.state = 2629;
                this.match(TrinoSqlParser.KW_FROM);
                this.state = 2630;
                this.valueExpression(0);
                this.state = 2631;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 41:
                {
                localContext = new ParenthesizedExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2633;
                this.match(TrinoSqlParser.T__0);
                this.state = 2634;
                this.expression();
                this.state = 2635;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 42:
                {
                localContext = new GroupingOperationContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2637;
                this.match(TrinoSqlParser.KW_GROUPING);
                this.state = 2638;
                this.match(TrinoSqlParser.T__0);
                this.state = 2647;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4282055519) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 15) !== 0)) {
                    {
                    this.state = 2639;
                    this.qualifiedName();
                    this.state = 2644;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 2640;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 2641;
                        this.qualifiedName();
                        }
                        }
                        this.state = 2646;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                }

                this.state = 2649;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 43:
                {
                localContext = new JsonExistsContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2650;
                this.match(TrinoSqlParser.KW_JSON_EXISTS);
                this.state = 2651;
                this.match(TrinoSqlParser.T__0);
                this.state = 2652;
                this.jsonPathInvocation();
                this.state = 2657;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 89 || _la === 97 || _la === 273 || _la === 283) {
                    {
                    this.state = 2653;
                    this.jsonExistsErrorBehavior();
                    this.state = 2654;
                    this.match(TrinoSqlParser.KW_ON);
                    this.state = 2655;
                    this.match(TrinoSqlParser.KW_ERROR);
                    }
                }

                this.state = 2659;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 44:
                {
                localContext = new JsonValueContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2661;
                this.match(TrinoSqlParser.KW_JSON_VALUE);
                this.state = 2662;
                this.match(TrinoSqlParser.T__0);
                this.state = 2663;
                this.jsonPathInvocation();
                this.state = 2666;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 231) {
                    {
                    this.state = 2664;
                    this.match(TrinoSqlParser.KW_RETURNING);
                    this.state = 2665;
                    this.type_(0);
                    }
                }

                this.state = 2672;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 336, this.context) ) {
                case 1:
                    {
                    this.state = 2668;
                    (localContext as JsonValueContext)._emptyBehavior = this.jsonValueBehavior();
                    this.state = 2669;
                    this.match(TrinoSqlParser.KW_ON);
                    this.state = 2670;
                    this.match(TrinoSqlParser.KW_EMPTY);
                    }
                    break;
                }
                this.state = 2678;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 70 || _la === 89 || _la === 183) {
                    {
                    this.state = 2674;
                    (localContext as JsonValueContext)._errorBehavior = this.jsonValueBehavior();
                    this.state = 2675;
                    this.match(TrinoSqlParser.KW_ON);
                    this.state = 2676;
                    this.match(TrinoSqlParser.KW_ERROR);
                    }
                }

                this.state = 2680;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 45:
                {
                localContext = new JsonQueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2682;
                this.match(TrinoSqlParser.KW_JSON_QUERY);
                this.state = 2683;
                this.match(TrinoSqlParser.T__0);
                this.state = 2684;
                this.jsonPathInvocation();
                this.state = 2691;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 231) {
                    {
                    this.state = 2685;
                    this.match(TrinoSqlParser.KW_RETURNING);
                    this.state = 2686;
                    this.type_(0);
                    this.state = 2689;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 104) {
                        {
                        this.state = 2687;
                        this.match(TrinoSqlParser.KW_FORMAT);
                        this.state = 2688;
                        this.jsonRepresentation();
                        }
                    }

                    }
                }

                this.state = 2696;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304 || _la === 306) {
                    {
                    this.state = 2693;
                    this.jsonQueryWrapperBehavior();
                    this.state = 2694;
                    this.match(TrinoSqlParser.KW_WRAPPER);
                    }
                }

                this.state = 2705;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 144 || _la === 189) {
                    {
                    this.state = 2698;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 144 || _la === 189)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2699;
                    this.match(TrinoSqlParser.KW_QUOTES);
                    this.state = 2703;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 190) {
                        {
                        this.state = 2700;
                        this.match(TrinoSqlParser.KW_ON);
                        this.state = 2701;
                        this.match(TrinoSqlParser.KW_SCALAR);
                        this.state = 2702;
                        this.match(TrinoSqlParser.KW_TEXT_STRING);
                        }
                    }

                    }
                }

                this.state = 2711;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 343, this.context) ) {
                case 1:
                    {
                    this.state = 2707;
                    (localContext as JsonQueryContext)._emptyBehavior = this.jsonQueryBehavior();
                    this.state = 2708;
                    this.match(TrinoSqlParser.KW_ON);
                    this.state = 2709;
                    this.match(TrinoSqlParser.KW_EMPTY);
                    }
                    break;
                }
                this.state = 2717;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 85 || _la === 89 || _la === 183) {
                    {
                    this.state = 2713;
                    (localContext as JsonQueryContext)._errorBehavior = this.jsonQueryBehavior();
                    this.state = 2714;
                    this.match(TrinoSqlParser.KW_ON);
                    this.state = 2715;
                    this.match(TrinoSqlParser.KW_ERROR);
                    }
                }

                this.state = 2719;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 46:
                {
                localContext = new JsonObjectContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2721;
                this.match(TrinoSqlParser.KW_JSON_OBJECT);
                this.state = 2722;
                this.match(TrinoSqlParser.T__0);
                this.state = 2751;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 350, this.context) ) {
                case 1:
                    {
                    this.state = 2723;
                    this.jsonObjectMember();
                    this.state = 2728;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 2724;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 2725;
                        this.jsonObjectMember();
                        }
                        }
                        this.state = 2730;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2737;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoSqlParser.KW_NULL:
                        {
                        this.state = 2731;
                        this.match(TrinoSqlParser.KW_NULL);
                        this.state = 2732;
                        this.match(TrinoSqlParser.KW_ON);
                        this.state = 2733;
                        this.match(TrinoSqlParser.KW_NULL);
                        }
                        break;
                    case TrinoSqlParser.KW_ABSENT:
                        {
                        this.state = 2734;
                        this.match(TrinoSqlParser.KW_ABSENT);
                        this.state = 2735;
                        this.match(TrinoSqlParser.KW_ON);
                        this.state = 2736;
                        this.match(TrinoSqlParser.KW_NULL);
                        }
                        break;
                    case TrinoSqlParser.T__1:
                    case TrinoSqlParser.KW_RETURNING:
                    case TrinoSqlParser.KW_WITH:
                    case TrinoSqlParser.KW_WITHOUT:
                        break;
                    default:
                        break;
                    }
                    this.state = 2749;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoSqlParser.KW_WITH:
                        {
                        this.state = 2739;
                        this.match(TrinoSqlParser.KW_WITH);
                        this.state = 2740;
                        this.match(TrinoSqlParser.KW_UNIQUE);
                        this.state = 2742;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 146) {
                            {
                            this.state = 2741;
                            this.match(TrinoSqlParser.KW_KEYS);
                            }
                        }

                        }
                        break;
                    case TrinoSqlParser.KW_WITHOUT:
                        {
                        this.state = 2744;
                        this.match(TrinoSqlParser.KW_WITHOUT);
                        this.state = 2745;
                        this.match(TrinoSqlParser.KW_UNIQUE);
                        this.state = 2747;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 146) {
                            {
                            this.state = 2746;
                            this.match(TrinoSqlParser.KW_KEYS);
                            }
                        }

                        }
                        break;
                    case TrinoSqlParser.T__1:
                    case TrinoSqlParser.KW_RETURNING:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                }
                this.state = 2759;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 231) {
                    {
                    this.state = 2753;
                    this.match(TrinoSqlParser.KW_RETURNING);
                    this.state = 2754;
                    this.type_(0);
                    this.state = 2757;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 104) {
                        {
                        this.state = 2755;
                        this.match(TrinoSqlParser.KW_FORMAT);
                        this.state = 2756;
                        this.jsonRepresentation();
                        }
                    }

                    }
                }

                this.state = 2761;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 47:
                {
                localContext = new JsonArrayContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2762;
                this.match(TrinoSqlParser.KW_JSON_ARRAY);
                this.state = 2763;
                this.match(TrinoSqlParser.T__0);
                this.state = 2780;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 355, this.context) ) {
                case 1:
                    {
                    this.state = 2764;
                    this.jsonValueExpression();
                    this.state = 2769;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 2765;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 2766;
                        this.jsonValueExpression();
                        }
                        }
                        this.state = 2771;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2778;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case TrinoSqlParser.KW_NULL:
                        {
                        this.state = 2772;
                        this.match(TrinoSqlParser.KW_NULL);
                        this.state = 2773;
                        this.match(TrinoSqlParser.KW_ON);
                        this.state = 2774;
                        this.match(TrinoSqlParser.KW_NULL);
                        }
                        break;
                    case TrinoSqlParser.KW_ABSENT:
                        {
                        this.state = 2775;
                        this.match(TrinoSqlParser.KW_ABSENT);
                        this.state = 2776;
                        this.match(TrinoSqlParser.KW_ON);
                        this.state = 2777;
                        this.match(TrinoSqlParser.KW_NULL);
                        }
                        break;
                    case TrinoSqlParser.T__1:
                    case TrinoSqlParser.KW_RETURNING:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                }
                this.state = 2788;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 231) {
                    {
                    this.state = 2782;
                    this.match(TrinoSqlParser.KW_RETURNING);
                    this.state = 2783;
                    this.type_(0);
                    this.state = 2786;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 104) {
                        {
                        this.state = 2784;
                        this.match(TrinoSqlParser.KW_FORMAT);
                        this.state = 2785;
                        this.jsonRepresentation();
                        }
                    }

                    }
                }

                this.state = 2790;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2803;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 360, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2801;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 359, this.context) ) {
                    case 1:
                        {
                        localContext = new SubscriptContext(new PrimaryExpressionContext(parentContext, parentState));
                        (localContext as SubscriptContext)._value = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoSqlParser.RULE_primaryExpression);
                        this.state = 2793;
                        if (!(this.precpred(this.context, 24))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 24)");
                        }
                        this.state = 2794;
                        this.match(TrinoSqlParser.T__7);
                        this.state = 2795;
                        (localContext as SubscriptContext)._index = this.valueExpression(0);
                        this.state = 2796;
                        this.match(TrinoSqlParser.T__8);
                        }
                        break;
                    case 2:
                        {
                        localContext = new DereferenceContext(new PrimaryExpressionContext(parentContext, parentState));
                        (localContext as DereferenceContext)._base = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, TrinoSqlParser.RULE_primaryExpression);
                        this.state = 2798;
                        if (!(this.precpred(this.context, 22))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 22)");
                        }
                        this.state = 2799;
                        this.match(TrinoSqlParser.T__3);
                        this.state = 2800;
                        (localContext as DereferenceContext)._fieldName = this.identifier();
                        }
                        break;
                    }
                    }
                }
                this.state = 2805;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 360, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        let localContext = new JsonPathInvocationContext(this.context, this.state);
        this.enterRule(localContext, 164, TrinoSqlParser.RULE_jsonPathInvocation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2806;
            this.jsonValueExpression();
            this.state = 2807;
            this.match(TrinoSqlParser.T__2);
            this.state = 2808;
            localContext._path = this.string_();
            this.state = 2811;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 28) {
                {
                this.state = 2809;
                this.match(TrinoSqlParser.KW_AS);
                this.state = 2810;
                localContext._pathName = this.identifier();
                }
            }

            this.state = 2822;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 203) {
                {
                this.state = 2813;
                this.match(TrinoSqlParser.KW_PASSING);
                this.state = 2814;
                this.jsonArgument();
                this.state = 2819;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 2815;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 2816;
                    this.jsonArgument();
                    }
                    }
                    this.state = 2821;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        let localContext = new JsonValueExpressionContext(this.context, this.state);
        this.enterRule(localContext, 166, TrinoSqlParser.RULE_jsonValueExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2824;
            this.expression();
            this.state = 2827;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 104) {
                {
                this.state = 2825;
                this.match(TrinoSqlParser.KW_FORMAT);
                this.state = 2826;
                this.jsonRepresentation();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonRepresentation(): JsonRepresentationContext {
        let localContext = new JsonRepresentationContext(this.context, this.state);
        this.enterRule(localContext, 168, TrinoSqlParser.RULE_jsonRepresentation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2829;
            this.match(TrinoSqlParser.KW_JSON);
            this.state = 2832;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 2830;
                this.match(TrinoSqlParser.KW_ENCODING);
                this.state = 2831;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 291)) & ~0x1F) === 0 && ((1 << (_la - 291)) & 7) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonArgument(): JsonArgumentContext {
        let localContext = new JsonArgumentContext(this.context, this.state);
        this.enterRule(localContext, 170, TrinoSqlParser.RULE_jsonArgument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2834;
            this.jsonValueExpression();
            this.state = 2835;
            this.match(TrinoSqlParser.KW_AS);
            this.state = 2836;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonExistsErrorBehavior(): JsonExistsErrorBehaviorContext {
        let localContext = new JsonExistsErrorBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 172, TrinoSqlParser.RULE_jsonExistsErrorBehavior);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2838;
            _la = this.tokenStream.LA(1);
            if(!(_la === 89 || _la === 97 || _la === 273 || _la === 283)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonValueBehavior(): JsonValueBehaviorContext {
        let localContext = new JsonValueBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 174, TrinoSqlParser.RULE_jsonValueBehavior);
        try {
            this.state = 2844;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_ERROR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2840;
                this.match(TrinoSqlParser.KW_ERROR);
                }
                break;
            case TrinoSqlParser.KW_NULL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2841;
                this.match(TrinoSqlParser.KW_NULL);
                }
                break;
            case TrinoSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2842;
                this.match(TrinoSqlParser.KW_DEFAULT);
                this.state = 2843;
                this.expression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext {
        let localContext = new JsonQueryWrapperBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 176, TrinoSqlParser.RULE_jsonQueryWrapperBehavior);
        let _la: number;
        try {
            this.state = 2857;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_WITHOUT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2846;
                this.match(TrinoSqlParser.KW_WITHOUT);
                this.state = 2848;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 2847;
                    this.match(TrinoSqlParser.KW_ARRAY);
                    }
                }

                }
                break;
            case TrinoSqlParser.KW_WITH:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2850;
                this.match(TrinoSqlParser.KW_WITH);
                this.state = 2852;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 49 || _la === 280) {
                    {
                    this.state = 2851;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 49 || _la === 280)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2855;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 2854;
                    this.match(TrinoSqlParser.KW_ARRAY);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonQueryBehavior(): JsonQueryBehaviorContext {
        let localContext = new JsonQueryBehaviorContext(this.context, this.state);
        this.enterRule(localContext, 178, TrinoSqlParser.RULE_jsonQueryBehavior);
        try {
            this.state = 2865;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 371, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2859;
                this.match(TrinoSqlParser.KW_ERROR);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2860;
                this.match(TrinoSqlParser.KW_NULL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2861;
                this.match(TrinoSqlParser.KW_EMPTY);
                this.state = 2862;
                this.match(TrinoSqlParser.KW_ARRAY);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2863;
                this.match(TrinoSqlParser.KW_EMPTY);
                this.state = 2864;
                this.match(TrinoSqlParser.KW_OBJECT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonObjectMember(): JsonObjectMemberContext {
        let localContext = new JsonObjectMemberContext(this.context, this.state);
        this.enterRule(localContext, 180, TrinoSqlParser.RULE_jsonObjectMember);
        try {
            this.state = 2878;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 373, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2868;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 372, this.context) ) {
                case 1:
                    {
                    this.state = 2867;
                    this.match(TrinoSqlParser.KW_KEY);
                    }
                    break;
                }
                this.state = 2870;
                this.expression();
                this.state = 2871;
                this.match(TrinoSqlParser.KW_VALUE);
                this.state = 2872;
                this.jsonValueExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2874;
                this.expression();
                this.state = 2875;
                this.match(TrinoSqlParser.T__9);
                this.state = 2876;
                this.jsonValueExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public processingMode(): ProcessingModeContext {
        let localContext = new ProcessingModeContext(this.context, this.state);
        this.enterRule(localContext, 182, TrinoSqlParser.RULE_processingMode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2880;
            _la = this.tokenStream.LA(1);
            if(!(_la === 100 || _la === 241)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nullTreatment(): NullTreatmentContext {
        let localContext = new NullTreatmentContext(this.context, this.state);
        this.enterRule(localContext, 184, TrinoSqlParser.RULE_nullTreatment);
        try {
            this.state = 2886;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_IGNORE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2882;
                this.match(TrinoSqlParser.KW_IGNORE);
                this.state = 2883;
                this.match(TrinoSqlParser.KW_NULLS);
                }
                break;
            case TrinoSqlParser.KW_RESPECT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2884;
                this.match(TrinoSqlParser.KW_RESPECT);
                this.state = 2885;
                this.match(TrinoSqlParser.KW_NULLS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public string_(): StringContext {
        let localContext = new StringContext(this.context, this.state);
        this.enterRule(localContext, 186, TrinoSqlParser.RULE_string);
        try {
            this.state = 2894;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.STRING:
                localContext = new BasicStringLiteralContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2888;
                this.match(TrinoSqlParser.STRING);
                }
                break;
            case TrinoSqlParser.UNICODE_STRING:
                localContext = new UnicodeStringLiteralContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2889;
                this.match(TrinoSqlParser.UNICODE_STRING);
                this.state = 2892;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 375, this.context) ) {
                case 1:
                    {
                    this.state = 2890;
                    this.match(TrinoSqlParser.KW_UESCAPE);
                    this.state = 2891;
                    this.match(TrinoSqlParser.STRING);
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeZoneSpecifier(): TimeZoneSpecifierContext {
        let localContext = new TimeZoneSpecifierContext(this.context, this.state);
        this.enterRule(localContext, 188, TrinoSqlParser.RULE_timeZoneSpecifier);
        try {
            this.state = 2902;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 377, this.context) ) {
            case 1:
                localContext = new TimeZoneIntervalContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2896;
                this.match(TrinoSqlParser.KW_TIME);
                this.state = 2897;
                this.match(TrinoSqlParser.KW_ZONE);
                this.state = 2898;
                this.interval();
                }
                break;
            case 2:
                localContext = new TimeZoneStringContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2899;
                this.match(TrinoSqlParser.KW_TIME);
                this.state = 2900;
                this.match(TrinoSqlParser.KW_ZONE);
                this.state = 2901;
                this.string_();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 190, TrinoSqlParser.RULE_comparisonOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2904;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 63) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonQuantifier(): ComparisonQuantifierContext {
        let localContext = new ComparisonQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 192, TrinoSqlParser.RULE_comparisonQuantifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2906;
            _la = this.tokenStream.LA(1);
            if(!(_la === 22 || _la === 26 || _la === 254)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanValue(): BooleanValueContext {
        let localContext = new BooleanValueContext(this.context, this.state);
        this.enterRule(localContext, 194, TrinoSqlParser.RULE_booleanValue);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2908;
            _la = this.tokenStream.LA(1);
            if(!(_la === 97 || _la === 273)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval(): IntervalContext {
        let localContext = new IntervalContext(this.context, this.state);
        this.enterRule(localContext, 196, TrinoSqlParser.RULE_interval);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2910;
            this.match(TrinoSqlParser.KW_INTERVAL);
            this.state = 2912;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 318 || _la === 319) {
                {
                this.state = 2911;
                localContext._sign = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 318 || _la === 319)) {
                    localContext._sign = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2914;
            this.string_();
            this.state = 2915;
            localContext._from_ = this.intervalField();
            this.state = 2918;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 379, this.context) ) {
            case 1:
                {
                this.state = 2916;
                this.match(TrinoSqlParser.KW_TO);
                this.state = 2917;
                localContext._to = this.intervalField();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalField(): IntervalFieldContext {
        let localContext = new IntervalFieldContext(this.context, this.state);
        this.enterRule(localContext, 198, TrinoSqlParser.RULE_intervalField);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2920;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || _la === 118 || _la === 170 || _la === 171 || _la === 245 || _la === 310)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public normalForm(): NormalFormContext {
        let localContext = new NormalFormContext(this.context, this.state);
        this.enterRule(localContext, 200, TrinoSqlParser.RULE_normalForm);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2922;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 175)) & ~0x1F) === 0 && ((1 << (_la - 175)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public type_(): TypeContext;
    public type_(_p: number): TypeContext;
    public type_(_p?: number): TypeContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new TypeContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 202;
        this.enterRecursionRule(localContext, 202, TrinoSqlParser.RULE_type, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2995;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 388, this.context) ) {
            case 1:
                {
                localContext = new RowTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2925;
                this.match(TrinoSqlParser.KW_ROW);
                this.state = 2926;
                this.match(TrinoSqlParser.T__0);
                this.state = 2927;
                this.rowField();
                this.state = 2932;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 2928;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 2929;
                    this.rowField();
                    }
                    }
                    this.state = 2934;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2935;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 2:
                {
                localContext = new IntervalTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2937;
                this.match(TrinoSqlParser.KW_INTERVAL);
                this.state = 2938;
                (localContext as IntervalTypeContext)._from_ = this.intervalField();
                this.state = 2941;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 381, this.context) ) {
                case 1:
                    {
                    this.state = 2939;
                    this.match(TrinoSqlParser.KW_TO);
                    this.state = 2940;
                    (localContext as IntervalTypeContext)._to = this.intervalField();
                    }
                    break;
                }
                }
                break;
            case 3:
                {
                localContext = new DateTimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2943;
                (localContext as DateTimeTypeContext)._base = this.match(TrinoSqlParser.KW_TIMESTAMP);
                this.state = 2948;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 382, this.context) ) {
                case 1:
                    {
                    this.state = 2944;
                    this.match(TrinoSqlParser.T__0);
                    this.state = 2945;
                    (localContext as DateTimeTypeContext)._precision = this.typeParameter();
                    this.state = 2946;
                    this.match(TrinoSqlParser.T__1);
                    }
                    break;
                }
                this.state = 2953;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 383, this.context) ) {
                case 1:
                    {
                    this.state = 2950;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 304 || _la === 306)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2951;
                    this.match(TrinoSqlParser.KW_TIME);
                    this.state = 2952;
                    this.match(TrinoSqlParser.KW_ZONE);
                    }
                    break;
                }
                }
                break;
            case 4:
                {
                localContext = new TimeTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2955;
                (localContext as TimeTypeContext)._base = this.match(TrinoSqlParser.KW_TIME);
                this.state = 2960;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 384, this.context) ) {
                case 1:
                    {
                    this.state = 2956;
                    this.match(TrinoSqlParser.T__0);
                    this.state = 2957;
                    (localContext as TimeTypeContext)._precision = this.typeParameter();
                    this.state = 2958;
                    this.match(TrinoSqlParser.T__1);
                    }
                    break;
                }
                this.state = 2965;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 385, this.context) ) {
                case 1:
                    {
                    this.state = 2962;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 304 || _la === 306)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2963;
                    this.match(TrinoSqlParser.KW_TIME);
                    this.state = 2964;
                    this.match(TrinoSqlParser.KW_ZONE);
                    }
                    break;
                }
                }
                break;
            case 5:
                {
                localContext = new DoublePrecisionTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2967;
                this.match(TrinoSqlParser.KW_DOUBLE);
                this.state = 2968;
                this.match(TrinoSqlParser.KW_PRECISION);
                }
                break;
            case 6:
                {
                localContext = new LegacyArrayTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2969;
                this.match(TrinoSqlParser.KW_ARRAY);
                this.state = 2970;
                this.match(TrinoSqlParser.LT);
                this.state = 2971;
                this.type_(0);
                this.state = 2972;
                this.match(TrinoSqlParser.GT);
                }
                break;
            case 7:
                {
                localContext = new LegacyMapTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2974;
                this.match(TrinoSqlParser.KW_MAP);
                this.state = 2975;
                this.match(TrinoSqlParser.LT);
                this.state = 2976;
                (localContext as LegacyMapTypeContext)._keyType = this.type_(0);
                this.state = 2977;
                this.match(TrinoSqlParser.T__2);
                this.state = 2978;
                (localContext as LegacyMapTypeContext)._valueType = this.type_(0);
                this.state = 2979;
                this.match(TrinoSqlParser.GT);
                }
                break;
            case 8:
                {
                localContext = new GenericTypeContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2981;
                this.identifier();
                this.state = 2993;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 387, this.context) ) {
                case 1:
                    {
                    this.state = 2982;
                    this.match(TrinoSqlParser.T__0);
                    this.state = 2983;
                    this.typeParameter();
                    this.state = 2988;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 2984;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 2985;
                        this.typeParameter();
                        }
                        }
                        this.state = 2990;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 2991;
                    this.match(TrinoSqlParser.T__1);
                    }
                    break;
                }
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3006;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 390, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new ArrayTypeContext(new TypeContext(parentContext, parentState));
                    this.pushNewRecursionContext(localContext, _startState, TrinoSqlParser.RULE_type);
                    this.state = 2997;
                    if (!(this.precpred(this.context, 2))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                    }
                    this.state = 2998;
                    this.match(TrinoSqlParser.KW_ARRAY);
                    this.state = 3002;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 389, this.context) ) {
                    case 1:
                        {
                        this.state = 2999;
                        this.match(TrinoSqlParser.T__7);
                        this.state = 3000;
                        this.match(TrinoSqlParser.INTEGER_VALUE);
                        this.state = 3001;
                        this.match(TrinoSqlParser.T__8);
                        }
                        break;
                    }
                    }
                    }
                }
                this.state = 3008;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 390, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public rowField(): RowFieldContext {
        let localContext = new RowFieldContext(this.context, this.state);
        this.enterRule(localContext, 204, TrinoSqlParser.RULE_rowField);
        try {
            this.state = 3013;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 391, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3009;
                this.type_(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3010;
                this.identifier();
                this.state = 3011;
                this.type_(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typeParameter(): TypeParameterContext {
        let localContext = new TypeParameterContext(this.context, this.state);
        this.enterRule(localContext, 206, TrinoSqlParser.RULE_typeParameter);
        try {
            this.state = 3017;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.INTEGER_VALUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3015;
                this.match(TrinoSqlParser.INTEGER_VALUE);
                }
                break;
            case TrinoSqlParser.KW_ABSENT:
            case TrinoSqlParser.KW_ADD:
            case TrinoSqlParser.KW_ADMIN:
            case TrinoSqlParser.KW_AFTER:
            case TrinoSqlParser.KW_ALL:
            case TrinoSqlParser.KW_ANALYZE:
            case TrinoSqlParser.KW_ANY:
            case TrinoSqlParser.KW_ARRAY:
            case TrinoSqlParser.KW_ASC:
            case TrinoSqlParser.KW_AT:
            case TrinoSqlParser.KW_AUTHORIZATION:
            case TrinoSqlParser.KW_BEGIN:
            case TrinoSqlParser.KW_BERNOULLI:
            case TrinoSqlParser.KW_BOTH:
            case TrinoSqlParser.KW_CALL:
            case TrinoSqlParser.KW_CALLED:
            case TrinoSqlParser.KW_CASCADE:
            case TrinoSqlParser.KW_CATALOG:
            case TrinoSqlParser.KW_CATALOGS:
            case TrinoSqlParser.KW_COLUMN:
            case TrinoSqlParser.KW_COLUMNS:
            case TrinoSqlParser.KW_COMMENT:
            case TrinoSqlParser.KW_COMMIT:
            case TrinoSqlParser.KW_COMMITTED:
            case TrinoSqlParser.KW_CONDITIONAL:
            case TrinoSqlParser.KW_COUNT:
            case TrinoSqlParser.KW_COPARTITION:
            case TrinoSqlParser.KW_CURRENT:
            case TrinoSqlParser.KW_DATA:
            case TrinoSqlParser.KW_DATE:
            case TrinoSqlParser.KW_DAY:
            case TrinoSqlParser.KW_DECLARE:
            case TrinoSqlParser.KW_DEFAULT:
            case TrinoSqlParser.KW_DEFINE:
            case TrinoSqlParser.KW_DEFINER:
            case TrinoSqlParser.KW_DENY:
            case TrinoSqlParser.KW_DESC:
            case TrinoSqlParser.KW_DESCRIPTOR:
            case TrinoSqlParser.KW_DETERMINISTIC:
            case TrinoSqlParser.KW_DISTRIBUTED:
            case TrinoSqlParser.KW_DO:
            case TrinoSqlParser.KW_DOUBLE:
            case TrinoSqlParser.KW_EMPTY:
            case TrinoSqlParser.KW_ELSEIF:
            case TrinoSqlParser.KW_ENCODING:
            case TrinoSqlParser.KW_ERROR:
            case TrinoSqlParser.KW_EXCLUDING:
            case TrinoSqlParser.KW_EXPLAIN:
            case TrinoSqlParser.KW_FETCH:
            case TrinoSqlParser.KW_FILTER:
            case TrinoSqlParser.KW_FINAL:
            case TrinoSqlParser.KW_FIRST:
            case TrinoSqlParser.KW_FOLLOWING:
            case TrinoSqlParser.KW_FORMAT:
            case TrinoSqlParser.KW_FUNCTION:
            case TrinoSqlParser.KW_FUNCTIONS:
            case TrinoSqlParser.KW_GRACE:
            case TrinoSqlParser.KW_GRANT:
            case TrinoSqlParser.KW_GRANTED:
            case TrinoSqlParser.KW_GRANTS:
            case TrinoSqlParser.KW_GRAPHVIZ:
            case TrinoSqlParser.KW_GROUPS:
            case TrinoSqlParser.KW_HOUR:
            case TrinoSqlParser.KW_IF:
            case TrinoSqlParser.KW_IGNORE:
            case TrinoSqlParser.KW_IMMEDIATE:
            case TrinoSqlParser.KW_INCLUDING:
            case TrinoSqlParser.KW_INITIAL:
            case TrinoSqlParser.KW_INPUT:
            case TrinoSqlParser.KW_INTERVAL:
            case TrinoSqlParser.KW_INVOKER:
            case TrinoSqlParser.KW_IO:
            case TrinoSqlParser.KW_ISOLATION:
            case TrinoSqlParser.KW_ITERATE:
            case TrinoSqlParser.KW_JSON:
            case TrinoSqlParser.KW_KEEP:
            case TrinoSqlParser.KW_KEY:
            case TrinoSqlParser.KW_KEYS:
            case TrinoSqlParser.KW_LANGUAGE:
            case TrinoSqlParser.KW_LAST:
            case TrinoSqlParser.KW_LATERAL:
            case TrinoSqlParser.KW_LEADING:
            case TrinoSqlParser.KW_LEAVE:
            case TrinoSqlParser.KW_LEVEL:
            case TrinoSqlParser.KW_LIMIT:
            case TrinoSqlParser.KW_LOCAL:
            case TrinoSqlParser.KW_LOGICAL:
            case TrinoSqlParser.KW_LOOP:
            case TrinoSqlParser.KW_MAP:
            case TrinoSqlParser.KW_MATCH:
            case TrinoSqlParser.KW_MATCHED:
            case TrinoSqlParser.KW_MATCHES:
            case TrinoSqlParser.KW_MATCH_RECOGNIZE:
            case TrinoSqlParser.KW_MATERIALIZED:
            case TrinoSqlParser.KW_MEASURES:
            case TrinoSqlParser.KW_MERGE:
            case TrinoSqlParser.KW_MINUTE:
            case TrinoSqlParser.KW_MONTH:
            case TrinoSqlParser.KW_NESTED:
            case TrinoSqlParser.KW_NEXT:
            case TrinoSqlParser.KW_NFC:
            case TrinoSqlParser.KW_NFD:
            case TrinoSqlParser.KW_NFKC:
            case TrinoSqlParser.KW_NFKD:
            case TrinoSqlParser.KW_NO:
            case TrinoSqlParser.KW_NONE:
            case TrinoSqlParser.KW_NULLIF:
            case TrinoSqlParser.KW_NULLS:
            case TrinoSqlParser.KW_OBJECT:
            case TrinoSqlParser.KW_OF:
            case TrinoSqlParser.KW_OFFSET:
            case TrinoSqlParser.KW_OMIT:
            case TrinoSqlParser.KW_ONE:
            case TrinoSqlParser.KW_ONLY:
            case TrinoSqlParser.KW_OPTION:
            case TrinoSqlParser.KW_ORDINALITY:
            case TrinoSqlParser.KW_OUTPUT:
            case TrinoSqlParser.KW_OVER:
            case TrinoSqlParser.KW_OVERFLOW:
            case TrinoSqlParser.KW_PARTITION:
            case TrinoSqlParser.KW_PARTITIONS:
            case TrinoSqlParser.KW_PASSING:
            case TrinoSqlParser.KW_PAST:
            case TrinoSqlParser.KW_PATH:
            case TrinoSqlParser.KW_PATTERN:
            case TrinoSqlParser.KW_PER:
            case TrinoSqlParser.KW_PERIOD:
            case TrinoSqlParser.KW_PERMUTE:
            case TrinoSqlParser.KW_PLAN:
            case TrinoSqlParser.KW_POSITION:
            case TrinoSqlParser.KW_PRECEDING:
            case TrinoSqlParser.KW_PRECISION:
            case TrinoSqlParser.KW_PRIVILEGES:
            case TrinoSqlParser.KW_PROPERTIES:
            case TrinoSqlParser.KW_PRUNE:
            case TrinoSqlParser.KW_QUOTES:
            case TrinoSqlParser.KW_RANGE:
            case TrinoSqlParser.KW_READ:
            case TrinoSqlParser.KW_REFRESH:
            case TrinoSqlParser.KW_RENAME:
            case TrinoSqlParser.KW_REPEAT:
            case TrinoSqlParser.KW_REPEATABLE:
            case TrinoSqlParser.KW_REPLACE:
            case TrinoSqlParser.KW_RESET:
            case TrinoSqlParser.KW_RESPECT:
            case TrinoSqlParser.KW_RESTRICT:
            case TrinoSqlParser.KW_RETURN:
            case TrinoSqlParser.KW_RETURNING:
            case TrinoSqlParser.KW_RETURNS:
            case TrinoSqlParser.KW_REVOKE:
            case TrinoSqlParser.KW_ROLE:
            case TrinoSqlParser.KW_ROLES:
            case TrinoSqlParser.KW_ROLLBACK:
            case TrinoSqlParser.KW_ROW:
            case TrinoSqlParser.KW_ROWS:
            case TrinoSqlParser.KW_RUNNING:
            case TrinoSqlParser.KW_SCALAR:
            case TrinoSqlParser.KW_SCHEMA:
            case TrinoSqlParser.KW_SCHEMAS:
            case TrinoSqlParser.KW_SECOND:
            case TrinoSqlParser.KW_SECURITY:
            case TrinoSqlParser.KW_SEEK:
            case TrinoSqlParser.KW_SERIALIZABLE:
            case TrinoSqlParser.KW_SESSION:
            case TrinoSqlParser.KW_SET:
            case TrinoSqlParser.KW_SETS:
            case TrinoSqlParser.KW_SHOW:
            case TrinoSqlParser.KW_SOME:
            case TrinoSqlParser.KW_START:
            case TrinoSqlParser.KW_STATS:
            case TrinoSqlParser.KW_SUBSET:
            case TrinoSqlParser.KW_SUBSTRING:
            case TrinoSqlParser.KW_SYSTEM:
            case TrinoSqlParser.KW_TABLES:
            case TrinoSqlParser.KW_TABLESAMPLE:
            case TrinoSqlParser.KW_TEXT:
            case TrinoSqlParser.KW_TEXT_STRING:
            case TrinoSqlParser.KW_TIES:
            case TrinoSqlParser.KW_TIME:
            case TrinoSqlParser.KW_TIMESTAMP:
            case TrinoSqlParser.KW_TO:
            case TrinoSqlParser.KW_TRAILING:
            case TrinoSqlParser.KW_TRANSACTION:
            case TrinoSqlParser.KW_TRUNCATE:
            case TrinoSqlParser.KW_TRY_CAST:
            case TrinoSqlParser.KW_TYPE:
            case TrinoSqlParser.KW_UNBOUNDED:
            case TrinoSqlParser.KW_UNCOMMITTED:
            case TrinoSqlParser.KW_UNCONDITIONAL:
            case TrinoSqlParser.KW_UNIQUE:
            case TrinoSqlParser.KW_UNKNOWN:
            case TrinoSqlParser.KW_UNMATCHED:
            case TrinoSqlParser.KW_UNTIL:
            case TrinoSqlParser.KW_UPDATE:
            case TrinoSqlParser.KW_USE:
            case TrinoSqlParser.KW_USER:
            case TrinoSqlParser.KW_UTF16:
            case TrinoSqlParser.KW_UTF32:
            case TrinoSqlParser.KW_UTF8:
            case TrinoSqlParser.KW_VALIDATE:
            case TrinoSqlParser.KW_VALUE:
            case TrinoSqlParser.KW_VERBOSE:
            case TrinoSqlParser.KW_VERSION:
            case TrinoSqlParser.KW_VIEW:
            case TrinoSqlParser.KW_WHILE:
            case TrinoSqlParser.KW_WINDOW:
            case TrinoSqlParser.KW_WITHIN:
            case TrinoSqlParser.KW_WITHOUT:
            case TrinoSqlParser.KW_WORK:
            case TrinoSqlParser.KW_WRAPPER:
            case TrinoSqlParser.KW_WRITE:
            case TrinoSqlParser.KW_YEAR:
            case TrinoSqlParser.KW_ZONE:
            case TrinoSqlParser.IDENTIFIER:
            case TrinoSqlParser.DIGIT_IDENTIFIER:
            case TrinoSqlParser.QUOTED_IDENTIFIER:
            case TrinoSqlParser.BACKQUOTED_IDENTIFIER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3016;
                this.type_(0);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whenClause(): WhenClauseContext {
        let localContext = new WhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 208, TrinoSqlParser.RULE_whenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3019;
            this.match(TrinoSqlParser.KW_WHEN);
            this.state = 3020;
            localContext._condition = this.expression();
            this.state = 3021;
            this.match(TrinoSqlParser.KW_THEN);
            this.state = 3022;
            localContext._result = this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filter(): FilterContext {
        let localContext = new FilterContext(this.context, this.state);
        this.enterRule(localContext, 210, TrinoSqlParser.RULE_filter);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3024;
            this.match(TrinoSqlParser.KW_FILTER);
            this.state = 3025;
            this.match(TrinoSqlParser.T__0);
            this.state = 3026;
            this.whereClause();
            this.state = 3027;
            this.match(TrinoSqlParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mergeCase(): MergeCaseContext {
        let localContext = new MergeCaseContext(this.context, this.state);
        this.enterRule(localContext, 212, TrinoSqlParser.RULE_mergeCase);
        let _la: number;
        try {
            this.state = 3093;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 400, this.context) ) {
            case 1:
                localContext = new MergeUpdateContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3029;
                this.match(TrinoSqlParser.KW_WHEN);
                this.state = 3030;
                this.match(TrinoSqlParser.KW_MATCHED);
                this.state = 3033;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 3031;
                    this.match(TrinoSqlParser.KW_AND);
                    this.state = 3032;
                    (localContext as MergeUpdateContext)._condition = this.expression();
                    }
                }

                this.state = 3035;
                this.match(TrinoSqlParser.KW_THEN);
                this.state = 3036;
                this.match(TrinoSqlParser.KW_UPDATE);
                this.state = 3037;
                this.match(TrinoSqlParser.KW_SET);
                this.state = 3038;
                (localContext as MergeUpdateContext)._identifier = this.identifier();
                (localContext as MergeUpdateContext)._targets.push((localContext as MergeUpdateContext)._identifier);
                this.state = 3039;
                this.match(TrinoSqlParser.EQ);
                this.state = 3040;
                (localContext as MergeUpdateContext)._expression = this.expression();
                (localContext as MergeUpdateContext)._values.push((localContext as MergeUpdateContext)._expression);
                this.state = 3048;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 3041;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 3042;
                    (localContext as MergeUpdateContext)._identifier = this.identifier();
                    (localContext as MergeUpdateContext)._targets.push((localContext as MergeUpdateContext)._identifier);
                    this.state = 3043;
                    this.match(TrinoSqlParser.EQ);
                    this.state = 3044;
                    (localContext as MergeUpdateContext)._expression = this.expression();
                    (localContext as MergeUpdateContext)._values.push((localContext as MergeUpdateContext)._expression);
                    }
                    }
                    this.state = 3050;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                localContext = new MergeDeleteContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3051;
                this.match(TrinoSqlParser.KW_WHEN);
                this.state = 3052;
                this.match(TrinoSqlParser.KW_MATCHED);
                this.state = 3055;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 3053;
                    this.match(TrinoSqlParser.KW_AND);
                    this.state = 3054;
                    (localContext as MergeDeleteContext)._condition = this.expression();
                    }
                }

                this.state = 3057;
                this.match(TrinoSqlParser.KW_THEN);
                this.state = 3058;
                this.match(TrinoSqlParser.KW_DELETE);
                }
                break;
            case 3:
                localContext = new MergeInsertContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3059;
                this.match(TrinoSqlParser.KW_WHEN);
                this.state = 3060;
                this.match(TrinoSqlParser.KW_NOT);
                this.state = 3061;
                this.match(TrinoSqlParser.KW_MATCHED);
                this.state = 3064;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 3062;
                    this.match(TrinoSqlParser.KW_AND);
                    this.state = 3063;
                    (localContext as MergeInsertContext)._condition = this.expression();
                    }
                }

                this.state = 3066;
                this.match(TrinoSqlParser.KW_THEN);
                this.state = 3067;
                this.match(TrinoSqlParser.KW_INSERT);
                this.state = 3079;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1) {
                    {
                    this.state = 3068;
                    this.match(TrinoSqlParser.T__0);
                    this.state = 3069;
                    (localContext as MergeInsertContext)._identifier = this.identifier();
                    (localContext as MergeInsertContext)._targets.push((localContext as MergeInsertContext)._identifier);
                    this.state = 3074;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 3) {
                        {
                        {
                        this.state = 3070;
                        this.match(TrinoSqlParser.T__2);
                        this.state = 3071;
                        (localContext as MergeInsertContext)._identifier = this.identifier();
                        (localContext as MergeInsertContext)._targets.push((localContext as MergeInsertContext)._identifier);
                        }
                        }
                        this.state = 3076;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 3077;
                    this.match(TrinoSqlParser.T__1);
                    }
                }

                this.state = 3081;
                this.match(TrinoSqlParser.KW_VALUES);
                this.state = 3082;
                this.match(TrinoSqlParser.T__0);
                this.state = 3083;
                (localContext as MergeInsertContext)._expression = this.expression();
                (localContext as MergeInsertContext)._values.push((localContext as MergeInsertContext)._expression);
                this.state = 3088;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 3084;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 3085;
                    (localContext as MergeInsertContext)._expression = this.expression();
                    (localContext as MergeInsertContext)._values.push((localContext as MergeInsertContext)._expression);
                    }
                    }
                    this.state = 3090;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3091;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public over(): OverContext {
        let localContext = new OverContext(this.context, this.state);
        this.enterRule(localContext, 214, TrinoSqlParser.RULE_over);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3095;
            this.match(TrinoSqlParser.KW_OVER);
            this.state = 3101;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_ABSENT:
            case TrinoSqlParser.KW_ADD:
            case TrinoSqlParser.KW_ADMIN:
            case TrinoSqlParser.KW_AFTER:
            case TrinoSqlParser.KW_ALL:
            case TrinoSqlParser.KW_ANALYZE:
            case TrinoSqlParser.KW_ANY:
            case TrinoSqlParser.KW_ARRAY:
            case TrinoSqlParser.KW_ASC:
            case TrinoSqlParser.KW_AT:
            case TrinoSqlParser.KW_AUTHORIZATION:
            case TrinoSqlParser.KW_BEGIN:
            case TrinoSqlParser.KW_BERNOULLI:
            case TrinoSqlParser.KW_BOTH:
            case TrinoSqlParser.KW_CALL:
            case TrinoSqlParser.KW_CALLED:
            case TrinoSqlParser.KW_CASCADE:
            case TrinoSqlParser.KW_CATALOG:
            case TrinoSqlParser.KW_CATALOGS:
            case TrinoSqlParser.KW_COLUMN:
            case TrinoSqlParser.KW_COLUMNS:
            case TrinoSqlParser.KW_COMMENT:
            case TrinoSqlParser.KW_COMMIT:
            case TrinoSqlParser.KW_COMMITTED:
            case TrinoSqlParser.KW_CONDITIONAL:
            case TrinoSqlParser.KW_COUNT:
            case TrinoSqlParser.KW_COPARTITION:
            case TrinoSqlParser.KW_CURRENT:
            case TrinoSqlParser.KW_DATA:
            case TrinoSqlParser.KW_DATE:
            case TrinoSqlParser.KW_DAY:
            case TrinoSqlParser.KW_DECLARE:
            case TrinoSqlParser.KW_DEFAULT:
            case TrinoSqlParser.KW_DEFINE:
            case TrinoSqlParser.KW_DEFINER:
            case TrinoSqlParser.KW_DENY:
            case TrinoSqlParser.KW_DESC:
            case TrinoSqlParser.KW_DESCRIPTOR:
            case TrinoSqlParser.KW_DETERMINISTIC:
            case TrinoSqlParser.KW_DISTRIBUTED:
            case TrinoSqlParser.KW_DO:
            case TrinoSqlParser.KW_DOUBLE:
            case TrinoSqlParser.KW_EMPTY:
            case TrinoSqlParser.KW_ELSEIF:
            case TrinoSqlParser.KW_ENCODING:
            case TrinoSqlParser.KW_ERROR:
            case TrinoSqlParser.KW_EXCLUDING:
            case TrinoSqlParser.KW_EXPLAIN:
            case TrinoSqlParser.KW_FETCH:
            case TrinoSqlParser.KW_FILTER:
            case TrinoSqlParser.KW_FINAL:
            case TrinoSqlParser.KW_FIRST:
            case TrinoSqlParser.KW_FOLLOWING:
            case TrinoSqlParser.KW_FORMAT:
            case TrinoSqlParser.KW_FUNCTION:
            case TrinoSqlParser.KW_FUNCTIONS:
            case TrinoSqlParser.KW_GRACE:
            case TrinoSqlParser.KW_GRANT:
            case TrinoSqlParser.KW_GRANTED:
            case TrinoSqlParser.KW_GRANTS:
            case TrinoSqlParser.KW_GRAPHVIZ:
            case TrinoSqlParser.KW_GROUPS:
            case TrinoSqlParser.KW_HOUR:
            case TrinoSqlParser.KW_IF:
            case TrinoSqlParser.KW_IGNORE:
            case TrinoSqlParser.KW_IMMEDIATE:
            case TrinoSqlParser.KW_INCLUDING:
            case TrinoSqlParser.KW_INITIAL:
            case TrinoSqlParser.KW_INPUT:
            case TrinoSqlParser.KW_INTERVAL:
            case TrinoSqlParser.KW_INVOKER:
            case TrinoSqlParser.KW_IO:
            case TrinoSqlParser.KW_ISOLATION:
            case TrinoSqlParser.KW_ITERATE:
            case TrinoSqlParser.KW_JSON:
            case TrinoSqlParser.KW_KEEP:
            case TrinoSqlParser.KW_KEY:
            case TrinoSqlParser.KW_KEYS:
            case TrinoSqlParser.KW_LANGUAGE:
            case TrinoSqlParser.KW_LAST:
            case TrinoSqlParser.KW_LATERAL:
            case TrinoSqlParser.KW_LEADING:
            case TrinoSqlParser.KW_LEAVE:
            case TrinoSqlParser.KW_LEVEL:
            case TrinoSqlParser.KW_LIMIT:
            case TrinoSqlParser.KW_LOCAL:
            case TrinoSqlParser.KW_LOGICAL:
            case TrinoSqlParser.KW_LOOP:
            case TrinoSqlParser.KW_MAP:
            case TrinoSqlParser.KW_MATCH:
            case TrinoSqlParser.KW_MATCHED:
            case TrinoSqlParser.KW_MATCHES:
            case TrinoSqlParser.KW_MATCH_RECOGNIZE:
            case TrinoSqlParser.KW_MATERIALIZED:
            case TrinoSqlParser.KW_MEASURES:
            case TrinoSqlParser.KW_MERGE:
            case TrinoSqlParser.KW_MINUTE:
            case TrinoSqlParser.KW_MONTH:
            case TrinoSqlParser.KW_NESTED:
            case TrinoSqlParser.KW_NEXT:
            case TrinoSqlParser.KW_NFC:
            case TrinoSqlParser.KW_NFD:
            case TrinoSqlParser.KW_NFKC:
            case TrinoSqlParser.KW_NFKD:
            case TrinoSqlParser.KW_NO:
            case TrinoSqlParser.KW_NONE:
            case TrinoSqlParser.KW_NULLIF:
            case TrinoSqlParser.KW_NULLS:
            case TrinoSqlParser.KW_OBJECT:
            case TrinoSqlParser.KW_OF:
            case TrinoSqlParser.KW_OFFSET:
            case TrinoSqlParser.KW_OMIT:
            case TrinoSqlParser.KW_ONE:
            case TrinoSqlParser.KW_ONLY:
            case TrinoSqlParser.KW_OPTION:
            case TrinoSqlParser.KW_ORDINALITY:
            case TrinoSqlParser.KW_OUTPUT:
            case TrinoSqlParser.KW_OVER:
            case TrinoSqlParser.KW_OVERFLOW:
            case TrinoSqlParser.KW_PARTITION:
            case TrinoSqlParser.KW_PARTITIONS:
            case TrinoSqlParser.KW_PASSING:
            case TrinoSqlParser.KW_PAST:
            case TrinoSqlParser.KW_PATH:
            case TrinoSqlParser.KW_PATTERN:
            case TrinoSqlParser.KW_PER:
            case TrinoSqlParser.KW_PERIOD:
            case TrinoSqlParser.KW_PERMUTE:
            case TrinoSqlParser.KW_PLAN:
            case TrinoSqlParser.KW_POSITION:
            case TrinoSqlParser.KW_PRECEDING:
            case TrinoSqlParser.KW_PRECISION:
            case TrinoSqlParser.KW_PRIVILEGES:
            case TrinoSqlParser.KW_PROPERTIES:
            case TrinoSqlParser.KW_PRUNE:
            case TrinoSqlParser.KW_QUOTES:
            case TrinoSqlParser.KW_RANGE:
            case TrinoSqlParser.KW_READ:
            case TrinoSqlParser.KW_REFRESH:
            case TrinoSqlParser.KW_RENAME:
            case TrinoSqlParser.KW_REPEAT:
            case TrinoSqlParser.KW_REPEATABLE:
            case TrinoSqlParser.KW_REPLACE:
            case TrinoSqlParser.KW_RESET:
            case TrinoSqlParser.KW_RESPECT:
            case TrinoSqlParser.KW_RESTRICT:
            case TrinoSqlParser.KW_RETURN:
            case TrinoSqlParser.KW_RETURNING:
            case TrinoSqlParser.KW_RETURNS:
            case TrinoSqlParser.KW_REVOKE:
            case TrinoSqlParser.KW_ROLE:
            case TrinoSqlParser.KW_ROLES:
            case TrinoSqlParser.KW_ROLLBACK:
            case TrinoSqlParser.KW_ROW:
            case TrinoSqlParser.KW_ROWS:
            case TrinoSqlParser.KW_RUNNING:
            case TrinoSqlParser.KW_SCALAR:
            case TrinoSqlParser.KW_SCHEMA:
            case TrinoSqlParser.KW_SCHEMAS:
            case TrinoSqlParser.KW_SECOND:
            case TrinoSqlParser.KW_SECURITY:
            case TrinoSqlParser.KW_SEEK:
            case TrinoSqlParser.KW_SERIALIZABLE:
            case TrinoSqlParser.KW_SESSION:
            case TrinoSqlParser.KW_SET:
            case TrinoSqlParser.KW_SETS:
            case TrinoSqlParser.KW_SHOW:
            case TrinoSqlParser.KW_SOME:
            case TrinoSqlParser.KW_START:
            case TrinoSqlParser.KW_STATS:
            case TrinoSqlParser.KW_SUBSET:
            case TrinoSqlParser.KW_SUBSTRING:
            case TrinoSqlParser.KW_SYSTEM:
            case TrinoSqlParser.KW_TABLES:
            case TrinoSqlParser.KW_TABLESAMPLE:
            case TrinoSqlParser.KW_TEXT:
            case TrinoSqlParser.KW_TEXT_STRING:
            case TrinoSqlParser.KW_TIES:
            case TrinoSqlParser.KW_TIME:
            case TrinoSqlParser.KW_TIMESTAMP:
            case TrinoSqlParser.KW_TO:
            case TrinoSqlParser.KW_TRAILING:
            case TrinoSqlParser.KW_TRANSACTION:
            case TrinoSqlParser.KW_TRUNCATE:
            case TrinoSqlParser.KW_TRY_CAST:
            case TrinoSqlParser.KW_TYPE:
            case TrinoSqlParser.KW_UNBOUNDED:
            case TrinoSqlParser.KW_UNCOMMITTED:
            case TrinoSqlParser.KW_UNCONDITIONAL:
            case TrinoSqlParser.KW_UNIQUE:
            case TrinoSqlParser.KW_UNKNOWN:
            case TrinoSqlParser.KW_UNMATCHED:
            case TrinoSqlParser.KW_UNTIL:
            case TrinoSqlParser.KW_UPDATE:
            case TrinoSqlParser.KW_USE:
            case TrinoSqlParser.KW_USER:
            case TrinoSqlParser.KW_UTF16:
            case TrinoSqlParser.KW_UTF32:
            case TrinoSqlParser.KW_UTF8:
            case TrinoSqlParser.KW_VALIDATE:
            case TrinoSqlParser.KW_VALUE:
            case TrinoSqlParser.KW_VERBOSE:
            case TrinoSqlParser.KW_VERSION:
            case TrinoSqlParser.KW_VIEW:
            case TrinoSqlParser.KW_WHILE:
            case TrinoSqlParser.KW_WINDOW:
            case TrinoSqlParser.KW_WITHIN:
            case TrinoSqlParser.KW_WITHOUT:
            case TrinoSqlParser.KW_WORK:
            case TrinoSqlParser.KW_WRAPPER:
            case TrinoSqlParser.KW_WRITE:
            case TrinoSqlParser.KW_YEAR:
            case TrinoSqlParser.KW_ZONE:
            case TrinoSqlParser.IDENTIFIER:
            case TrinoSqlParser.DIGIT_IDENTIFIER:
            case TrinoSqlParser.QUOTED_IDENTIFIER:
            case TrinoSqlParser.BACKQUOTED_IDENTIFIER:
                {
                this.state = 3096;
                localContext._windowName = this.identifier();
                }
                break;
            case TrinoSqlParser.T__0:
                {
                this.state = 3097;
                this.match(TrinoSqlParser.T__0);
                this.state = 3098;
                this.windowSpecification();
                this.state = 3099;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrame(): WindowFrameContext {
        let localContext = new WindowFrameContext(this.context, this.state);
        this.enterRule(localContext, 216, TrinoSqlParser.RULE_windowFrame);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3112;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 168) {
                {
                this.state = 3103;
                this.match(TrinoSqlParser.KW_MEASURES);
                this.state = 3104;
                this.measureDefinition();
                this.state = 3109;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 3105;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 3106;
                    this.measureDefinition();
                    }
                    }
                    this.state = 3111;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3114;
            this.frameExtent();
            this.state = 3118;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 21) {
                {
                this.state = 3115;
                this.match(TrinoSqlParser.KW_AFTER);
                this.state = 3116;
                this.match(TrinoSqlParser.KW_MATCH);
                this.state = 3117;
                this.skipTo();
                }
            }

            this.state = 3121;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 124 || _la === 247) {
                {
                this.state = 3120;
                _la = this.tokenStream.LA(1);
                if(!(_la === 124 || _la === 247)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3128;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 206) {
                {
                this.state = 3123;
                this.match(TrinoSqlParser.KW_PATTERN);
                this.state = 3124;
                this.match(TrinoSqlParser.T__0);
                this.state = 3125;
                this.rowPattern(0);
                this.state = 3126;
                this.match(TrinoSqlParser.T__1);
                }
            }

            this.state = 3139;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 257) {
                {
                this.state = 3130;
                this.match(TrinoSqlParser.KW_SUBSET);
                this.state = 3131;
                this.subsetDefinition();
                this.state = 3136;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 3132;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 3133;
                    this.subsetDefinition();
                    }
                    }
                    this.state = 3138;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3150;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 71) {
                {
                this.state = 3141;
                this.match(TrinoSqlParser.KW_DEFINE);
                this.state = 3142;
                this.variableDefinition();
                this.state = 3147;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 3143;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 3144;
                    this.variableDefinition();
                    }
                    }
                    this.state = 3149;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameExtent(): FrameExtentContext {
        let localContext = new FrameExtentContext(this.context, this.state);
        this.enterRule(localContext, 218, TrinoSqlParser.RULE_frameExtent);
        try {
            this.state = 3176;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 411, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3152;
                localContext._frameType = this.match(TrinoSqlParser.KW_RANGE);
                this.state = 3153;
                localContext._start = this.frameBound();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3154;
                localContext._frameType = this.match(TrinoSqlParser.KW_ROWS);
                this.state = 3155;
                localContext._start = this.frameBound();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3156;
                localContext._frameType = this.match(TrinoSqlParser.KW_GROUPS);
                this.state = 3157;
                localContext._start = this.frameBound();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3158;
                localContext._frameType = this.match(TrinoSqlParser.KW_RANGE);
                this.state = 3159;
                this.match(TrinoSqlParser.KW_BETWEEN);
                this.state = 3160;
                localContext._start = this.frameBound();
                this.state = 3161;
                this.match(TrinoSqlParser.KW_AND);
                this.state = 3162;
                localContext._end = this.frameBound();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3164;
                localContext._frameType = this.match(TrinoSqlParser.KW_ROWS);
                this.state = 3165;
                this.match(TrinoSqlParser.KW_BETWEEN);
                this.state = 3166;
                localContext._start = this.frameBound();
                this.state = 3167;
                this.match(TrinoSqlParser.KW_AND);
                this.state = 3168;
                localContext._end = this.frameBound();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3170;
                localContext._frameType = this.match(TrinoSqlParser.KW_GROUPS);
                this.state = 3171;
                this.match(TrinoSqlParser.KW_BETWEEN);
                this.state = 3172;
                localContext._start = this.frameBound();
                this.state = 3173;
                this.match(TrinoSqlParser.KW_AND);
                this.state = 3174;
                localContext._end = this.frameBound();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frameBound(): FrameBoundContext {
        let localContext = new FrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 220, TrinoSqlParser.RULE_frameBound);
        let _la: number;
        try {
            this.state = 3187;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 412, this.context) ) {
            case 1:
                localContext = new UnboundedFrameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3178;
                this.match(TrinoSqlParser.KW_UNBOUNDED);
                this.state = 3179;
                (localContext as UnboundedFrameContext)._boundType = this.match(TrinoSqlParser.KW_PRECEDING);
                }
                break;
            case 2:
                localContext = new UnboundedFrameContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3180;
                this.match(TrinoSqlParser.KW_UNBOUNDED);
                this.state = 3181;
                (localContext as UnboundedFrameContext)._boundType = this.match(TrinoSqlParser.KW_FOLLOWING);
                }
                break;
            case 3:
                localContext = new CurrentRowBoundContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3182;
                this.match(TrinoSqlParser.KW_CURRENT);
                this.state = 3183;
                this.match(TrinoSqlParser.KW_ROW);
                }
                break;
            case 4:
                localContext = new BoundedFrameContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3184;
                this.expression();
                this.state = 3185;
                (localContext as BoundedFrameContext)._boundType = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 102 || _la === 212)) {
                    (localContext as BoundedFrameContext)._boundType = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public rowPattern(): RowPatternContext;
    public rowPattern(_p: number): RowPatternContext;
    public rowPattern(_p?: number): RowPatternContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new RowPatternContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 222;
        this.enterRecursionRule(localContext, 222, TrinoSqlParser.RULE_rowPattern, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            localContext = new QuantifiedPrimaryContext(localContext);
            this.context = localContext;
            previousContext = localContext;

            this.state = 3190;
            this.patternPrimary();
            this.state = 3192;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 413, this.context) ) {
            case 1:
                {
                this.state = 3191;
                this.patternQuantifier();
                }
                break;
            }
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3201;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 415, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3199;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 414, this.context) ) {
                    case 1:
                        {
                        localContext = new PatternConcatenationContext(new RowPatternContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoSqlParser.RULE_rowPattern);
                        this.state = 3194;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 3195;
                        this.rowPattern(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new PatternAlternationContext(new RowPatternContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, TrinoSqlParser.RULE_rowPattern);
                        this.state = 3196;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 3197;
                        this.match(TrinoSqlParser.T__10);
                        this.state = 3198;
                        this.rowPattern(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 3203;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 415, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public patternPrimary(): PatternPrimaryContext {
        let localContext = new PatternPrimaryContext(this.context, this.state);
        this.enterRule(localContext, 224, TrinoSqlParser.RULE_patternPrimary);
        let _la: number;
        try {
            this.state = 3229;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 417, this.context) ) {
            case 1:
                localContext = new PatternVariableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3204;
                this.identifier();
                }
                break;
            case 2:
                localContext = new EmptyPatternContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3205;
                this.match(TrinoSqlParser.T__0);
                this.state = 3206;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 3:
                localContext = new PatternPermutationContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3207;
                this.match(TrinoSqlParser.KW_PERMUTE);
                this.state = 3208;
                this.match(TrinoSqlParser.T__0);
                this.state = 3209;
                this.rowPattern(0);
                this.state = 3214;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 3210;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 3211;
                    this.rowPattern(0);
                    }
                    }
                    this.state = 3216;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3217;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 4:
                localContext = new GroupedPatternContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3219;
                this.match(TrinoSqlParser.T__0);
                this.state = 3220;
                this.rowPattern(0);
                this.state = 3221;
                this.match(TrinoSqlParser.T__1);
                }
                break;
            case 5:
                localContext = new PartitionStartAnchorContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3223;
                this.match(TrinoSqlParser.T__11);
                }
                break;
            case 6:
                localContext = new PartitionEndAnchorContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3224;
                this.match(TrinoSqlParser.T__12);
                }
                break;
            case 7:
                localContext = new ExcludedPatternContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3225;
                this.match(TrinoSqlParser.T__13);
                this.state = 3226;
                this.rowPattern(0);
                this.state = 3227;
                this.match(TrinoSqlParser.T__14);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternQuantifier(): PatternQuantifierContext {
        let localContext = new PatternQuantifierContext(this.context, this.state);
        this.enterRule(localContext, 226, TrinoSqlParser.RULE_patternQuantifier);
        let _la: number;
        try {
            this.state = 3261;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 425, this.context) ) {
            case 1:
                localContext = new ZeroOrMoreQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3231;
                this.match(TrinoSqlParser.ASTERISK);
                this.state = 3233;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 418, this.context) ) {
                case 1:
                    {
                    this.state = 3232;
                    (localContext as ZeroOrMoreQuantifierContext)._reluctant = this.match(TrinoSqlParser.QUESTION_MARK);
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new OneOrMoreQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3235;
                this.match(TrinoSqlParser.PLUS);
                this.state = 3237;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 419, this.context) ) {
                case 1:
                    {
                    this.state = 3236;
                    (localContext as OneOrMoreQuantifierContext)._reluctant = this.match(TrinoSqlParser.QUESTION_MARK);
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new ZeroOrOneQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3239;
                this.match(TrinoSqlParser.QUESTION_MARK);
                this.state = 3241;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 420, this.context) ) {
                case 1:
                    {
                    this.state = 3240;
                    (localContext as ZeroOrOneQuantifierContext)._reluctant = this.match(TrinoSqlParser.QUESTION_MARK);
                    }
                    break;
                }
                }
                break;
            case 4:
                localContext = new RangeQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3243;
                this.match(TrinoSqlParser.T__15);
                this.state = 3244;
                (localContext as RangeQuantifierContext)._exactly = this.match(TrinoSqlParser.INTEGER_VALUE);
                this.state = 3245;
                this.match(TrinoSqlParser.T__16);
                this.state = 3247;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 421, this.context) ) {
                case 1:
                    {
                    this.state = 3246;
                    (localContext as RangeQuantifierContext)._reluctant = this.match(TrinoSqlParser.QUESTION_MARK);
                    }
                    break;
                }
                }
                break;
            case 5:
                localContext = new RangeQuantifierContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3249;
                this.match(TrinoSqlParser.T__15);
                this.state = 3251;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329) {
                    {
                    this.state = 3250;
                    (localContext as RangeQuantifierContext)._atLeast = this.match(TrinoSqlParser.INTEGER_VALUE);
                    }
                }

                this.state = 3253;
                this.match(TrinoSqlParser.T__2);
                this.state = 3255;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 329) {
                    {
                    this.state = 3254;
                    (localContext as RangeQuantifierContext)._atMost = this.match(TrinoSqlParser.INTEGER_VALUE);
                    }
                }

                this.state = 3257;
                this.match(TrinoSqlParser.T__16);
                this.state = 3259;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 424, this.context) ) {
                case 1:
                    {
                    this.state = 3258;
                    (localContext as RangeQuantifierContext)._reluctant = this.match(TrinoSqlParser.QUESTION_MARK);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updateAssignment(): UpdateAssignmentContext {
        let localContext = new UpdateAssignmentContext(this.context, this.state);
        this.enterRule(localContext, 228, TrinoSqlParser.RULE_updateAssignment);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3263;
            this.identifier();
            this.state = 3264;
            this.match(TrinoSqlParser.EQ);
            this.state = 3265;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainOption(): ExplainOptionContext {
        let localContext = new ExplainOptionContext(this.context, this.state);
        this.enterRule(localContext, 230, TrinoSqlParser.RULE_explainOption);
        let _la: number;
        try {
            this.state = 3271;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_FORMAT:
                localContext = new ExplainFormatContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3267;
                this.match(TrinoSqlParser.KW_FORMAT);
                this.state = 3268;
                (localContext as ExplainFormatContext)._value = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 113 || _la === 137 || _la === 263)) {
                    (localContext as ExplainFormatContext)._value = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case TrinoSqlParser.KW_TYPE:
                localContext = new ExplainTypeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3269;
                this.match(TrinoSqlParser.KW_TYPE);
                this.state = 3270;
                (localContext as ExplainTypeContext)._value = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 80 || _la === 132 || _la === 160 || _la === 294)) {
                    (localContext as ExplainTypeContext)._value = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionMode(): TransactionModeContext {
        let localContext = new TransactionModeContext(this.context, this.state);
        this.enterRule(localContext, 232, TrinoSqlParser.RULE_transactionMode);
        let _la: number;
        try {
            this.state = 3278;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_ISOLATION:
                localContext = new IsolationLevelContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3273;
                this.match(TrinoSqlParser.KW_ISOLATION);
                this.state = 3274;
                this.match(TrinoSqlParser.KW_LEVEL);
                this.state = 3275;
                this.levelOfIsolation();
                }
                break;
            case TrinoSqlParser.KW_READ:
                localContext = new TransactionAccessModeContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3276;
                this.match(TrinoSqlParser.KW_READ);
                this.state = 3277;
                (localContext as TransactionAccessModeContext)._accessMode = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 192 || _la === 309)) {
                    (localContext as TransactionAccessModeContext)._accessMode = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public levelOfIsolation(): LevelOfIsolationContext {
        let localContext = new LevelOfIsolationContext(this.context, this.state);
        this.enterRule(localContext, 234, TrinoSqlParser.RULE_levelOfIsolation);
        try {
            this.state = 3287;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 428, this.context) ) {
            case 1:
                localContext = new ReadUncommittedContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3280;
                this.match(TrinoSqlParser.KW_READ);
                this.state = 3281;
                this.match(TrinoSqlParser.KW_UNCOMMITTED);
                }
                break;
            case 2:
                localContext = new ReadCommittedContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3282;
                this.match(TrinoSqlParser.KW_READ);
                this.state = 3283;
                this.match(TrinoSqlParser.KW_COMMITTED);
                }
                break;
            case 3:
                localContext = new RepeatableReadContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3284;
                this.match(TrinoSqlParser.KW_REPEATABLE);
                this.state = 3285;
                this.match(TrinoSqlParser.KW_READ);
                }
                break;
            case 4:
                localContext = new SerializableContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3286;
                this.match(TrinoSqlParser.KW_SERIALIZABLE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callArgument(): CallArgumentContext {
        let localContext = new CallArgumentContext(this.context, this.state);
        this.enterRule(localContext, 236, TrinoSqlParser.RULE_callArgument);
        try {
            this.state = 3294;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 429, this.context) ) {
            case 1:
                localContext = new PositionalArgumentContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3289;
                this.expression();
                }
                break;
            case 2:
                localContext = new NamedArgumentContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3290;
                this.identifier();
                this.state = 3291;
                this.match(TrinoSqlParser.T__5);
                this.state = 3292;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathElement(): PathElementContext {
        let localContext = new PathElementContext(this.context, this.state);
        this.enterRule(localContext, 238, TrinoSqlParser.RULE_pathElement);
        try {
            this.state = 3301;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 430, this.context) ) {
            case 1:
                localContext = new QualifiedArgumentContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3296;
                this.identifier();
                this.state = 3297;
                this.match(TrinoSqlParser.T__3);
                this.state = 3298;
                this.identifier();
                }
                break;
            case 2:
                localContext = new UnqualifiedArgumentContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3300;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathSpecification(): PathSpecificationContext {
        let localContext = new PathSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 240, TrinoSqlParser.RULE_pathSpecification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3303;
            this.pathElement();
            this.state = 3308;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 3) {
                {
                {
                this.state = 3304;
                this.match(TrinoSqlParser.T__2);
                this.state = 3305;
                this.pathElement();
                }
                }
                this.state = 3310;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionSpecification(): FunctionSpecificationContext {
        let localContext = new FunctionSpecificationContext(this.context, this.state);
        this.enterRule(localContext, 242, TrinoSqlParser.RULE_functionSpecification);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3311;
            this.match(TrinoSqlParser.KW_FUNCTION);
            this.state = 3312;
            this.functionDeclaration();
            this.state = 3313;
            this.returnsClause();
            this.state = 3317;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 432, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3314;
                    this.routineCharacteristic();
                    }
                    }
                }
                this.state = 3319;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 432, this.context);
            }
            this.state = 3320;
            this.controlStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionDeclaration(): FunctionDeclarationContext {
        let localContext = new FunctionDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 244, TrinoSqlParser.RULE_functionDeclaration);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3322;
            this.functionNameCreate();
            this.state = 3323;
            this.match(TrinoSqlParser.T__0);
            this.state = 3332;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4282055519) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 15) !== 0)) {
                {
                this.state = 3324;
                this.parameterDeclaration();
                this.state = 3329;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 3325;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 3326;
                    this.parameterDeclaration();
                    }
                    }
                    this.state = 3331;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3334;
            this.match(TrinoSqlParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionSignature(): FunctionSignatureContext {
        let localContext = new FunctionSignatureContext(this.context, this.state);
        this.enterRule(localContext, 246, TrinoSqlParser.RULE_functionSignature);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3336;
            this.functionName();
            this.state = 3337;
            this.match(TrinoSqlParser.T__0);
            this.state = 3346;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4282055519) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 15) !== 0)) {
                {
                this.state = 3338;
                this.parameterDeclaration();
                this.state = 3343;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 3) {
                    {
                    {
                    this.state = 3339;
                    this.match(TrinoSqlParser.T__2);
                    this.state = 3340;
                    this.parameterDeclaration();
                    }
                    }
                    this.state = 3345;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3348;
            this.match(TrinoSqlParser.T__1);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public parameterDeclaration(): ParameterDeclarationContext {
        let localContext = new ParameterDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 248, TrinoSqlParser.RULE_parameterDeclaration);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3351;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 437, this.context) ) {
            case 1:
                {
                this.state = 3350;
                this.identifier();
                }
                break;
            }
            this.state = 3353;
            this.type_(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returnsClause(): ReturnsClauseContext {
        let localContext = new ReturnsClauseContext(this.context, this.state);
        this.enterRule(localContext, 250, TrinoSqlParser.RULE_returnsClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3355;
            this.match(TrinoSqlParser.KW_RETURNS);
            this.state = 3356;
            this.type_(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routineCharacteristic(): RoutineCharacteristicContext {
        let localContext = new RoutineCharacteristicContext(this.context, this.state);
        this.enterRule(localContext, 252, TrinoSqlParser.RULE_routineCharacteristic);
        let _la: number;
        try {
            this.state = 3377;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_LANGUAGE:
                localContext = new LanguageCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3358;
                this.match(TrinoSqlParser.KW_LANGUAGE);
                this.state = 3359;
                this.identifier();
                }
                break;
            case TrinoSqlParser.KW_DETERMINISTIC:
            case TrinoSqlParser.KW_NOT:
                localContext = new DeterministicCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3361;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 182) {
                    {
                    this.state = 3360;
                    this.match(TrinoSqlParser.KW_NOT);
                    }
                }

                this.state = 3363;
                this.match(TrinoSqlParser.KW_DETERMINISTIC);
                }
                break;
            case TrinoSqlParser.KW_RETURNS:
                localContext = new ReturnsNullOnNullInputCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3364;
                this.match(TrinoSqlParser.KW_RETURNS);
                this.state = 3365;
                this.match(TrinoSqlParser.KW_NULL);
                this.state = 3366;
                this.match(TrinoSqlParser.KW_ON);
                this.state = 3367;
                this.match(TrinoSqlParser.KW_NULL);
                this.state = 3368;
                this.match(TrinoSqlParser.KW_INPUT);
                }
                break;
            case TrinoSqlParser.KW_CALLED:
                localContext = new CalledOnNullInputCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3369;
                this.match(TrinoSqlParser.KW_CALLED);
                this.state = 3370;
                this.match(TrinoSqlParser.KW_ON);
                this.state = 3371;
                this.match(TrinoSqlParser.KW_NULL);
                this.state = 3372;
                this.match(TrinoSqlParser.KW_INPUT);
                }
                break;
            case TrinoSqlParser.KW_SECURITY:
                localContext = new SecurityCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3373;
                this.match(TrinoSqlParser.KW_SECURITY);
                this.state = 3374;
                _la = this.tokenStream.LA(1);
                if(!(_la === 72 || _la === 131)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case TrinoSqlParser.KW_COMMENT:
                localContext = new CommentCharacteristicContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3375;
                this.match(TrinoSqlParser.KW_COMMENT);
                this.state = 3376;
                this.string_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public controlStatement(): ControlStatementContext {
        let localContext = new ControlStatementContext(this.context, this.state);
        this.enterRule(localContext, 254, TrinoSqlParser.RULE_controlStatement);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3478;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 451, this.context) ) {
            case 1:
                localContext = new ReturnStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3379;
                this.match(TrinoSqlParser.KW_RETURN);
                this.state = 3380;
                this.valueExpression(0);
                }
                break;
            case 2:
                localContext = new AssignmentStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3381;
                this.match(TrinoSqlParser.KW_SET);
                this.state = 3382;
                this.identifier();
                this.state = 3383;
                this.match(TrinoSqlParser.EQ);
                this.state = 3384;
                this.expression();
                }
                break;
            case 3:
                localContext = new SimpleCaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3386;
                this.match(TrinoSqlParser.KW_CASE);
                this.state = 3387;
                this.expression();
                this.state = 3389;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3388;
                    this.caseStatementWhenClause();
                    }
                    }
                    this.state = 3391;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 300);
                this.state = 3394;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 84) {
                    {
                    this.state = 3393;
                    this.elseClause();
                    }
                }

                this.state = 3396;
                this.match(TrinoSqlParser.KW_END);
                this.state = 3397;
                this.match(TrinoSqlParser.KW_CASE);
                }
                break;
            case 4:
                localContext = new SearchedCaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3399;
                this.match(TrinoSqlParser.KW_CASE);
                this.state = 3401;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3400;
                    this.caseStatementWhenClause();
                    }
                    }
                    this.state = 3403;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 300);
                this.state = 3406;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 84) {
                    {
                    this.state = 3405;
                    this.elseClause();
                    }
                }

                this.state = 3408;
                this.match(TrinoSqlParser.KW_END);
                this.state = 3409;
                this.match(TrinoSqlParser.KW_CASE);
                }
                break;
            case 5:
                localContext = new IfStatementContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3411;
                this.match(TrinoSqlParser.KW_IF);
                this.state = 3412;
                this.expression();
                this.state = 3413;
                this.match(TrinoSqlParser.KW_THEN);
                this.state = 3414;
                this.sqlStatementList();
                this.state = 3418;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 86) {
                    {
                    {
                    this.state = 3415;
                    this.elseIfClause();
                    }
                    }
                    this.state = 3420;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3422;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 84) {
                    {
                    this.state = 3421;
                    this.elseClause();
                    }
                }

                this.state = 3424;
                this.match(TrinoSqlParser.KW_END);
                this.state = 3425;
                this.match(TrinoSqlParser.KW_IF);
                }
                break;
            case 6:
                localContext = new IterateStatementContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3427;
                this.match(TrinoSqlParser.KW_ITERATE);
                this.state = 3428;
                this.identifier();
                }
                break;
            case 7:
                localContext = new LeaveStatementContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3429;
                this.match(TrinoSqlParser.KW_LEAVE);
                this.state = 3430;
                this.identifier();
                }
                break;
            case 8:
                localContext = new CompoundStatementContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3431;
                this.match(TrinoSqlParser.KW_BEGIN);
                this.state = 3437;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 446, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3432;
                        this.variableDeclaration();
                        this.state = 3433;
                        this.match(TrinoSqlParser.SEMICOLON);
                        }
                        }
                    }
                    this.state = 3439;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 446, this.context);
                }
                this.state = 3441;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4286249823) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0) || ((((_la - 332)) & ~0x1F) === 0 && ((1 << (_la - 332)) & 15) !== 0)) {
                    {
                    this.state = 3440;
                    this.sqlStatementList();
                    }
                }

                this.state = 3443;
                this.match(TrinoSqlParser.KW_END);
                }
                break;
            case 9:
                localContext = new LoopStatementContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3447;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 448, this.context) ) {
                case 1:
                    {
                    this.state = 3444;
                    (localContext as LoopStatementContext)._label = this.identifier();
                    this.state = 3445;
                    this.match(TrinoSqlParser.T__9);
                    }
                    break;
                }
                this.state = 3449;
                this.match(TrinoSqlParser.KW_LOOP);
                this.state = 3450;
                this.sqlStatementList();
                this.state = 3451;
                this.match(TrinoSqlParser.KW_END);
                this.state = 3452;
                this.match(TrinoSqlParser.KW_LOOP);
                }
                break;
            case 10:
                localContext = new WhileStatementContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3457;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 449, this.context) ) {
                case 1:
                    {
                    this.state = 3454;
                    (localContext as WhileStatementContext)._label = this.identifier();
                    this.state = 3455;
                    this.match(TrinoSqlParser.T__9);
                    }
                    break;
                }
                this.state = 3459;
                this.match(TrinoSqlParser.KW_WHILE);
                this.state = 3460;
                this.expression();
                this.state = 3461;
                this.match(TrinoSqlParser.KW_DO);
                this.state = 3462;
                this.sqlStatementList();
                this.state = 3463;
                this.match(TrinoSqlParser.KW_END);
                this.state = 3464;
                this.match(TrinoSqlParser.KW_WHILE);
                }
                break;
            case 11:
                localContext = new RepeatStatementContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3469;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 450, this.context) ) {
                case 1:
                    {
                    this.state = 3466;
                    (localContext as RepeatStatementContext)._label = this.identifier();
                    this.state = 3467;
                    this.match(TrinoSqlParser.T__9);
                    }
                    break;
                }
                this.state = 3471;
                this.match(TrinoSqlParser.KW_REPEAT);
                this.state = 3472;
                this.sqlStatementList();
                this.state = 3473;
                this.match(TrinoSqlParser.KW_UNTIL);
                this.state = 3474;
                this.expression();
                this.state = 3475;
                this.match(TrinoSqlParser.KW_END);
                this.state = 3476;
                this.match(TrinoSqlParser.KW_REPEAT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseStatementWhenClause(): CaseStatementWhenClauseContext {
        let localContext = new CaseStatementWhenClauseContext(this.context, this.state);
        this.enterRule(localContext, 256, TrinoSqlParser.RULE_caseStatementWhenClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3480;
            this.match(TrinoSqlParser.KW_WHEN);
            this.state = 3481;
            this.expression();
            this.state = 3482;
            this.match(TrinoSqlParser.KW_THEN);
            this.state = 3483;
            this.sqlStatementList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elseIfClause(): ElseIfClauseContext {
        let localContext = new ElseIfClauseContext(this.context, this.state);
        this.enterRule(localContext, 258, TrinoSqlParser.RULE_elseIfClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3485;
            this.match(TrinoSqlParser.KW_ELSEIF);
            this.state = 3486;
            this.expression();
            this.state = 3487;
            this.match(TrinoSqlParser.KW_THEN);
            this.state = 3488;
            this.sqlStatementList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public elseClause(): ElseClauseContext {
        let localContext = new ElseClauseContext(this.context, this.state);
        this.enterRule(localContext, 260, TrinoSqlParser.RULE_elseClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3490;
            this.match(TrinoSqlParser.KW_ELSE);
            this.state = 3491;
            this.sqlStatementList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableDeclaration(): VariableDeclarationContext {
        let localContext = new VariableDeclarationContext(this.context, this.state);
        this.enterRule(localContext, 262, TrinoSqlParser.RULE_variableDeclaration);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3493;
            this.match(TrinoSqlParser.KW_DECLARE);
            this.state = 3494;
            this.identifier();
            this.state = 3499;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 3) {
                {
                {
                this.state = 3495;
                this.match(TrinoSqlParser.T__2);
                this.state = 3496;
                this.identifier();
                }
                }
                this.state = 3501;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3502;
            this.type_(0);
            this.state = 3505;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 70) {
                {
                this.state = 3503;
                this.match(TrinoSqlParser.KW_DEFAULT);
                this.state = 3504;
                this.valueExpression(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlStatementList(): SqlStatementListContext {
        let localContext = new SqlStatementListContext(this.context, this.state);
        this.enterRule(localContext, 264, TrinoSqlParser.RULE_sqlStatementList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3510;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 3507;
                    this.controlStatement();
                    this.state = 3508;
                    this.match(TrinoSqlParser.SEMICOLON);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3512;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 454, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege(): PrivilegeContext {
        let localContext = new PrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 266, TrinoSqlParser.RULE_privilege);
        try {
            this.state = 3520;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 455, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3514;
                this.match(TrinoSqlParser.KW_CREATE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3515;
                this.match(TrinoSqlParser.KW_SELECT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3516;
                this.match(TrinoSqlParser.KW_DELETE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3517;
                this.match(TrinoSqlParser.KW_INSERT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3518;
                this.match(TrinoSqlParser.KW_UPDATE);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3519;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public entityKind(): EntityKindContext {
        let localContext = new EntityKindContext(this.context, this.state);
        this.enterRule(localContext, 268, TrinoSqlParser.RULE_entityKind);
        try {
            this.state = 3525;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 456, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3522;
                this.match(TrinoSqlParser.KW_TABLE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3523;
                this.match(TrinoSqlParser.KW_SCHEMA);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3524;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantObject(): GrantObjectContext {
        let localContext = new GrantObjectContext(this.context, this.state);
        this.enterRule(localContext, 270, TrinoSqlParser.RULE_grantObject);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3528;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 457, this.context) ) {
            case 1:
                {
                this.state = 3527;
                this.entityKind();
                }
                break;
            }
            this.state = 3530;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableOrViewName(): TableOrViewNameContext {
        let localContext = new TableOrViewNameContext(this.context, this.state);
        this.enterRule(localContext, 272, TrinoSqlParser.RULE_tableOrViewName);
        try {
            this.state = 3534;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 458, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3532;
                this.tableRef();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3533;
                this.viewRef();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableRef(): TableRefContext {
        let localContext = new TableRefContext(this.context, this.state);
        this.enterRule(localContext, 274, TrinoSqlParser.RULE_tableRef);
        try {
            this.state = 3547;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 459, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3536;
                localContext._table = this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3537;
                localContext._schema = this.identifier();
                this.state = 3538;
                this.match(TrinoSqlParser.T__3);
                this.state = 3539;
                localContext._table = this.identifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3541;
                localContext._catalog = this.identifier();
                this.state = 3542;
                this.match(TrinoSqlParser.T__3);
                this.state = 3543;
                localContext._schema = this.identifier();
                this.state = 3544;
                this.match(TrinoSqlParser.T__3);
                this.state = 3545;
                localContext._table = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableNameCreate(): TableNameCreateContext {
        let localContext = new TableNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 276, TrinoSqlParser.RULE_tableNameCreate);
        try {
            this.state = 3560;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 460, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3549;
                localContext._table = this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3550;
                localContext._schema = this.identifier();
                this.state = 3551;
                this.match(TrinoSqlParser.T__3);
                this.state = 3552;
                localContext._table = this.identifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3554;
                localContext._catalog = this.identifier();
                this.state = 3555;
                this.match(TrinoSqlParser.T__3);
                this.state = 3556;
                localContext._schema = this.identifier();
                this.state = 3557;
                this.match(TrinoSqlParser.T__3);
                this.state = 3558;
                localContext._table = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewRef(): ViewRefContext {
        let localContext = new ViewRefContext(this.context, this.state);
        this.enterRule(localContext, 278, TrinoSqlParser.RULE_viewRef);
        try {
            this.state = 3573;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 461, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3562;
                localContext._view = this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3563;
                localContext._schema = this.identifier();
                this.state = 3564;
                this.match(TrinoSqlParser.T__3);
                this.state = 3565;
                localContext._view = this.identifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3567;
                localContext._catalog = this.identifier();
                this.state = 3568;
                this.match(TrinoSqlParser.T__3);
                this.state = 3569;
                localContext._schema = this.identifier();
                this.state = 3570;
                this.match(TrinoSqlParser.T__3);
                this.state = 3571;
                localContext._view = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewNameCreate(): ViewNameCreateContext {
        let localContext = new ViewNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 280, TrinoSqlParser.RULE_viewNameCreate);
        try {
            this.state = 3586;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 462, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3575;
                localContext._view = this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3576;
                localContext._schema = this.identifier();
                this.state = 3577;
                this.match(TrinoSqlParser.T__3);
                this.state = 3578;
                localContext._view = this.identifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3580;
                localContext._catalog = this.identifier();
                this.state = 3581;
                this.match(TrinoSqlParser.T__3);
                this.state = 3582;
                localContext._schema = this.identifier();
                this.state = 3583;
                this.match(TrinoSqlParser.T__3);
                this.state = 3584;
                localContext._view = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schemaRef(): SchemaRefContext {
        let localContext = new SchemaRefContext(this.context, this.state);
        this.enterRule(localContext, 282, TrinoSqlParser.RULE_schemaRef);
        try {
            this.state = 3593;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 463, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3588;
                localContext._schema = this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3589;
                localContext._catalog = this.identifier();
                this.state = 3590;
                this.match(TrinoSqlParser.T__3);
                this.state = 3591;
                localContext._schema = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schemaNameCreate(): SchemaNameCreateContext {
        let localContext = new SchemaNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 284, TrinoSqlParser.RULE_schemaNameCreate);
        try {
            this.state = 3600;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 464, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3595;
                localContext._schema = this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3596;
                localContext._catalog = this.identifier();
                this.state = 3597;
                this.match(TrinoSqlParser.T__3);
                this.state = 3598;
                localContext._schema = this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public catalogRef(): CatalogRefContext {
        let localContext = new CatalogRefContext(this.context, this.state);
        this.enterRule(localContext, 286, TrinoSqlParser.RULE_catalogRef);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3602;
            localContext._catalog = this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public catalogNameCreate(): CatalogNameCreateContext {
        let localContext = new CatalogNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 288, TrinoSqlParser.RULE_catalogNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3604;
            localContext._catalog = this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionName(): FunctionNameContext {
        let localContext = new FunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 290, TrinoSqlParser.RULE_functionName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3606;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionNameCreate(): FunctionNameCreateContext {
        let localContext = new FunctionNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 292, TrinoSqlParser.RULE_functionNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3608;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnRef(): ColumnRefContext {
        let localContext = new ColumnRefContext(this.context, this.state);
        this.enterRule(localContext, 294, TrinoSqlParser.RULE_columnRef);
        try {
            this.state = 3612;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 465, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3610;
                this.qualifiedName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3611;
                if (!(this.shouldMatchEmpty())) {
                    throw this.createFailedPredicateException("this.shouldMatchEmpty()");
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnName(): ColumnNameContext {
        let localContext = new ColumnNameContext(this.context, this.state);
        this.enterRule(localContext, 296, TrinoSqlParser.RULE_columnName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3614;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        let localContext = new ColumnNameCreateContext(this.context, this.state);
        this.enterRule(localContext, 298, TrinoSqlParser.RULE_columnNameCreate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3616;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedName(): QualifiedNameContext {
        let localContext = new QualifiedNameContext(this.context, this.state);
        this.enterRule(localContext, 300, TrinoSqlParser.RULE_qualifiedName);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3618;
            this.identifier();
            this.state = 3623;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 466, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3619;
                    this.match(TrinoSqlParser.T__3);
                    this.state = 3620;
                    this.identifier();
                    }
                    }
                }
                this.state = 3625;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 466, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryPeriod(): QueryPeriodContext {
        let localContext = new QueryPeriodContext(this.context, this.state);
        this.enterRule(localContext, 302, TrinoSqlParser.RULE_queryPeriod);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3626;
            this.match(TrinoSqlParser.KW_FOR);
            this.state = 3627;
            this.rangeType();
            this.state = 3628;
            this.match(TrinoSqlParser.KW_AS);
            this.state = 3629;
            this.match(TrinoSqlParser.KW_OF);
            this.state = 3630;
            localContext._end = this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rangeType(): RangeTypeContext {
        let localContext = new RangeTypeContext(this.context, this.state);
        this.enterRule(localContext, 304, TrinoSqlParser.RULE_rangeType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3632;
            _la = this.tokenStream.LA(1);
            if(!(_la === 268 || _la === 298)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantor(): GrantorContext {
        let localContext = new GrantorContext(this.context, this.state);
        this.enterRule(localContext, 306, TrinoSqlParser.RULE_grantor);
        try {
            this.state = 3637;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_ABSENT:
            case TrinoSqlParser.KW_ADD:
            case TrinoSqlParser.KW_ADMIN:
            case TrinoSqlParser.KW_AFTER:
            case TrinoSqlParser.KW_ALL:
            case TrinoSqlParser.KW_ANALYZE:
            case TrinoSqlParser.KW_ANY:
            case TrinoSqlParser.KW_ARRAY:
            case TrinoSqlParser.KW_ASC:
            case TrinoSqlParser.KW_AT:
            case TrinoSqlParser.KW_AUTHORIZATION:
            case TrinoSqlParser.KW_BEGIN:
            case TrinoSqlParser.KW_BERNOULLI:
            case TrinoSqlParser.KW_BOTH:
            case TrinoSqlParser.KW_CALL:
            case TrinoSqlParser.KW_CALLED:
            case TrinoSqlParser.KW_CASCADE:
            case TrinoSqlParser.KW_CATALOG:
            case TrinoSqlParser.KW_CATALOGS:
            case TrinoSqlParser.KW_COLUMN:
            case TrinoSqlParser.KW_COLUMNS:
            case TrinoSqlParser.KW_COMMENT:
            case TrinoSqlParser.KW_COMMIT:
            case TrinoSqlParser.KW_COMMITTED:
            case TrinoSqlParser.KW_CONDITIONAL:
            case TrinoSqlParser.KW_COUNT:
            case TrinoSqlParser.KW_COPARTITION:
            case TrinoSqlParser.KW_CURRENT:
            case TrinoSqlParser.KW_DATA:
            case TrinoSqlParser.KW_DATE:
            case TrinoSqlParser.KW_DAY:
            case TrinoSqlParser.KW_DECLARE:
            case TrinoSqlParser.KW_DEFAULT:
            case TrinoSqlParser.KW_DEFINE:
            case TrinoSqlParser.KW_DEFINER:
            case TrinoSqlParser.KW_DENY:
            case TrinoSqlParser.KW_DESC:
            case TrinoSqlParser.KW_DESCRIPTOR:
            case TrinoSqlParser.KW_DETERMINISTIC:
            case TrinoSqlParser.KW_DISTRIBUTED:
            case TrinoSqlParser.KW_DO:
            case TrinoSqlParser.KW_DOUBLE:
            case TrinoSqlParser.KW_EMPTY:
            case TrinoSqlParser.KW_ELSEIF:
            case TrinoSqlParser.KW_ENCODING:
            case TrinoSqlParser.KW_ERROR:
            case TrinoSqlParser.KW_EXCLUDING:
            case TrinoSqlParser.KW_EXPLAIN:
            case TrinoSqlParser.KW_FETCH:
            case TrinoSqlParser.KW_FILTER:
            case TrinoSqlParser.KW_FINAL:
            case TrinoSqlParser.KW_FIRST:
            case TrinoSqlParser.KW_FOLLOWING:
            case TrinoSqlParser.KW_FORMAT:
            case TrinoSqlParser.KW_FUNCTION:
            case TrinoSqlParser.KW_FUNCTIONS:
            case TrinoSqlParser.KW_GRACE:
            case TrinoSqlParser.KW_GRANT:
            case TrinoSqlParser.KW_GRANTED:
            case TrinoSqlParser.KW_GRANTS:
            case TrinoSqlParser.KW_GRAPHVIZ:
            case TrinoSqlParser.KW_GROUPS:
            case TrinoSqlParser.KW_HOUR:
            case TrinoSqlParser.KW_IF:
            case TrinoSqlParser.KW_IGNORE:
            case TrinoSqlParser.KW_IMMEDIATE:
            case TrinoSqlParser.KW_INCLUDING:
            case TrinoSqlParser.KW_INITIAL:
            case TrinoSqlParser.KW_INPUT:
            case TrinoSqlParser.KW_INTERVAL:
            case TrinoSqlParser.KW_INVOKER:
            case TrinoSqlParser.KW_IO:
            case TrinoSqlParser.KW_ISOLATION:
            case TrinoSqlParser.KW_ITERATE:
            case TrinoSqlParser.KW_JSON:
            case TrinoSqlParser.KW_KEEP:
            case TrinoSqlParser.KW_KEY:
            case TrinoSqlParser.KW_KEYS:
            case TrinoSqlParser.KW_LANGUAGE:
            case TrinoSqlParser.KW_LAST:
            case TrinoSqlParser.KW_LATERAL:
            case TrinoSqlParser.KW_LEADING:
            case TrinoSqlParser.KW_LEAVE:
            case TrinoSqlParser.KW_LEVEL:
            case TrinoSqlParser.KW_LIMIT:
            case TrinoSqlParser.KW_LOCAL:
            case TrinoSqlParser.KW_LOGICAL:
            case TrinoSqlParser.KW_LOOP:
            case TrinoSqlParser.KW_MAP:
            case TrinoSqlParser.KW_MATCH:
            case TrinoSqlParser.KW_MATCHED:
            case TrinoSqlParser.KW_MATCHES:
            case TrinoSqlParser.KW_MATCH_RECOGNIZE:
            case TrinoSqlParser.KW_MATERIALIZED:
            case TrinoSqlParser.KW_MEASURES:
            case TrinoSqlParser.KW_MERGE:
            case TrinoSqlParser.KW_MINUTE:
            case TrinoSqlParser.KW_MONTH:
            case TrinoSqlParser.KW_NESTED:
            case TrinoSqlParser.KW_NEXT:
            case TrinoSqlParser.KW_NFC:
            case TrinoSqlParser.KW_NFD:
            case TrinoSqlParser.KW_NFKC:
            case TrinoSqlParser.KW_NFKD:
            case TrinoSqlParser.KW_NO:
            case TrinoSqlParser.KW_NONE:
            case TrinoSqlParser.KW_NULLIF:
            case TrinoSqlParser.KW_NULLS:
            case TrinoSqlParser.KW_OBJECT:
            case TrinoSqlParser.KW_OF:
            case TrinoSqlParser.KW_OFFSET:
            case TrinoSqlParser.KW_OMIT:
            case TrinoSqlParser.KW_ONE:
            case TrinoSqlParser.KW_ONLY:
            case TrinoSqlParser.KW_OPTION:
            case TrinoSqlParser.KW_ORDINALITY:
            case TrinoSqlParser.KW_OUTPUT:
            case TrinoSqlParser.KW_OVER:
            case TrinoSqlParser.KW_OVERFLOW:
            case TrinoSqlParser.KW_PARTITION:
            case TrinoSqlParser.KW_PARTITIONS:
            case TrinoSqlParser.KW_PASSING:
            case TrinoSqlParser.KW_PAST:
            case TrinoSqlParser.KW_PATH:
            case TrinoSqlParser.KW_PATTERN:
            case TrinoSqlParser.KW_PER:
            case TrinoSqlParser.KW_PERIOD:
            case TrinoSqlParser.KW_PERMUTE:
            case TrinoSqlParser.KW_PLAN:
            case TrinoSqlParser.KW_POSITION:
            case TrinoSqlParser.KW_PRECEDING:
            case TrinoSqlParser.KW_PRECISION:
            case TrinoSqlParser.KW_PRIVILEGES:
            case TrinoSqlParser.KW_PROPERTIES:
            case TrinoSqlParser.KW_PRUNE:
            case TrinoSqlParser.KW_QUOTES:
            case TrinoSqlParser.KW_RANGE:
            case TrinoSqlParser.KW_READ:
            case TrinoSqlParser.KW_REFRESH:
            case TrinoSqlParser.KW_RENAME:
            case TrinoSqlParser.KW_REPEAT:
            case TrinoSqlParser.KW_REPEATABLE:
            case TrinoSqlParser.KW_REPLACE:
            case TrinoSqlParser.KW_RESET:
            case TrinoSqlParser.KW_RESPECT:
            case TrinoSqlParser.KW_RESTRICT:
            case TrinoSqlParser.KW_RETURN:
            case TrinoSqlParser.KW_RETURNING:
            case TrinoSqlParser.KW_RETURNS:
            case TrinoSqlParser.KW_REVOKE:
            case TrinoSqlParser.KW_ROLE:
            case TrinoSqlParser.KW_ROLES:
            case TrinoSqlParser.KW_ROLLBACK:
            case TrinoSqlParser.KW_ROW:
            case TrinoSqlParser.KW_ROWS:
            case TrinoSqlParser.KW_RUNNING:
            case TrinoSqlParser.KW_SCALAR:
            case TrinoSqlParser.KW_SCHEMA:
            case TrinoSqlParser.KW_SCHEMAS:
            case TrinoSqlParser.KW_SECOND:
            case TrinoSqlParser.KW_SECURITY:
            case TrinoSqlParser.KW_SEEK:
            case TrinoSqlParser.KW_SERIALIZABLE:
            case TrinoSqlParser.KW_SESSION:
            case TrinoSqlParser.KW_SET:
            case TrinoSqlParser.KW_SETS:
            case TrinoSqlParser.KW_SHOW:
            case TrinoSqlParser.KW_SOME:
            case TrinoSqlParser.KW_START:
            case TrinoSqlParser.KW_STATS:
            case TrinoSqlParser.KW_SUBSET:
            case TrinoSqlParser.KW_SUBSTRING:
            case TrinoSqlParser.KW_SYSTEM:
            case TrinoSqlParser.KW_TABLES:
            case TrinoSqlParser.KW_TABLESAMPLE:
            case TrinoSqlParser.KW_TEXT:
            case TrinoSqlParser.KW_TEXT_STRING:
            case TrinoSqlParser.KW_TIES:
            case TrinoSqlParser.KW_TIME:
            case TrinoSqlParser.KW_TIMESTAMP:
            case TrinoSqlParser.KW_TO:
            case TrinoSqlParser.KW_TRAILING:
            case TrinoSqlParser.KW_TRANSACTION:
            case TrinoSqlParser.KW_TRUNCATE:
            case TrinoSqlParser.KW_TRY_CAST:
            case TrinoSqlParser.KW_TYPE:
            case TrinoSqlParser.KW_UNBOUNDED:
            case TrinoSqlParser.KW_UNCOMMITTED:
            case TrinoSqlParser.KW_UNCONDITIONAL:
            case TrinoSqlParser.KW_UNIQUE:
            case TrinoSqlParser.KW_UNKNOWN:
            case TrinoSqlParser.KW_UNMATCHED:
            case TrinoSqlParser.KW_UNTIL:
            case TrinoSqlParser.KW_UPDATE:
            case TrinoSqlParser.KW_USE:
            case TrinoSqlParser.KW_USER:
            case TrinoSqlParser.KW_UTF16:
            case TrinoSqlParser.KW_UTF32:
            case TrinoSqlParser.KW_UTF8:
            case TrinoSqlParser.KW_VALIDATE:
            case TrinoSqlParser.KW_VALUE:
            case TrinoSqlParser.KW_VERBOSE:
            case TrinoSqlParser.KW_VERSION:
            case TrinoSqlParser.KW_VIEW:
            case TrinoSqlParser.KW_WHILE:
            case TrinoSqlParser.KW_WINDOW:
            case TrinoSqlParser.KW_WITHIN:
            case TrinoSqlParser.KW_WITHOUT:
            case TrinoSqlParser.KW_WORK:
            case TrinoSqlParser.KW_WRAPPER:
            case TrinoSqlParser.KW_WRITE:
            case TrinoSqlParser.KW_YEAR:
            case TrinoSqlParser.KW_ZONE:
            case TrinoSqlParser.IDENTIFIER:
            case TrinoSqlParser.DIGIT_IDENTIFIER:
            case TrinoSqlParser.QUOTED_IDENTIFIER:
            case TrinoSqlParser.BACKQUOTED_IDENTIFIER:
                localContext = new SpecifiedPrincipalContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3634;
                this.principal();
                }
                break;
            case TrinoSqlParser.KW_CURRENT_USER:
                localContext = new CurrentUserGrantorContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3635;
                this.match(TrinoSqlParser.KW_CURRENT_USER);
                }
                break;
            case TrinoSqlParser.KW_CURRENT_ROLE:
                localContext = new CurrentRoleGrantorContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3636;
                this.match(TrinoSqlParser.KW_CURRENT_ROLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public principal(): PrincipalContext {
        let localContext = new PrincipalContext(this.context, this.state);
        this.enterRule(localContext, 308, TrinoSqlParser.RULE_principal);
        try {
            this.state = 3644;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 468, this.context) ) {
            case 1:
                localContext = new UnspecifiedPrincipalContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3639;
                this.identifier();
                }
                break;
            case 2:
                localContext = new UserPrincipalContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3640;
                this.match(TrinoSqlParser.KW_USER);
                this.state = 3641;
                this.identifier();
                }
                break;
            case 3:
                localContext = new RolePrincipalContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3642;
                this.match(TrinoSqlParser.KW_ROLE);
                this.state = 3643;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roles(): RolesContext {
        let localContext = new RolesContext(this.context, this.state);
        this.enterRule(localContext, 310, TrinoSqlParser.RULE_roles);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3646;
            this.identifier();
            this.state = 3651;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 3) {
                {
                {
                this.state = 3647;
                this.match(TrinoSqlParser.T__2);
                this.state = 3648;
                this.identifier();
                }
                }
                this.state = 3653;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeOrRole(): PrivilegeOrRoleContext {
        let localContext = new PrivilegeOrRoleContext(this.context, this.state);
        this.enterRule(localContext, 312, TrinoSqlParser.RULE_privilegeOrRole);
        try {
            this.state = 3661;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 470, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3654;
                this.match(TrinoSqlParser.KW_CREATE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3655;
                this.match(TrinoSqlParser.KW_SELECT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3656;
                this.match(TrinoSqlParser.KW_DELETE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3657;
                this.match(TrinoSqlParser.KW_INSERT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3658;
                this.match(TrinoSqlParser.KW_UPDATE);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3659;
                this.match(TrinoSqlParser.KW_EXECUTE);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3660;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 314, TrinoSqlParser.RULE_identifier);
        try {
            this.state = 3668;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.IDENTIFIER:
                localContext = new UnquotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3663;
                this.match(TrinoSqlParser.IDENTIFIER);
                }
                break;
            case TrinoSqlParser.QUOTED_IDENTIFIER:
                localContext = new QuotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3664;
                this.match(TrinoSqlParser.QUOTED_IDENTIFIER);
                }
                break;
            case TrinoSqlParser.KW_ABSENT:
            case TrinoSqlParser.KW_ADD:
            case TrinoSqlParser.KW_ADMIN:
            case TrinoSqlParser.KW_AFTER:
            case TrinoSqlParser.KW_ALL:
            case TrinoSqlParser.KW_ANALYZE:
            case TrinoSqlParser.KW_ANY:
            case TrinoSqlParser.KW_ARRAY:
            case TrinoSqlParser.KW_ASC:
            case TrinoSqlParser.KW_AT:
            case TrinoSqlParser.KW_AUTHORIZATION:
            case TrinoSqlParser.KW_BEGIN:
            case TrinoSqlParser.KW_BERNOULLI:
            case TrinoSqlParser.KW_BOTH:
            case TrinoSqlParser.KW_CALL:
            case TrinoSqlParser.KW_CALLED:
            case TrinoSqlParser.KW_CASCADE:
            case TrinoSqlParser.KW_CATALOG:
            case TrinoSqlParser.KW_CATALOGS:
            case TrinoSqlParser.KW_COLUMN:
            case TrinoSqlParser.KW_COLUMNS:
            case TrinoSqlParser.KW_COMMENT:
            case TrinoSqlParser.KW_COMMIT:
            case TrinoSqlParser.KW_COMMITTED:
            case TrinoSqlParser.KW_CONDITIONAL:
            case TrinoSqlParser.KW_COUNT:
            case TrinoSqlParser.KW_COPARTITION:
            case TrinoSqlParser.KW_CURRENT:
            case TrinoSqlParser.KW_DATA:
            case TrinoSqlParser.KW_DATE:
            case TrinoSqlParser.KW_DAY:
            case TrinoSqlParser.KW_DECLARE:
            case TrinoSqlParser.KW_DEFAULT:
            case TrinoSqlParser.KW_DEFINE:
            case TrinoSqlParser.KW_DEFINER:
            case TrinoSqlParser.KW_DENY:
            case TrinoSqlParser.KW_DESC:
            case TrinoSqlParser.KW_DESCRIPTOR:
            case TrinoSqlParser.KW_DETERMINISTIC:
            case TrinoSqlParser.KW_DISTRIBUTED:
            case TrinoSqlParser.KW_DO:
            case TrinoSqlParser.KW_DOUBLE:
            case TrinoSqlParser.KW_EMPTY:
            case TrinoSqlParser.KW_ELSEIF:
            case TrinoSqlParser.KW_ENCODING:
            case TrinoSqlParser.KW_ERROR:
            case TrinoSqlParser.KW_EXCLUDING:
            case TrinoSqlParser.KW_EXPLAIN:
            case TrinoSqlParser.KW_FETCH:
            case TrinoSqlParser.KW_FILTER:
            case TrinoSqlParser.KW_FINAL:
            case TrinoSqlParser.KW_FIRST:
            case TrinoSqlParser.KW_FOLLOWING:
            case TrinoSqlParser.KW_FORMAT:
            case TrinoSqlParser.KW_FUNCTION:
            case TrinoSqlParser.KW_FUNCTIONS:
            case TrinoSqlParser.KW_GRACE:
            case TrinoSqlParser.KW_GRANT:
            case TrinoSqlParser.KW_GRANTED:
            case TrinoSqlParser.KW_GRANTS:
            case TrinoSqlParser.KW_GRAPHVIZ:
            case TrinoSqlParser.KW_GROUPS:
            case TrinoSqlParser.KW_HOUR:
            case TrinoSqlParser.KW_IF:
            case TrinoSqlParser.KW_IGNORE:
            case TrinoSqlParser.KW_IMMEDIATE:
            case TrinoSqlParser.KW_INCLUDING:
            case TrinoSqlParser.KW_INITIAL:
            case TrinoSqlParser.KW_INPUT:
            case TrinoSqlParser.KW_INTERVAL:
            case TrinoSqlParser.KW_INVOKER:
            case TrinoSqlParser.KW_IO:
            case TrinoSqlParser.KW_ISOLATION:
            case TrinoSqlParser.KW_ITERATE:
            case TrinoSqlParser.KW_JSON:
            case TrinoSqlParser.KW_KEEP:
            case TrinoSqlParser.KW_KEY:
            case TrinoSqlParser.KW_KEYS:
            case TrinoSqlParser.KW_LANGUAGE:
            case TrinoSqlParser.KW_LAST:
            case TrinoSqlParser.KW_LATERAL:
            case TrinoSqlParser.KW_LEADING:
            case TrinoSqlParser.KW_LEAVE:
            case TrinoSqlParser.KW_LEVEL:
            case TrinoSqlParser.KW_LIMIT:
            case TrinoSqlParser.KW_LOCAL:
            case TrinoSqlParser.KW_LOGICAL:
            case TrinoSqlParser.KW_LOOP:
            case TrinoSqlParser.KW_MAP:
            case TrinoSqlParser.KW_MATCH:
            case TrinoSqlParser.KW_MATCHED:
            case TrinoSqlParser.KW_MATCHES:
            case TrinoSqlParser.KW_MATCH_RECOGNIZE:
            case TrinoSqlParser.KW_MATERIALIZED:
            case TrinoSqlParser.KW_MEASURES:
            case TrinoSqlParser.KW_MERGE:
            case TrinoSqlParser.KW_MINUTE:
            case TrinoSqlParser.KW_MONTH:
            case TrinoSqlParser.KW_NESTED:
            case TrinoSqlParser.KW_NEXT:
            case TrinoSqlParser.KW_NFC:
            case TrinoSqlParser.KW_NFD:
            case TrinoSqlParser.KW_NFKC:
            case TrinoSqlParser.KW_NFKD:
            case TrinoSqlParser.KW_NO:
            case TrinoSqlParser.KW_NONE:
            case TrinoSqlParser.KW_NULLIF:
            case TrinoSqlParser.KW_NULLS:
            case TrinoSqlParser.KW_OBJECT:
            case TrinoSqlParser.KW_OF:
            case TrinoSqlParser.KW_OFFSET:
            case TrinoSqlParser.KW_OMIT:
            case TrinoSqlParser.KW_ONE:
            case TrinoSqlParser.KW_ONLY:
            case TrinoSqlParser.KW_OPTION:
            case TrinoSqlParser.KW_ORDINALITY:
            case TrinoSqlParser.KW_OUTPUT:
            case TrinoSqlParser.KW_OVER:
            case TrinoSqlParser.KW_OVERFLOW:
            case TrinoSqlParser.KW_PARTITION:
            case TrinoSqlParser.KW_PARTITIONS:
            case TrinoSqlParser.KW_PASSING:
            case TrinoSqlParser.KW_PAST:
            case TrinoSqlParser.KW_PATH:
            case TrinoSqlParser.KW_PATTERN:
            case TrinoSqlParser.KW_PER:
            case TrinoSqlParser.KW_PERIOD:
            case TrinoSqlParser.KW_PERMUTE:
            case TrinoSqlParser.KW_PLAN:
            case TrinoSqlParser.KW_POSITION:
            case TrinoSqlParser.KW_PRECEDING:
            case TrinoSqlParser.KW_PRECISION:
            case TrinoSqlParser.KW_PRIVILEGES:
            case TrinoSqlParser.KW_PROPERTIES:
            case TrinoSqlParser.KW_PRUNE:
            case TrinoSqlParser.KW_QUOTES:
            case TrinoSqlParser.KW_RANGE:
            case TrinoSqlParser.KW_READ:
            case TrinoSqlParser.KW_REFRESH:
            case TrinoSqlParser.KW_RENAME:
            case TrinoSqlParser.KW_REPEAT:
            case TrinoSqlParser.KW_REPEATABLE:
            case TrinoSqlParser.KW_REPLACE:
            case TrinoSqlParser.KW_RESET:
            case TrinoSqlParser.KW_RESPECT:
            case TrinoSqlParser.KW_RESTRICT:
            case TrinoSqlParser.KW_RETURN:
            case TrinoSqlParser.KW_RETURNING:
            case TrinoSqlParser.KW_RETURNS:
            case TrinoSqlParser.KW_REVOKE:
            case TrinoSqlParser.KW_ROLE:
            case TrinoSqlParser.KW_ROLES:
            case TrinoSqlParser.KW_ROLLBACK:
            case TrinoSqlParser.KW_ROW:
            case TrinoSqlParser.KW_ROWS:
            case TrinoSqlParser.KW_RUNNING:
            case TrinoSqlParser.KW_SCALAR:
            case TrinoSqlParser.KW_SCHEMA:
            case TrinoSqlParser.KW_SCHEMAS:
            case TrinoSqlParser.KW_SECOND:
            case TrinoSqlParser.KW_SECURITY:
            case TrinoSqlParser.KW_SEEK:
            case TrinoSqlParser.KW_SERIALIZABLE:
            case TrinoSqlParser.KW_SESSION:
            case TrinoSqlParser.KW_SET:
            case TrinoSqlParser.KW_SETS:
            case TrinoSqlParser.KW_SHOW:
            case TrinoSqlParser.KW_SOME:
            case TrinoSqlParser.KW_START:
            case TrinoSqlParser.KW_STATS:
            case TrinoSqlParser.KW_SUBSET:
            case TrinoSqlParser.KW_SUBSTRING:
            case TrinoSqlParser.KW_SYSTEM:
            case TrinoSqlParser.KW_TABLES:
            case TrinoSqlParser.KW_TABLESAMPLE:
            case TrinoSqlParser.KW_TEXT:
            case TrinoSqlParser.KW_TEXT_STRING:
            case TrinoSqlParser.KW_TIES:
            case TrinoSqlParser.KW_TIME:
            case TrinoSqlParser.KW_TIMESTAMP:
            case TrinoSqlParser.KW_TO:
            case TrinoSqlParser.KW_TRAILING:
            case TrinoSqlParser.KW_TRANSACTION:
            case TrinoSqlParser.KW_TRUNCATE:
            case TrinoSqlParser.KW_TRY_CAST:
            case TrinoSqlParser.KW_TYPE:
            case TrinoSqlParser.KW_UNBOUNDED:
            case TrinoSqlParser.KW_UNCOMMITTED:
            case TrinoSqlParser.KW_UNCONDITIONAL:
            case TrinoSqlParser.KW_UNIQUE:
            case TrinoSqlParser.KW_UNKNOWN:
            case TrinoSqlParser.KW_UNMATCHED:
            case TrinoSqlParser.KW_UNTIL:
            case TrinoSqlParser.KW_UPDATE:
            case TrinoSqlParser.KW_USE:
            case TrinoSqlParser.KW_USER:
            case TrinoSqlParser.KW_UTF16:
            case TrinoSqlParser.KW_UTF32:
            case TrinoSqlParser.KW_UTF8:
            case TrinoSqlParser.KW_VALIDATE:
            case TrinoSqlParser.KW_VALUE:
            case TrinoSqlParser.KW_VERBOSE:
            case TrinoSqlParser.KW_VERSION:
            case TrinoSqlParser.KW_VIEW:
            case TrinoSqlParser.KW_WHILE:
            case TrinoSqlParser.KW_WINDOW:
            case TrinoSqlParser.KW_WITHIN:
            case TrinoSqlParser.KW_WITHOUT:
            case TrinoSqlParser.KW_WORK:
            case TrinoSqlParser.KW_WRAPPER:
            case TrinoSqlParser.KW_WRITE:
            case TrinoSqlParser.KW_YEAR:
            case TrinoSqlParser.KW_ZONE:
                localContext = new UnquotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3665;
                this.nonReserved();
                }
                break;
            case TrinoSqlParser.BACKQUOTED_IDENTIFIER:
                localContext = new BackQuotedIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3666;
                this.match(TrinoSqlParser.BACKQUOTED_IDENTIFIER);
                }
                break;
            case TrinoSqlParser.DIGIT_IDENTIFIER:
                localContext = new DigitIdentifierContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3667;
                this.match(TrinoSqlParser.DIGIT_IDENTIFIER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public number_(): NumberContext {
        let localContext = new NumberContext(this.context, this.state);
        this.enterRule(localContext, 316, TrinoSqlParser.RULE_number);
        let _la: number;
        try {
            this.state = 3682;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 475, this.context) ) {
            case 1:
                localContext = new DecimalLiteralContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3671;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 319) {
                    {
                    this.state = 3670;
                    this.match(TrinoSqlParser.MINUS);
                    }
                }

                this.state = 3673;
                this.match(TrinoSqlParser.DECIMAL_VALUE);
                }
                break;
            case 2:
                localContext = new DoubleLiteralContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3675;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 319) {
                    {
                    this.state = 3674;
                    this.match(TrinoSqlParser.MINUS);
                    }
                }

                this.state = 3677;
                this.match(TrinoSqlParser.DOUBLE_VALUE);
                }
                break;
            case 3:
                localContext = new IntegerLiteralContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3679;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 319) {
                    {
                    this.state = 3678;
                    this.match(TrinoSqlParser.MINUS);
                    }
                }

                this.state = 3681;
                this.match(TrinoSqlParser.INTEGER_VALUE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public authorizationUser(): AuthorizationUserContext {
        let localContext = new AuthorizationUserContext(this.context, this.state);
        this.enterRule(localContext, 318, TrinoSqlParser.RULE_authorizationUser);
        try {
            this.state = 3686;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case TrinoSqlParser.KW_ABSENT:
            case TrinoSqlParser.KW_ADD:
            case TrinoSqlParser.KW_ADMIN:
            case TrinoSqlParser.KW_AFTER:
            case TrinoSqlParser.KW_ALL:
            case TrinoSqlParser.KW_ANALYZE:
            case TrinoSqlParser.KW_ANY:
            case TrinoSqlParser.KW_ARRAY:
            case TrinoSqlParser.KW_ASC:
            case TrinoSqlParser.KW_AT:
            case TrinoSqlParser.KW_AUTHORIZATION:
            case TrinoSqlParser.KW_BEGIN:
            case TrinoSqlParser.KW_BERNOULLI:
            case TrinoSqlParser.KW_BOTH:
            case TrinoSqlParser.KW_CALL:
            case TrinoSqlParser.KW_CALLED:
            case TrinoSqlParser.KW_CASCADE:
            case TrinoSqlParser.KW_CATALOG:
            case TrinoSqlParser.KW_CATALOGS:
            case TrinoSqlParser.KW_COLUMN:
            case TrinoSqlParser.KW_COLUMNS:
            case TrinoSqlParser.KW_COMMENT:
            case TrinoSqlParser.KW_COMMIT:
            case TrinoSqlParser.KW_COMMITTED:
            case TrinoSqlParser.KW_CONDITIONAL:
            case TrinoSqlParser.KW_COUNT:
            case TrinoSqlParser.KW_COPARTITION:
            case TrinoSqlParser.KW_CURRENT:
            case TrinoSqlParser.KW_DATA:
            case TrinoSqlParser.KW_DATE:
            case TrinoSqlParser.KW_DAY:
            case TrinoSqlParser.KW_DECLARE:
            case TrinoSqlParser.KW_DEFAULT:
            case TrinoSqlParser.KW_DEFINE:
            case TrinoSqlParser.KW_DEFINER:
            case TrinoSqlParser.KW_DENY:
            case TrinoSqlParser.KW_DESC:
            case TrinoSqlParser.KW_DESCRIPTOR:
            case TrinoSqlParser.KW_DETERMINISTIC:
            case TrinoSqlParser.KW_DISTRIBUTED:
            case TrinoSqlParser.KW_DO:
            case TrinoSqlParser.KW_DOUBLE:
            case TrinoSqlParser.KW_EMPTY:
            case TrinoSqlParser.KW_ELSEIF:
            case TrinoSqlParser.KW_ENCODING:
            case TrinoSqlParser.KW_ERROR:
            case TrinoSqlParser.KW_EXCLUDING:
            case TrinoSqlParser.KW_EXPLAIN:
            case TrinoSqlParser.KW_FETCH:
            case TrinoSqlParser.KW_FILTER:
            case TrinoSqlParser.KW_FINAL:
            case TrinoSqlParser.KW_FIRST:
            case TrinoSqlParser.KW_FOLLOWING:
            case TrinoSqlParser.KW_FORMAT:
            case TrinoSqlParser.KW_FUNCTION:
            case TrinoSqlParser.KW_FUNCTIONS:
            case TrinoSqlParser.KW_GRACE:
            case TrinoSqlParser.KW_GRANT:
            case TrinoSqlParser.KW_GRANTED:
            case TrinoSqlParser.KW_GRANTS:
            case TrinoSqlParser.KW_GRAPHVIZ:
            case TrinoSqlParser.KW_GROUPS:
            case TrinoSqlParser.KW_HOUR:
            case TrinoSqlParser.KW_IF:
            case TrinoSqlParser.KW_IGNORE:
            case TrinoSqlParser.KW_IMMEDIATE:
            case TrinoSqlParser.KW_INCLUDING:
            case TrinoSqlParser.KW_INITIAL:
            case TrinoSqlParser.KW_INPUT:
            case TrinoSqlParser.KW_INTERVAL:
            case TrinoSqlParser.KW_INVOKER:
            case TrinoSqlParser.KW_IO:
            case TrinoSqlParser.KW_ISOLATION:
            case TrinoSqlParser.KW_ITERATE:
            case TrinoSqlParser.KW_JSON:
            case TrinoSqlParser.KW_KEEP:
            case TrinoSqlParser.KW_KEY:
            case TrinoSqlParser.KW_KEYS:
            case TrinoSqlParser.KW_LANGUAGE:
            case TrinoSqlParser.KW_LAST:
            case TrinoSqlParser.KW_LATERAL:
            case TrinoSqlParser.KW_LEADING:
            case TrinoSqlParser.KW_LEAVE:
            case TrinoSqlParser.KW_LEVEL:
            case TrinoSqlParser.KW_LIMIT:
            case TrinoSqlParser.KW_LOCAL:
            case TrinoSqlParser.KW_LOGICAL:
            case TrinoSqlParser.KW_LOOP:
            case TrinoSqlParser.KW_MAP:
            case TrinoSqlParser.KW_MATCH:
            case TrinoSqlParser.KW_MATCHED:
            case TrinoSqlParser.KW_MATCHES:
            case TrinoSqlParser.KW_MATCH_RECOGNIZE:
            case TrinoSqlParser.KW_MATERIALIZED:
            case TrinoSqlParser.KW_MEASURES:
            case TrinoSqlParser.KW_MERGE:
            case TrinoSqlParser.KW_MINUTE:
            case TrinoSqlParser.KW_MONTH:
            case TrinoSqlParser.KW_NESTED:
            case TrinoSqlParser.KW_NEXT:
            case TrinoSqlParser.KW_NFC:
            case TrinoSqlParser.KW_NFD:
            case TrinoSqlParser.KW_NFKC:
            case TrinoSqlParser.KW_NFKD:
            case TrinoSqlParser.KW_NO:
            case TrinoSqlParser.KW_NONE:
            case TrinoSqlParser.KW_NULLIF:
            case TrinoSqlParser.KW_NULLS:
            case TrinoSqlParser.KW_OBJECT:
            case TrinoSqlParser.KW_OF:
            case TrinoSqlParser.KW_OFFSET:
            case TrinoSqlParser.KW_OMIT:
            case TrinoSqlParser.KW_ONE:
            case TrinoSqlParser.KW_ONLY:
            case TrinoSqlParser.KW_OPTION:
            case TrinoSqlParser.KW_ORDINALITY:
            case TrinoSqlParser.KW_OUTPUT:
            case TrinoSqlParser.KW_OVER:
            case TrinoSqlParser.KW_OVERFLOW:
            case TrinoSqlParser.KW_PARTITION:
            case TrinoSqlParser.KW_PARTITIONS:
            case TrinoSqlParser.KW_PASSING:
            case TrinoSqlParser.KW_PAST:
            case TrinoSqlParser.KW_PATH:
            case TrinoSqlParser.KW_PATTERN:
            case TrinoSqlParser.KW_PER:
            case TrinoSqlParser.KW_PERIOD:
            case TrinoSqlParser.KW_PERMUTE:
            case TrinoSqlParser.KW_PLAN:
            case TrinoSqlParser.KW_POSITION:
            case TrinoSqlParser.KW_PRECEDING:
            case TrinoSqlParser.KW_PRECISION:
            case TrinoSqlParser.KW_PRIVILEGES:
            case TrinoSqlParser.KW_PROPERTIES:
            case TrinoSqlParser.KW_PRUNE:
            case TrinoSqlParser.KW_QUOTES:
            case TrinoSqlParser.KW_RANGE:
            case TrinoSqlParser.KW_READ:
            case TrinoSqlParser.KW_REFRESH:
            case TrinoSqlParser.KW_RENAME:
            case TrinoSqlParser.KW_REPEAT:
            case TrinoSqlParser.KW_REPEATABLE:
            case TrinoSqlParser.KW_REPLACE:
            case TrinoSqlParser.KW_RESET:
            case TrinoSqlParser.KW_RESPECT:
            case TrinoSqlParser.KW_RESTRICT:
            case TrinoSqlParser.KW_RETURN:
            case TrinoSqlParser.KW_RETURNING:
            case TrinoSqlParser.KW_RETURNS:
            case TrinoSqlParser.KW_REVOKE:
            case TrinoSqlParser.KW_ROLE:
            case TrinoSqlParser.KW_ROLES:
            case TrinoSqlParser.KW_ROLLBACK:
            case TrinoSqlParser.KW_ROW:
            case TrinoSqlParser.KW_ROWS:
            case TrinoSqlParser.KW_RUNNING:
            case TrinoSqlParser.KW_SCALAR:
            case TrinoSqlParser.KW_SCHEMA:
            case TrinoSqlParser.KW_SCHEMAS:
            case TrinoSqlParser.KW_SECOND:
            case TrinoSqlParser.KW_SECURITY:
            case TrinoSqlParser.KW_SEEK:
            case TrinoSqlParser.KW_SERIALIZABLE:
            case TrinoSqlParser.KW_SESSION:
            case TrinoSqlParser.KW_SET:
            case TrinoSqlParser.KW_SETS:
            case TrinoSqlParser.KW_SHOW:
            case TrinoSqlParser.KW_SOME:
            case TrinoSqlParser.KW_START:
            case TrinoSqlParser.KW_STATS:
            case TrinoSqlParser.KW_SUBSET:
            case TrinoSqlParser.KW_SUBSTRING:
            case TrinoSqlParser.KW_SYSTEM:
            case TrinoSqlParser.KW_TABLES:
            case TrinoSqlParser.KW_TABLESAMPLE:
            case TrinoSqlParser.KW_TEXT:
            case TrinoSqlParser.KW_TEXT_STRING:
            case TrinoSqlParser.KW_TIES:
            case TrinoSqlParser.KW_TIME:
            case TrinoSqlParser.KW_TIMESTAMP:
            case TrinoSqlParser.KW_TO:
            case TrinoSqlParser.KW_TRAILING:
            case TrinoSqlParser.KW_TRANSACTION:
            case TrinoSqlParser.KW_TRUNCATE:
            case TrinoSqlParser.KW_TRY_CAST:
            case TrinoSqlParser.KW_TYPE:
            case TrinoSqlParser.KW_UNBOUNDED:
            case TrinoSqlParser.KW_UNCOMMITTED:
            case TrinoSqlParser.KW_UNCONDITIONAL:
            case TrinoSqlParser.KW_UNIQUE:
            case TrinoSqlParser.KW_UNKNOWN:
            case TrinoSqlParser.KW_UNMATCHED:
            case TrinoSqlParser.KW_UNTIL:
            case TrinoSqlParser.KW_UPDATE:
            case TrinoSqlParser.KW_USE:
            case TrinoSqlParser.KW_USER:
            case TrinoSqlParser.KW_UTF16:
            case TrinoSqlParser.KW_UTF32:
            case TrinoSqlParser.KW_UTF8:
            case TrinoSqlParser.KW_VALIDATE:
            case TrinoSqlParser.KW_VALUE:
            case TrinoSqlParser.KW_VERBOSE:
            case TrinoSqlParser.KW_VERSION:
            case TrinoSqlParser.KW_VIEW:
            case TrinoSqlParser.KW_WHILE:
            case TrinoSqlParser.KW_WINDOW:
            case TrinoSqlParser.KW_WITHIN:
            case TrinoSqlParser.KW_WITHOUT:
            case TrinoSqlParser.KW_WORK:
            case TrinoSqlParser.KW_WRAPPER:
            case TrinoSqlParser.KW_WRITE:
            case TrinoSqlParser.KW_YEAR:
            case TrinoSqlParser.KW_ZONE:
            case TrinoSqlParser.IDENTIFIER:
            case TrinoSqlParser.DIGIT_IDENTIFIER:
            case TrinoSqlParser.QUOTED_IDENTIFIER:
            case TrinoSqlParser.BACKQUOTED_IDENTIFIER:
                localContext = new IdentifierUserContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3684;
                this.identifier();
                }
                break;
            case TrinoSqlParser.STRING:
            case TrinoSqlParser.UNICODE_STRING:
                localContext = new StringUserContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3685;
                this.string_();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonReserved(): NonReservedContext {
        let localContext = new NonReservedContext(this.context, this.state);
        this.enterRule(localContext, 320, TrinoSqlParser.RULE_nonReserved);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3688;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & 4282055519) !== 0) || ((((_la - 51)) & ~0x1F) === 0 && ((1 << (_la - 51)) & 3988635683) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2680939671) !== 0) || ((((_la - 118)) & ~0x1F) === 0 && ((1 << (_la - 118)) & 4228606319) !== 0) || ((((_la - 150)) & ~0x1F) === 0 && ((1 << (_la - 150)) & 2143288491) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 3221214143) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290510815) !== 0) || ((((_la - 249)) & ~0x1F) === 0 && ((1 << (_la - 249)) & 4001298431) !== 0) || ((((_la - 282)) & ~0x1F) === 0 && ((1 << (_la - 282)) & 1068744439) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.RuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 23:
            return this.queryTerm_sempred(localContext as QueryTermContext, predIndex);
        case 44:
            return this.relation_sempred(localContext as RelationContext, predIndex);
        case 78:
            return this.booleanExpression_sempred(localContext as BooleanExpressionContext, predIndex);
        case 80:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        case 81:
            return this.primaryExpression_sempred(localContext as PrimaryExpressionContext, predIndex);
        case 101:
            return this.type_sempred(localContext as TypeContext, predIndex);
        case 111:
            return this.rowPattern_sempred(localContext as RowPatternContext, predIndex);
        case 147:
            return this.columnRef_sempred(localContext as ColumnRefContext, predIndex);
        }
        return true;
    }
    private queryTerm_sempred(localContext: QueryTermContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.precpred(this.context, 2);
        case 1:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private relation_sempred(localContext: RelationContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 2:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private booleanExpression_sempred(localContext: BooleanExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 3:
            return this.precpred(this.context, 2);
        case 4:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return this.precpred(this.context, 3);
        case 6:
            return this.precpred(this.context, 2);
        case 7:
            return this.precpred(this.context, 1);
        case 8:
            return this.precpred(this.context, 5);
        }
        return true;
    }
    private primaryExpression_sempred(localContext: PrimaryExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 9:
            return this.precpred(this.context, 24);
        case 10:
            return this.precpred(this.context, 22);
        }
        return true;
    }
    private type_sempred(localContext: TypeContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 11:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private rowPattern_sempred(localContext: RowPatternContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 12:
            return this.precpred(this.context, 2);
        case 13:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private columnRef_sempred(localContext: ColumnRefContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 14:
            return this.shouldMatchEmpty();
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,340,3691,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,1,0,5,0,324,8,0,10,0,12,0,327,9,0,1,0,1,
        0,1,1,1,1,1,2,1,2,3,2,335,8,2,1,3,1,3,3,3,339,8,3,1,4,1,4,3,4,343,
        8,4,1,5,1,5,3,5,347,8,5,1,6,1,6,3,6,351,8,6,1,7,1,7,1,7,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,3,8,364,8,8,1,8,1,8,1,8,1,8,1,8,3,8,371,
        8,8,1,8,1,8,3,8,375,8,8,1,8,1,8,3,8,379,8,8,1,8,1,8,1,8,1,8,3,8,
        385,8,8,1,8,1,8,3,8,389,8,8,1,8,1,8,1,8,1,8,1,8,3,8,396,8,8,1,8,
        1,8,1,8,3,8,401,8,8,1,8,1,8,3,8,405,8,8,1,8,1,8,1,8,1,8,3,8,411,
        8,8,1,8,1,8,3,8,415,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,434,8,8,1,8,1,8,1,8,1,8,3,8,440,
        8,8,1,8,1,8,3,8,444,8,8,1,8,1,8,3,8,448,8,8,1,8,1,8,3,8,452,8,8,
        1,8,1,8,1,8,1,8,1,8,1,8,3,8,460,8,8,1,8,1,8,3,8,464,8,8,1,8,3,8,
        467,8,8,1,8,1,8,1,8,3,8,472,8,8,1,8,1,8,1,8,1,8,3,8,478,8,8,1,8,
        1,8,1,8,1,8,1,8,5,8,485,8,8,10,8,12,8,488,9,8,1,8,1,8,1,8,3,8,493,
        8,8,1,8,1,8,3,8,497,8,8,1,8,1,8,1,8,1,8,3,8,503,8,8,1,8,1,8,1,8,
        1,8,1,8,3,8,510,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,518,8,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,530,8,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,3,8,539,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,548,8,8,1,8,
        1,8,1,8,1,8,3,8,554,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,
        565,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,573,8,8,1,8,1,8,1,8,1,8,1,8,
        1,8,3,8,581,8,8,1,8,1,8,1,8,1,8,1,8,3,8,588,8,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,3,8,598,8,8,1,8,1,8,1,8,1,8,1,8,3,8,605,8,8,1,8,
        1,8,1,8,1,8,1,8,1,8,3,8,613,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,3,8,628,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,661,8,8,10,8,12,8,664,9,8,3,8,666,
        8,8,1,8,3,8,669,8,8,1,8,3,8,672,8,8,1,8,1,8,1,8,1,8,3,8,678,8,8,
        1,8,1,8,1,8,3,8,683,8,8,1,8,1,8,1,8,1,8,1,8,3,8,690,8,8,1,8,1,8,
        1,8,1,8,3,8,696,8,8,1,8,1,8,3,8,700,8,8,1,8,1,8,3,8,704,8,8,1,8,
        1,8,1,8,1,8,1,8,1,8,3,8,712,8,8,1,8,1,8,1,8,1,8,3,8,718,8,8,1,8,
        1,8,3,8,722,8,8,1,8,1,8,3,8,726,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,3,8,740,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,748,
        8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,3,8,767,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,790,8,8,10,8,12,8,793,
        9,8,3,8,795,8,8,1,8,1,8,1,8,1,8,1,8,3,8,802,8,8,1,8,1,8,1,8,1,8,
        1,8,3,8,809,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,818,8,8,1,8,1,8,
        3,8,822,8,8,1,8,1,8,1,8,1,8,1,8,3,8,829,8,8,1,8,1,8,1,8,1,8,5,8,
        835,8,8,10,8,12,8,838,9,8,1,8,1,8,1,8,1,8,5,8,844,8,8,10,8,12,8,
        847,9,8,1,8,1,8,1,8,3,8,852,8,8,1,8,1,8,1,8,3,8,857,8,8,1,8,1,8,
        3,8,861,8,8,1,8,1,8,1,8,1,8,5,8,867,8,8,10,8,12,8,870,9,8,1,8,1,
        8,3,8,874,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,883,8,8,1,8,1,8,1,
        8,1,8,3,8,889,8,8,1,8,1,8,1,8,5,8,894,8,8,10,8,12,8,897,9,8,1,8,
        1,8,1,8,1,8,5,8,903,8,8,10,8,12,8,906,9,8,1,8,1,8,1,8,3,8,911,8,
        8,1,8,1,8,3,8,915,8,8,1,8,1,8,1,8,1,8,3,8,921,8,8,1,8,1,8,1,8,5,
        8,926,8,8,10,8,12,8,929,9,8,1,8,1,8,3,8,933,8,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,5,8,944,8,8,10,8,12,8,947,9,8,1,8,1,8,3,8,951,
        8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,963,8,8,1,8,1,8,
        3,8,967,8,8,1,8,1,8,1,8,1,8,3,8,973,8,8,1,8,1,8,1,8,1,8,1,8,5,8,
        980,8,8,10,8,12,8,983,9,8,1,8,1,8,3,8,987,8,8,1,8,1,8,1,8,1,8,3,
        8,993,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1021,8,8,1,
        8,1,8,1,8,1,8,3,8,1027,8,8,3,8,1029,8,8,1,8,1,8,1,8,1,8,3,8,1035,
        8,8,1,8,1,8,1,8,1,8,3,8,1041,8,8,3,8,1043,8,8,1,8,1,8,1,8,1,8,1,
        8,1,8,3,8,1051,8,8,3,8,1053,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        3,8,1063,8,8,3,8,1065,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,3,8,1080,8,8,1,8,1,8,1,8,3,8,1085,8,8,1,8,1,8,1,8,
        1,8,1,8,3,8,1092,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1102,8,
        8,1,8,1,8,1,8,1,8,3,8,1108,8,8,3,8,1110,8,8,1,8,1,8,1,8,1,8,1,8,
        1,8,3,8,1118,8,8,3,8,1120,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,1143,8,8,10,
        8,12,8,1146,9,8,3,8,1148,8,8,1,8,1,8,3,8,1152,8,8,1,8,1,8,3,8,1156,
        8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,
        1172,8,8,10,8,12,8,1175,9,8,3,8,1177,8,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,5,8,1186,8,8,10,8,12,8,1189,9,8,3,8,1191,8,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1207,8,8,1,8,1,8,1,8,
        1,8,1,8,1,8,5,8,1215,8,8,10,8,12,8,1218,9,8,1,8,3,8,1221,8,8,1,8,
        1,8,1,8,1,8,3,8,1227,8,8,1,8,3,8,1230,8,8,1,8,1,8,1,8,1,8,1,8,4,
        8,1237,8,8,11,8,12,8,1238,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,3,8,1251,8,8,1,9,3,9,1254,8,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,
        1262,8,10,10,10,12,10,1265,9,10,1,11,3,11,1268,8,11,1,11,1,11,1,
        12,1,12,3,12,1274,8,12,1,12,1,12,1,12,5,12,1279,8,12,10,12,12,12,
        1282,9,12,1,13,1,13,3,13,1286,8,13,1,14,1,14,1,14,1,14,3,14,1292,
        8,14,1,14,1,14,3,14,1296,8,14,1,14,1,14,3,14,1300,8,14,1,15,1,15,
        1,15,1,15,3,15,1306,8,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,5,17,
        1315,8,17,10,17,12,17,1318,9,17,1,18,1,18,1,18,1,18,1,19,1,19,3,
        19,1326,8,19,1,20,1,20,1,20,1,20,1,20,1,20,5,20,1334,8,20,10,20,
        12,20,1337,9,20,3,20,1339,8,20,1,20,1,20,1,20,3,20,1344,8,20,3,20,
        1346,8,20,1,20,1,20,1,20,1,20,1,20,3,20,1353,8,20,1,20,1,20,1,20,
        1,20,3,20,1359,8,20,3,20,1361,8,20,1,21,1,21,3,21,1365,8,21,1,22,
        1,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,1375,8,23,1,23,1,23,1,23,
        1,23,3,23,1381,8,23,1,23,5,23,1384,8,23,10,23,12,23,1387,9,23,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,1396,8,24,10,24,12,24,1399,
        9,24,1,24,1,24,1,24,1,24,3,24,1405,8,24,1,25,1,25,3,25,1409,8,25,
        1,25,3,25,1412,8,25,1,25,1,25,3,25,1416,8,25,1,26,1,26,3,26,1420,
        8,26,1,26,1,26,1,26,1,26,1,26,5,26,1427,8,26,10,26,12,26,1430,9,
        26,3,26,1432,8,26,1,26,3,26,1435,8,26,1,26,1,26,1,26,3,26,1440,8,
        26,1,26,3,26,1443,8,26,1,26,1,26,1,26,1,26,5,26,1449,8,26,10,26,
        12,26,1452,9,26,3,26,1454,8,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,
        1,29,1,29,5,29,1465,8,29,10,29,12,29,1468,9,29,1,30,3,30,1471,8,
        30,1,30,1,30,1,30,5,30,1476,8,30,10,30,12,30,1479,9,30,1,31,1,31,
        1,31,5,31,1484,8,31,10,31,12,31,1487,9,31,1,32,1,32,1,32,1,32,1,
        32,1,32,5,32,1495,8,32,10,32,12,32,1498,9,32,3,32,1500,8,32,1,32,
        1,32,1,32,1,32,1,32,1,32,5,32,1508,8,32,10,32,12,32,1511,9,32,3,
        32,1513,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,1522,8,32,10,
        32,12,32,1525,9,32,1,32,1,32,3,32,1529,8,32,1,33,1,33,1,33,1,33,
        5,33,1535,8,33,10,33,12,33,1538,9,33,3,33,1540,8,33,1,33,1,33,3,
        33,1544,8,33,1,34,1,34,3,34,1548,8,34,1,35,1,35,1,35,1,35,1,35,1,
        35,1,36,3,36,1557,8,36,1,36,1,36,1,36,3,36,1562,8,36,1,36,1,36,1,
        36,1,36,1,36,5,36,1569,8,36,10,36,12,36,1572,9,36,3,36,1574,8,36,
        1,36,3,36,1577,8,36,1,37,1,37,3,37,1581,8,37,1,37,1,37,1,37,1,37,
        1,37,1,38,1,38,1,39,1,39,3,39,1592,8,39,1,39,3,39,1595,8,39,1,39,
        3,39,1598,8,39,1,39,1,39,1,39,3,39,1603,8,39,1,39,3,39,1606,8,39,
        1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,3,44,1635,8,44,5,44,1637,8,44,10,44,12,44,1640,9,44,1,45,3,
        45,1643,8,45,1,45,1,45,3,45,1647,8,45,1,45,1,45,3,45,1651,8,45,1,
        45,1,45,3,45,1655,8,45,3,45,1657,8,45,1,46,1,46,1,46,1,46,1,46,1,
        46,1,46,5,46,1666,8,46,10,46,12,46,1669,9,46,1,46,1,46,3,46,1673,
        8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1682,8,47,1,48,1,48,
        1,49,1,49,1,50,1,50,1,50,3,50,1691,8,50,1,50,3,50,1694,8,50,1,51,
        1,51,1,51,1,51,3,51,1700,8,51,1,52,1,52,1,52,1,52,1,52,1,52,3,52,
        1708,8,52,1,52,1,52,1,52,1,52,1,52,5,52,1715,8,52,10,52,12,52,1718,
        9,52,3,52,1720,8,52,1,52,1,52,1,52,1,52,5,52,1726,8,52,10,52,12,
        52,1729,9,52,3,52,1731,8,52,1,52,3,52,1734,8,52,1,52,1,52,1,52,3,
        52,1739,8,52,1,52,3,52,1742,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
        52,1,52,5,52,1752,8,52,10,52,12,52,1755,9,52,3,52,1757,8,52,1,52,
        1,52,1,52,1,52,5,52,1763,8,52,10,52,12,52,1766,9,52,1,52,1,52,3,
        52,1770,8,52,1,52,1,52,3,52,1774,8,52,3,52,1776,8,52,3,52,1778,8,
        52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
        54,3,54,1793,8,54,3,54,1795,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,
        55,1,55,1,55,3,55,1806,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
        56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1827,
        8,56,1,57,1,57,1,57,1,57,1,57,1,57,5,57,1835,8,57,10,57,12,57,1838,
        9,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,3,59,1848,8,59,1,59,
        1,59,3,59,1852,8,59,3,59,1854,8,59,1,60,1,60,1,60,1,60,5,60,1860,
        8,60,10,60,12,60,1863,9,60,1,60,1,60,1,61,1,61,1,61,1,61,5,61,1871,
        8,61,10,61,12,61,1874,9,61,1,61,1,61,1,62,1,62,1,62,1,62,5,62,1882,
        8,62,10,62,12,62,1885,9,62,1,62,1,62,1,63,1,63,3,63,1891,8,63,1,
        63,1,63,1,63,1,63,1,63,3,63,1898,8,63,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,5,64,1909,8,64,10,64,12,64,1912,9,64,1,64,1,64,
        1,64,3,64,1917,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,1937,8,64,10,64,
        12,64,1940,9,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,3,64,1954,8,64,1,64,1,64,1,64,3,64,1959,8,64,1,64,1,64,
        3,64,1963,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,1973,
        8,65,1,65,1,65,1,65,1,65,3,65,1979,8,65,1,65,1,65,1,65,1,65,3,65,
        1985,8,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,1993,8,65,1,65,1,65,
        1,65,3,65,1998,8,65,1,65,1,65,1,65,1,65,1,65,3,65,2005,8,65,3,65,
        2007,8,65,1,65,1,65,1,65,1,65,3,65,2013,8,65,1,65,1,65,1,65,1,65,
        3,65,2019,8,65,1,65,1,65,3,65,2023,8,65,1,65,1,65,1,65,3,65,2028,
        8,65,1,65,1,65,1,65,1,65,1,65,5,65,2035,8,65,10,65,12,65,2038,9,
        65,1,65,1,65,3,65,2042,8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
        66,1,66,1,66,5,66,2054,8,66,10,66,12,66,2057,9,66,1,66,1,66,1,66,
        1,66,1,66,5,66,2064,8,66,10,66,12,66,2067,9,66,3,66,2069,8,66,1,
        67,1,67,1,68,1,68,1,68,1,68,1,68,3,68,2078,8,68,1,69,1,69,1,69,3,
        69,2083,8,69,1,69,1,69,1,69,3,69,2088,8,69,3,69,2090,8,69,1,70,1,
        70,1,70,1,70,1,70,5,70,2097,8,70,10,70,12,70,2100,9,70,3,70,2102,
        8,70,1,70,1,70,1,70,1,70,5,70,2108,8,70,10,70,12,70,2111,9,70,3,
        70,2113,8,70,1,70,1,70,1,71,1,71,1,71,3,71,2120,8,71,1,71,1,71,1,
        71,3,71,2125,8,71,1,72,1,72,1,72,1,72,1,72,3,72,2132,8,72,1,72,1,
        72,3,72,2136,8,72,3,72,2138,8,72,1,72,1,72,1,72,1,72,1,72,1,72,3,
        72,2146,8,72,1,72,1,72,1,72,1,72,1,72,1,72,5,72,2154,8,72,10,72,
        12,72,2157,9,72,1,72,1,72,1,72,3,72,2162,8,72,3,72,2164,8,72,1,73,
        1,73,1,73,1,73,1,73,3,73,2171,8,73,1,73,1,73,3,73,2175,8,73,3,73,
        2177,8,73,1,73,1,73,1,73,1,73,1,73,3,73,2184,8,73,1,73,1,73,3,73,
        2188,8,73,3,73,2190,8,73,3,73,2192,8,73,1,74,1,74,1,74,1,74,1,74,
        5,74,2199,8,74,10,74,12,74,2202,9,74,1,74,1,74,1,74,1,74,1,74,1,
        74,1,74,1,74,3,74,2212,8,74,1,75,1,75,3,75,2216,8,75,1,76,1,76,1,
        76,1,76,1,76,1,76,5,76,2224,8,76,10,76,12,76,2227,9,76,1,76,1,76,
        1,77,1,77,1,78,1,78,1,78,3,78,2236,8,78,1,78,1,78,3,78,2240,8,78,
        1,78,1,78,1,78,1,78,1,78,1,78,5,78,2248,8,78,10,78,12,78,2251,9,
        78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,2263,8,
        79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,2271,8,79,1,79,1,79,1,79,1,
        79,1,79,5,79,2278,8,79,10,79,12,79,2281,9,79,1,79,1,79,1,79,3,79,
        2286,8,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,2294,8,79,1,79,1,79,
        1,79,1,79,3,79,2300,8,79,1,79,1,79,3,79,2304,8,79,1,79,1,79,1,79,
        3,79,2309,8,79,1,79,1,79,1,79,3,79,2314,8,79,1,80,1,80,1,80,1,80,
        3,80,2320,8,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
        1,80,1,80,5,80,2334,8,80,10,80,12,80,2337,9,80,1,81,1,81,1,81,1,
        81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
        81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,4,81,2364,8,81,11,81,
        12,81,2365,1,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,2375,8,81,10,
        81,12,81,2378,9,81,1,81,1,81,1,81,1,81,1,81,3,81,2385,8,81,1,81,
        1,81,1,81,3,81,2390,8,81,1,81,1,81,1,81,3,81,2395,8,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,2406,8,81,10,81,12,81,2409,
        9,81,1,81,1,81,1,81,3,81,2414,8,81,1,81,3,81,2417,8,81,1,81,1,81,
        1,81,1,81,1,81,3,81,2424,8,81,1,81,1,81,1,81,3,81,2429,8,81,1,81,
        3,81,2432,8,81,1,81,3,81,2435,8,81,1,81,1,81,1,81,3,81,2440,8,81,
        1,81,1,81,1,81,5,81,2445,8,81,10,81,12,81,2448,9,81,3,81,2450,8,
        81,1,81,1,81,1,81,1,81,1,81,5,81,2457,8,81,10,81,12,81,2460,9,81,
        3,81,2462,8,81,1,81,1,81,3,81,2466,8,81,1,81,3,81,2469,8,81,1,81,
        3,81,2472,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,5,81,2485,8,81,10,81,12,81,2488,9,81,3,81,2490,8,81,1,81,1,
        81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
        81,4,81,2507,8,81,11,81,12,81,2508,1,81,1,81,3,81,2513,8,81,1,81,
        1,81,1,81,1,81,4,81,2519,8,81,11,81,12,81,2520,1,81,1,81,3,81,2525,
        8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,2548,8,81,10,81,
        12,81,2551,9,81,3,81,2553,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        3,81,2562,8,81,1,81,1,81,1,81,1,81,3,81,2568,8,81,1,81,1,81,1,81,
        1,81,3,81,2574,8,81,1,81,1,81,1,81,1,81,3,81,2580,8,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,3,81,2589,8,81,1,81,3,81,2592,8,81,1,81,
        3,81,2595,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2614,8,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,3,81,2623,8,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,
        2643,8,81,10,81,12,81,2646,9,81,3,81,2648,8,81,1,81,1,81,1,81,1,
        81,1,81,1,81,1,81,1,81,3,81,2658,8,81,1,81,1,81,1,81,1,81,1,81,1,
        81,1,81,3,81,2667,8,81,1,81,1,81,1,81,1,81,3,81,2673,8,81,1,81,1,
        81,1,81,1,81,3,81,2679,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
        81,1,81,3,81,2690,8,81,3,81,2692,8,81,1,81,1,81,1,81,3,81,2697,8,
        81,1,81,1,81,1,81,1,81,1,81,3,81,2704,8,81,3,81,2706,8,81,1,81,1,
        81,1,81,1,81,3,81,2712,8,81,1,81,1,81,1,81,1,81,3,81,2718,8,81,1,
        81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,2727,8,81,10,81,12,81,2730,
        9,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2738,8,81,1,81,1,81,1,81,
        3,81,2743,8,81,1,81,1,81,1,81,3,81,2748,8,81,3,81,2750,8,81,3,81,
        2752,8,81,1,81,1,81,1,81,1,81,3,81,2758,8,81,3,81,2760,8,81,1,81,
        1,81,1,81,1,81,1,81,1,81,5,81,2768,8,81,10,81,12,81,2771,9,81,1,
        81,1,81,1,81,1,81,1,81,1,81,3,81,2779,8,81,3,81,2781,8,81,1,81,1,
        81,1,81,1,81,3,81,2787,8,81,3,81,2789,8,81,1,81,3,81,2792,8,81,1,
        81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,2802,8,81,10,81,12,81,
        2805,9,81,1,82,1,82,1,82,1,82,1,82,3,82,2812,8,82,1,82,1,82,1,82,
        1,82,5,82,2818,8,82,10,82,12,82,2821,9,82,3,82,2823,8,82,1,83,1,
        83,1,83,3,83,2828,8,83,1,84,1,84,1,84,3,84,2833,8,84,1,85,1,85,1,
        85,1,85,1,86,1,86,1,87,1,87,1,87,1,87,3,87,2845,8,87,1,88,1,88,3,
        88,2849,8,88,1,88,1,88,3,88,2853,8,88,1,88,3,88,2856,8,88,3,88,2858,
        8,88,1,89,1,89,1,89,1,89,1,89,1,89,3,89,2866,8,89,1,90,3,90,2869,
        8,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,2879,8,90,1,91,
        1,91,1,92,1,92,1,92,1,92,3,92,2887,8,92,1,93,1,93,1,93,1,93,3,93,
        2893,8,93,3,93,2895,8,93,1,94,1,94,1,94,1,94,1,94,1,94,3,94,2903,
        8,94,1,95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,3,98,2913,8,98,1,98,
        1,98,1,98,1,98,3,98,2919,8,98,1,99,1,99,1,100,1,100,1,101,1,101,
        1,101,1,101,1,101,1,101,5,101,2931,8,101,10,101,12,101,2934,9,101,
        1,101,1,101,1,101,1,101,1,101,1,101,3,101,2942,8,101,1,101,1,101,
        1,101,1,101,1,101,3,101,2949,8,101,1,101,1,101,1,101,3,101,2954,
        8,101,1,101,1,101,1,101,1,101,1,101,3,101,2961,8,101,1,101,1,101,
        1,101,3,101,2966,8,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,5,101,2987,8,101,10,101,12,101,2990,9,101,1,101,1,101,3,101,
        2994,8,101,3,101,2996,8,101,1,101,1,101,1,101,1,101,1,101,3,101,
        3003,8,101,5,101,3005,8,101,10,101,12,101,3008,9,101,1,102,1,102,
        1,102,1,102,3,102,3014,8,102,1,103,1,103,3,103,3018,8,103,1,104,
        1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,1,105,1,106,1,106,
        1,106,1,106,3,106,3034,8,106,1,106,1,106,1,106,1,106,1,106,1,106,
        1,106,1,106,1,106,1,106,1,106,5,106,3047,8,106,10,106,12,106,3050,
        9,106,1,106,1,106,1,106,1,106,3,106,3056,8,106,1,106,1,106,1,106,
        1,106,1,106,1,106,1,106,3,106,3065,8,106,1,106,1,106,1,106,1,106,
        1,106,1,106,5,106,3073,8,106,10,106,12,106,3076,9,106,1,106,1,106,
        3,106,3080,8,106,1,106,1,106,1,106,1,106,1,106,5,106,3087,8,106,
        10,106,12,106,3090,9,106,1,106,1,106,3,106,3094,8,106,1,107,1,107,
        1,107,1,107,1,107,1,107,3,107,3102,8,107,1,108,1,108,1,108,1,108,
        5,108,3108,8,108,10,108,12,108,3111,9,108,3,108,3113,8,108,1,108,
        1,108,1,108,1,108,3,108,3119,8,108,1,108,3,108,3122,8,108,1,108,
        1,108,1,108,1,108,1,108,3,108,3129,8,108,1,108,1,108,1,108,1,108,
        5,108,3135,8,108,10,108,12,108,3138,9,108,3,108,3140,8,108,1,108,
        1,108,1,108,1,108,5,108,3146,8,108,10,108,12,108,3149,9,108,3,108,
        3151,8,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,3,109,3177,8,109,1,110,1,110,1,110,1,110,
        1,110,1,110,1,110,1,110,1,110,3,110,3188,8,110,1,111,1,111,1,111,
        3,111,3193,8,111,1,111,1,111,1,111,1,111,1,111,5,111,3200,8,111,
        10,111,12,111,3203,9,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,5,112,3213,8,112,10,112,12,112,3216,9,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,3230,
        8,112,1,113,1,113,3,113,3234,8,113,1,113,1,113,3,113,3238,8,113,
        1,113,1,113,3,113,3242,8,113,1,113,1,113,1,113,1,113,3,113,3248,
        8,113,1,113,1,113,3,113,3252,8,113,1,113,1,113,3,113,3256,8,113,
        1,113,1,113,3,113,3260,8,113,3,113,3262,8,113,1,114,1,114,1,114,
        1,114,1,115,1,115,1,115,1,115,3,115,3272,8,115,1,116,1,116,1,116,
        1,116,1,116,3,116,3279,8,116,1,117,1,117,1,117,1,117,1,117,1,117,
        1,117,3,117,3288,8,117,1,118,1,118,1,118,1,118,1,118,3,118,3295,
        8,118,1,119,1,119,1,119,1,119,1,119,3,119,3302,8,119,1,120,1,120,
        1,120,5,120,3307,8,120,10,120,12,120,3310,9,120,1,121,1,121,1,121,
        1,121,5,121,3316,8,121,10,121,12,121,3319,9,121,1,121,1,121,1,122,
        1,122,1,122,1,122,1,122,5,122,3328,8,122,10,122,12,122,3331,9,122,
        3,122,3333,8,122,1,122,1,122,1,123,1,123,1,123,1,123,1,123,5,123,
        3342,8,123,10,123,12,123,3345,9,123,3,123,3347,8,123,1,123,1,123,
        1,124,3,124,3352,8,124,1,124,1,124,1,125,1,125,1,125,1,126,1,126,
        1,126,3,126,3362,8,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,
        1,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,3378,8,126,1,127,
        1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,4,127,3390,
        8,127,11,127,12,127,3391,1,127,3,127,3395,8,127,1,127,1,127,1,127,
        1,127,1,127,4,127,3402,8,127,11,127,12,127,3403,1,127,3,127,3407,
        8,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,5,127,3417,
        8,127,10,127,12,127,3420,9,127,1,127,3,127,3423,8,127,1,127,1,127,
        1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,5,127,3436,
        8,127,10,127,12,127,3439,9,127,1,127,3,127,3442,8,127,1,127,1,127,
        1,127,1,127,3,127,3448,8,127,1,127,1,127,1,127,1,127,1,127,1,127,
        1,127,1,127,3,127,3458,8,127,1,127,1,127,1,127,1,127,1,127,1,127,
        1,127,1,127,1,127,1,127,3,127,3470,8,127,1,127,1,127,1,127,1,127,
        1,127,1,127,1,127,3,127,3479,8,127,1,128,1,128,1,128,1,128,1,128,
        1,129,1,129,1,129,1,129,1,129,1,130,1,130,1,130,1,131,1,131,1,131,
        1,131,5,131,3498,8,131,10,131,12,131,3501,9,131,1,131,1,131,1,131,
        3,131,3506,8,131,1,132,1,132,1,132,4,132,3511,8,132,11,132,12,132,
        3512,1,133,1,133,1,133,1,133,1,133,1,133,3,133,3521,8,133,1,134,
        1,134,1,134,3,134,3526,8,134,1,135,3,135,3529,8,135,1,135,1,135,
        1,136,1,136,3,136,3535,8,136,1,137,1,137,1,137,1,137,1,137,1,137,
        1,137,1,137,1,137,1,137,1,137,3,137,3548,8,137,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,3561,8,138,
        1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        3,139,3574,8,139,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,
        1,140,1,140,1,140,3,140,3587,8,140,1,141,1,141,1,141,1,141,1,141,
        3,141,3594,8,141,1,142,1,142,1,142,1,142,1,142,3,142,3601,8,142,
        1,143,1,143,1,144,1,144,1,145,1,145,1,146,1,146,1,147,1,147,3,147,
        3613,8,147,1,148,1,148,1,149,1,149,1,150,1,150,1,150,5,150,3622,
        8,150,10,150,12,150,3625,9,150,1,151,1,151,1,151,1,151,1,151,1,151,
        1,152,1,152,1,153,1,153,1,153,3,153,3638,8,153,1,154,1,154,1,154,
        1,154,1,154,3,154,3645,8,154,1,155,1,155,1,155,5,155,3650,8,155,
        10,155,12,155,3653,9,155,1,156,1,156,1,156,1,156,1,156,1,156,1,156,
        3,156,3662,8,156,1,157,1,157,1,157,1,157,1,157,3,157,3669,8,157,
        1,158,3,158,3672,8,158,1,158,1,158,3,158,3676,8,158,1,158,1,158,
        3,158,3680,8,158,1,158,3,158,3683,8,158,1,159,1,159,3,159,3687,8,
        159,1,160,1,160,1,160,0,7,46,88,156,160,162,202,222,161,0,2,4,6,
        8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
        52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
        96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
        130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
        162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
        194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
        226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,
        258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,
        290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,
        0,36,2,0,39,39,229,229,2,0,72,72,131,131,2,0,105,105,122,122,2,0,
        92,92,123,123,1,0,239,240,2,0,101,101,174,174,2,0,324,324,329,329,
        2,0,91,91,281,281,2,0,29,29,75,75,2,0,101,101,148,148,2,0,22,22,
        79,79,2,0,33,33,259,259,3,0,35,35,150,150,270,270,2,0,124,124,247,
        247,2,0,85,85,89,89,2,0,144,144,189,189,2,0,125,125,197,197,2,0,
        54,54,281,281,1,0,318,319,1,0,320,322,1,0,291,293,4,0,89,89,97,97,
        273,273,283,283,2,0,49,49,280,280,2,0,100,100,241,241,1,0,312,317,
        3,0,22,22,26,26,254,254,2,0,97,97,273,273,5,0,67,67,118,118,170,
        171,245,245,310,310,1,0,175,178,2,0,304,304,306,306,2,0,102,102,
        212,212,3,0,113,113,137,137,263,263,4,0,80,80,132,132,160,160,294,
        294,2,0,192,192,309,309,2,0,268,268,298,298,54,0,18,22,24,24,26,
        27,29,33,35,35,37,39,42,49,51,52,56,56,65,67,69,72,74,75,77,78,80,
        82,85,87,89,89,92,92,95,95,98,102,104,104,107,113,116,116,118,121,
        123,124,126,126,129,129,131,132,134,135,137,137,144,151,153,153,
        155,155,157,157,160,171,173,180,184,189,191,193,196,196,198,213,
        215,220,222,233,235,237,239,247,249,259,261,264,266,271,274,276,
        278,280,282,284,286,289,291,295,297,299,302,303,305,311,4230,0,325,
        1,0,0,0,2,330,1,0,0,0,4,332,1,0,0,0,6,336,1,0,0,0,8,340,1,0,0,0,
        10,344,1,0,0,0,12,348,1,0,0,0,14,352,1,0,0,0,16,1250,1,0,0,0,18,
        1253,1,0,0,0,20,1257,1,0,0,0,22,1267,1,0,0,0,24,1271,1,0,0,0,26,
        1285,1,0,0,0,28,1287,1,0,0,0,30,1301,1,0,0,0,32,1307,1,0,0,0,34,
        1311,1,0,0,0,36,1319,1,0,0,0,38,1325,1,0,0,0,40,1327,1,0,0,0,42,
        1364,1,0,0,0,44,1366,1,0,0,0,46,1368,1,0,0,0,48,1404,1,0,0,0,50,
        1408,1,0,0,0,52,1417,1,0,0,0,54,1455,1,0,0,0,56,1458,1,0,0,0,58,
        1461,1,0,0,0,60,1470,1,0,0,0,62,1480,1,0,0,0,64,1528,1,0,0,0,66,
        1543,1,0,0,0,68,1547,1,0,0,0,70,1549,1,0,0,0,72,1556,1,0,0,0,74,
        1578,1,0,0,0,76,1587,1,0,0,0,78,1605,1,0,0,0,80,1607,1,0,0,0,82,
        1609,1,0,0,0,84,1613,1,0,0,0,86,1615,1,0,0,0,88,1617,1,0,0,0,90,
        1656,1,0,0,0,92,1672,1,0,0,0,94,1674,1,0,0,0,96,1683,1,0,0,0,98,
        1685,1,0,0,0,100,1693,1,0,0,0,102,1699,1,0,0,0,104,1701,1,0,0,0,
        106,1779,1,0,0,0,108,1794,1,0,0,0,110,1805,1,0,0,0,112,1826,1,0,
        0,0,114,1828,1,0,0,0,116,1841,1,0,0,0,118,1845,1,0,0,0,120,1855,
        1,0,0,0,122,1866,1,0,0,0,124,1877,1,0,0,0,126,1897,1,0,0,0,128,1962,
        1,0,0,0,130,2041,1,0,0,0,132,2068,1,0,0,0,134,2070,1,0,0,0,136,2077,
        1,0,0,0,138,2089,1,0,0,0,140,2091,1,0,0,0,142,2119,1,0,0,0,144,2126,
        1,0,0,0,146,2191,1,0,0,0,148,2211,1,0,0,0,150,2213,1,0,0,0,152,2217,
        1,0,0,0,154,2230,1,0,0,0,156,2239,1,0,0,0,158,2313,1,0,0,0,160,2319,
        1,0,0,0,162,2791,1,0,0,0,164,2806,1,0,0,0,166,2824,1,0,0,0,168,2829,
        1,0,0,0,170,2834,1,0,0,0,172,2838,1,0,0,0,174,2844,1,0,0,0,176,2857,
        1,0,0,0,178,2865,1,0,0,0,180,2878,1,0,0,0,182,2880,1,0,0,0,184,2886,
        1,0,0,0,186,2894,1,0,0,0,188,2902,1,0,0,0,190,2904,1,0,0,0,192,2906,
        1,0,0,0,194,2908,1,0,0,0,196,2910,1,0,0,0,198,2920,1,0,0,0,200,2922,
        1,0,0,0,202,2995,1,0,0,0,204,3013,1,0,0,0,206,3017,1,0,0,0,208,3019,
        1,0,0,0,210,3024,1,0,0,0,212,3093,1,0,0,0,214,3095,1,0,0,0,216,3112,
        1,0,0,0,218,3176,1,0,0,0,220,3187,1,0,0,0,222,3189,1,0,0,0,224,3229,
        1,0,0,0,226,3261,1,0,0,0,228,3263,1,0,0,0,230,3271,1,0,0,0,232,3278,
        1,0,0,0,234,3287,1,0,0,0,236,3294,1,0,0,0,238,3301,1,0,0,0,240,3303,
        1,0,0,0,242,3311,1,0,0,0,244,3322,1,0,0,0,246,3336,1,0,0,0,248,3351,
        1,0,0,0,250,3355,1,0,0,0,252,3377,1,0,0,0,254,3478,1,0,0,0,256,3480,
        1,0,0,0,258,3485,1,0,0,0,260,3490,1,0,0,0,262,3493,1,0,0,0,264,3510,
        1,0,0,0,266,3520,1,0,0,0,268,3525,1,0,0,0,270,3528,1,0,0,0,272,3534,
        1,0,0,0,274,3547,1,0,0,0,276,3560,1,0,0,0,278,3573,1,0,0,0,280,3586,
        1,0,0,0,282,3593,1,0,0,0,284,3600,1,0,0,0,286,3602,1,0,0,0,288,3604,
        1,0,0,0,290,3606,1,0,0,0,292,3608,1,0,0,0,294,3612,1,0,0,0,296,3614,
        1,0,0,0,298,3616,1,0,0,0,300,3618,1,0,0,0,302,3626,1,0,0,0,304,3632,
        1,0,0,0,306,3637,1,0,0,0,308,3644,1,0,0,0,310,3646,1,0,0,0,312,3661,
        1,0,0,0,314,3668,1,0,0,0,316,3682,1,0,0,0,318,3686,1,0,0,0,320,3688,
        1,0,0,0,322,324,3,2,1,0,323,322,1,0,0,0,324,327,1,0,0,0,325,323,
        1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,0,327,325,1,0,0,0,328,329,
        5,0,0,1,329,1,1,0,0,0,330,331,3,4,2,0,331,3,1,0,0,0,332,334,3,16,
        8,0,333,335,5,325,0,0,334,333,1,0,0,0,334,335,1,0,0,0,335,5,1,0,
        0,0,336,338,3,154,77,0,337,339,5,325,0,0,338,337,1,0,0,0,338,339,
        1,0,0,0,339,7,1,0,0,0,340,342,3,240,120,0,341,343,5,325,0,0,342,
        341,1,0,0,0,342,343,1,0,0,0,343,9,1,0,0,0,344,346,3,202,101,0,345,
        347,5,325,0,0,346,345,1,0,0,0,346,347,1,0,0,0,347,11,1,0,0,0,348,
        350,3,222,111,0,349,351,5,325,0,0,350,349,1,0,0,0,350,351,1,0,0,
        0,351,13,1,0,0,0,352,353,3,242,121,0,353,354,5,0,0,1,354,15,1,0,
        0,0,355,1251,3,18,9,0,356,357,5,288,0,0,357,1251,3,282,141,0,358,
        359,5,53,0,0,359,363,5,42,0,0,360,361,5,119,0,0,361,362,5,182,0,
        0,362,364,5,94,0,0,363,360,1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,
        0,365,366,3,288,144,0,366,367,5,290,0,0,367,370,3,314,157,0,368,
        369,5,46,0,0,369,371,3,186,93,0,370,368,1,0,0,0,370,371,1,0,0,0,
        371,374,1,0,0,0,372,373,5,31,0,0,373,375,3,308,154,0,374,372,1,0,
        0,0,374,375,1,0,0,0,375,378,1,0,0,0,376,377,5,304,0,0,377,379,3,
        32,16,0,378,376,1,0,0,0,378,379,1,0,0,0,379,1251,1,0,0,0,380,381,
        5,83,0,0,381,384,5,42,0,0,382,383,5,119,0,0,383,385,5,94,0,0,384,
        382,1,0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,388,3,286,143,0,
        387,389,7,0,0,0,388,387,1,0,0,0,388,389,1,0,0,0,389,1251,1,0,0,0,
        390,391,5,53,0,0,391,395,5,243,0,0,392,393,5,119,0,0,393,394,5,182,
        0,0,394,396,5,94,0,0,395,392,1,0,0,0,395,396,1,0,0,0,396,397,1,0,
        0,0,397,400,3,284,142,0,398,399,5,31,0,0,399,401,3,308,154,0,400,
        398,1,0,0,0,400,401,1,0,0,0,401,404,1,0,0,0,402,403,5,304,0,0,403,
        405,3,32,16,0,404,402,1,0,0,0,404,405,1,0,0,0,405,1251,1,0,0,0,406,
        407,5,83,0,0,407,410,5,243,0,0,408,409,5,119,0,0,409,411,5,94,0,
        0,410,408,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,414,3,282,
        141,0,413,415,7,0,0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,1251,1,
        0,0,0,416,417,5,23,0,0,417,418,5,243,0,0,418,419,3,282,141,0,419,
        420,5,223,0,0,420,421,5,269,0,0,421,422,3,284,142,0,422,1251,1,0,
        0,0,423,424,5,23,0,0,424,425,5,243,0,0,425,426,3,282,141,0,426,427,
        5,251,0,0,427,428,5,31,0,0,428,429,3,308,154,0,429,1251,1,0,0,0,
        430,433,5,53,0,0,431,432,5,194,0,0,432,434,5,226,0,0,433,431,1,0,
        0,0,433,434,1,0,0,0,434,435,1,0,0,0,435,439,5,260,0,0,436,437,5,
        119,0,0,437,438,5,182,0,0,438,440,5,94,0,0,439,436,1,0,0,0,439,440,
        1,0,0,0,440,441,1,0,0,0,441,443,3,276,138,0,442,444,3,120,60,0,443,
        442,1,0,0,0,443,444,1,0,0,0,444,447,1,0,0,0,445,446,5,46,0,0,446,
        448,3,186,93,0,447,445,1,0,0,0,447,448,1,0,0,0,448,451,1,0,0,0,449,
        450,5,304,0,0,450,452,3,32,16,0,451,449,1,0,0,0,451,452,1,0,0,0,
        452,453,1,0,0,0,453,459,5,28,0,0,454,460,3,18,9,0,455,456,5,1,0,
        0,456,457,3,18,9,0,457,458,5,2,0,0,458,460,1,0,0,0,459,454,1,0,0,
        0,459,455,1,0,0,0,460,466,1,0,0,0,461,463,5,304,0,0,462,464,5,179,
        0,0,463,462,1,0,0,0,463,464,1,0,0,0,464,465,1,0,0,0,465,467,5,65,
        0,0,466,461,1,0,0,0,466,467,1,0,0,0,467,1251,1,0,0,0,468,471,5,53,
        0,0,469,470,5,194,0,0,470,472,5,226,0,0,471,469,1,0,0,0,471,472,
        1,0,0,0,472,473,1,0,0,0,473,477,5,260,0,0,474,475,5,119,0,0,475,
        476,5,182,0,0,476,478,5,94,0,0,477,474,1,0,0,0,477,478,1,0,0,0,478,
        479,1,0,0,0,479,480,3,276,138,0,480,481,5,1,0,0,481,486,3,26,13,
        0,482,483,5,3,0,0,483,485,3,26,13,0,484,482,1,0,0,0,485,488,1,0,
        0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,486,1,0,
        0,0,489,492,5,2,0,0,490,491,5,46,0,0,491,493,3,186,93,0,492,490,
        1,0,0,0,492,493,1,0,0,0,493,496,1,0,0,0,494,495,5,304,0,0,495,497,
        3,32,16,0,496,494,1,0,0,0,496,497,1,0,0,0,497,1251,1,0,0,0,498,499,
        5,83,0,0,499,502,5,260,0,0,500,501,5,119,0,0,501,503,5,94,0,0,502,
        500,1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,504,1251,3,274,137,0,
        505,506,5,127,0,0,506,507,5,130,0,0,507,509,3,274,137,0,508,510,
        3,122,61,0,509,508,1,0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,511,512,
        3,18,9,0,512,1251,1,0,0,0,513,514,5,73,0,0,514,515,5,105,0,0,515,
        517,3,274,137,0,516,518,3,54,27,0,517,516,1,0,0,0,517,518,1,0,0,
        0,518,1251,1,0,0,0,519,520,5,274,0,0,520,521,5,260,0,0,521,1251,
        3,274,137,0,522,523,5,46,0,0,523,524,5,190,0,0,524,525,5,260,0,0,
        525,526,3,274,137,0,526,529,5,133,0,0,527,530,3,186,93,0,528,530,
        5,183,0,0,529,527,1,0,0,0,529,528,1,0,0,0,530,1251,1,0,0,0,531,532,
        5,46,0,0,532,533,5,190,0,0,533,534,5,299,0,0,534,535,3,278,139,0,
        535,538,5,133,0,0,536,539,3,186,93,0,537,539,5,183,0,0,538,536,1,
        0,0,0,538,537,1,0,0,0,539,1251,1,0,0,0,540,541,5,46,0,0,541,542,
        5,190,0,0,542,543,5,44,0,0,543,544,3,294,147,0,544,547,5,133,0,0,
        545,548,3,186,93,0,546,548,5,183,0,0,547,545,1,0,0,0,547,546,1,0,
        0,0,548,1251,1,0,0,0,549,550,5,23,0,0,550,553,5,260,0,0,551,552,
        5,119,0,0,552,554,5,94,0,0,553,551,1,0,0,0,553,554,1,0,0,0,554,555,
        1,0,0,0,555,556,3,274,137,0,556,557,5,223,0,0,557,558,5,269,0,0,
        558,559,3,276,138,0,559,1251,1,0,0,0,560,561,5,23,0,0,561,564,5,
        260,0,0,562,563,5,119,0,0,563,565,5,94,0,0,564,562,1,0,0,0,564,565,
        1,0,0,0,565,566,1,0,0,0,566,567,3,274,137,0,567,568,5,19,0,0,568,
        572,5,44,0,0,569,570,5,119,0,0,570,571,5,182,0,0,571,573,5,94,0,
        0,572,569,1,0,0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,575,3,28,14,
        0,575,1251,1,0,0,0,576,577,5,23,0,0,577,580,5,260,0,0,578,579,5,
        119,0,0,579,581,5,94,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,582,
        1,0,0,0,582,583,3,274,137,0,583,584,5,223,0,0,584,587,5,44,0,0,585,
        586,5,119,0,0,586,588,5,94,0,0,587,585,1,0,0,0,587,588,1,0,0,0,588,
        589,1,0,0,0,589,590,3,294,147,0,590,591,5,269,0,0,591,592,3,298,
        149,0,592,1251,1,0,0,0,593,594,5,23,0,0,594,597,5,260,0,0,595,596,
        5,119,0,0,596,598,5,94,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,599,
        1,0,0,0,599,600,3,274,137,0,600,601,5,83,0,0,601,604,5,44,0,0,602,
        603,5,119,0,0,603,605,5,94,0,0,604,602,1,0,0,0,604,605,1,0,0,0,605,
        606,1,0,0,0,606,607,3,294,147,0,607,1251,1,0,0,0,608,609,5,23,0,
        0,609,612,5,260,0,0,610,611,5,119,0,0,611,613,5,94,0,0,612,610,1,
        0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,615,3,274,137,0,615,616,
        5,23,0,0,616,617,5,44,0,0,617,618,3,294,147,0,618,619,5,251,0,0,
        619,620,5,65,0,0,620,621,5,276,0,0,621,622,3,202,101,0,622,1251,
        1,0,0,0,623,624,5,23,0,0,624,627,5,260,0,0,625,626,5,119,0,0,626,
        628,5,94,0,0,627,625,1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,
        630,3,274,137,0,630,631,5,23,0,0,631,632,5,44,0,0,632,633,3,294,
        147,0,633,634,5,83,0,0,634,635,5,182,0,0,635,636,5,183,0,0,636,1251,
        1,0,0,0,637,638,5,23,0,0,638,639,5,260,0,0,639,640,3,274,137,0,640,
        641,5,251,0,0,641,642,5,31,0,0,642,643,3,308,154,0,643,1251,1,0,
        0,0,644,645,5,23,0,0,645,646,5,260,0,0,646,647,3,274,137,0,647,648,
        5,251,0,0,648,649,5,216,0,0,649,650,3,34,17,0,650,1251,1,0,0,0,651,
        652,5,23,0,0,652,653,5,260,0,0,653,654,3,274,137,0,654,655,5,93,
        0,0,655,668,3,290,145,0,656,665,5,1,0,0,657,662,3,236,118,0,658,
        659,5,3,0,0,659,661,3,236,118,0,660,658,1,0,0,0,661,664,1,0,0,0,
        662,660,1,0,0,0,662,663,1,0,0,0,663,666,1,0,0,0,664,662,1,0,0,0,
        665,657,1,0,0,0,665,666,1,0,0,0,666,667,1,0,0,0,667,669,5,2,0,0,
        668,656,1,0,0,0,668,669,1,0,0,0,669,671,1,0,0,0,670,672,3,54,27,
        0,671,670,1,0,0,0,671,672,1,0,0,0,672,1251,1,0,0,0,673,674,5,24,
        0,0,674,677,3,274,137,0,675,676,5,304,0,0,676,678,3,32,16,0,677,
        675,1,0,0,0,677,678,1,0,0,0,678,1251,1,0,0,0,679,682,5,53,0,0,680,
        681,5,194,0,0,681,683,5,226,0,0,682,680,1,0,0,0,682,683,1,0,0,0,
        683,684,1,0,0,0,684,685,5,167,0,0,685,689,5,299,0,0,686,687,5,119,
        0,0,687,688,5,182,0,0,688,690,5,94,0,0,689,686,1,0,0,0,689,690,1,
        0,0,0,690,691,1,0,0,0,691,695,3,280,140,0,692,693,5,109,0,0,693,
        694,5,208,0,0,694,696,3,196,98,0,695,692,1,0,0,0,695,696,1,0,0,0,
        696,699,1,0,0,0,697,698,5,46,0,0,698,700,3,186,93,0,699,697,1,0,
        0,0,699,700,1,0,0,0,700,703,1,0,0,0,701,702,5,304,0,0,702,704,3,
        32,16,0,703,701,1,0,0,0,703,704,1,0,0,0,704,705,1,0,0,0,705,706,
        5,28,0,0,706,707,3,18,9,0,707,1251,1,0,0,0,708,711,5,53,0,0,709,
        710,5,194,0,0,710,712,5,226,0,0,711,709,1,0,0,0,711,712,1,0,0,0,
        712,713,1,0,0,0,713,714,5,299,0,0,714,717,3,280,140,0,715,716,5,
        46,0,0,716,718,3,186,93,0,717,715,1,0,0,0,717,718,1,0,0,0,718,721,
        1,0,0,0,719,720,5,246,0,0,720,722,7,1,0,0,721,719,1,0,0,0,721,722,
        1,0,0,0,722,725,1,0,0,0,723,724,5,304,0,0,724,726,3,32,16,0,725,
        723,1,0,0,0,725,726,1,0,0,0,726,727,1,0,0,0,727,728,5,28,0,0,728,
        729,3,18,9,0,729,1251,1,0,0,0,730,731,5,222,0,0,731,732,5,167,0,
        0,732,733,5,299,0,0,733,1251,3,278,139,0,734,735,5,83,0,0,735,736,
        5,167,0,0,736,739,5,299,0,0,737,738,5,119,0,0,738,740,5,94,0,0,739,
        737,1,0,0,0,739,740,1,0,0,0,740,741,1,0,0,0,741,1251,3,278,139,0,
        742,743,5,23,0,0,743,744,5,167,0,0,744,747,5,299,0,0,745,746,5,119,
        0,0,746,748,5,94,0,0,747,745,1,0,0,0,747,748,1,0,0,0,748,749,1,0,
        0,0,749,750,3,278,139,0,750,751,5,223,0,0,751,752,5,269,0,0,752,
        753,3,280,140,0,753,1251,1,0,0,0,754,755,5,23,0,0,755,756,5,167,
        0,0,756,757,5,299,0,0,757,758,3,278,139,0,758,759,5,251,0,0,759,
        760,5,216,0,0,760,761,3,34,17,0,761,1251,1,0,0,0,762,763,5,83,0,
        0,763,766,5,299,0,0,764,765,5,119,0,0,765,767,5,94,0,0,766,764,1,
        0,0,0,766,767,1,0,0,0,767,768,1,0,0,0,768,1251,3,278,139,0,769,770,
        5,23,0,0,770,771,5,299,0,0,771,772,3,278,139,0,772,773,5,223,0,0,
        773,774,5,269,0,0,774,775,3,280,140,0,775,1251,1,0,0,0,776,777,5,
        23,0,0,777,778,5,299,0,0,778,779,3,278,139,0,779,780,5,251,0,0,780,
        781,5,31,0,0,781,782,3,308,154,0,782,1251,1,0,0,0,783,784,5,37,0,
        0,784,785,3,290,145,0,785,794,5,1,0,0,786,791,3,236,118,0,787,788,
        5,3,0,0,788,790,3,236,118,0,789,787,1,0,0,0,790,793,1,0,0,0,791,
        789,1,0,0,0,791,792,1,0,0,0,792,795,1,0,0,0,793,791,1,0,0,0,794,
        786,1,0,0,0,794,795,1,0,0,0,795,796,1,0,0,0,796,797,5,2,0,0,797,
        1251,1,0,0,0,798,801,5,53,0,0,799,800,5,194,0,0,800,802,5,226,0,
        0,801,799,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,1251,3,242,
        121,0,804,805,5,83,0,0,805,808,5,107,0,0,806,807,5,119,0,0,807,809,
        5,94,0,0,808,806,1,0,0,0,808,809,1,0,0,0,809,810,1,0,0,0,810,1251,
        3,246,123,0,811,812,5,53,0,0,812,813,5,235,0,0,813,817,3,314,157,
        0,814,815,5,304,0,0,815,816,5,20,0,0,816,818,3,306,153,0,817,814,
        1,0,0,0,817,818,1,0,0,0,818,821,1,0,0,0,819,820,5,122,0,0,820,822,
        3,286,143,0,821,819,1,0,0,0,821,822,1,0,0,0,822,1251,1,0,0,0,823,
        824,5,83,0,0,824,825,5,235,0,0,825,828,3,314,157,0,826,827,5,122,
        0,0,827,829,3,286,143,0,828,826,1,0,0,0,828,829,1,0,0,0,829,1251,
        1,0,0,0,830,831,5,110,0,0,831,836,3,312,156,0,832,833,5,3,0,0,833,
        835,3,312,156,0,834,832,1,0,0,0,835,838,1,0,0,0,836,834,1,0,0,0,
        836,837,1,0,0,0,837,839,1,0,0,0,838,836,1,0,0,0,839,840,5,269,0,
        0,840,845,3,308,154,0,841,842,5,3,0,0,842,844,3,308,154,0,843,841,
        1,0,0,0,844,847,1,0,0,0,845,843,1,0,0,0,845,846,1,0,0,0,846,851,
        1,0,0,0,847,845,1,0,0,0,848,849,5,304,0,0,849,850,5,20,0,0,850,852,
        5,193,0,0,851,848,1,0,0,0,851,852,1,0,0,0,852,856,1,0,0,0,853,854,
        5,111,0,0,854,855,5,36,0,0,855,857,3,306,153,0,856,853,1,0,0,0,856,
        857,1,0,0,0,857,860,1,0,0,0,858,859,5,122,0,0,859,861,3,286,143,
        0,860,858,1,0,0,0,860,861,1,0,0,0,861,1251,1,0,0,0,862,873,5,110,
        0,0,863,868,3,312,156,0,864,865,5,3,0,0,865,867,3,312,156,0,866,
        864,1,0,0,0,867,870,1,0,0,0,868,866,1,0,0,0,868,869,1,0,0,0,869,
        874,1,0,0,0,870,868,1,0,0,0,871,872,5,22,0,0,872,874,5,215,0,0,873,
        863,1,0,0,0,873,871,1,0,0,0,874,875,1,0,0,0,875,876,5,190,0,0,876,
        877,3,270,135,0,877,878,5,269,0,0,878,882,3,308,154,0,879,880,5,
        304,0,0,880,881,5,110,0,0,881,883,5,193,0,0,882,879,1,0,0,0,882,
        883,1,0,0,0,883,1251,1,0,0,0,884,888,5,233,0,0,885,886,5,20,0,0,
        886,887,5,193,0,0,887,889,5,103,0,0,888,885,1,0,0,0,888,889,1,0,
        0,0,889,890,1,0,0,0,890,895,3,312,156,0,891,892,5,3,0,0,892,894,
        3,312,156,0,893,891,1,0,0,0,894,897,1,0,0,0,895,893,1,0,0,0,895,
        896,1,0,0,0,896,898,1,0,0,0,897,895,1,0,0,0,898,899,5,105,0,0,899,
        904,3,308,154,0,900,901,5,3,0,0,901,903,3,308,154,0,902,900,1,0,
        0,0,903,906,1,0,0,0,904,902,1,0,0,0,904,905,1,0,0,0,905,910,1,0,
        0,0,906,904,1,0,0,0,907,908,5,111,0,0,908,909,5,36,0,0,909,911,3,
        306,153,0,910,907,1,0,0,0,910,911,1,0,0,0,911,914,1,0,0,0,912,913,
        5,122,0,0,913,915,3,286,143,0,914,912,1,0,0,0,914,915,1,0,0,0,915,
        1251,1,0,0,0,916,920,5,233,0,0,917,918,5,110,0,0,918,919,5,193,0,
        0,919,921,5,103,0,0,920,917,1,0,0,0,920,921,1,0,0,0,921,932,1,0,
        0,0,922,927,3,312,156,0,923,924,5,3,0,0,924,926,3,312,156,0,925,
        923,1,0,0,0,926,929,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,
        933,1,0,0,0,929,927,1,0,0,0,930,931,5,22,0,0,931,933,5,215,0,0,932,
        922,1,0,0,0,932,930,1,0,0,0,933,934,1,0,0,0,934,935,5,190,0,0,935,
        936,3,270,135,0,936,937,5,105,0,0,937,938,3,308,154,0,938,1251,1,
        0,0,0,939,950,5,74,0,0,940,945,3,266,133,0,941,942,5,3,0,0,942,944,
        3,266,133,0,943,941,1,0,0,0,944,947,1,0,0,0,945,943,1,0,0,0,945,
        946,1,0,0,0,946,951,1,0,0,0,947,945,1,0,0,0,948,949,5,22,0,0,949,
        951,5,215,0,0,950,940,1,0,0,0,950,948,1,0,0,0,951,952,1,0,0,0,952,
        953,5,190,0,0,953,954,3,270,135,0,954,955,5,269,0,0,955,956,3,308,
        154,0,956,1251,1,0,0,0,957,958,5,251,0,0,958,962,5,235,0,0,959,963,
        5,22,0,0,960,963,5,180,0,0,961,963,3,314,157,0,962,959,1,0,0,0,962,
        960,1,0,0,0,962,961,1,0,0,0,963,966,1,0,0,0,964,965,5,122,0,0,965,
        967,3,286,143,0,966,964,1,0,0,0,966,967,1,0,0,0,967,1251,1,0,0,0,
        968,969,5,253,0,0,969,972,5,112,0,0,970,971,5,190,0,0,971,973,3,
        270,135,0,972,970,1,0,0,0,972,973,1,0,0,0,973,1251,1,0,0,0,974,986,
        5,95,0,0,975,976,5,1,0,0,976,981,3,230,115,0,977,978,5,3,0,0,978,
        980,3,230,115,0,979,977,1,0,0,0,980,983,1,0,0,0,981,979,1,0,0,0,
        981,982,1,0,0,0,982,984,1,0,0,0,983,981,1,0,0,0,984,985,5,2,0,0,
        985,987,1,0,0,0,986,975,1,0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,
        988,1251,3,16,8,0,989,990,5,95,0,0,990,992,5,24,0,0,991,993,5,297,
        0,0,992,991,1,0,0,0,992,993,1,0,0,0,993,994,1,0,0,0,994,1251,3,16,
        8,0,995,996,5,253,0,0,996,997,5,53,0,0,997,998,5,260,0,0,998,1251,
        3,274,137,0,999,1000,5,253,0,0,1000,1001,5,53,0,0,1001,1002,5,243,
        0,0,1002,1251,3,282,141,0,1003,1004,5,253,0,0,1004,1005,5,53,0,0,
        1005,1006,5,299,0,0,1006,1251,3,278,139,0,1007,1008,5,253,0,0,1008,
        1009,5,53,0,0,1009,1010,5,167,0,0,1010,1011,5,299,0,0,1011,1251,
        3,278,139,0,1012,1013,5,253,0,0,1013,1014,5,53,0,0,1014,1015,5,107,
        0,0,1015,1251,3,290,145,0,1016,1017,5,253,0,0,1017,1020,5,261,0,
        0,1018,1019,7,2,0,0,1019,1021,3,282,141,0,1020,1018,1,0,0,0,1020,
        1021,1,0,0,0,1021,1028,1,0,0,0,1022,1023,5,154,0,0,1023,1026,3,186,
        93,0,1024,1025,5,90,0,0,1025,1027,3,186,93,0,1026,1024,1,0,0,0,1026,
        1027,1,0,0,0,1027,1029,1,0,0,0,1028,1022,1,0,0,0,1028,1029,1,0,0,
        0,1029,1251,1,0,0,0,1030,1031,5,253,0,0,1031,1034,5,244,0,0,1032,
        1033,7,2,0,0,1033,1035,3,286,143,0,1034,1032,1,0,0,0,1034,1035,1,
        0,0,0,1035,1042,1,0,0,0,1036,1037,5,154,0,0,1037,1040,3,186,93,0,
        1038,1039,5,90,0,0,1039,1041,3,186,93,0,1040,1038,1,0,0,0,1040,1041,
        1,0,0,0,1041,1043,1,0,0,0,1042,1036,1,0,0,0,1042,1043,1,0,0,0,1043,
        1251,1,0,0,0,1044,1045,5,253,0,0,1045,1052,5,43,0,0,1046,1047,5,
        154,0,0,1047,1050,3,186,93,0,1048,1049,5,90,0,0,1049,1051,3,186,
        93,0,1050,1048,1,0,0,0,1050,1051,1,0,0,0,1051,1053,1,0,0,0,1052,
        1046,1,0,0,0,1052,1053,1,0,0,0,1053,1251,1,0,0,0,1054,1055,5,253,
        0,0,1055,1056,5,45,0,0,1056,1057,7,2,0,0,1057,1064,3,272,136,0,1058,
        1059,5,154,0,0,1059,1062,3,186,93,0,1060,1061,5,90,0,0,1061,1063,
        3,186,93,0,1062,1060,1,0,0,0,1062,1063,1,0,0,0,1063,1065,1,0,0,0,
        1064,1058,1,0,0,0,1064,1065,1,0,0,0,1065,1251,1,0,0,0,1066,1067,
        5,253,0,0,1067,1068,5,256,0,0,1068,1069,5,103,0,0,1069,1251,3,272,
        136,0,1070,1071,5,253,0,0,1071,1072,5,256,0,0,1072,1073,5,103,0,
        0,1073,1074,5,1,0,0,1074,1075,3,18,9,0,1075,1076,5,2,0,0,1076,1251,
        1,0,0,0,1077,1079,5,253,0,0,1078,1080,5,56,0,0,1079,1078,1,0,0,0,
        1079,1080,1,0,0,0,1080,1081,1,0,0,0,1081,1084,5,236,0,0,1082,1083,
        7,2,0,0,1083,1085,3,286,143,0,1084,1082,1,0,0,0,1084,1085,1,0,0,
        0,1085,1251,1,0,0,0,1086,1087,5,253,0,0,1087,1088,5,235,0,0,1088,
        1091,5,112,0,0,1089,1090,7,2,0,0,1090,1092,3,286,143,0,1091,1089,
        1,0,0,0,1091,1092,1,0,0,0,1092,1251,1,0,0,0,1093,1094,5,76,0,0,1094,
        1251,3,272,136,0,1095,1096,5,75,0,0,1096,1251,3,272,136,0,1097,1098,
        5,253,0,0,1098,1101,5,108,0,0,1099,1100,7,2,0,0,1100,1102,3,282,
        141,0,1101,1099,1,0,0,0,1101,1102,1,0,0,0,1102,1109,1,0,0,0,1103,
        1104,5,154,0,0,1104,1107,3,186,93,0,1105,1106,5,90,0,0,1106,1108,
        3,186,93,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,1110,1,0,0,0,
        1109,1103,1,0,0,0,1109,1110,1,0,0,0,1110,1251,1,0,0,0,1111,1112,
        5,253,0,0,1112,1119,5,250,0,0,1113,1114,5,154,0,0,1114,1117,3,186,
        93,0,1115,1116,5,90,0,0,1116,1118,3,186,93,0,1117,1115,1,0,0,0,1117,
        1118,1,0,0,0,1118,1120,1,0,0,0,1119,1113,1,0,0,0,1119,1120,1,0,0,
        0,1120,1251,1,0,0,0,1121,1122,5,251,0,0,1122,1123,5,250,0,0,1123,
        1124,5,31,0,0,1124,1251,3,318,159,0,1125,1126,5,227,0,0,1126,1127,
        5,250,0,0,1127,1251,5,31,0,0,1128,1129,5,251,0,0,1129,1130,5,250,
        0,0,1130,1131,3,300,150,0,1131,1132,5,312,0,0,1132,1133,3,154,77,
        0,1133,1251,1,0,0,0,1134,1135,5,227,0,0,1135,1136,5,250,0,0,1136,
        1251,3,300,150,0,1137,1138,5,255,0,0,1138,1147,5,271,0,0,1139,1144,
        3,232,116,0,1140,1141,5,3,0,0,1141,1143,3,232,116,0,1142,1140,1,
        0,0,0,1143,1146,1,0,0,0,1144,1142,1,0,0,0,1144,1145,1,0,0,0,1145,
        1148,1,0,0,0,1146,1144,1,0,0,0,1147,1139,1,0,0,0,1147,1148,1,0,0,
        0,1148,1251,1,0,0,0,1149,1151,5,47,0,0,1150,1152,5,307,0,0,1151,
        1150,1,0,0,0,1151,1152,1,0,0,0,1152,1251,1,0,0,0,1153,1155,5,237,
        0,0,1154,1156,5,307,0,0,1155,1154,1,0,0,0,1155,1156,1,0,0,0,1156,
        1251,1,0,0,0,1157,1158,5,214,0,0,1158,1159,3,314,157,0,1159,1160,
        5,105,0,0,1160,1161,3,16,8,0,1161,1251,1,0,0,0,1162,1163,5,68,0,
        0,1163,1164,5,214,0,0,1164,1251,3,314,157,0,1165,1166,5,93,0,0,1166,
        1176,3,314,157,0,1167,1168,5,290,0,0,1168,1173,3,154,77,0,1169,1170,
        5,3,0,0,1170,1172,3,154,77,0,1171,1169,1,0,0,0,1172,1175,1,0,0,0,
        1173,1171,1,0,0,0,1173,1174,1,0,0,0,1174,1177,1,0,0,0,1175,1173,
        1,0,0,0,1176,1167,1,0,0,0,1176,1177,1,0,0,0,1177,1251,1,0,0,0,1178,
        1179,5,93,0,0,1179,1180,5,121,0,0,1180,1190,3,186,93,0,1181,1182,
        5,290,0,0,1182,1187,3,154,77,0,1183,1184,5,3,0,0,1184,1186,3,154,
        77,0,1185,1183,1,0,0,0,1186,1189,1,0,0,0,1187,1185,1,0,0,0,1187,
        1188,1,0,0,0,1188,1191,1,0,0,0,1189,1187,1,0,0,0,1190,1181,1,0,0,
        0,1190,1191,1,0,0,0,1191,1251,1,0,0,0,1192,1193,5,76,0,0,1193,1194,
        5,126,0,0,1194,1251,3,314,157,0,1195,1196,5,76,0,0,1196,1197,5,198,
        0,0,1197,1251,3,314,157,0,1198,1199,5,251,0,0,1199,1200,5,205,0,
        0,1200,1251,3,240,120,0,1201,1202,5,251,0,0,1202,1203,5,267,0,0,
        1203,1206,5,311,0,0,1204,1207,5,157,0,0,1205,1207,3,154,77,0,1206,
        1204,1,0,0,0,1206,1205,1,0,0,0,1207,1251,1,0,0,0,1208,1209,5,287,
        0,0,1209,1210,3,274,137,0,1210,1211,5,251,0,0,1211,1216,3,228,114,
        0,1212,1213,5,3,0,0,1213,1215,3,228,114,0,1214,1212,1,0,0,0,1215,
        1218,1,0,0,0,1216,1214,1,0,0,0,1216,1217,1,0,0,0,1217,1220,1,0,0,
        0,1218,1216,1,0,0,0,1219,1221,3,54,27,0,1220,1219,1,0,0,0,1220,1221,
        1,0,0,0,1221,1251,1,0,0,0,1222,1223,5,169,0,0,1223,1224,5,130,0,
        0,1224,1229,3,274,137,0,1225,1227,5,28,0,0,1226,1225,1,0,0,0,1226,
        1227,1,0,0,0,1227,1228,1,0,0,0,1228,1230,3,314,157,0,1229,1226,1,
        0,0,0,1229,1230,1,0,0,0,1230,1231,1,0,0,0,1231,1232,5,290,0,0,1232,
        1233,3,88,44,0,1233,1234,5,190,0,0,1234,1236,3,154,77,0,1235,1237,
        3,212,106,0,1236,1235,1,0,0,0,1237,1238,1,0,0,0,1238,1236,1,0,0,
        0,1238,1239,1,0,0,0,1239,1251,1,0,0,0,1240,1241,5,253,0,0,1241,1242,
        5,46,0,0,1242,1243,5,190,0,0,1243,1244,5,260,0,0,1244,1251,3,274,
        137,0,1245,1246,5,253,0,0,1246,1247,5,46,0,0,1247,1248,5,190,0,0,
        1248,1249,5,44,0,0,1249,1251,3,294,147,0,1250,355,1,0,0,0,1250,356,
        1,0,0,0,1250,358,1,0,0,0,1250,380,1,0,0,0,1250,390,1,0,0,0,1250,
        406,1,0,0,0,1250,416,1,0,0,0,1250,423,1,0,0,0,1250,430,1,0,0,0,1250,
        468,1,0,0,0,1250,498,1,0,0,0,1250,505,1,0,0,0,1250,513,1,0,0,0,1250,
        519,1,0,0,0,1250,522,1,0,0,0,1250,531,1,0,0,0,1250,540,1,0,0,0,1250,
        549,1,0,0,0,1250,560,1,0,0,0,1250,576,1,0,0,0,1250,593,1,0,0,0,1250,
        608,1,0,0,0,1250,623,1,0,0,0,1250,637,1,0,0,0,1250,644,1,0,0,0,1250,
        651,1,0,0,0,1250,673,1,0,0,0,1250,679,1,0,0,0,1250,708,1,0,0,0,1250,
        730,1,0,0,0,1250,734,1,0,0,0,1250,742,1,0,0,0,1250,754,1,0,0,0,1250,
        762,1,0,0,0,1250,769,1,0,0,0,1250,776,1,0,0,0,1250,783,1,0,0,0,1250,
        798,1,0,0,0,1250,804,1,0,0,0,1250,811,1,0,0,0,1250,823,1,0,0,0,1250,
        830,1,0,0,0,1250,862,1,0,0,0,1250,884,1,0,0,0,1250,916,1,0,0,0,1250,
        939,1,0,0,0,1250,957,1,0,0,0,1250,968,1,0,0,0,1250,974,1,0,0,0,1250,
        989,1,0,0,0,1250,995,1,0,0,0,1250,999,1,0,0,0,1250,1003,1,0,0,0,
        1250,1007,1,0,0,0,1250,1012,1,0,0,0,1250,1016,1,0,0,0,1250,1030,
        1,0,0,0,1250,1044,1,0,0,0,1250,1054,1,0,0,0,1250,1066,1,0,0,0,1250,
        1070,1,0,0,0,1250,1077,1,0,0,0,1250,1086,1,0,0,0,1250,1093,1,0,0,
        0,1250,1095,1,0,0,0,1250,1097,1,0,0,0,1250,1111,1,0,0,0,1250,1121,
        1,0,0,0,1250,1125,1,0,0,0,1250,1128,1,0,0,0,1250,1134,1,0,0,0,1250,
        1137,1,0,0,0,1250,1149,1,0,0,0,1250,1153,1,0,0,0,1250,1157,1,0,0,
        0,1250,1162,1,0,0,0,1250,1165,1,0,0,0,1250,1178,1,0,0,0,1250,1192,
        1,0,0,0,1250,1195,1,0,0,0,1250,1198,1,0,0,0,1250,1201,1,0,0,0,1250,
        1208,1,0,0,0,1250,1222,1,0,0,0,1250,1240,1,0,0,0,1250,1245,1,0,0,
        0,1251,17,1,0,0,0,1252,1254,3,20,10,0,1253,1252,1,0,0,0,1253,1254,
        1,0,0,0,1254,1255,1,0,0,0,1255,1256,3,22,11,0,1256,19,1,0,0,0,1257,
        1258,5,304,0,0,1258,1263,3,242,121,0,1259,1260,5,3,0,0,1260,1262,
        3,242,121,0,1261,1259,1,0,0,0,1262,1265,1,0,0,0,1263,1261,1,0,0,
        0,1263,1264,1,0,0,0,1264,21,1,0,0,0,1265,1263,1,0,0,0,1266,1268,
        3,24,12,0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1269,1,0,0,0,
        1269,1270,3,40,20,0,1270,23,1,0,0,0,1271,1273,5,304,0,0,1272,1274,
        5,221,0,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,1275,1,0,0,0,
        1275,1280,3,74,37,0,1276,1277,5,3,0,0,1277,1279,3,74,37,0,1278,1276,
        1,0,0,0,1279,1282,1,0,0,0,1280,1278,1,0,0,0,1280,1281,1,0,0,0,1281,
        25,1,0,0,0,1282,1280,1,0,0,0,1283,1286,3,28,14,0,1284,1286,3,30,
        15,0,1285,1283,1,0,0,0,1285,1284,1,0,0,0,1286,27,1,0,0,0,1287,1288,
        3,298,149,0,1288,1291,3,202,101,0,1289,1290,5,182,0,0,1290,1292,
        5,183,0,0,1291,1289,1,0,0,0,1291,1292,1,0,0,0,1292,1295,1,0,0,0,
        1293,1294,5,46,0,0,1294,1296,3,186,93,0,1295,1293,1,0,0,0,1295,1296,
        1,0,0,0,1296,1299,1,0,0,0,1297,1298,5,304,0,0,1298,1300,3,32,16,
        0,1299,1297,1,0,0,0,1299,1300,1,0,0,0,1300,29,1,0,0,0,1301,1302,
        5,154,0,0,1302,1305,3,274,137,0,1303,1304,7,3,0,0,1304,1306,5,216,
        0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,0,1306,31,1,0,0,0,1307,1308,
        5,1,0,0,1308,1309,3,34,17,0,1309,1310,5,2,0,0,1310,33,1,0,0,0,1311,
        1316,3,36,18,0,1312,1313,5,3,0,0,1313,1315,3,36,18,0,1314,1312,1,
        0,0,0,1315,1318,1,0,0,0,1316,1314,1,0,0,0,1316,1317,1,0,0,0,1317,
        35,1,0,0,0,1318,1316,1,0,0,0,1319,1320,3,314,157,0,1320,1321,5,312,
        0,0,1321,1322,3,38,19,0,1322,37,1,0,0,0,1323,1326,5,70,0,0,1324,
        1326,3,154,77,0,1325,1323,1,0,0,0,1325,1324,1,0,0,0,1326,39,1,0,
        0,0,1327,1338,3,46,23,0,1328,1329,5,195,0,0,1329,1330,5,36,0,0,1330,
        1335,3,50,25,0,1331,1332,5,3,0,0,1332,1334,3,50,25,0,1333,1331,1,
        0,0,0,1334,1337,1,0,0,0,1335,1333,1,0,0,0,1335,1336,1,0,0,0,1336,
        1339,1,0,0,0,1337,1335,1,0,0,0,1338,1328,1,0,0,0,1338,1339,1,0,0,
        0,1339,1345,1,0,0,0,1340,1341,5,188,0,0,1341,1343,3,44,22,0,1342,
        1344,7,4,0,0,1343,1342,1,0,0,0,1343,1344,1,0,0,0,1344,1346,1,0,0,
        0,1345,1340,1,0,0,0,1345,1346,1,0,0,0,1346,1360,1,0,0,0,1347,1348,
        5,155,0,0,1348,1361,3,42,21,0,1349,1350,5,98,0,0,1350,1352,7,5,0,
        0,1351,1353,3,44,22,0,1352,1351,1,0,0,0,1352,1353,1,0,0,0,1353,1354,
        1,0,0,0,1354,1358,7,4,0,0,1355,1359,5,192,0,0,1356,1357,5,304,0,
        0,1357,1359,5,266,0,0,1358,1355,1,0,0,0,1358,1356,1,0,0,0,1359,1361,
        1,0,0,0,1360,1347,1,0,0,0,1360,1349,1,0,0,0,1360,1361,1,0,0,0,1361,
        41,1,0,0,0,1362,1365,5,22,0,0,1363,1365,3,44,22,0,1364,1362,1,0,
        0,0,1364,1363,1,0,0,0,1365,43,1,0,0,0,1366,1367,7,6,0,0,1367,45,
        1,0,0,0,1368,1369,6,23,-1,0,1369,1370,3,48,24,0,1370,1385,1,0,0,
        0,1371,1372,10,2,0,0,1372,1374,5,128,0,0,1373,1375,3,76,38,0,1374,
        1373,1,0,0,0,1374,1375,1,0,0,0,1375,1376,1,0,0,0,1376,1384,3,46,
        23,3,1377,1378,10,1,0,0,1378,1380,7,7,0,0,1379,1381,3,76,38,0,1380,
        1379,1,0,0,0,1380,1381,1,0,0,0,1381,1382,1,0,0,0,1382,1384,3,46,
        23,2,1383,1371,1,0,0,0,1383,1377,1,0,0,0,1384,1387,1,0,0,0,1385,
        1383,1,0,0,0,1385,1386,1,0,0,0,1386,47,1,0,0,0,1387,1385,1,0,0,0,
        1388,1405,3,52,26,0,1389,1390,5,260,0,0,1390,1405,3,274,137,0,1391,
        1392,5,296,0,0,1392,1397,3,154,77,0,1393,1394,5,3,0,0,1394,1396,
        3,154,77,0,1395,1393,1,0,0,0,1396,1399,1,0,0,0,1397,1395,1,0,0,0,
        1397,1398,1,0,0,0,1398,1405,1,0,0,0,1399,1397,1,0,0,0,1400,1401,
        5,1,0,0,1401,1402,3,40,20,0,1402,1403,5,2,0,0,1403,1405,1,0,0,0,
        1404,1388,1,0,0,0,1404,1389,1,0,0,0,1404,1391,1,0,0,0,1404,1400,
        1,0,0,0,1405,49,1,0,0,0,1406,1409,3,294,147,0,1407,1409,3,154,77,
        0,1408,1406,1,0,0,0,1408,1407,1,0,0,0,1409,1411,1,0,0,0,1410,1412,
        7,8,0,0,1411,1410,1,0,0,0,1411,1412,1,0,0,0,1412,1415,1,0,0,0,1413,
        1414,5,185,0,0,1414,1416,7,9,0,0,1415,1413,1,0,0,0,1415,1416,1,0,
        0,0,1416,51,1,0,0,0,1417,1419,5,248,0,0,1418,1420,3,76,38,0,1419,
        1418,1,0,0,0,1419,1420,1,0,0,0,1420,1421,1,0,0,0,1421,1431,3,58,
        29,0,1422,1423,5,105,0,0,1423,1428,3,88,44,0,1424,1425,5,3,0,0,1425,
        1427,3,88,44,0,1426,1424,1,0,0,0,1427,1430,1,0,0,0,1428,1426,1,0,
        0,0,1428,1429,1,0,0,0,1429,1432,1,0,0,0,1430,1428,1,0,0,0,1431,1422,
        1,0,0,0,1431,1432,1,0,0,0,1432,1434,1,0,0,0,1433,1435,3,54,27,0,
        1434,1433,1,0,0,0,1434,1435,1,0,0,0,1435,1439,1,0,0,0,1436,1437,
        5,114,0,0,1437,1438,5,36,0,0,1438,1440,3,60,30,0,1439,1436,1,0,0,
        0,1439,1440,1,0,0,0,1440,1442,1,0,0,0,1441,1443,3,56,28,0,1442,1441,
        1,0,0,0,1442,1443,1,0,0,0,1443,1453,1,0,0,0,1444,1445,5,303,0,0,
        1445,1450,3,70,35,0,1446,1447,5,3,0,0,1447,1449,3,70,35,0,1448,1446,
        1,0,0,0,1449,1452,1,0,0,0,1450,1448,1,0,0,0,1450,1451,1,0,0,0,1451,
        1454,1,0,0,0,1452,1450,1,0,0,0,1453,1444,1,0,0,0,1453,1454,1,0,0,
        0,1454,53,1,0,0,0,1455,1456,5,301,0,0,1456,1457,3,156,78,0,1457,
        55,1,0,0,0,1458,1459,5,117,0,0,1459,1460,3,156,78,0,1460,57,1,0,
        0,0,1461,1466,3,78,39,0,1462,1463,5,3,0,0,1463,1465,3,78,39,0,1464,
        1462,1,0,0,0,1465,1468,1,0,0,0,1466,1464,1,0,0,0,1466,1467,1,0,0,
        0,1467,59,1,0,0,0,1468,1466,1,0,0,0,1469,1471,3,76,38,0,1470,1469,
        1,0,0,0,1470,1471,1,0,0,0,1471,1472,1,0,0,0,1472,1477,3,64,32,0,
        1473,1474,5,3,0,0,1474,1476,3,64,32,0,1475,1473,1,0,0,0,1476,1479,
        1,0,0,0,1477,1475,1,0,0,0,1477,1478,1,0,0,0,1478,61,1,0,0,0,1479,
        1477,1,0,0,0,1480,1485,3,154,77,0,1481,1482,5,3,0,0,1482,1484,3,
        154,77,0,1483,1481,1,0,0,0,1484,1487,1,0,0,0,1485,1483,1,0,0,0,1485,
        1486,1,0,0,0,1486,63,1,0,0,0,1487,1485,1,0,0,0,1488,1529,3,66,33,
        0,1489,1490,5,238,0,0,1490,1499,5,1,0,0,1491,1496,3,66,33,0,1492,
        1493,5,3,0,0,1493,1495,3,66,33,0,1494,1492,1,0,0,0,1495,1498,1,0,
        0,0,1496,1494,1,0,0,0,1496,1497,1,0,0,0,1497,1500,1,0,0,0,1498,1496,
        1,0,0,0,1499,1491,1,0,0,0,1499,1500,1,0,0,0,1500,1501,1,0,0,0,1501,
        1529,5,2,0,0,1502,1503,5,55,0,0,1503,1512,5,1,0,0,1504,1509,3,66,
        33,0,1505,1506,5,3,0,0,1506,1508,3,66,33,0,1507,1505,1,0,0,0,1508,
        1511,1,0,0,0,1509,1507,1,0,0,0,1509,1510,1,0,0,0,1510,1513,1,0,0,
        0,1511,1509,1,0,0,0,1512,1504,1,0,0,0,1512,1513,1,0,0,0,1513,1514,
        1,0,0,0,1514,1529,5,2,0,0,1515,1516,5,115,0,0,1516,1517,5,252,0,
        0,1517,1518,5,1,0,0,1518,1523,3,66,33,0,1519,1520,5,3,0,0,1520,1522,
        3,66,33,0,1521,1519,1,0,0,0,1522,1525,1,0,0,0,1523,1521,1,0,0,0,
        1523,1524,1,0,0,0,1524,1526,1,0,0,0,1525,1523,1,0,0,0,1526,1527,
        5,2,0,0,1527,1529,1,0,0,0,1528,1488,1,0,0,0,1528,1489,1,0,0,0,1528,
        1502,1,0,0,0,1528,1515,1,0,0,0,1529,65,1,0,0,0,1530,1539,5,1,0,0,
        1531,1536,3,68,34,0,1532,1533,5,3,0,0,1533,1535,3,68,34,0,1534,1532,
        1,0,0,0,1535,1538,1,0,0,0,1536,1534,1,0,0,0,1536,1537,1,0,0,0,1537,
        1540,1,0,0,0,1538,1536,1,0,0,0,1539,1531,1,0,0,0,1539,1540,1,0,0,
        0,1540,1541,1,0,0,0,1541,1544,5,2,0,0,1542,1544,3,68,34,0,1543,1530,
        1,0,0,0,1543,1542,1,0,0,0,1544,67,1,0,0,0,1545,1548,3,294,147,0,
        1546,1548,3,154,77,0,1547,1545,1,0,0,0,1547,1546,1,0,0,0,1548,69,
        1,0,0,0,1549,1550,3,314,157,0,1550,1551,5,28,0,0,1551,1552,5,1,0,
        0,1552,1553,3,72,36,0,1553,1554,5,2,0,0,1554,71,1,0,0,0,1555,1557,
        3,314,157,0,1556,1555,1,0,0,0,1556,1557,1,0,0,0,1557,1561,1,0,0,
        0,1558,1559,5,201,0,0,1559,1560,5,36,0,0,1560,1562,3,62,31,0,1561,
        1558,1,0,0,0,1561,1562,1,0,0,0,1562,1573,1,0,0,0,1563,1564,5,195,
        0,0,1564,1565,5,36,0,0,1565,1570,3,50,25,0,1566,1567,5,3,0,0,1567,
        1569,3,50,25,0,1568,1566,1,0,0,0,1569,1572,1,0,0,0,1570,1568,1,0,
        0,0,1570,1571,1,0,0,0,1571,1574,1,0,0,0,1572,1570,1,0,0,0,1573,1563,
        1,0,0,0,1573,1574,1,0,0,0,1574,1576,1,0,0,0,1575,1577,3,216,108,
        0,1576,1575,1,0,0,0,1576,1577,1,0,0,0,1577,73,1,0,0,0,1578,1580,
        3,314,157,0,1579,1581,3,124,62,0,1580,1579,1,0,0,0,1580,1581,1,0,
        0,0,1581,1582,1,0,0,0,1582,1583,5,28,0,0,1583,1584,5,1,0,0,1584,
        1585,3,22,11,0,1585,1586,5,2,0,0,1586,75,1,0,0,0,1587,1588,7,10,
        0,0,1588,77,1,0,0,0,1589,1592,3,84,42,0,1590,1592,3,86,43,0,1591,
        1589,1,0,0,0,1591,1590,1,0,0,0,1592,1597,1,0,0,0,1593,1595,5,28,
        0,0,1594,1593,1,0,0,0,1594,1595,1,0,0,0,1595,1596,1,0,0,0,1596,1598,
        3,314,157,0,1597,1594,1,0,0,0,1597,1598,1,0,0,0,1598,1606,1,0,0,
        0,1599,1602,3,82,41,0,1600,1601,5,28,0,0,1601,1603,3,124,62,0,1602,
        1600,1,0,0,0,1602,1603,1,0,0,0,1603,1606,1,0,0,0,1604,1606,3,80,
        40,0,1605,1591,1,0,0,0,1605,1599,1,0,0,0,1605,1604,1,0,0,0,1606,
        79,1,0,0,0,1607,1608,5,320,0,0,1608,81,1,0,0,0,1609,1610,3,162,81,
        0,1610,1611,5,4,0,0,1611,1612,5,320,0,0,1612,83,1,0,0,0,1613,1614,
        3,294,147,0,1614,85,1,0,0,0,1615,1616,3,154,77,0,1616,87,1,0,0,0,
        1617,1618,6,44,-1,0,1618,1619,3,94,47,0,1619,1638,1,0,0,0,1620,1634,
        10,2,0,0,1621,1622,5,54,0,0,1622,1623,5,136,0,0,1623,1635,3,94,47,
        0,1624,1625,3,90,45,0,1625,1626,5,136,0,0,1626,1627,3,88,44,0,1627,
        1628,3,92,46,0,1628,1635,1,0,0,0,1629,1630,5,172,0,0,1630,1631,3,
        90,45,0,1631,1632,5,136,0,0,1632,1633,3,94,47,0,1633,1635,1,0,0,
        0,1634,1621,1,0,0,0,1634,1624,1,0,0,0,1634,1629,1,0,0,0,1635,1637,
        1,0,0,0,1636,1620,1,0,0,0,1637,1640,1,0,0,0,1638,1636,1,0,0,0,1638,
        1639,1,0,0,0,1639,89,1,0,0,0,1640,1638,1,0,0,0,1641,1643,5,125,0,
        0,1642,1641,1,0,0,0,1642,1643,1,0,0,0,1643,1657,1,0,0,0,1644,1646,
        5,152,0,0,1645,1647,5,197,0,0,1646,1645,1,0,0,0,1646,1647,1,0,0,
        0,1647,1657,1,0,0,0,1648,1650,5,234,0,0,1649,1651,5,197,0,0,1650,
        1649,1,0,0,0,1650,1651,1,0,0,0,1651,1657,1,0,0,0,1652,1654,5,106,
        0,0,1653,1655,5,197,0,0,1654,1653,1,0,0,0,1654,1655,1,0,0,0,1655,
        1657,1,0,0,0,1656,1642,1,0,0,0,1656,1644,1,0,0,0,1656,1648,1,0,0,
        0,1656,1652,1,0,0,0,1657,91,1,0,0,0,1658,1659,5,190,0,0,1659,1673,
        3,156,78,0,1660,1661,5,290,0,0,1661,1662,5,1,0,0,1662,1667,3,314,
        157,0,1663,1664,5,3,0,0,1664,1666,3,314,157,0,1665,1663,1,0,0,0,
        1666,1669,1,0,0,0,1667,1665,1,0,0,0,1667,1668,1,0,0,0,1668,1670,
        1,0,0,0,1669,1667,1,0,0,0,1670,1671,5,2,0,0,1671,1673,1,0,0,0,1672,
        1658,1,0,0,0,1672,1660,1,0,0,0,1673,93,1,0,0,0,1674,1681,3,104,52,
        0,1675,1676,5,262,0,0,1676,1677,3,96,48,0,1677,1678,5,1,0,0,1678,
        1679,3,154,77,0,1679,1680,5,2,0,0,1680,1682,1,0,0,0,1681,1675,1,
        0,0,0,1681,1682,1,0,0,0,1682,95,1,0,0,0,1683,1684,7,11,0,0,1684,
        97,1,0,0,0,1685,1686,7,12,0,0,1686,99,1,0,0,0,1687,1694,5,89,0,0,
        1688,1690,5,274,0,0,1689,1691,3,186,93,0,1690,1689,1,0,0,0,1690,
        1691,1,0,0,0,1691,1692,1,0,0,0,1692,1694,3,102,51,0,1693,1687,1,
        0,0,0,1693,1688,1,0,0,0,1694,101,1,0,0,0,1695,1696,5,304,0,0,1696,
        1700,5,51,0,0,1697,1698,5,306,0,0,1698,1700,5,51,0,0,1699,1695,1,
        0,0,0,1699,1697,1,0,0,0,1700,103,1,0,0,0,1701,1777,3,118,59,0,1702,
        1703,5,166,0,0,1703,1707,5,1,0,0,1704,1705,5,201,0,0,1705,1706,5,
        36,0,0,1706,1708,3,62,31,0,1707,1704,1,0,0,0,1707,1708,1,0,0,0,1708,
        1719,1,0,0,0,1709,1710,5,195,0,0,1710,1711,5,36,0,0,1711,1716,3,
        50,25,0,1712,1713,5,3,0,0,1713,1715,3,50,25,0,1714,1712,1,0,0,0,
        1715,1718,1,0,0,0,1716,1714,1,0,0,0,1716,1717,1,0,0,0,1717,1720,
        1,0,0,0,1718,1716,1,0,0,0,1719,1709,1,0,0,0,1719,1720,1,0,0,0,1720,
        1730,1,0,0,0,1721,1722,5,168,0,0,1722,1727,3,106,53,0,1723,1724,
        5,3,0,0,1724,1726,3,106,53,0,1725,1723,1,0,0,0,1726,1729,1,0,0,0,
        1727,1725,1,0,0,0,1727,1728,1,0,0,0,1728,1731,1,0,0,0,1729,1727,
        1,0,0,0,1730,1721,1,0,0,0,1730,1731,1,0,0,0,1731,1733,1,0,0,0,1732,
        1734,3,108,54,0,1733,1732,1,0,0,0,1733,1734,1,0,0,0,1734,1738,1,
        0,0,0,1735,1736,5,21,0,0,1736,1737,5,163,0,0,1737,1739,3,112,56,
        0,1738,1735,1,0,0,0,1738,1739,1,0,0,0,1739,1741,1,0,0,0,1740,1742,
        7,13,0,0,1741,1740,1,0,0,0,1741,1742,1,0,0,0,1742,1743,1,0,0,0,1743,
        1744,5,206,0,0,1744,1745,5,1,0,0,1745,1746,3,222,111,0,1746,1756,
        5,2,0,0,1747,1748,5,257,0,0,1748,1753,3,114,57,0,1749,1750,5,3,0,
        0,1750,1752,3,114,57,0,1751,1749,1,0,0,0,1752,1755,1,0,0,0,1753,
        1751,1,0,0,0,1753,1754,1,0,0,0,1754,1757,1,0,0,0,1755,1753,1,0,0,
        0,1756,1747,1,0,0,0,1756,1757,1,0,0,0,1757,1758,1,0,0,0,1758,1759,
        5,71,0,0,1759,1764,3,116,58,0,1760,1761,5,3,0,0,1761,1763,3,116,
        58,0,1762,1760,1,0,0,0,1763,1766,1,0,0,0,1764,1762,1,0,0,0,1764,
        1765,1,0,0,0,1765,1767,1,0,0,0,1766,1764,1,0,0,0,1767,1775,5,2,0,
        0,1768,1770,5,28,0,0,1769,1768,1,0,0,0,1769,1770,1,0,0,0,1770,1771,
        1,0,0,0,1771,1773,3,314,157,0,1772,1774,3,124,62,0,1773,1772,1,0,
        0,0,1773,1774,1,0,0,0,1774,1776,1,0,0,0,1775,1769,1,0,0,0,1775,1776,
        1,0,0,0,1776,1778,1,0,0,0,1777,1702,1,0,0,0,1777,1778,1,0,0,0,1778,
        105,1,0,0,0,1779,1780,3,154,77,0,1780,1781,5,28,0,0,1781,1782,3,
        314,157,0,1782,107,1,0,0,0,1783,1784,5,191,0,0,1784,1785,5,239,0,
        0,1785,1786,5,207,0,0,1786,1795,5,163,0,0,1787,1788,5,22,0,0,1788,
        1789,5,240,0,0,1789,1790,5,207,0,0,1790,1792,5,163,0,0,1791,1793,
        3,110,55,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,1793,1795,1,0,0,0,
        1794,1783,1,0,0,0,1794,1787,1,0,0,0,1795,109,1,0,0,0,1796,1797,5,
        253,0,0,1797,1798,5,85,0,0,1798,1806,5,165,0,0,1799,1800,5,189,0,
        0,1800,1801,5,85,0,0,1801,1806,5,165,0,0,1802,1803,5,304,0,0,1803,
        1804,5,284,0,0,1804,1806,5,240,0,0,1805,1796,1,0,0,0,1805,1799,1,
        0,0,0,1805,1802,1,0,0,0,1806,111,1,0,0,0,1807,1808,5,5,0,0,1808,
        1809,5,269,0,0,1809,1810,5,174,0,0,1810,1827,5,239,0,0,1811,1812,
        5,5,0,0,1812,1813,5,204,0,0,1813,1814,5,148,0,0,1814,1827,5,239,
        0,0,1815,1816,5,5,0,0,1816,1817,5,269,0,0,1817,1818,5,101,0,0,1818,
        1827,3,314,157,0,1819,1820,5,5,0,0,1820,1821,5,269,0,0,1821,1822,
        5,148,0,0,1822,1827,3,314,157,0,1823,1824,5,5,0,0,1824,1825,5,269,
        0,0,1825,1827,3,314,157,0,1826,1807,1,0,0,0,1826,1811,1,0,0,0,1826,
        1815,1,0,0,0,1826,1819,1,0,0,0,1826,1823,1,0,0,0,1827,113,1,0,0,
        0,1828,1829,3,314,157,0,1829,1830,5,312,0,0,1830,1831,5,1,0,0,1831,
        1836,3,314,157,0,1832,1833,5,3,0,0,1833,1835,3,314,157,0,1834,1832,
        1,0,0,0,1835,1838,1,0,0,0,1836,1834,1,0,0,0,1836,1837,1,0,0,0,1837,
        1839,1,0,0,0,1838,1836,1,0,0,0,1839,1840,5,2,0,0,1840,115,1,0,0,
        0,1841,1842,3,314,157,0,1842,1843,5,28,0,0,1843,1844,3,154,77,0,
        1844,117,1,0,0,0,1845,1853,3,126,63,0,1846,1848,5,28,0,0,1847,1846,
        1,0,0,0,1847,1848,1,0,0,0,1848,1849,1,0,0,0,1849,1851,3,314,157,
        0,1850,1852,3,124,62,0,1851,1850,1,0,0,0,1851,1852,1,0,0,0,1852,
        1854,1,0,0,0,1853,1847,1,0,0,0,1853,1854,1,0,0,0,1854,119,1,0,0,
        0,1855,1856,5,1,0,0,1856,1861,3,298,149,0,1857,1858,5,3,0,0,1858,
        1860,3,298,149,0,1859,1857,1,0,0,0,1860,1863,1,0,0,0,1861,1859,1,
        0,0,0,1861,1862,1,0,0,0,1862,1864,1,0,0,0,1863,1861,1,0,0,0,1864,
        1865,5,2,0,0,1865,121,1,0,0,0,1866,1867,5,1,0,0,1867,1872,3,294,
        147,0,1868,1869,5,3,0,0,1869,1871,3,294,147,0,1870,1868,1,0,0,0,
        1871,1874,1,0,0,0,1872,1870,1,0,0,0,1872,1873,1,0,0,0,1873,1875,
        1,0,0,0,1874,1872,1,0,0,0,1875,1876,5,2,0,0,1876,123,1,0,0,0,1877,
        1878,5,1,0,0,1878,1883,3,314,157,0,1879,1880,5,3,0,0,1880,1882,3,
        314,157,0,1881,1879,1,0,0,0,1882,1885,1,0,0,0,1883,1881,1,0,0,0,
        1883,1884,1,0,0,0,1884,1886,1,0,0,0,1885,1883,1,0,0,0,1886,1887,
        5,2,0,0,1887,125,1,0,0,0,1888,1890,3,272,136,0,1889,1891,3,302,151,
        0,1890,1889,1,0,0,0,1890,1891,1,0,0,0,1891,1898,1,0,0,0,1892,1898,
        3,128,64,0,1893,1894,5,1,0,0,1894,1895,3,88,44,0,1895,1896,5,2,0,
        0,1896,1898,1,0,0,0,1897,1888,1,0,0,0,1897,1892,1,0,0,0,1897,1893,
        1,0,0,0,1898,127,1,0,0,0,1899,1900,5,1,0,0,1900,1901,3,22,11,0,1901,
        1902,5,2,0,0,1902,1963,1,0,0,0,1903,1904,5,285,0,0,1904,1905,5,1,
        0,0,1905,1910,3,154,77,0,1906,1907,5,3,0,0,1907,1909,3,154,77,0,
        1908,1906,1,0,0,0,1909,1912,1,0,0,0,1910,1908,1,0,0,0,1910,1911,
        1,0,0,0,1911,1913,1,0,0,0,1912,1910,1,0,0,0,1913,1916,5,2,0,0,1914,
        1915,5,304,0,0,1915,1917,5,196,0,0,1916,1914,1,0,0,0,1916,1917,1,
        0,0,0,1917,1963,1,0,0,0,1918,1919,5,149,0,0,1919,1920,5,1,0,0,1920,
        1921,3,22,11,0,1921,1922,5,2,0,0,1922,1963,1,0,0,0,1923,1924,5,260,
        0,0,1924,1925,5,1,0,0,1925,1926,3,140,70,0,1926,1927,5,2,0,0,1927,
        1963,1,0,0,0,1928,1929,5,142,0,0,1929,1930,5,1,0,0,1930,1931,3,164,
        82,0,1931,1932,5,45,0,0,1932,1933,5,1,0,0,1933,1938,3,130,65,0,1934,
        1935,5,3,0,0,1935,1937,3,130,65,0,1936,1934,1,0,0,0,1937,1940,1,
        0,0,0,1938,1936,1,0,0,0,1938,1939,1,0,0,0,1939,1941,1,0,0,0,1940,
        1938,1,0,0,0,1941,1953,5,2,0,0,1942,1943,5,210,0,0,1943,1944,5,1,
        0,0,1944,1945,3,132,66,0,1945,1946,5,2,0,0,1946,1954,1,0,0,0,1947,
        1948,5,210,0,0,1948,1949,5,70,0,0,1949,1950,5,1,0,0,1950,1951,3,
        138,69,0,1951,1952,5,2,0,0,1952,1954,1,0,0,0,1953,1942,1,0,0,0,1953,
        1947,1,0,0,0,1953,1954,1,0,0,0,1954,1958,1,0,0,0,1955,1956,7,14,
        0,0,1956,1957,5,190,0,0,1957,1959,5,89,0,0,1958,1955,1,0,0,0,1958,
        1959,1,0,0,0,1959,1960,1,0,0,0,1960,1961,5,2,0,0,1961,1963,1,0,0,
        0,1962,1899,1,0,0,0,1962,1903,1,0,0,0,1962,1918,1,0,0,0,1962,1923,
        1,0,0,0,1962,1928,1,0,0,0,1963,129,1,0,0,0,1964,1965,3,314,157,0,
        1965,1966,5,103,0,0,1966,1967,5,196,0,0,1967,2042,1,0,0,0,1968,1969,
        3,314,157,0,1969,1972,3,202,101,0,1970,1971,5,205,0,0,1971,1973,
        3,186,93,0,1972,1970,1,0,0,0,1972,1973,1,0,0,0,1973,1978,1,0,0,0,
        1974,1975,3,174,87,0,1975,1976,5,190,0,0,1976,1977,5,85,0,0,1977,
        1979,1,0,0,0,1978,1974,1,0,0,0,1978,1979,1,0,0,0,1979,1984,1,0,0,
        0,1980,1981,3,174,87,0,1981,1982,5,190,0,0,1982,1983,5,89,0,0,1983,
        1985,1,0,0,0,1984,1980,1,0,0,0,1984,1985,1,0,0,0,1985,2042,1,0,0,
        0,1986,1987,3,314,157,0,1987,1988,3,202,101,0,1988,1989,5,104,0,
        0,1989,1992,3,168,84,0,1990,1991,5,205,0,0,1991,1993,3,186,93,0,
        1992,1990,1,0,0,0,1992,1993,1,0,0,0,1993,1997,1,0,0,0,1994,1995,
        3,176,88,0,1995,1996,5,308,0,0,1996,1998,1,0,0,0,1997,1994,1,0,0,
        0,1997,1998,1,0,0,0,1998,2006,1,0,0,0,1999,2000,7,15,0,0,2000,2004,
        5,218,0,0,2001,2002,5,190,0,0,2002,2003,5,242,0,0,2003,2005,5,264,
        0,0,2004,2001,1,0,0,0,2004,2005,1,0,0,0,2005,2007,1,0,0,0,2006,1999,
        1,0,0,0,2006,2007,1,0,0,0,2007,2012,1,0,0,0,2008,2009,3,178,89,0,
        2009,2010,5,190,0,0,2010,2011,5,85,0,0,2011,2013,1,0,0,0,2012,2008,
        1,0,0,0,2012,2013,1,0,0,0,2013,2018,1,0,0,0,2014,2015,3,178,89,0,
        2015,2016,5,190,0,0,2016,2017,5,89,0,0,2017,2019,1,0,0,0,2018,2014,
        1,0,0,0,2018,2019,1,0,0,0,2019,2042,1,0,0,0,2020,2022,5,173,0,0,
        2021,2023,5,205,0,0,2022,2021,1,0,0,0,2022,2023,1,0,0,0,2023,2024,
        1,0,0,0,2024,2027,3,186,93,0,2025,2026,5,28,0,0,2026,2028,3,314,
        157,0,2027,2025,1,0,0,0,2027,2028,1,0,0,0,2028,2029,1,0,0,0,2029,
        2030,5,45,0,0,2030,2031,5,1,0,0,2031,2036,3,130,65,0,2032,2033,5,
        3,0,0,2033,2035,3,130,65,0,2034,2032,1,0,0,0,2035,2038,1,0,0,0,2036,
        2034,1,0,0,0,2036,2037,1,0,0,0,2037,2039,1,0,0,0,2038,2036,1,0,0,
        0,2039,2040,5,2,0,0,2040,2042,1,0,0,0,2041,1964,1,0,0,0,2041,1968,
        1,0,0,0,2041,1986,1,0,0,0,2041,2020,1,0,0,0,2042,131,1,0,0,0,2043,
        2069,3,134,67,0,2044,2045,3,134,67,0,2045,2046,7,16,0,0,2046,2047,
        3,136,68,0,2047,2069,1,0,0,0,2048,2049,3,136,68,0,2049,2050,5,281,
        0,0,2050,2055,3,136,68,0,2051,2052,5,281,0,0,2052,2054,3,136,68,
        0,2053,2051,1,0,0,0,2054,2057,1,0,0,0,2055,2053,1,0,0,0,2055,2056,
        1,0,0,0,2056,2069,1,0,0,0,2057,2055,1,0,0,0,2058,2059,3,136,68,0,
        2059,2060,5,54,0,0,2060,2065,3,136,68,0,2061,2062,5,54,0,0,2062,
        2064,3,136,68,0,2063,2061,1,0,0,0,2064,2067,1,0,0,0,2065,2063,1,
        0,0,0,2065,2066,1,0,0,0,2066,2069,1,0,0,0,2067,2065,1,0,0,0,2068,
        2043,1,0,0,0,2068,2044,1,0,0,0,2068,2048,1,0,0,0,2068,2058,1,0,0,
        0,2069,133,1,0,0,0,2070,2071,3,314,157,0,2071,135,1,0,0,0,2072,2078,
        3,134,67,0,2073,2074,5,1,0,0,2074,2075,3,132,66,0,2075,2076,5,2,
        0,0,2076,2078,1,0,0,0,2077,2072,1,0,0,0,2077,2073,1,0,0,0,2078,137,
        1,0,0,0,2079,2082,7,16,0,0,2080,2081,5,3,0,0,2081,2083,7,17,0,0,
        2082,2080,1,0,0,0,2082,2083,1,0,0,0,2083,2090,1,0,0,0,2084,2087,
        7,17,0,0,2085,2086,5,3,0,0,2086,2088,7,16,0,0,2087,2085,1,0,0,0,
        2087,2088,1,0,0,0,2088,2090,1,0,0,0,2089,2079,1,0,0,0,2089,2084,
        1,0,0,0,2090,139,1,0,0,0,2091,2092,3,290,145,0,2092,2101,5,1,0,0,
        2093,2098,3,142,71,0,2094,2095,5,3,0,0,2095,2097,3,142,71,0,2096,
        2094,1,0,0,0,2097,2100,1,0,0,0,2098,2096,1,0,0,0,2098,2099,1,0,0,
        0,2099,2102,1,0,0,0,2100,2098,1,0,0,0,2101,2093,1,0,0,0,2101,2102,
        1,0,0,0,2102,2112,1,0,0,0,2103,2104,5,52,0,0,2104,2109,3,152,76,
        0,2105,2106,5,3,0,0,2106,2108,3,152,76,0,2107,2105,1,0,0,0,2108,
        2111,1,0,0,0,2109,2107,1,0,0,0,2109,2110,1,0,0,0,2110,2113,1,0,0,
        0,2111,2109,1,0,0,0,2112,2103,1,0,0,0,2112,2113,1,0,0,0,2113,2114,
        1,0,0,0,2114,2115,5,2,0,0,2115,141,1,0,0,0,2116,2117,3,314,157,0,
        2117,2118,5,6,0,0,2118,2120,1,0,0,0,2119,2116,1,0,0,0,2119,2120,
        1,0,0,0,2120,2124,1,0,0,0,2121,2125,3,144,72,0,2122,2125,3,148,74,
        0,2123,2125,3,154,77,0,2124,2121,1,0,0,0,2124,2122,1,0,0,0,2124,
        2123,1,0,0,0,2125,143,1,0,0,0,2126,2137,3,146,73,0,2127,2128,5,201,
        0,0,2128,2135,5,36,0,0,2129,2131,5,1,0,0,2130,2132,3,62,31,0,2131,
        2130,1,0,0,0,2131,2132,1,0,0,0,2132,2133,1,0,0,0,2133,2136,5,2,0,
        0,2134,2136,3,154,77,0,2135,2129,1,0,0,0,2135,2134,1,0,0,0,2136,
        2138,1,0,0,0,2137,2127,1,0,0,0,2137,2138,1,0,0,0,2138,2145,1,0,0,
        0,2139,2140,5,217,0,0,2140,2141,5,300,0,0,2141,2146,5,85,0,0,2142,
        2143,5,144,0,0,2143,2144,5,300,0,0,2144,2146,5,85,0,0,2145,2139,
        1,0,0,0,2145,2142,1,0,0,0,2145,2146,1,0,0,0,2146,2163,1,0,0,0,2147,
        2148,5,195,0,0,2148,2161,5,36,0,0,2149,2150,5,1,0,0,2150,2155,3,
        50,25,0,2151,2152,5,3,0,0,2152,2154,3,50,25,0,2153,2151,1,0,0,0,
        2154,2157,1,0,0,0,2155,2153,1,0,0,0,2155,2156,1,0,0,0,2156,2158,
        1,0,0,0,2157,2155,1,0,0,0,2158,2159,5,2,0,0,2159,2162,1,0,0,0,2160,
        2162,3,50,25,0,2161,2149,1,0,0,0,2161,2160,1,0,0,0,2162,2164,1,0,
        0,0,2163,2147,1,0,0,0,2163,2164,1,0,0,0,2164,145,1,0,0,0,2165,2166,
        5,260,0,0,2166,2167,5,1,0,0,2167,2168,3,274,137,0,2168,2176,5,2,
        0,0,2169,2171,5,28,0,0,2170,2169,1,0,0,0,2170,2171,1,0,0,0,2171,
        2172,1,0,0,0,2172,2174,3,314,157,0,2173,2175,3,124,62,0,2174,2173,
        1,0,0,0,2174,2175,1,0,0,0,2175,2177,1,0,0,0,2176,2170,1,0,0,0,2176,
        2177,1,0,0,0,2177,2192,1,0,0,0,2178,2179,5,260,0,0,2179,2180,5,1,
        0,0,2180,2181,3,22,11,0,2181,2189,5,2,0,0,2182,2184,5,28,0,0,2183,
        2182,1,0,0,0,2183,2184,1,0,0,0,2184,2185,1,0,0,0,2185,2187,3,314,
        157,0,2186,2188,3,124,62,0,2187,2186,1,0,0,0,2187,2188,1,0,0,0,2188,
        2190,1,0,0,0,2189,2183,1,0,0,0,2189,2190,1,0,0,0,2190,2192,1,0,0,
        0,2191,2165,1,0,0,0,2191,2178,1,0,0,0,2192,147,1,0,0,0,2193,2194,
        5,77,0,0,2194,2195,5,1,0,0,2195,2200,3,150,75,0,2196,2197,5,3,0,
        0,2197,2199,3,150,75,0,2198,2196,1,0,0,0,2199,2202,1,0,0,0,2200,
        2198,1,0,0,0,2200,2201,1,0,0,0,2201,2203,1,0,0,0,2202,2200,1,0,0,
        0,2203,2204,5,2,0,0,2204,2212,1,0,0,0,2205,2206,5,41,0,0,2206,2207,
        5,1,0,0,2207,2208,5,183,0,0,2208,2209,5,28,0,0,2209,2210,5,77,0,
        0,2210,2212,5,2,0,0,2211,2193,1,0,0,0,2211,2205,1,0,0,0,2212,149,
        1,0,0,0,2213,2215,3,314,157,0,2214,2216,3,202,101,0,2215,2214,1,
        0,0,0,2215,2216,1,0,0,0,2216,151,1,0,0,0,2217,2218,5,1,0,0,2218,
        2219,3,300,150,0,2219,2220,5,3,0,0,2220,2225,3,300,150,0,2221,2222,
        5,3,0,0,2222,2224,3,300,150,0,2223,2221,1,0,0,0,2224,2227,1,0,0,
        0,2225,2223,1,0,0,0,2225,2226,1,0,0,0,2226,2228,1,0,0,0,2227,2225,
        1,0,0,0,2228,2229,5,2,0,0,2229,153,1,0,0,0,2230,2231,3,156,78,0,
        2231,155,1,0,0,0,2232,2233,6,78,-1,0,2233,2235,3,160,80,0,2234,2236,
        3,158,79,0,2235,2234,1,0,0,0,2235,2236,1,0,0,0,2236,2240,1,0,0,0,
        2237,2238,5,182,0,0,2238,2240,3,156,78,3,2239,2232,1,0,0,0,2239,
        2237,1,0,0,0,2240,2249,1,0,0,0,2241,2242,10,2,0,0,2242,2243,5,25,
        0,0,2243,2248,3,156,78,3,2244,2245,10,1,0,0,2245,2246,5,194,0,0,
        2246,2248,3,156,78,2,2247,2241,1,0,0,0,2247,2244,1,0,0,0,2248,2251,
        1,0,0,0,2249,2247,1,0,0,0,2249,2250,1,0,0,0,2250,157,1,0,0,0,2251,
        2249,1,0,0,0,2252,2253,3,190,95,0,2253,2254,3,160,80,0,2254,2314,
        1,0,0,0,2255,2256,3,190,95,0,2256,2257,3,192,96,0,2257,2258,5,1,
        0,0,2258,2259,3,22,11,0,2259,2260,5,2,0,0,2260,2314,1,0,0,0,2261,
        2263,5,182,0,0,2262,2261,1,0,0,0,2262,2263,1,0,0,0,2263,2264,1,0,
        0,0,2264,2265,5,34,0,0,2265,2266,3,160,80,0,2266,2267,5,25,0,0,2267,
        2268,3,160,80,0,2268,2314,1,0,0,0,2269,2271,5,182,0,0,2270,2269,
        1,0,0,0,2270,2271,1,0,0,0,2271,2272,1,0,0,0,2272,2273,5,122,0,0,
        2273,2274,5,1,0,0,2274,2279,3,154,77,0,2275,2276,5,3,0,0,2276,2278,
        3,154,77,0,2277,2275,1,0,0,0,2278,2281,1,0,0,0,2279,2277,1,0,0,0,
        2279,2280,1,0,0,0,2280,2282,1,0,0,0,2281,2279,1,0,0,0,2282,2283,
        5,2,0,0,2283,2314,1,0,0,0,2284,2286,5,182,0,0,2285,2284,1,0,0,0,
        2285,2286,1,0,0,0,2286,2287,1,0,0,0,2287,2288,5,122,0,0,2288,2289,
        5,1,0,0,2289,2290,3,22,11,0,2290,2291,5,2,0,0,2291,2314,1,0,0,0,
        2292,2294,5,182,0,0,2293,2292,1,0,0,0,2293,2294,1,0,0,0,2294,2295,
        1,0,0,0,2295,2296,5,154,0,0,2296,2299,3,160,80,0,2297,2298,5,90,
        0,0,2298,2300,3,160,80,0,2299,2297,1,0,0,0,2299,2300,1,0,0,0,2300,
        2314,1,0,0,0,2301,2303,5,133,0,0,2302,2304,5,182,0,0,2303,2302,1,
        0,0,0,2303,2304,1,0,0,0,2304,2305,1,0,0,0,2305,2314,5,183,0,0,2306,
        2308,5,133,0,0,2307,2309,5,182,0,0,2308,2307,1,0,0,0,2308,2309,1,
        0,0,0,2309,2310,1,0,0,0,2310,2311,5,79,0,0,2311,2312,5,105,0,0,2312,
        2314,3,160,80,0,2313,2252,1,0,0,0,2313,2255,1,0,0,0,2313,2262,1,
        0,0,0,2313,2270,1,0,0,0,2313,2285,1,0,0,0,2313,2293,1,0,0,0,2313,
        2301,1,0,0,0,2313,2306,1,0,0,0,2314,159,1,0,0,0,2315,2316,6,80,-1,
        0,2316,2320,3,162,81,0,2317,2318,7,18,0,0,2318,2320,3,160,80,4,2319,
        2315,1,0,0,0,2319,2317,1,0,0,0,2320,2335,1,0,0,0,2321,2322,10,3,
        0,0,2322,2323,7,19,0,0,2323,2334,3,160,80,4,2324,2325,10,2,0,0,2325,
        2326,7,18,0,0,2326,2334,3,160,80,3,2327,2328,10,1,0,0,2328,2329,
        5,323,0,0,2329,2334,3,160,80,2,2330,2331,10,5,0,0,2331,2332,5,30,
        0,0,2332,2334,3,188,94,0,2333,2321,1,0,0,0,2333,2324,1,0,0,0,2333,
        2327,1,0,0,0,2333,2330,1,0,0,0,2334,2337,1,0,0,0,2335,2333,1,0,0,
        0,2335,2336,1,0,0,0,2336,161,1,0,0,0,2337,2335,1,0,0,0,2338,2339,
        6,81,-1,0,2339,2792,5,183,0,0,2340,2792,3,196,98,0,2341,2342,3,314,
        157,0,2342,2343,3,186,93,0,2343,2792,1,0,0,0,2344,2345,5,82,0,0,
        2345,2346,5,213,0,0,2346,2792,3,186,93,0,2347,2792,3,316,158,0,2348,
        2792,3,194,97,0,2349,2792,3,186,93,0,2350,2792,5,328,0,0,2351,2792,
        5,324,0,0,2352,2353,5,211,0,0,2353,2354,5,1,0,0,2354,2355,3,160,
        80,0,2355,2356,5,122,0,0,2356,2357,3,160,80,0,2357,2358,5,2,0,0,
        2358,2792,1,0,0,0,2359,2360,5,1,0,0,2360,2363,3,154,77,0,2361,2362,
        5,3,0,0,2362,2364,3,154,77,0,2363,2361,1,0,0,0,2364,2365,1,0,0,0,
        2365,2363,1,0,0,0,2365,2366,1,0,0,0,2366,2367,1,0,0,0,2367,2368,
        5,2,0,0,2368,2792,1,0,0,0,2369,2370,5,239,0,0,2370,2371,5,1,0,0,
        2371,2376,3,154,77,0,2372,2373,5,3,0,0,2373,2375,3,154,77,0,2374,
        2372,1,0,0,0,2375,2378,1,0,0,0,2376,2374,1,0,0,0,2376,2377,1,0,0,
        0,2377,2379,1,0,0,0,2378,2376,1,0,0,0,2379,2380,5,2,0,0,2380,2792,
        1,0,0,0,2381,2382,5,156,0,0,2382,2384,5,1,0,0,2383,2385,3,76,38,
        0,2384,2383,1,0,0,0,2384,2385,1,0,0,0,2385,2386,1,0,0,0,2386,2389,
        3,154,77,0,2387,2388,5,3,0,0,2388,2390,3,186,93,0,2389,2387,1,0,
        0,0,2389,2390,1,0,0,0,2390,2394,1,0,0,0,2391,2392,5,190,0,0,2392,
        2393,5,200,0,0,2393,2395,3,100,50,0,2394,2391,1,0,0,0,2394,2395,
        1,0,0,0,2395,2396,1,0,0,0,2396,2397,5,2,0,0,2397,2398,5,305,0,0,
        2398,2399,5,114,0,0,2399,2400,5,1,0,0,2400,2401,5,195,0,0,2401,2402,
        5,36,0,0,2402,2407,3,50,25,0,2403,2404,5,3,0,0,2404,2406,3,50,25,
        0,2405,2403,1,0,0,0,2406,2409,1,0,0,0,2407,2405,1,0,0,0,2407,2408,
        1,0,0,0,2408,2410,1,0,0,0,2409,2407,1,0,0,0,2410,2411,5,2,0,0,2411,
        2413,1,0,0,0,2412,2414,3,210,105,0,2413,2412,1,0,0,0,2413,2414,1,
        0,0,0,2414,2792,1,0,0,0,2415,2417,3,182,91,0,2416,2415,1,0,0,0,2416,
        2417,1,0,0,0,2417,2418,1,0,0,0,2418,2419,3,290,145,0,2419,2423,5,
        1,0,0,2420,2421,3,314,157,0,2421,2422,5,4,0,0,2422,2424,1,0,0,0,
        2423,2420,1,0,0,0,2423,2424,1,0,0,0,2424,2425,1,0,0,0,2425,2426,
        5,320,0,0,2426,2428,5,2,0,0,2427,2429,3,210,105,0,2428,2427,1,0,
        0,0,2428,2429,1,0,0,0,2429,2431,1,0,0,0,2430,2432,3,214,107,0,2431,
        2430,1,0,0,0,2431,2432,1,0,0,0,2432,2792,1,0,0,0,2433,2435,3,182,
        91,0,2434,2433,1,0,0,0,2434,2435,1,0,0,0,2435,2436,1,0,0,0,2436,
        2437,3,290,145,0,2437,2449,5,1,0,0,2438,2440,3,76,38,0,2439,2438,
        1,0,0,0,2439,2440,1,0,0,0,2440,2441,1,0,0,0,2441,2446,3,154,77,0,
        2442,2443,5,3,0,0,2443,2445,3,154,77,0,2444,2442,1,0,0,0,2445,2448,
        1,0,0,0,2446,2444,1,0,0,0,2446,2447,1,0,0,0,2447,2450,1,0,0,0,2448,
        2446,1,0,0,0,2449,2439,1,0,0,0,2449,2450,1,0,0,0,2450,2461,1,0,0,
        0,2451,2452,5,195,0,0,2452,2453,5,36,0,0,2453,2458,3,50,25,0,2454,
        2455,5,3,0,0,2455,2457,3,50,25,0,2456,2454,1,0,0,0,2457,2460,1,0,
        0,0,2458,2456,1,0,0,0,2458,2459,1,0,0,0,2459,2462,1,0,0,0,2460,2458,
        1,0,0,0,2461,2451,1,0,0,0,2461,2462,1,0,0,0,2462,2463,1,0,0,0,2463,
        2465,5,2,0,0,2464,2466,3,210,105,0,2465,2464,1,0,0,0,2465,2466,1,
        0,0,0,2466,2471,1,0,0,0,2467,2469,3,184,92,0,2468,2467,1,0,0,0,2468,
        2469,1,0,0,0,2469,2470,1,0,0,0,2470,2472,3,214,107,0,2471,2468,1,
        0,0,0,2471,2472,1,0,0,0,2472,2792,1,0,0,0,2473,2474,3,314,157,0,
        2474,2475,3,214,107,0,2475,2792,1,0,0,0,2476,2477,3,314,157,0,2477,
        2478,5,7,0,0,2478,2479,3,154,77,0,2479,2792,1,0,0,0,2480,2489,5,
        1,0,0,2481,2486,3,314,157,0,2482,2483,5,3,0,0,2483,2485,3,314,157,
        0,2484,2482,1,0,0,0,2485,2488,1,0,0,0,2486,2484,1,0,0,0,2486,2487,
        1,0,0,0,2487,2490,1,0,0,0,2488,2486,1,0,0,0,2489,2481,1,0,0,0,2489,
        2490,1,0,0,0,2490,2491,1,0,0,0,2491,2492,5,2,0,0,2492,2493,5,7,0,
        0,2493,2792,3,154,77,0,2494,2495,5,1,0,0,2495,2496,3,22,11,0,2496,
        2497,5,2,0,0,2497,2792,1,0,0,0,2498,2499,5,94,0,0,2499,2500,5,1,
        0,0,2500,2501,3,22,11,0,2501,2502,5,2,0,0,2502,2792,1,0,0,0,2503,
        2504,5,40,0,0,2504,2506,3,154,77,0,2505,2507,3,208,104,0,2506,2505,
        1,0,0,0,2507,2508,1,0,0,0,2508,2506,1,0,0,0,2508,2509,1,0,0,0,2509,
        2512,1,0,0,0,2510,2511,5,84,0,0,2511,2513,3,154,77,0,2512,2510,1,
        0,0,0,2512,2513,1,0,0,0,2513,2514,1,0,0,0,2514,2515,5,88,0,0,2515,
        2792,1,0,0,0,2516,2518,5,40,0,0,2517,2519,3,208,104,0,2518,2517,
        1,0,0,0,2519,2520,1,0,0,0,2520,2518,1,0,0,0,2520,2521,1,0,0,0,2521,
        2524,1,0,0,0,2522,2523,5,84,0,0,2523,2525,3,154,77,0,2524,2522,1,
        0,0,0,2524,2525,1,0,0,0,2525,2526,1,0,0,0,2526,2527,5,88,0,0,2527,
        2792,1,0,0,0,2528,2529,5,41,0,0,2529,2530,5,1,0,0,2530,2531,3,154,
        77,0,2531,2532,5,28,0,0,2532,2533,3,202,101,0,2533,2534,5,2,0,0,
        2534,2792,1,0,0,0,2535,2536,5,275,0,0,2536,2537,5,1,0,0,2537,2538,
        3,154,77,0,2538,2539,5,28,0,0,2539,2540,3,202,101,0,2540,2541,5,
        2,0,0,2541,2792,1,0,0,0,2542,2543,5,27,0,0,2543,2552,5,8,0,0,2544,
        2549,3,154,77,0,2545,2546,5,3,0,0,2546,2548,3,154,77,0,2547,2545,
        1,0,0,0,2548,2551,1,0,0,0,2549,2547,1,0,0,0,2549,2550,1,0,0,0,2550,
        2553,1,0,0,0,2551,2549,1,0,0,0,2552,2544,1,0,0,0,2552,2553,1,0,0,
        0,2553,2554,1,0,0,0,2554,2792,5,9,0,0,2555,2792,3,296,148,0,2556,
        2792,5,58,0,0,2557,2561,5,62,0,0,2558,2559,5,1,0,0,2559,2560,5,329,
        0,0,2560,2562,5,2,0,0,2561,2558,1,0,0,0,2561,2562,1,0,0,0,2562,2792,
        1,0,0,0,2563,2567,5,63,0,0,2564,2565,5,1,0,0,2565,2566,5,329,0,0,
        2566,2568,5,2,0,0,2567,2564,1,0,0,0,2567,2568,1,0,0,0,2568,2792,
        1,0,0,0,2569,2573,5,158,0,0,2570,2571,5,1,0,0,2571,2572,5,329,0,
        0,2572,2574,5,2,0,0,2573,2570,1,0,0,0,2573,2574,1,0,0,0,2574,2792,
        1,0,0,0,2575,2579,5,159,0,0,2576,2577,5,1,0,0,2577,2578,5,329,0,
        0,2578,2580,5,2,0,0,2579,2576,1,0,0,0,2579,2580,1,0,0,0,2580,2792,
        1,0,0,0,2581,2792,5,64,0,0,2582,2792,5,57,0,0,2583,2792,5,61,0,0,
        2584,2792,5,59,0,0,2585,2586,5,272,0,0,2586,2594,5,1,0,0,2587,2589,
        3,98,49,0,2588,2587,1,0,0,0,2588,2589,1,0,0,0,2589,2591,1,0,0,0,
        2590,2592,3,160,80,0,2591,2590,1,0,0,0,2591,2592,1,0,0,0,2592,2593,
        1,0,0,0,2593,2595,5,105,0,0,2594,2588,1,0,0,0,2594,2595,1,0,0,0,
        2595,2596,1,0,0,0,2596,2597,3,160,80,0,2597,2598,5,2,0,0,2598,2792,
        1,0,0,0,2599,2600,5,272,0,0,2600,2601,5,1,0,0,2601,2602,3,160,80,
        0,2602,2603,5,3,0,0,2603,2604,3,160,80,0,2604,2605,5,2,0,0,2605,
        2792,1,0,0,0,2606,2607,5,258,0,0,2607,2608,5,1,0,0,2608,2609,3,160,
        80,0,2609,2610,5,105,0,0,2610,2613,3,160,80,0,2611,2612,5,103,0,
        0,2612,2614,3,160,80,0,2613,2611,1,0,0,0,2613,2614,1,0,0,0,2614,
        2615,1,0,0,0,2615,2616,5,2,0,0,2616,2792,1,0,0,0,2617,2618,5,181,
        0,0,2618,2619,5,1,0,0,2619,2622,3,160,80,0,2620,2621,5,3,0,0,2621,
        2623,3,200,100,0,2622,2620,1,0,0,0,2622,2623,1,0,0,0,2623,2624,1,
        0,0,0,2624,2625,5,2,0,0,2625,2792,1,0,0,0,2626,2627,5,96,0,0,2627,
        2628,5,1,0,0,2628,2629,3,314,157,0,2629,2630,5,105,0,0,2630,2631,
        3,160,80,0,2631,2632,5,2,0,0,2632,2792,1,0,0,0,2633,2634,5,1,0,0,
        2634,2635,3,154,77,0,2635,2636,5,2,0,0,2636,2792,1,0,0,0,2637,2638,
        5,115,0,0,2638,2647,5,1,0,0,2639,2644,3,300,150,0,2640,2641,5,3,
        0,0,2641,2643,3,300,150,0,2642,2640,1,0,0,0,2643,2646,1,0,0,0,2644,
        2642,1,0,0,0,2644,2645,1,0,0,0,2645,2648,1,0,0,0,2646,2644,1,0,0,
        0,2647,2639,1,0,0,0,2647,2648,1,0,0,0,2648,2649,1,0,0,0,2649,2792,
        5,2,0,0,2650,2651,5,139,0,0,2651,2652,5,1,0,0,2652,2657,3,164,82,
        0,2653,2654,3,172,86,0,2654,2655,5,190,0,0,2655,2656,5,89,0,0,2656,
        2658,1,0,0,0,2657,2653,1,0,0,0,2657,2658,1,0,0,0,2658,2659,1,0,0,
        0,2659,2660,5,2,0,0,2660,2792,1,0,0,0,2661,2662,5,143,0,0,2662,2663,
        5,1,0,0,2663,2666,3,164,82,0,2664,2665,5,231,0,0,2665,2667,3,202,
        101,0,2666,2664,1,0,0,0,2666,2667,1,0,0,0,2667,2672,1,0,0,0,2668,
        2669,3,174,87,0,2669,2670,5,190,0,0,2670,2671,5,85,0,0,2671,2673,
        1,0,0,0,2672,2668,1,0,0,0,2672,2673,1,0,0,0,2673,2678,1,0,0,0,2674,
        2675,3,174,87,0,2675,2676,5,190,0,0,2676,2677,5,89,0,0,2677,2679,
        1,0,0,0,2678,2674,1,0,0,0,2678,2679,1,0,0,0,2679,2680,1,0,0,0,2680,
        2681,5,2,0,0,2681,2792,1,0,0,0,2682,2683,5,141,0,0,2683,2684,5,1,
        0,0,2684,2691,3,164,82,0,2685,2686,5,231,0,0,2686,2689,3,202,101,
        0,2687,2688,5,104,0,0,2688,2690,3,168,84,0,2689,2687,1,0,0,0,2689,
        2690,1,0,0,0,2690,2692,1,0,0,0,2691,2685,1,0,0,0,2691,2692,1,0,0,
        0,2692,2696,1,0,0,0,2693,2694,3,176,88,0,2694,2695,5,308,0,0,2695,
        2697,1,0,0,0,2696,2693,1,0,0,0,2696,2697,1,0,0,0,2697,2705,1,0,0,
        0,2698,2699,7,15,0,0,2699,2703,5,218,0,0,2700,2701,5,190,0,0,2701,
        2702,5,242,0,0,2702,2704,5,264,0,0,2703,2700,1,0,0,0,2703,2704,1,
        0,0,0,2704,2706,1,0,0,0,2705,2698,1,0,0,0,2705,2706,1,0,0,0,2706,
        2711,1,0,0,0,2707,2708,3,178,89,0,2708,2709,5,190,0,0,2709,2710,
        5,85,0,0,2710,2712,1,0,0,0,2711,2707,1,0,0,0,2711,2712,1,0,0,0,2712,
        2717,1,0,0,0,2713,2714,3,178,89,0,2714,2715,5,190,0,0,2715,2716,
        5,89,0,0,2716,2718,1,0,0,0,2717,2713,1,0,0,0,2717,2718,1,0,0,0,2718,
        2719,1,0,0,0,2719,2720,5,2,0,0,2720,2792,1,0,0,0,2721,2722,5,140,
        0,0,2722,2751,5,1,0,0,2723,2728,3,180,90,0,2724,2725,5,3,0,0,2725,
        2727,3,180,90,0,2726,2724,1,0,0,0,2727,2730,1,0,0,0,2728,2726,1,
        0,0,0,2728,2729,1,0,0,0,2729,2737,1,0,0,0,2730,2728,1,0,0,0,2731,
        2732,5,183,0,0,2732,2733,5,190,0,0,2733,2738,5,183,0,0,2734,2735,
        5,18,0,0,2735,2736,5,190,0,0,2736,2738,5,183,0,0,2737,2731,1,0,0,
        0,2737,2734,1,0,0,0,2737,2738,1,0,0,0,2738,2749,1,0,0,0,2739,2740,
        5,304,0,0,2740,2742,5,282,0,0,2741,2743,5,146,0,0,2742,2741,1,0,
        0,0,2742,2743,1,0,0,0,2743,2750,1,0,0,0,2744,2745,5,306,0,0,2745,
        2747,5,282,0,0,2746,2748,5,146,0,0,2747,2746,1,0,0,0,2747,2748,1,
        0,0,0,2748,2750,1,0,0,0,2749,2739,1,0,0,0,2749,2744,1,0,0,0,2749,
        2750,1,0,0,0,2750,2752,1,0,0,0,2751,2723,1,0,0,0,2751,2752,1,0,0,
        0,2752,2759,1,0,0,0,2753,2754,5,231,0,0,2754,2757,3,202,101,0,2755,
        2756,5,104,0,0,2756,2758,3,168,84,0,2757,2755,1,0,0,0,2757,2758,
        1,0,0,0,2758,2760,1,0,0,0,2759,2753,1,0,0,0,2759,2760,1,0,0,0,2760,
        2761,1,0,0,0,2761,2792,5,2,0,0,2762,2763,5,138,0,0,2763,2780,5,1,
        0,0,2764,2769,3,166,83,0,2765,2766,5,3,0,0,2766,2768,3,166,83,0,
        2767,2765,1,0,0,0,2768,2771,1,0,0,0,2769,2767,1,0,0,0,2769,2770,
        1,0,0,0,2770,2778,1,0,0,0,2771,2769,1,0,0,0,2772,2773,5,183,0,0,
        2773,2774,5,190,0,0,2774,2779,5,183,0,0,2775,2776,5,18,0,0,2776,
        2777,5,190,0,0,2777,2779,5,183,0,0,2778,2772,1,0,0,0,2778,2775,1,
        0,0,0,2778,2779,1,0,0,0,2779,2781,1,0,0,0,2780,2764,1,0,0,0,2780,
        2781,1,0,0,0,2781,2788,1,0,0,0,2782,2783,5,231,0,0,2783,2786,3,202,
        101,0,2784,2785,5,104,0,0,2785,2787,3,168,84,0,2786,2784,1,0,0,0,
        2786,2787,1,0,0,0,2787,2789,1,0,0,0,2788,2782,1,0,0,0,2788,2789,
        1,0,0,0,2789,2790,1,0,0,0,2790,2792,5,2,0,0,2791,2338,1,0,0,0,2791,
        2340,1,0,0,0,2791,2341,1,0,0,0,2791,2344,1,0,0,0,2791,2347,1,0,0,
        0,2791,2348,1,0,0,0,2791,2349,1,0,0,0,2791,2350,1,0,0,0,2791,2351,
        1,0,0,0,2791,2352,1,0,0,0,2791,2359,1,0,0,0,2791,2369,1,0,0,0,2791,
        2381,1,0,0,0,2791,2416,1,0,0,0,2791,2434,1,0,0,0,2791,2473,1,0,0,
        0,2791,2476,1,0,0,0,2791,2480,1,0,0,0,2791,2494,1,0,0,0,2791,2498,
        1,0,0,0,2791,2503,1,0,0,0,2791,2516,1,0,0,0,2791,2528,1,0,0,0,2791,
        2535,1,0,0,0,2791,2542,1,0,0,0,2791,2555,1,0,0,0,2791,2556,1,0,0,
        0,2791,2557,1,0,0,0,2791,2563,1,0,0,0,2791,2569,1,0,0,0,2791,2575,
        1,0,0,0,2791,2581,1,0,0,0,2791,2582,1,0,0,0,2791,2583,1,0,0,0,2791,
        2584,1,0,0,0,2791,2585,1,0,0,0,2791,2599,1,0,0,0,2791,2606,1,0,0,
        0,2791,2617,1,0,0,0,2791,2626,1,0,0,0,2791,2633,1,0,0,0,2791,2637,
        1,0,0,0,2791,2650,1,0,0,0,2791,2661,1,0,0,0,2791,2682,1,0,0,0,2791,
        2721,1,0,0,0,2791,2762,1,0,0,0,2792,2803,1,0,0,0,2793,2794,10,24,
        0,0,2794,2795,5,8,0,0,2795,2796,3,160,80,0,2796,2797,5,9,0,0,2797,
        2802,1,0,0,0,2798,2799,10,22,0,0,2799,2800,5,4,0,0,2800,2802,3,314,
        157,0,2801,2793,1,0,0,0,2801,2798,1,0,0,0,2802,2805,1,0,0,0,2803,
        2801,1,0,0,0,2803,2804,1,0,0,0,2804,163,1,0,0,0,2805,2803,1,0,0,
        0,2806,2807,3,166,83,0,2807,2808,5,3,0,0,2808,2811,3,186,93,0,2809,
        2810,5,28,0,0,2810,2812,3,314,157,0,2811,2809,1,0,0,0,2811,2812,
        1,0,0,0,2812,2822,1,0,0,0,2813,2814,5,203,0,0,2814,2819,3,170,85,
        0,2815,2816,5,3,0,0,2816,2818,3,170,85,0,2817,2815,1,0,0,0,2818,
        2821,1,0,0,0,2819,2817,1,0,0,0,2819,2820,1,0,0,0,2820,2823,1,0,0,
        0,2821,2819,1,0,0,0,2822,2813,1,0,0,0,2822,2823,1,0,0,0,2823,165,
        1,0,0,0,2824,2827,3,154,77,0,2825,2826,5,104,0,0,2826,2828,3,168,
        84,0,2827,2825,1,0,0,0,2827,2828,1,0,0,0,2828,167,1,0,0,0,2829,2832,
        5,137,0,0,2830,2831,5,87,0,0,2831,2833,7,20,0,0,2832,2830,1,0,0,
        0,2832,2833,1,0,0,0,2833,169,1,0,0,0,2834,2835,3,166,83,0,2835,2836,
        5,28,0,0,2836,2837,3,314,157,0,2837,171,1,0,0,0,2838,2839,7,21,0,
        0,2839,173,1,0,0,0,2840,2845,5,89,0,0,2841,2845,5,183,0,0,2842,2843,
        5,70,0,0,2843,2845,3,154,77,0,2844,2840,1,0,0,0,2844,2841,1,0,0,
        0,2844,2842,1,0,0,0,2845,175,1,0,0,0,2846,2848,5,306,0,0,2847,2849,
        5,27,0,0,2848,2847,1,0,0,0,2848,2849,1,0,0,0,2849,2858,1,0,0,0,2850,
        2852,5,304,0,0,2851,2853,7,22,0,0,2852,2851,1,0,0,0,2852,2853,1,
        0,0,0,2853,2855,1,0,0,0,2854,2856,5,27,0,0,2855,2854,1,0,0,0,2855,
        2856,1,0,0,0,2856,2858,1,0,0,0,2857,2846,1,0,0,0,2857,2850,1,0,0,
        0,2858,177,1,0,0,0,2859,2866,5,89,0,0,2860,2866,5,183,0,0,2861,2862,
        5,85,0,0,2862,2866,5,27,0,0,2863,2864,5,85,0,0,2864,2866,5,186,0,
        0,2865,2859,1,0,0,0,2865,2860,1,0,0,0,2865,2861,1,0,0,0,2865,2863,
        1,0,0,0,2866,179,1,0,0,0,2867,2869,5,145,0,0,2868,2867,1,0,0,0,2868,
        2869,1,0,0,0,2869,2870,1,0,0,0,2870,2871,3,154,77,0,2871,2872,5,
        295,0,0,2872,2873,3,166,83,0,2873,2879,1,0,0,0,2874,2875,3,154,77,
        0,2875,2876,5,10,0,0,2876,2877,3,166,83,0,2877,2879,1,0,0,0,2878,
        2868,1,0,0,0,2878,2874,1,0,0,0,2879,181,1,0,0,0,2880,2881,7,23,0,
        0,2881,183,1,0,0,0,2882,2883,5,120,0,0,2883,2887,5,185,0,0,2884,
        2885,5,228,0,0,2885,2887,5,185,0,0,2886,2882,1,0,0,0,2886,2884,1,
        0,0,0,2887,185,1,0,0,0,2888,2895,5,326,0,0,2889,2892,5,327,0,0,2890,
        2891,5,277,0,0,2891,2893,5,326,0,0,2892,2890,1,0,0,0,2892,2893,1,
        0,0,0,2893,2895,1,0,0,0,2894,2888,1,0,0,0,2894,2889,1,0,0,0,2895,
        187,1,0,0,0,2896,2897,5,267,0,0,2897,2898,5,311,0,0,2898,2903,3,
        196,98,0,2899,2900,5,267,0,0,2900,2901,5,311,0,0,2901,2903,3,186,
        93,0,2902,2896,1,0,0,0,2902,2899,1,0,0,0,2903,189,1,0,0,0,2904,2905,
        7,24,0,0,2905,191,1,0,0,0,2906,2907,7,25,0,0,2907,193,1,0,0,0,2908,
        2909,7,26,0,0,2909,195,1,0,0,0,2910,2912,5,129,0,0,2911,2913,7,18,
        0,0,2912,2911,1,0,0,0,2912,2913,1,0,0,0,2913,2914,1,0,0,0,2914,2915,
        3,186,93,0,2915,2918,3,198,99,0,2916,2917,5,269,0,0,2917,2919,3,
        198,99,0,2918,2916,1,0,0,0,2918,2919,1,0,0,0,2919,197,1,0,0,0,2920,
        2921,7,27,0,0,2921,199,1,0,0,0,2922,2923,7,28,0,0,2923,201,1,0,0,
        0,2924,2925,6,101,-1,0,2925,2926,5,239,0,0,2926,2927,5,1,0,0,2927,
        2932,3,204,102,0,2928,2929,5,3,0,0,2929,2931,3,204,102,0,2930,2928,
        1,0,0,0,2931,2934,1,0,0,0,2932,2930,1,0,0,0,2932,2933,1,0,0,0,2933,
        2935,1,0,0,0,2934,2932,1,0,0,0,2935,2936,5,2,0,0,2936,2996,1,0,0,
        0,2937,2938,5,129,0,0,2938,2941,3,198,99,0,2939,2940,5,269,0,0,2940,
        2942,3,198,99,0,2941,2939,1,0,0,0,2941,2942,1,0,0,0,2942,2996,1,
        0,0,0,2943,2948,5,268,0,0,2944,2945,5,1,0,0,2945,2946,3,206,103,
        0,2946,2947,5,2,0,0,2947,2949,1,0,0,0,2948,2944,1,0,0,0,2948,2949,
        1,0,0,0,2949,2953,1,0,0,0,2950,2951,7,29,0,0,2951,2952,5,267,0,0,
        2952,2954,5,311,0,0,2953,2950,1,0,0,0,2953,2954,1,0,0,0,2954,2996,
        1,0,0,0,2955,2960,5,267,0,0,2956,2957,5,1,0,0,2957,2958,3,206,103,
        0,2958,2959,5,2,0,0,2959,2961,1,0,0,0,2960,2956,1,0,0,0,2960,2961,
        1,0,0,0,2961,2965,1,0,0,0,2962,2963,7,29,0,0,2963,2964,5,267,0,0,
        2964,2966,5,311,0,0,2965,2962,1,0,0,0,2965,2966,1,0,0,0,2966,2996,
        1,0,0,0,2967,2968,5,82,0,0,2968,2996,5,213,0,0,2969,2970,5,27,0,
        0,2970,2971,5,314,0,0,2971,2972,3,202,101,0,2972,2973,5,316,0,0,
        2973,2996,1,0,0,0,2974,2975,5,162,0,0,2975,2976,5,314,0,0,2976,2977,
        3,202,101,0,2977,2978,5,3,0,0,2978,2979,3,202,101,0,2979,2980,5,
        316,0,0,2980,2996,1,0,0,0,2981,2993,3,314,157,0,2982,2983,5,1,0,
        0,2983,2988,3,206,103,0,2984,2985,5,3,0,0,2985,2987,3,206,103,0,
        2986,2984,1,0,0,0,2987,2990,1,0,0,0,2988,2986,1,0,0,0,2988,2989,
        1,0,0,0,2989,2991,1,0,0,0,2990,2988,1,0,0,0,2991,2992,5,2,0,0,2992,
        2994,1,0,0,0,2993,2982,1,0,0,0,2993,2994,1,0,0,0,2994,2996,1,0,0,
        0,2995,2924,1,0,0,0,2995,2937,1,0,0,0,2995,2943,1,0,0,0,2995,2955,
        1,0,0,0,2995,2967,1,0,0,0,2995,2969,1,0,0,0,2995,2974,1,0,0,0,2995,
        2981,1,0,0,0,2996,3006,1,0,0,0,2997,2998,10,2,0,0,2998,3002,5,27,
        0,0,2999,3000,5,8,0,0,3000,3001,5,329,0,0,3001,3003,5,9,0,0,3002,
        2999,1,0,0,0,3002,3003,1,0,0,0,3003,3005,1,0,0,0,3004,2997,1,0,0,
        0,3005,3008,1,0,0,0,3006,3004,1,0,0,0,3006,3007,1,0,0,0,3007,203,
        1,0,0,0,3008,3006,1,0,0,0,3009,3014,3,202,101,0,3010,3011,3,314,
        157,0,3011,3012,3,202,101,0,3012,3014,1,0,0,0,3013,3009,1,0,0,0,
        3013,3010,1,0,0,0,3014,205,1,0,0,0,3015,3018,5,329,0,0,3016,3018,
        3,202,101,0,3017,3015,1,0,0,0,3017,3016,1,0,0,0,3018,207,1,0,0,0,
        3019,3020,5,300,0,0,3020,3021,3,154,77,0,3021,3022,5,265,0,0,3022,
        3023,3,154,77,0,3023,209,1,0,0,0,3024,3025,5,99,0,0,3025,3026,5,
        1,0,0,3026,3027,3,54,27,0,3027,3028,5,2,0,0,3028,211,1,0,0,0,3029,
        3030,5,300,0,0,3030,3033,5,164,0,0,3031,3032,5,25,0,0,3032,3034,
        3,154,77,0,3033,3031,1,0,0,0,3033,3034,1,0,0,0,3034,3035,1,0,0,0,
        3035,3036,5,265,0,0,3036,3037,5,287,0,0,3037,3038,5,251,0,0,3038,
        3039,3,314,157,0,3039,3040,5,312,0,0,3040,3048,3,154,77,0,3041,3042,
        5,3,0,0,3042,3043,3,314,157,0,3043,3044,5,312,0,0,3044,3045,3,154,
        77,0,3045,3047,1,0,0,0,3046,3041,1,0,0,0,3047,3050,1,0,0,0,3048,
        3046,1,0,0,0,3048,3049,1,0,0,0,3049,3094,1,0,0,0,3050,3048,1,0,0,
        0,3051,3052,5,300,0,0,3052,3055,5,164,0,0,3053,3054,5,25,0,0,3054,
        3056,3,154,77,0,3055,3053,1,0,0,0,3055,3056,1,0,0,0,3056,3057,1,
        0,0,0,3057,3058,5,265,0,0,3058,3094,5,73,0,0,3059,3060,5,300,0,0,
        3060,3061,5,182,0,0,3061,3064,5,164,0,0,3062,3063,5,25,0,0,3063,
        3065,3,154,77,0,3064,3062,1,0,0,0,3064,3065,1,0,0,0,3065,3066,1,
        0,0,0,3066,3067,5,265,0,0,3067,3079,5,127,0,0,3068,3069,5,1,0,0,
        3069,3074,3,314,157,0,3070,3071,5,3,0,0,3071,3073,3,314,157,0,3072,
        3070,1,0,0,0,3073,3076,1,0,0,0,3074,3072,1,0,0,0,3074,3075,1,0,0,
        0,3075,3077,1,0,0,0,3076,3074,1,0,0,0,3077,3078,5,2,0,0,3078,3080,
        1,0,0,0,3079,3068,1,0,0,0,3079,3080,1,0,0,0,3080,3081,1,0,0,0,3081,
        3082,5,296,0,0,3082,3083,5,1,0,0,3083,3088,3,154,77,0,3084,3085,
        5,3,0,0,3085,3087,3,154,77,0,3086,3084,1,0,0,0,3087,3090,1,0,0,0,
        3088,3086,1,0,0,0,3088,3089,1,0,0,0,3089,3091,1,0,0,0,3090,3088,
        1,0,0,0,3091,3092,5,2,0,0,3092,3094,1,0,0,0,3093,3029,1,0,0,0,3093,
        3051,1,0,0,0,3093,3059,1,0,0,0,3094,213,1,0,0,0,3095,3101,5,199,
        0,0,3096,3102,3,314,157,0,3097,3098,5,1,0,0,3098,3099,3,72,36,0,
        3099,3100,5,2,0,0,3100,3102,1,0,0,0,3101,3096,1,0,0,0,3101,3097,
        1,0,0,0,3102,215,1,0,0,0,3103,3104,5,168,0,0,3104,3109,3,106,53,
        0,3105,3106,5,3,0,0,3106,3108,3,106,53,0,3107,3105,1,0,0,0,3108,
        3111,1,0,0,0,3109,3107,1,0,0,0,3109,3110,1,0,0,0,3110,3113,1,0,0,
        0,3111,3109,1,0,0,0,3112,3103,1,0,0,0,3112,3113,1,0,0,0,3113,3114,
        1,0,0,0,3114,3118,3,218,109,0,3115,3116,5,21,0,0,3116,3117,5,163,
        0,0,3117,3119,3,112,56,0,3118,3115,1,0,0,0,3118,3119,1,0,0,0,3119,
        3121,1,0,0,0,3120,3122,7,13,0,0,3121,3120,1,0,0,0,3121,3122,1,0,
        0,0,3122,3128,1,0,0,0,3123,3124,5,206,0,0,3124,3125,5,1,0,0,3125,
        3126,3,222,111,0,3126,3127,5,2,0,0,3127,3129,1,0,0,0,3128,3123,1,
        0,0,0,3128,3129,1,0,0,0,3129,3139,1,0,0,0,3130,3131,5,257,0,0,3131,
        3136,3,114,57,0,3132,3133,5,3,0,0,3133,3135,3,114,57,0,3134,3132,
        1,0,0,0,3135,3138,1,0,0,0,3136,3134,1,0,0,0,3136,3137,1,0,0,0,3137,
        3140,1,0,0,0,3138,3136,1,0,0,0,3139,3130,1,0,0,0,3139,3140,1,0,0,
        0,3140,3150,1,0,0,0,3141,3142,5,71,0,0,3142,3147,3,116,58,0,3143,
        3144,5,3,0,0,3144,3146,3,116,58,0,3145,3143,1,0,0,0,3146,3149,1,
        0,0,0,3147,3145,1,0,0,0,3147,3148,1,0,0,0,3148,3151,1,0,0,0,3149,
        3147,1,0,0,0,3150,3141,1,0,0,0,3150,3151,1,0,0,0,3151,217,1,0,0,
        0,3152,3153,5,219,0,0,3153,3177,3,220,110,0,3154,3155,5,240,0,0,
        3155,3177,3,220,110,0,3156,3157,5,116,0,0,3157,3177,3,220,110,0,
        3158,3159,5,219,0,0,3159,3160,5,34,0,0,3160,3161,3,220,110,0,3161,
        3162,5,25,0,0,3162,3163,3,220,110,0,3163,3177,1,0,0,0,3164,3165,
        5,240,0,0,3165,3166,5,34,0,0,3166,3167,3,220,110,0,3167,3168,5,25,
        0,0,3168,3169,3,220,110,0,3169,3177,1,0,0,0,3170,3171,5,116,0,0,
        3171,3172,5,34,0,0,3172,3173,3,220,110,0,3173,3174,5,25,0,0,3174,
        3175,3,220,110,0,3175,3177,1,0,0,0,3176,3152,1,0,0,0,3176,3154,1,
        0,0,0,3176,3156,1,0,0,0,3176,3158,1,0,0,0,3176,3164,1,0,0,0,3176,
        3170,1,0,0,0,3177,219,1,0,0,0,3178,3179,5,278,0,0,3179,3188,5,212,
        0,0,3180,3181,5,278,0,0,3181,3188,5,102,0,0,3182,3183,5,56,0,0,3183,
        3188,5,239,0,0,3184,3185,3,154,77,0,3185,3186,7,30,0,0,3186,3188,
        1,0,0,0,3187,3178,1,0,0,0,3187,3180,1,0,0,0,3187,3182,1,0,0,0,3187,
        3184,1,0,0,0,3188,221,1,0,0,0,3189,3190,6,111,-1,0,3190,3192,3,224,
        112,0,3191,3193,3,226,113,0,3192,3191,1,0,0,0,3192,3193,1,0,0,0,
        3193,3201,1,0,0,0,3194,3195,10,2,0,0,3195,3200,3,222,111,3,3196,
        3197,10,1,0,0,3197,3198,5,11,0,0,3198,3200,3,222,111,2,3199,3194,
        1,0,0,0,3199,3196,1,0,0,0,3200,3203,1,0,0,0,3201,3199,1,0,0,0,3201,
        3202,1,0,0,0,3202,223,1,0,0,0,3203,3201,1,0,0,0,3204,3230,3,314,
        157,0,3205,3206,5,1,0,0,3206,3230,5,2,0,0,3207,3208,5,209,0,0,3208,
        3209,5,1,0,0,3209,3214,3,222,111,0,3210,3211,5,3,0,0,3211,3213,3,
        222,111,0,3212,3210,1,0,0,0,3213,3216,1,0,0,0,3214,3212,1,0,0,0,
        3214,3215,1,0,0,0,3215,3217,1,0,0,0,3216,3214,1,0,0,0,3217,3218,
        5,2,0,0,3218,3230,1,0,0,0,3219,3220,5,1,0,0,3220,3221,3,222,111,
        0,3221,3222,5,2,0,0,3222,3230,1,0,0,0,3223,3230,5,12,0,0,3224,3230,
        5,13,0,0,3225,3226,5,14,0,0,3226,3227,3,222,111,0,3227,3228,5,15,
        0,0,3228,3230,1,0,0,0,3229,3204,1,0,0,0,3229,3205,1,0,0,0,3229,3207,
        1,0,0,0,3229,3219,1,0,0,0,3229,3223,1,0,0,0,3229,3224,1,0,0,0,3229,
        3225,1,0,0,0,3230,225,1,0,0,0,3231,3233,5,320,0,0,3232,3234,5,324,
        0,0,3233,3232,1,0,0,0,3233,3234,1,0,0,0,3234,3262,1,0,0,0,3235,3237,
        5,318,0,0,3236,3238,5,324,0,0,3237,3236,1,0,0,0,3237,3238,1,0,0,
        0,3238,3262,1,0,0,0,3239,3241,5,324,0,0,3240,3242,5,324,0,0,3241,
        3240,1,0,0,0,3241,3242,1,0,0,0,3242,3262,1,0,0,0,3243,3244,5,16,
        0,0,3244,3245,5,329,0,0,3245,3247,5,17,0,0,3246,3248,5,324,0,0,3247,
        3246,1,0,0,0,3247,3248,1,0,0,0,3248,3262,1,0,0,0,3249,3251,5,16,
        0,0,3250,3252,5,329,0,0,3251,3250,1,0,0,0,3251,3252,1,0,0,0,3252,
        3253,1,0,0,0,3253,3255,5,3,0,0,3254,3256,5,329,0,0,3255,3254,1,0,
        0,0,3255,3256,1,0,0,0,3256,3257,1,0,0,0,3257,3259,5,17,0,0,3258,
        3260,5,324,0,0,3259,3258,1,0,0,0,3259,3260,1,0,0,0,3260,3262,1,0,
        0,0,3261,3231,1,0,0,0,3261,3235,1,0,0,0,3261,3239,1,0,0,0,3261,3243,
        1,0,0,0,3261,3249,1,0,0,0,3262,227,1,0,0,0,3263,3264,3,314,157,0,
        3264,3265,5,312,0,0,3265,3266,3,154,77,0,3266,229,1,0,0,0,3267,3268,
        5,104,0,0,3268,3272,7,31,0,0,3269,3270,5,276,0,0,3270,3272,7,32,
        0,0,3271,3267,1,0,0,0,3271,3269,1,0,0,0,3272,231,1,0,0,0,3273,3274,
        5,134,0,0,3274,3275,5,153,0,0,3275,3279,3,234,117,0,3276,3277,5,
        220,0,0,3277,3279,7,33,0,0,3278,3273,1,0,0,0,3278,3276,1,0,0,0,3279,
        233,1,0,0,0,3280,3281,5,220,0,0,3281,3288,5,279,0,0,3282,3283,5,
        220,0,0,3283,3288,5,48,0,0,3284,3285,5,225,0,0,3285,3288,5,220,0,
        0,3286,3288,5,249,0,0,3287,3280,1,0,0,0,3287,3282,1,0,0,0,3287,3284,
        1,0,0,0,3287,3286,1,0,0,0,3288,235,1,0,0,0,3289,3295,3,154,77,0,
        3290,3291,3,314,157,0,3291,3292,5,6,0,0,3292,3293,3,154,77,0,3293,
        3295,1,0,0,0,3294,3289,1,0,0,0,3294,3290,1,0,0,0,3295,237,1,0,0,
        0,3296,3297,3,314,157,0,3297,3298,5,4,0,0,3298,3299,3,314,157,0,
        3299,3302,1,0,0,0,3300,3302,3,314,157,0,3301,3296,1,0,0,0,3301,3300,
        1,0,0,0,3302,239,1,0,0,0,3303,3308,3,238,119,0,3304,3305,5,3,0,0,
        3305,3307,3,238,119,0,3306,3304,1,0,0,0,3307,3310,1,0,0,0,3308,3306,
        1,0,0,0,3308,3309,1,0,0,0,3309,241,1,0,0,0,3310,3308,1,0,0,0,3311,
        3312,5,107,0,0,3312,3313,3,244,122,0,3313,3317,3,250,125,0,3314,
        3316,3,252,126,0,3315,3314,1,0,0,0,3316,3319,1,0,0,0,3317,3315,1,
        0,0,0,3317,3318,1,0,0,0,3318,3320,1,0,0,0,3319,3317,1,0,0,0,3320,
        3321,3,254,127,0,3321,243,1,0,0,0,3322,3323,3,292,146,0,3323,3332,
        5,1,0,0,3324,3329,3,248,124,0,3325,3326,5,3,0,0,3326,3328,3,248,
        124,0,3327,3325,1,0,0,0,3328,3331,1,0,0,0,3329,3327,1,0,0,0,3329,
        3330,1,0,0,0,3330,3333,1,0,0,0,3331,3329,1,0,0,0,3332,3324,1,0,0,
        0,3332,3333,1,0,0,0,3333,3334,1,0,0,0,3334,3335,5,2,0,0,3335,245,
        1,0,0,0,3336,3337,3,290,145,0,3337,3346,5,1,0,0,3338,3343,3,248,
        124,0,3339,3340,5,3,0,0,3340,3342,3,248,124,0,3341,3339,1,0,0,0,
        3342,3345,1,0,0,0,3343,3341,1,0,0,0,3343,3344,1,0,0,0,3344,3347,
        1,0,0,0,3345,3343,1,0,0,0,3346,3338,1,0,0,0,3346,3347,1,0,0,0,3347,
        3348,1,0,0,0,3348,3349,5,2,0,0,3349,247,1,0,0,0,3350,3352,3,314,
        157,0,3351,3350,1,0,0,0,3351,3352,1,0,0,0,3352,3353,1,0,0,0,3353,
        3354,3,202,101,0,3354,249,1,0,0,0,3355,3356,5,232,0,0,3356,3357,
        3,202,101,0,3357,251,1,0,0,0,3358,3359,5,147,0,0,3359,3378,3,314,
        157,0,3360,3362,5,182,0,0,3361,3360,1,0,0,0,3361,3362,1,0,0,0,3362,
        3363,1,0,0,0,3363,3378,5,78,0,0,3364,3365,5,232,0,0,3365,3366,5,
        183,0,0,3366,3367,5,190,0,0,3367,3368,5,183,0,0,3368,3378,5,126,
        0,0,3369,3370,5,38,0,0,3370,3371,5,190,0,0,3371,3372,5,183,0,0,3372,
        3378,5,126,0,0,3373,3374,5,246,0,0,3374,3378,7,1,0,0,3375,3376,5,
        46,0,0,3376,3378,3,186,93,0,3377,3358,1,0,0,0,3377,3361,1,0,0,0,
        3377,3364,1,0,0,0,3377,3369,1,0,0,0,3377,3373,1,0,0,0,3377,3375,
        1,0,0,0,3378,253,1,0,0,0,3379,3380,5,230,0,0,3380,3479,3,160,80,
        0,3381,3382,5,251,0,0,3382,3383,3,314,157,0,3383,3384,5,312,0,0,
        3384,3385,3,154,77,0,3385,3479,1,0,0,0,3386,3387,5,40,0,0,3387,3389,
        3,154,77,0,3388,3390,3,256,128,0,3389,3388,1,0,0,0,3390,3391,1,0,
        0,0,3391,3389,1,0,0,0,3391,3392,1,0,0,0,3392,3394,1,0,0,0,3393,3395,
        3,260,130,0,3394,3393,1,0,0,0,3394,3395,1,0,0,0,3395,3396,1,0,0,
        0,3396,3397,5,88,0,0,3397,3398,5,40,0,0,3398,3479,1,0,0,0,3399,3401,
        5,40,0,0,3400,3402,3,256,128,0,3401,3400,1,0,0,0,3402,3403,1,0,0,
        0,3403,3401,1,0,0,0,3403,3404,1,0,0,0,3404,3406,1,0,0,0,3405,3407,
        3,260,130,0,3406,3405,1,0,0,0,3406,3407,1,0,0,0,3407,3408,1,0,0,
        0,3408,3409,5,88,0,0,3409,3410,5,40,0,0,3410,3479,1,0,0,0,3411,3412,
        5,119,0,0,3412,3413,3,154,77,0,3413,3414,5,265,0,0,3414,3418,3,264,
        132,0,3415,3417,3,258,129,0,3416,3415,1,0,0,0,3417,3420,1,0,0,0,
        3418,3416,1,0,0,0,3418,3419,1,0,0,0,3419,3422,1,0,0,0,3420,3418,
        1,0,0,0,3421,3423,3,260,130,0,3422,3421,1,0,0,0,3422,3423,1,0,0,
        0,3423,3424,1,0,0,0,3424,3425,5,88,0,0,3425,3426,5,119,0,0,3426,
        3479,1,0,0,0,3427,3428,5,135,0,0,3428,3479,3,314,157,0,3429,3430,
        5,151,0,0,3430,3479,3,314,157,0,3431,3437,5,32,0,0,3432,3433,3,262,
        131,0,3433,3434,5,325,0,0,3434,3436,1,0,0,0,3435,3432,1,0,0,0,3436,
        3439,1,0,0,0,3437,3435,1,0,0,0,3437,3438,1,0,0,0,3438,3441,1,0,0,
        0,3439,3437,1,0,0,0,3440,3442,3,264,132,0,3441,3440,1,0,0,0,3441,
        3442,1,0,0,0,3442,3443,1,0,0,0,3443,3479,5,88,0,0,3444,3445,3,314,
        157,0,3445,3446,5,10,0,0,3446,3448,1,0,0,0,3447,3444,1,0,0,0,3447,
        3448,1,0,0,0,3448,3449,1,0,0,0,3449,3450,5,161,0,0,3450,3451,3,264,
        132,0,3451,3452,5,88,0,0,3452,3453,5,161,0,0,3453,3479,1,0,0,0,3454,
        3455,3,314,157,0,3455,3456,5,10,0,0,3456,3458,1,0,0,0,3457,3454,
        1,0,0,0,3457,3458,1,0,0,0,3458,3459,1,0,0,0,3459,3460,5,302,0,0,
        3460,3461,3,154,77,0,3461,3462,5,81,0,0,3462,3463,3,264,132,0,3463,
        3464,5,88,0,0,3464,3465,5,302,0,0,3465,3479,1,0,0,0,3466,3467,3,
        314,157,0,3467,3468,5,10,0,0,3468,3470,1,0,0,0,3469,3466,1,0,0,0,
        3469,3470,1,0,0,0,3470,3471,1,0,0,0,3471,3472,5,224,0,0,3472,3473,
        3,264,132,0,3473,3474,5,286,0,0,3474,3475,3,154,77,0,3475,3476,5,
        88,0,0,3476,3477,5,224,0,0,3477,3479,1,0,0,0,3478,3379,1,0,0,0,3478,
        3381,1,0,0,0,3478,3386,1,0,0,0,3478,3399,1,0,0,0,3478,3411,1,0,0,
        0,3478,3427,1,0,0,0,3478,3429,1,0,0,0,3478,3431,1,0,0,0,3478,3447,
        1,0,0,0,3478,3457,1,0,0,0,3478,3469,1,0,0,0,3479,255,1,0,0,0,3480,
        3481,5,300,0,0,3481,3482,3,154,77,0,3482,3483,5,265,0,0,3483,3484,
        3,264,132,0,3484,257,1,0,0,0,3485,3486,5,86,0,0,3486,3487,3,154,
        77,0,3487,3488,5,265,0,0,3488,3489,3,264,132,0,3489,259,1,0,0,0,
        3490,3491,5,84,0,0,3491,3492,3,264,132,0,3492,261,1,0,0,0,3493,3494,
        5,69,0,0,3494,3499,3,314,157,0,3495,3496,5,3,0,0,3496,3498,3,314,
        157,0,3497,3495,1,0,0,0,3498,3501,1,0,0,0,3499,3497,1,0,0,0,3499,
        3500,1,0,0,0,3500,3502,1,0,0,0,3501,3499,1,0,0,0,3502,3505,3,202,
        101,0,3503,3504,5,70,0,0,3504,3506,3,160,80,0,3505,3503,1,0,0,0,
        3505,3506,1,0,0,0,3506,263,1,0,0,0,3507,3508,3,254,127,0,3508,3509,
        5,325,0,0,3509,3511,1,0,0,0,3510,3507,1,0,0,0,3511,3512,1,0,0,0,
        3512,3510,1,0,0,0,3512,3513,1,0,0,0,3513,265,1,0,0,0,3514,3521,5,
        53,0,0,3515,3521,5,248,0,0,3516,3521,5,73,0,0,3517,3521,5,127,0,
        0,3518,3521,5,287,0,0,3519,3521,3,314,157,0,3520,3514,1,0,0,0,3520,
        3515,1,0,0,0,3520,3516,1,0,0,0,3520,3517,1,0,0,0,3520,3518,1,0,0,
        0,3520,3519,1,0,0,0,3521,267,1,0,0,0,3522,3526,5,260,0,0,3523,3526,
        5,243,0,0,3524,3526,3,314,157,0,3525,3522,1,0,0,0,3525,3523,1,0,
        0,0,3525,3524,1,0,0,0,3526,269,1,0,0,0,3527,3529,3,268,134,0,3528,
        3527,1,0,0,0,3528,3529,1,0,0,0,3529,3530,1,0,0,0,3530,3531,3,300,
        150,0,3531,271,1,0,0,0,3532,3535,3,274,137,0,3533,3535,3,278,139,
        0,3534,3532,1,0,0,0,3534,3533,1,0,0,0,3535,273,1,0,0,0,3536,3548,
        3,314,157,0,3537,3538,3,314,157,0,3538,3539,5,4,0,0,3539,3540,3,
        314,157,0,3540,3548,1,0,0,0,3541,3542,3,314,157,0,3542,3543,5,4,
        0,0,3543,3544,3,314,157,0,3544,3545,5,4,0,0,3545,3546,3,314,157,
        0,3546,3548,1,0,0,0,3547,3536,1,0,0,0,3547,3537,1,0,0,0,3547,3541,
        1,0,0,0,3548,275,1,0,0,0,3549,3561,3,314,157,0,3550,3551,3,314,157,
        0,3551,3552,5,4,0,0,3552,3553,3,314,157,0,3553,3561,1,0,0,0,3554,
        3555,3,314,157,0,3555,3556,5,4,0,0,3556,3557,3,314,157,0,3557,3558,
        5,4,0,0,3558,3559,3,314,157,0,3559,3561,1,0,0,0,3560,3549,1,0,0,
        0,3560,3550,1,0,0,0,3560,3554,1,0,0,0,3561,277,1,0,0,0,3562,3574,
        3,314,157,0,3563,3564,3,314,157,0,3564,3565,5,4,0,0,3565,3566,3,
        314,157,0,3566,3574,1,0,0,0,3567,3568,3,314,157,0,3568,3569,5,4,
        0,0,3569,3570,3,314,157,0,3570,3571,5,4,0,0,3571,3572,3,314,157,
        0,3572,3574,1,0,0,0,3573,3562,1,0,0,0,3573,3563,1,0,0,0,3573,3567,
        1,0,0,0,3574,279,1,0,0,0,3575,3587,3,314,157,0,3576,3577,3,314,157,
        0,3577,3578,5,4,0,0,3578,3579,3,314,157,0,3579,3587,1,0,0,0,3580,
        3581,3,314,157,0,3581,3582,5,4,0,0,3582,3583,3,314,157,0,3583,3584,
        5,4,0,0,3584,3585,3,314,157,0,3585,3587,1,0,0,0,3586,3575,1,0,0,
        0,3586,3576,1,0,0,0,3586,3580,1,0,0,0,3587,281,1,0,0,0,3588,3594,
        3,314,157,0,3589,3590,3,314,157,0,3590,3591,5,4,0,0,3591,3592,3,
        314,157,0,3592,3594,1,0,0,0,3593,3588,1,0,0,0,3593,3589,1,0,0,0,
        3594,283,1,0,0,0,3595,3601,3,314,157,0,3596,3597,3,314,157,0,3597,
        3598,5,4,0,0,3598,3599,3,314,157,0,3599,3601,1,0,0,0,3600,3595,1,
        0,0,0,3600,3596,1,0,0,0,3601,285,1,0,0,0,3602,3603,3,314,157,0,3603,
        287,1,0,0,0,3604,3605,3,314,157,0,3605,289,1,0,0,0,3606,3607,3,300,
        150,0,3607,291,1,0,0,0,3608,3609,3,300,150,0,3609,293,1,0,0,0,3610,
        3613,3,300,150,0,3611,3613,4,147,14,0,3612,3610,1,0,0,0,3612,3611,
        1,0,0,0,3613,295,1,0,0,0,3614,3615,3,300,150,0,3615,297,1,0,0,0,
        3616,3617,3,314,157,0,3617,299,1,0,0,0,3618,3623,3,314,157,0,3619,
        3620,5,4,0,0,3620,3622,3,314,157,0,3621,3619,1,0,0,0,3622,3625,1,
        0,0,0,3623,3621,1,0,0,0,3623,3624,1,0,0,0,3624,301,1,0,0,0,3625,
        3623,1,0,0,0,3626,3627,5,103,0,0,3627,3628,3,304,152,0,3628,3629,
        5,28,0,0,3629,3630,5,187,0,0,3630,3631,3,160,80,0,3631,303,1,0,0,
        0,3632,3633,7,34,0,0,3633,305,1,0,0,0,3634,3638,3,308,154,0,3635,
        3638,5,64,0,0,3636,3638,5,60,0,0,3637,3634,1,0,0,0,3637,3635,1,0,
        0,0,3637,3636,1,0,0,0,3638,307,1,0,0,0,3639,3645,3,314,157,0,3640,
        3641,5,289,0,0,3641,3645,3,314,157,0,3642,3643,5,235,0,0,3643,3645,
        3,314,157,0,3644,3639,1,0,0,0,3644,3640,1,0,0,0,3644,3642,1,0,0,
        0,3645,309,1,0,0,0,3646,3651,3,314,157,0,3647,3648,5,3,0,0,3648,
        3650,3,314,157,0,3649,3647,1,0,0,0,3650,3653,1,0,0,0,3651,3649,1,
        0,0,0,3651,3652,1,0,0,0,3652,311,1,0,0,0,3653,3651,1,0,0,0,3654,
        3662,5,53,0,0,3655,3662,5,248,0,0,3656,3662,5,73,0,0,3657,3662,5,
        127,0,0,3658,3662,5,287,0,0,3659,3662,5,93,0,0,3660,3662,3,314,157,
        0,3661,3654,1,0,0,0,3661,3655,1,0,0,0,3661,3656,1,0,0,0,3661,3657,
        1,0,0,0,3661,3658,1,0,0,0,3661,3659,1,0,0,0,3661,3660,1,0,0,0,3662,
        313,1,0,0,0,3663,3669,5,332,0,0,3664,3669,5,334,0,0,3665,3669,3,
        320,160,0,3666,3669,5,335,0,0,3667,3669,5,333,0,0,3668,3663,1,0,
        0,0,3668,3664,1,0,0,0,3668,3665,1,0,0,0,3668,3666,1,0,0,0,3668,3667,
        1,0,0,0,3669,315,1,0,0,0,3670,3672,5,319,0,0,3671,3670,1,0,0,0,3671,
        3672,1,0,0,0,3672,3673,1,0,0,0,3673,3683,5,330,0,0,3674,3676,5,319,
        0,0,3675,3674,1,0,0,0,3675,3676,1,0,0,0,3676,3677,1,0,0,0,3677,3683,
        5,331,0,0,3678,3680,5,319,0,0,3679,3678,1,0,0,0,3679,3680,1,0,0,
        0,3680,3681,1,0,0,0,3681,3683,5,329,0,0,3682,3671,1,0,0,0,3682,3675,
        1,0,0,0,3682,3679,1,0,0,0,3683,317,1,0,0,0,3684,3687,3,314,157,0,
        3685,3687,3,186,93,0,3686,3684,1,0,0,0,3686,3685,1,0,0,0,3687,319,
        1,0,0,0,3688,3689,7,35,0,0,3689,321,1,0,0,0,477,325,334,338,342,
        346,350,363,370,374,378,384,388,395,400,404,410,414,433,439,443,
        447,451,459,463,466,471,477,486,492,496,502,509,517,529,538,547,
        553,564,572,580,587,597,604,612,627,662,665,668,671,677,682,689,
        695,699,703,711,717,721,725,739,747,766,791,794,801,808,817,821,
        828,836,845,851,856,860,868,873,882,888,895,904,910,914,920,927,
        932,945,950,962,966,972,981,986,992,1020,1026,1028,1034,1040,1042,
        1050,1052,1062,1064,1079,1084,1091,1101,1107,1109,1117,1119,1144,
        1147,1151,1155,1173,1176,1187,1190,1206,1216,1220,1226,1229,1238,
        1250,1253,1263,1267,1273,1280,1285,1291,1295,1299,1305,1316,1325,
        1335,1338,1343,1345,1352,1358,1360,1364,1374,1380,1383,1385,1397,
        1404,1408,1411,1415,1419,1428,1431,1434,1439,1442,1450,1453,1466,
        1470,1477,1485,1496,1499,1509,1512,1523,1528,1536,1539,1543,1547,
        1556,1561,1570,1573,1576,1580,1591,1594,1597,1602,1605,1634,1638,
        1642,1646,1650,1654,1656,1667,1672,1681,1690,1693,1699,1707,1716,
        1719,1727,1730,1733,1738,1741,1753,1756,1764,1769,1773,1775,1777,
        1792,1794,1805,1826,1836,1847,1851,1853,1861,1872,1883,1890,1897,
        1910,1916,1938,1953,1958,1962,1972,1978,1984,1992,1997,2004,2006,
        2012,2018,2022,2027,2036,2041,2055,2065,2068,2077,2082,2087,2089,
        2098,2101,2109,2112,2119,2124,2131,2135,2137,2145,2155,2161,2163,
        2170,2174,2176,2183,2187,2189,2191,2200,2211,2215,2225,2235,2239,
        2247,2249,2262,2270,2279,2285,2293,2299,2303,2308,2313,2319,2333,
        2335,2365,2376,2384,2389,2394,2407,2413,2416,2423,2428,2431,2434,
        2439,2446,2449,2458,2461,2465,2468,2471,2486,2489,2508,2512,2520,
        2524,2549,2552,2561,2567,2573,2579,2588,2591,2594,2613,2622,2644,
        2647,2657,2666,2672,2678,2689,2691,2696,2703,2705,2711,2717,2728,
        2737,2742,2747,2749,2751,2757,2759,2769,2778,2780,2786,2788,2791,
        2801,2803,2811,2819,2822,2827,2832,2844,2848,2852,2855,2857,2865,
        2868,2878,2886,2892,2894,2902,2912,2918,2932,2941,2948,2953,2960,
        2965,2988,2993,2995,3002,3006,3013,3017,3033,3048,3055,3064,3074,
        3079,3088,3093,3101,3109,3112,3118,3121,3128,3136,3139,3147,3150,
        3176,3187,3192,3199,3201,3214,3229,3233,3237,3241,3247,3251,3255,
        3259,3261,3271,3278,3287,3294,3301,3308,3317,3329,3332,3343,3346,
        3351,3361,3377,3391,3394,3403,3406,3418,3422,3437,3441,3447,3457,
        3469,3478,3499,3505,3512,3520,3525,3528,3534,3547,3560,3573,3586,
        3593,3600,3612,3623,3637,3644,3651,3661,3668,3671,3675,3679,3682,
        3686
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!TrinoSqlParser.__ATN) {
            TrinoSqlParser.__ATN = new antlr.ATNDeserializer().deserialize(TrinoSqlParser._serializedATN);
        }

        return TrinoSqlParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(TrinoSqlParser.literalNames, TrinoSqlParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return TrinoSqlParser.vocabulary;
    }

    private static readonly decisionsToDFA = TrinoSqlParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class ProgramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.EOF, 0)!;
    }
    public statements(): StatementsContext[];
    public statements(i: number): StatementsContext | null;
    public statements(i?: number): StatementsContext[] | StatementsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StatementsContext);
        }

        return this.getRuleContext(i, StatementsContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_program;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterProgram) {
             listener.enterProgram(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitProgram) {
             listener.exitProgram(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitProgram) {
            return visitor.visitProgram(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public singleStatement(): SingleStatementContext {
        return this.getRuleContext(0, SingleStatementContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_statements;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterStatements) {
             listener.enterStatements(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitStatements) {
             listener.exitStatements(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitStatements) {
            return visitor.visitStatements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.SEMICOLON, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_singleStatement;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSingleStatement) {
             listener.enterSingleStatement(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSingleStatement) {
             listener.exitSingleStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSingleStatement) {
            return visitor.visitSingleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.SEMICOLON, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_standaloneExpression;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterStandaloneExpression) {
             listener.enterStandaloneExpression(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitStandaloneExpression) {
             listener.exitStandaloneExpression(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitStandaloneExpression) {
            return visitor.visitStandaloneExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandalonePathSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathSpecification(): PathSpecificationContext {
        return this.getRuleContext(0, PathSpecificationContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.SEMICOLON, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_standalonePathSpecification;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterStandalonePathSpecification) {
             listener.enterStandalonePathSpecification(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitStandalonePathSpecification) {
             listener.exitStandalonePathSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitStandalonePathSpecification) {
            return visitor.visitStandalonePathSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.SEMICOLON, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_standaloneType;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterStandaloneType) {
             listener.enterStandaloneType(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitStandaloneType) {
             listener.exitStandaloneType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitStandaloneType) {
            return visitor.visitStandaloneType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneRowPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rowPattern(): RowPatternContext {
        return this.getRuleContext(0, RowPatternContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.SEMICOLON, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_standaloneRowPattern;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterStandaloneRowPattern) {
             listener.enterStandaloneRowPattern(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitStandaloneRowPattern) {
             listener.exitStandaloneRowPattern(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitStandaloneRowPattern) {
            return visitor.visitStandaloneRowPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StandaloneFunctionSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionSpecification(): FunctionSpecificationContext {
        return this.getRuleContext(0, FunctionSpecificationContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_standaloneFunctionSpecification;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterStandaloneFunctionSpecification) {
             listener.enterStandaloneFunctionSpecification(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitStandaloneFunctionSpecification) {
             listener.exitStandaloneFunctionSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitStandaloneFunctionSpecification) {
            return visitor.visitStandaloneFunctionSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_statement;
    }
    public override copyFrom(ctx: StatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ExplainContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_EXPLAIN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_EXPLAIN, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public explainOption(): ExplainOptionContext[];
    public explainOption(i: number): ExplainOptionContext | null;
    public explainOption(i?: number): ExplainOptionContext[] | ExplainOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExplainOptionContext);
        }

        return this.getRuleContext(i, ExplainOptionContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterExplain) {
             listener.enterExplain(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitExplain) {
             listener.exitExplain(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitExplain) {
            return visitor.visitExplain(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PrepareContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_PREPARE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_PREPARE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FROM, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPrepare) {
             listener.enterPrepare(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPrepare) {
             listener.exitPrepare(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPrepare) {
            return visitor.visitPrepare(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DROP, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_VIEW, 0)!;
    }
    public viewRef(): ViewRefContext {
        return this.getRuleContext(0, ViewRefContext)!;
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDropMaterializedView) {
             listener.enterDropMaterializedView(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDropMaterializedView) {
             listener.exitDropMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDropMaterializedView) {
            return visitor.visitDropMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetMaterializedViewPropertiesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ALTER, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_VIEW, 0)!;
    }
    public viewRef(): ViewRefContext {
        return this.getRuleContext(0, ViewRefContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SET, 0)!;
    }
    public KW_PROPERTIES(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_PROPERTIES, 0)!;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        return this.getRuleContext(0, PropertyAssignmentsContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSetMaterializedViewProperties) {
             listener.enterSetMaterializedViewProperties(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSetMaterializedViewProperties) {
             listener.exitSetMaterializedViewProperties(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSetMaterializedViewProperties) {
            return visitor.visitSetMaterializedViewProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropNotNullConstraintContext extends StatementContext {
    public _tableName?: TableRefContext;
    public _column?: ColumnRefContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode[];
    public KW_ALTER(i: number): antlr.TerminalNode | null;
    public KW_ALTER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_ALTER);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_ALTER, i);
    	}
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COLUMN, 0)!;
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DROP, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_NOT, 0)!;
    }
    public KW_NULL(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_NULL, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public columnRef(): ColumnRefContext {
        return this.getRuleContext(0, ColumnRefContext)!;
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDropNotNullConstraint) {
             listener.enterDropNotNullConstraint(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDropNotNullConstraint) {
             listener.exitDropNotNullConstraint(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDropNotNullConstraint) {
            return visitor.visitDropNotNullConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UseContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_USE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_USE, 0)!;
    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(0, SchemaRefContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterUse) {
             listener.enterUse(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitUse) {
             listener.exitUse(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitUse) {
            return visitor.visitUse(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeallocateContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DEALLOCATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DEALLOCATE, 0)!;
    }
    public KW_PREPARE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_PREPARE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDeallocate) {
             listener.enterDeallocate(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDeallocate) {
             listener.exitDeallocate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDeallocate) {
            return visitor.visitDeallocate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameTableContext extends StatementContext {
    public _from_?: TableRefContext;
    public _to?: TableNameCreateContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_RENAME, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TO, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRenameTable) {
             listener.enterRenameTable(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRenameTable) {
             listener.exitRenameTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRenameTable) {
            return visitor.visitRenameTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommitContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_COMMIT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COMMIT, 0)!;
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WORK, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCommit) {
             listener.enterCommit(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCommit) {
             listener.exitCommit(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCommit) {
            return visitor.visitCommit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateRoleContext extends StatementContext {
    public _name?: IdentifierContext;
    public _catalog?: CatalogRefContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CREATE, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ROLE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ADMIN, 0);
    }
    public grantor(): GrantorContext | null {
        return this.getRuleContext(0, GrantorContext);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IN, 0);
    }
    public catalogRef(): CatalogRefContext | null {
        return this.getRuleContext(0, CatalogRefContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCreateRole) {
             listener.enterCreateRole(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCreateRole) {
             listener.exitCreateRole(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCreateRole) {
            return visitor.visitCreateRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CREATE, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FUNCTION, 0)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowCreateFunction) {
             listener.enterShowCreateFunction(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowCreateFunction) {
             listener.exitShowCreateFunction(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowCreateFunction) {
            return visitor.visitShowCreateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropColumnContext extends StatementContext {
    public _tableName?: TableRefContext;
    public _column?: ColumnRefContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DROP, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COLUMN, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public columnRef(): ColumnRefContext {
        return this.getRuleContext(0, ColumnRefContext)!;
    }
    public KW_IF(): antlr.TerminalNode[];
    public KW_IF(i: number): antlr.TerminalNode | null;
    public KW_IF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_IF);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_IF, i);
    	}
    }
    public KW_EXISTS(): antlr.TerminalNode[];
    public KW_EXISTS(i: number): antlr.TerminalNode | null;
    public KW_EXISTS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_EXISTS);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_EXISTS, i);
    	}
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDropColumn) {
             listener.enterDropColumn(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDropColumn) {
             listener.exitDropColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDropColumn) {
            return visitor.visitDropColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DROP, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_VIEW, 0)!;
    }
    public viewRef(): ViewRefContext {
        return this.getRuleContext(0, ViewRefContext)!;
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDropView) {
             listener.enterDropView(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDropView) {
             listener.exitDropView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDropView) {
            return visitor.visitDropView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTablesContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_TABLES(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLES, 0)!;
    }
    public schemaRef(): SchemaRefContext | null {
        return this.getRuleContext(0, SchemaRefContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LIKE, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IN, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ESCAPE, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowTables) {
             listener.enterShowTables(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowTables) {
             listener.exitShowTables(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowTables) {
            return visitor.visitShowTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetViewAuthorizationContext extends StatementContext {
    public _from_?: ViewRefContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ALTER, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_VIEW, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SET, 0)!;
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AUTHORIZATION, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public viewRef(): ViewRefContext {
        return this.getRuleContext(0, ViewRefContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSetViewAuthorization) {
             listener.enterSetViewAuthorization(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSetViewAuthorization) {
             listener.exitSetViewAuthorization(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSetViewAuthorization) {
            return visitor.visitSetViewAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTableCommentContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COMMENT, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ON, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowTableComment) {
             listener.enterShowTableComment(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowTableComment) {
             listener.exitShowTableComment(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowTableComment) {
            return visitor.visitShowTableComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCatalogsContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_CATALOGS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CATALOGS, 0)!;
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LIKE, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ESCAPE, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowCatalogs) {
             listener.enterShowCatalogs(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowCatalogs) {
             listener.exitShowCatalogs(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowCatalogs) {
            return visitor.visitShowCatalogs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowRolesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_ROLES(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ROLES, 0)!;
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CURRENT, 0);
    }
    public catalogRef(): CatalogRefContext | null {
        return this.getRuleContext(0, CatalogRefContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IN, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowRoles) {
             listener.enterShowRoles(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowRoles) {
             listener.exitShowRoles(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowRoles) {
            return visitor.visitShowRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_MERGE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_MERGE, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_INTO, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_USING, 0)!;
    }
    public relation(): RelationContext {
        return this.getRuleContext(0, RelationContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ON, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public mergeCase(): MergeCaseContext[];
    public mergeCase(i: number): MergeCaseContext | null;
    public mergeCase(i?: number): MergeCaseContext[] | MergeCaseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MergeCaseContext);
        }

        return this.getRuleContext(i, MergeCaseContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AS, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterMerge) {
             listener.enterMerge(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitMerge) {
             listener.exitMerge(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitMerge) {
            return visitor.visitMerge(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameColumnContext extends StatementContext {
    public _tableName?: TableRefContext;
    public _from_?: ColumnRefContext;
    public _to?: ColumnNameCreateContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_RENAME, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COLUMN, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TO, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public columnRef(): ColumnRefContext {
        return this.getRuleContext(0, ColumnRefContext)!;
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public KW_IF(): antlr.TerminalNode[];
    public KW_IF(i: number): antlr.TerminalNode | null;
    public KW_IF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_IF);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_IF, i);
    	}
    }
    public KW_EXISTS(): antlr.TerminalNode[];
    public KW_EXISTS(i: number): antlr.TerminalNode | null;
    public KW_EXISTS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_EXISTS);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_EXISTS, i);
    	}
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRenameColumn) {
             listener.enterRenameColumn(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRenameColumn) {
             listener.exitRenameColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRenameColumn) {
            return visitor.visitRenameColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentColumnContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COMMENT, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ON, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COLUMN, 0)!;
    }
    public columnRef(): ColumnRefContext {
        return this.getRuleContext(0, ColumnRefContext)!;
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_IS, 0)!;
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NULL, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCommentColumn) {
             listener.enterCommentColumn(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCommentColumn) {
             listener.exitCommentColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCommentColumn) {
            return visitor.visitCommentColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RevokeRolesContext extends StatementContext {
    public _catalog?: CatalogRefContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REVOKE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_REVOKE, 0)!;
    }
    public privilegeOrRole(): PrivilegeOrRoleContext[];
    public privilegeOrRole(i: number): PrivilegeOrRoleContext | null;
    public privilegeOrRole(i?: number): PrivilegeOrRoleContext[] | PrivilegeOrRoleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeOrRoleContext);
        }

        return this.getRuleContext(i, PrivilegeOrRoleContext);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FROM, 0)!;
    }
    public principal(): PrincipalContext[];
    public principal(i: number): PrincipalContext | null;
    public principal(i?: number): PrincipalContext[] | PrincipalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrincipalContext);
        }

        return this.getRuleContext(i, PrincipalContext);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ADMIN, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OPTION, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FOR, 0);
    }
    public KW_GRANTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_GRANTED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_BY, 0);
    }
    public grantor(): GrantorContext | null {
        return this.getRuleContext(0, GrantorContext);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IN, 0);
    }
    public catalogRef(): CatalogRefContext | null {
        return this.getRuleContext(0, CatalogRefContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRevokeRoles) {
             listener.enterRevokeRoles(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRevokeRoles) {
             listener.exitRevokeRoles(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRevokeRoles) {
            return visitor.visitRevokeRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowCreateTable) {
             listener.enterShowCreateTable(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowCreateTable) {
             listener.exitShowCreateTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowCreateTable) {
            return visitor.visitShowCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowColumnsContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_COLUMNS, 0);
    }
    public tableOrViewName(): TableOrViewNameContext {
        return this.getRuleContext(0, TableOrViewNameContext)!;
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IN, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LIKE, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ESCAPE, 0);
    }
    public KW_DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DESCRIBE, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DESC, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowColumns) {
             listener.enterShowColumns(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowColumns) {
             listener.exitShowColumns(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowColumns) {
            return visitor.visitShowColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowRoleGrantsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ROLE, 0)!;
    }
    public KW_GRANTS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_GRANTS, 0)!;
    }
    public catalogRef(): CatalogRefContext | null {
        return this.getRuleContext(0, CatalogRefContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IN, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowRoleGrants) {
             listener.enterShowRoleGrants(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowRoleGrants) {
             listener.exitShowRoleGrants(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowRoleGrants) {
            return visitor.visitShowRoleGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AddColumnContext extends StatementContext {
    public _tableName?: TableRefContext;
    public _column?: ColumnDefinitionContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public KW_ADD(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ADD, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COLUMN, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public columnDefinition(): ColumnDefinitionContext {
        return this.getRuleContext(0, ColumnDefinitionContext)!;
    }
    public KW_IF(): antlr.TerminalNode[];
    public KW_IF(i: number): antlr.TerminalNode | null;
    public KW_IF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_IF);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_IF, i);
    	}
    }
    public KW_EXISTS(): antlr.TerminalNode[];
    public KW_EXISTS(i: number): antlr.TerminalNode | null;
    public KW_EXISTS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_EXISTS);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_EXISTS, i);
    	}
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterAddColumn) {
             listener.enterAddColumn(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitAddColumn) {
             listener.exitAddColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitAddColumn) {
            return visitor.visitAddColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DenyContext extends StatementContext {
    public _grantee?: PrincipalContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DENY(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DENY, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ON, 0)!;
    }
    public grantObject(): GrantObjectContext {
        return this.getRuleContext(0, GrantObjectContext)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TO, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ALL, 0);
    }
    public KW_PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PRIVILEGES, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDeny) {
             listener.enterDeny(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDeny) {
             listener.exitDeny(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDeny) {
            return visitor.visitDeny(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResetSessionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_RESET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_RESET, 0)!;
    }
    public KW_SESSION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SESSION, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterResetSession) {
             listener.enterResetSession(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitResetSession) {
             listener.exitResetSession(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitResetSession) {
            return visitor.visitResetSession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InsertIntoContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_INSERT, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_INTO, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public columnList(): ColumnListContext | null {
        return this.getRuleContext(0, ColumnListContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterInsertInto) {
             listener.enterInsertInto(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitInsertInto) {
             listener.exitInsertInto(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitInsertInto) {
            return visitor.visitInsertInto(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSessionContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_SESSION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SESSION, 0)!;
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LIKE, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ESCAPE, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowSession) {
             listener.enterShowSession(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowSession) {
             listener.exitShowSession(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowSession) {
            return visitor.visitShowSession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CREATE, 0)!;
    }
    public KW_SCHEMA(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SCHEMA, 0)!;
    }
    public schemaNameCreate(): SchemaNameCreateContext {
        return this.getRuleContext(0, SchemaNameCreateContext)!;
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NOT, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AUTHORIZATION, 0);
    }
    public principal(): PrincipalContext | null {
        return this.getRuleContext(0, PrincipalContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCreateSchema) {
             listener.enterCreateSchema(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCreateSchema) {
             listener.exitCreateSchema(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCreateSchema) {
            return visitor.visitCreateSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSessionAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SET, 0)!;
    }
    public KW_SESSION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SESSION, 0)!;
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AUTHORIZATION, 0)!;
    }
    public authorizationUser(): AuthorizationUserContext {
        return this.getRuleContext(0, AuthorizationUserContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSetSessionAuthorization) {
             listener.enterSetSessionAuthorization(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSetSessionAuthorization) {
             listener.exitSetSessionAuthorization(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSetSessionAuthorization) {
            return visitor.visitSetSessionAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainAnalyzeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_EXPLAIN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_EXPLAIN, 0)!;
    }
    public KW_ANALYZE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ANALYZE, 0)!;
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public KW_VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_VERBOSE, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterExplainAnalyze) {
             listener.enterExplainAnalyze(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitExplainAnalyze) {
             listener.exitExplainAnalyze(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitExplainAnalyze) {
            return visitor.visitExplainAnalyze(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExecuteContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_EXECUTE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_USING, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterExecute) {
             listener.enterExecute(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitExecute) {
             listener.exitExecute(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitExecute) {
            return visitor.visitExecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ALTER, 0)!;
    }
    public KW_SCHEMA(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SCHEMA, 0)!;
    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(0, SchemaRefContext)!;
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_RENAME, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TO, 0)!;
    }
    public schemaNameCreate(): SchemaNameCreateContext {
        return this.getRuleContext(0, SchemaNameCreateContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRenameSchema) {
             listener.enterRenameSchema(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRenameSchema) {
             listener.exitRenameSchema(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRenameSchema) {
            return visitor.visitRenameSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropRoleContext extends StatementContext {
    public _name?: IdentifierContext;
    public _catalog?: CatalogRefContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DROP, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ROLE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IN, 0);
    }
    public catalogRef(): CatalogRefContext | null {
        return this.getRuleContext(0, CatalogRefContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDropRole) {
             listener.enterDropRole(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDropRole) {
             listener.exitDropRole(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDropRole) {
            return visitor.visitDropRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AnalyzeContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ANALYZE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ANALYZE, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterAnalyze) {
             listener.enterAnalyze(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitAnalyze) {
             listener.exitAnalyze(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitAnalyze) {
            return visitor.visitAnalyze(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetRoleContext extends StatementContext {
    public _role?: IdentifierContext;
    public _catalog?: CatalogRefContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SET, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ROLE, 0)!;
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ALL, 0);
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NONE, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IN, 0);
    }
    public catalogRef(): CatalogRefContext | null {
        return this.getRuleContext(0, CatalogRefContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSetRole) {
             listener.enterSetRole(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSetRole) {
             listener.exitSetRole(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSetRole) {
            return visitor.visitSetRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CREATE, 0)!;
    }
    public functionSpecification(): FunctionSpecificationContext {
        return this.getRuleContext(0, FunctionSpecificationContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_REPLACE, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCreateFunction) {
             listener.enterCreateFunction(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCreateFunction) {
             listener.exitCreateFunction(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCreateFunction) {
            return visitor.visitCreateFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropCatalogContext extends StatementContext {
    public _catalog?: CatalogRefContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DROP, 0)!;
    }
    public KW_CATALOG(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CATALOG, 0)!;
    }
    public catalogRef(): CatalogRefContext {
        return this.getRuleContext(0, CatalogRefContext)!;
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CASCADE, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RESTRICT, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDropCatalog) {
             listener.enterDropCatalog(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDropCatalog) {
             listener.exitDropCatalog(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDropCatalog) {
            return visitor.visitDropCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowGrantsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_GRANTS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_GRANTS, 0)!;
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ON, 0);
    }
    public grantObject(): GrantObjectContext | null {
        return this.getRuleContext(0, GrantObjectContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowGrants) {
             listener.enterShowGrants(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowGrants) {
             listener.exitShowGrants(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowGrants) {
            return visitor.visitShowGrants(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DROP, 0)!;
    }
    public KW_SCHEMA(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SCHEMA, 0)!;
    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(0, SchemaRefContext)!;
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CASCADE, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RESTRICT, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDropSchema) {
             listener.enterDropSchema(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDropSchema) {
             listener.exitDropSchema(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDropSchema) {
            return visitor.visitDropSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ResetSessionAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_RESET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_RESET, 0)!;
    }
    public KW_SESSION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SESSION, 0)!;
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AUTHORIZATION, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterResetSessionAuthorization) {
             listener.enterResetSessionAuthorization(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitResetSessionAuthorization) {
             listener.exitResetSessionAuthorization(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitResetSessionAuthorization) {
            return visitor.visitResetSessionAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTableAuthorizationContext extends StatementContext {
    public _tableName?: TableRefContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SET, 0)!;
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AUTHORIZATION, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSetTableAuthorization) {
             listener.enterSetTableAuthorization(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSetTableAuthorization) {
             listener.exitSetTableAuthorization(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSetTableAuthorization) {
            return visitor.visitSetTableAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CREATE, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_VIEW, 0)!;
    }
    public viewRef(): ViewRefContext {
        return this.getRuleContext(0, ViewRefContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowCreateView) {
             listener.enterShowCreateView(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowCreateView) {
             listener.exitShowCreateView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowCreateView) {
            return visitor.visitShowCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowColumnCommentContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COMMENT, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ON, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COLUMN, 0)!;
    }
    public columnRef(): ColumnRefContext {
        return this.getRuleContext(0, ColumnRefContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowColumnComment) {
             listener.enterShowColumnComment(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowColumnComment) {
             listener.exitShowColumnComment(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowColumnComment) {
            return visitor.visitShowColumnComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableContext extends StatementContext {
    public _comment?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public tableElement(): TableElementContext[];
    public tableElement(i: number): TableElementContext | null;
    public tableElement(i?: number): TableElementContext[] | TableElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableElementContext);
        }

        return this.getRuleContext(i, TableElementContext);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_REPLACE, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NOT, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_COMMENT, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCreateTable) {
             listener.enterCreateTable(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCreateTable) {
             listener.exitCreateTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCreateTable) {
            return visitor.visitCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GrantPrivilegesContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_GRANT(): antlr.TerminalNode[];
    public KW_GRANT(i: number): antlr.TerminalNode | null;
    public KW_GRANT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_GRANT);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_GRANT, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ON, 0)!;
    }
    public grantObject(): GrantObjectContext {
        return this.getRuleContext(0, GrantObjectContext)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TO, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ALL, 0);
    }
    public KW_PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PRIVILEGES, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OPTION, 0);
    }
    public privilegeOrRole(): PrivilegeOrRoleContext[];
    public privilegeOrRole(i: number): PrivilegeOrRoleContext | null;
    public privilegeOrRole(i?: number): PrivilegeOrRoleContext[] | PrivilegeOrRoleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeOrRoleContext);
        }

        return this.getRuleContext(i, PrivilegeOrRoleContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterGrantPrivileges) {
             listener.enterGrantPrivileges(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitGrantPrivileges) {
             listener.exitGrantPrivileges(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitGrantPrivileges) {
            return visitor.visitGrantPrivileges(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StartTransactionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_START(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_START, 0)!;
    }
    public KW_TRANSACTION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TRANSACTION, 0)!;
    }
    public transactionMode(): TransactionModeContext[];
    public transactionMode(i: number): TransactionModeContext | null;
    public transactionMode(i?: number): TransactionModeContext[] | TransactionModeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TransactionModeContext);
        }

        return this.getRuleContext(i, TransactionModeContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterStartTransaction) {
             listener.enterStartTransaction(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitStartTransaction) {
             listener.exitStartTransaction(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitStartTransaction) {
            return visitor.visitStartTransaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateTableAsSelectContext extends StatementContext {
    public _comment?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public tableNameCreate(): TableNameCreateContext {
        return this.getRuleContext(0, TableNameCreateContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AS, 0)!;
    }
    public rootQuery(): RootQueryContext | null {
        return this.getRuleContext(0, RootQueryContext);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_REPLACE, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NOT, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0);
    }
    public columnListCreate(): ColumnListCreateContext | null {
        return this.getRuleContext(0, ColumnListCreateContext);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_COMMENT, 0);
    }
    public KW_WITH(): antlr.TerminalNode[];
    public KW_WITH(i: number): antlr.TerminalNode | null;
    public KW_WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_WITH);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_WITH, i);
    	}
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DATA, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NO, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCreateTableAsSelect) {
             listener.enterCreateTableAsSelect(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCreateTableAsSelect) {
             listener.exitCreateTableAsSelect(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCreateTableAsSelect) {
            return visitor.visitCreateTableAsSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COMMENT, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ON, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_VIEW, 0)!;
    }
    public viewRef(): ViewRefContext {
        return this.getRuleContext(0, ViewRefContext)!;
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_IS, 0)!;
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NULL, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCommentView) {
             listener.enterCommentView(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCommentView) {
             listener.exitCommentView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCommentView) {
            return visitor.visitCommentView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowStatsContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_STATS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_STATS, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FOR, 0)!;
    }
    public tableOrViewName(): TableOrViewNameContext {
        return this.getRuleContext(0, TableOrViewNameContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowStats) {
             listener.enterShowStats(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowStats) {
             listener.exitShowStats(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowStats) {
            return visitor.visitShowStats(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateSchemaContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CREATE, 0)!;
    }
    public KW_SCHEMA(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SCHEMA, 0)!;
    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(0, SchemaRefContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowCreateSchema) {
             listener.enterShowCreateSchema(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowCreateSchema) {
             listener.exitShowCreateSchema(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowCreateSchema) {
            return visitor.visitShowCreateSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RevokePrivilegesContext extends StatementContext {
    public _grantee?: PrincipalContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REVOKE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_REVOKE, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ON, 0)!;
    }
    public grantObject(): GrantObjectContext {
        return this.getRuleContext(0, GrantObjectContext)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FROM, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ALL, 0);
    }
    public KW_PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PRIVILEGES, 0);
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_GRANT, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OPTION, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FOR, 0);
    }
    public privilegeOrRole(): PrivilegeOrRoleContext[];
    public privilegeOrRole(i: number): PrivilegeOrRoleContext | null;
    public privilegeOrRole(i?: number): PrivilegeOrRoleContext[] | PrivilegeOrRoleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeOrRoleContext);
        }

        return this.getRuleContext(i, PrivilegeOrRoleContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRevokePrivileges) {
             listener.enterRevokePrivileges(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRevokePrivileges) {
             listener.exitRevokePrivileges(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRevokePrivileges) {
            return visitor.visitRevokePrivileges(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropFunctionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DROP, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FUNCTION, 0)!;
    }
    public functionSignature(): FunctionSignatureContext {
        return this.getRuleContext(0, FunctionSignatureContext)!;
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDropFunction) {
             listener.enterDropFunction(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDropFunction) {
             listener.exitDropFunction(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDropFunction) {
            return visitor.visitDropFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UpdateContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_UPDATE, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SET, 0)!;
    }
    public updateAssignment(): UpdateAssignmentContext[];
    public updateAssignment(i: number): UpdateAssignmentContext | null;
    public updateAssignment(i?: number): UpdateAssignmentContext[] | UpdateAssignmentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UpdateAssignmentContext);
        }

        return this.getRuleContext(i, UpdateAssignmentContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterUpdate) {
             listener.enterUpdate(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitUpdate) {
             listener.exitUpdate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitUpdate) {
            return visitor.visitUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExecuteContext extends StatementContext {
    public _tableName?: TableRefContext;
    public _procedureName?: FunctionNameContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_EXECUTE, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public callArgument(): CallArgumentContext[];
    public callArgument(i: number): CallArgumentContext | null;
    public callArgument(i?: number): CallArgumentContext[] | CallArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CallArgumentContext);
        }

        return this.getRuleContext(i, CallArgumentContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTableExecute) {
             listener.enterTableExecute(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTableExecute) {
             listener.exitTableExecute(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTableExecute) {
            return visitor.visitTableExecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeleteContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DELETE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DELETE, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FROM, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDelete) {
             listener.enterDelete(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDelete) {
             listener.exitDelete(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDelete) {
            return visitor.visitDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeInputContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DESCRIBE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DESCRIBE, 0)!;
    }
    public KW_INPUT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_INPUT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDescribeInput) {
             listener.enterDescribeInput(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDescribeInput) {
             listener.exitDescribeInput(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDescribeInput) {
            return visitor.visitDescribeInput(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowStatsForQueryContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_STATS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_STATS, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FOR, 0)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowStatsForQuery) {
             listener.enterShowStatsForQuery(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowStatsForQuery) {
             listener.exitShowStatsForQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowStatsForQuery) {
            return visitor.visitShowStatsForQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetColumnTypeContext extends StatementContext {
    public _tableName?: TableRefContext;
    public _column?: ColumnRefContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode[];
    public KW_ALTER(i: number): antlr.TerminalNode | null;
    public KW_ALTER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_ALTER);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_ALTER, i);
    	}
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public KW_COLUMN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COLUMN, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SET, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DATA, 0)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TYPE, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public columnRef(): ColumnRefContext {
        return this.getRuleContext(0, ColumnRefContext)!;
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSetColumnType) {
             listener.enterSetColumnType(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSetColumnType) {
             listener.exitSetColumnType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSetColumnType) {
            return visitor.visitSetColumnType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StatementDefaultContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterStatementDefault) {
             listener.enterStatementDefault(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitStatementDefault) {
             listener.exitStatementDefault(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitStatementDefault) {
            return visitor.visitStatementDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTimeZoneContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SET, 0)!;
    }
    public KW_TIME(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TIME, 0)!;
    }
    public KW_ZONE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ZONE, 0)!;
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LOCAL, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSetTimeZone) {
             listener.enterSetTimeZone(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSetTimeZone) {
             listener.exitSetTimeZone(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSetTimeZone) {
            return visitor.visitSetTimeZone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TruncateTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_TRUNCATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TRUNCATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTruncateTable) {
             listener.enterTruncateTable(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTruncateTable) {
             listener.exitTruncateTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTruncateTable) {
            return visitor.visitTruncateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateMaterializedViewContext extends StatementContext {
    public _comment?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CREATE, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_VIEW, 0)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AS, 0)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_REPLACE, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NOT, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0);
    }
    public KW_GRACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_GRACE, 0);
    }
    public KW_PERIOD(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PERIOD, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_COMMENT, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCreateMaterializedView) {
             listener.enterCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCreateMaterializedView) {
             listener.exitCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedView) {
            return visitor.visitCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSessionContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SET, 0)!;
    }
    public KW_SESSION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SESSION, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.EQ, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSetSession) {
             listener.enterSetSession(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSetSession) {
             listener.exitSetSession(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSetSession) {
            return visitor.visitSetSession(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateViewContext extends StatementContext {
    public _comment?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CREATE, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_VIEW, 0)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AS, 0)!;
    }
    public rootQuery(): RootQueryContext {
        return this.getRuleContext(0, RootQueryContext)!;
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_REPLACE, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_COMMENT, 0);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SECURITY, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public KW_DEFINER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DEFINER, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INVOKER, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCreateView) {
             listener.enterCreateView(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCreateView) {
             listener.exitCreateView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameMaterializedViewContext extends StatementContext {
    public _from_?: ViewRefContext;
    public _to?: ViewNameCreateContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ALTER, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_VIEW, 0)!;
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_RENAME, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TO, 0)!;
    }
    public viewRef(): ViewRefContext {
        return this.getRuleContext(0, ViewRefContext)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRenameMaterializedView) {
             listener.enterRenameMaterializedView(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRenameMaterializedView) {
             listener.exitRenameMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRenameMaterializedView) {
            return visitor.visitRenameMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowSchemasContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_SCHEMAS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SCHEMAS, 0)!;
    }
    public catalogRef(): CatalogRefContext | null {
        return this.getRuleContext(0, CatalogRefContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LIKE, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IN, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ESCAPE, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowSchemas) {
             listener.enterShowSchemas(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowSchemas) {
             listener.exitShowSchemas(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowSchemas) {
            return visitor.visitShowSchemas(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DROP, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDropTable) {
             listener.enterDropTable(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDropTable) {
             listener.exitDropTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDropTable) {
            return visitor.visitDropTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetSchemaAuthorizationContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ALTER, 0)!;
    }
    public KW_SCHEMA(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SCHEMA, 0)!;
    }
    public schemaRef(): SchemaRefContext {
        return this.getRuleContext(0, SchemaRefContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SET, 0)!;
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AUTHORIZATION, 0)!;
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSetSchemaAuthorization) {
             listener.enterSetSchemaAuthorization(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSetSchemaAuthorization) {
             listener.exitSetSchemaAuthorization(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSetSchemaAuthorization) {
            return visitor.visitSetSchemaAuthorization(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RollbackContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ROLLBACK(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ROLLBACK, 0)!;
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WORK, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRollback) {
             listener.enterRollback(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRollback) {
             listener.exitRollback(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRollback) {
            return visitor.visitRollback(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentTableContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COMMENT, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ON, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_IS, 0)!;
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NULL, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCommentTable) {
             listener.enterCommentTable(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCommentTable) {
             listener.exitCommentTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCommentTable) {
            return visitor.visitCommentTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExecuteImmediateContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_EXECUTE, 0)!;
    }
    public KW_IMMEDIATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_IMMEDIATE, 0)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_USING, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterExecuteImmediate) {
             listener.enterExecuteImmediate(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitExecuteImmediate) {
             listener.exitExecuteImmediate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitExecuteImmediate) {
            return visitor.visitExecuteImmediate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RenameViewContext extends StatementContext {
    public _from_?: ViewRefContext;
    public _to?: ViewNameCreateContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ALTER, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_VIEW, 0)!;
    }
    public KW_RENAME(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_RENAME, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TO, 0)!;
    }
    public viewRef(): ViewRefContext {
        return this.getRuleContext(0, ViewRefContext)!;
    }
    public viewNameCreate(): ViewNameCreateContext {
        return this.getRuleContext(0, ViewNameCreateContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRenameView) {
             listener.enterRenameView(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRenameView) {
             listener.exitRenameView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRenameView) {
            return visitor.visitRenameView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetPathContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SET, 0)!;
    }
    public KW_PATH(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_PATH, 0)!;
    }
    public pathSpecification(): PathSpecificationContext {
        return this.getRuleContext(0, PathSpecificationContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSetPath) {
             listener.enterSetPath(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSetPath) {
             listener.exitSetPath(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSetPath) {
            return visitor.visitSetPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GrantRolesContext extends StatementContext {
    public _catalog?: CatalogRefContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_GRANT, 0)!;
    }
    public privilegeOrRole(): PrivilegeOrRoleContext[];
    public privilegeOrRole(i: number): PrivilegeOrRoleContext | null;
    public privilegeOrRole(i?: number): PrivilegeOrRoleContext[] | PrivilegeOrRoleContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeOrRoleContext);
        }

        return this.getRuleContext(i, PrivilegeOrRoleContext);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TO, 0)!;
    }
    public principal(): PrincipalContext[];
    public principal(i: number): PrincipalContext | null;
    public principal(i?: number): PrincipalContext[] | PrincipalContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrincipalContext);
        }

        return this.getRuleContext(i, PrincipalContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ADMIN, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OPTION, 0);
    }
    public KW_GRANTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_GRANTED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_BY, 0);
    }
    public grantor(): GrantorContext | null {
        return this.getRuleContext(0, GrantorContext);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IN, 0);
    }
    public catalogRef(): CatalogRefContext | null {
        return this.getRuleContext(0, CatalogRefContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterGrantRoles) {
             listener.enterGrantRoles(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitGrantRoles) {
             listener.exitGrantRoles(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitGrantRoles) {
            return visitor.visitGrantRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CallContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CALL(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CALL, 0)!;
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public callArgument(): CallArgumentContext[];
    public callArgument(i: number): CallArgumentContext | null;
    public callArgument(i?: number): CallArgumentContext[] | CallArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CallArgumentContext);
        }

        return this.getRuleContext(i, CallArgumentContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCall) {
             listener.enterCall(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCall) {
             listener.exitCall(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCall) {
            return visitor.visitCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RefreshMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_REFRESH, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_VIEW, 0)!;
    }
    public viewRef(): ViewRefContext {
        return this.getRuleContext(0, ViewRefContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRefreshMaterializedView) {
             listener.enterRefreshMaterializedView(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRefreshMaterializedView) {
             listener.exitRefreshMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRefreshMaterializedView) {
            return visitor.visitRefreshMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateMaterializedViewContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CREATE, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_VIEW, 0)!;
    }
    public viewRef(): ViewRefContext {
        return this.getRuleContext(0, ViewRefContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowCreateMaterializedView) {
             listener.enterShowCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowCreateMaterializedView) {
             listener.exitShowCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowCreateMaterializedView) {
            return visitor.visitShowCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreateCatalogContext extends StatementContext {
    public _catalog?: CatalogNameCreateContext;
    public _connectorName?: IdentifierContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CREATE, 0)!;
    }
    public KW_CATALOG(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CATALOG, 0)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_USING, 0)!;
    }
    public catalogNameCreate(): CatalogNameCreateContext {
        return this.getRuleContext(0, CatalogNameCreateContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NOT, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_COMMENT, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AUTHORIZATION, 0);
    }
    public principal(): PrincipalContext | null {
        return this.getRuleContext(0, PrincipalContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCreateCatalog) {
             listener.enterCreateCatalog(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCreateCatalog) {
             listener.exitCreateCatalog(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCreateCatalog) {
            return visitor.visitCreateCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowFunctionsContext extends StatementContext {
    public _pattern?: StringContext;
    public _escape?: StringContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0)!;
    }
    public KW_FUNCTIONS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FUNCTIONS, 0)!;
    }
    public schemaRef(): SchemaRefContext | null {
        return this.getRuleContext(0, SchemaRefContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LIKE, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IN, 0);
    }
    public string_(): StringContext[];
    public string_(i: number): StringContext | null;
    public string_(i?: number): StringContext[] | StringContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StringContext);
        }

        return this.getRuleContext(i, StringContext);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ESCAPE, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterShowFunctions) {
             listener.enterShowFunctions(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitShowFunctions) {
             listener.exitShowFunctions(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitShowFunctions) {
            return visitor.visitShowFunctions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DescribeOutputContext extends StatementContext {
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DESCRIBE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DESCRIBE, 0)!;
    }
    public KW_OUTPUT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_OUTPUT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDescribeOutput) {
             listener.enterDescribeOutput(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDescribeOutput) {
             listener.exitDescribeOutput(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDescribeOutput) {
            return visitor.visitDescribeOutput(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetTablePropertiesContext extends StatementContext {
    public _tableName?: TableRefContext;
    public constructor(ctx: StatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SET, 0)!;
    }
    public KW_PROPERTIES(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_PROPERTIES, 0)!;
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        return this.getRuleContext(0, PropertyAssignmentsContext)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSetTableProperties) {
             listener.enterSetTableProperties(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSetTableProperties) {
             listener.exitSetTableProperties(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSetTableProperties) {
            return visitor.visitSetTableProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RootQueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public withFunction(): WithFunctionContext | null {
        return this.getRuleContext(0, WithFunctionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_rootQuery;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRootQuery) {
             listener.enterRootQuery(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRootQuery) {
             listener.exitRootQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRootQuery) {
            return visitor.visitRootQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_WITH, 0)!;
    }
    public functionSpecification(): FunctionSpecificationContext[];
    public functionSpecification(i: number): FunctionSpecificationContext | null;
    public functionSpecification(i?: number): FunctionSpecificationContext[] | FunctionSpecificationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionSpecificationContext);
        }

        return this.getRuleContext(i, FunctionSpecificationContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_withFunction;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterWithFunction) {
             listener.enterWithFunction(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitWithFunction) {
             listener.exitWithFunction(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitWithFunction) {
            return visitor.visitWithFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_query;
    }
    public override copyFrom(ctx: QueryContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryStatementContext extends QueryContext {
    public constructor(ctx: QueryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryNoWith(): QueryNoWithContext {
        return this.getRuleContext(0, QueryNoWithContext)!;
    }
    public with(): WithContext | null {
        return this.getRuleContext(0, WithContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterQueryStatement) {
             listener.enterQueryStatement(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitQueryStatement) {
             listener.exitQueryStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitQueryStatement) {
            return visitor.visitQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_WITH, 0)!;
    }
    public namedQuery(): NamedQueryContext[];
    public namedQuery(i: number): NamedQueryContext | null;
    public namedQuery(i?: number): NamedQueryContext[] | NamedQueryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedQueryContext);
        }

        return this.getRuleContext(i, NamedQueryContext);
    }
    public KW_RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RECURSIVE, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_with;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterWith) {
             listener.enterWith(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitWith) {
             listener.exitWith(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitWith) {
            return visitor.visitWith(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnDefinition(): ColumnDefinitionContext | null {
        return this.getRuleContext(0, ColumnDefinitionContext);
    }
    public likeClause(): LikeClauseContext | null {
        return this.getRuleContext(0, LikeClauseContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_tableElement;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTableElement) {
             listener.enterTableElement(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTableElement) {
             listener.exitTableElement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTableElement) {
            return visitor.visitTableElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnDefinitionContext extends antlr.ParserRuleContext {
    public _colType?: TypeContext;
    public _comment?: StringContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameCreate(): ColumnNameCreateContext {
        return this.getRuleContext(0, ColumnNameCreateContext)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NULL, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_COMMENT, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public properties(): PropertiesContext | null {
        return this.getRuleContext(0, PropertiesContext);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_columnDefinition;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterColumnDefinition) {
             listener.enterColumnDefinition(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitColumnDefinition) {
             listener.exitColumnDefinition(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitColumnDefinition) {
            return visitor.visitColumnDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LikeClauseContext extends antlr.ParserRuleContext {
    public _optionType?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIKE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_LIKE, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public KW_PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PROPERTIES, 0);
    }
    public KW_INCLUDING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INCLUDING, 0);
    }
    public KW_EXCLUDING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXCLUDING, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_likeClause;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterLikeClause) {
             listener.enterLikeClause(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitLikeClause) {
             listener.exitLikeClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitLikeClause) {
            return visitor.visitLikeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertiesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public propertyAssignments(): PropertyAssignmentsContext {
        return this.getRuleContext(0, PropertyAssignmentsContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_properties;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterProperties) {
             listener.enterProperties(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitProperties) {
             listener.exitProperties(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitProperties) {
            return visitor.visitProperties(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyAssignmentsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public property(): PropertyContext[];
    public property(i: number): PropertyContext | null;
    public property(i?: number): PropertyContext[] | PropertyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PropertyContext);
        }

        return this.getRuleContext(i, PropertyContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_propertyAssignments;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPropertyAssignments) {
             listener.enterPropertyAssignments(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPropertyAssignments) {
             listener.exitPropertyAssignments(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPropertyAssignments) {
            return visitor.visitPropertyAssignments(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.EQ, 0)!;
    }
    public propertyValue(): PropertyValueContext {
        return this.getRuleContext(0, PropertyValueContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_property;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterProperty) {
             listener.enterProperty(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitProperty) {
             listener.exitProperty(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitProperty) {
            return visitor.visitProperty(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PropertyValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_propertyValue;
    }
    public override copyFrom(ctx: PropertyValueContext): void {
        super.copyFrom(ctx);
    }
}
export class DefaultPropertyValueContext extends PropertyValueContext {
    public constructor(ctx: PropertyValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DEFAULT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DEFAULT, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDefaultPropertyValue) {
             listener.enterDefaultPropertyValue(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDefaultPropertyValue) {
             listener.exitDefaultPropertyValue(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDefaultPropertyValue) {
            return visitor.visitDefaultPropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NonDefaultPropertyValueContext extends PropertyValueContext {
    public constructor(ctx: PropertyValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterNonDefaultPropertyValue) {
             listener.enterNonDefaultPropertyValue(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitNonDefaultPropertyValue) {
             listener.exitNonDefaultPropertyValue(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitNonDefaultPropertyValue) {
            return visitor.visitNonDefaultPropertyValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryNoWithContext extends antlr.ParserRuleContext {
    public _offset?: RowCountContext;
    public _limit?: LimitRowCountContext;
    public _fetchFirst?: RowCountContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public queryTerm(): QueryTermContext {
        return this.getRuleContext(0, QueryTermContext)!;
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_BY, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OFFSET, 0);
    }
    public rowCount(): RowCountContext[];
    public rowCount(i: number): RowCountContext | null;
    public rowCount(i?: number): RowCountContext[] | RowCountContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowCountContext);
        }

        return this.getRuleContext(i, RowCountContext);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LIMIT, 0);
    }
    public KW_FETCH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FETCH, 0);
    }
    public limitRowCount(): LimitRowCountContext | null {
        return this.getRuleContext(0, LimitRowCountContext);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FIRST, 0);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NEXT, 0);
    }
    public KW_ROW(): antlr.TerminalNode[];
    public KW_ROW(i: number): antlr.TerminalNode | null;
    public KW_ROW(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_ROW);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_ROW, i);
    	}
    }
    public KW_ROWS(): antlr.TerminalNode[];
    public KW_ROWS(i: number): antlr.TerminalNode | null;
    public KW_ROWS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_ROWS);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_ROWS, i);
    	}
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ONLY, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public KW_TIES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TIES, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_queryNoWith;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterQueryNoWith) {
             listener.enterQueryNoWith(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitQueryNoWith) {
             listener.exitQueryNoWith(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitQueryNoWith) {
            return visitor.visitQueryNoWith(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitRowCountContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ALL, 0);
    }
    public rowCount(): RowCountContext | null {
        return this.getRuleContext(0, RowCountContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_limitRowCount;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterLimitRowCount) {
             listener.enterLimitRowCount(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitLimitRowCount) {
             listener.exitLimitRowCount(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitLimitRowCount) {
            return visitor.visitLimitRowCount(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowCountContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.INTEGER_VALUE, 0);
    }
    public QUESTION_MARK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.QUESTION_MARK, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_rowCount;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRowCount) {
             listener.enterRowCount(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRowCount) {
             listener.exitRowCount(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRowCount) {
            return visitor.visitRowCount(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryTermContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_queryTerm;
    }
    public override copyFrom(ctx: QueryTermContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryTermDefaultContext extends QueryTermContext {
    public constructor(ctx: QueryTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryPrimary(): QueryPrimaryContext {
        return this.getRuleContext(0, QueryPrimaryContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterQueryTermDefault) {
             listener.enterQueryTermDefault(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitQueryTermDefault) {
             listener.exitQueryTermDefault(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitQueryTermDefault) {
            return visitor.visitQueryTermDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SetOperationContext extends QueryTermContext {
    public _left?: QueryTermContext;
    public _operator?: Token | null;
    public _right?: QueryTermContext;
    public constructor(ctx: QueryTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryTerm(): QueryTermContext[];
    public queryTerm(i: number): QueryTermContext | null;
    public queryTerm(i?: number): QueryTermContext[] | QueryTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QueryTermContext);
        }

        return this.getRuleContext(i, QueryTermContext);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INTERSECT, 0);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UNION, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXCEPT, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSetOperation) {
             listener.enterSetOperation(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSetOperation) {
             listener.exitSetOperation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSetOperation) {
            return visitor.visitSetOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_queryPrimary;
    }
    public override copyFrom(ctx: QueryPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class SubqueryContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public queryNoWith(): QueryNoWithContext {
        return this.getRuleContext(0, QueryNoWithContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSubquery) {
             listener.enterSubquery(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSubquery) {
             listener.exitSubquery(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSubquery) {
            return visitor.visitSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QueryPrimaryDefaultContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public querySpecification(): QuerySpecificationContext {
        return this.getRuleContext(0, QuerySpecificationContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterQueryPrimaryDefault) {
             listener.enterQueryPrimaryDefault(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitQueryPrimaryDefault) {
             listener.exitQueryPrimaryDefault(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitQueryPrimaryDefault) {
            return visitor.visitQueryPrimaryDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTable) {
             listener.enterTable(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTable) {
             listener.exitTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTable) {
            return visitor.visitTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InlineTableContext extends QueryPrimaryContext {
    public constructor(ctx: QueryPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_VALUES, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterInlineTable) {
             listener.enterInlineTable(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitInlineTable) {
             listener.exitInlineTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitInlineTable) {
            return visitor.visitInlineTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortItemContext extends antlr.ParserRuleContext {
    public _ordering?: Token | null;
    public _nullOrdering?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnRef(): ColumnRefContext | null {
        return this.getRuleContext(0, ColumnRefContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NULLS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DESC, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LAST, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_sortItem;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSortItem) {
             listener.enterSortItem(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSortItem) {
             listener.exitSortItem(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSortItem) {
            return visitor.visitSortItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuerySpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SELECT, 0)!;
    }
    public selectList(): SelectListContext {
        return this.getRuleContext(0, SelectListContext)!;
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FROM, 0);
    }
    public relation(): RelationContext[];
    public relation(i: number): RelationContext | null;
    public relation(i?: number): RelationContext[] | RelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationContext);
        }

        return this.getRuleContext(i, RelationContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_GROUP, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_BY, 0);
    }
    public groupBy(): GroupByContext | null {
        return this.getRuleContext(0, GroupByContext);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WINDOW, 0);
    }
    public windowDefinition(): WindowDefinitionContext[];
    public windowDefinition(i: number): WindowDefinitionContext | null;
    public windowDefinition(i?: number): WindowDefinitionContext[] | WindowDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowDefinitionContext);
        }

        return this.getRuleContext(i, WindowDefinitionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_querySpecification;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterQuerySpecification) {
             listener.enterQuerySpecification(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitQuerySpecification) {
             listener.exitQuerySpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitQuerySpecification) {
            return visitor.visitQuerySpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public _where?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_WHERE, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_whereClause;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterWhereClause) {
             listener.enterWhereClause(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitWhereClause) {
             listener.exitWhereClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public _having?: BooleanExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_HAVING(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_HAVING, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_havingClause;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterHavingClause) {
             listener.enterHavingClause(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitHavingClause) {
             listener.exitHavingClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectItem(): SelectItemContext[];
    public selectItem(i: number): SelectItemContext | null;
    public selectItem(i?: number): SelectItemContext[] | SelectItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectItemContext);
        }

        return this.getRuleContext(i, SelectItemContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_selectList;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSelectList) {
             listener.enterSelectList(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSelectList) {
             listener.exitSelectList(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSelectList) {
            return visitor.visitSelectList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupingElement(): GroupingElementContext[];
    public groupingElement(i: number): GroupingElementContext | null;
    public groupingElement(i?: number): GroupingElementContext[] | GroupingElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingElementContext);
        }

        return this.getRuleContext(i, GroupingElementContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_groupBy;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterGroupBy) {
             listener.enterGroupBy(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitGroupBy) {
             listener.exitGroupBy(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitGroupBy) {
            return visitor.visitGroupBy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionByContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_partitionBy;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPartitionBy) {
             listener.enterPartitionBy(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPartitionBy) {
             listener.exitPartitionBy(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPartitionBy) {
            return visitor.visitPartitionBy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_groupingElement;
    }
    public override copyFrom(ctx: GroupingElementContext): void {
        super.copyFrom(ctx);
    }
}
export class MultipleGroupingSetsContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_GROUPING(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_GROUPING, 0)!;
    }
    public KW_SETS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SETS, 0)!;
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterMultipleGroupingSets) {
             listener.enterMultipleGroupingSets(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitMultipleGroupingSets) {
             listener.exitMultipleGroupingSets(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitMultipleGroupingSets) {
            return visitor.visitMultipleGroupingSets(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SingleGroupingSetContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public groupingSet(): GroupingSetContext {
        return this.getRuleContext(0, GroupingSetContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSingleGroupingSet) {
             listener.enterSingleGroupingSet(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSingleGroupingSet) {
             listener.exitSingleGroupingSet(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSingleGroupingSet) {
            return visitor.visitSingleGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CubeContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CUBE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CUBE, 0)!;
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCube) {
             listener.enterCube(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCube) {
             listener.exitCube(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCube) {
            return visitor.visitCube(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RollupContext extends GroupingElementContext {
    public constructor(ctx: GroupingElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ROLLUP(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ROLLUP, 0)!;
    }
    public groupingSet(): GroupingSetContext[];
    public groupingSet(i: number): GroupingSetContext | null;
    public groupingSet(i?: number): GroupingSetContext[] | GroupingSetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingSetContext);
        }

        return this.getRuleContext(i, GroupingSetContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRollup) {
             listener.enterRollup(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRollup) {
             listener.exitRollup(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRollup) {
            return visitor.visitRollup(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingSetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public groupingTerm(): GroupingTermContext[];
    public groupingTerm(i: number): GroupingTermContext | null;
    public groupingTerm(i?: number): GroupingTermContext[] | GroupingTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GroupingTermContext);
        }

        return this.getRuleContext(i, GroupingTermContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_groupingSet;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterGroupingSet) {
             listener.enterGroupingSet(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitGroupingSet) {
             listener.exitGroupingSet(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitGroupingSet) {
            return visitor.visitGroupingSet(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupingTermContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnRef(): ColumnRefContext | null {
        return this.getRuleContext(0, ColumnRefContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_groupingTerm;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterGroupingTerm) {
             listener.enterGroupingTerm(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitGroupingTerm) {
             listener.exitGroupingTerm(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitGroupingTerm) {
            return visitor.visitGroupingTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowDefinitionContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AS, 0)!;
    }
    public windowSpecification(): WindowSpecificationContext {
        return this.getRuleContext(0, WindowSpecificationContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_windowDefinition;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterWindowDefinition) {
             listener.enterWindowDefinition(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitWindowDefinition) {
             listener.exitWindowDefinition(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitWindowDefinition) {
            return visitor.visitWindowDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowSpecificationContext extends antlr.ParserRuleContext {
    public _existingWindowName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PARTITION, 0);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_BY);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_BY, i);
    	}
    }
    public partitionBy(): PartitionByContext | null {
        return this.getRuleContext(0, PartitionByContext);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ORDER, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public windowFrame(): WindowFrameContext | null {
        return this.getRuleContext(0, WindowFrameContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_windowSpecification;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterWindowSpecification) {
             listener.enterWindowSpecification(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitWindowSpecification) {
             listener.exitWindowSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitWindowSpecification) {
            return visitor.visitWindowSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedQueryContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_namedQuery;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterNamedQuery) {
             listener.enterNamedQuery(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitNamedQuery) {
             listener.exitNamedQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitNamedQuery) {
            return visitor.visitNamedQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DISTINCT, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_setQuantifier;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSetQuantifier) {
             listener.enterSetQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSetQuantifier) {
             listener.exitSetQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSetQuantifier) {
            return visitor.visitSetQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectItemContext extends antlr.ParserRuleContext {
    public _alias?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectLiteralColumnName(): SelectLiteralColumnNameContext | null {
        return this.getRuleContext(0, SelectLiteralColumnNameContext);
    }
    public selectExpressionColumnName(): SelectExpressionColumnNameContext | null {
        return this.getRuleContext(0, SelectExpressionColumnNameContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AS, 0);
    }
    public tableAllColumns(): TableAllColumnsContext | null {
        return this.getRuleContext(0, TableAllColumnsContext);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public selectAllWithoutTable(): SelectAllWithoutTableContext | null {
        return this.getRuleContext(0, SelectAllWithoutTableContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_selectItem;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSelectItem) {
             listener.enterSelectItem(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSelectItem) {
             listener.exitSelectItem(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSelectItem) {
            return visitor.visitSelectItem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectAllWithoutTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.ASTERISK, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_selectAllWithoutTable;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSelectAllWithoutTable) {
             listener.enterSelectAllWithoutTable(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSelectAllWithoutTable) {
             listener.exitSelectAllWithoutTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSelectAllWithoutTable) {
            return visitor.visitSelectAllWithoutTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableAllColumnsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.ASTERISK, 0)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_tableAllColumns;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTableAllColumns) {
             listener.enterTableAllColumns(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTableAllColumns) {
             listener.exitTableAllColumns(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTableAllColumns) {
            return visitor.visitTableAllColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectLiteralColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnRef(): ColumnRefContext {
        return this.getRuleContext(0, ColumnRefContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_selectLiteralColumnName;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSelectLiteralColumnName) {
             listener.enterSelectLiteralColumnName(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSelectLiteralColumnName) {
             listener.exitSelectLiteralColumnName(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSelectLiteralColumnName) {
            return visitor.visitSelectLiteralColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectExpressionColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_selectExpressionColumnName;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSelectExpressionColumnName) {
             listener.enterSelectExpressionColumnName(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSelectExpressionColumnName) {
             listener.exitSelectExpressionColumnName(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSelectExpressionColumnName) {
            return visitor.visitSelectExpressionColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_relation;
    }
    public override copyFrom(ctx: RelationContext): void {
        super.copyFrom(ctx);
    }
}
export class RelationDefaultContext extends RelationContext {
    public constructor(ctx: RelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public sampledRelation(): SampledRelationContext {
        return this.getRuleContext(0, SampledRelationContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRelationDefault) {
             listener.enterRelationDefault(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRelationDefault) {
             listener.exitRelationDefault(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRelationDefault) {
            return visitor.visitRelationDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinRelationContext extends RelationContext {
    public _left?: RelationContext;
    public _right?: SampledRelationContext;
    public _rightRelation?: RelationContext;
    public constructor(ctx: RelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public relation(): RelationContext[];
    public relation(i: number): RelationContext | null;
    public relation(i?: number): RelationContext[] | RelationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelationContext);
        }

        return this.getRuleContext(i, RelationContext);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CROSS, 0);
    }
    public KW_JOIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_JOIN, 0);
    }
    public joinType(): JoinTypeContext | null {
        return this.getRuleContext(0, JoinTypeContext);
    }
    public joinCriteria(): JoinCriteriaContext | null {
        return this.getRuleContext(0, JoinCriteriaContext);
    }
    public KW_NATURAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NATURAL, 0);
    }
    public sampledRelation(): SampledRelationContext | null {
        return this.getRuleContext(0, SampledRelationContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJoinRelation) {
             listener.enterJoinRelation(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJoinRelation) {
             listener.exitJoinRelation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJoinRelation) {
            return visitor.visitJoinRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INNER, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LEFT, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OUTER, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RIGHT, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FULL, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_joinType;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJoinType) {
             listener.enterJoinType(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJoinType) {
             listener.exitJoinType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJoinType) {
            return visitor.visitJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinCriteriaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ON, 0);
    }
    public booleanExpression(): BooleanExpressionContext | null {
        return this.getRuleContext(0, BooleanExpressionContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_USING, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_joinCriteria;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJoinCriteria) {
             listener.enterJoinCriteria(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJoinCriteria) {
             listener.exitJoinCriteria(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJoinCriteria) {
            return visitor.visitJoinCriteria(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampledRelationContext extends antlr.ParserRuleContext {
    public _percentage?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public patternRecognition(): PatternRecognitionContext {
        return this.getRuleContext(0, PatternRecognitionContext)!;
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TABLESAMPLE, 0);
    }
    public sampleType(): SampleTypeContext | null {
        return this.getRuleContext(0, SampleTypeContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_sampledRelation;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSampledRelation) {
             listener.enterSampledRelation(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSampledRelation) {
             listener.exitSampledRelation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSampledRelation) {
            return visitor.visitSampledRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BERNOULLI(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_BERNOULLI, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SYSTEM, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_sampleType;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSampleType) {
             listener.enterSampleType(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSampleType) {
             listener.exitSampleType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSampleType) {
            return visitor.visitSampleType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrimsSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LEADING, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TRAILING, 0);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_BOTH, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_trimsSpecification;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTrimsSpecification) {
             listener.enterTrimsSpecification(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTrimsSpecification) {
             listener.exitTrimsSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTrimsSpecification) {
            return visitor.visitTrimsSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListAggOverflowBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ERROR, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TRUNCATE, 0);
    }
    public listAggCountIndication(): ListAggCountIndicationContext | null {
        return this.getRuleContext(0, ListAggCountIndicationContext);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_listAggOverflowBehavior;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterListAggOverflowBehavior) {
             listener.enterListAggOverflowBehavior(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitListAggOverflowBehavior) {
             listener.exitListAggOverflowBehavior(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitListAggOverflowBehavior) {
            return visitor.visitListAggOverflowBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListAggCountIndicationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public KW_COUNT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COUNT, 0)!;
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_listAggCountIndication;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterListAggCountIndication) {
             listener.enterListAggCountIndication(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitListAggCountIndication) {
             listener.exitListAggCountIndication(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitListAggCountIndication) {
            return visitor.visitListAggCountIndication(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternRecognitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public aliasedRelation(): AliasedRelationContext {
        return this.getRuleContext(0, AliasedRelationContext)!;
    }
    public KW_MATCH_RECOGNIZE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MATCH_RECOGNIZE, 0);
    }
    public KW_PATTERN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PATTERN, 0);
    }
    public rowPattern(): RowPatternContext | null {
        return this.getRuleContext(0, RowPatternContext);
    }
    public KW_DEFINE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DEFINE, 0);
    }
    public variableDefinition(): VariableDefinitionContext[];
    public variableDefinition(i: number): VariableDefinitionContext | null;
    public variableDefinition(i?: number): VariableDefinitionContext[] | VariableDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableDefinitionContext);
        }

        return this.getRuleContext(i, VariableDefinitionContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PARTITION, 0);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_BY);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_BY, i);
    	}
    }
    public partitionBy(): PartitionByContext | null {
        return this.getRuleContext(0, PartitionByContext);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ORDER, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public KW_MEASURES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MEASURES, 0);
    }
    public measureDefinition(): MeasureDefinitionContext[];
    public measureDefinition(i: number): MeasureDefinitionContext | null;
    public measureDefinition(i?: number): MeasureDefinitionContext[] | MeasureDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MeasureDefinitionContext);
        }

        return this.getRuleContext(i, MeasureDefinitionContext);
    }
    public rowsPerMatch(): RowsPerMatchContext | null {
        return this.getRuleContext(0, RowsPerMatchContext);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AFTER, 0);
    }
    public KW_MATCH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MATCH, 0);
    }
    public skipTo(): SkipToContext | null {
        return this.getRuleContext(0, SkipToContext);
    }
    public KW_SUBSET(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SUBSET, 0);
    }
    public subsetDefinition(): SubsetDefinitionContext[];
    public subsetDefinition(i: number): SubsetDefinitionContext | null;
    public subsetDefinition(i?: number): SubsetDefinitionContext[] | SubsetDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubsetDefinitionContext);
        }

        return this.getRuleContext(i, SubsetDefinitionContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_INITIAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INITIAL, 0);
    }
    public KW_SEEK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SEEK, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_patternRecognition;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPatternRecognition) {
             listener.enterPatternRecognition(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPatternRecognition) {
             listener.exitPatternRecognition(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPatternRecognition) {
            return visitor.visitPatternRecognition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MeasureDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AS, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_measureDefinition;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterMeasureDefinition) {
             listener.enterMeasureDefinition(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitMeasureDefinition) {
             listener.exitMeasureDefinition(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitMeasureDefinition) {
            return visitor.visitMeasureDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowsPerMatchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ONE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ONE, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ROW, 0);
    }
    public KW_PER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_PER, 0)!;
    }
    public KW_MATCH(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_MATCH, 0)!;
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ALL, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ROWS, 0);
    }
    public emptyMatchHandling(): EmptyMatchHandlingContext | null {
        return this.getRuleContext(0, EmptyMatchHandlingContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_rowsPerMatch;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRowsPerMatch) {
             listener.enterRowsPerMatch(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRowsPerMatch) {
             listener.exitRowsPerMatch(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRowsPerMatch) {
            return visitor.visitRowsPerMatch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EmptyMatchHandlingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0);
    }
    public KW_EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EMPTY, 0);
    }
    public KW_MATCHES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MATCHES, 0);
    }
    public KW_OMIT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OMIT, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public KW_UNMATCHED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UNMATCHED, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ROWS, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_emptyMatchHandling;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterEmptyMatchHandling) {
             listener.enterEmptyMatchHandling(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitEmptyMatchHandling) {
             listener.exitEmptyMatchHandling(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitEmptyMatchHandling) {
            return visitor.visitEmptyMatchHandling(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SkipToContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TO, 0);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NEXT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ROW, 0);
    }
    public KW_PAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PAST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LAST, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FIRST, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_skipTo;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSkipTo) {
             listener.enterSkipTo(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSkipTo) {
             listener.exitSkipTo(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSkipTo) {
            return visitor.visitSkipTo(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubsetDefinitionContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public _identifier?: IdentifierContext;
    public _union: IdentifierContext[] = [];
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.EQ, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_subsetDefinition;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSubsetDefinition) {
             listener.enterSubsetDefinition(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSubsetDefinition) {
             listener.exitSubsetDefinition(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSubsetDefinition) {
            return visitor.visitSubsetDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AS, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_variableDefinition;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterVariableDefinition) {
             listener.enterVariableDefinition(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitVariableDefinition) {
             listener.exitVariableDefinition(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitVariableDefinition) {
            return visitor.visitVariableDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AliasedRelationContext extends antlr.ParserRuleContext {
    public _alias?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relationPrimary(): RelationPrimaryContext {
        return this.getRuleContext(0, RelationPrimaryContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_aliasedRelation;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterAliasedRelation) {
             listener.enterAliasedRelation(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitAliasedRelation) {
             listener.exitAliasedRelation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitAliasedRelation) {
            return visitor.visitAliasedRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnListCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnNameCreate(): ColumnNameCreateContext[];
    public columnNameCreate(i: number): ColumnNameCreateContext | null;
    public columnNameCreate(i?: number): ColumnNameCreateContext[] | ColumnNameCreateContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnNameCreateContext);
        }

        return this.getRuleContext(i, ColumnNameCreateContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_columnListCreate;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterColumnListCreate) {
             listener.enterColumnListCreate(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitColumnListCreate) {
             listener.exitColumnListCreate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitColumnListCreate) {
            return visitor.visitColumnListCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnRef(): ColumnRefContext[];
    public columnRef(i: number): ColumnRefContext | null;
    public columnRef(i?: number): ColumnRefContext[] | ColumnRefContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnRefContext);
        }

        return this.getRuleContext(i, ColumnRefContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_columnList;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterColumnList) {
             listener.enterColumnList(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitColumnList) {
             listener.exitColumnList(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitColumnList) {
            return visitor.visitColumnList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAliasesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_columnAliases;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterColumnAliases) {
             listener.enterColumnAliases(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitColumnAliases) {
             listener.exitColumnAliases(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitColumnAliases) {
            return visitor.visitColumnAliases(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_relationPrimary;
    }
    public override copyFrom(ctx: RelationPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class ExpressionSourceTableContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public relationSourceTable(): RelationSourceTableContext {
        return this.getRuleContext(0, RelationSourceTableContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterExpressionSourceTable) {
             listener.enterExpressionSourceTable(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitExpressionSourceTable) {
             listener.exitExpressionSourceTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitExpressionSourceTable) {
            return visitor.visitExpressionSourceTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParenthesizedRelationContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public relation(): RelationContext {
        return this.getRuleContext(0, RelationContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterParenthesizedRelation) {
             listener.enterParenthesizedRelation(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitParenthesizedRelation) {
             listener.exitParenthesizedRelation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitParenthesizedRelation) {
            return visitor.visitParenthesizedRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableNameContext extends RelationPrimaryContext {
    public constructor(ctx: RelationPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableOrViewName(): TableOrViewNameContext {
        return this.getRuleContext(0, TableOrViewNameContext)!;
    }
    public queryPeriod(): QueryPeriodContext | null {
        return this.getRuleContext(0, QueryPeriodContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelationSourceTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_relationSourceTable;
    }
    public override copyFrom(ctx: RelationSourceTableContext): void {
        super.copyFrom(ctx);
    }
}
export class SubqueryRelationContext extends RelationSourceTableContext {
    public constructor(ctx: RelationSourceTableContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSubqueryRelation) {
             listener.enterSubqueryRelation(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSubqueryRelation) {
             listener.exitSubqueryRelation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSubqueryRelation) {
            return visitor.visitSubqueryRelation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonTableContext extends RelationSourceTableContext {
    public constructor(ctx: RelationSourceTableContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_JSON_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_JSON_TABLE, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public KW_COLUMNS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COLUMNS, 0)!;
    }
    public jsonTableColumn(): JsonTableColumnContext[];
    public jsonTableColumn(i: number): JsonTableColumnContext | null;
    public jsonTableColumn(i?: number): JsonTableColumnContext[] | JsonTableColumnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonTableColumnContext);
        }

        return this.getRuleContext(i, JsonTableColumnContext);
    }
    public KW_PLAN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PLAN, 0);
    }
    public jsonTableSpecificPlan(): JsonTableSpecificPlanContext | null {
        return this.getRuleContext(0, JsonTableSpecificPlanContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DEFAULT, 0);
    }
    public jsonTableDefaultPlan(): JsonTableDefaultPlanContext | null {
        return this.getRuleContext(0, JsonTableDefaultPlanContext);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ON, 0);
    }
    public KW_ERROR(): antlr.TerminalNode[];
    public KW_ERROR(i: number): antlr.TerminalNode | null;
    public KW_ERROR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_ERROR);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_ERROR, i);
    	}
    }
    public KW_EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EMPTY, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonTable) {
             listener.enterJsonTable(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonTable) {
             listener.exitJsonTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonTable) {
            return visitor.visitJsonTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnnestContext extends RelationSourceTableContext {
    public constructor(ctx: RelationSourceTableContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_UNNEST(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_UNNEST, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public KW_ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ORDINALITY, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterUnnest) {
             listener.enterUnnest(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitUnnest) {
             listener.exitUnnest(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitUnnest) {
            return visitor.visitUnnest(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableFunctionInvocationContext extends RelationSourceTableContext {
    public constructor(ctx: RelationSourceTableContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public tableFunctionCall(): TableFunctionCallContext {
        return this.getRuleContext(0, TableFunctionCallContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTableFunctionInvocation) {
             listener.enterTableFunctionInvocation(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTableFunctionInvocation) {
             listener.exitTableFunctionInvocation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionInvocation) {
            return visitor.visitTableFunctionInvocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LateralContext extends RelationSourceTableContext {
    public constructor(ctx: RelationSourceTableContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_LATERAL(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_LATERAL, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterLateral) {
             listener.enterLateral(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitLateral) {
             listener.exitLateral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitLateral) {
            return visitor.visitLateral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonTableColumnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_jsonTableColumn;
    }
    public override copyFrom(ctx: JsonTableColumnContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryColumnContext extends JsonTableColumnContext {
    public _emptyBehavior?: JsonQueryBehaviorContext;
    public _errorBehavior?: JsonQueryBehaviorContext;
    public constructor(ctx: JsonTableColumnContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FORMAT, 0)!;
    }
    public jsonRepresentation(): JsonRepresentationContext {
        return this.getRuleContext(0, JsonRepresentationContext)!;
    }
    public KW_PATH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PATH, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext | null {
        return this.getRuleContext(0, JsonQueryWrapperBehaviorContext);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WRAPPER, 0);
    }
    public KW_QUOTES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_QUOTES, 0);
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_ON);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_ON, i);
    	}
    }
    public KW_EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EMPTY, 0);
    }
    public KW_ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ERROR, 0);
    }
    public KW_KEEP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_KEEP, 0);
    }
    public KW_OMIT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OMIT, 0);
    }
    public jsonQueryBehavior(): JsonQueryBehaviorContext[];
    public jsonQueryBehavior(i: number): JsonQueryBehaviorContext | null;
    public jsonQueryBehavior(i?: number): JsonQueryBehaviorContext[] | JsonQueryBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonQueryBehaviorContext);
        }

        return this.getRuleContext(i, JsonQueryBehaviorContext);
    }
    public KW_SCALAR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SCALAR, 0);
    }
    public KW_TEXT_STRING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TEXT_STRING, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterQueryColumn) {
             listener.enterQueryColumn(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitQueryColumn) {
             listener.exitQueryColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitQueryColumn) {
            return visitor.visitQueryColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NestedColumnsContext extends JsonTableColumnContext {
    public constructor(ctx: JsonTableColumnContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_NESTED(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_NESTED, 0)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public KW_COLUMNS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COLUMNS, 0)!;
    }
    public jsonTableColumn(): JsonTableColumnContext[];
    public jsonTableColumn(i: number): JsonTableColumnContext | null;
    public jsonTableColumn(i?: number): JsonTableColumnContext[] | JsonTableColumnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonTableColumnContext);
        }

        return this.getRuleContext(i, JsonTableColumnContext);
    }
    public KW_PATH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PATH, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AS, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterNestedColumns) {
             listener.enterNestedColumns(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitNestedColumns) {
             listener.exitNestedColumns(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitNestedColumns) {
            return visitor.visitNestedColumns(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ValueColumnContext extends JsonTableColumnContext {
    public _emptyBehavior?: JsonValueBehaviorContext;
    public _errorBehavior?: JsonValueBehaviorContext;
    public constructor(ctx: JsonTableColumnContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public KW_PATH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PATH, 0);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_ON);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_ON, i);
    	}
    }
    public KW_EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EMPTY, 0);
    }
    public KW_ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ERROR, 0);
    }
    public jsonValueBehavior(): JsonValueBehaviorContext[];
    public jsonValueBehavior(i: number): JsonValueBehaviorContext | null;
    public jsonValueBehavior(i?: number): JsonValueBehaviorContext[] | JsonValueBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonValueBehaviorContext);
        }

        return this.getRuleContext(i, JsonValueBehaviorContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterValueColumn) {
             listener.enterValueColumn(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitValueColumn) {
             listener.exitValueColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitValueColumn) {
            return visitor.visitValueColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OrdinalityColumnContext extends JsonTableColumnContext {
    public constructor(ctx: JsonTableColumnContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FOR, 0)!;
    }
    public KW_ORDINALITY(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ORDINALITY, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterOrdinalityColumn) {
             listener.enterOrdinalityColumn(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitOrdinalityColumn) {
             listener.exitOrdinalityColumn(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitOrdinalityColumn) {
            return visitor.visitOrdinalityColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonTableSpecificPlanContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_jsonTableSpecificPlan;
    }
    public override copyFrom(ctx: JsonTableSpecificPlanContext): void {
        super.copyFrom(ctx);
    }
}
export class CrossPlanContext extends JsonTableSpecificPlanContext {
    public constructor(ctx: JsonTableSpecificPlanContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public planPrimary(): PlanPrimaryContext[];
    public planPrimary(i: number): PlanPrimaryContext | null;
    public planPrimary(i?: number): PlanPrimaryContext[] | PlanPrimaryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PlanPrimaryContext);
        }

        return this.getRuleContext(i, PlanPrimaryContext);
    }
    public KW_CROSS(): antlr.TerminalNode[];
    public KW_CROSS(i: number): antlr.TerminalNode | null;
    public KW_CROSS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_CROSS);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_CROSS, i);
    	}
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCrossPlan) {
             listener.enterCrossPlan(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCrossPlan) {
             listener.exitCrossPlan(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCrossPlan) {
            return visitor.visitCrossPlan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinPlanContext extends JsonTableSpecificPlanContext {
    public constructor(ctx: JsonTableSpecificPlanContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public jsonTablePathName(): JsonTablePathNameContext {
        return this.getRuleContext(0, JsonTablePathNameContext)!;
    }
    public planPrimary(): PlanPrimaryContext {
        return this.getRuleContext(0, PlanPrimaryContext)!;
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OUTER, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INNER, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJoinPlan) {
             listener.enterJoinPlan(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJoinPlan) {
             listener.exitJoinPlan(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJoinPlan) {
            return visitor.visitJoinPlan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LeafPlanContext extends JsonTableSpecificPlanContext {
    public constructor(ctx: JsonTableSpecificPlanContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public jsonTablePathName(): JsonTablePathNameContext {
        return this.getRuleContext(0, JsonTablePathNameContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterLeafPlan) {
             listener.enterLeafPlan(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitLeafPlan) {
             listener.exitLeafPlan(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitLeafPlan) {
            return visitor.visitLeafPlan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnionPlanContext extends JsonTableSpecificPlanContext {
    public constructor(ctx: JsonTableSpecificPlanContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public planPrimary(): PlanPrimaryContext[];
    public planPrimary(i: number): PlanPrimaryContext | null;
    public planPrimary(i?: number): PlanPrimaryContext[] | PlanPrimaryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PlanPrimaryContext);
        }

        return this.getRuleContext(i, PlanPrimaryContext);
    }
    public KW_UNION(): antlr.TerminalNode[];
    public KW_UNION(i: number): antlr.TerminalNode | null;
    public KW_UNION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_UNION);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_UNION, i);
    	}
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterUnionPlan) {
             listener.enterUnionPlan(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitUnionPlan) {
             listener.exitUnionPlan(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitUnionPlan) {
            return visitor.visitUnionPlan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonTablePathNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_jsonTablePathName;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonTablePathName) {
             listener.enterJsonTablePathName(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonTablePathName) {
             listener.exitJsonTablePathName(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonTablePathName) {
            return visitor.visitJsonTablePathName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PlanPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonTablePathName(): JsonTablePathNameContext | null {
        return this.getRuleContext(0, JsonTablePathNameContext);
    }
    public jsonTableSpecificPlan(): JsonTableSpecificPlanContext | null {
        return this.getRuleContext(0, JsonTableSpecificPlanContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_planPrimary;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPlanPrimary) {
             listener.enterPlanPrimary(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPlanPrimary) {
             listener.exitPlanPrimary(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPlanPrimary) {
            return visitor.visitPlanPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonTableDefaultPlanContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OUTER, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INNER, 0);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UNION, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CROSS, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_jsonTableDefaultPlan;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonTableDefaultPlan) {
             listener.enterJsonTableDefaultPlan(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonTableDefaultPlan) {
             listener.exitJsonTableDefaultPlan(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonTableDefaultPlan) {
            return visitor.visitJsonTableDefaultPlan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public tableFunctionArgument(): TableFunctionArgumentContext[];
    public tableFunctionArgument(i: number): TableFunctionArgumentContext | null;
    public tableFunctionArgument(i?: number): TableFunctionArgumentContext[] | TableFunctionArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableFunctionArgumentContext);
        }

        return this.getRuleContext(i, TableFunctionArgumentContext);
    }
    public KW_COPARTITION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_COPARTITION, 0);
    }
    public coPartitionTables(): CoPartitionTablesContext[];
    public coPartitionTables(i: number): CoPartitionTablesContext | null;
    public coPartitionTables(i?: number): CoPartitionTablesContext[] | CoPartitionTablesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CoPartitionTablesContext);
        }

        return this.getRuleContext(i, CoPartitionTablesContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_tableFunctionCall;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTableFunctionCall) {
             listener.enterTableFunctionCall(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTableFunctionCall) {
             listener.exitTableFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionCall) {
            return visitor.visitTableFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableArgument(): TableArgumentContext | null {
        return this.getRuleContext(0, TableArgumentContext);
    }
    public descriptorArgument(): DescriptorArgumentContext | null {
        return this.getRuleContext(0, DescriptorArgumentContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_tableFunctionArgument;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTableFunctionArgument) {
             listener.enterTableFunctionArgument(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTableFunctionArgument) {
             listener.exitTableFunctionArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionArgument) {
            return visitor.visitTableFunctionArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableArgumentRelation(): TableArgumentRelationContext {
        return this.getRuleContext(0, TableArgumentRelationContext)!;
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PARTITION, 0);
    }
    public KW_BY(): antlr.TerminalNode[];
    public KW_BY(i: number): antlr.TerminalNode | null;
    public KW_BY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_BY);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_BY, i);
    	}
    }
    public KW_PRUNE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PRUNE, 0);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WHEN, 0);
    }
    public KW_EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EMPTY, 0);
    }
    public KW_KEEP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_KEEP, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ORDER, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public partitionBy(): PartitionByContext | null {
        return this.getRuleContext(0, PartitionByContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_tableArgument;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTableArgument) {
             listener.enterTableArgument(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTableArgument) {
             listener.exitTableArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTableArgument) {
            return visitor.visitTableArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgumentRelationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_tableArgumentRelation;
    }
    public override copyFrom(ctx: TableArgumentRelationContext): void {
        super.copyFrom(ctx);
    }
}
export class TableArgumentQueryContext extends TableArgumentRelationContext {
    public constructor(ctx: TableArgumentRelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTableArgumentQuery) {
             listener.enterTableArgumentQuery(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTableArgumentQuery) {
             listener.exitTableArgumentQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTableArgumentQuery) {
            return visitor.visitTableArgumentQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableArgumentTableContext extends TableArgumentRelationContext {
    public constructor(ctx: TableArgumentRelationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0)!;
    }
    public tableRef(): TableRefContext {
        return this.getRuleContext(0, TableRefContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AS, 0);
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTableArgumentTable) {
             listener.enterTableArgumentTable(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTableArgumentTable) {
             listener.exitTableArgumentTable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTableArgumentTable) {
            return visitor.visitTableArgumentTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescriptorArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DESCRIPTOR(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DESCRIPTOR, 0)!;
    }
    public descriptorField(): DescriptorFieldContext[];
    public descriptorField(i: number): DescriptorFieldContext | null;
    public descriptorField(i?: number): DescriptorFieldContext[] | DescriptorFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DescriptorFieldContext);
        }

        return this.getRuleContext(i, DescriptorFieldContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CAST, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NULL, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_descriptorArgument;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDescriptorArgument) {
             listener.enterDescriptorArgument(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDescriptorArgument) {
             listener.exitDescriptorArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDescriptorArgument) {
            return visitor.visitDescriptorArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescriptorFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_descriptorField;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDescriptorField) {
             listener.enterDescriptorField(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDescriptorField) {
             listener.exitDescriptorField(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDescriptorField) {
            return visitor.visitDescriptorField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CoPartitionTablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_coPartitionTables;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCoPartitionTables) {
             listener.enterCoPartitionTables(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCoPartitionTables) {
             listener.exitCoPartitionTables(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCoPartitionTables) {
            return visitor.visitCoPartitionTables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_expression;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_booleanExpression;
    }
    public override copyFrom(ctx: BooleanExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class LogicalNotContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_NOT, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterLogicalNot) {
             listener.enterLogicalNot(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitLogicalNot) {
             listener.exitLogicalNot(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitLogicalNot) {
            return visitor.visitLogicalNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicatedContext extends BooleanExpressionContext {
    public _valueExpression?: ValueExpressionContext;
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(0, PredicateContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPredicated) {
             listener.enterPredicated(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPredicated) {
             listener.exitPredicated(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPredicated) {
            return visitor.visitPredicated(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OrContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public KW_OR(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_OR, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterOr) {
             listener.enterOr(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitOr) {
             listener.exitOr(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitOr) {
            return visitor.visitOr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AndContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public KW_AND(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AND, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterAnd) {
             listener.enterAnd(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitAnd) {
             listener.exitAnd(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitAnd) {
            return visitor.visitAnd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends antlr.ParserRuleContext {
    public value: antlr.ParserRuleContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number, value: antlr.ParserRuleContext) {
        super(parent, invokingState);
        this.value = value;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_predicate;
    }
    public override copyFrom(ctx: PredicateContext): void {
        super.copyFrom(ctx);
        this.value = ctx.value;
    }
}
export class ComparisonContext extends PredicateContext {
    public _right?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterComparison) {
             listener.enterComparison(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitComparison) {
             listener.exitComparison(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitComparison) {
            return visitor.visitComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LikeContext extends PredicateContext {
    public _pattern?: ValueExpressionContext;
    public _escape?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_LIKE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_LIKE, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NOT, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ESCAPE, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterLike) {
             listener.enterLike(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitLike) {
             listener.exitLike(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitLike) {
            return visitor.visitLike(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InSubqueryContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_IN, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterInSubquery) {
             listener.enterInSubquery(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitInSubquery) {
             listener.exitInSubquery(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitInSubquery) {
            return visitor.visitInSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DistinctFromContext extends PredicateContext {
    public _right?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_IS, 0)!;
    }
    public KW_DISTINCT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DISTINCT, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FROM, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDistinctFrom) {
             listener.enterDistinctFrom(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDistinctFrom) {
             listener.exitDistinctFrom(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDistinctFrom) {
            return visitor.visitDistinctFrom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InListContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_IN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterInList) {
             listener.enterInList(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitInList) {
             listener.exitInList(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitInList) {
            return visitor.visitInList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullPredicateContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_IS, 0)!;
    }
    public KW_NULL(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_NULL, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterNullPredicate) {
             listener.enterNullPredicate(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitNullPredicate) {
             listener.exitNullPredicate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitNullPredicate) {
            return visitor.visitNullPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BetweenContext extends PredicateContext {
    public _lower?: ValueExpressionContext;
    public _upper?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_BETWEEN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_BETWEEN, 0)!;
    }
    public KW_AND(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AND, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterBetween) {
             listener.enterBetween(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitBetween) {
             listener.exitBetween(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitBetween) {
            return visitor.visitBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QuantifiedComparisonContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public comparisonQuantifier(): ComparisonQuantifierContext {
        return this.getRuleContext(0, ComparisonQuantifierContext)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterQuantifiedComparison) {
             listener.enterQuantifiedComparison(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitQuantifiedComparison) {
             listener.exitQuantifiedComparison(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitQuantifiedComparison) {
            return visitor.visitQuantifiedComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_valueExpression;
    }
    public override copyFrom(ctx: ValueExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ValueExpressionDefaultContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterValueExpressionDefault) {
             listener.enterValueExpressionDefault(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitValueExpressionDefault) {
             listener.exitValueExpressionDefault(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitValueExpressionDefault) {
            return visitor.visitValueExpressionDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConcatenationContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONCAT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.CONCAT, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterConcatenation) {
             listener.enterConcatenation(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitConcatenation) {
             listener.exitConcatenation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitConcatenation) {
            return visitor.visitConcatenation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticBinaryContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _operator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.PERCENT, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.MINUS, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterArithmeticBinary) {
             listener.enterArithmeticBinary(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitArithmeticBinary) {
             listener.exitArithmeticBinary(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitArithmeticBinary) {
            return visitor.visitArithmeticBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticUnaryContext extends ValueExpressionContext {
    public _operator?: Token | null;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.MINUS, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.PLUS, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterArithmeticUnary) {
             listener.enterArithmeticUnary(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitArithmeticUnary) {
             listener.exitArithmeticUnary(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitArithmeticUnary) {
            return visitor.visitArithmeticUnary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AtTimeZoneContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public KW_AT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AT, 0)!;
    }
    public timeZoneSpecifier(): TimeZoneSpecifierContext {
        return this.getRuleContext(0, TimeZoneSpecifierContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterAtTimeZone) {
             listener.enterAtTimeZone(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitAtTimeZone) {
             listener.exitAtTimeZone(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitAtTimeZone) {
            return visitor.visitAtTimeZone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_primaryExpression;
    }
    public override copyFrom(ctx: PrimaryExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class DereferenceContext extends PrimaryExpressionContext {
    public _base?: PrimaryExpressionContext;
    public _fieldName?: IdentifierContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDereference) {
             listener.enterDereference(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDereference) {
             listener.exitDereference(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDereference) {
            return visitor.visitDereference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TypeConstructorContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DOUBLE, 0);
    }
    public KW_PRECISION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PRECISION, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTypeConstructor) {
             listener.enterTypeConstructor(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTypeConstructor) {
             listener.exitTypeConstructor(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTypeConstructor) {
            return visitor.visitTypeConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonValueContext extends PrimaryExpressionContext {
    public _emptyBehavior?: JsonValueBehaviorContext;
    public _errorBehavior?: JsonValueBehaviorContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_JSON_VALUE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_JSON_VALUE, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public KW_RETURNING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RETURNING, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_ON);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_ON, i);
    	}
    }
    public KW_EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EMPTY, 0);
    }
    public KW_ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ERROR, 0);
    }
    public jsonValueBehavior(): JsonValueBehaviorContext[];
    public jsonValueBehavior(i: number): JsonValueBehaviorContext | null;
    public jsonValueBehavior(i?: number): JsonValueBehaviorContext[] | JsonValueBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonValueBehaviorContext);
        }

        return this.getRuleContext(i, JsonValueBehaviorContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonValue) {
             listener.enterJsonValue(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonValue) {
             listener.exitJsonValue(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonValue) {
            return visitor.visitJsonValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentDateContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CURRENT_DATE, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCurrentDate) {
             listener.enterCurrentDate(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCurrentDate) {
             listener.exitCurrentDate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCurrentDate) {
            return visitor.visitCurrentDate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubstringContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SUBSTRING(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SUBSTRING, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FROM, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FOR, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSubstring) {
             listener.enterSubstring(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSubstring) {
             listener.exitSubstring(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSubstring) {
            return visitor.visitSubstring(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CastContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CAST, 0);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AS, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public KW_TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TRY_CAST, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCast) {
             listener.enterCast(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCast) {
             listener.exitCast(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCast) {
            return visitor.visitCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LambdaContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterLambda) {
             listener.enterLambda(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitLambda) {
             listener.exitLambda(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitLambda) {
            return visitor.visitLambda(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParenthesizedExpressionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterParenthesizedExpression) {
             listener.enterParenthesizedExpression(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitParenthesizedExpression) {
             listener.exitParenthesizedExpression(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitParenthesizedExpression) {
            return visitor.visitParenthesizedExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TrimContext extends PrimaryExpressionContext {
    public _trimChar?: ValueExpressionContext;
    public _trimSource?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_TRIM(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TRIM, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FROM, 0);
    }
    public trimsSpecification(): TrimsSpecificationContext | null {
        return this.getRuleContext(0, TrimsSpecificationContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTrim) {
             listener.enterTrim(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTrim) {
             listener.exitTrim(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTrim) {
            return visitor.visitTrim(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ParameterContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public QUESTION_MARK(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.QUESTION_MARK, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterParameter) {
             listener.enterParameter(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitParameter) {
             listener.exitParameter(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitParameter) {
            return visitor.visitParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NormalizeContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_NORMALIZE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_NORMALIZE, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public normalForm(): NormalFormContext | null {
        return this.getRuleContext(0, NormalFormContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterNormalize) {
             listener.enterNormalize(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitNormalize) {
             listener.exitNormalize(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitNormalize) {
            return visitor.visitNormalize(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LocalTimestampContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _precision?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_LOCALTIMESTAMP(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_LOCALTIMESTAMP, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.INTEGER_VALUE, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterLocalTimestamp) {
             listener.enterLocalTimestamp(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitLocalTimestamp) {
             listener.exitLocalTimestamp(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitLocalTimestamp) {
            return visitor.visitLocalTimestamp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ListAggContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_LISTAGG(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_LISTAGG, 0)!;
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITHIN, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_GROUP, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_BY, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public string(): StringContext | null {
        return this.getRuleContext(0, StringContext);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ON, 0);
    }
    public KW_OVERFLOW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OVERFLOW, 0);
    }
    public listAggOverflowBehavior(): ListAggOverflowBehaviorContext | null {
        return this.getRuleContext(0, ListAggOverflowBehaviorContext);
    }
    public filter(): FilterContext | null {
        return this.getRuleContext(0, FilterContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterListAgg) {
             listener.enterListAgg(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitListAgg) {
             listener.exitListAgg(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitListAgg) {
            return visitor.visitListAgg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonObjectContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_JSON_OBJECT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_JSON_OBJECT, 0)!;
    }
    public jsonObjectMember(): JsonObjectMemberContext[];
    public jsonObjectMember(i: number): JsonObjectMemberContext | null;
    public jsonObjectMember(i?: number): JsonObjectMemberContext[] | JsonObjectMemberContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonObjectMemberContext);
        }

        return this.getRuleContext(i, JsonObjectMemberContext);
    }
    public KW_RETURNING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RETURNING, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public KW_NULL(): antlr.TerminalNode[];
    public KW_NULL(i: number): antlr.TerminalNode | null;
    public KW_NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_NULL);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_NULL, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ON, 0);
    }
    public KW_ABSENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ABSENT, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UNIQUE, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITHOUT, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FORMAT, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_KEYS, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonObject) {
             listener.enterJsonObject(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonObject) {
             listener.exitJsonObject(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonObject) {
            return visitor.visitJsonObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntervalLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterIntervalLiteral) {
             listener.enterIntervalLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitIntervalLiteral) {
             listener.exitIntervalLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitIntervalLiteral) {
            return visitor.visitIntervalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NumericLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public number(): NumberContext {
        return this.getRuleContext(0, NumberContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterNumericLiteral) {
             listener.enterNumericLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitNumericLiteral) {
             listener.exitNumericLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitNumericLiteral) {
            return visitor.visitNumericLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BooleanLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanValue(): BooleanValueContext {
        return this.getRuleContext(0, BooleanValueContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterBooleanLiteral) {
             listener.enterBooleanLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitBooleanLiteral) {
             listener.exitBooleanLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitBooleanLiteral) {
            return visitor.visitBooleanLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonArrayContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_JSON_ARRAY(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_JSON_ARRAY, 0)!;
    }
    public jsonValueExpression(): JsonValueExpressionContext[];
    public jsonValueExpression(i: number): JsonValueExpressionContext | null;
    public jsonValueExpression(i?: number): JsonValueExpressionContext[] | JsonValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonValueExpressionContext);
        }

        return this.getRuleContext(i, JsonValueExpressionContext);
    }
    public KW_RETURNING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RETURNING, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public KW_NULL(): antlr.TerminalNode[];
    public KW_NULL(i: number): antlr.TerminalNode | null;
    public KW_NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_NULL);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_NULL, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ON, 0);
    }
    public KW_ABSENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ABSENT, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FORMAT, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonArray) {
             listener.enterJsonArray(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonArray) {
             listener.exitJsonArray(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonArray) {
            return visitor.visitJsonArray(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleCaseContext extends PrimaryExpressionContext {
    public _operand?: ExpressionContext;
    public _elseExpression?: ExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CASE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CASE, 0)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_END, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ELSE, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSimpleCase) {
             listener.enterSimpleCase(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSimpleCase) {
             listener.exitSimpleCase(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSimpleCase) {
            return visitor.visitSimpleCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnReferenceContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnName(): ColumnNameContext {
        return this.getRuleContext(0, ColumnNameContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterColumnReference) {
             listener.enterColumnReference(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitColumnReference) {
             listener.exitColumnReference(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitColumnReference) {
            return visitor.visitColumnReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_NULL(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_NULL, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterNullLiteral) {
             listener.enterNullLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitNullLiteral) {
             listener.exitNullLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitNullLiteral) {
            return visitor.visitNullLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RowConstructorContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ROW, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRowConstructor) {
             listener.enterRowConstructor(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRowConstructor) {
             listener.exitRowConstructor(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRowConstructor) {
            return visitor.visitRowConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubscriptContext extends PrimaryExpressionContext {
    public _value?: PrimaryExpressionContext;
    public _index?: ValueExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSubscript) {
             listener.enterSubscript(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSubscript) {
             listener.exitSubscript(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSubscript) {
            return visitor.visitSubscript(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonExistsContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_JSON_EXISTS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_JSON_EXISTS, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public jsonExistsErrorBehavior(): JsonExistsErrorBehaviorContext | null {
        return this.getRuleContext(0, JsonExistsErrorBehaviorContext);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ON, 0);
    }
    public KW_ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ERROR, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonExists) {
             listener.enterJsonExists(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonExists) {
             listener.exitJsonExists(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonExists) {
            return visitor.visitJsonExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentPathContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CURRENT_PATH(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CURRENT_PATH, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCurrentPath) {
             listener.enterCurrentPath(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCurrentPath) {
             listener.exitCurrentPath(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCurrentPath) {
            return visitor.visitCurrentPath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SubqueryExpressionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSubqueryExpression) {
             listener.enterSubqueryExpression(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSubqueryExpression) {
             listener.exitSubqueryExpression(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSubqueryExpression) {
            return visitor.visitSubqueryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BinaryLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BINARY_LITERAL(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.BINARY_LITERAL, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterBinaryLiteral) {
             listener.enterBinaryLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitBinaryLiteral) {
             listener.exitBinaryLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitBinaryLiteral) {
            return visitor.visitBinaryLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentTimeContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _precision?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CURRENT_TIME(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CURRENT_TIME, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.INTEGER_VALUE, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCurrentTime) {
             listener.enterCurrentTime(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCurrentTime) {
             listener.exitCurrentTime(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCurrentTime) {
            return visitor.visitCurrentTime(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LocalTimeContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _precision?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_LOCALTIME(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_LOCALTIME, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.INTEGER_VALUE, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterLocalTime) {
             listener.enterLocalTime(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitLocalTime) {
             listener.exitLocalTime(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitLocalTime) {
            return visitor.visitLocalTime(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentUserContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CURRENT_USER, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCurrentUser) {
             listener.enterCurrentUser(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCurrentUser) {
             listener.exitCurrentUser(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCurrentUser) {
            return visitor.visitCurrentUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JsonQueryContext extends PrimaryExpressionContext {
    public _emptyBehavior?: JsonQueryBehaviorContext;
    public _errorBehavior?: JsonQueryBehaviorContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_JSON_QUERY(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_JSON_QUERY, 0)!;
    }
    public jsonPathInvocation(): JsonPathInvocationContext {
        return this.getRuleContext(0, JsonPathInvocationContext)!;
    }
    public KW_RETURNING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RETURNING, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public jsonQueryWrapperBehavior(): JsonQueryWrapperBehaviorContext | null {
        return this.getRuleContext(0, JsonQueryWrapperBehaviorContext);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WRAPPER, 0);
    }
    public KW_QUOTES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_QUOTES, 0);
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_ON);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_ON, i);
    	}
    }
    public KW_EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EMPTY, 0);
    }
    public KW_ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ERROR, 0);
    }
    public KW_KEEP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_KEEP, 0);
    }
    public KW_OMIT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OMIT, 0);
    }
    public jsonQueryBehavior(): JsonQueryBehaviorContext[];
    public jsonQueryBehavior(i: number): JsonQueryBehaviorContext | null;
    public jsonQueryBehavior(i?: number): JsonQueryBehaviorContext[] | JsonQueryBehaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonQueryBehaviorContext);
        }

        return this.getRuleContext(i, JsonQueryBehaviorContext);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FORMAT, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public KW_SCALAR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SCALAR, 0);
    }
    public KW_TEXT_STRING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TEXT_STRING, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonQuery) {
             listener.enterJsonQuery(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonQuery) {
             listener.exitJsonQuery(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonQuery) {
            return visitor.visitJsonQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MeasureContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public over(): OverContext {
        return this.getRuleContext(0, OverContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterMeasure) {
             listener.enterMeasure(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitMeasure) {
             listener.exitMeasure(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitMeasure) {
            return visitor.visitMeasure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExtractContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_EXTRACT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_EXTRACT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FROM, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterExtract) {
             listener.enterExtract(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitExtract) {
             listener.exitExtract(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitExtract) {
            return visitor.visitExtract(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StringLiteralContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterStringLiteral) {
             listener.enterStringLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitStringLiteral) {
             listener.exitStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitStringLiteral) {
            return visitor.visitStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArrayConstructorContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ARRAY(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ARRAY, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterArrayConstructor) {
             listener.enterArrayConstructor(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitArrayConstructor) {
             listener.exitArrayConstructor(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitArrayConstructor) {
            return visitor.visitArrayConstructor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionCallContext extends PrimaryExpressionContext {
    public _label?: IdentifierContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.ASTERISK, 0);
    }
    public processingMode(): ProcessingModeContext | null {
        return this.getRuleContext(0, ProcessingModeContext);
    }
    public filter(): FilterContext | null {
        return this.getRuleContext(0, FilterContext);
    }
    public over(): OverContext | null {
        return this.getRuleContext(0, OverContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_BY, 0);
    }
    public sortItem(): SortItemContext[];
    public sortItem(i: number): SortItemContext | null;
    public sortItem(i?: number): SortItemContext[] | SortItemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortItemContext);
        }

        return this.getRuleContext(i, SortItemContext);
    }
    public setQuantifier(): SetQuantifierContext | null {
        return this.getRuleContext(0, SetQuantifierContext);
    }
    public nullTreatment(): NullTreatmentContext | null {
        return this.getRuleContext(0, NullTreatmentContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterFunctionCall) {
             listener.enterFunctionCall(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitFunctionCall) {
             listener.exitFunctionCall(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitFunctionCall) {
            return visitor.visitFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentTimestampContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public _precision?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CURRENT_TIMESTAMP, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.INTEGER_VALUE, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCurrentTimestamp) {
             listener.enterCurrentTimestamp(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCurrentTimestamp) {
             listener.exitCurrentTimestamp(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCurrentTimestamp) {
            return visitor.visitCurrentTimestamp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentSchemaContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CURRENT_SCHEMA(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CURRENT_SCHEMA, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCurrentSchema) {
             listener.enterCurrentSchema(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCurrentSchema) {
             listener.exitCurrentSchema(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCurrentSchema) {
            return visitor.visitCurrentSchema(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExistsContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_EXISTS, 0)!;
    }
    public query(): QueryContext {
        return this.getRuleContext(0, QueryContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterExists) {
             listener.enterExists(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitExists) {
             listener.exitExists(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitExists) {
            return visitor.visitExists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PositionContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_POSITION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_POSITION, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_IN, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPosition) {
             listener.enterPosition(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPosition) {
             listener.exitPosition(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPosition) {
            return visitor.visitPosition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SearchedCaseContext extends PrimaryExpressionContext {
    public _elseExpression?: ExpressionContext;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CASE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CASE, 0)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_END, 0)!;
    }
    public whenClause(): WhenClauseContext[];
    public whenClause(i: number): WhenClauseContext | null;
    public whenClause(i?: number): WhenClauseContext[] | WhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WhenClauseContext);
        }

        return this.getRuleContext(i, WhenClauseContext);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ELSE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSearchedCase) {
             listener.enterSearchedCase(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSearchedCase) {
             listener.exitSearchedCase(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSearchedCase) {
            return visitor.visitSearchedCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentCatalogContext extends PrimaryExpressionContext {
    public _name?: Token | null;
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CURRENT_CATALOG(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CURRENT_CATALOG, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCurrentCatalog) {
             listener.enterCurrentCatalog(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCurrentCatalog) {
             listener.exitCurrentCatalog(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCurrentCatalog) {
            return visitor.visitCurrentCatalog(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GroupingOperationContext extends PrimaryExpressionContext {
    public constructor(ctx: PrimaryExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_GROUPING(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_GROUPING, 0)!;
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterGroupingOperation) {
             listener.enterGroupingOperation(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitGroupingOperation) {
             listener.exitGroupingOperation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitGroupingOperation) {
            return visitor.visitGroupingOperation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonPathInvocationContext extends antlr.ParserRuleContext {
    public _path?: StringContext;
    public _pathName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        return this.getRuleContext(0, JsonValueExpressionContext)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AS, 0);
    }
    public KW_PASSING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PASSING, 0);
    }
    public jsonArgument(): JsonArgumentContext[];
    public jsonArgument(i: number): JsonArgumentContext | null;
    public jsonArgument(i?: number): JsonArgumentContext[] | JsonArgumentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JsonArgumentContext);
        }

        return this.getRuleContext(i, JsonArgumentContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_jsonPathInvocation;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonPathInvocation) {
             listener.enterJsonPathInvocation(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonPathInvocation) {
             listener.exitJsonPathInvocation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonPathInvocation) {
            return visitor.visitJsonPathInvocation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FORMAT, 0);
    }
    public jsonRepresentation(): JsonRepresentationContext | null {
        return this.getRuleContext(0, JsonRepresentationContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_jsonValueExpression;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonValueExpression) {
             listener.enterJsonValueExpression(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonValueExpression) {
             listener.exitJsonValueExpression(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonValueExpression) {
            return visitor.visitJsonValueExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonRepresentationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_JSON(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_JSON, 0)!;
    }
    public KW_ENCODING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ENCODING, 0);
    }
    public KW_UTF8(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UTF8, 0);
    }
    public KW_UTF16(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UTF16, 0);
    }
    public KW_UTF32(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UTF32, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_jsonRepresentation;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonRepresentation) {
             listener.enterJsonRepresentation(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonRepresentation) {
             listener.exitJsonRepresentation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonRepresentation) {
            return visitor.visitJsonRepresentation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        return this.getRuleContext(0, JsonValueExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AS, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_jsonArgument;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonArgument) {
             listener.enterJsonArgument(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonArgument) {
             listener.exitJsonArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonArgument) {
            return visitor.visitJsonArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonExistsErrorBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FALSE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UNKNOWN, 0);
    }
    public KW_ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ERROR, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_jsonExistsErrorBehavior;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonExistsErrorBehavior) {
             listener.enterJsonExistsErrorBehavior(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonExistsErrorBehavior) {
             listener.exitJsonExistsErrorBehavior(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonExistsErrorBehavior) {
            return visitor.visitJsonExistsErrorBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonValueBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ERROR, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NULL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DEFAULT, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_jsonValueBehavior;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonValueBehavior) {
             listener.enterJsonValueBehavior(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonValueBehavior) {
             listener.exitJsonValueBehavior(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonValueBehavior) {
            return visitor.visitJsonValueBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonQueryWrapperBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITHOUT, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ARRAY, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public KW_CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CONDITIONAL, 0);
    }
    public KW_UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UNCONDITIONAL, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_jsonQueryWrapperBehavior;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonQueryWrapperBehavior) {
             listener.enterJsonQueryWrapperBehavior(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonQueryWrapperBehavior) {
             listener.exitJsonQueryWrapperBehavior(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonQueryWrapperBehavior) {
            return visitor.visitJsonQueryWrapperBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonQueryBehaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ERROR, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NULL, 0);
    }
    public KW_EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EMPTY, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ARRAY, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OBJECT, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_jsonQueryBehavior;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonQueryBehavior) {
             listener.enterJsonQueryBehavior(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonQueryBehavior) {
             listener.exitJsonQueryBehavior(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonQueryBehavior) {
            return visitor.visitJsonQueryBehavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonObjectMemberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_VALUE, 0);
    }
    public jsonValueExpression(): JsonValueExpressionContext {
        return this.getRuleContext(0, JsonValueExpressionContext)!;
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_KEY, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_jsonObjectMember;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterJsonObjectMember) {
             listener.enterJsonObjectMember(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitJsonObjectMember) {
             listener.exitJsonObjectMember(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitJsonObjectMember) {
            return visitor.visitJsonObjectMember(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProcessingModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RUNNING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RUNNING, 0);
    }
    public KW_FINAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FINAL, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_processingMode;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterProcessingMode) {
             listener.enterProcessingMode(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitProcessingMode) {
             listener.exitProcessingMode(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitProcessingMode) {
            return visitor.visitProcessingMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NullTreatmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IGNORE, 0);
    }
    public KW_NULLS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_NULLS, 0)!;
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RESPECT, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_nullTreatment;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterNullTreatment) {
             listener.enterNullTreatment(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitNullTreatment) {
             listener.exitNullTreatment(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitNullTreatment) {
            return visitor.visitNullTreatment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_string;
    }
    public override copyFrom(ctx: StringContext): void {
        super.copyFrom(ctx);
    }
}
export class UnicodeStringLiteralContext extends StringContext {
    public constructor(ctx: StringContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UNICODE_STRING(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.UNICODE_STRING, 0)!;
    }
    public KW_UESCAPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UESCAPE, 0);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.STRING, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterUnicodeStringLiteral) {
             listener.enterUnicodeStringLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitUnicodeStringLiteral) {
             listener.exitUnicodeStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitUnicodeStringLiteral) {
            return visitor.visitUnicodeStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BasicStringLiteralContext extends StringContext {
    public constructor(ctx: StringContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STRING(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.STRING, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterBasicStringLiteral) {
             listener.enterBasicStringLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitBasicStringLiteral) {
             listener.exitBasicStringLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitBasicStringLiteral) {
            return visitor.visitBasicStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeZoneSpecifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_timeZoneSpecifier;
    }
    public override copyFrom(ctx: TimeZoneSpecifierContext): void {
        super.copyFrom(ctx);
    }
}
export class TimeZoneIntervalContext extends TimeZoneSpecifierContext {
    public constructor(ctx: TimeZoneSpecifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_TIME(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TIME, 0)!;
    }
    public KW_ZONE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ZONE, 0)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTimeZoneInterval) {
             listener.enterTimeZoneInterval(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTimeZoneInterval) {
             listener.exitTimeZoneInterval(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTimeZoneInterval) {
            return visitor.visitTimeZoneInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TimeZoneStringContext extends TimeZoneSpecifierContext {
    public constructor(ctx: TimeZoneSpecifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_TIME(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TIME, 0)!;
    }
    public KW_ZONE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ZONE, 0)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTimeZoneString) {
             listener.enterTimeZoneString(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTimeZoneString) {
             listener.exitTimeZoneString(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTimeZoneString) {
            return visitor.visitTimeZoneString(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQ(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.EQ, 0);
    }
    public NEQ(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.NEQ, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.LT, 0);
    }
    public LTE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.LTE, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.GT, 0);
    }
    public GTE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.GTE, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_comparisonOperator;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterComparisonOperator) {
             listener.enterComparisonOperator(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitComparisonOperator) {
             listener.exitComparisonOperator(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ALL, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SOME, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ANY, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_comparisonQuantifier;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterComparisonQuantifier) {
             listener.enterComparisonQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitComparisonQuantifier) {
             listener.exitComparisonQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitComparisonQuantifier) {
            return visitor.visitComparisonQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FALSE, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_booleanValue;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterBooleanValue) {
             listener.enterBooleanValue(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitBooleanValue) {
             listener.exitBooleanValue(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitBooleanValue) {
            return visitor.visitBooleanValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends antlr.ParserRuleContext {
    public _sign?: Token | null;
    public _from_?: IntervalFieldContext;
    public _to?: IntervalFieldContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INTERVAL(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_INTERVAL, 0)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public intervalField(): IntervalFieldContext[];
    public intervalField(i: number): IntervalFieldContext | null;
    public intervalField(i?: number): IntervalFieldContext[] | IntervalFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalFieldContext);
        }

        return this.getRuleContext(i, IntervalFieldContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TO, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_interval;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterInterval) {
             listener.enterInterval(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitInterval) {
             listener.exitInterval(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_YEAR, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MONTH, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DAY, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_HOUR, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MINUTE, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SECOND, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_intervalField;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterIntervalField) {
             listener.enterIntervalField(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitIntervalField) {
             listener.exitIntervalField(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitIntervalField) {
            return visitor.visitIntervalField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NormalFormContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NFD(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NFD, 0);
    }
    public KW_NFC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NFC, 0);
    }
    public KW_NFKD(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NFKD, 0);
    }
    public KW_NFKC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NFKC, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_normalForm;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterNormalForm) {
             listener.enterNormalForm(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitNormalForm) {
             listener.exitNormalForm(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitNormalForm) {
            return visitor.visitNormalForm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_type;
    }
    public override copyFrom(ctx: TypeContext): void {
        super.copyFrom(ctx);
    }
}
export class RowTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ROW, 0)!;
    }
    public rowField(): RowFieldContext[];
    public rowField(i: number): RowFieldContext | null;
    public rowField(i?: number): RowFieldContext[] | RowFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowFieldContext);
        }

        return this.getRuleContext(i, RowFieldContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRowType) {
             listener.enterRowType(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRowType) {
             listener.exitRowType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRowType) {
            return visitor.visitRowType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntervalTypeContext extends TypeContext {
    public _from_?: IntervalFieldContext;
    public _to?: IntervalFieldContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_INTERVAL(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_INTERVAL, 0)!;
    }
    public intervalField(): IntervalFieldContext[];
    public intervalField(i: number): IntervalFieldContext | null;
    public intervalField(i?: number): IntervalFieldContext[] | IntervalFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntervalFieldContext);
        }

        return this.getRuleContext(i, IntervalFieldContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TO, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterIntervalType) {
             listener.enterIntervalType(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitIntervalType) {
             listener.exitIntervalType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitIntervalType) {
            return visitor.visitIntervalType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArrayTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public KW_ARRAY(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ARRAY, 0)!;
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.INTEGER_VALUE, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterArrayType) {
             listener.enterArrayType(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitArrayType) {
             listener.exitArrayType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitArrayType) {
            return visitor.visitArrayType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DoublePrecisionTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DOUBLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DOUBLE, 0)!;
    }
    public KW_PRECISION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_PRECISION, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDoublePrecisionType) {
             listener.enterDoublePrecisionType(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDoublePrecisionType) {
             listener.exitDoublePrecisionType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDoublePrecisionType) {
            return visitor.visitDoublePrecisionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TimeTypeContext extends TypeContext {
    public _base?: Token | null;
    public _precision?: TypeParameterContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_TIME(): antlr.TerminalNode[];
    public KW_TIME(i: number): antlr.TerminalNode | null;
    public KW_TIME(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_TIME);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_TIME, i);
    	}
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ZONE, 0);
    }
    public typeParameter(): TypeParameterContext | null {
        return this.getRuleContext(0, TypeParameterContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITHOUT, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTimeType) {
             listener.enterTimeType(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTimeType) {
             listener.exitTimeType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTimeType) {
            return visitor.visitTimeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LegacyArrayTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ARRAY(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ARRAY, 0)!;
    }
    public LT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.LT, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public GT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.GT, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterLegacyArrayType) {
             listener.enterLegacyArrayType(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitLegacyArrayType) {
             listener.exitLegacyArrayType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitLegacyArrayType) {
            return visitor.visitLegacyArrayType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GenericTypeContext extends TypeContext {
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public typeParameter(): TypeParameterContext[];
    public typeParameter(i: number): TypeParameterContext | null;
    public typeParameter(i?: number): TypeParameterContext[] | TypeParameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypeParameterContext);
        }

        return this.getRuleContext(i, TypeParameterContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterGenericType) {
             listener.enterGenericType(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitGenericType) {
             listener.exitGenericType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitGenericType) {
            return visitor.visitGenericType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DateTimeTypeContext extends TypeContext {
    public _base?: Token | null;
    public _precision?: TypeParameterContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TIMESTAMP, 0)!;
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TIME, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ZONE, 0);
    }
    public typeParameter(): TypeParameterContext | null {
        return this.getRuleContext(0, TypeParameterContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITH, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITHOUT, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDateTimeType) {
             listener.enterDateTimeType(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDateTimeType) {
             listener.exitDateTimeType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDateTimeType) {
            return visitor.visitDateTimeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LegacyMapTypeContext extends TypeContext {
    public _keyType?: TypeContext;
    public _valueType?: TypeContext;
    public constructor(ctx: TypeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_MAP(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_MAP, 0)!;
    }
    public LT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.LT, 0)!;
    }
    public GT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.GT, 0)!;
    }
    public type_(): TypeContext[];
    public type_(i: number): TypeContext | null;
    public type_(i?: number): TypeContext[] | TypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypeContext);
        }

        return this.getRuleContext(i, TypeContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterLegacyMapType) {
             listener.enterLegacyMapType(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitLegacyMapType) {
             listener.exitLegacyMapType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitLegacyMapType) {
            return visitor.visitLegacyMapType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_rowField;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRowField) {
             listener.enterRowField(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRowField) {
             listener.exitRowField(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRowField) {
            return visitor.visitRowField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypeParameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.INTEGER_VALUE, 0);
    }
    public type(): TypeContext | null {
        return this.getRuleContext(0, TypeContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_typeParameter;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTypeParameter) {
             listener.enterTypeParameter(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTypeParameter) {
             listener.exitTypeParameter(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTypeParameter) {
            return visitor.visitTypeParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhenClauseContext extends antlr.ParserRuleContext {
    public _condition?: ExpressionContext;
    public _result?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_WHEN, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_THEN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_whenClause;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterWhenClause) {
             listener.enterWhenClause(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitWhenClause) {
             listener.exitWhenClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitWhenClause) {
            return visitor.visitWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FILTER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FILTER, 0)!;
    }
    public whereClause(): WhereClauseContext {
        return this.getRuleContext(0, WhereClauseContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_filter;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterFilter) {
             listener.enterFilter(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitFilter) {
             listener.exitFilter(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitFilter) {
            return visitor.visitFilter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MergeCaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_mergeCase;
    }
    public override copyFrom(ctx: MergeCaseContext): void {
        super.copyFrom(ctx);
    }
}
export class MergeInsertContext extends MergeCaseContext {
    public _condition?: ExpressionContext;
    public _identifier?: IdentifierContext;
    public _targets: IdentifierContext[] = [];
    public _expression?: ExpressionContext;
    public _values: ExpressionContext[] = [];
    public constructor(ctx: MergeCaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_WHEN, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_NOT, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_THEN, 0)!;
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_INSERT, 0)!;
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_VALUES, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AND, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterMergeInsert) {
             listener.enterMergeInsert(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitMergeInsert) {
             listener.exitMergeInsert(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitMergeInsert) {
            return visitor.visitMergeInsert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeUpdateContext extends MergeCaseContext {
    public _condition?: ExpressionContext;
    public _identifier?: IdentifierContext;
    public _targets: IdentifierContext[] = [];
    public _expression?: ExpressionContext;
    public _values: ExpressionContext[] = [];
    public constructor(ctx: MergeCaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_WHEN, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_THEN, 0)!;
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_UPDATE, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SET, 0)!;
    }
    public EQ(): antlr.TerminalNode[];
    public EQ(i: number): antlr.TerminalNode | null;
    public EQ(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.EQ);
    	} else {
    		return this.getToken(TrinoSqlParser.EQ, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AND, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterMergeUpdate) {
             listener.enterMergeUpdate(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitMergeUpdate) {
             listener.exitMergeUpdate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitMergeUpdate) {
            return visitor.visitMergeUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MergeDeleteContext extends MergeCaseContext {
    public _condition?: ExpressionContext;
    public constructor(ctx: MergeCaseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_WHEN, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_THEN, 0)!;
    }
    public KW_DELETE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DELETE, 0)!;
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AND, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterMergeDelete) {
             listener.enterMergeDelete(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitMergeDelete) {
             listener.exitMergeDelete(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitMergeDelete) {
            return visitor.visitMergeDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OverContext extends antlr.ParserRuleContext {
    public _windowName?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OVER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_OVER, 0)!;
    }
    public windowSpecification(): WindowSpecificationContext | null {
        return this.getRuleContext(0, WindowSpecificationContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_over;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterOver) {
             listener.enterOver(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitOver) {
             listener.exitOver(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitOver) {
            return visitor.visitOver(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public frameExtent(): FrameExtentContext {
        return this.getRuleContext(0, FrameExtentContext)!;
    }
    public KW_MEASURES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MEASURES, 0);
    }
    public measureDefinition(): MeasureDefinitionContext[];
    public measureDefinition(i: number): MeasureDefinitionContext | null;
    public measureDefinition(i?: number): MeasureDefinitionContext[] | MeasureDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MeasureDefinitionContext);
        }

        return this.getRuleContext(i, MeasureDefinitionContext);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AFTER, 0);
    }
    public KW_MATCH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MATCH, 0);
    }
    public skipTo(): SkipToContext | null {
        return this.getRuleContext(0, SkipToContext);
    }
    public KW_PATTERN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PATTERN, 0);
    }
    public rowPattern(): RowPatternContext | null {
        return this.getRuleContext(0, RowPatternContext);
    }
    public KW_SUBSET(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SUBSET, 0);
    }
    public subsetDefinition(): SubsetDefinitionContext[];
    public subsetDefinition(i: number): SubsetDefinitionContext | null;
    public subsetDefinition(i?: number): SubsetDefinitionContext[] | SubsetDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubsetDefinitionContext);
        }

        return this.getRuleContext(i, SubsetDefinitionContext);
    }
    public KW_DEFINE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DEFINE, 0);
    }
    public variableDefinition(): VariableDefinitionContext[];
    public variableDefinition(i: number): VariableDefinitionContext | null;
    public variableDefinition(i?: number): VariableDefinitionContext[] | VariableDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableDefinitionContext);
        }

        return this.getRuleContext(i, VariableDefinitionContext);
    }
    public KW_INITIAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INITIAL, 0);
    }
    public KW_SEEK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SEEK, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_windowFrame;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterWindowFrame) {
             listener.enterWindowFrame(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitWindowFrame) {
             listener.exitWindowFrame(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitWindowFrame) {
            return visitor.visitWindowFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameExtentContext extends antlr.ParserRuleContext {
    public _frameType?: Token | null;
    public _start?: FrameBoundContext;
    public _end?: FrameBoundContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RANGE, 0);
    }
    public frameBound(): FrameBoundContext[];
    public frameBound(i: number): FrameBoundContext | null;
    public frameBound(i?: number): FrameBoundContext[] | FrameBoundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FrameBoundContext);
        }

        return this.getRuleContext(i, FrameBoundContext);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ROWS, 0);
    }
    public KW_GROUPS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_GROUPS, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_BETWEEN, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AND, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_frameExtent;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterFrameExtent) {
             listener.enterFrameExtent(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitFrameExtent) {
             listener.exitFrameExtent(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitFrameExtent) {
            return visitor.visitFrameExtent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FrameBoundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_frameBound;
    }
    public override copyFrom(ctx: FrameBoundContext): void {
        super.copyFrom(ctx);
    }
}
export class BoundedFrameContext extends FrameBoundContext {
    public _boundType?: Token | null;
    public constructor(ctx: FrameBoundContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PRECEDING, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FOLLOWING, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterBoundedFrame) {
             listener.enterBoundedFrame(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitBoundedFrame) {
             listener.exitBoundedFrame(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitBoundedFrame) {
            return visitor.visitBoundedFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnboundedFrameContext extends FrameBoundContext {
    public _boundType?: Token | null;
    public constructor(ctx: FrameBoundContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_UNBOUNDED, 0)!;
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PRECEDING, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FOLLOWING, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterUnboundedFrame) {
             listener.enterUnboundedFrame(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitUnboundedFrame) {
             listener.exitUnboundedFrame(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitUnboundedFrame) {
            return visitor.visitUnboundedFrame(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentRowBoundContext extends FrameBoundContext {
    public constructor(ctx: FrameBoundContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CURRENT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CURRENT, 0)!;
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ROW, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCurrentRowBound) {
             listener.enterCurrentRowBound(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCurrentRowBound) {
             listener.exitCurrentRowBound(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCurrentRowBound) {
            return visitor.visitCurrentRowBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowPatternContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_rowPattern;
    }
    public override copyFrom(ctx: RowPatternContext): void {
        super.copyFrom(ctx);
    }
}
export class QuantifiedPrimaryContext extends RowPatternContext {
    public constructor(ctx: RowPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public patternPrimary(): PatternPrimaryContext {
        return this.getRuleContext(0, PatternPrimaryContext)!;
    }
    public patternQuantifier(): PatternQuantifierContext | null {
        return this.getRuleContext(0, PatternQuantifierContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterQuantifiedPrimary) {
             listener.enterQuantifiedPrimary(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitQuantifiedPrimary) {
             listener.exitQuantifiedPrimary(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitQuantifiedPrimary) {
            return visitor.visitQuantifiedPrimary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PatternConcatenationContext extends RowPatternContext {
    public constructor(ctx: RowPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext[];
    public rowPattern(i: number): RowPatternContext | null;
    public rowPattern(i?: number): RowPatternContext[] | RowPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowPatternContext);
        }

        return this.getRuleContext(i, RowPatternContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPatternConcatenation) {
             listener.enterPatternConcatenation(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPatternConcatenation) {
             listener.exitPatternConcatenation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPatternConcatenation) {
            return visitor.visitPatternConcatenation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PatternAlternationContext extends RowPatternContext {
    public constructor(ctx: RowPatternContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext[];
    public rowPattern(i: number): RowPatternContext | null;
    public rowPattern(i?: number): RowPatternContext[] | RowPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowPatternContext);
        }

        return this.getRuleContext(i, RowPatternContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPatternAlternation) {
             listener.enterPatternAlternation(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPatternAlternation) {
             listener.exitPatternAlternation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPatternAlternation) {
            return visitor.visitPatternAlternation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternPrimaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_patternPrimary;
    }
    public override copyFrom(ctx: PatternPrimaryContext): void {
        super.copyFrom(ctx);
    }
}
export class PatternPermutationContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_PERMUTE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_PERMUTE, 0)!;
    }
    public rowPattern(): RowPatternContext[];
    public rowPattern(i: number): RowPatternContext | null;
    public rowPattern(i?: number): RowPatternContext[] | RowPatternContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowPatternContext);
        }

        return this.getRuleContext(i, RowPatternContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPatternPermutation) {
             listener.enterPatternPermutation(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPatternPermutation) {
             listener.exitPatternPermutation(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPatternPermutation) {
            return visitor.visitPatternPermutation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionEndAnchorContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPartitionEndAnchor) {
             listener.enterPartitionEndAnchor(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPartitionEndAnchor) {
             listener.exitPartitionEndAnchor(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPartitionEndAnchor) {
            return visitor.visitPartitionEndAnchor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PatternVariableContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPatternVariable) {
             listener.enterPatternVariable(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPatternVariable) {
             listener.exitPatternVariable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPatternVariable) {
            return visitor.visitPatternVariable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExcludedPatternContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext {
        return this.getRuleContext(0, RowPatternContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterExcludedPattern) {
             listener.enterExcludedPattern(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitExcludedPattern) {
             listener.exitExcludedPattern(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitExcludedPattern) {
            return visitor.visitExcludedPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PartitionStartAnchorContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPartitionStartAnchor) {
             listener.enterPartitionStartAnchor(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPartitionStartAnchor) {
             listener.exitPartitionStartAnchor(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPartitionStartAnchor) {
            return visitor.visitPartitionStartAnchor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class EmptyPatternContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterEmptyPattern) {
             listener.enterEmptyPattern(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitEmptyPattern) {
             listener.exitEmptyPattern(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitEmptyPattern) {
            return visitor.visitEmptyPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GroupedPatternContext extends PatternPrimaryContext {
    public constructor(ctx: PatternPrimaryContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public rowPattern(): RowPatternContext {
        return this.getRuleContext(0, RowPatternContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterGroupedPattern) {
             listener.enterGroupedPattern(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitGroupedPattern) {
             listener.exitGroupedPattern(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitGroupedPattern) {
            return visitor.visitGroupedPattern(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternQuantifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_patternQuantifier;
    }
    public override copyFrom(ctx: PatternQuantifierContext): void {
        super.copyFrom(ctx);
    }
}
export class ZeroOrMoreQuantifierContext extends PatternQuantifierContext {
    public _reluctant?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.ASTERISK, 0)!;
    }
    public QUESTION_MARK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.QUESTION_MARK, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterZeroOrMoreQuantifier) {
             listener.enterZeroOrMoreQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitZeroOrMoreQuantifier) {
             listener.exitZeroOrMoreQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitZeroOrMoreQuantifier) {
            return visitor.visitZeroOrMoreQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OneOrMoreQuantifierContext extends PatternQuantifierContext {
    public _reluctant?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PLUS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.PLUS, 0)!;
    }
    public QUESTION_MARK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.QUESTION_MARK, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterOneOrMoreQuantifier) {
             listener.enterOneOrMoreQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitOneOrMoreQuantifier) {
             listener.exitOneOrMoreQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitOneOrMoreQuantifier) {
            return visitor.visitOneOrMoreQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ZeroOrOneQuantifierContext extends PatternQuantifierContext {
    public _reluctant?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public QUESTION_MARK(): antlr.TerminalNode[];
    public QUESTION_MARK(i: number): antlr.TerminalNode | null;
    public QUESTION_MARK(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.QUESTION_MARK);
    	} else {
    		return this.getToken(TrinoSqlParser.QUESTION_MARK, i);
    	}
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterZeroOrOneQuantifier) {
             listener.enterZeroOrOneQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitZeroOrOneQuantifier) {
             listener.exitZeroOrOneQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitZeroOrOneQuantifier) {
            return visitor.visitZeroOrOneQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RangeQuantifierContext extends PatternQuantifierContext {
    public _exactly?: Token | null;
    public _reluctant?: Token | null;
    public _atLeast?: Token | null;
    public _atMost?: Token | null;
    public constructor(ctx: PatternQuantifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTEGER_VALUE(): antlr.TerminalNode[];
    public INTEGER_VALUE(i: number): antlr.TerminalNode | null;
    public INTEGER_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.INTEGER_VALUE);
    	} else {
    		return this.getToken(TrinoSqlParser.INTEGER_VALUE, i);
    	}
    }
    public QUESTION_MARK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.QUESTION_MARK, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRangeQuantifier) {
             listener.enterRangeQuantifier(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRangeQuantifier) {
             listener.exitRangeQuantifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRangeQuantifier) {
            return visitor.visitRangeQuantifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdateAssignmentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.EQ, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_updateAssignment;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterUpdateAssignment) {
             listener.enterUpdateAssignment(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitUpdateAssignment) {
             listener.exitUpdateAssignment(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitUpdateAssignment) {
            return visitor.visitUpdateAssignment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_explainOption;
    }
    public override copyFrom(ctx: ExplainOptionContext): void {
        super.copyFrom(ctx);
    }
}
export class ExplainFormatContext extends ExplainOptionContext {
    public _value?: Token | null;
    public constructor(ctx: ExplainOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_FORMAT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FORMAT, 0)!;
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TEXT, 0);
    }
    public KW_GRAPHVIZ(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_GRAPHVIZ, 0);
    }
    public KW_JSON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_JSON, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterExplainFormat) {
             listener.enterExplainFormat(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitExplainFormat) {
             listener.exitExplainFormat(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitExplainFormat) {
            return visitor.visitExplainFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainTypeContext extends ExplainOptionContext {
    public _value?: Token | null;
    public constructor(ctx: ExplainOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_TYPE, 0)!;
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LOGICAL, 0);
    }
    public KW_DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DISTRIBUTED, 0);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_VALIDATE, 0);
    }
    public KW_IO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IO, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterExplainType) {
             listener.enterExplainType(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitExplainType) {
             listener.exitExplainType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitExplainType) {
            return visitor.visitExplainType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_transactionMode;
    }
    public override copyFrom(ctx: TransactionModeContext): void {
        super.copyFrom(ctx);
    }
}
export class TransactionAccessModeContext extends TransactionModeContext {
    public _accessMode?: Token | null;
    public constructor(ctx: TransactionModeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_READ(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_READ, 0)!;
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ONLY, 0);
    }
    public KW_WRITE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WRITE, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTransactionAccessMode) {
             listener.enterTransactionAccessMode(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTransactionAccessMode) {
             listener.exitTransactionAccessMode(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTransactionAccessMode) {
            return visitor.visitTransactionAccessMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IsolationLevelContext extends TransactionModeContext {
    public constructor(ctx: TransactionModeContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ISOLATION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ISOLATION, 0)!;
    }
    public KW_LEVEL(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_LEVEL, 0)!;
    }
    public levelOfIsolation(): LevelOfIsolationContext {
        return this.getRuleContext(0, LevelOfIsolationContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterIsolationLevel) {
             listener.enterIsolationLevel(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitIsolationLevel) {
             listener.exitIsolationLevel(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitIsolationLevel) {
            return visitor.visitIsolationLevel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LevelOfIsolationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_levelOfIsolation;
    }
    public override copyFrom(ctx: LevelOfIsolationContext): void {
        super.copyFrom(ctx);
    }
}
export class ReadUncommittedContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_READ(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_READ, 0)!;
    }
    public KW_UNCOMMITTED(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_UNCOMMITTED, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterReadUncommitted) {
             listener.enterReadUncommitted(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitReadUncommitted) {
             listener.exitReadUncommitted(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitReadUncommitted) {
            return visitor.visitReadUncommitted(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SerializableContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SERIALIZABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SERIALIZABLE, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSerializable) {
             listener.enterSerializable(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSerializable) {
             listener.exitSerializable(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSerializable) {
            return visitor.visitSerializable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReadCommittedContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_READ(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_READ, 0)!;
    }
    public KW_COMMITTED(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COMMITTED, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterReadCommitted) {
             listener.enterReadCommitted(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitReadCommitted) {
             listener.exitReadCommitted(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitReadCommitted) {
            return visitor.visitReadCommitted(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RepeatableReadContext extends LevelOfIsolationContext {
    public constructor(ctx: LevelOfIsolationContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REPEATABLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_REPEATABLE, 0)!;
    }
    public KW_READ(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_READ, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRepeatableRead) {
             listener.enterRepeatableRead(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRepeatableRead) {
             listener.exitRepeatableRead(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRepeatableRead) {
            return visitor.visitRepeatableRead(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CallArgumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_callArgument;
    }
    public override copyFrom(ctx: CallArgumentContext): void {
        super.copyFrom(ctx);
    }
}
export class PositionalArgumentContext extends CallArgumentContext {
    public constructor(ctx: CallArgumentContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPositionalArgument) {
             listener.enterPositionalArgument(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPositionalArgument) {
             listener.exitPositionalArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPositionalArgument) {
            return visitor.visitPositionalArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NamedArgumentContext extends CallArgumentContext {
    public constructor(ctx: CallArgumentContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterNamedArgument) {
             listener.enterNamedArgument(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitNamedArgument) {
             listener.exitNamedArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitNamedArgument) {
            return visitor.visitNamedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_pathElement;
    }
    public override copyFrom(ctx: PathElementContext): void {
        super.copyFrom(ctx);
    }
}
export class QualifiedArgumentContext extends PathElementContext {
    public constructor(ctx: PathElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterQualifiedArgument) {
             listener.enterQualifiedArgument(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitQualifiedArgument) {
             listener.exitQualifiedArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitQualifiedArgument) {
            return visitor.visitQualifiedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnqualifiedArgumentContext extends PathElementContext {
    public constructor(ctx: PathElementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterUnqualifiedArgument) {
             listener.enterUnqualifiedArgument(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitUnqualifiedArgument) {
             listener.exitUnqualifiedArgument(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitUnqualifiedArgument) {
            return visitor.visitUnqualifiedArgument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathElement(): PathElementContext[];
    public pathElement(i: number): PathElementContext | null;
    public pathElement(i?: number): PathElementContext[] | PathElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PathElementContext);
        }

        return this.getRuleContext(i, PathElementContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_pathSpecification;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPathSpecification) {
             listener.enterPathSpecification(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPathSpecification) {
             listener.exitPathSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPathSpecification) {
            return visitor.visitPathSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionSpecificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FUNCTION, 0)!;
    }
    public functionDeclaration(): FunctionDeclarationContext {
        return this.getRuleContext(0, FunctionDeclarationContext)!;
    }
    public returnsClause(): ReturnsClauseContext {
        return this.getRuleContext(0, ReturnsClauseContext)!;
    }
    public controlStatement(): ControlStatementContext {
        return this.getRuleContext(0, ControlStatementContext)!;
    }
    public routineCharacteristic(): RoutineCharacteristicContext[];
    public routineCharacteristic(i: number): RoutineCharacteristicContext | null;
    public routineCharacteristic(i?: number): RoutineCharacteristicContext[] | RoutineCharacteristicContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoutineCharacteristicContext);
        }

        return this.getRuleContext(i, RoutineCharacteristicContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_functionSpecification;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterFunctionSpecification) {
             listener.enterFunctionSpecification(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitFunctionSpecification) {
             listener.exitFunctionSpecification(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitFunctionSpecification) {
            return visitor.visitFunctionSpecification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionNameCreate(): FunctionNameCreateContext {
        return this.getRuleContext(0, FunctionNameCreateContext)!;
    }
    public parameterDeclaration(): ParameterDeclarationContext[];
    public parameterDeclaration(i: number): ParameterDeclarationContext | null;
    public parameterDeclaration(i?: number): ParameterDeclarationContext[] | ParameterDeclarationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ParameterDeclarationContext);
        }

        return this.getRuleContext(i, ParameterDeclarationContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_functionDeclaration;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterFunctionDeclaration) {
             listener.enterFunctionDeclaration(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitFunctionDeclaration) {
             listener.exitFunctionDeclaration(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitFunctionDeclaration) {
            return visitor.visitFunctionDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionSignatureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionName(): FunctionNameContext {
        return this.getRuleContext(0, FunctionNameContext)!;
    }
    public parameterDeclaration(): ParameterDeclarationContext[];
    public parameterDeclaration(i: number): ParameterDeclarationContext | null;
    public parameterDeclaration(i?: number): ParameterDeclarationContext[] | ParameterDeclarationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ParameterDeclarationContext);
        }

        return this.getRuleContext(i, ParameterDeclarationContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_functionSignature;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterFunctionSignature) {
             listener.enterFunctionSignature(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitFunctionSignature) {
             listener.exitFunctionSignature(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitFunctionSignature) {
            return visitor.visitFunctionSignature(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ParameterDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_parameterDeclaration;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterParameterDeclaration) {
             listener.enterParameterDeclaration(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitParameterDeclaration) {
             listener.exitParameterDeclaration(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitParameterDeclaration) {
            return visitor.visitParameterDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReturnsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RETURNS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_RETURNS, 0)!;
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_returnsClause;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterReturnsClause) {
             listener.enterReturnsClause(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitReturnsClause) {
             listener.exitReturnsClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitReturnsClause) {
            return visitor.visitReturnsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoutineCharacteristicContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_routineCharacteristic;
    }
    public override copyFrom(ctx: RoutineCharacteristicContext): void {
        super.copyFrom(ctx);
    }
}
export class ReturnsNullOnNullInputCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_RETURNS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_RETURNS, 0)!;
    }
    public KW_NULL(): antlr.TerminalNode[];
    public KW_NULL(i: number): antlr.TerminalNode | null;
    public KW_NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_NULL);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_NULL, i);
    	}
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ON, 0)!;
    }
    public KW_INPUT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_INPUT, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterReturnsNullOnNullInputCharacteristic) {
             listener.enterReturnsNullOnNullInputCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitReturnsNullOnNullInputCharacteristic) {
             listener.exitReturnsNullOnNullInputCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitReturnsNullOnNullInputCharacteristic) {
            return visitor.visitReturnsNullOnNullInputCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SecurityCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SECURITY(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SECURITY, 0)!;
    }
    public KW_DEFINER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DEFINER, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INVOKER, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSecurityCharacteristic) {
             listener.enterSecurityCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSecurityCharacteristic) {
             listener.exitSecurityCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSecurityCharacteristic) {
            return visitor.visitSecurityCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CalledOnNullInputCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CALLED(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CALLED, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ON, 0)!;
    }
    public KW_NULL(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_NULL, 0)!;
    }
    public KW_INPUT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_INPUT, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCalledOnNullInputCharacteristic) {
             listener.enterCalledOnNullInputCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCalledOnNullInputCharacteristic) {
             listener.exitCalledOnNullInputCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCalledOnNullInputCharacteristic) {
            return visitor.visitCalledOnNullInputCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CommentCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_COMMENT, 0)!;
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCommentCharacteristic) {
             listener.enterCommentCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCommentCharacteristic) {
             listener.exitCommentCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCommentCharacteristic) {
            return visitor.visitCommentCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LanguageCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_LANGUAGE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_LANGUAGE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterLanguageCharacteristic) {
             listener.enterLanguageCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitLanguageCharacteristic) {
             listener.exitLanguageCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitLanguageCharacteristic) {
            return visitor.visitLanguageCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DeterministicCharacteristicContext extends RoutineCharacteristicContext {
    public constructor(ctx: RoutineCharacteristicContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_DETERMINISTIC(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DETERMINISTIC, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDeterministicCharacteristic) {
             listener.enterDeterministicCharacteristic(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDeterministicCharacteristic) {
             listener.exitDeterministicCharacteristic(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDeterministicCharacteristic) {
            return visitor.visitDeterministicCharacteristic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ControlStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_controlStatement;
    }
    public override copyFrom(ctx: ControlStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class WhileStatementContext extends ControlStatementContext {
    public _label?: IdentifierContext;
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_WHILE(): antlr.TerminalNode[];
    public KW_WHILE(i: number): antlr.TerminalNode | null;
    public KW_WHILE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_WHILE);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_WHILE, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_DO(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DO, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_END, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterWhileStatement) {
             listener.enterWhileStatement(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitWhileStatement) {
             listener.exitWhileStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitWhileStatement) {
            return visitor.visitWhileStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SimpleCaseStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CASE(): antlr.TerminalNode[];
    public KW_CASE(i: number): antlr.TerminalNode | null;
    public KW_CASE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_CASE);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_CASE, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_END, 0)!;
    }
    public caseStatementWhenClause(): CaseStatementWhenClauseContext[];
    public caseStatementWhenClause(i: number): CaseStatementWhenClauseContext | null;
    public caseStatementWhenClause(i?: number): CaseStatementWhenClauseContext[] | CaseStatementWhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CaseStatementWhenClauseContext);
        }

        return this.getRuleContext(i, CaseStatementWhenClauseContext);
    }
    public elseClause(): ElseClauseContext | null {
        return this.getRuleContext(0, ElseClauseContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSimpleCaseStatement) {
             listener.enterSimpleCaseStatement(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSimpleCaseStatement) {
             listener.exitSimpleCaseStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSimpleCaseStatement) {
            return visitor.visitSimpleCaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RepeatStatementContext extends ControlStatementContext {
    public _label?: IdentifierContext;
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_REPEAT(): antlr.TerminalNode[];
    public KW_REPEAT(i: number): antlr.TerminalNode | null;
    public KW_REPEAT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_REPEAT);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_REPEAT, i);
    	}
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public KW_UNTIL(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_UNTIL, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_END, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRepeatStatement) {
             listener.enterRepeatStatement(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRepeatStatement) {
             listener.exitRepeatStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRepeatStatement) {
            return visitor.visitRepeatStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AssignmentStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_SET, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.EQ, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterAssignmentStatement) {
             listener.enterAssignmentStatement(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitAssignmentStatement) {
             listener.exitAssignmentStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitAssignmentStatement) {
            return visitor.visitAssignmentStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LeaveStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_LEAVE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_LEAVE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterLeaveStatement) {
             listener.enterLeaveStatement(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitLeaveStatement) {
             listener.exitLeaveStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitLeaveStatement) {
            return visitor.visitLeaveStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CompoundStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_BEGIN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_BEGIN, 0)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_END, 0)!;
    }
    public variableDeclaration(): VariableDeclarationContext[];
    public variableDeclaration(i: number): VariableDeclarationContext | null;
    public variableDeclaration(i?: number): VariableDeclarationContext[] | VariableDeclarationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(VariableDeclarationContext);
        }

        return this.getRuleContext(i, VariableDeclarationContext);
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.SEMICOLON);
    	} else {
    		return this.getToken(TrinoSqlParser.SEMICOLON, i);
    	}
    }
    public sqlStatementList(): SqlStatementListContext | null {
        return this.getRuleContext(0, SqlStatementListContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCompoundStatement) {
             listener.enterCompoundStatement(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCompoundStatement) {
             listener.exitCompoundStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCompoundStatement) {
            return visitor.visitCompoundStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IterateStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ITERATE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ITERATE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterIterateStatement) {
             listener.enterIterateStatement(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitIterateStatement) {
             listener.exitIterateStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitIterateStatement) {
            return visitor.visitIterateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LoopStatementContext extends ControlStatementContext {
    public _label?: IdentifierContext;
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_LOOP(): antlr.TerminalNode[];
    public KW_LOOP(i: number): antlr.TerminalNode | null;
    public KW_LOOP(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_LOOP);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_LOOP, i);
    	}
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_END, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterLoopStatement) {
             listener.enterLoopStatement(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitLoopStatement) {
             listener.exitLoopStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitLoopStatement) {
            return visitor.visitLoopStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ReturnStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_RETURN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_RETURN, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterReturnStatement) {
             listener.enterReturnStatement(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitReturnStatement) {
             listener.exitReturnStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitReturnStatement) {
            return visitor.visitReturnStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IfStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_IF(): antlr.TerminalNode[];
    public KW_IF(i: number): antlr.TerminalNode | null;
    public KW_IF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_IF);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_IF, i);
    	}
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_THEN, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_END, 0)!;
    }
    public elseIfClause(): ElseIfClauseContext[];
    public elseIfClause(i: number): ElseIfClauseContext | null;
    public elseIfClause(i?: number): ElseIfClauseContext[] | ElseIfClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ElseIfClauseContext);
        }

        return this.getRuleContext(i, ElseIfClauseContext);
    }
    public elseClause(): ElseClauseContext | null {
        return this.getRuleContext(0, ElseClauseContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterIfStatement) {
             listener.enterIfStatement(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitIfStatement) {
             listener.exitIfStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitIfStatement) {
            return visitor.visitIfStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SearchedCaseStatementContext extends ControlStatementContext {
    public constructor(ctx: ControlStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CASE(): antlr.TerminalNode[];
    public KW_CASE(i: number): antlr.TerminalNode | null;
    public KW_CASE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.KW_CASE);
    	} else {
    		return this.getToken(TrinoSqlParser.KW_CASE, i);
    	}
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_END, 0)!;
    }
    public caseStatementWhenClause(): CaseStatementWhenClauseContext[];
    public caseStatementWhenClause(i: number): CaseStatementWhenClauseContext | null;
    public caseStatementWhenClause(i?: number): CaseStatementWhenClauseContext[] | CaseStatementWhenClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CaseStatementWhenClauseContext);
        }

        return this.getRuleContext(i, CaseStatementWhenClauseContext);
    }
    public elseClause(): ElseClauseContext | null {
        return this.getRuleContext(0, ElseClauseContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSearchedCaseStatement) {
             listener.enterSearchedCaseStatement(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSearchedCaseStatement) {
             listener.exitSearchedCaseStatement(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSearchedCaseStatement) {
            return visitor.visitSearchedCaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseStatementWhenClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_WHEN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_THEN, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_caseStatementWhenClause;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCaseStatementWhenClause) {
             listener.enterCaseStatementWhenClause(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCaseStatementWhenClause) {
             listener.exitCaseStatementWhenClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCaseStatementWhenClause) {
            return visitor.visitCaseStatementWhenClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElseIfClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ELSEIF(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ELSEIF, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_THEN, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_elseIfClause;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterElseIfClause) {
             listener.enterElseIfClause(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitElseIfClause) {
             listener.exitElseIfClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitElseIfClause) {
            return visitor.visitElseIfClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ElseClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ELSE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ELSE, 0)!;
    }
    public sqlStatementList(): SqlStatementListContext {
        return this.getRuleContext(0, SqlStatementListContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_elseClause;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterElseClause) {
             listener.enterElseClause(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitElseClause) {
             listener.exitElseClause(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitElseClause) {
            return visitor.visitElseClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableDeclarationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DECLARE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_DECLARE, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public type(): TypeContext {
        return this.getRuleContext(0, TypeContext)!;
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DEFAULT, 0);
    }
    public valueExpression(): ValueExpressionContext | null {
        return this.getRuleContext(0, ValueExpressionContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_variableDeclaration;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterVariableDeclaration) {
             listener.enterVariableDeclaration(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitVariableDeclaration) {
             listener.exitVariableDeclaration(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitVariableDeclaration) {
            return visitor.visitVariableDeclaration(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlStatementListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public controlStatement(): ControlStatementContext[];
    public controlStatement(i: number): ControlStatementContext | null;
    public controlStatement(i?: number): ControlStatementContext[] | ControlStatementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ControlStatementContext);
        }

        return this.getRuleContext(i, ControlStatementContext);
    }
    public SEMICOLON(): antlr.TerminalNode[];
    public SEMICOLON(i: number): antlr.TerminalNode | null;
    public SEMICOLON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(TrinoSqlParser.SEMICOLON);
    	} else {
    		return this.getToken(TrinoSqlParser.SEMICOLON, i);
    	}
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_sqlStatementList;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSqlStatementList) {
             listener.enterSqlStatementList(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSqlStatementList) {
             listener.exitSqlStatementList(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSqlStatementList) {
            return visitor.visitSqlStatementList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CREATE, 0);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SELECT, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DELETE, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INSERT, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UPDATE, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_privilege;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPrivilege) {
             listener.enterPrivilege(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPrivilege) {
             listener.exitPrivilege(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPrivilege) {
            return visitor.visitPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EntityKindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TABLE, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SCHEMA, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_entityKind;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterEntityKind) {
             listener.enterEntityKind(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitEntityKind) {
             listener.exitEntityKind(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitEntityKind) {
            return visitor.visitEntityKind(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantObjectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public entityKind(): EntityKindContext | null {
        return this.getRuleContext(0, EntityKindContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_grantObject;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterGrantObject) {
             listener.enterGrantObject(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitGrantObject) {
             listener.exitGrantObject(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitGrantObject) {
            return visitor.visitGrantObject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableOrViewNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableRef(): TableRefContext | null {
        return this.getRuleContext(0, TableRefContext);
    }
    public viewRef(): ViewRefContext | null {
        return this.getRuleContext(0, ViewRefContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_tableOrViewName;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTableOrViewName) {
             listener.enterTableOrViewName(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTableOrViewName) {
             listener.exitTableOrViewName(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTableOrViewName) {
            return visitor.visitTableOrViewName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableRefContext extends antlr.ParserRuleContext {
    public _table?: IdentifierContext;
    public _schema?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_tableRef;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTableRef) {
             listener.enterTableRef(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTableRef) {
             listener.exitTableRef(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTableRef) {
            return visitor.visitTableRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableNameCreateContext extends antlr.ParserRuleContext {
    public _table?: IdentifierContext;
    public _schema?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_tableNameCreate;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterTableNameCreate) {
             listener.enterTableNameCreate(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitTableNameCreate) {
             listener.exitTableNameCreate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitTableNameCreate) {
            return visitor.visitTableNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewRefContext extends antlr.ParserRuleContext {
    public _view?: IdentifierContext;
    public _schema?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_viewRef;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterViewRef) {
             listener.enterViewRef(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitViewRef) {
             listener.exitViewRef(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitViewRef) {
            return visitor.visitViewRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewNameCreateContext extends antlr.ParserRuleContext {
    public _view?: IdentifierContext;
    public _schema?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_viewNameCreate;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterViewNameCreate) {
             listener.enterViewNameCreate(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitViewNameCreate) {
             listener.exitViewNameCreate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitViewNameCreate) {
            return visitor.visitViewNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaRefContext extends antlr.ParserRuleContext {
    public _schema?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_schemaRef;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSchemaRef) {
             listener.enterSchemaRef(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSchemaRef) {
             listener.exitSchemaRef(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSchemaRef) {
            return visitor.visitSchemaRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SchemaNameCreateContext extends antlr.ParserRuleContext {
    public _schema?: IdentifierContext;
    public _catalog?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_schemaNameCreate;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSchemaNameCreate) {
             listener.enterSchemaNameCreate(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSchemaNameCreate) {
             listener.exitSchemaNameCreate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSchemaNameCreate) {
            return visitor.visitSchemaNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CatalogRefContext extends antlr.ParserRuleContext {
    public _catalog?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_catalogRef;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCatalogRef) {
             listener.enterCatalogRef(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCatalogRef) {
             listener.exitCatalogRef(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCatalogRef) {
            return visitor.visitCatalogRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CatalogNameCreateContext extends antlr.ParserRuleContext {
    public _catalog?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_catalogNameCreate;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCatalogNameCreate) {
             listener.enterCatalogNameCreate(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCatalogNameCreate) {
             listener.exitCatalogNameCreate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCatalogNameCreate) {
            return visitor.visitCatalogNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_functionName;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterFunctionName) {
             listener.enterFunctionName(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitFunctionName) {
             listener.exitFunctionName(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitFunctionName) {
            return visitor.visitFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_functionNameCreate;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterFunctionNameCreate) {
             listener.enterFunctionNameCreate(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitFunctionNameCreate) {
             listener.exitFunctionNameCreate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameCreate) {
            return visitor.visitFunctionNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnRefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_columnRef;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterColumnRef) {
             listener.enterColumnRef(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitColumnRef) {
             listener.exitColumnRef(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitColumnRef) {
            return visitor.visitColumnRef(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_columnName;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterColumnName) {
             listener.enterColumnName(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitColumnName) {
             listener.exitColumnName(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitColumnName) {
            return visitor.visitColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnNameCreateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_columnNameCreate;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterColumnNameCreate) {
             listener.enterColumnNameCreate(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitColumnNameCreate) {
             listener.exitColumnNameCreate(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitColumnNameCreate) {
            return visitor.visitColumnNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_qualifiedName;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterQualifiedName) {
             listener.enterQualifiedName(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitQualifiedName) {
             listener.exitQualifiedName(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitQualifiedName) {
            return visitor.visitQualifiedName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryPeriodContext extends antlr.ParserRuleContext {
    public _end?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_FOR, 0)!;
    }
    public rangeType(): RangeTypeContext {
        return this.getRuleContext(0, RangeTypeContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_AS, 0)!;
    }
    public KW_OF(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_OF, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_queryPeriod;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterQueryPeriod) {
             listener.enterQueryPeriod(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitQueryPeriod) {
             listener.exitQueryPeriod(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitQueryPeriod) {
            return visitor.visitQueryPeriod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RangeTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_VERSION, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_rangeType;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRangeType) {
             listener.enterRangeType(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRangeType) {
             listener.exitRangeType(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRangeType) {
            return visitor.visitRangeType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_grantor;
    }
    public override copyFrom(ctx: GrantorContext): void {
        super.copyFrom(ctx);
    }
}
export class CurrentUserGrantorContext extends GrantorContext {
    public constructor(ctx: GrantorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CURRENT_USER, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCurrentUserGrantor) {
             listener.enterCurrentUserGrantor(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCurrentUserGrantor) {
             listener.exitCurrentUserGrantor(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCurrentUserGrantor) {
            return visitor.visitCurrentUserGrantor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SpecifiedPrincipalContext extends GrantorContext {
    public constructor(ctx: GrantorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public principal(): PrincipalContext {
        return this.getRuleContext(0, PrincipalContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterSpecifiedPrincipal) {
             listener.enterSpecifiedPrincipal(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitSpecifiedPrincipal) {
             listener.exitSpecifiedPrincipal(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitSpecifiedPrincipal) {
            return visitor.visitSpecifiedPrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CurrentRoleGrantorContext extends GrantorContext {
    public constructor(ctx: GrantorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CURRENT_ROLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_CURRENT_ROLE, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterCurrentRoleGrantor) {
             listener.enterCurrentRoleGrantor(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitCurrentRoleGrantor) {
             listener.exitCurrentRoleGrantor(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitCurrentRoleGrantor) {
            return visitor.visitCurrentRoleGrantor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrincipalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_principal;
    }
    public override copyFrom(ctx: PrincipalContext): void {
        super.copyFrom(ctx);
    }
}
export class UnspecifiedPrincipalContext extends PrincipalContext {
    public constructor(ctx: PrincipalContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterUnspecifiedPrincipal) {
             listener.enterUnspecifiedPrincipal(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitUnspecifiedPrincipal) {
             listener.exitUnspecifiedPrincipal(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitUnspecifiedPrincipal) {
            return visitor.visitUnspecifiedPrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UserPrincipalContext extends PrincipalContext {
    public constructor(ctx: PrincipalContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_USER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_USER, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterUserPrincipal) {
             listener.enterUserPrincipal(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitUserPrincipal) {
             listener.exitUserPrincipal(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitUserPrincipal) {
            return visitor.visitUserPrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class RolePrincipalContext extends PrincipalContext {
    public constructor(ctx: PrincipalContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.KW_ROLE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRolePrincipal) {
             listener.enterRolePrincipal(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRolePrincipal) {
             listener.exitRolePrincipal(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRolePrincipal) {
            return visitor.visitRolePrincipal(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RolesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_roles;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterRoles) {
             listener.enterRoles(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitRoles) {
             listener.exitRoles(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitRoles) {
            return visitor.visitRoles(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeOrRoleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CREATE, 0);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SELECT, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DELETE, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INSERT, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UPDATE, 0);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXECUTE, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_privilegeOrRole;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterPrivilegeOrRole) {
             listener.enterPrivilegeOrRole(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitPrivilegeOrRole) {
             listener.exitPrivilegeOrRole(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeOrRole) {
            return visitor.visitPrivilegeOrRole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_identifier;
    }
    public override copyFrom(ctx: IdentifierContext): void {
        super.copyFrom(ctx);
    }
}
export class BackQuotedIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BACKQUOTED_IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.BACKQUOTED_IDENTIFIER, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterBackQuotedIdentifier) {
             listener.enterBackQuotedIdentifier(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitBackQuotedIdentifier) {
             listener.exitBackQuotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitBackQuotedIdentifier) {
            return visitor.visitBackQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QuotedIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public QUOTED_IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.QUOTED_IDENTIFIER, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterQuotedIdentifier) {
             listener.enterQuotedIdentifier(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitQuotedIdentifier) {
             listener.exitQuotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitQuotedIdentifier) {
            return visitor.visitQuotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DigitIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DIGIT_IDENTIFIER(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.DIGIT_IDENTIFIER, 0)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDigitIdentifier) {
             listener.enterDigitIdentifier(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDigitIdentifier) {
             listener.exitDigitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDigitIdentifier) {
            return visitor.visitDigitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class UnquotedIdentifierContext extends IdentifierContext {
    public constructor(ctx: IdentifierContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.IDENTIFIER, 0);
    }
    public nonReserved(): NonReservedContext | null {
        return this.getRuleContext(0, NonReservedContext);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterUnquotedIdentifier) {
             listener.enterUnquotedIdentifier(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitUnquotedIdentifier) {
             listener.exitUnquotedIdentifier(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitUnquotedIdentifier) {
            return visitor.visitUnquotedIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_number;
    }
    public override copyFrom(ctx: NumberContext): void {
        super.copyFrom(ctx);
    }
}
export class DecimalLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DECIMAL_VALUE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.DECIMAL_VALUE, 0)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.MINUS, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDecimalLiteral) {
             listener.enterDecimalLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDecimalLiteral) {
             listener.exitDecimalLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDecimalLiteral) {
            return visitor.visitDecimalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DoubleLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOUBLE_VALUE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.DOUBLE_VALUE, 0)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.MINUS, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterDoubleLiteral) {
             listener.enterDoubleLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitDoubleLiteral) {
             listener.exitDoubleLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitDoubleLiteral) {
            return visitor.visitDoubleLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IntegerLiteralContext extends NumberContext {
    public constructor(ctx: NumberContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTEGER_VALUE(): antlr.TerminalNode {
        return this.getToken(TrinoSqlParser.INTEGER_VALUE, 0)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.MINUS, 0);
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterIntegerLiteral) {
             listener.enterIntegerLiteral(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitIntegerLiteral) {
             listener.exitIntegerLiteral(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitIntegerLiteral) {
            return visitor.visitIntegerLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AuthorizationUserContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_authorizationUser;
    }
    public override copyFrom(ctx: AuthorizationUserContext): void {
        super.copyFrom(ctx);
    }
}
export class StringUserContext extends AuthorizationUserContext {
    public constructor(ctx: AuthorizationUserContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public string(): StringContext {
        return this.getRuleContext(0, StringContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterStringUser) {
             listener.enterStringUser(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitStringUser) {
             listener.exitStringUser(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitStringUser) {
            return visitor.visitStringUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IdentifierUserContext extends AuthorizationUserContext {
    public constructor(ctx: AuthorizationUserContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterIdentifierUser) {
             listener.enterIdentifierUser(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitIdentifierUser) {
             listener.exitIdentifierUser(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitIdentifierUser) {
            return visitor.visitIdentifierUser(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonReservedContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ABSENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ABSENT, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ADD, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ADMIN, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AFTER, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ALL, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ANALYZE, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ANY, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ARRAY, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ASC, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AT, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_BEGIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_BEGIN, 0);
    }
    public KW_BERNOULLI(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_BERNOULLI, 0);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_BOTH, 0);
    }
    public KW_CALL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CALL, 0);
    }
    public KW_CALLED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CALLED, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CASCADE, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CATALOG, 0);
    }
    public KW_CATALOGS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CATALOGS, 0);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_COLUMN, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_COLUMNS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_COMMENT, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_COMMIT, 0);
    }
    public KW_COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_COMMITTED, 0);
    }
    public KW_CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CONDITIONAL, 0);
    }
    public KW_COPARTITION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_COPARTITION, 0);
    }
    public KW_COUNT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_COUNT, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_CURRENT, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DATA, 0);
    }
    public KW_DATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DATE, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DAY, 0);
    }
    public KW_DECLARE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DECLARE, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DEFAULT, 0);
    }
    public KW_DEFINE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DEFINE, 0);
    }
    public KW_DEFINER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DEFINER, 0);
    }
    public KW_DENY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DENY, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DESC, 0);
    }
    public KW_DESCRIPTOR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DESCRIPTOR, 0);
    }
    public KW_DETERMINISTIC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DETERMINISTIC, 0);
    }
    public KW_DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DISTRIBUTED, 0);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DO, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_DOUBLE, 0);
    }
    public KW_ELSEIF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ELSEIF, 0);
    }
    public KW_EMPTY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EMPTY, 0);
    }
    public KW_ENCODING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ENCODING, 0);
    }
    public KW_ERROR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ERROR, 0);
    }
    public KW_EXCLUDING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXCLUDING, 0);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_EXPLAIN, 0);
    }
    public KW_FETCH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FETCH, 0);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FILTER, 0);
    }
    public KW_FINAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FINAL, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FIRST, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FOLLOWING, 0);
    }
    public KW_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FORMAT, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FUNCTION, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_GRACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_GRACE, 0);
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_GRANT, 0);
    }
    public KW_GRANTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_GRANTED, 0);
    }
    public KW_GRANTS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_GRANTS, 0);
    }
    public KW_GRAPHVIZ(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_GRAPHVIZ, 0);
    }
    public KW_GROUPS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_GROUPS, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_HOUR, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IF, 0);
    }
    public KW_IGNORE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IGNORE, 0);
    }
    public KW_IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IMMEDIATE, 0);
    }
    public KW_INCLUDING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INCLUDING, 0);
    }
    public KW_INITIAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INITIAL, 0);
    }
    public KW_INPUT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INPUT, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INTERVAL, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_INVOKER, 0);
    }
    public KW_IO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_IO, 0);
    }
    public KW_ITERATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ITERATE, 0);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ISOLATION, 0);
    }
    public KW_JSON(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_JSON, 0);
    }
    public KW_KEEP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_KEEP, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_KEY, 0);
    }
    public KW_KEYS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_KEYS, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LANGUAGE, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LAST, 0);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LATERAL, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LEADING, 0);
    }
    public KW_LEAVE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LEAVE, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LEVEL, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LIMIT, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LOCAL, 0);
    }
    public KW_LOGICAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LOGICAL, 0);
    }
    public KW_LOOP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_LOOP, 0);
    }
    public KW_MAP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MAP, 0);
    }
    public KW_MATCH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MATCH, 0);
    }
    public KW_MATCHED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MATCHED, 0);
    }
    public KW_MATCHES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MATCHES, 0);
    }
    public KW_MATCH_RECOGNIZE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MATCH_RECOGNIZE, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_MEASURES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MEASURES, 0);
    }
    public KW_MERGE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MERGE, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MINUTE, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_MONTH, 0);
    }
    public KW_NESTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NESTED, 0);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NEXT, 0);
    }
    public KW_NFC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NFC, 0);
    }
    public KW_NFD(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NFD, 0);
    }
    public KW_NFKC(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NFKC, 0);
    }
    public KW_NFKD(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NFKD, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NO, 0);
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NONE, 0);
    }
    public KW_NULLIF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NULLIF, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_NULLS, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OBJECT, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OF, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OFFSET, 0);
    }
    public KW_OMIT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OMIT, 0);
    }
    public KW_ONE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ONE, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ONLY, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OPTION, 0);
    }
    public KW_ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ORDINALITY, 0);
    }
    public KW_OUTPUT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OUTPUT, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OVER, 0);
    }
    public KW_OVERFLOW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_OVERFLOW, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PARTITION, 0);
    }
    public KW_PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PARTITIONS, 0);
    }
    public KW_PASSING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PASSING, 0);
    }
    public KW_PAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PAST, 0);
    }
    public KW_PATH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PATH, 0);
    }
    public KW_PATTERN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PATTERN, 0);
    }
    public KW_PER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PER, 0);
    }
    public KW_PERIOD(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PERIOD, 0);
    }
    public KW_PERMUTE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PERMUTE, 0);
    }
    public KW_PLAN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PLAN, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_POSITION, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PRECEDING, 0);
    }
    public KW_PRECISION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PRECISION, 0);
    }
    public KW_PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PRIVILEGES, 0);
    }
    public KW_PROPERTIES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PROPERTIES, 0);
    }
    public KW_PRUNE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_PRUNE, 0);
    }
    public KW_QUOTES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_QUOTES, 0);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RANGE, 0);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_READ, 0);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_REFRESH, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RENAME, 0);
    }
    public KW_REPEAT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_REPEAT, 0);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_REPEATABLE, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_REPLACE, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RESET, 0);
    }
    public KW_RESPECT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RESPECT, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RESTRICT, 0);
    }
    public KW_RETURN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RETURN, 0);
    }
    public KW_RETURNING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RETURNING, 0);
    }
    public KW_RETURNS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RETURNS, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_REVOKE, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ROLE, 0);
    }
    public KW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ROLES, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ROLLBACK, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ROW, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ROWS, 0);
    }
    public KW_RUNNING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_RUNNING, 0);
    }
    public KW_SCALAR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SCALAR, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SCHEMAS, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SECOND, 0);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SECURITY, 0);
    }
    public KW_SEEK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SEEK, 0);
    }
    public KW_SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SERIALIZABLE, 0);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SESSION, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SET, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SETS, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SHOW, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SOME, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_START, 0);
    }
    public KW_STATS(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_STATS, 0);
    }
    public KW_SUBSET(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SUBSET, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SUBSTRING, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_SYSTEM, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TABLES, 0);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TABLESAMPLE, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TEXT, 0);
    }
    public KW_TEXT_STRING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TEXT_STRING, 0);
    }
    public KW_TIES(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TIES, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TIME, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TO, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TRAILING, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TRANSACTION, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TRUNCATE, 0);
    }
    public KW_TRY_CAST(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TRY_CAST, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_TYPE, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UNBOUNDED, 0);
    }
    public KW_UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UNCOMMITTED, 0);
    }
    public KW_UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UNCONDITIONAL, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UNIQUE, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UNKNOWN, 0);
    }
    public KW_UNMATCHED(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UNMATCHED, 0);
    }
    public KW_UNTIL(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UNTIL, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UPDATE, 0);
    }
    public KW_USE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_USE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_USER, 0);
    }
    public KW_UTF16(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UTF16, 0);
    }
    public KW_UTF32(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UTF32, 0);
    }
    public KW_UTF8(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_UTF8, 0);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_VALIDATE, 0);
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_VALUE, 0);
    }
    public KW_VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_VERBOSE, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_VERSION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_VIEW, 0);
    }
    public KW_WHILE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WHILE, 0);
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WINDOW, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITHIN, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WITHOUT, 0);
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WORK, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WRAPPER, 0);
    }
    public KW_WRITE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_WRITE, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_YEAR, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(TrinoSqlParser.KW_ZONE, 0);
    }
    public override get ruleIndex(): number {
        return TrinoSqlParser.RULE_nonReserved;
    }
    public override enterRule(listener: TrinoSqlListener): void {
        if(listener.enterNonReserved) {
             listener.enterNonReserved(this);
        }
    }
    public override exitRule(listener: TrinoSqlListener): void {
        if(listener.exitNonReserved) {
             listener.exitNonReserved(this);
        }
    }
    public override accept<Result>(visitor: TrinoSqlVisitor<Result>): Result | null {
        if (visitor.visitNonReserved) {
            return visitor.visitNonReserved(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
