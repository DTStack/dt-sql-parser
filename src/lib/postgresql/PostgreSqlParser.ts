// Generated from dt-sql-parser/src/grammar/postgresql/PostgreSqlParser.g4 by ANTLR 4.13.1

// @ts-nocheck

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { PostgreSqlParserListener } from "./PostgreSqlParserListener.js";
import { PostgreSqlParserVisitor } from "./PostgreSqlParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


import { SQLParserBase } from '../SQLParserBase';


export class PostgreSqlParser extends SQLParserBase {
    public static readonly Dollar = 1;
    public static readonly OPEN_PAREN = 2;
    public static readonly CLOSE_PAREN = 3;
    public static readonly OPEN_BRACKET = 4;
    public static readonly CLOSE_BRACKET = 5;
    public static readonly COMMA = 6;
    public static readonly SEMI = 7;
    public static readonly COLON = 8;
    public static readonly STAR = 9;
    public static readonly EQUAL = 10;
    public static readonly DOT = 11;
    public static readonly PLUS = 12;
    public static readonly MINUS = 13;
    public static readonly SLASH = 14;
    public static readonly CARET = 15;
    public static readonly LT = 16;
    public static readonly GT = 17;
    public static readonly LESS_LESS = 18;
    public static readonly GREATER_GREATER = 19;
    public static readonly COLON_EQUALS = 20;
    public static readonly LESS_EQUALS = 21;
    public static readonly EQUALS_GREATER = 22;
    public static readonly GREATER_EQUALS = 23;
    public static readonly DOT_DOT = 24;
    public static readonly NOT_EQUALS = 25;
    public static readonly TYPECAST = 26;
    public static readonly PERCENT = 27;
    public static readonly PARAM = 28;
    public static readonly Operator = 29;
    public static readonly KW_ALL = 30;
    public static readonly KW_ANALYSE = 31;
    public static readonly KW_ANALYZE = 32;
    public static readonly KW_AND = 33;
    public static readonly KW_ANY = 34;
    public static readonly KW_ARRAY = 35;
    public static readonly KW_AS = 36;
    public static readonly KW_ASC = 37;
    public static readonly KW_ASYMMETRIC = 38;
    public static readonly KW_BOTH = 39;
    public static readonly KW_CASE = 40;
    public static readonly KW_CAST = 41;
    public static readonly KW_CHECK = 42;
    public static readonly KW_COLLATE = 43;
    public static readonly KW_COLUMN = 44;
    public static readonly KW_CONSTRAINT = 45;
    public static readonly KW_CREATE = 46;
    public static readonly KW_CURRENT_CATALOG = 47;
    public static readonly KW_CURRENT_DATE = 48;
    public static readonly KW_CURRENT_ROLE = 49;
    public static readonly KW_CURRENT_TIME = 50;
    public static readonly KW_CURRENT_TIMESTAMP = 51;
    public static readonly KW_CURRENT_USER = 52;
    public static readonly KW_DEFAULT = 53;
    public static readonly KW_DEFERRABLE = 54;
    public static readonly KW_DESC = 55;
    public static readonly KW_DISTINCT = 56;
    public static readonly KW_DO = 57;
    public static readonly KW_ELSE = 58;
    public static readonly KW_EXCEPT = 59;
    public static readonly KW_FALSE = 60;
    public static readonly KW_FETCH = 61;
    public static readonly KW_FOR = 62;
    public static readonly KW_FOREIGN = 63;
    public static readonly KW_FROM = 64;
    public static readonly KW_GRANT = 65;
    public static readonly KW_GROUP = 66;
    public static readonly KW_HAVING = 67;
    public static readonly KW_IN = 68;
    public static readonly KW_INITIALLY = 69;
    public static readonly KW_INTERSECT = 70;
    public static readonly KW_INTO = 71;
    public static readonly KW_LATERAL = 72;
    public static readonly KW_LEADING = 73;
    public static readonly KW_LIMIT = 74;
    public static readonly KW_LOCALTIME = 75;
    public static readonly KW_LOCALTIMESTAMP = 76;
    public static readonly KW_NOT = 77;
    public static readonly KW_NULL = 78;
    public static readonly KW_OFFSET = 79;
    public static readonly KW_ON = 80;
    public static readonly KW_ONLY = 81;
    public static readonly KW_OR = 82;
    public static readonly KW_ORDER = 83;
    public static readonly KW_PLACING = 84;
    public static readonly KW_PRIMARY = 85;
    public static readonly KW_REFERENCES = 86;
    public static readonly KW_RETURNING = 87;
    public static readonly KW_SELECT = 88;
    public static readonly KW_SESSION_USER = 89;
    public static readonly KW_SOME = 90;
    public static readonly KW_SYMMETRIC = 91;
    public static readonly KW_TABLE = 92;
    public static readonly KW_THEN = 93;
    public static readonly KW_TO = 94;
    public static readonly KW_TRAILING = 95;
    public static readonly KW_TRUE = 96;
    public static readonly KW_UNION = 97;
    public static readonly KW_UNIQUE = 98;
    public static readonly KW_USER = 99;
    public static readonly KW_USING = 100;
    public static readonly KW_VARIADIC = 101;
    public static readonly KW_WHEN = 102;
    public static readonly KW_WHERE = 103;
    public static readonly KW_WINDOW = 104;
    public static readonly KW_WITH = 105;
    public static readonly KW_AUTHORIZATION = 106;
    public static readonly KW_BINARY = 107;
    public static readonly KW_COLLATION = 108;
    public static readonly KW_CONCURRENTLY = 109;
    public static readonly KW_CROSS = 110;
    public static readonly KW_CURRENT_SCHEMA = 111;
    public static readonly KW_FREEZE = 112;
    public static readonly KW_FULL = 113;
    public static readonly KW_ILIKE = 114;
    public static readonly KW_INNER = 115;
    public static readonly KW_IS = 116;
    public static readonly KW_ISNULL = 117;
    public static readonly KW_JOIN = 118;
    public static readonly KW_LEFT = 119;
    public static readonly KW_LIKE = 120;
    public static readonly KW_NATURAL = 121;
    public static readonly KW_NOTNULL = 122;
    public static readonly KW_OUTER = 123;
    public static readonly KW_OVER = 124;
    public static readonly KW_OVERLAPS = 125;
    public static readonly KW_RIGHT = 126;
    public static readonly KW_SIMILAR = 127;
    public static readonly KW_VERBOSE = 128;
    public static readonly KW_ABORT = 129;
    public static readonly KW_ABSOLUTE = 130;
    public static readonly KW_ACCESS = 131;
    public static readonly KW_ACTION = 132;
    public static readonly KW_ADD = 133;
    public static readonly KW_ADMIN = 134;
    public static readonly KW_AFTER = 135;
    public static readonly KW_AGGREGATE = 136;
    public static readonly KW_ALSO = 137;
    public static readonly KW_ALTER = 138;
    public static readonly KW_ALWAYS = 139;
    public static readonly KW_ASSERTION = 140;
    public static readonly KW_ASSIGNMENT = 141;
    public static readonly KW_AT = 142;
    public static readonly KW_ATTRIBUTE = 143;
    public static readonly KW_BACKWARD = 144;
    public static readonly KW_BEFORE = 145;
    public static readonly KW_BEGIN = 146;
    public static readonly KW_BY = 147;
    public static readonly KW_CACHE = 148;
    public static readonly KW_CALLED = 149;
    public static readonly KW_CASCADE = 150;
    public static readonly KW_CASCADED = 151;
    public static readonly KW_CATALOG = 152;
    public static readonly KW_CHAIN = 153;
    public static readonly KW_CHARACTERISTICS = 154;
    public static readonly KW_CHECKPOINT = 155;
    public static readonly KW_CLASS = 156;
    public static readonly KW_CLOSE = 157;
    public static readonly KW_CLUSTER = 158;
    public static readonly KW_COMMENT = 159;
    public static readonly KW_COMMENTS = 160;
    public static readonly KW_COMMIT = 161;
    public static readonly KW_COMMITTED = 162;
    public static readonly KW_CONFIGURATION = 163;
    public static readonly KW_CONNECTION = 164;
    public static readonly KW_CONSTRAINTS = 165;
    public static readonly KW_CONTENT = 166;
    public static readonly KW_CONTINUE = 167;
    public static readonly KW_CONVERSION = 168;
    public static readonly KW_COPY = 169;
    public static readonly KW_COST = 170;
    public static readonly KW_CSV = 171;
    public static readonly KW_CURSOR = 172;
    public static readonly KW_CYCLE = 173;
    public static readonly KW_DATA = 174;
    public static readonly KW_DATABASE = 175;
    public static readonly KW_DAY = 176;
    public static readonly KW_DEALLOCATE = 177;
    public static readonly KW_DECLARE = 178;
    public static readonly KW_DEFAULTS = 179;
    public static readonly KW_DEFERRED = 180;
    public static readonly KW_DEFINER = 181;
    public static readonly KW_DELETE = 182;
    public static readonly KW_DELIMITER = 183;
    public static readonly KW_DELIMITERS = 184;
    public static readonly KW_DICTIONARY = 185;
    public static readonly KW_DISABLE = 186;
    public static readonly KW_DISCARD = 187;
    public static readonly KW_DOCUMENT = 188;
    public static readonly KW_DOMAIN = 189;
    public static readonly KW_DOUBLE = 190;
    public static readonly KW_DROP = 191;
    public static readonly KW_EACH = 192;
    public static readonly KW_ENABLE = 193;
    public static readonly KW_ENCODING = 194;
    public static readonly KW_ENCRYPTED = 195;
    public static readonly KW_ENUM = 196;
    public static readonly KW_ESCAPE = 197;
    public static readonly KW_EVENT = 198;
    public static readonly KW_EXCLUDE = 199;
    public static readonly KW_EXCLUDING = 200;
    public static readonly KW_EXCLUSIVE = 201;
    public static readonly KW_EXECUTE = 202;
    public static readonly KW_EXPLAIN = 203;
    public static readonly KW_EXTENSION = 204;
    public static readonly KW_EXTERNAL = 205;
    public static readonly KW_FAMILY = 206;
    public static readonly KW_FIRST = 207;
    public static readonly KW_FOLLOWING = 208;
    public static readonly KW_FORCE = 209;
    public static readonly KW_FORWARD = 210;
    public static readonly KW_FUNCTION = 211;
    public static readonly KW_FUNCTIONS = 212;
    public static readonly KW_GLOBAL = 213;
    public static readonly KW_GRANTED = 214;
    public static readonly KW_HANDLER = 215;
    public static readonly KW_HEADER = 216;
    public static readonly KW_HOLD = 217;
    public static readonly KW_HOUR = 218;
    public static readonly KW_IDENTITY = 219;
    public static readonly KW_IF = 220;
    public static readonly KW_IMMEDIATE = 221;
    public static readonly KW_IMMUTABLE = 222;
    public static readonly KW_IMPLICIT = 223;
    public static readonly KW_INCLUDING = 224;
    public static readonly KW_INCREMENT = 225;
    public static readonly KW_INDEX = 226;
    public static readonly KW_INDEXES = 227;
    public static readonly KW_INHERIT = 228;
    public static readonly KW_NOINHERIT = 229;
    public static readonly KW_SUPERUSER = 230;
    public static readonly KW_NOSUPERUSER = 231;
    public static readonly KW_CREATEDB = 232;
    public static readonly KW_NOCREATEDB = 233;
    public static readonly KW_CREATEROLE = 234;
    public static readonly KW_NOCREATEROLE = 235;
    public static readonly KW_CREATEUSER = 236;
    public static readonly KW_NOCREATEUSER = 237;
    public static readonly KW_INHERITS = 238;
    public static readonly KW_INLINE = 239;
    public static readonly KW_INSENSITIVE = 240;
    public static readonly KW_INSERT = 241;
    public static readonly KW_INSTEAD = 242;
    public static readonly KW_INVOKER = 243;
    public static readonly KW_ISOLATION = 244;
    public static readonly KW_KEY = 245;
    public static readonly KW_LABEL = 246;
    public static readonly KW_LANGUAGE = 247;
    public static readonly KW_LARGE = 248;
    public static readonly KW_LAST = 249;
    public static readonly KW_LEAKPROOF = 250;
    public static readonly KW_LEVEL = 251;
    public static readonly KW_LISTEN = 252;
    public static readonly KW_LOAD = 253;
    public static readonly KW_LOCAL = 254;
    public static readonly KW_LOCATION = 255;
    public static readonly KW_LOCK = 256;
    public static readonly KW_MAPPING = 257;
    public static readonly KW_MATCH = 258;
    public static readonly KW_MATERIALIZED = 259;
    public static readonly KW_MAXVALUE = 260;
    public static readonly KW_MINUTE = 261;
    public static readonly KW_MINVALUE = 262;
    public static readonly KW_MODE = 263;
    public static readonly KW_MONTH = 264;
    public static readonly KW_MOVE = 265;
    public static readonly KW_NAME = 266;
    public static readonly KW_NAMES = 267;
    public static readonly KW_NEXT = 268;
    public static readonly KW_NO = 269;
    public static readonly KW_NOTHING = 270;
    public static readonly KW_NOTIFY = 271;
    public static readonly KW_NOWAIT = 272;
    public static readonly KW_NULLS = 273;
    public static readonly KW_OBJECT = 274;
    public static readonly KW_OF = 275;
    public static readonly KW_OFF = 276;
    public static readonly KW_OIDS = 277;
    public static readonly KW_OPERATOR = 278;
    public static readonly KW_OPTION = 279;
    public static readonly KW_OPTIONS = 280;
    public static readonly KW_OWNED = 281;
    public static readonly KW_OWNER = 282;
    public static readonly KW_PARSER = 283;
    public static readonly KW_PARTIAL = 284;
    public static readonly KW_PARTITION = 285;
    public static readonly KW_PASSING = 286;
    public static readonly KW_PASSWORD = 287;
    public static readonly KW_PLANS = 288;
    public static readonly KW_PRECEDING = 289;
    public static readonly KW_PREPARE = 290;
    public static readonly KW_PREPARED = 291;
    public static readonly KW_PRESERVE = 292;
    public static readonly KW_PRIOR = 293;
    public static readonly KW_PRIVILEGES = 294;
    public static readonly KW_PROCEDURAL = 295;
    public static readonly KW_PROCEDURE = 296;
    public static readonly KW_PROGRAM = 297;
    public static readonly KW_QUOTE = 298;
    public static readonly KW_RANGE = 299;
    public static readonly KW_READ = 300;
    public static readonly KW_REASSIGN = 301;
    public static readonly KW_RECHECK = 302;
    public static readonly KW_RECURSIVE = 303;
    public static readonly KW_REF = 304;
    public static readonly KW_REFRESH = 305;
    public static readonly KW_REINDEX = 306;
    public static readonly KW_RELATIVE = 307;
    public static readonly KW_RELEASE = 308;
    public static readonly KW_RENAME = 309;
    public static readonly KW_REPEATABLE = 310;
    public static readonly KW_REPLACE = 311;
    public static readonly KW_REPLICA = 312;
    public static readonly KW_RESET = 313;
    public static readonly KW_RESTART = 314;
    public static readonly KW_RESTRICT = 315;
    public static readonly KW_RETURNS = 316;
    public static readonly KW_REVOKE = 317;
    public static readonly KW_ROLE = 318;
    public static readonly KW_ROLLBACK = 319;
    public static readonly KW_ROWS = 320;
    public static readonly KW_RULE = 321;
    public static readonly KW_SAVEPOINT = 322;
    public static readonly KW_SCHEMA = 323;
    public static readonly KW_SCROLL = 324;
    public static readonly KW_SEARCH = 325;
    public static readonly KW_SECOND = 326;
    public static readonly KW_SECURITY = 327;
    public static readonly KW_SEQUENCE = 328;
    public static readonly KW_SEQUENCES = 329;
    public static readonly KW_SERIALIZABLE = 330;
    public static readonly KW_SERVER = 331;
    public static readonly KW_SESSION = 332;
    public static readonly KW_SET = 333;
    public static readonly KW_SHARE = 334;
    public static readonly KW_SHOW = 335;
    public static readonly KW_SIMPLE = 336;
    public static readonly KW_SNAPSHOT = 337;
    public static readonly KW_STABLE = 338;
    public static readonly KW_STANDALONE = 339;
    public static readonly KW_START = 340;
    public static readonly KW_STATEMENT = 341;
    public static readonly KW_STATISTICS = 342;
    public static readonly KW_STDIN = 343;
    public static readonly KW_STDOUT = 344;
    public static readonly KW_STORAGE = 345;
    public static readonly KW_STRICT = 346;
    public static readonly KW_STRIP = 347;
    public static readonly KW_SYSID = 348;
    public static readonly KW_SYSTEM = 349;
    public static readonly KW_TABLES = 350;
    public static readonly KW_TABLESPACE = 351;
    public static readonly KW_TEMP = 352;
    public static readonly KW_TEMPLATE = 353;
    public static readonly KW_TEMPORARY = 354;
    public static readonly KW_TEXT = 355;
    public static readonly KW_TRANSACTION = 356;
    public static readonly KW_TRIGGER = 357;
    public static readonly KW_TRUNCATE = 358;
    public static readonly KW_TRUSTED = 359;
    public static readonly KW_TYPE = 360;
    public static readonly KW_TYPES = 361;
    public static readonly KW_UNBOUNDED = 362;
    public static readonly KW_UNCOMMITTED = 363;
    public static readonly KW_UNENCRYPTED = 364;
    public static readonly KW_UNKNOWN = 365;
    public static readonly KW_UNLISTEN = 366;
    public static readonly KW_UNLOGGED = 367;
    public static readonly KW_UNTIL = 368;
    public static readonly KW_UPDATE = 369;
    public static readonly KW_VACUUM = 370;
    public static readonly KW_VALID = 371;
    public static readonly KW_VALIDATE = 372;
    public static readonly KW_VALIDATOR = 373;
    public static readonly KW_VARYING = 374;
    public static readonly KW_VERSION = 375;
    public static readonly KW_VIEW = 376;
    public static readonly KW_VOLATILE = 377;
    public static readonly KW_WHITESPACE = 378;
    public static readonly KW_WITHOUT = 379;
    public static readonly KW_WORK = 380;
    public static readonly KW_WRAPPER = 381;
    public static readonly KW_WRITE = 382;
    public static readonly KW_XML = 383;
    public static readonly KW_YEAR = 384;
    public static readonly KW_YES = 385;
    public static readonly KW_ZONE = 386;
    public static readonly KW_BETWEEN = 387;
    public static readonly KW_BIGINT = 388;
    public static readonly KW_BIT = 389;
    public static readonly KW_BOOLEAN = 390;
    public static readonly KW_CHAR = 391;
    public static readonly KW_CHARACTER = 392;
    public static readonly KW_COALESCE = 393;
    public static readonly KW_DEC = 394;
    public static readonly KW_DECIMAL = 395;
    public static readonly KW_EXISTS = 396;
    public static readonly KW_EXTRACT = 397;
    public static readonly KW_FLOAT = 398;
    public static readonly KW_GREATEST = 399;
    public static readonly KW_INOUT = 400;
    public static readonly KW_INT = 401;
    public static readonly KW_INTEGER = 402;
    public static readonly KW_INTERVAL = 403;
    public static readonly KW_LEAST = 404;
    public static readonly KW_NATIONAL = 405;
    public static readonly KW_NCHAR = 406;
    public static readonly KW_NONE = 407;
    public static readonly KW_NULLIF = 408;
    public static readonly KW_NUMERIC = 409;
    public static readonly KW_OVERLAY = 410;
    public static readonly KW_POSITION = 411;
    public static readonly KW_PRECISION = 412;
    public static readonly KW_REAL = 413;
    public static readonly KW_ROW = 414;
    public static readonly KW_SETOF = 415;
    public static readonly KW_SMALLINT = 416;
    public static readonly KW_SUBSTRING = 417;
    public static readonly KW_TIME = 418;
    public static readonly KW_TIMESTAMP = 419;
    public static readonly KW_TREAT = 420;
    public static readonly KW_TRIM = 421;
    public static readonly KW_VALUES = 422;
    public static readonly KW_VARCHAR = 423;
    public static readonly KW_XMLATTRIBUTES = 424;
    public static readonly KW_XMLCONCAT = 425;
    public static readonly KW_XMLELEMENT = 426;
    public static readonly KW_XMLEXISTS = 427;
    public static readonly KW_XMLFOREST = 428;
    public static readonly KW_XMLPARSE = 429;
    public static readonly KW_XMLPI = 430;
    public static readonly KW_XMLROOT = 431;
    public static readonly KW_XMLSERIALIZE = 432;
    public static readonly KW_CALL = 433;
    public static readonly KW_CURRENT = 434;
    public static readonly KW_ATTACH = 435;
    public static readonly KW_DETACH = 436;
    public static readonly KW_EXPRESSION = 437;
    public static readonly KW_GENERATED = 438;
    public static readonly KW_LOGGED = 439;
    public static readonly KW_STORED = 440;
    public static readonly KW_INCLUDE = 441;
    public static readonly KW_ROUTINE = 442;
    public static readonly KW_TRANSFORM = 443;
    public static readonly KW_IMPORT = 444;
    public static readonly KW_POLICY = 445;
    public static readonly KW_METHOD = 446;
    public static readonly KW_REFERENCING = 447;
    public static readonly KW_NEW = 448;
    public static readonly KW_OLD = 449;
    public static readonly KW_VALUE = 450;
    public static readonly KW_SUBSCRIPTION = 451;
    public static readonly KW_PUBLICATION = 452;
    public static readonly KW_OUT = 453;
    public static readonly KW_END = 454;
    public static readonly KW_ROUTINES = 455;
    public static readonly KW_SCHEMAS = 456;
    public static readonly KW_PROCEDURES = 457;
    public static readonly KW_INPUT = 458;
    public static readonly KW_SUPPORT = 459;
    public static readonly KW_PARALLEL = 460;
    public static readonly KW_SQL = 461;
    public static readonly KW_DEPENDS = 462;
    public static readonly KW_OVERRIDING = 463;
    public static readonly KW_CONFLICT = 464;
    public static readonly KW_SKIP = 465;
    public static readonly KW_LOCKED = 466;
    public static readonly KW_TIES = 467;
    public static readonly KW_ROLLUP = 468;
    public static readonly KW_CUBE = 469;
    public static readonly KW_GROUPING = 470;
    public static readonly KW_SETS = 471;
    public static readonly KW_TABLESAMPLE = 472;
    public static readonly KW_ORDINALITY = 473;
    public static readonly KW_XMLTABLE = 474;
    public static readonly KW_COLUMNS = 475;
    public static readonly KW_XMLNAMESPACES = 476;
    public static readonly KW_ROWTYPE = 477;
    public static readonly KW_NORMALIZED = 478;
    public static readonly KW_WITHIN = 479;
    public static readonly KW_FILTER = 480;
    public static readonly KW_GROUPS = 481;
    public static readonly KW_OTHERS = 482;
    public static readonly KW_NFC = 483;
    public static readonly KW_NFD = 484;
    public static readonly KW_NFKC = 485;
    public static readonly KW_NFKD = 486;
    public static readonly KW_UESCAPE = 487;
    public static readonly KW_VIEWS = 488;
    public static readonly KW_NORMALIZE = 489;
    public static readonly KW_DUMP = 490;
    public static readonly KW_PRINT_STRICT_PARAMS = 491;
    public static readonly KW_VARIABLE_CONFLICT = 492;
    public static readonly KW_ERROR = 493;
    public static readonly KW_USE_VARIABLE = 494;
    public static readonly KW_USE_COLUMN = 495;
    public static readonly KW_ALIAS = 496;
    public static readonly KW_CONSTANT = 497;
    public static readonly KW_PERFORM = 498;
    public static readonly KW_GET = 499;
    public static readonly KW_DIAGNOSTICS = 500;
    public static readonly KW_STACKED = 501;
    public static readonly KW_ELSIF = 502;
    public static readonly KW_WHILE = 503;
    public static readonly KW_REVERSE = 504;
    public static readonly KW_FOREACH = 505;
    public static readonly KW_SLICE = 506;
    public static readonly KW_EXIT = 507;
    public static readonly KW_RETURN = 508;
    public static readonly KW_QUERY = 509;
    public static readonly KW_RAISE = 510;
    public static readonly KW_SQLSTATE = 511;
    public static readonly KW_DEBUG = 512;
    public static readonly KW_LOG = 513;
    public static readonly KW_INFO = 514;
    public static readonly KW_NOTICE = 515;
    public static readonly KW_WARNING = 516;
    public static readonly KW_EXCEPTION = 517;
    public static readonly KW_ASSERT = 518;
    public static readonly KW_LOOP = 519;
    public static readonly KW_OPEN = 520;
    public static readonly KW_PEFERENCES = 521;
    public static readonly KW_USAGE = 522;
    public static readonly KW_CONNECT = 523;
    public static readonly KW_PUBLIC = 524;
    public static readonly KW_MERGE = 525;
    public static readonly KW_MATCHED = 526;
    public static readonly KW_BREADTH = 527;
    public static readonly KW_DEPTH = 528;
    public static readonly KW_UNSAFE = 529;
    public static readonly KW_RESTRICTED = 530;
    public static readonly KW_SAFE = 531;
    public static readonly KW_FINALIZE = 532;
    public static readonly KW_MODULUS = 533;
    public static readonly KW_REMAINDER = 534;
    public static readonly KW_LOGIN = 535;
    public static readonly KW_NOLOGIN = 536;
    public static readonly KW_REPLICATION = 537;
    public static readonly KW_NOREPLICATION = 538;
    public static readonly KW_BYPASSRLS = 539;
    public static readonly KW_NOBYPASSRLS = 540;
    public static readonly KW_PERMISSIVE = 541;
    public static readonly KW_RESTRICTIVE = 542;
    public static readonly KW_COMPRESSION = 543;
    public static readonly KW_PLAIN = 544;
    public static readonly KW_EXTENDED = 545;
    public static readonly KW_MAIN = 546;
    public static readonly KW_SKIP_LOCKED = 547;
    public static readonly KW_BUFFER_USAGE_LIMIT = 548;
    public static readonly Identifier = 549;
    public static readonly QuotedIdentifier = 550;
    public static readonly UnterminatedQuotedIdentifier = 551;
    public static readonly InvalidQuotedIdentifier = 552;
    public static readonly InvalidUnterminatedQuotedIdentifier = 553;
    public static readonly UnicodeQuotedIdentifier = 554;
    public static readonly UnterminatedUnicodeQuotedIdentifier = 555;
    public static readonly InvalidUnicodeQuotedIdentifier = 556;
    public static readonly InvalidUnterminatedUnicodeQuotedIdentifier = 557;
    public static readonly StringConstant = 558;
    public static readonly UnterminatedStringConstant = 559;
    public static readonly UnicodeEscapeStringConstant = 560;
    public static readonly UnterminatedUnicodeEscapeStringConstant = 561;
    public static readonly BeginDollarStringConstant = 562;
    public static readonly BinaryStringConstant = 563;
    public static readonly UnterminatedBinaryStringConstant = 564;
    public static readonly InvalidBinaryStringConstant = 565;
    public static readonly InvalidUnterminatedBinaryStringConstant = 566;
    public static readonly HexadecimalStringConstant = 567;
    public static readonly UnterminatedHexadecimalStringConstant = 568;
    public static readonly InvalidHexadecimalStringConstant = 569;
    public static readonly InvalidUnterminatedHexadecimalStringConstant = 570;
    public static readonly Integral = 571;
    public static readonly NumericFail = 572;
    public static readonly Numeric = 573;
    public static readonly PLSQLVARIABLENAME = 574;
    public static readonly PLSQLIDENTIFIER = 575;
    public static readonly Whitespace = 576;
    public static readonly Newline = 577;
    public static readonly LineComment = 578;
    public static readonly BlockComment = 579;
    public static readonly UnterminatedBlockComment = 580;
    public static readonly MetaCommand = 581;
    public static readonly EndMetaCommand = 582;
    public static readonly ErrorCharacter = 583;
    public static readonly EscapeStringConstant = 584;
    public static readonly UnterminatedEscapeStringConstant = 585;
    public static readonly InvalidEscapeStringConstant = 586;
    public static readonly InvalidUnterminatedEscapeStringConstant = 587;
    public static readonly DollarText = 588;
    public static readonly EndDollarStringConstant = 589;
    public static readonly AfterEscapeStringConstantWithNewlineMode_Continued = 590;
    public static readonly RULE_program = 0;
    public static readonly RULE_singleStmt = 1;
    public static readonly RULE_stmt = 2;
    public static readonly RULE_callstmt = 3;
    public static readonly RULE_createrolestmt = 4;
    public static readonly RULE_optrolelist = 5;
    public static readonly RULE_alteroptrolelist = 6;
    public static readonly RULE_alteroptroleelem = 7;
    public static readonly RULE_createoptroleelem = 8;
    public static readonly RULE_createuserstmt = 9;
    public static readonly RULE_alterrolestmt = 10;
    public static readonly RULE_alterrolesetstmt = 11;
    public static readonly RULE_alterroutinestmt = 12;
    public static readonly RULE_alter_routine_cluase = 13;
    public static readonly RULE_routine_action = 14;
    public static readonly RULE_creategroupstmt = 15;
    public static readonly RULE_altergroupstmt = 16;
    public static readonly RULE_createschemastmt = 17;
    public static readonly RULE_schema_name_create = 18;
    public static readonly RULE_schema_stmt = 19;
    public static readonly RULE_variablesetstmt = 20;
    public static readonly RULE_set_rest = 21;
    public static readonly RULE_generic_set = 22;
    public static readonly RULE_set_rest_more = 23;
    public static readonly RULE_var_name = 24;
    public static readonly RULE_var_list = 25;
    public static readonly RULE_var_value = 26;
    public static readonly RULE_iso_level = 27;
    public static readonly RULE_opt_boolean_or_string_column = 28;
    public static readonly RULE_opt_boolean_or_string = 29;
    public static readonly RULE_zone_value = 30;
    public static readonly RULE_nonreservedword_or_sconst = 31;
    public static readonly RULE_variableresetstmt = 32;
    public static readonly RULE_reset_rest = 33;
    public static readonly RULE_setresetclause = 34;
    public static readonly RULE_functionsetresetclause = 35;
    public static readonly RULE_variableshowstmt = 36;
    public static readonly RULE_constraintssetstmt = 37;
    public static readonly RULE_checkpointstmt = 38;
    public static readonly RULE_discardstmt = 39;
    public static readonly RULE_altertablestmt = 40;
    public static readonly RULE_alter_table_cmds = 41;
    public static readonly RULE_partition_bound_spec = 42;
    public static readonly RULE_partition_bound_cluase = 43;
    public static readonly RULE_partition_bound_choose = 44;
    public static readonly RULE_partition_with_cluase = 45;
    public static readonly RULE_partition_cmd = 46;
    public static readonly RULE_index_partition_cmd = 47;
    public static readonly RULE_alter_table_cmd = 48;
    public static readonly RULE_alter_column_default = 49;
    public static readonly RULE_opt_drop_behavior = 50;
    public static readonly RULE_opt_collate_clause = 51;
    public static readonly RULE_replica_identity = 52;
    public static readonly RULE_reloptions = 53;
    public static readonly RULE_opt_reloptions = 54;
    public static readonly RULE_reloption_list = 55;
    public static readonly RULE_reloption_elem = 56;
    public static readonly RULE_alter_identity_column_option = 57;
    public static readonly RULE_partitionboundspec = 58;
    public static readonly RULE_hash_partbound_elem = 59;
    public static readonly RULE_hash_partbound = 60;
    public static readonly RULE_altercompositetypestmt = 61;
    public static readonly RULE_alter_type_cmd = 62;
    public static readonly RULE_closeportalstmt = 63;
    public static readonly RULE_copystmt = 64;
    public static readonly RULE_copy_file_name = 65;
    public static readonly RULE_copy_options = 66;
    public static readonly RULE_copy_opt_item = 67;
    public static readonly RULE_copy_delimiter = 68;
    public static readonly RULE_copy_generic_opt_elem = 69;
    public static readonly RULE_copy_generic_opt_arg = 70;
    public static readonly RULE_copy_generic_opt_arg_list = 71;
    public static readonly RULE_createstmt = 72;
    public static readonly RULE_opttemp = 73;
    public static readonly RULE_opttypedtableelementlist = 74;
    public static readonly RULE_tableelementlist = 75;
    public static readonly RULE_typedtableelementlist = 76;
    public static readonly RULE_tableelement = 77;
    public static readonly RULE_typedtableelement = 78;
    public static readonly RULE_column_def = 79;
    public static readonly RULE_storageCluase = 80;
    public static readonly RULE_colquallist = 81;
    public static readonly RULE_colconstraint = 82;
    public static readonly RULE_colconstraintelem = 83;
    public static readonly RULE_nulls_distinct = 84;
    public static readonly RULE_generated_when = 85;
    public static readonly RULE_deferrable_trigger = 86;
    public static readonly RULE_initially_trigger = 87;
    public static readonly RULE_tablelikeclause = 88;
    public static readonly RULE_tablelikeoption = 89;
    public static readonly RULE_tableconstraint = 90;
    public static readonly RULE_constraintelem = 91;
    public static readonly RULE_opt_column_list = 92;
    public static readonly RULE_opt_column_list_create = 93;
    public static readonly RULE_column_list = 94;
    public static readonly RULE_opt_c_include = 95;
    public static readonly RULE_key_match = 96;
    public static readonly RULE_exclusionconstraintlist = 97;
    public static readonly RULE_exclusionconstraintelem = 98;
    public static readonly RULE_exclusionwhereclause = 99;
    public static readonly RULE_key_actions = 100;
    public static readonly RULE_key_update = 101;
    public static readonly RULE_key_delete = 102;
    public static readonly RULE_key_action = 103;
    public static readonly RULE_optinherit = 104;
    public static readonly RULE_partitionspec = 105;
    public static readonly RULE_part_params = 106;
    public static readonly RULE_part_elem = 107;
    public static readonly RULE_table_access_method_clause = 108;
    public static readonly RULE_optwith = 109;
    public static readonly RULE_oncommitoption = 110;
    public static readonly RULE_opttablespace = 111;
    public static readonly RULE_index_paramenters_create = 112;
    public static readonly RULE_optconstablespace = 113;
    public static readonly RULE_existingindex = 114;
    public static readonly RULE_createstatsstmt = 115;
    public static readonly RULE_alterstatsstmt = 116;
    public static readonly RULE_createasstmt = 117;
    public static readonly RULE_create_as_target = 118;
    public static readonly RULE_opt_with_data = 119;
    public static readonly RULE_creatematviewstmt = 120;
    public static readonly RULE_create_mv_target = 121;
    public static readonly RULE_refreshmatviewstmt = 122;
    public static readonly RULE_createseqstmt = 123;
    public static readonly RULE_alterseqstmt = 124;
    public static readonly RULE_optparenthesizedseqoptlist = 125;
    public static readonly RULE_seqoptlist = 126;
    public static readonly RULE_seqoptelem = 127;
    public static readonly RULE_numericonly = 128;
    public static readonly RULE_numericonly_list = 129;
    public static readonly RULE_createplangstmt = 130;
    public static readonly RULE_createtablespacestmt = 131;
    public static readonly RULE_createextensionstmt = 132;
    public static readonly RULE_create_extension_opt_item = 133;
    public static readonly RULE_alterextensionstmt = 134;
    public static readonly RULE_alterextensioncontentsstmt = 135;
    public static readonly RULE_createfdwstmt = 136;
    public static readonly RULE_fdw_option = 137;
    public static readonly RULE_fdw_options = 138;
    public static readonly RULE_alterfdwstmt = 139;
    public static readonly RULE_create_generic_options = 140;
    public static readonly RULE_generic_option_list = 141;
    public static readonly RULE_alter_generic_options = 142;
    public static readonly RULE_alter_generic_option_list = 143;
    public static readonly RULE_alter_generic_option_elem = 144;
    public static readonly RULE_generic_option_elem = 145;
    public static readonly RULE_createforeignserverstmt = 146;
    public static readonly RULE_foreign_server_version = 147;
    public static readonly RULE_alterforeignserverstmt = 148;
    public static readonly RULE_createforeigntablestmt = 149;
    public static readonly RULE_importforeignschemastmt = 150;
    public static readonly RULE_import_qualification = 151;
    public static readonly RULE_createusermappingstmt = 152;
    public static readonly RULE_auth_ident = 153;
    public static readonly RULE_alterusermappingstmt = 154;
    public static readonly RULE_createpolicystmt = 155;
    public static readonly RULE_alterpolicystmt = 156;
    public static readonly RULE_alterprocedurestmt = 157;
    public static readonly RULE_procedure_cluase = 158;
    public static readonly RULE_procedure_action = 159;
    public static readonly RULE_rowsecurityoptionalexpr = 160;
    public static readonly RULE_rowsecurityoptionalwithcheck = 161;
    public static readonly RULE_rowsecuritydefaulttorole = 162;
    public static readonly RULE_rowsecuritydefaultpermissive = 163;
    public static readonly RULE_row_security_cmd = 164;
    public static readonly RULE_createamstmt = 165;
    public static readonly RULE_createtrigstmt = 166;
    public static readonly RULE_triggeractiontime = 167;
    public static readonly RULE_foreachrow = 168;
    public static readonly RULE_triggerevents = 169;
    public static readonly RULE_triggeroneevent = 170;
    public static readonly RULE_triggerreferencing = 171;
    public static readonly RULE_triggertransition = 172;
    public static readonly RULE_triggerforspec = 173;
    public static readonly RULE_triggerwhen = 174;
    public static readonly RULE_function_or_procedure = 175;
    public static readonly RULE_triggerfuncargs = 176;
    public static readonly RULE_triggerfuncarg = 177;
    public static readonly RULE_constraintattributespec = 178;
    public static readonly RULE_constraintattributeElem = 179;
    public static readonly RULE_createeventtrigstmt = 180;
    public static readonly RULE_event_trigger_when_list = 181;
    public static readonly RULE_event_trigger_when_item = 182;
    public static readonly RULE_altereventtrigstmt = 183;
    public static readonly RULE_enable_trigger = 184;
    public static readonly RULE_createassertionstmt = 185;
    public static readonly RULE_definestmt = 186;
    public static readonly RULE_definition = 187;
    public static readonly RULE_def_list = 188;
    public static readonly RULE_def_elem = 189;
    public static readonly RULE_def_arg = 190;
    public static readonly RULE_old_aggr_elem = 191;
    public static readonly RULE_event_trigger_value_list = 192;
    public static readonly RULE_alterenumstmt = 193;
    public static readonly RULE_opt_if_not_exists = 194;
    public static readonly RULE_createopclassstmt = 195;
    public static readonly RULE_opclass_item_list = 196;
    public static readonly RULE_opclass_item = 197;
    public static readonly RULE_opt_opfamily = 198;
    public static readonly RULE_opclass_purpose = 199;
    public static readonly RULE_createopfamilystmt = 200;
    public static readonly RULE_alteropfamilystmt = 201;
    public static readonly RULE_opclass_drop = 202;
    public static readonly RULE_reassignownedstmt = 203;
    public static readonly RULE_dropstmt = 204;
    public static readonly RULE_view_nameList = 205;
    public static readonly RULE_object_type_any_name = 206;
    public static readonly RULE_object_type_name = 207;
    public static readonly RULE_object_type_name_on_any_name = 208;
    public static readonly RULE_any_name_list = 209;
    public static readonly RULE_relation_column_name = 210;
    public static readonly RULE_any_name = 211;
    public static readonly RULE_attrs = 212;
    public static readonly RULE_type_name_list = 213;
    public static readonly RULE_truncatestmt = 214;
    public static readonly RULE_truncate_table = 215;
    public static readonly RULE_commentstmt = 216;
    public static readonly RULE_seclabelstmt = 217;
    public static readonly RULE_fetchstmt = 218;
    public static readonly RULE_fetch_args = 219;
    public static readonly RULE_from_in = 220;
    public static readonly RULE_grantstmt = 221;
    public static readonly RULE_revokestmt = 222;
    public static readonly RULE_privileges = 223;
    public static readonly RULE_beforeprivilegeselect = 224;
    public static readonly RULE_privilege_list = 225;
    public static readonly RULE_privilege = 226;
    public static readonly RULE_privilege_target = 227;
    public static readonly RULE_grantee_list = 228;
    public static readonly RULE_grantee = 229;
    public static readonly RULE_opt_grant_grant_option = 230;
    public static readonly RULE_grantrolestmt = 231;
    public static readonly RULE_revokerolestmt = 232;
    public static readonly RULE_opt_granted_by = 233;
    public static readonly RULE_alterdefaultprivilegesstmt = 234;
    public static readonly RULE_defacloption = 235;
    public static readonly RULE_defaclaction = 236;
    public static readonly RULE_defacl_privilege_target = 237;
    public static readonly RULE_indexstmt = 238;
    public static readonly RULE_index_params = 239;
    public static readonly RULE_index_elem_options = 240;
    public static readonly RULE_index_elem = 241;
    public static readonly RULE_opt_include = 242;
    public static readonly RULE_opt_nulls_order = 243;
    public static readonly RULE_createfunctionstmt = 244;
    public static readonly RULE_attrilist = 245;
    public static readonly RULE_opt_or_replace = 246;
    public static readonly RULE_func_args = 247;
    public static readonly RULE_func_args_list = 248;
    public static readonly RULE_routine_with_argtypes_list = 249;
    public static readonly RULE_routine_with_argtypes = 250;
    public static readonly RULE_procedure_with_argtypes_list = 251;
    public static readonly RULE_procedure_with_argtypes = 252;
    public static readonly RULE_function_with_argtypes_list = 253;
    public static readonly RULE_function_with_argtypes = 254;
    public static readonly RULE_func_args_with_defaults = 255;
    public static readonly RULE_func_args_with_defaults_list = 256;
    public static readonly RULE_func_arg = 257;
    public static readonly RULE_arg_class = 258;
    public static readonly RULE_func_type = 259;
    public static readonly RULE_func_arg_with_default = 260;
    public static readonly RULE_aggr_args = 261;
    public static readonly RULE_aggregate_with_argtypes = 262;
    public static readonly RULE_aggregate_with_argtypes_list = 263;
    public static readonly RULE_createfunc_opt_list = 264;
    public static readonly RULE_common_func_opt_item = 265;
    public static readonly RULE_createfunc_opt_item = 266;
    public static readonly RULE_transform_type_name_list = 267;
    public static readonly RULE_opt_definition = 268;
    public static readonly RULE_table_func_column = 269;
    public static readonly RULE_table_func_column_list = 270;
    public static readonly RULE_alterfunctionstmt = 271;
    public static readonly RULE_alterFunctionTypeClause = 272;
    public static readonly RULE_removefuncstmt = 273;
    public static readonly RULE_removeaggrstmt = 274;
    public static readonly RULE_removeoperstmt = 275;
    public static readonly RULE_oper_argtypes = 276;
    public static readonly RULE_any_operator = 277;
    public static readonly RULE_operator_with_argtypes_list = 278;
    public static readonly RULE_operator_with_argtypes = 279;
    public static readonly RULE_dostmt = 280;
    public static readonly RULE_dostmt_opt_item = 281;
    public static readonly RULE_createcaststmt = 282;
    public static readonly RULE_cast_context = 283;
    public static readonly RULE_opt_if_exists = 284;
    public static readonly RULE_createtransformstmt = 285;
    public static readonly RULE_transform_element_list = 286;
    public static readonly RULE_sql_with_function = 287;
    public static readonly RULE_reindexstmt = 288;
    public static readonly RULE_reindex_target_multitable = 289;
    public static readonly RULE_altertblspcstmt = 290;
    public static readonly RULE_renamestmt = 291;
    public static readonly RULE_alterobjectdependsstmt = 292;
    public static readonly RULE_alterobjectschemastmt = 293;
    public static readonly RULE_alteroperatorstmt = 294;
    public static readonly RULE_operator_def_list = 295;
    public static readonly RULE_operator_def_elem = 296;
    public static readonly RULE_operator_def_arg = 297;
    public static readonly RULE_altertypestmt = 298;
    public static readonly RULE_alterownerstmt = 299;
    public static readonly RULE_createpublicationstmt = 300;
    public static readonly RULE_publication_for_tables = 301;
    public static readonly RULE_alterpublicationstmt = 302;
    public static readonly RULE_createsubscriptionstmt = 303;
    public static readonly RULE_publication_name_list = 304;
    public static readonly RULE_altersubscriptionstmt = 305;
    public static readonly RULE_rulestmt = 306;
    public static readonly RULE_ruleactionlist = 307;
    public static readonly RULE_ruleactionmulti = 308;
    public static readonly RULE_ruleactionstmt = 309;
    public static readonly RULE_event = 310;
    public static readonly RULE_notifystmt = 311;
    public static readonly RULE_notify_payload = 312;
    public static readonly RULE_listenstmt = 313;
    public static readonly RULE_unlistenstmt = 314;
    public static readonly RULE_transactionstmt = 315;
    public static readonly RULE_opt_transaction = 316;
    public static readonly RULE_transaction_mode_item = 317;
    public static readonly RULE_transaction_mode_list = 318;
    public static readonly RULE_viewstmt = 319;
    public static readonly RULE_opt_check_option = 320;
    public static readonly RULE_loadstmt = 321;
    public static readonly RULE_createdbstmt = 322;
    public static readonly RULE_createdb_opt_items = 323;
    public static readonly RULE_createdb_opt_item = 324;
    public static readonly RULE_createdb_opt_name = 325;
    public static readonly RULE_alterdatabasestmt = 326;
    public static readonly RULE_alterdatabasesetstmt = 327;
    public static readonly RULE_drop_option_list = 328;
    public static readonly RULE_altercollationstmt = 329;
    public static readonly RULE_altersystemstmt = 330;
    public static readonly RULE_createdomainstmt = 331;
    public static readonly RULE_alterdomainstmt = 332;
    public static readonly RULE_altertsdictionarystmt = 333;
    public static readonly RULE_altertsconfigurationstmt = 334;
    public static readonly RULE_createconversionstmt = 335;
    public static readonly RULE_clusterstmt = 336;
    public static readonly RULE_opt_verbose_list = 337;
    public static readonly RULE_vacuumstmt = 338;
    public static readonly RULE_analyzestmt = 339;
    public static readonly RULE_vac_analyze_option_list = 340;
    public static readonly RULE_analyze_keyword = 341;
    public static readonly RULE_vac_analyze_option_elem = 342;
    public static readonly RULE_vac_analyze_option_name = 343;
    public static readonly RULE_vac_analyze_option_arg = 344;
    public static readonly RULE_analyze_options_list = 345;
    public static readonly RULE_analyze_option_elem = 346;
    public static readonly RULE_opt_verbose = 347;
    public static readonly RULE_vacuum_relation = 348;
    public static readonly RULE_vacuum_relation_list = 349;
    public static readonly RULE_explainstmt = 350;
    public static readonly RULE_explainablestmt = 351;
    public static readonly RULE_explain_option_list = 352;
    public static readonly RULE_preparestmt = 353;
    public static readonly RULE_prep_type_clause = 354;
    public static readonly RULE_preparablestmt = 355;
    public static readonly RULE_executestmt = 356;
    public static readonly RULE_execute_param_clause = 357;
    public static readonly RULE_deallocatestmt = 358;
    public static readonly RULE_insertstmt = 359;
    public static readonly RULE_insert_rest = 360;
    public static readonly RULE_insert_column_list = 361;
    public static readonly RULE_insert_column_item = 362;
    public static readonly RULE_opt_on_conflict = 363;
    public static readonly RULE_opt_conf_expr = 364;
    public static readonly RULE_returning_clause = 365;
    public static readonly RULE_deletestmt = 366;
    public static readonly RULE_lockstmt = 367;
    public static readonly RULE_lock_type = 368;
    public static readonly RULE_opt_nowait_or_skip = 369;
    public static readonly RULE_updatestmt = 370;
    public static readonly RULE_set_clause_list = 371;
    public static readonly RULE_set_clause = 372;
    public static readonly RULE_declarecursorstmt = 373;
    public static readonly RULE_cursor_options = 374;
    public static readonly RULE_selectstmt = 375;
    public static readonly RULE_select_with_parens = 376;
    public static readonly RULE_select_no_parens = 377;
    public static readonly RULE_select_clause = 378;
    public static readonly RULE_simple_select = 379;
    public static readonly RULE_set_operator_with_all_or_distinct = 380;
    public static readonly RULE_with_clause = 381;
    public static readonly RULE_common_table_expr = 382;
    public static readonly RULE_search_cluase = 383;
    public static readonly RULE_cycle_cluase = 384;
    public static readonly RULE_into_clause = 385;
    public static readonly RULE_opttempTableName = 386;
    public static readonly RULE_all_or_distinct = 387;
    public static readonly RULE_distinct_clause = 388;
    public static readonly RULE_sort_clause = 389;
    public static readonly RULE_sortby = 390;
    public static readonly RULE_select_limit = 391;
    public static readonly RULE_limit_clause = 392;
    public static readonly RULE_fetch_clause = 393;
    public static readonly RULE_offset_clause = 394;
    public static readonly RULE_select_fetch_first_value = 395;
    public static readonly RULE_row_or_rows = 396;
    public static readonly RULE_group_clause = 397;
    public static readonly RULE_group_by_list = 398;
    public static readonly RULE_group_by_item = 399;
    public static readonly RULE_empty_grouping_set = 400;
    public static readonly RULE_having_clause = 401;
    public static readonly RULE_for_locking_clause = 402;
    public static readonly RULE_for_locking_item = 403;
    public static readonly RULE_for_locking_strength = 404;
    public static readonly RULE_values_clause = 405;
    public static readonly RULE_from_clause = 406;
    public static readonly RULE_from_list = 407;
    public static readonly RULE_table_ref = 408;
    public static readonly RULE_alias_clause = 409;
    public static readonly RULE_func_alias_clause = 410;
    public static readonly RULE_join_type = 411;
    public static readonly RULE_join_qual = 412;
    public static readonly RULE_relation_expr = 413;
    public static readonly RULE_view_relation_expr = 414;
    public static readonly RULE_publication_relation_expr = 415;
    public static readonly RULE_relation_expr_list = 416;
    public static readonly RULE_publication_relation_expr_list = 417;
    public static readonly RULE_relation_expr_opt_alias = 418;
    public static readonly RULE_tablesample_clause = 419;
    public static readonly RULE_opt_repeatable_clause = 420;
    public static readonly RULE_func_table = 421;
    public static readonly RULE_rowsfrom_item = 422;
    public static readonly RULE_rowsfrom_list = 423;
    public static readonly RULE_where_clause = 424;
    public static readonly RULE_where_or_current_clause = 425;
    public static readonly RULE_tablefuncelementlist = 426;
    public static readonly RULE_tablefuncelement = 427;
    public static readonly RULE_xmltable = 428;
    public static readonly RULE_xmltable_column_list = 429;
    public static readonly RULE_xmltable_column_el = 430;
    public static readonly RULE_xmltable_column_option_list = 431;
    public static readonly RULE_xmltable_column_option_el = 432;
    public static readonly RULE_xml_namespace_list = 433;
    public static readonly RULE_xml_namespace_el = 434;
    public static readonly RULE_typename = 435;
    public static readonly RULE_opt_array_bounds = 436;
    public static readonly RULE_simpletypename = 437;
    public static readonly RULE_consttypename = 438;
    public static readonly RULE_generictype = 439;
    public static readonly RULE_numeric = 440;
    public static readonly RULE_opt_float = 441;
    public static readonly RULE_bit = 442;
    public static readonly RULE_character = 443;
    public static readonly RULE_character_c = 444;
    public static readonly RULE_constdatetime = 445;
    public static readonly RULE_opt_interval = 446;
    public static readonly RULE_interval_second = 447;
    public static readonly RULE_comparisonOperator = 448;
    public static readonly RULE_expression = 449;
    public static readonly RULE_booleanExpression = 450;
    public static readonly RULE_predicate = 451;
    public static readonly RULE_valueExpression = 452;
    public static readonly RULE_primaryExpression = 453;
    public static readonly RULE_func_application = 454;
    public static readonly RULE_func_expr = 455;
    public static readonly RULE_func_expr_windowless = 456;
    public static readonly RULE_func_expr_common_subexpr = 457;
    public static readonly RULE_xml_root_version = 458;
    public static readonly RULE_opt_xml_root_standalone = 459;
    public static readonly RULE_xml_attributes = 460;
    public static readonly RULE_xml_attribute_list = 461;
    public static readonly RULE_xml_attribute_el = 462;
    public static readonly RULE_document_or_content = 463;
    public static readonly RULE_xml_whitespace_option = 464;
    public static readonly RULE_xmlexists_argument = 465;
    public static readonly RULE_xml_passing_mech = 466;
    public static readonly RULE_window_clause = 467;
    public static readonly RULE_window_definition_list = 468;
    public static readonly RULE_window_definition = 469;
    public static readonly RULE_over_clause = 470;
    public static readonly RULE_window_specification = 471;
    public static readonly RULE_opt_frame_clause = 472;
    public static readonly RULE_frame_bound = 473;
    public static readonly RULE_row = 474;
    public static readonly RULE_explicit_row = 475;
    public static readonly RULE_sub_type = 476;
    public static readonly RULE_all_op = 477;
    public static readonly RULE_mathop = 478;
    public static readonly RULE_qual_op = 479;
    public static readonly RULE_qual_all_op = 480;
    public static readonly RULE_subquery_Op = 481;
    public static readonly RULE_expr_list = 482;
    public static readonly RULE_column_expr_list_noparen = 483;
    public static readonly RULE_column_expr_list = 484;
    public static readonly RULE_column_expr = 485;
    public static readonly RULE_column_expr_noparen = 486;
    public static readonly RULE_func_arg_list = 487;
    public static readonly RULE_func_arg_expr = 488;
    public static readonly RULE_array_expr = 489;
    public static readonly RULE_array_expr_list = 490;
    public static readonly RULE_extract_list = 491;
    public static readonly RULE_extract_arg = 492;
    public static readonly RULE_unicode_normal_form = 493;
    public static readonly RULE_overlay_list = 494;
    public static readonly RULE_substr_list = 495;
    public static readonly RULE_trim_list = 496;
    public static readonly RULE_when_clause = 497;
    public static readonly RULE_indirection_el = 498;
    public static readonly RULE_indirection = 499;
    public static readonly RULE_opt_indirection = 500;
    public static readonly RULE_target_list = 501;
    public static readonly RULE_target_el = 502;
    public static readonly RULE_qualified_name_list = 503;
    public static readonly RULE_table_name_list = 504;
    public static readonly RULE_schema_name_list = 505;
    public static readonly RULE_database_nameList = 506;
    public static readonly RULE_procedure_name_list = 507;
    public static readonly RULE_tablespace_name_create = 508;
    public static readonly RULE_tablespace_name = 509;
    public static readonly RULE_table_name_create = 510;
    public static readonly RULE_table_name = 511;
    public static readonly RULE_view_name_create = 512;
    public static readonly RULE_view_name = 513;
    public static readonly RULE_qualified_name = 514;
    public static readonly RULE_tablespace_name_list = 515;
    public static readonly RULE_name_list = 516;
    public static readonly RULE_database_name_create = 517;
    public static readonly RULE_database_name = 518;
    public static readonly RULE_schema_name = 519;
    public static readonly RULE_routine_name_create = 520;
    public static readonly RULE_routine_name = 521;
    public static readonly RULE_procedure_name = 522;
    public static readonly RULE_procedure_name_create = 523;
    public static readonly RULE_column_name = 524;
    public static readonly RULE_column_name_create = 525;
    public static readonly RULE_function_name_create = 526;
    public static readonly RULE_function_name = 527;
    public static readonly RULE_usual_name = 528;
    public static readonly RULE_sconst = 529;
    public static readonly RULE_anysconst = 530;
    public static readonly RULE_signediconst = 531;
    public static readonly RULE_rolespec = 532;
    public static readonly RULE_role_list = 533;
    public static readonly RULE_colid = 534;
    public static readonly RULE_type_function_name = 535;
    public static readonly RULE_nonreservedword = 536;
    public static readonly RULE_collabel = 537;
    public static readonly RULE_identifier = 538;
    public static readonly RULE_unreserved_keyword = 539;
    public static readonly RULE_col_name_keyword = 540;
    public static readonly RULE_type_func_name_keyword = 541;
    public static readonly RULE_reserved_keyword = 542;
    public static readonly RULE_comp_option = 543;
    public static readonly RULE_option_value = 544;
    public static readonly RULE_pl_block = 545;
    public static readonly RULE_decl_sect = 546;
    public static readonly RULE_decl_stmts = 547;
    public static readonly RULE_label_decl = 548;
    public static readonly RULE_decl_statement = 549;
    public static readonly RULE_opt_scrollable = 550;
    public static readonly RULE_decl_cursor_args = 551;
    public static readonly RULE_decl_cursor_arglist = 552;
    public static readonly RULE_decl_cursor_arg = 553;
    public static readonly RULE_decl_aliasitem = 554;
    public static readonly RULE_decl_defkey = 555;
    public static readonly RULE_assign_operator = 556;
    public static readonly RULE_proc_sect = 557;
    public static readonly RULE_proc_stmt = 558;
    public static readonly RULE_stmt_perform = 559;
    public static readonly RULE_stmt_call = 560;
    public static readonly RULE_stmt_assign = 561;
    public static readonly RULE_stmt_getdiag = 562;
    public static readonly RULE_getdiag_list = 563;
    public static readonly RULE_getdiag_list_item = 564;
    public static readonly RULE_assign_var = 565;
    public static readonly RULE_stmt_if = 566;
    public static readonly RULE_stmt_elsifs = 567;
    public static readonly RULE_stmt_else = 568;
    public static readonly RULE_stmt_case = 569;
    public static readonly RULE_case_when = 570;
    public static readonly RULE_stmt_loop_while_for = 571;
    public static readonly RULE_for_control = 572;
    public static readonly RULE_opt_for_using_expression = 573;
    public static readonly RULE_stmt_foreach_a = 574;
    public static readonly RULE_stmt_exit = 575;
    public static readonly RULE_stmt_return = 576;
    public static readonly RULE_stmt_raise = 577;
    public static readonly RULE_opt_stmt_raise_level = 578;
    public static readonly RULE_opt_raise_list = 579;
    public static readonly RULE_opt_raise_using_elem = 580;
    public static readonly RULE_opt_raise_using_elem_list = 581;
    public static readonly RULE_stmt_assert = 582;
    public static readonly RULE_loop_body = 583;
    public static readonly RULE_stmt_execsql = 584;
    public static readonly RULE_stmt_dynexecute = 585;
    public static readonly RULE_opt_execute_into = 586;
    public static readonly RULE_stmt_open = 587;
    public static readonly RULE_opt_open_bound_list_item = 588;
    public static readonly RULE_opt_open_bound_list = 589;
    public static readonly RULE_stmt_fetch = 590;
    public static readonly RULE_opt_fetch_direction = 591;
    public static readonly RULE_stmt_move = 592;
    public static readonly RULE_mergestmt = 593;
    public static readonly RULE_data_source = 594;
    public static readonly RULE_merge_when_clause = 595;
    public static readonly RULE_merge_insert = 596;
    public static readonly RULE_merge_update = 597;
    public static readonly RULE_default_values_or_values = 598;
    public static readonly RULE_exprofdefaultlist = 599;
    public static readonly RULE_exprofdefault = 600;
    public static readonly RULE_stmt_close = 601;
    public static readonly RULE_stmt_null = 602;
    public static readonly RULE_stmt_commit_or_rollback = 603;
    public static readonly RULE_stmt_set = 604;
    public static readonly RULE_cursor_variable = 605;
    public static readonly RULE_exception_sect = 606;
    public static readonly RULE_proc_exception = 607;
    public static readonly RULE_proc_conditions = 608;
    public static readonly RULE_proc_condition = 609;
    public static readonly RULE_any_identifier = 610;
    public static readonly RULE_plsql_unreserved_keyword = 611;
    public static readonly RULE_sql_expression = 612;

    public static readonly literalNames = [
        null, "'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'*'", 
        "'='", "'.'", "'+'", "'-'", "'/'", "'^'", "'<'", "'>'", "'<<'", 
        "'>>'", "':='", "'<='", "'=>'", "'>='", "'..'", "'<>'", "'::'", 
        "'%'", null, null, "'ALL'", "'ANALYSE'", "'ANALYZE'", "'AND'", "'ANY'", 
        "'ARRAY'", "'AS'", "'ASC'", "'ASYMMETRIC'", "'BOTH'", "'CASE'", 
        "'CAST'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONSTRAINT'", "'CREATE'", 
        "'CURRENT_CATALOG'", "'CURRENT_DATE'", "'CURRENT_ROLE'", "'CURRENT_TIME'", 
        "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DEFAULT'", "'DEFERRABLE'", 
        "'DESC'", "'DISTINCT'", "'DO'", "'ELSE'", "'EXCEPT'", "'FALSE'", 
        "'FETCH'", "'FOR'", "'FOREIGN'", "'FROM'", "'GRANT'", "'GROUP'", 
        "'HAVING'", "'IN'", "'INITIALLY'", "'INTERSECT'", "'INTO'", "'LATERAL'", 
        "'LEADING'", "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'", "'NOT'", 
        "'NULL'", "'OFFSET'", "'ON'", "'ONLY'", "'OR'", "'ORDER'", "'PLACING'", 
        "'PRIMARY'", "'REFERENCES'", "'RETURNING'", "'SELECT'", "'SESSION_USER'", 
        "'SOME'", "'SYMMETRIC'", "'TABLE'", "'THEN'", "'TO'", "'TRAILING'", 
        "'TRUE'", "'UNION'", "'UNIQUE'", "'USER'", "'USING'", "'VARIADIC'", 
        "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'AUTHORIZATION'", "'BINARY'", 
        "'COLLATION'", "'CONCURRENTLY'", "'CROSS'", "'CURRENT_SCHEMA'", 
        "'FREEZE'", "'FULL'", "'ILIKE'", "'INNER'", "'IS'", "'ISNULL'", 
        "'JOIN'", "'LEFT'", "'LIKE'", "'NATURAL'", "'NOTNULL'", "'OUTER'", 
        "'OVER'", "'OVERLAPS'", "'RIGHT'", "'SIMILAR'", "'VERBOSE'", "'ABORT'", 
        "'ABSOLUTE'", "'ACCESS'", "'ACTION'", "'ADD'", "'ADMIN'", "'AFTER'", 
        "'AGGREGATE'", "'ALSO'", "'ALTER'", "'ALWAYS'", "'ASSERTION'", "'ASSIGNMENT'", 
        "'AT'", "'ATTRIBUTE'", "'BACKWARD'", "'BEFORE'", "'BEGIN'", "'BY'", 
        "'CACHE'", "'CALLED'", "'CASCADE'", "'CASCADED'", "'CATALOG'", "'CHAIN'", 
        "'CHARACTERISTICS'", "'CHECKPOINT'", "'CLASS'", "'CLOSE'", "'CLUSTER'", 
        "'COMMENT'", "'COMMENTS'", "'COMMIT'", "'COMMITTED'", "'CONFIGURATION'", 
        "'CONNECTION'", "'CONSTRAINTS'", "'CONTENT'", "'CONTINUE'", "'CONVERSION'", 
        "'COPY'", "'COST'", "'CSV'", "'CURSOR'", "'CYCLE'", "'DATA'", "'DATABASE'", 
        "'DAY'", "'DEALLOCATE'", "'DECLARE'", "'DEFAULTS'", "'DEFERRED'", 
        "'DEFINER'", "'DELETE'", "'DELIMITER'", "'DELIMITERS'", "'DICTIONARY'", 
        "'DISABLE'", "'DISCARD'", "'DOCUMENT'", "'DOMAIN'", "'DOUBLE'", 
        "'DROP'", "'EACH'", "'ENABLE'", "'ENCODING'", "'ENCRYPTED'", "'ENUM'", 
        "'ESCAPE'", "'EVENT'", "'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", 
        "'EXECUTE'", "'EXPLAIN'", "'EXTENSION'", "'EXTERNAL'", "'FAMILY'", 
        "'FIRST'", "'FOLLOWING'", "'FORCE'", "'FORWARD'", "'FUNCTION'", 
        "'FUNCTIONS'", "'GLOBAL'", "'GRANTED'", "'HANDLER'", "'HEADER'", 
        "'HOLD'", "'HOUR'", "'IDENTITY'", "'IF'", "'IMMEDIATE'", "'IMMUTABLE'", 
        "'IMPLICIT'", "'INCLUDING'", "'INCREMENT'", "'INDEX'", "'INDEXES'", 
        "'INHERIT'", "'NOINHERIT'", "'SUPERUSER'", "'NOSUPERUSER'", "'CREATEDB'", 
        "'NOCREATEDB'", "'CREATEROLE'", "'NOCREATEROLE'", "'CREATEUSER'", 
        "'NOCREATEUSER'", "'INHERITS'", "'INLINE'", "'INSENSITIVE'", "'INSERT'", 
        "'INSTEAD'", "'INVOKER'", "'ISOLATION'", "'KEY'", "'LABEL'", "'LANGUAGE'", 
        "'LARGE'", "'LAST'", "'LEAKPROOF'", "'LEVEL'", "'LISTEN'", "'LOAD'", 
        "'LOCAL'", "'LOCATION'", "'LOCK'", "'MAPPING'", "'MATCH'", "'MATERIALIZED'", 
        "'MAXVALUE'", "'MINUTE'", "'MINVALUE'", "'MODE'", "'MONTH'", "'MOVE'", 
        "'NAME'", "'NAMES'", "'NEXT'", "'NO'", "'NOTHING'", "'NOTIFY'", 
        "'NOWAIT'", "'NULLS'", "'OBJECT'", "'OF'", "'OFF'", "'OIDS'", "'OPERATOR'", 
        "'OPTION'", "'OPTIONS'", "'OWNED'", "'OWNER'", "'PARSER'", "'PARTIAL'", 
        "'PARTITION'", "'PASSING'", "'PASSWORD'", "'PLANS'", "'PRECEDING'", 
        "'PREPARE'", "'PREPARED'", "'PRESERVE'", "'PRIOR'", "'PRIVILEGES'", 
        "'PROCEDURAL'", "'PROCEDURE'", "'PROGRAM'", "'QUOTE'", "'RANGE'", 
        "'READ'", "'REASSIGN'", "'RECHECK'", "'RECURSIVE'", "'REF'", "'REFRESH'", 
        "'REINDEX'", "'RELATIVE'", "'RELEASE'", "'RENAME'", "'REPEATABLE'", 
        "'REPLACE'", "'REPLICA'", "'RESET'", "'RESTART'", "'RESTRICT'", 
        "'RETURNS'", "'REVOKE'", "'ROLE'", "'ROLLBACK'", "'ROWS'", "'RULE'", 
        "'SAVEPOINT'", "'SCHEMA'", "'SCROLL'", "'SEARCH'", "'SECOND'", "'SECURITY'", 
        "'SEQUENCE'", "'SEQUENCES'", "'SERIALIZABLE'", "'SERVER'", "'SESSION'", 
        "'SET'", "'SHARE'", "'SHOW'", "'SIMPLE'", "'SNAPSHOT'", "'STABLE'", 
        "'STANDALONE'", "'START'", "'STATEMENT'", "'STATISTICS'", "'STDIN'", 
        "'STDOUT'", "'STORAGE'", "'STRICT'", "'STRIP'", "'SYSID'", "'SYSTEM'", 
        "'TABLES'", "'TABLESPACE'", "'TEMP'", "'TEMPLATE'", "'TEMPORARY'", 
        "'TEXT'", "'TRANSACTION'", "'TRIGGER'", "'TRUNCATE'", "'TRUSTED'", 
        "'TYPE'", "'TYPES'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNENCRYPTED'", 
        "'UNKNOWN'", "'UNLISTEN'", "'UNLOGGED'", "'UNTIL'", "'UPDATE'", 
        "'VACUUM'", "'VALID'", "'VALIDATE'", "'VALIDATOR'", "'VARYING'", 
        "'VERSION'", "'VIEW'", "'VOLATILE'", "'WHITESPACE'", "'WITHOUT'", 
        "'WORK'", "'WRAPPER'", "'WRITE'", "'XML'", "'YEAR'", "'YES'", "'ZONE'", 
        "'BETWEEN'", "'BIGINT'", "'BIT'", "'BOOLEAN'", "'CHAR'", "'CHARACTER'", 
        "'COALESCE'", "'DEC'", "'DECIMAL'", "'EXISTS'", "'EXTRACT'", "'FLOAT'", 
        "'GREATEST'", "'INOUT'", "'INT'", "'INTEGER'", "'INTERVAL'", "'LEAST'", 
        "'NATIONAL'", "'NCHAR'", "'NONE'", "'NULLIF'", "'NUMERIC'", "'OVERLAY'", 
        "'POSITION'", "'PRECISION'", "'REAL'", "'ROW'", "'SETOF'", "'SMALLINT'", 
        "'SUBSTRING'", "'TIME'", "'TIMESTAMP'", "'TREAT'", "'TRIM'", "'VALUES'", 
        "'VARCHAR'", "'XMLATTRIBUTES'", "'XMLCONCAT'", "'XMLELEMENT'", "'XMLEXISTS'", 
        "'XMLFOREST'", "'XMLPARSE'", "'XMLPI'", "'XMLROOT'", "'XMLSERIALIZE'", 
        "'CALL'", "'CURRENT'", "'ATTACH'", "'DETACH'", "'EXPRESSION'", "'GENERATED'", 
        "'LOGGED'", "'STORED'", "'INCLUDE'", "'ROUTINE'", "'TRANSFORM'", 
        "'IMPORT'", "'POLICY'", "'METHOD'", "'REFERENCING'", "'NEW'", "'OLD'", 
        "'VALUE'", "'SUBSCRIPTION'", "'PUBLICATION'", "'OUT'", "'END'", 
        "'ROUTINES'", "'SCHEMAS'", "'PROCEDURES'", "'INPUT'", "'SUPPORT'", 
        "'PARALLEL'", "'SQL'", "'DEPENDS'", "'OVERRIDING'", "'CONFLICT'", 
        "'SKIP'", "'LOCKED'", "'TIES'", "'ROLLUP'", "'CUBE'", "'GROUPING'", 
        "'SETS'", "'TABLESAMPLE'", "'ORDINALITY'", "'XMLTABLE'", "'COLUMNS'", 
        "'XMLNAMESPACES'", "'ROWTYPE'", "'NORMALIZED'", "'WITHIN'", "'FILTER'", 
        "'GROUPS'", "'OTHERS'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", "'UESCAPE'", 
        "'VIEWS'", "'NORMALIZE'", "'DUMP'", "'PRINT_STRICT_PARAMS'", "'VARIABLE_CONFLICT'", 
        "'ERROR'", "'USE_VARIABLE'", "'USE_COLUMN'", "'ALIAS'", "'CONSTANT'", 
        "'PERFORM'", "'GET'", "'DIAGNOSTICS'", "'STACKED'", "'ELSIF'", "'WHILE'", 
        "'REVERSE'", "'FOREACH'", "'SLICE'", "'EXIT'", "'RETURN'", "'QUERY'", 
        "'RAISE'", "'SQLSTATE'", "'DEBUG'", "'LOG'", "'INFO'", "'NOTICE'", 
        "'WARNING'", "'EXCEPTION'", "'ASSERT'", "'LOOP'", "'OPEN'", "'PEFERENCES'", 
        "'USAGE'", "'CONNECT'", "'PUBLIC'", "'MERGE'", "'MATCHED'", "'BREADTH'", 
        "'DEPTH'", "'UNSAFE'", "'RESTRICTED'", "'SAFE'", "'FINALIZE'", "'MODULUS'", 
        "'REMAINDER'", "'LOGIN'", "'NOLOGIN'", "'REPLICATION'", "'NOREPLICATION'", 
        "'BYPASSRLS'", "'NOBYPASSRLS'", "'PERMISSIVE'", "'RESTRICTIVE'", 
        "'COMPRESSION'", "'PLAIN'", "'EXTENDED'", "'MAIN'", "'SKIP_LOCKED'", 
        "'BUFFER_USAGE_LIMIT'", null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, "'\\\\'", null, null, null, null, null, 
        null, null, "'''"
    ];

    public static readonly symbolicNames = [
        null, "Dollar", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
        "COMMA", "SEMI", "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", 
        "SLASH", "CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", "COLON_EQUALS", 
        "LESS_EQUALS", "EQUALS_GREATER", "GREATER_EQUALS", "DOT_DOT", "NOT_EQUALS", 
        "TYPECAST", "PERCENT", "PARAM", "Operator", "KW_ALL", "KW_ANALYSE", 
        "KW_ANALYZE", "KW_AND", "KW_ANY", "KW_ARRAY", "KW_AS", "KW_ASC", 
        "KW_ASYMMETRIC", "KW_BOTH", "KW_CASE", "KW_CAST", "KW_CHECK", "KW_COLLATE", 
        "KW_COLUMN", "KW_CONSTRAINT", "KW_CREATE", "KW_CURRENT_CATALOG", 
        "KW_CURRENT_DATE", "KW_CURRENT_ROLE", "KW_CURRENT_TIME", "KW_CURRENT_TIMESTAMP", 
        "KW_CURRENT_USER", "KW_DEFAULT", "KW_DEFERRABLE", "KW_DESC", "KW_DISTINCT", 
        "KW_DO", "KW_ELSE", "KW_EXCEPT", "KW_FALSE", "KW_FETCH", "KW_FOR", 
        "KW_FOREIGN", "KW_FROM", "KW_GRANT", "KW_GROUP", "KW_HAVING", "KW_IN", 
        "KW_INITIALLY", "KW_INTERSECT", "KW_INTO", "KW_LATERAL", "KW_LEADING", 
        "KW_LIMIT", "KW_LOCALTIME", "KW_LOCALTIMESTAMP", "KW_NOT", "KW_NULL", 
        "KW_OFFSET", "KW_ON", "KW_ONLY", "KW_OR", "KW_ORDER", "KW_PLACING", 
        "KW_PRIMARY", "KW_REFERENCES", "KW_RETURNING", "KW_SELECT", "KW_SESSION_USER", 
        "KW_SOME", "KW_SYMMETRIC", "KW_TABLE", "KW_THEN", "KW_TO", "KW_TRAILING", 
        "KW_TRUE", "KW_UNION", "KW_UNIQUE", "KW_USER", "KW_USING", "KW_VARIADIC", 
        "KW_WHEN", "KW_WHERE", "KW_WINDOW", "KW_WITH", "KW_AUTHORIZATION", 
        "KW_BINARY", "KW_COLLATION", "KW_CONCURRENTLY", "KW_CROSS", "KW_CURRENT_SCHEMA", 
        "KW_FREEZE", "KW_FULL", "KW_ILIKE", "KW_INNER", "KW_IS", "KW_ISNULL", 
        "KW_JOIN", "KW_LEFT", "KW_LIKE", "KW_NATURAL", "KW_NOTNULL", "KW_OUTER", 
        "KW_OVER", "KW_OVERLAPS", "KW_RIGHT", "KW_SIMILAR", "KW_VERBOSE", 
        "KW_ABORT", "KW_ABSOLUTE", "KW_ACCESS", "KW_ACTION", "KW_ADD", "KW_ADMIN", 
        "KW_AFTER", "KW_AGGREGATE", "KW_ALSO", "KW_ALTER", "KW_ALWAYS", 
        "KW_ASSERTION", "KW_ASSIGNMENT", "KW_AT", "KW_ATTRIBUTE", "KW_BACKWARD", 
        "KW_BEFORE", "KW_BEGIN", "KW_BY", "KW_CACHE", "KW_CALLED", "KW_CASCADE", 
        "KW_CASCADED", "KW_CATALOG", "KW_CHAIN", "KW_CHARACTERISTICS", "KW_CHECKPOINT", 
        "KW_CLASS", "KW_CLOSE", "KW_CLUSTER", "KW_COMMENT", "KW_COMMENTS", 
        "KW_COMMIT", "KW_COMMITTED", "KW_CONFIGURATION", "KW_CONNECTION", 
        "KW_CONSTRAINTS", "KW_CONTENT", "KW_CONTINUE", "KW_CONVERSION", 
        "KW_COPY", "KW_COST", "KW_CSV", "KW_CURSOR", "KW_CYCLE", "KW_DATA", 
        "KW_DATABASE", "KW_DAY", "KW_DEALLOCATE", "KW_DECLARE", "KW_DEFAULTS", 
        "KW_DEFERRED", "KW_DEFINER", "KW_DELETE", "KW_DELIMITER", "KW_DELIMITERS", 
        "KW_DICTIONARY", "KW_DISABLE", "KW_DISCARD", "KW_DOCUMENT", "KW_DOMAIN", 
        "KW_DOUBLE", "KW_DROP", "KW_EACH", "KW_ENABLE", "KW_ENCODING", "KW_ENCRYPTED", 
        "KW_ENUM", "KW_ESCAPE", "KW_EVENT", "KW_EXCLUDE", "KW_EXCLUDING", 
        "KW_EXCLUSIVE", "KW_EXECUTE", "KW_EXPLAIN", "KW_EXTENSION", "KW_EXTERNAL", 
        "KW_FAMILY", "KW_FIRST", "KW_FOLLOWING", "KW_FORCE", "KW_FORWARD", 
        "KW_FUNCTION", "KW_FUNCTIONS", "KW_GLOBAL", "KW_GRANTED", "KW_HANDLER", 
        "KW_HEADER", "KW_HOLD", "KW_HOUR", "KW_IDENTITY", "KW_IF", "KW_IMMEDIATE", 
        "KW_IMMUTABLE", "KW_IMPLICIT", "KW_INCLUDING", "KW_INCREMENT", "KW_INDEX", 
        "KW_INDEXES", "KW_INHERIT", "KW_NOINHERIT", "KW_SUPERUSER", "KW_NOSUPERUSER", 
        "KW_CREATEDB", "KW_NOCREATEDB", "KW_CREATEROLE", "KW_NOCREATEROLE", 
        "KW_CREATEUSER", "KW_NOCREATEUSER", "KW_INHERITS", "KW_INLINE", 
        "KW_INSENSITIVE", "KW_INSERT", "KW_INSTEAD", "KW_INVOKER", "KW_ISOLATION", 
        "KW_KEY", "KW_LABEL", "KW_LANGUAGE", "KW_LARGE", "KW_LAST", "KW_LEAKPROOF", 
        "KW_LEVEL", "KW_LISTEN", "KW_LOAD", "KW_LOCAL", "KW_LOCATION", "KW_LOCK", 
        "KW_MAPPING", "KW_MATCH", "KW_MATERIALIZED", "KW_MAXVALUE", "KW_MINUTE", 
        "KW_MINVALUE", "KW_MODE", "KW_MONTH", "KW_MOVE", "KW_NAME", "KW_NAMES", 
        "KW_NEXT", "KW_NO", "KW_NOTHING", "KW_NOTIFY", "KW_NOWAIT", "KW_NULLS", 
        "KW_OBJECT", "KW_OF", "KW_OFF", "KW_OIDS", "KW_OPERATOR", "KW_OPTION", 
        "KW_OPTIONS", "KW_OWNED", "KW_OWNER", "KW_PARSER", "KW_PARTIAL", 
        "KW_PARTITION", "KW_PASSING", "KW_PASSWORD", "KW_PLANS", "KW_PRECEDING", 
        "KW_PREPARE", "KW_PREPARED", "KW_PRESERVE", "KW_PRIOR", "KW_PRIVILEGES", 
        "KW_PROCEDURAL", "KW_PROCEDURE", "KW_PROGRAM", "KW_QUOTE", "KW_RANGE", 
        "KW_READ", "KW_REASSIGN", "KW_RECHECK", "KW_RECURSIVE", "KW_REF", 
        "KW_REFRESH", "KW_REINDEX", "KW_RELATIVE", "KW_RELEASE", "KW_RENAME", 
        "KW_REPEATABLE", "KW_REPLACE", "KW_REPLICA", "KW_RESET", "KW_RESTART", 
        "KW_RESTRICT", "KW_RETURNS", "KW_REVOKE", "KW_ROLE", "KW_ROLLBACK", 
        "KW_ROWS", "KW_RULE", "KW_SAVEPOINT", "KW_SCHEMA", "KW_SCROLL", 
        "KW_SEARCH", "KW_SECOND", "KW_SECURITY", "KW_SEQUENCE", "KW_SEQUENCES", 
        "KW_SERIALIZABLE", "KW_SERVER", "KW_SESSION", "KW_SET", "KW_SHARE", 
        "KW_SHOW", "KW_SIMPLE", "KW_SNAPSHOT", "KW_STABLE", "KW_STANDALONE", 
        "KW_START", "KW_STATEMENT", "KW_STATISTICS", "KW_STDIN", "KW_STDOUT", 
        "KW_STORAGE", "KW_STRICT", "KW_STRIP", "KW_SYSID", "KW_SYSTEM", 
        "KW_TABLES", "KW_TABLESPACE", "KW_TEMP", "KW_TEMPLATE", "KW_TEMPORARY", 
        "KW_TEXT", "KW_TRANSACTION", "KW_TRIGGER", "KW_TRUNCATE", "KW_TRUSTED", 
        "KW_TYPE", "KW_TYPES", "KW_UNBOUNDED", "KW_UNCOMMITTED", "KW_UNENCRYPTED", 
        "KW_UNKNOWN", "KW_UNLISTEN", "KW_UNLOGGED", "KW_UNTIL", "KW_UPDATE", 
        "KW_VACUUM", "KW_VALID", "KW_VALIDATE", "KW_VALIDATOR", "KW_VARYING", 
        "KW_VERSION", "KW_VIEW", "KW_VOLATILE", "KW_WHITESPACE", "KW_WITHOUT", 
        "KW_WORK", "KW_WRAPPER", "KW_WRITE", "KW_XML", "KW_YEAR", "KW_YES", 
        "KW_ZONE", "KW_BETWEEN", "KW_BIGINT", "KW_BIT", "KW_BOOLEAN", "KW_CHAR", 
        "KW_CHARACTER", "KW_COALESCE", "KW_DEC", "KW_DECIMAL", "KW_EXISTS", 
        "KW_EXTRACT", "KW_FLOAT", "KW_GREATEST", "KW_INOUT", "KW_INT", "KW_INTEGER", 
        "KW_INTERVAL", "KW_LEAST", "KW_NATIONAL", "KW_NCHAR", "KW_NONE", 
        "KW_NULLIF", "KW_NUMERIC", "KW_OVERLAY", "KW_POSITION", "KW_PRECISION", 
        "KW_REAL", "KW_ROW", "KW_SETOF", "KW_SMALLINT", "KW_SUBSTRING", 
        "KW_TIME", "KW_TIMESTAMP", "KW_TREAT", "KW_TRIM", "KW_VALUES", "KW_VARCHAR", 
        "KW_XMLATTRIBUTES", "KW_XMLCONCAT", "KW_XMLELEMENT", "KW_XMLEXISTS", 
        "KW_XMLFOREST", "KW_XMLPARSE", "KW_XMLPI", "KW_XMLROOT", "KW_XMLSERIALIZE", 
        "KW_CALL", "KW_CURRENT", "KW_ATTACH", "KW_DETACH", "KW_EXPRESSION", 
        "KW_GENERATED", "KW_LOGGED", "KW_STORED", "KW_INCLUDE", "KW_ROUTINE", 
        "KW_TRANSFORM", "KW_IMPORT", "KW_POLICY", "KW_METHOD", "KW_REFERENCING", 
        "KW_NEW", "KW_OLD", "KW_VALUE", "KW_SUBSCRIPTION", "KW_PUBLICATION", 
        "KW_OUT", "KW_END", "KW_ROUTINES", "KW_SCHEMAS", "KW_PROCEDURES", 
        "KW_INPUT", "KW_SUPPORT", "KW_PARALLEL", "KW_SQL", "KW_DEPENDS", 
        "KW_OVERRIDING", "KW_CONFLICT", "KW_SKIP", "KW_LOCKED", "KW_TIES", 
        "KW_ROLLUP", "KW_CUBE", "KW_GROUPING", "KW_SETS", "KW_TABLESAMPLE", 
        "KW_ORDINALITY", "KW_XMLTABLE", "KW_COLUMNS", "KW_XMLNAMESPACES", 
        "KW_ROWTYPE", "KW_NORMALIZED", "KW_WITHIN", "KW_FILTER", "KW_GROUPS", 
        "KW_OTHERS", "KW_NFC", "KW_NFD", "KW_NFKC", "KW_NFKD", "KW_UESCAPE", 
        "KW_VIEWS", "KW_NORMALIZE", "KW_DUMP", "KW_PRINT_STRICT_PARAMS", 
        "KW_VARIABLE_CONFLICT", "KW_ERROR", "KW_USE_VARIABLE", "KW_USE_COLUMN", 
        "KW_ALIAS", "KW_CONSTANT", "KW_PERFORM", "KW_GET", "KW_DIAGNOSTICS", 
        "KW_STACKED", "KW_ELSIF", "KW_WHILE", "KW_REVERSE", "KW_FOREACH", 
        "KW_SLICE", "KW_EXIT", "KW_RETURN", "KW_QUERY", "KW_RAISE", "KW_SQLSTATE", 
        "KW_DEBUG", "KW_LOG", "KW_INFO", "KW_NOTICE", "KW_WARNING", "KW_EXCEPTION", 
        "KW_ASSERT", "KW_LOOP", "KW_OPEN", "KW_PEFERENCES", "KW_USAGE", 
        "KW_CONNECT", "KW_PUBLIC", "KW_MERGE", "KW_MATCHED", "KW_BREADTH", 
        "KW_DEPTH", "KW_UNSAFE", "KW_RESTRICTED", "KW_SAFE", "KW_FINALIZE", 
        "KW_MODULUS", "KW_REMAINDER", "KW_LOGIN", "KW_NOLOGIN", "KW_REPLICATION", 
        "KW_NOREPLICATION", "KW_BYPASSRLS", "KW_NOBYPASSRLS", "KW_PERMISSIVE", 
        "KW_RESTRICTIVE", "KW_COMPRESSION", "KW_PLAIN", "KW_EXTENDED", "KW_MAIN", 
        "KW_SKIP_LOCKED", "KW_BUFFER_USAGE_LIMIT", "Identifier", "QuotedIdentifier", 
        "UnterminatedQuotedIdentifier", "InvalidQuotedIdentifier", "InvalidUnterminatedQuotedIdentifier", 
        "UnicodeQuotedIdentifier", "UnterminatedUnicodeQuotedIdentifier", 
        "InvalidUnicodeQuotedIdentifier", "InvalidUnterminatedUnicodeQuotedIdentifier", 
        "StringConstant", "UnterminatedStringConstant", "UnicodeEscapeStringConstant", 
        "UnterminatedUnicodeEscapeStringConstant", "BeginDollarStringConstant", 
        "BinaryStringConstant", "UnterminatedBinaryStringConstant", "InvalidBinaryStringConstant", 
        "InvalidUnterminatedBinaryStringConstant", "HexadecimalStringConstant", 
        "UnterminatedHexadecimalStringConstant", "InvalidHexadecimalStringConstant", 
        "InvalidUnterminatedHexadecimalStringConstant", "Integral", "NumericFail", 
        "Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", "Whitespace", 
        "Newline", "LineComment", "BlockComment", "UnterminatedBlockComment", 
        "MetaCommand", "EndMetaCommand", "ErrorCharacter", "EscapeStringConstant", 
        "UnterminatedEscapeStringConstant", "InvalidEscapeStringConstant", 
        "InvalidUnterminatedEscapeStringConstant", "DollarText", "EndDollarStringConstant", 
        "AfterEscapeStringConstantWithNewlineMode_Continued"
    ];
    public static readonly ruleNames = [
        "program", "singleStmt", "stmt", "callstmt", "createrolestmt", "optrolelist", 
        "alteroptrolelist", "alteroptroleelem", "createoptroleelem", "createuserstmt", 
        "alterrolestmt", "alterrolesetstmt", "alterroutinestmt", "alter_routine_cluase", 
        "routine_action", "creategroupstmt", "altergroupstmt", "createschemastmt", 
        "schema_name_create", "schema_stmt", "variablesetstmt", "set_rest", 
        "generic_set", "set_rest_more", "var_name", "var_list", "var_value", 
        "iso_level", "opt_boolean_or_string_column", "opt_boolean_or_string", 
        "zone_value", "nonreservedword_or_sconst", "variableresetstmt", 
        "reset_rest", "setresetclause", "functionsetresetclause", "variableshowstmt", 
        "constraintssetstmt", "checkpointstmt", "discardstmt", "altertablestmt", 
        "alter_table_cmds", "partition_bound_spec", "partition_bound_cluase", 
        "partition_bound_choose", "partition_with_cluase", "partition_cmd", 
        "index_partition_cmd", "alter_table_cmd", "alter_column_default", 
        "opt_drop_behavior", "opt_collate_clause", "replica_identity", "reloptions", 
        "opt_reloptions", "reloption_list", "reloption_elem", "alter_identity_column_option", 
        "partitionboundspec", "hash_partbound_elem", "hash_partbound", "altercompositetypestmt", 
        "alter_type_cmd", "closeportalstmt", "copystmt", "copy_file_name", 
        "copy_options", "copy_opt_item", "copy_delimiter", "copy_generic_opt_elem", 
        "copy_generic_opt_arg", "copy_generic_opt_arg_list", "createstmt", 
        "opttemp", "opttypedtableelementlist", "tableelementlist", "typedtableelementlist", 
        "tableelement", "typedtableelement", "column_def", "storageCluase", 
        "colquallist", "colconstraint", "colconstraintelem", "nulls_distinct", 
        "generated_when", "deferrable_trigger", "initially_trigger", "tablelikeclause", 
        "tablelikeoption", "tableconstraint", "constraintelem", "opt_column_list", 
        "opt_column_list_create", "column_list", "opt_c_include", "key_match", 
        "exclusionconstraintlist", "exclusionconstraintelem", "exclusionwhereclause", 
        "key_actions", "key_update", "key_delete", "key_action", "optinherit", 
        "partitionspec", "part_params", "part_elem", "table_access_method_clause", 
        "optwith", "oncommitoption", "opttablespace", "index_paramenters_create", 
        "optconstablespace", "existingindex", "createstatsstmt", "alterstatsstmt", 
        "createasstmt", "create_as_target", "opt_with_data", "creatematviewstmt", 
        "create_mv_target", "refreshmatviewstmt", "createseqstmt", "alterseqstmt", 
        "optparenthesizedseqoptlist", "seqoptlist", "seqoptelem", "numericonly", 
        "numericonly_list", "createplangstmt", "createtablespacestmt", "createextensionstmt", 
        "create_extension_opt_item", "alterextensionstmt", "alterextensioncontentsstmt", 
        "createfdwstmt", "fdw_option", "fdw_options", "alterfdwstmt", "create_generic_options", 
        "generic_option_list", "alter_generic_options", "alter_generic_option_list", 
        "alter_generic_option_elem", "generic_option_elem", "createforeignserverstmt", 
        "foreign_server_version", "alterforeignserverstmt", "createforeigntablestmt", 
        "importforeignschemastmt", "import_qualification", "createusermappingstmt", 
        "auth_ident", "alterusermappingstmt", "createpolicystmt", "alterpolicystmt", 
        "alterprocedurestmt", "procedure_cluase", "procedure_action", "rowsecurityoptionalexpr", 
        "rowsecurityoptionalwithcheck", "rowsecuritydefaulttorole", "rowsecuritydefaultpermissive", 
        "row_security_cmd", "createamstmt", "createtrigstmt", "triggeractiontime", 
        "foreachrow", "triggerevents", "triggeroneevent", "triggerreferencing", 
        "triggertransition", "triggerforspec", "triggerwhen", "function_or_procedure", 
        "triggerfuncargs", "triggerfuncarg", "constraintattributespec", 
        "constraintattributeElem", "createeventtrigstmt", "event_trigger_when_list", 
        "event_trigger_when_item", "altereventtrigstmt", "enable_trigger", 
        "createassertionstmt", "definestmt", "definition", "def_list", "def_elem", 
        "def_arg", "old_aggr_elem", "event_trigger_value_list", "alterenumstmt", 
        "opt_if_not_exists", "createopclassstmt", "opclass_item_list", "opclass_item", 
        "opt_opfamily", "opclass_purpose", "createopfamilystmt", "alteropfamilystmt", 
        "opclass_drop", "reassignownedstmt", "dropstmt", "view_nameList", 
        "object_type_any_name", "object_type_name", "object_type_name_on_any_name", 
        "any_name_list", "relation_column_name", "any_name", "attrs", "type_name_list", 
        "truncatestmt", "truncate_table", "commentstmt", "seclabelstmt", 
        "fetchstmt", "fetch_args", "from_in", "grantstmt", "revokestmt", 
        "privileges", "beforeprivilegeselect", "privilege_list", "privilege", 
        "privilege_target", "grantee_list", "grantee", "opt_grant_grant_option", 
        "grantrolestmt", "revokerolestmt", "opt_granted_by", "alterdefaultprivilegesstmt", 
        "defacloption", "defaclaction", "defacl_privilege_target", "indexstmt", 
        "index_params", "index_elem_options", "index_elem", "opt_include", 
        "opt_nulls_order", "createfunctionstmt", "attrilist", "opt_or_replace", 
        "func_args", "func_args_list", "routine_with_argtypes_list", "routine_with_argtypes", 
        "procedure_with_argtypes_list", "procedure_with_argtypes", "function_with_argtypes_list", 
        "function_with_argtypes", "func_args_with_defaults", "func_args_with_defaults_list", 
        "func_arg", "arg_class", "func_type", "func_arg_with_default", "aggr_args", 
        "aggregate_with_argtypes", "aggregate_with_argtypes_list", "createfunc_opt_list", 
        "common_func_opt_item", "createfunc_opt_item", "transform_type_name_list", 
        "opt_definition", "table_func_column", "table_func_column_list", 
        "alterfunctionstmt", "alterFunctionTypeClause", "removefuncstmt", 
        "removeaggrstmt", "removeoperstmt", "oper_argtypes", "any_operator", 
        "operator_with_argtypes_list", "operator_with_argtypes", "dostmt", 
        "dostmt_opt_item", "createcaststmt", "cast_context", "opt_if_exists", 
        "createtransformstmt", "transform_element_list", "sql_with_function", 
        "reindexstmt", "reindex_target_multitable", "altertblspcstmt", "renamestmt", 
        "alterobjectdependsstmt", "alterobjectschemastmt", "alteroperatorstmt", 
        "operator_def_list", "operator_def_elem", "operator_def_arg", "altertypestmt", 
        "alterownerstmt", "createpublicationstmt", "publication_for_tables", 
        "alterpublicationstmt", "createsubscriptionstmt", "publication_name_list", 
        "altersubscriptionstmt", "rulestmt", "ruleactionlist", "ruleactionmulti", 
        "ruleactionstmt", "event", "notifystmt", "notify_payload", "listenstmt", 
        "unlistenstmt", "transactionstmt", "opt_transaction", "transaction_mode_item", 
        "transaction_mode_list", "viewstmt", "opt_check_option", "loadstmt", 
        "createdbstmt", "createdb_opt_items", "createdb_opt_item", "createdb_opt_name", 
        "alterdatabasestmt", "alterdatabasesetstmt", "drop_option_list", 
        "altercollationstmt", "altersystemstmt", "createdomainstmt", "alterdomainstmt", 
        "altertsdictionarystmt", "altertsconfigurationstmt", "createconversionstmt", 
        "clusterstmt", "opt_verbose_list", "vacuumstmt", "analyzestmt", 
        "vac_analyze_option_list", "analyze_keyword", "vac_analyze_option_elem", 
        "vac_analyze_option_name", "vac_analyze_option_arg", "analyze_options_list", 
        "analyze_option_elem", "opt_verbose", "vacuum_relation", "vacuum_relation_list", 
        "explainstmt", "explainablestmt", "explain_option_list", "preparestmt", 
        "prep_type_clause", "preparablestmt", "executestmt", "execute_param_clause", 
        "deallocatestmt", "insertstmt", "insert_rest", "insert_column_list", 
        "insert_column_item", "opt_on_conflict", "opt_conf_expr", "returning_clause", 
        "deletestmt", "lockstmt", "lock_type", "opt_nowait_or_skip", "updatestmt", 
        "set_clause_list", "set_clause", "declarecursorstmt", "cursor_options", 
        "selectstmt", "select_with_parens", "select_no_parens", "select_clause", 
        "simple_select", "set_operator_with_all_or_distinct", "with_clause", 
        "common_table_expr", "search_cluase", "cycle_cluase", "into_clause", 
        "opttempTableName", "all_or_distinct", "distinct_clause", "sort_clause", 
        "sortby", "select_limit", "limit_clause", "fetch_clause", "offset_clause", 
        "select_fetch_first_value", "row_or_rows", "group_clause", "group_by_list", 
        "group_by_item", "empty_grouping_set", "having_clause", "for_locking_clause", 
        "for_locking_item", "for_locking_strength", "values_clause", "from_clause", 
        "from_list", "table_ref", "alias_clause", "func_alias_clause", "join_type", 
        "join_qual", "relation_expr", "view_relation_expr", "publication_relation_expr", 
        "relation_expr_list", "publication_relation_expr_list", "relation_expr_opt_alias", 
        "tablesample_clause", "opt_repeatable_clause", "func_table", "rowsfrom_item", 
        "rowsfrom_list", "where_clause", "where_or_current_clause", "tablefuncelementlist", 
        "tablefuncelement", "xmltable", "xmltable_column_list", "xmltable_column_el", 
        "xmltable_column_option_list", "xmltable_column_option_el", "xml_namespace_list", 
        "xml_namespace_el", "typename", "opt_array_bounds", "simpletypename", 
        "consttypename", "generictype", "numeric", "opt_float", "bit", "character", 
        "character_c", "constdatetime", "opt_interval", "interval_second", 
        "comparisonOperator", "expression", "booleanExpression", "predicate", 
        "valueExpression", "primaryExpression", "func_application", "func_expr", 
        "func_expr_windowless", "func_expr_common_subexpr", "xml_root_version", 
        "opt_xml_root_standalone", "xml_attributes", "xml_attribute_list", 
        "xml_attribute_el", "document_or_content", "xml_whitespace_option", 
        "xmlexists_argument", "xml_passing_mech", "window_clause", "window_definition_list", 
        "window_definition", "over_clause", "window_specification", "opt_frame_clause", 
        "frame_bound", "row", "explicit_row", "sub_type", "all_op", "mathop", 
        "qual_op", "qual_all_op", "subquery_Op", "expr_list", "column_expr_list_noparen", 
        "column_expr_list", "column_expr", "column_expr_noparen", "func_arg_list", 
        "func_arg_expr", "array_expr", "array_expr_list", "extract_list", 
        "extract_arg", "unicode_normal_form", "overlay_list", "substr_list", 
        "trim_list", "when_clause", "indirection_el", "indirection", "opt_indirection", 
        "target_list", "target_el", "qualified_name_list", "table_name_list", 
        "schema_name_list", "database_nameList", "procedure_name_list", 
        "tablespace_name_create", "tablespace_name", "table_name_create", 
        "table_name", "view_name_create", "view_name", "qualified_name", 
        "tablespace_name_list", "name_list", "database_name_create", "database_name", 
        "schema_name", "routine_name_create", "routine_name", "procedure_name", 
        "procedure_name_create", "column_name", "column_name_create", "function_name_create", 
        "function_name", "usual_name", "sconst", "anysconst", "signediconst", 
        "rolespec", "role_list", "colid", "type_function_name", "nonreservedword", 
        "collabel", "identifier", "unreserved_keyword", "col_name_keyword", 
        "type_func_name_keyword", "reserved_keyword", "comp_option", "option_value", 
        "pl_block", "decl_sect", "decl_stmts", "label_decl", "decl_statement", 
        "opt_scrollable", "decl_cursor_args", "decl_cursor_arglist", "decl_cursor_arg", 
        "decl_aliasitem", "decl_defkey", "assign_operator", "proc_sect", 
        "proc_stmt", "stmt_perform", "stmt_call", "stmt_assign", "stmt_getdiag", 
        "getdiag_list", "getdiag_list_item", "assign_var", "stmt_if", "stmt_elsifs", 
        "stmt_else", "stmt_case", "case_when", "stmt_loop_while_for", "for_control", 
        "opt_for_using_expression", "stmt_foreach_a", "stmt_exit", "stmt_return", 
        "stmt_raise", "opt_stmt_raise_level", "opt_raise_list", "opt_raise_using_elem", 
        "opt_raise_using_elem_list", "stmt_assert", "loop_body", "stmt_execsql", 
        "stmt_dynexecute", "opt_execute_into", "stmt_open", "opt_open_bound_list_item", 
        "opt_open_bound_list", "stmt_fetch", "opt_fetch_direction", "stmt_move", 
        "mergestmt", "data_source", "merge_when_clause", "merge_insert", 
        "merge_update", "default_values_or_values", "exprofdefaultlist", 
        "exprofdefault", "stmt_close", "stmt_null", "stmt_commit_or_rollback", 
        "stmt_set", "cursor_variable", "exception_sect", "proc_exception", 
        "proc_conditions", "proc_condition", "any_identifier", "plsql_unreserved_keyword", 
        "sql_expression",
    ];

    public get grammarFileName(): string { return "PostgreSqlParser.g4"; }
    public get literalNames(): (string | null)[] { return PostgreSqlParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return PostgreSqlParser.symbolicNames; }
    public get ruleNames(): string[] { return PostgreSqlParser.ruleNames; }
    public get serializedATN(): number[] { return PostgreSqlParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, PostgreSqlParser._ATN, PostgreSqlParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public program(): ProgramContext {
        let localContext = new ProgramContext(this.context, this.state);
        this.enterRule(localContext, 0, PostgreSqlParser.RULE_program);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1229;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 2 || _la === 31 || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 570441729) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 142606337) !== 0) || _la === 105 || _la === 129 || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & 2159673601) !== 0) || ((((_la - 177)) & ~0x1F) === 0 && ((1 << (_la - 177)) & 100680739) !== 0) || ((((_la - 241)) & ~0x1F) === 0 && ((1 << (_la - 241)) & 1090557953) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 679839745) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 272417) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 6401) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4196353) !== 0) || _la === 454 || _la === 525 || _la === 581) {
                {
                {
                this.state = 1226;
                this.singleStmt();
                }
                }
                this.state = 1231;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1232;
            this.match(PostgreSqlParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleStmt(): SingleStmtContext {
        let localContext = new SingleStmtContext(this.context, this.state);
        this.enterRule(localContext, 2, PostgreSqlParser.RULE_singleStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1234;
            this.stmt();
            this.state = 1236;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 7) {
                {
                this.state = 1235;
                this.match(PostgreSqlParser.SEMI);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt(): StmtContext {
        let localContext = new StmtContext(this.context, this.state);
        this.enterRule(localContext, 4, PostgreSqlParser.RULE_stmt);
        let _la: number;
        try {
            this.state = 1358;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1238;
                this.altereventtrigstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1239;
                this.altercollationstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1240;
                this.alterdatabasestmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1241;
                this.alterdatabasesetstmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1242;
                this.alterdefaultprivilegesstmt();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1243;
                this.alterdomainstmt();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1244;
                this.alterenumstmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1245;
                this.alterextensionstmt();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1246;
                this.alterextensioncontentsstmt();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1247;
                this.alterfdwstmt();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1248;
                this.alterforeignserverstmt();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1249;
                this.alterfunctionstmt();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1250;
                this.altergroupstmt();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1251;
                this.alterobjectdependsstmt();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1252;
                this.alterobjectschemastmt();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1253;
                this.alterownerstmt();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1254;
                this.alteroperatorstmt();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1255;
                this.altertypestmt();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1256;
                this.alterpolicystmt();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1257;
                this.alterprocedurestmt();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1258;
                this.alterseqstmt();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1259;
                this.altersystemstmt();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 1260;
                this.altertablestmt();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 1261;
                this.altertblspcstmt();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 1262;
                this.altercompositetypestmt();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 1263;
                this.alterpublicationstmt();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 1264;
                this.alterrolesetstmt();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 1265;
                this.alterroutinestmt();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 1266;
                this.alterrolestmt();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 1267;
                this.altersubscriptionstmt();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 1268;
                this.alterstatsstmt();
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 1269;
                this.altertsconfigurationstmt();
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 1270;
                this.altertsdictionarystmt();
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 1271;
                this.alterusermappingstmt();
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 1272;
                this.analyzestmt();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 1273;
                this.callstmt();
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 1274;
                this.checkpointstmt();
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 1275;
                this.closeportalstmt();
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 1276;
                this.clusterstmt();
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 1277;
                this.commentstmt();
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 1278;
                this.constraintssetstmt();
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 1279;
                this.copystmt();
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 1280;
                this.createamstmt();
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 1281;
                this.createasstmt();
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 1282;
                this.createassertionstmt();
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 1283;
                this.createcaststmt();
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 1284;
                this.createconversionstmt();
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 1285;
                this.createdomainstmt();
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 1286;
                this.createextensionstmt();
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 1287;
                this.createfdwstmt();
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 1288;
                this.createforeignserverstmt();
                }
                break;
            case 52:
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 1289;
                this.createforeigntablestmt();
                }
                break;
            case 53:
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 1290;
                this.createfunctionstmt();
                }
                break;
            case 54:
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 1291;
                this.creategroupstmt();
                }
                break;
            case 55:
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 1292;
                this.creatematviewstmt();
                }
                break;
            case 56:
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 1293;
                this.createopclassstmt();
                }
                break;
            case 57:
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 1294;
                this.createopfamilystmt();
                }
                break;
            case 58:
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 1295;
                this.createpublicationstmt();
                }
                break;
            case 59:
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 1296;
                this.alteropfamilystmt();
                }
                break;
            case 60:
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 1297;
                this.createpolicystmt();
                }
                break;
            case 61:
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 1298;
                this.createplangstmt();
                }
                break;
            case 62:
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 1299;
                this.createschemastmt();
                }
                break;
            case 63:
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 1300;
                this.createseqstmt();
                }
                break;
            case 64:
                this.enterOuterAlt(localContext, 64);
                {
                this.state = 1301;
                this.createstmt();
                }
                break;
            case 65:
                this.enterOuterAlt(localContext, 65);
                {
                this.state = 1302;
                this.createsubscriptionstmt();
                }
                break;
            case 66:
                this.enterOuterAlt(localContext, 66);
                {
                this.state = 1303;
                this.createstatsstmt();
                }
                break;
            case 67:
                this.enterOuterAlt(localContext, 67);
                {
                this.state = 1304;
                this.createtablespacestmt();
                }
                break;
            case 68:
                this.enterOuterAlt(localContext, 68);
                {
                this.state = 1305;
                this.createtransformstmt();
                }
                break;
            case 69:
                this.enterOuterAlt(localContext, 69);
                {
                this.state = 1306;
                this.createtrigstmt();
                }
                break;
            case 70:
                this.enterOuterAlt(localContext, 70);
                {
                this.state = 1307;
                this.createeventtrigstmt();
                }
                break;
            case 71:
                this.enterOuterAlt(localContext, 71);
                {
                this.state = 1308;
                this.createrolestmt();
                }
                break;
            case 72:
                this.enterOuterAlt(localContext, 72);
                {
                this.state = 1309;
                this.createuserstmt();
                }
                break;
            case 73:
                this.enterOuterAlt(localContext, 73);
                {
                this.state = 1310;
                this.createusermappingstmt();
                }
                break;
            case 74:
                this.enterOuterAlt(localContext, 74);
                {
                this.state = 1311;
                this.createdbstmt();
                }
                break;
            case 75:
                this.enterOuterAlt(localContext, 75);
                {
                this.state = 1312;
                this.deallocatestmt();
                }
                break;
            case 76:
                this.enterOuterAlt(localContext, 76);
                {
                this.state = 1313;
                this.declarecursorstmt();
                }
                break;
            case 77:
                this.enterOuterAlt(localContext, 77);
                {
                this.state = 1314;
                this.definestmt();
                }
                break;
            case 78:
                this.enterOuterAlt(localContext, 78);
                {
                this.state = 1315;
                this.deletestmt();
                }
                break;
            case 79:
                this.enterOuterAlt(localContext, 79);
                {
                this.state = 1316;
                this.discardstmt();
                }
                break;
            case 80:
                this.enterOuterAlt(localContext, 80);
                {
                this.state = 1317;
                this.dostmt();
                }
                break;
            case 81:
                this.enterOuterAlt(localContext, 81);
                {
                this.state = 1318;
                this.dropstmt();
                }
                break;
            case 82:
                this.enterOuterAlt(localContext, 82);
                {
                this.state = 1319;
                this.executestmt();
                }
                break;
            case 83:
                this.enterOuterAlt(localContext, 83);
                {
                this.state = 1320;
                this.explainstmt();
                }
                break;
            case 84:
                this.enterOuterAlt(localContext, 84);
                {
                this.state = 1321;
                this.fetchstmt();
                }
                break;
            case 85:
                this.enterOuterAlt(localContext, 85);
                {
                this.state = 1322;
                this.grantstmt();
                }
                break;
            case 86:
                this.enterOuterAlt(localContext, 86);
                {
                this.state = 1323;
                this.grantrolestmt();
                }
                break;
            case 87:
                this.enterOuterAlt(localContext, 87);
                {
                this.state = 1324;
                this.mergestmt();
                }
                break;
            case 88:
                this.enterOuterAlt(localContext, 88);
                {
                this.state = 1325;
                this.importforeignschemastmt();
                }
                break;
            case 89:
                this.enterOuterAlt(localContext, 89);
                {
                this.state = 1326;
                this.indexstmt();
                }
                break;
            case 90:
                this.enterOuterAlt(localContext, 90);
                {
                this.state = 1327;
                this.insertstmt();
                }
                break;
            case 91:
                this.enterOuterAlt(localContext, 91);
                {
                this.state = 1328;
                this.listenstmt();
                }
                break;
            case 92:
                this.enterOuterAlt(localContext, 92);
                {
                this.state = 1329;
                this.refreshmatviewstmt();
                }
                break;
            case 93:
                this.enterOuterAlt(localContext, 93);
                {
                this.state = 1330;
                this.loadstmt();
                }
                break;
            case 94:
                this.enterOuterAlt(localContext, 94);
                {
                this.state = 1331;
                this.lockstmt();
                }
                break;
            case 95:
                this.enterOuterAlt(localContext, 95);
                {
                this.state = 1332;
                this.notifystmt();
                }
                break;
            case 96:
                this.enterOuterAlt(localContext, 96);
                {
                this.state = 1333;
                this.preparestmt();
                }
                break;
            case 97:
                this.enterOuterAlt(localContext, 97);
                {
                this.state = 1334;
                this.reassignownedstmt();
                }
                break;
            case 98:
                this.enterOuterAlt(localContext, 98);
                {
                this.state = 1335;
                this.reindexstmt();
                }
                break;
            case 99:
                this.enterOuterAlt(localContext, 99);
                {
                this.state = 1336;
                this.removeaggrstmt();
                }
                break;
            case 100:
                this.enterOuterAlt(localContext, 100);
                {
                this.state = 1337;
                this.removefuncstmt();
                }
                break;
            case 101:
                this.enterOuterAlt(localContext, 101);
                {
                this.state = 1338;
                this.removeoperstmt();
                }
                break;
            case 102:
                this.enterOuterAlt(localContext, 102);
                {
                this.state = 1339;
                this.renamestmt();
                }
                break;
            case 103:
                this.enterOuterAlt(localContext, 103);
                {
                this.state = 1340;
                this.revokestmt();
                }
                break;
            case 104:
                this.enterOuterAlt(localContext, 104);
                {
                this.state = 1341;
                this.revokerolestmt();
                }
                break;
            case 105:
                this.enterOuterAlt(localContext, 105);
                {
                this.state = 1342;
                this.rulestmt();
                }
                break;
            case 106:
                this.enterOuterAlt(localContext, 106);
                {
                this.state = 1343;
                this.seclabelstmt();
                }
                break;
            case 107:
                this.enterOuterAlt(localContext, 107);
                {
                this.state = 1344;
                this.selectstmt();
                }
                break;
            case 108:
                this.enterOuterAlt(localContext, 108);
                {
                this.state = 1345;
                this.transactionstmt();
                }
                break;
            case 109:
                this.enterOuterAlt(localContext, 109);
                {
                this.state = 1346;
                this.truncatestmt();
                }
                break;
            case 110:
                this.enterOuterAlt(localContext, 110);
                {
                this.state = 1347;
                this.unlistenstmt();
                }
                break;
            case 111:
                this.enterOuterAlt(localContext, 111);
                {
                this.state = 1348;
                this.updatestmt();
                }
                break;
            case 112:
                this.enterOuterAlt(localContext, 112);
                {
                this.state = 1349;
                this.vacuumstmt();
                }
                break;
            case 113:
                this.enterOuterAlt(localContext, 113);
                {
                this.state = 1350;
                this.variableresetstmt();
                }
                break;
            case 114:
                this.enterOuterAlt(localContext, 114);
                {
                this.state = 1351;
                this.variablesetstmt();
                }
                break;
            case 115:
                this.enterOuterAlt(localContext, 115);
                {
                this.state = 1352;
                this.variableshowstmt();
                }
                break;
            case 116:
                this.enterOuterAlt(localContext, 116);
                {
                this.state = 1353;
                this.viewstmt();
                }
                break;
            case 117:
                this.enterOuterAlt(localContext, 117);
                {
                this.state = 1354;
                this.match(PostgreSqlParser.MetaCommand);
                this.state = 1356;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 582) {
                    {
                    this.state = 1355;
                    this.match(PostgreSqlParser.EndMetaCommand);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callstmt(): CallstmtContext {
        let localContext = new CallstmtContext(this.context, this.state);
        this.enterRule(localContext, 6, PostgreSqlParser.RULE_callstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1360;
            this.match(PostgreSqlParser.KW_CALL);
            this.state = 1361;
            this.func_application();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createrolestmt(): CreaterolestmtContext {
        let localContext = new CreaterolestmtContext(this.context, this.state);
        this.enterRule(localContext, 8, PostgreSqlParser.RULE_createrolestmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1363;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 1364;
            this.match(PostgreSqlParser.KW_ROLE);
            this.state = 1365;
            this.rolespec();
            this.state = 1367;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 4, this.context) ) {
            case 1:
                {
                this.state = 1366;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 1369;
            this.optrolelist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optrolelist(): OptrolelistContext {
        let localContext = new OptrolelistContext(this.context, this.state);
        this.enterRule(localContext, 10, PostgreSqlParser.RULE_optrolelist);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1374;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 5, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1371;
                    this.createoptroleelem();
                    }
                    }
                }
                this.state = 1376;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 5, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alteroptrolelist(): AlteroptrolelistContext {
        let localContext = new AlteroptrolelistContext(this.context, this.state);
        this.enterRule(localContext, 12, PostgreSqlParser.RULE_alteroptrolelist);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1380;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 6, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1377;
                    this.alteroptroleelem();
                    }
                    }
                }
                this.state = 1382;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 6, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alteroptroleelem(): AlteroptroleelemContext {
        let localContext = new AlteroptroleelemContext(this.context, this.state);
        this.enterRule(localContext, 14, PostgreSqlParser.RULE_alteroptroleelem);
        let _la: number;
        try {
            this.state = 1421;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_PASSWORD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1383;
                this.match(PostgreSqlParser.KW_PASSWORD);
                this.state = 1386;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 1384;
                    this.sconst();
                    }
                    break;
                case PostgreSqlParser.KW_NULL:
                    {
                    this.state = 1385;
                    this.match(PostgreSqlParser.KW_NULL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1388;
                _la = this.tokenStream.LA(1);
                if(!(_la === 195 || _la === 364)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1389;
                this.match(PostgreSqlParser.KW_PASSWORD);
                this.state = 1390;
                this.sconst();
                }
                break;
            case PostgreSqlParser.KW_INHERIT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1391;
                this.match(PostgreSqlParser.KW_INHERIT);
                }
                break;
            case PostgreSqlParser.KW_NOINHERIT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1392;
                this.match(PostgreSqlParser.KW_NOINHERIT);
                }
                break;
            case PostgreSqlParser.KW_CREATEUSER:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1393;
                this.match(PostgreSqlParser.KW_CREATEUSER);
                }
                break;
            case PostgreSqlParser.KW_NOCREATEUSER:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1394;
                this.match(PostgreSqlParser.KW_NOCREATEUSER);
                }
                break;
            case PostgreSqlParser.KW_CREATEROLE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1395;
                this.match(PostgreSqlParser.KW_CREATEROLE);
                }
                break;
            case PostgreSqlParser.KW_NOCREATEROLE:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1396;
                this.match(PostgreSqlParser.KW_NOCREATEROLE);
                }
                break;
            case PostgreSqlParser.KW_CREATEDB:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1397;
                this.match(PostgreSqlParser.KW_CREATEDB);
                }
                break;
            case PostgreSqlParser.KW_NOCREATEDB:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1398;
                this.match(PostgreSqlParser.KW_NOCREATEDB);
                }
                break;
            case PostgreSqlParser.KW_SUPERUSER:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1399;
                this.match(PostgreSqlParser.KW_SUPERUSER);
                }
                break;
            case PostgreSqlParser.KW_NOSUPERUSER:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1400;
                this.match(PostgreSqlParser.KW_NOSUPERUSER);
                }
                break;
            case PostgreSqlParser.KW_LOGIN:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1401;
                this.match(PostgreSqlParser.KW_LOGIN);
                }
                break;
            case PostgreSqlParser.KW_NOLOGIN:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1402;
                this.match(PostgreSqlParser.KW_NOLOGIN);
                }
                break;
            case PostgreSqlParser.KW_REPLICATION:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1403;
                this.match(PostgreSqlParser.KW_REPLICATION);
                }
                break;
            case PostgreSqlParser.KW_NOREPLICATION:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1404;
                this.match(PostgreSqlParser.KW_NOREPLICATION);
                }
                break;
            case PostgreSqlParser.KW_BYPASSRLS:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1405;
                this.match(PostgreSqlParser.KW_BYPASSRLS);
                }
                break;
            case PostgreSqlParser.KW_NOBYPASSRLS:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1406;
                this.match(PostgreSqlParser.KW_NOBYPASSRLS);
                }
                break;
            case PostgreSqlParser.KW_CONNECTION:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1407;
                this.match(PostgreSqlParser.KW_CONNECTION);
                this.state = 1408;
                this.match(PostgreSqlParser.KW_LIMIT);
                this.state = 1409;
                this.signediconst();
                }
                break;
            case PostgreSqlParser.KW_VALID:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1410;
                this.match(PostgreSqlParser.KW_VALID);
                this.state = 1411;
                this.match(PostgreSqlParser.KW_UNTIL);
                this.state = 1412;
                this.sconst();
                }
                break;
            case PostgreSqlParser.KW_IN:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1413;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1414;
                _la = this.tokenStream.LA(1);
                if(!(_la === 66 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1415;
                this.name_list();
                }
                break;
            case PostgreSqlParser.KW_USER:
            case PostgreSqlParser.KW_ROLE:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1416;
                _la = this.tokenStream.LA(1);
                if(!(_la === 99 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1417;
                this.role_list();
                }
                break;
            case PostgreSqlParser.KW_ADMIN:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 1418;
                this.match(PostgreSqlParser.KW_ADMIN);
                this.state = 1419;
                this.name_list();
                }
                break;
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 1420;
                this.identifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createoptroleelem(): CreateoptroleelemContext {
        let localContext = new CreateoptroleelemContext(this.context, this.state);
        this.enterRule(localContext, 16, PostgreSqlParser.RULE_createoptroleelem);
        let _la: number;
        try {
            this.state = 1431;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 9, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1423;
                this.alteroptroleelem();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1424;
                this.match(PostgreSqlParser.KW_SYSID);
                this.state = 1425;
                this.match(PostgreSqlParser.Integral);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1426;
                _la = this.tokenStream.LA(1);
                if(!(_la === 134 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1427;
                this.role_list();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1428;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1429;
                _la = this.tokenStream.LA(1);
                if(!(_la === 66 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1430;
                this.role_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createuserstmt(): CreateuserstmtContext {
        let localContext = new CreateuserstmtContext(this.context, this.state);
        this.enterRule(localContext, 18, PostgreSqlParser.RULE_createuserstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1433;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 1434;
            this.match(PostgreSqlParser.KW_USER);
            this.state = 1435;
            this.rolespec();
            this.state = 1437;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 10, this.context) ) {
            case 1:
                {
                this.state = 1436;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 1439;
            this.optrolelist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterrolestmt(): AlterrolestmtContext {
        let localContext = new AlterrolestmtContext(this.context, this.state);
        this.enterRule(localContext, 20, PostgreSqlParser.RULE_alterrolestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1441;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 1442;
            _la = this.tokenStream.LA(1);
            if(!(_la === 99 || _la === 318)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1443;
            this.rolespec();
            this.state = 1445;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 11, this.context) ) {
            case 1:
                {
                this.state = 1444;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 1447;
            this.alteroptrolelist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterrolesetstmt(): AlterrolesetstmtContext {
        let localContext = new AlterrolesetstmtContext(this.context, this.state);
        this.enterRule(localContext, 22, PostgreSqlParser.RULE_alterrolesetstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1449;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 1450;
            _la = this.tokenStream.LA(1);
            if(!(_la === 99 || _la === 318)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1453;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 1451;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 1452;
                this.rolespec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1455;
            this.match(PostgreSqlParser.KW_IN);
            this.state = 1456;
            this.match(PostgreSqlParser.KW_DATABASE);
            this.state = 1457;
            this.database_name();
            this.state = 1458;
            this.setresetclause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterroutinestmt(): AlterroutinestmtContext {
        let localContext = new AlterroutinestmtContext(this.context, this.state);
        this.enterRule(localContext, 24, PostgreSqlParser.RULE_alterroutinestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1460;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 1461;
            this.match(PostgreSqlParser.KW_ROUTINE);
            this.state = 1462;
            this.routine_name();
            this.state = 1464;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 1463;
                this.func_args();
                }
            }

            this.state = 1466;
            this.alter_routine_cluase();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_routine_cluase(): Alter_routine_cluaseContext {
        let localContext = new Alter_routine_cluaseContext(this.context, this.state);
        this.enterRule(localContext, 26, PostgreSqlParser.RULE_alter_routine_cluase);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1494;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 17, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1468;
                this.routine_action();
                this.state = 1472;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 14, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1469;
                        this.routine_action();
                        }
                        }
                    }
                    this.state = 1474;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 14, this.context);
                }
                this.state = 1476;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 15, this.context) ) {
                case 1:
                    {
                    this.state = 1475;
                    this.match(PostgreSqlParser.KW_RESTRICT);
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1478;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 1479;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 1480;
                this.routine_name_create();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1481;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 1482;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 1483;
                this.rolespec();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1484;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1485;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 1486;
                this.schema_name_create();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1488;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 1487;
                    this.match(PostgreSqlParser.KW_NO);
                    }
                }

                this.state = 1490;
                this.match(PostgreSqlParser.KW_DEPENDS);
                this.state = 1491;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 1492;
                this.match(PostgreSqlParser.KW_EXTENSION);
                this.state = 1493;
                this.colid();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routine_action(): Routine_actionContext {
        let localContext = new Routine_actionContext(this.context, this.state);
        this.enterRule(localContext, 28, PostgreSqlParser.RULE_routine_action);
        let _la: number;
        try {
            this.state = 1538;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 24, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1496;
                this.match(PostgreSqlParser.KW_IMMUTABLE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1497;
                this.match(PostgreSqlParser.KW_STABLE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1498;
                this.match(PostgreSqlParser.KW_VOLATILE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1500;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 1499;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 1502;
                this.match(PostgreSqlParser.KW_LEAKPROOF);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1513;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 21, this.context) ) {
                case 1:
                    {
                    this.state = 1504;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 205) {
                        {
                        this.state = 1503;
                        this.match(PostgreSqlParser.KW_EXTERNAL);
                        }
                    }

                    this.state = 1506;
                    this.match(PostgreSqlParser.KW_SECURITY);
                    this.state = 1507;
                    this.match(PostgreSqlParser.KW_INVOKER);
                    }
                    break;
                case 2:
                    {
                    this.state = 1509;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 205) {
                        {
                        this.state = 1508;
                        this.match(PostgreSqlParser.KW_EXTERNAL);
                        }
                    }

                    this.state = 1511;
                    this.match(PostgreSqlParser.KW_SECURITY);
                    this.state = 1512;
                    this.match(PostgreSqlParser.KW_DEFINER);
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1515;
                this.match(PostgreSqlParser.KW_PARALLEL);
                this.state = 1516;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 529)) & ~0x1F) === 0 && ((1 << (_la - 529)) & 7) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1517;
                this.match(PostgreSqlParser.KW_COST);
                this.state = 1518;
                this.collabel();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1519;
                this.match(PostgreSqlParser.KW_ROWS);
                this.state = 1520;
                this.colid();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1521;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1522;
                this.colid();
                this.state = 1523;
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 94)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1526;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 22, this.context) ) {
                case 1:
                    {
                    this.state = 1524;
                    this.colid();
                    }
                    break;
                case 2:
                    {
                    this.state = 1525;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1528;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1529;
                this.colid();
                this.state = 1530;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 1531;
                this.match(PostgreSqlParser.KW_CURRENT);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1533;
                this.match(PostgreSqlParser.KW_RESET);
                this.state = 1536;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_AND:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_COLLATE:
                case PostgreSqlParser.KW_CONSTRAINT:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_DO:
                case PostgreSqlParser.KW_FETCH:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 1534;
                    this.colid();
                    }
                    break;
                case PostgreSqlParser.KW_ALL:
                    {
                    this.state = 1535;
                    this.match(PostgreSqlParser.KW_ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public creategroupstmt(): CreategroupstmtContext {
        let localContext = new CreategroupstmtContext(this.context, this.state);
        this.enterRule(localContext, 30, PostgreSqlParser.RULE_creategroupstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1540;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 1541;
            this.match(PostgreSqlParser.KW_GROUP);
            this.state = 1542;
            this.rolespec();
            this.state = 1544;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context) ) {
            case 1:
                {
                this.state = 1543;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 1546;
            this.optrolelist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altergroupstmt(): AltergroupstmtContext {
        let localContext = new AltergroupstmtContext(this.context, this.state);
        this.enterRule(localContext, 32, PostgreSqlParser.RULE_altergroupstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1548;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 1549;
            this.match(PostgreSqlParser.KW_GROUP);
            this.state = 1550;
            this.rolespec();
            this.state = 1551;
            _la = this.tokenStream.LA(1);
            if(!(_la === 133 || _la === 191)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1552;
            this.match(PostgreSqlParser.KW_USER);
            this.state = 1553;
            this.role_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createschemastmt(): CreateschemastmtContext {
        let localContext = new CreateschemastmtContext(this.context, this.state);
        this.enterRule(localContext, 34, PostgreSqlParser.RULE_createschemastmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1555;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 1556;
            this.match(PostgreSqlParser.KW_SCHEMA);
            this.state = 1558;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 26, this.context) ) {
            case 1:
                {
                this.state = 1557;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 1566;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 28, this.context) ) {
            case 1:
                {
                this.state = 1561;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 1572823) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                    {
                    this.state = 1560;
                    this.schema_name_create();
                    }
                }

                this.state = 1563;
                this.match(PostgreSqlParser.KW_AUTHORIZATION);
                this.state = 1564;
                this.rolespec();
                }
                break;
            case 2:
                {
                this.state = 1565;
                this.schema_name_create();
                }
                break;
            }
            this.state = 1571;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 29, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1568;
                    this.schema_stmt();
                    }
                    }
                }
                this.state = 1573;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 29, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schema_name_create(): Schema_name_createContext {
        let localContext = new Schema_name_createContext(this.context, this.state);
        this.enterRule(localContext, 36, PostgreSqlParser.RULE_schema_name_create);
        try {
            localContext = new SchemaNameCreateContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1574;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schema_stmt(): Schema_stmtContext {
        let localContext = new Schema_stmtContext(this.context, this.state);
        this.enterRule(localContext, 38, PostgreSqlParser.RULE_schema_stmt);
        try {
            this.state = 1582;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 30, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1576;
                this.createstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1577;
                this.indexstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1578;
                this.createseqstmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1579;
                this.createtrigstmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1580;
                this.grantstmt();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1581;
                this.viewstmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variablesetstmt(): VariablesetstmtContext {
        let localContext = new VariablesetstmtContext(this.context, this.state);
        this.enterRule(localContext, 40, PostgreSqlParser.RULE_variablesetstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1584;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 1586;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 31, this.context) ) {
            case 1:
                {
                this.state = 1585;
                _la = this.tokenStream.LA(1);
                if(!(_la === 254 || _la === 332)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 1588;
            this.set_rest();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_rest(): Set_restContext {
        let localContext = new Set_restContext(this.context, this.state);
        this.enterRule(localContext, 42, PostgreSqlParser.RULE_set_rest);
        try {
            this.state = 1598;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 32, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1590;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 1591;
                this.transaction_mode_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1592;
                this.match(PostgreSqlParser.KW_SESSION);
                this.state = 1593;
                this.match(PostgreSqlParser.KW_CHARACTERISTICS);
                this.state = 1594;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 1595;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 1596;
                this.transaction_mode_list();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1597;
                this.set_rest_more();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generic_set(): Generic_setContext {
        let localContext = new Generic_setContext(this.context, this.state);
        this.enterRule(localContext, 44, PostgreSqlParser.RULE_generic_set);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1602;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 1600;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 1601;
                this.var_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1605;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10 || _la === 94) {
                {
                this.state = 1604;
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 94)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1609;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 35, this.context) ) {
            case 1:
                {
                this.state = 1607;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            case 2:
                {
                this.state = 1608;
                this.var_list();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_rest_more(): Set_rest_moreContext {
        let localContext = new Set_rest_moreContext(this.context, this.state);
        this.enterRule(localContext, 46, PostgreSqlParser.RULE_set_rest_more);
        try {
            this.state = 1639;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 37, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1611;
                this.match(PostgreSqlParser.KW_TIME);
                this.state = 1612;
                this.match(PostgreSqlParser.KW_ZONE);
                this.state = 1613;
                this.zone_value();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1614;
                this.match(PostgreSqlParser.KW_CATALOG);
                this.state = 1615;
                this.sconst();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1616;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 1617;
                this.schema_name();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1618;
                this.match(PostgreSqlParser.KW_NAMES);
                this.state = 1621;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 36, this.context) ) {
                case 1:
                    {
                    this.state = 1619;
                    this.sconst();
                    }
                    break;
                case 2:
                    {
                    this.state = 1620;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1623;
                this.match(PostgreSqlParser.KW_ROLE);
                this.state = 1624;
                this.nonreservedword_or_sconst();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1625;
                this.match(PostgreSqlParser.KW_SESSION);
                this.state = 1626;
                this.match(PostgreSqlParser.KW_AUTHORIZATION);
                this.state = 1627;
                this.nonreservedword_or_sconst();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1628;
                this.match(PostgreSqlParser.KW_XML);
                this.state = 1629;
                this.match(PostgreSqlParser.KW_OPTION);
                this.state = 1630;
                this.document_or_content();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1631;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 1632;
                this.match(PostgreSqlParser.KW_SNAPSHOT);
                this.state = 1633;
                this.sconst();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1634;
                this.var_name();
                this.state = 1635;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 1636;
                this.match(PostgreSqlParser.KW_CURRENT);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1638;
                this.generic_set();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public var_name(): Var_nameContext {
        let localContext = new Var_nameContext(this.context, this.state);
        this.enterRule(localContext, 48, PostgreSqlParser.RULE_var_name);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1641;
            this.colid();
            this.state = 1646;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 11) {
                {
                {
                this.state = 1642;
                this.match(PostgreSqlParser.DOT);
                this.state = 1643;
                this.colid();
                }
                }
                this.state = 1648;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public var_list(): Var_listContext {
        let localContext = new Var_listContext(this.context, this.state);
        this.enterRule(localContext, 50, PostgreSqlParser.RULE_var_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1649;
            this.var_value();
            this.state = 1654;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 1650;
                this.match(PostgreSqlParser.COMMA);
                this.state = 1651;
                this.var_value();
                }
                }
                this.state = 1656;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public var_value(): Var_valueContext {
        let localContext = new Var_valueContext(this.context, this.state);
        this.enterRule(localContext, 52, PostgreSqlParser.RULE_var_value);
        try {
            this.state = 1659;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_ON:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1657;
                this.opt_boolean_or_string();
                }
                break;
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1658;
                this.numericonly();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public iso_level(): Iso_levelContext {
        let localContext = new Iso_levelContext(this.context, this.state);
        this.enterRule(localContext, 54, PostgreSqlParser.RULE_iso_level);
        let _la: number;
        try {
            this.state = 1666;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_READ:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1661;
                this.match(PostgreSqlParser.KW_READ);
                this.state = 1662;
                _la = this.tokenStream.LA(1);
                if(!(_la === 162 || _la === 363)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_REPEATABLE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1663;
                this.match(PostgreSqlParser.KW_REPEATABLE);
                this.state = 1664;
                this.match(PostgreSqlParser.KW_READ);
                }
                break;
            case PostgreSqlParser.KW_SERIALIZABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1665;
                this.match(PostgreSqlParser.KW_SERIALIZABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_boolean_or_string_column(): Opt_boolean_or_string_columnContext {
        let localContext = new Opt_boolean_or_string_columnContext(this.context, this.state);
        this.enterRule(localContext, 56, PostgreSqlParser.RULE_opt_boolean_or_string_column);
        try {
            this.state = 1674;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 42, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1668;
                this.match(PostgreSqlParser.KW_TRUE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1669;
                this.match(PostgreSqlParser.KW_FALSE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1670;
                this.match(PostgreSqlParser.KW_ON);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1671;
                this.column_name();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1672;
                this.type_func_name_keyword();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1673;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_boolean_or_string(): Opt_boolean_or_stringContext {
        let localContext = new Opt_boolean_or_stringContext(this.context, this.state);
        this.enterRule(localContext, 58, PostgreSqlParser.RULE_opt_boolean_or_string);
        try {
            this.state = 1680;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_TRUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1676;
                this.match(PostgreSqlParser.KW_TRUE);
                }
                break;
            case PostgreSqlParser.KW_FALSE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1677;
                this.match(PostgreSqlParser.KW_FALSE);
                }
                break;
            case PostgreSqlParser.KW_ON:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1678;
                this.match(PostgreSqlParser.KW_ON);
                }
                break;
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1679;
                this.nonreservedword_or_sconst();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zone_value(): Zone_valueContext {
        let localContext = new Zone_valueContext(this.context, this.state);
        this.enterRule(localContext, 60, PostgreSqlParser.RULE_zone_value);
        try {
            this.state = 1696;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 45, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1682;
                this.sconst();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1683;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1684;
                this.identifier();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1685;
                this.match(PostgreSqlParser.KW_INTERVAL);
                this.state = 1686;
                this.sconst();
                this.state = 1688;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 44, this.context) ) {
                case 1:
                    {
                    this.state = 1687;
                    this.opt_interval();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1690;
                this.match(PostgreSqlParser.KW_INTERVAL);
                this.state = 1691;
                this.opt_float();
                this.state = 1692;
                this.sconst();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1694;
                this.numericonly();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1695;
                this.match(PostgreSqlParser.KW_LOCAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext {
        let localContext = new Nonreservedword_or_sconstContext(this.context, this.state);
        this.enterRule(localContext, 62, PostgreSqlParser.RULE_nonreservedword_or_sconst);
        try {
            this.state = 1700;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 46, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1698;
                this.nonreservedword();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1699;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableresetstmt(): VariableresetstmtContext {
        let localContext = new VariableresetstmtContext(this.context, this.state);
        this.enterRule(localContext, 64, PostgreSqlParser.RULE_variableresetstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1702;
            this.match(PostgreSqlParser.KW_RESET);
            this.state = 1703;
            this.reset_rest();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reset_rest(): Reset_restContext {
        let localContext = new Reset_restContext(this.context, this.state);
        this.enterRule(localContext, 66, PostgreSqlParser.RULE_reset_rest);
        try {
            this.state = 1714;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 47, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1705;
                this.match(PostgreSqlParser.KW_TIME);
                this.state = 1706;
                this.match(PostgreSqlParser.KW_ZONE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1707;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 1708;
                this.match(PostgreSqlParser.KW_ISOLATION);
                this.state = 1709;
                this.match(PostgreSqlParser.KW_LEVEL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1710;
                this.match(PostgreSqlParser.KW_SESSION);
                this.state = 1711;
                this.match(PostgreSqlParser.KW_AUTHORIZATION);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1712;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1713;
                this.var_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setresetclause(): SetresetclauseContext {
        let localContext = new SetresetclauseContext(this.context, this.state);
        this.enterRule(localContext, 68, PostgreSqlParser.RULE_setresetclause);
        try {
            this.state = 1719;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1716;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1717;
                this.set_rest();
                }
                break;
            case PostgreSqlParser.KW_RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1718;
                this.variableresetstmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionsetresetclause(): FunctionsetresetclauseContext {
        let localContext = new FunctionsetresetclauseContext(this.context, this.state);
        this.enterRule(localContext, 70, PostgreSqlParser.RULE_functionsetresetclause);
        try {
            this.state = 1724;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1721;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1722;
                this.set_rest_more();
                }
                break;
            case PostgreSqlParser.KW_RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1723;
                this.variableresetstmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableshowstmt(): VariableshowstmtContext {
        let localContext = new VariableshowstmtContext(this.context, this.state);
        this.enterRule(localContext, 72, PostgreSqlParser.RULE_variableshowstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1726;
            this.match(PostgreSqlParser.KW_SHOW);
            this.state = 1736;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 50, this.context) ) {
            case 1:
                {
                this.state = 1727;
                this.var_name();
                }
                break;
            case 2:
                {
                this.state = 1728;
                this.match(PostgreSqlParser.KW_TIME);
                this.state = 1729;
                this.match(PostgreSqlParser.KW_ZONE);
                }
                break;
            case 3:
                {
                this.state = 1730;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 1731;
                this.match(PostgreSqlParser.KW_ISOLATION);
                this.state = 1732;
                this.match(PostgreSqlParser.KW_LEVEL);
                }
                break;
            case 4:
                {
                this.state = 1733;
                this.match(PostgreSqlParser.KW_SESSION);
                this.state = 1734;
                this.match(PostgreSqlParser.KW_AUTHORIZATION);
                }
                break;
            case 5:
                {
                this.state = 1735;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintssetstmt(): ConstraintssetstmtContext {
        let localContext = new ConstraintssetstmtContext(this.context, this.state);
        this.enterRule(localContext, 74, PostgreSqlParser.RULE_constraintssetstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1738;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 1739;
            this.match(PostgreSqlParser.KW_CONSTRAINTS);
            this.state = 1742;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 1740;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 1741;
                this.qualified_name_list();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1744;
            _la = this.tokenStream.LA(1);
            if(!(_la === 180 || _la === 221)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkpointstmt(): CheckpointstmtContext {
        let localContext = new CheckpointstmtContext(this.context, this.state);
        this.enterRule(localContext, 76, PostgreSqlParser.RULE_checkpointstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1746;
            this.match(PostgreSqlParser.KW_CHECKPOINT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public discardstmt(): DiscardstmtContext {
        let localContext = new DiscardstmtContext(this.context, this.state);
        this.enterRule(localContext, 78, PostgreSqlParser.RULE_discardstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1748;
            this.match(PostgreSqlParser.KW_DISCARD);
            this.state = 1749;
            _la = this.tokenStream.LA(1);
            if(!(_la === 30 || _la === 288 || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & 41943041) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altertablestmt(): AltertablestmtContext {
        let localContext = new AltertablestmtContext(this.context, this.state);
        this.enterRule(localContext, 80, PostgreSqlParser.RULE_altertablestmt);
        let _la: number;
        try {
            this.state = 1872;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 70, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1751;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1752;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 1754;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 52, this.context) ) {
                case 1:
                    {
                    this.state = 1753;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1756;
                this.relation_expr();
                this.state = 1759;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_NOT:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_VALIDATE:
                    {
                    this.state = 1757;
                    this.alter_table_cmds();
                    }
                    break;
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                    {
                    this.state = 1758;
                    this.partition_cmd();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1761;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1762;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 1763;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 1764;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1765;
                this.opttablespace();
                this.state = 1769;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 281) {
                    {
                    this.state = 1766;
                    this.match(PostgreSqlParser.KW_OWNED);
                    this.state = 1767;
                    this.match(PostgreSqlParser.KW_BY);
                    this.state = 1768;
                    this.role_list();
                    }
                }

                this.state = 1771;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1772;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                this.state = 1773;
                this.tablespace_name_create();
                this.state = 1775;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 55, this.context) ) {
                case 1:
                    {
                    this.state = 1774;
                    this.match(PostgreSqlParser.KW_NOWAIT);
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1777;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1778;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 1780;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 56, this.context) ) {
                case 1:
                    {
                    this.state = 1779;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1782;
                this.table_name();
                this.state = 1783;
                this.index_partition_cmd();
                this.state = 1788;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_FOR:
                    {
                    this.state = 1784;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 1785;
                    this.match(PostgreSqlParser.KW_VALUES);
                    this.state = 1786;
                    this.partition_bound_spec();
                    }
                    break;
                case PostgreSqlParser.KW_DEFAULT:
                    {
                    this.state = 1787;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1790;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1791;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 1793;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 58, this.context) ) {
                case 1:
                    {
                    this.state = 1792;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1795;
                this.table_name();
                this.state = 1796;
                this.match(PostgreSqlParser.KW_DETACH);
                this.state = 1797;
                this.match(PostgreSqlParser.KW_PARTITION);
                this.state = 1798;
                this.qualified_name();
                this.state = 1800;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109 || _la === 532) {
                    {
                    this.state = 1799;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 109 || _la === 532)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1802;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1803;
                this.match(PostgreSqlParser.KW_INDEX);
                this.state = 1805;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 60, this.context) ) {
                case 1:
                    {
                    this.state = 1804;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1807;
                this.qualified_name();
                this.state = 1810;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_NOT:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_VALIDATE:
                    {
                    this.state = 1808;
                    this.alter_table_cmds();
                    }
                    break;
                case PostgreSqlParser.KW_ATTACH:
                    {
                    this.state = 1809;
                    this.index_partition_cmd();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1812;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1813;
                this.match(PostgreSqlParser.KW_INDEX);
                this.state = 1814;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 1815;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1816;
                this.opttablespace();
                this.state = 1820;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 281) {
                    {
                    this.state = 1817;
                    this.match(PostgreSqlParser.KW_OWNED);
                    this.state = 1818;
                    this.match(PostgreSqlParser.KW_BY);
                    this.state = 1819;
                    this.role_list();
                    }
                }

                this.state = 1822;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1823;
                this.opttablespace();
                this.state = 1825;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 63, this.context) ) {
                case 1:
                    {
                    this.state = 1824;
                    this.match(PostgreSqlParser.KW_NOWAIT);
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1827;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1828;
                this.match(PostgreSqlParser.KW_SEQUENCE);
                this.state = 1830;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 64, this.context) ) {
                case 1:
                    {
                    this.state = 1829;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1832;
                this.qualified_name();
                this.state = 1833;
                this.alter_table_cmds();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1835;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1837;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 259) {
                    {
                    this.state = 1836;
                    this.match(PostgreSqlParser.KW_MATERIALIZED);
                    }
                }

                this.state = 1839;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 1841;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 66, this.context) ) {
                case 1:
                    {
                    this.state = 1840;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1843;
                this.view_name();
                this.state = 1844;
                this.alter_table_cmds();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1846;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1847;
                this.match(PostgreSqlParser.KW_MATERIALIZED);
                this.state = 1848;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 1849;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 1850;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1851;
                this.opttablespace();
                this.state = 1855;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 281) {
                    {
                    this.state = 1852;
                    this.match(PostgreSqlParser.KW_OWNED);
                    this.state = 1853;
                    this.match(PostgreSqlParser.KW_BY);
                    this.state = 1854;
                    this.role_list();
                    }
                }

                this.state = 1857;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1858;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                this.state = 1859;
                this.tablespace_name_create();
                this.state = 1861;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 68, this.context) ) {
                case 1:
                    {
                    this.state = 1860;
                    this.match(PostgreSqlParser.KW_NOWAIT);
                    }
                    break;
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1863;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1864;
                this.match(PostgreSqlParser.KW_FOREIGN);
                this.state = 1865;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 1867;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 69, this.context) ) {
                case 1:
                    {
                    this.state = 1866;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1869;
                this.relation_expr();
                this.state = 1870;
                this.alter_table_cmds();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_cmds(): Alter_table_cmdsContext {
        let localContext = new Alter_table_cmdsContext(this.context, this.state);
        this.enterRule(localContext, 82, PostgreSqlParser.RULE_alter_table_cmds);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1874;
            this.alter_table_cmd();
            this.state = 1879;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 1875;
                this.match(PostgreSqlParser.COMMA);
                this.state = 1876;
                this.alter_table_cmd();
                }
                }
                this.state = 1881;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partition_bound_spec(): Partition_bound_specContext {
        let localContext = new Partition_bound_specContext(this.context, this.state);
        this.enterRule(localContext, 84, PostgreSqlParser.RULE_partition_bound_spec);
        try {
            this.state = 1891;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_IN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1882;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1883;
                this.execute_param_clause();
                }
                break;
            case PostgreSqlParser.KW_FROM:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1884;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 1885;
                this.partition_bound_cluase();
                this.state = 1886;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 1887;
                this.partition_bound_cluase();
                }
                break;
            case PostgreSqlParser.KW_WITH:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1889;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 1890;
                this.partition_with_cluase();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partition_bound_cluase(): Partition_bound_cluaseContext {
        let localContext = new Partition_bound_cluaseContext(this.context, this.state);
        this.enterRule(localContext, 86, PostgreSqlParser.RULE_partition_bound_cluase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1893;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 1894;
            this.partition_bound_choose();
            this.state = 1899;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 1895;
                this.match(PostgreSqlParser.COMMA);
                this.state = 1896;
                this.partition_bound_choose();
                }
                }
                this.state = 1901;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1902;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partition_bound_choose(): Partition_bound_chooseContext {
        let localContext = new Partition_bound_chooseContext(this.context, this.state);
        this.enterRule(localContext, 88, PostgreSqlParser.RULE_partition_bound_choose);
        try {
            this.state = 1907;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1904;
                this.execute_param_clause();
                }
                break;
            case PostgreSqlParser.KW_MINVALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1905;
                this.match(PostgreSqlParser.KW_MINVALUE);
                }
                break;
            case PostgreSqlParser.KW_MAXVALUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1906;
                this.match(PostgreSqlParser.KW_MAXVALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partition_with_cluase(): Partition_with_cluaseContext {
        let localContext = new Partition_with_cluaseContext(this.context, this.state);
        this.enterRule(localContext, 90, PostgreSqlParser.RULE_partition_with_cluase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1909;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 1910;
            this.match(PostgreSqlParser.KW_MODULUS);
            this.state = 1911;
            this.numericonly();
            this.state = 1912;
            this.match(PostgreSqlParser.COMMA);
            this.state = 1913;
            this.match(PostgreSqlParser.KW_REMAINDER);
            this.state = 1914;
            this.numericonly();
            this.state = 1915;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partition_cmd(): Partition_cmdContext {
        let localContext = new Partition_cmdContext(this.context, this.state);
        this.enterRule(localContext, 92, PostgreSqlParser.RULE_partition_cmd);
        try {
            this.state = 1923;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ATTACH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1917;
                this.index_partition_cmd();
                this.state = 1918;
                this.partitionboundspec();
                }
                break;
            case PostgreSqlParser.KW_DETACH:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1920;
                this.match(PostgreSqlParser.KW_DETACH);
                this.state = 1921;
                this.match(PostgreSqlParser.KW_PARTITION);
                this.state = 1922;
                this.qualified_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_partition_cmd(): Index_partition_cmdContext {
        let localContext = new Index_partition_cmdContext(this.context, this.state);
        this.enterRule(localContext, 94, PostgreSqlParser.RULE_index_partition_cmd);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1925;
            this.match(PostgreSqlParser.KW_ATTACH);
            this.state = 1926;
            this.match(PostgreSqlParser.KW_PARTITION);
            this.state = 1927;
            this.qualified_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_cmd(): Alter_table_cmdContext {
        let localContext = new Alter_table_cmdContext(this.context, this.state);
        this.enterRule(localContext, 96, PostgreSqlParser.RULE_alter_table_cmd);
        let _la: number;
        try {
            let alternative: number;
            this.state = 2134;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 108, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1929;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 1932;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 1930;
                    this.match(PostgreSqlParser.KW_CONSTRAINT);
                    this.state = 1931;
                    this.colid();
                    }
                }

                this.state = 1934;
                this.constraintelem();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1935;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1936;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 1937;
                this.colid();
                this.state = 1938;
                this.constraintattributespec();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1940;
                this.match(PostgreSqlParser.KW_VALIDATE);
                this.state = 1941;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 1942;
                this.colid();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1943;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 1944;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 1946;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 77, this.context) ) {
                case 1:
                    {
                    this.state = 1945;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1948;
                this.colid();
                this.state = 1950;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 78, this.context) ) {
                case 1:
                    {
                    this.state = 1949;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1952;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1953;
                this.match(PostgreSqlParser.KW_WITHOUT);
                this.state = 1954;
                _la = this.tokenStream.LA(1);
                if(!(_la === 158 || _la === 277)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1955;
                this.match(PostgreSqlParser.KW_CLUSTER);
                this.state = 1956;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 1957;
                this.colid();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1958;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1959;
                _la = this.tokenStream.LA(1);
                if(!(_la === 367 || _la === 439)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1960;
                this.match(PostgreSqlParser.KW_ENABLE);
                this.state = 1962;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 139 || _la === 312) {
                    {
                    this.state = 1961;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 139 || _la === 312)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1964;
                this.match(PostgreSqlParser.KW_TRIGGER);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1965;
                this.match(PostgreSqlParser.KW_DISABLE);
                this.state = 1966;
                this.match(PostgreSqlParser.KW_TRIGGER);
                this.state = 1970;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ALL:
                    {
                    this.state = 1967;
                    this.match(PostgreSqlParser.KW_ALL);
                    }
                    break;
                case PostgreSqlParser.KW_USER:
                    {
                    this.state = 1968;
                    this.match(PostgreSqlParser.KW_USER);
                    }
                    break;
                case PostgreSqlParser.KW_AND:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_COLLATE:
                case PostgreSqlParser.KW_CONSTRAINT:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_DO:
                case PostgreSqlParser.KW_FETCH:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 1969;
                    this.colid();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1972;
                this.match(PostgreSqlParser.KW_ENABLE);
                this.state = 1973;
                _la = this.tokenStream.LA(1);
                if(!(_la === 139 || _la === 312)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1974;
                this.match(PostgreSqlParser.KW_RULE);
                this.state = 1975;
                this.colid();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1976;
                this.match(PostgreSqlParser.KW_DISABLE);
                this.state = 1977;
                this.match(PostgreSqlParser.KW_RULE);
                this.state = 1978;
                this.colid();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1980;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 1979;
                    this.match(PostgreSqlParser.KW_NO);
                    }
                }

                this.state = 1982;
                this.match(PostgreSqlParser.KW_INHERIT);
                this.state = 1983;
                this.qualified_name();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1984;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 1985;
                this.any_name();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1986;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 1987;
                this.match(PostgreSqlParser.KW_OF);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1988;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 1989;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 1990;
                this.rolespec();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1991;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1992;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                this.state = 1993;
                this.tablespace_name_create();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1994;
                this.match(PostgreSqlParser.KW_REPLICA);
                this.state = 1995;
                this.match(PostgreSqlParser.KW_IDENTITY);
                this.state = 1996;
                this.replica_identity();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2003;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ENABLE:
                    {
                    this.state = 1997;
                    this.match(PostgreSqlParser.KW_ENABLE);
                    }
                    break;
                case PostgreSqlParser.KW_DISABLE:
                    {
                    this.state = 1998;
                    this.match(PostgreSqlParser.KW_DISABLE);
                    }
                    break;
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_NO:
                    {
                    {
                    this.state = 2000;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 269) {
                        {
                        this.state = 1999;
                        this.match(PostgreSqlParser.KW_NO);
                        }
                    }

                    this.state = 2002;
                    this.match(PostgreSqlParser.KW_FORCE);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2005;
                this.match(PostgreSqlParser.KW_ROW);
                this.state = 2006;
                this.match(PostgreSqlParser.KW_LEVEL);
                this.state = 2007;
                this.match(PostgreSqlParser.KW_SECURITY);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 2008;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 2010;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 84, this.context) ) {
                case 1:
                    {
                    this.state = 2009;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 2013;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 85, this.context) ) {
                case 1:
                    {
                    this.state = 2012;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 2015;
                this.column_name();
                this.state = 2017;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 86, this.context) ) {
                case 1:
                    {
                    this.state = 2016;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 2019;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 2021;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 44) {
                    {
                    this.state = 2020;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                }

                this.state = 2024;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 88, this.context) ) {
                case 1:
                    {
                    this.state = 2023;
                    this.opt_if_not_exists();
                    }
                    break;
                }
                this.state = 2026;
                this.column_def();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 2027;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 2029;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 89, this.context) ) {
                case 1:
                    {
                    this.state = 2028;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 2031;
                this.column_name();
                this.state = 2034;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_SET:
                    {
                    this.state = 2032;
                    this.alter_column_default();
                    }
                    break;
                case PostgreSqlParser.KW_OPTIONS:
                    {
                    this.state = 2033;
                    this.alter_generic_options();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 2036;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 2038;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 91, this.context) ) {
                case 1:
                    {
                    this.state = 2037;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 2040;
                this.column_name();
                this.state = 2041;
                _la = this.tokenStream.LA(1);
                if(!(_la === 191 || _la === 333)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2042;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 2043;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 2045;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 2047;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 92, this.context) ) {
                case 1:
                    {
                    this.state = 2046;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 2049;
                this.column_name();
                this.state = 2050;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 2051;
                this.match(PostgreSqlParser.KW_EXPRESSION);
                this.state = 2053;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 93, this.context) ) {
                case 1:
                    {
                    this.state = 2052;
                    this.opt_if_exists();
                    }
                    break;
                }
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 2055;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 2057;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 94, this.context) ) {
                case 1:
                    {
                    this.state = 2056;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 2059;
                this.column_name();
                this.state = 2060;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 2061;
                this.match(PostgreSqlParser.KW_STATISTICS);
                this.state = 2062;
                this.signediconst();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 2069;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 2064;
                    this.match(PostgreSqlParser.KW_ALTER);
                    this.state = 2066;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 95, this.context) ) {
                    case 1:
                        {
                        this.state = 2065;
                        this.match(PostgreSqlParser.KW_COLUMN);
                        }
                        break;
                    }
                    this.state = 2068;
                    this.column_name();
                    }
                }

                this.state = 2071;
                _la = this.tokenStream.LA(1);
                if(!(_la === 313 || _la === 333)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2072;
                this.reloptions();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 2073;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 2075;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 97, this.context) ) {
                case 1:
                    {
                    this.state = 2074;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 2077;
                this.column_name();
                this.state = 2078;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 2079;
                this.match(PostgreSqlParser.KW_STORAGE);
                this.state = 2080;
                this.colid();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 2082;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 2084;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 98, this.context) ) {
                case 1:
                    {
                    this.state = 2083;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 2086;
                this.column_name();
                this.state = 2087;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 2088;
                this.match(PostgreSqlParser.KW_GENERATED);
                this.state = 2089;
                this.generated_when();
                this.state = 2090;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 2091;
                this.match(PostgreSqlParser.KW_IDENTITY);
                this.state = 2093;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 99, this.context) ) {
                case 1:
                    {
                    this.state = 2092;
                    this.optparenthesizedseqoptlist();
                    }
                    break;
                }
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 2095;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 2097;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 100, this.context) ) {
                case 1:
                    {
                    this.state = 2096;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 2099;
                this.column_name();
                this.state = 2101;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 2100;
                        this.alter_identity_column_option();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 2103;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 101, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 2105;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 2107;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 102, this.context) ) {
                case 1:
                    {
                    this.state = 2106;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 2109;
                this.column_name();
                this.state = 2110;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 2111;
                this.match(PostgreSqlParser.KW_IDENTITY);
                this.state = 2113;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 103, this.context) ) {
                case 1:
                    {
                    this.state = 2112;
                    this.opt_if_exists();
                    }
                    break;
                }
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 2115;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 2117;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 104, this.context) ) {
                case 1:
                    {
                    this.state = 2116;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 2119;
                this.column_name();
                this.state = 2122;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 333) {
                    {
                    this.state = 2120;
                    this.match(PostgreSqlParser.KW_SET);
                    this.state = 2121;
                    this.match(PostgreSqlParser.KW_DATA);
                    }
                }

                this.state = 2124;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 2125;
                this.typename();
                this.state = 2127;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 106, this.context) ) {
                case 1:
                    {
                    this.state = 2126;
                    this.opt_collate_clause();
                    }
                    break;
                }
                this.state = 2131;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2129;
                    this.match(PostgreSqlParser.KW_USING);
                    this.state = 2130;
                    this.expression();
                    }
                }

                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 2133;
                this.alter_generic_options();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_column_default(): Alter_column_defaultContext {
        let localContext = new Alter_column_defaultContext(this.context, this.state);
        this.enterRule(localContext, 98, PostgreSqlParser.RULE_alter_column_default);
        try {
            this.state = 2141;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2136;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 2137;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 2138;
                this.expression();
                }
                break;
            case PostgreSqlParser.KW_DROP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2139;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 2140;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext {
        let localContext = new Opt_drop_behaviorContext(this.context, this.state);
        this.enterRule(localContext, 100, PostgreSqlParser.RULE_opt_drop_behavior);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2143;
            _la = this.tokenStream.LA(1);
            if(!(_la === 150 || _la === 315)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_collate_clause(): Opt_collate_clauseContext {
        let localContext = new Opt_collate_clauseContext(this.context, this.state);
        this.enterRule(localContext, 102, PostgreSqlParser.RULE_opt_collate_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2145;
            this.match(PostgreSqlParser.KW_COLLATE);
            this.state = 2146;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replica_identity(): Replica_identityContext {
        let localContext = new Replica_identityContext(this.context, this.state);
        this.enterRule(localContext, 104, PostgreSqlParser.RULE_replica_identity);
        try {
            this.state = 2152;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_NOTHING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2148;
                this.match(PostgreSqlParser.KW_NOTHING);
                }
                break;
            case PostgreSqlParser.KW_FULL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2149;
                this.match(PostgreSqlParser.KW_FULL);
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2150;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            case PostgreSqlParser.KW_USING:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2151;
                this.existingindex();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reloptions(): ReloptionsContext {
        let localContext = new ReloptionsContext(this.context, this.state);
        this.enterRule(localContext, 106, PostgreSqlParser.RULE_reloptions);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2154;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2155;
            this.reloption_list();
            this.state = 2156;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_reloptions(): Opt_reloptionsContext {
        let localContext = new Opt_reloptionsContext(this.context, this.state);
        this.enterRule(localContext, 108, PostgreSqlParser.RULE_opt_reloptions);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2158;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 2159;
            this.reloptions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reloption_list(): Reloption_listContext {
        let localContext = new Reloption_listContext(this.context, this.state);
        this.enterRule(localContext, 110, PostgreSqlParser.RULE_reloption_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2161;
            this.reloption_elem();
            this.state = 2166;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2162;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2163;
                this.reloption_elem();
                }
                }
                this.state = 2168;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reloption_elem(): Reloption_elemContext {
        let localContext = new Reloption_elemContext(this.context, this.state);
        this.enterRule(localContext, 112, PostgreSqlParser.RULE_reloption_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2169;
            this.collabel();
            this.state = 2174;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.EQUAL:
                {
                this.state = 2170;
                this.match(PostgreSqlParser.EQUAL);
                this.state = 2171;
                this.def_arg();
                }
                break;
            case PostgreSqlParser.DOT:
                {
                this.state = 2172;
                this.match(PostgreSqlParser.DOT);
                this.state = 2173;
                this.def_elem();
                }
                break;
            case PostgreSqlParser.CLOSE_PAREN:
            case PostgreSqlParser.COMMA:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_identity_column_option(): Alter_identity_column_optionContext {
        let localContext = new Alter_identity_column_optionContext(this.context, this.state);
        this.enterRule(localContext, 114, PostgreSqlParser.RULE_alter_identity_column_option);
        let _la: number;
        try {
            this.state = 2189;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_RESTART:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2176;
                this.match(PostgreSqlParser.KW_RESTART);
                this.state = 2181;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 114, this.context) ) {
                case 1:
                    {
                    this.state = 2178;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 105) {
                        {
                        this.state = 2177;
                        this.match(PostgreSqlParser.KW_WITH);
                        }
                    }

                    this.state = 2180;
                    this.numericonly();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2183;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 2187;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_AS:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_START:
                    {
                    this.state = 2184;
                    this.seqoptelem();
                    }
                    break;
                case PostgreSqlParser.KW_GENERATED:
                    {
                    this.state = 2185;
                    this.match(PostgreSqlParser.KW_GENERATED);
                    this.state = 2186;
                    this.generated_when();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionboundspec(): PartitionboundspecContext {
        let localContext = new PartitionboundspecContext(this.context, this.state);
        this.enterRule(localContext, 116, PostgreSqlParser.RULE_partitionboundspec);
        try {
            this.state = 2207;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 117, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2191;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 2192;
                this.match(PostgreSqlParser.KW_VALUES);
                this.state = 2193;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 2194;
                this.hash_partbound();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2195;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 2196;
                this.match(PostgreSqlParser.KW_VALUES);
                this.state = 2197;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 2198;
                this.execute_param_clause();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2199;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 2200;
                this.match(PostgreSqlParser.KW_VALUES);
                this.state = 2201;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 2202;
                this.execute_param_clause();
                this.state = 2203;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 2204;
                this.execute_param_clause();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2206;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hash_partbound_elem(): Hash_partbound_elemContext {
        let localContext = new Hash_partbound_elemContext(this.context, this.state);
        this.enterRule(localContext, 118, PostgreSqlParser.RULE_hash_partbound_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2209;
            this.nonreservedword();
            this.state = 2210;
            this.match(PostgreSqlParser.Integral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hash_partbound(): Hash_partboundContext {
        let localContext = new Hash_partboundContext(this.context, this.state);
        this.enterRule(localContext, 120, PostgreSqlParser.RULE_hash_partbound);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2212;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2213;
            this.hash_partbound_elem();
            this.state = 2218;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2214;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2215;
                this.hash_partbound_elem();
                }
                }
                this.state = 2220;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2221;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altercompositetypestmt(): AltercompositetypestmtContext {
        let localContext = new AltercompositetypestmtContext(this.context, this.state);
        this.enterRule(localContext, 122, PostgreSqlParser.RULE_altercompositetypestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2223;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 2224;
            this.match(PostgreSqlParser.KW_TYPE);
            this.state = 2225;
            this.any_name();
            this.state = 2226;
            this.alter_type_cmd();
            this.state = 2231;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2227;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2228;
                this.alter_type_cmd();
                }
                }
                this.state = 2233;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_type_cmd(): Alter_type_cmdContext {
        let localContext = new Alter_type_cmdContext(this.context, this.state);
        this.enterRule(localContext, 124, PostgreSqlParser.RULE_alter_type_cmd);
        let _la: number;
        try {
            this.state = 2264;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ADD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2234;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 2235;
                this.match(PostgreSqlParser.KW_ATTRIBUTE);
                this.state = 2236;
                this.tablefuncelement();
                this.state = 2238;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 120, this.context) ) {
                case 1:
                    {
                    this.state = 2237;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_DROP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2240;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 2241;
                this.match(PostgreSqlParser.KW_ATTRIBUTE);
                this.state = 2243;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 121, this.context) ) {
                case 1:
                    {
                    this.state = 2242;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 2245;
                this.colid();
                this.state = 2247;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 122, this.context) ) {
                case 1:
                    {
                    this.state = 2246;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_ALTER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2249;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 2250;
                this.match(PostgreSqlParser.KW_ATTRIBUTE);
                this.state = 2251;
                this.colid();
                this.state = 2254;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 333) {
                    {
                    this.state = 2252;
                    this.match(PostgreSqlParser.KW_SET);
                    this.state = 2253;
                    this.match(PostgreSqlParser.KW_DATA);
                    }
                }

                this.state = 2256;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 2257;
                this.typename();
                this.state = 2259;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 124, this.context) ) {
                case 1:
                    {
                    this.state = 2258;
                    this.opt_collate_clause();
                    }
                    break;
                }
                this.state = 2262;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 125, this.context) ) {
                case 1:
                    {
                    this.state = 2261;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public closeportalstmt(): CloseportalstmtContext {
        let localContext = new CloseportalstmtContext(this.context, this.state);
        this.enterRule(localContext, 126, PostgreSqlParser.RULE_closeportalstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2266;
            this.match(PostgreSqlParser.KW_CLOSE);
            this.state = 2269;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 2267;
                this.colid();
                }
                break;
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 2268;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copystmt(): CopystmtContext {
        let localContext = new CopystmtContext(this.context, this.state);
        this.enterRule(localContext, 128, PostgreSqlParser.RULE_copystmt);
        let _la: number;
        try {
            this.state = 2308;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 136, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2271;
                this.match(PostgreSqlParser.KW_COPY);
                this.state = 2273;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 107) {
                    {
                    this.state = 2272;
                    this.match(PostgreSqlParser.KW_BINARY);
                    }
                }

                this.state = 2275;
                this.table_name();
                this.state = 2277;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2276;
                    this.opt_column_list();
                    }
                }

                this.state = 2279;
                _la = this.tokenStream.LA(1);
                if(!(_la === 64 || _la === 94)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2281;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 297) {
                    {
                    this.state = 2280;
                    this.match(PostgreSqlParser.KW_PROGRAM);
                    }
                }

                this.state = 2283;
                this.copy_file_name();
                this.state = 2285;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 131, this.context) ) {
                case 1:
                    {
                    this.state = 2284;
                    this.copy_delimiter();
                    }
                    break;
                }
                this.state = 2288;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 132, this.context) ) {
                case 1:
                    {
                    this.state = 2287;
                    this.match(PostgreSqlParser.KW_WITH);
                    }
                    break;
                }
                this.state = 2290;
                this.copy_options();
                this.state = 2292;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103) {
                    {
                    this.state = 2291;
                    this.where_clause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2294;
                this.match(PostgreSqlParser.KW_COPY);
                this.state = 2295;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2296;
                this.preparablestmt();
                this.state = 2297;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 2298;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 2300;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 297) {
                    {
                    this.state = 2299;
                    this.match(PostgreSqlParser.KW_PROGRAM);
                    }
                }

                this.state = 2302;
                this.copy_file_name();
                this.state = 2304;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 135, this.context) ) {
                case 1:
                    {
                    this.state = 2303;
                    this.match(PostgreSqlParser.KW_WITH);
                    }
                    break;
                }
                this.state = 2306;
                this.copy_options();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_file_name(): Copy_file_nameContext {
        let localContext = new Copy_file_nameContext(this.context, this.state);
        this.enterRule(localContext, 130, PostgreSqlParser.RULE_copy_file_name);
        try {
            this.state = 2313;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2310;
                this.sconst();
                }
                break;
            case PostgreSqlParser.KW_STDIN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2311;
                this.match(PostgreSqlParser.KW_STDIN);
                }
                break;
            case PostgreSqlParser.KW_STDOUT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2312;
                this.match(PostgreSqlParser.KW_STDOUT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_options(): Copy_optionsContext {
        let localContext = new Copy_optionsContext(this.context, this.state);
        this.enterRule(localContext, 132, PostgreSqlParser.RULE_copy_options);
        let _la: number;
        try {
            let alternative: number;
            this.state = 2332;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 140, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2318;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 138, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2315;
                        this.copy_opt_item();
                        }
                        }
                    }
                    this.state = 2320;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 138, this.context);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2321;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2322;
                this.copy_generic_opt_elem();
                this.state = 2327;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 2323;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 2324;
                    this.copy_generic_opt_elem();
                    }
                    }
                    this.state = 2329;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2330;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_opt_item(): Copy_opt_itemContext {
        let localContext = new Copy_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 134, PostgreSqlParser.RULE_copy_opt_item);
        let _la: number;
        try {
            this.state = 2357;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 144, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2334;
                this.match(PostgreSqlParser.KW_BINARY);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2335;
                this.match(PostgreSqlParser.KW_FREEZE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2336;
                _la = this.tokenStream.LA(1);
                if(!(_la === 78 || _la === 183 || _la === 197 || _la === 298)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2338;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 36) {
                    {
                    this.state = 2337;
                    this.match(PostgreSqlParser.KW_AS);
                    }
                }

                this.state = 2340;
                this.sconst();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2341;
                this.match(PostgreSqlParser.KW_CSV);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2342;
                this.match(PostgreSqlParser.KW_HEADER);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2343;
                this.match(PostgreSqlParser.KW_FORCE);
                this.state = 2344;
                this.match(PostgreSqlParser.KW_QUOTE);
                this.state = 2347;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 142, this.context) ) {
                case 1:
                    {
                    this.state = 2345;
                    this.column_list();
                    }
                    break;
                case 2:
                    {
                    this.state = 2346;
                    this.match(PostgreSqlParser.STAR);
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2349;
                this.match(PostgreSqlParser.KW_FORCE);
                this.state = 2351;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 2350;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 2353;
                this.match(PostgreSqlParser.KW_NULL);
                this.state = 2354;
                this.column_list();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2355;
                this.match(PostgreSqlParser.KW_ENCODING);
                this.state = 2356;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_delimiter(): Copy_delimiterContext {
        let localContext = new Copy_delimiterContext(this.context, this.state);
        this.enterRule(localContext, 136, PostgreSqlParser.RULE_copy_delimiter);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2360;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 2359;
                this.match(PostgreSqlParser.KW_USING);
                }
            }

            this.state = 2362;
            this.match(PostgreSqlParser.KW_DELIMITERS);
            this.state = 2363;
            this.sconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_generic_opt_elem(): Copy_generic_opt_elemContext {
        let localContext = new Copy_generic_opt_elemContext(this.context, this.state);
        this.enterRule(localContext, 138, PostgreSqlParser.RULE_copy_generic_opt_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2365;
            this.collabel();
            this.state = 2367;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 12804) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 420484101) !== 0) || ((((_la - 80)) & ~0x1F) === 0 && ((1 << (_la - 80)) & 4227923969) !== 0) || ((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 4294967295) !== 0) || ((((_la - 144)) & ~0x1F) === 0 && ((1 << (_la - 144)) & 4294967295) !== 0) || ((((_la - 176)) & ~0x1F) === 0 && ((1 << (_la - 176)) & 4294967295) !== 0) || ((((_la - 208)) & ~0x1F) === 0 && ((1 << (_la - 208)) & 3223322623) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & 4294967295) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & 4294967295) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & 4294967295) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & 4294967295) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & 4294967295) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & 4294967295) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & 4290772991) !== 0) || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & 4294967295) !== 0) || ((((_la - 496)) & ~0x1F) === 0 && ((1 << (_la - 496)) & 25165183) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 486582415) !== 0) || _la === 584) {
                {
                this.state = 2366;
                this.copy_generic_opt_arg();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_generic_opt_arg(): Copy_generic_opt_argContext {
        let localContext = new Copy_generic_opt_argContext(this.context, this.state);
        this.enterRule(localContext, 140, PostgreSqlParser.RULE_copy_generic_opt_arg);
        try {
            this.state = 2376;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_ON:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2369;
                this.opt_boolean_or_string();
                }
                break;
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2370;
                this.numericonly();
                }
                break;
            case PostgreSqlParser.STAR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2371;
                this.match(PostgreSqlParser.STAR);
                }
                break;
            case PostgreSqlParser.OPEN_PAREN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2372;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2373;
                this.copy_generic_opt_arg_list();
                this.state = 2374;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_generic_opt_arg_list(): Copy_generic_opt_arg_listContext {
        let localContext = new Copy_generic_opt_arg_listContext(this.context, this.state);
        this.enterRule(localContext, 142, PostgreSqlParser.RULE_copy_generic_opt_arg_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2378;
            this.opt_boolean_or_string_column();
            this.state = 2383;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2379;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2380;
                this.opt_boolean_or_string_column();
                }
                }
                this.state = 2385;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createstmt(): CreatestmtContext {
        let localContext = new CreatestmtContext(this.context, this.state);
        this.enterRule(localContext, 144, PostgreSqlParser.RULE_createstmt);
        let _la: number;
        try {
            localContext = new ColumnCreateTableContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2386;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2388;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 213 || _la === 254 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 32773) !== 0)) {
                {
                this.state = 2387;
                this.opttemp();
                }
            }

            this.state = 2390;
            this.match(PostgreSqlParser.KW_TABLE);
            this.state = 2392;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 150, this.context) ) {
            case 1:
                {
                this.state = 2391;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 2394;
            this.table_name_create();
            this.state = 2460;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
                {
                this.state = 2395;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2397;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 1360008709) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2147491841) !== 0) || ((((_la - 120)) & ~0x1F) === 0 && ((1 << (_la - 120)) & 4294966809) !== 0) || ((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & 4294967295) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 4294967295) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290781183) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & 4294967295) !== 0) || ((((_la - 280)) & ~0x1F) === 0 && ((1 << (_la - 280)) & 4294967295) !== 0) || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 4294967295) !== 0) || ((((_la - 344)) & ~0x1F) === 0 && ((1 << (_la - 344)) & 4294967295) !== 0) || ((((_la - 376)) & ~0x1F) === 0 && ((1 << (_la - 376)) & 4294967295) !== 0) || ((((_la - 408)) & ~0x1F) === 0 && ((1 << (_la - 408)) & 4294967295) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & 4294950911) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & 3221225471) !== 0) || ((((_la - 506)) & ~0x1F) === 0 && ((1 << (_la - 506)) & 24575) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                    {
                    this.state = 2396;
                    this.tableelementlist();
                    }
                }

                this.state = 2399;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 2401;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 152, this.context) ) {
                case 1:
                    {
                    this.state = 2400;
                    this.optinherit();
                    }
                    break;
                }
                this.state = 2404;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 153, this.context) ) {
                case 1:
                    {
                    this.state = 2403;
                    this.partitionspec();
                    }
                    break;
                }
                this.state = 2407;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2406;
                    this.table_access_method_clause();
                    }
                }

                this.state = 2410;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 155, this.context) ) {
                case 1:
                    {
                    this.state = 2409;
                    this.optwith();
                    }
                    break;
                }
                this.state = 2413;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2412;
                    this.oncommitoption();
                    }
                }

                this.state = 2416;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 157, this.context) ) {
                case 1:
                    {
                    this.state = 2415;
                    this.opttablespace();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_OF:
                {
                this.state = 2418;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 2419;
                this.any_name();
                this.state = 2421;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 158, this.context) ) {
                case 1:
                    {
                    this.state = 2420;
                    this.opttypedtableelementlist();
                    }
                    break;
                }
                this.state = 2424;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 159, this.context) ) {
                case 1:
                    {
                    this.state = 2423;
                    this.partitionspec();
                    }
                    break;
                }
                this.state = 2427;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2426;
                    this.table_access_method_clause();
                    }
                }

                this.state = 2430;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 161, this.context) ) {
                case 1:
                    {
                    this.state = 2429;
                    this.optwith();
                    }
                    break;
                }
                this.state = 2433;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2432;
                    this.oncommitoption();
                    }
                }

                this.state = 2436;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 163, this.context) ) {
                case 1:
                    {
                    this.state = 2435;
                    this.opttablespace();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_PARTITION:
                {
                this.state = 2438;
                this.match(PostgreSqlParser.KW_PARTITION);
                this.state = 2439;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 2440;
                this.qualified_name();
                this.state = 2442;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2441;
                    this.opttypedtableelementlist();
                    }
                }

                this.state = 2444;
                this.partitionboundspec();
                this.state = 2446;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 165, this.context) ) {
                case 1:
                    {
                    this.state = 2445;
                    this.partitionspec();
                    }
                    break;
                }
                this.state = 2449;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2448;
                    this.table_access_method_clause();
                    }
                }

                this.state = 2452;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 167, this.context) ) {
                case 1:
                    {
                    this.state = 2451;
                    this.optwith();
                    }
                    break;
                }
                this.state = 2455;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2454;
                    this.oncommitoption();
                    }
                }

                this.state = 2458;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 169, this.context) ) {
                case 1:
                    {
                    this.state = 2457;
                    this.opttablespace();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opttemp(): OpttempContext {
        let localContext = new OpttempContext(this.context, this.state);
        this.enterRule(localContext, 146, PostgreSqlParser.RULE_opttemp);
        let _la: number;
        try {
            this.state = 2467;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_TEMPORARY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2462;
                this.match(PostgreSqlParser.KW_TEMPORARY);
                }
                break;
            case PostgreSqlParser.KW_TEMP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2463;
                this.match(PostgreSqlParser.KW_TEMP);
                }
                break;
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_LOCAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2464;
                _la = this.tokenStream.LA(1);
                if(!(_la === 213 || _la === 254)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2465;
                _la = this.tokenStream.LA(1);
                if(!(_la === 352 || _la === 354)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_UNLOGGED:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2466;
                this.match(PostgreSqlParser.KW_UNLOGGED);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opttypedtableelementlist(): OpttypedtableelementlistContext {
        let localContext = new OpttypedtableelementlistContext(this.context, this.state);
        this.enterRule(localContext, 148, PostgreSqlParser.RULE_opttypedtableelementlist);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2469;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2470;
            this.typedtableelementlist();
            this.state = 2471;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableelementlist(): TableelementlistContext {
        let localContext = new TableelementlistContext(this.context, this.state);
        this.enterRule(localContext, 150, PostgreSqlParser.RULE_tableelementlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2473;
            this.tableelement();
            this.state = 2478;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2474;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2475;
                this.tableelement();
                }
                }
                this.state = 2480;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typedtableelementlist(): TypedtableelementlistContext {
        let localContext = new TypedtableelementlistContext(this.context, this.state);
        this.enterRule(localContext, 152, PostgreSqlParser.RULE_typedtableelementlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2481;
            this.typedtableelement();
            this.state = 2486;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2482;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2483;
                this.typedtableelement();
                }
                }
                this.state = 2488;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableelement(): TableelementContext {
        let localContext = new TableelementContext(this.context, this.state);
        this.enterRule(localContext, 154, PostgreSqlParser.RULE_tableelement);
        try {
            this.state = 2492;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 174, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2489;
                this.column_def();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2490;
                this.tablelikeclause();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2491;
                this.tableconstraint();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typedtableelement(): TypedtableelementContext {
        let localContext = new TypedtableelementContext(this.context, this.state);
        this.enterRule(localContext, 156, PostgreSqlParser.RULE_typedtableelement);
        let _la: number;
        try {
            this.state = 2502;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 176, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2494;
                this.column_name_create();
                this.state = 2497;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 2495;
                    this.match(PostgreSqlParser.KW_WITH);
                    this.state = 2496;
                    this.match(PostgreSqlParser.KW_OPTIONS);
                    }
                }

                this.state = 2499;
                this.colquallist();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2501;
                this.tableconstraint();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_def(): Column_defContext {
        let localContext = new Column_defContext(this.context, this.state);
        this.enterRule(localContext, 158, PostgreSqlParser.RULE_column_def);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2504;
            this.column_name_create();
            this.state = 2505;
            this.typename();
            this.state = 2507;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 177, this.context) ) {
            case 1:
                {
                this.state = 2506;
                this.create_generic_options();
                }
                break;
            }
            this.state = 2510;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 178, this.context) ) {
            case 1:
                {
                this.state = 2509;
                this.storageCluase();
                }
                break;
            }
            this.state = 2514;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 543) {
                {
                this.state = 2512;
                this.match(PostgreSqlParser.KW_COMPRESSION);
                this.state = 2513;
                this.colid();
                }
            }

            this.state = 2517;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 180, this.context) ) {
            case 1:
                {
                this.state = 2516;
                this.opt_collate_clause();
                }
                break;
            }
            this.state = 2521;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 181, this.context) ) {
            case 1:
                {
                this.state = 2519;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 2520;
                this.match(PostgreSqlParser.KW_OPTIONS);
                }
                break;
            }
            this.state = 2523;
            this.colquallist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public storageCluase(): StorageCluaseContext {
        let localContext = new StorageCluaseContext(this.context, this.state);
        this.enterRule(localContext, 160, PostgreSqlParser.RULE_storageCluase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2525;
            this.match(PostgreSqlParser.KW_STORAGE);
            this.state = 2532;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 182, this.context) ) {
            case 1:
                {
                this.state = 2526;
                this.match(PostgreSqlParser.KW_PLAIN);
                }
                break;
            case 2:
                {
                this.state = 2527;
                this.match(PostgreSqlParser.KW_EXTERNAL);
                }
                break;
            case 3:
                {
                this.state = 2528;
                this.match(PostgreSqlParser.KW_EXTENDED);
                }
                break;
            case 4:
                {
                this.state = 2529;
                this.match(PostgreSqlParser.KW_MAIN);
                }
                break;
            case 5:
                {
                this.state = 2530;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            case 6:
                {
                this.state = 2531;
                this.colid();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colquallist(): ColquallistContext {
        let localContext = new ColquallistContext(this.context, this.state);
        this.enterRule(localContext, 162, PostgreSqlParser.RULE_colquallist);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2537;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 183, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2534;
                    this.colconstraint();
                    }
                    }
                }
                this.state = 2539;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 183, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colconstraint(): ColconstraintContext {
        let localContext = new ColconstraintContext(this.context, this.state);
        this.enterRule(localContext, 164, PostgreSqlParser.RULE_colconstraint);
        let _la: number;
        try {
            this.state = 2558;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 189, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2542;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 2540;
                    this.match(PostgreSqlParser.KW_CONSTRAINT);
                    this.state = 2541;
                    this.colid();
                    }
                }

                this.state = 2544;
                this.colconstraintelem();
                this.state = 2546;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 185, this.context) ) {
                case 1:
                    {
                    this.state = 2545;
                    this.deferrable_trigger();
                    }
                    break;
                }
                this.state = 2549;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 69) {
                    {
                    this.state = 2548;
                    this.initially_trigger();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2551;
                this.colconstraintelem();
                this.state = 2553;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 187, this.context) ) {
                case 1:
                    {
                    this.state = 2552;
                    this.deferrable_trigger();
                    }
                    break;
                }
                this.state = 2556;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 69) {
                    {
                    this.state = 2555;
                    this.initially_trigger();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colconstraintelem(): ColconstraintelemContext {
        let localContext = new ColconstraintelemContext(this.context, this.state);
        this.enterRule(localContext, 166, PostgreSqlParser.RULE_colconstraintelem);
        let _la: number;
        try {
            this.state = 2620;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 202, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2561;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 2560;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 2563;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2564;
                this.match(PostgreSqlParser.KW_UNIQUE);
                this.state = 2566;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 191, this.context) ) {
                case 1:
                    {
                    this.state = 2565;
                    this.opt_definition();
                    }
                    break;
                }
                this.state = 2569;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2568;
                    this.optconstablespace();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2571;
                this.match(PostgreSqlParser.KW_UNIQUE);
                this.state = 2573;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 193, this.context) ) {
                case 1:
                    {
                    this.state = 2572;
                    this.nulls_distinct();
                    }
                    break;
                }
                this.state = 2575;
                this.index_paramenters_create();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2576;
                this.match(PostgreSqlParser.KW_PRIMARY);
                this.state = 2577;
                this.match(PostgreSqlParser.KW_KEY);
                this.state = 2579;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 194, this.context) ) {
                case 1:
                    {
                    this.state = 2578;
                    this.opt_definition();
                    }
                    break;
                }
                this.state = 2582;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2581;
                    this.optconstablespace();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2584;
                this.match(PostgreSqlParser.KW_CHECK);
                this.state = 2585;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2586;
                this.expression();
                this.state = 2587;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 2590;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 196, this.context) ) {
                case 1:
                    {
                    this.state = 2588;
                    this.match(PostgreSqlParser.KW_NO);
                    this.state = 2589;
                    this.match(PostgreSqlParser.KW_INHERIT);
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2592;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 2593;
                this.primaryExpression(0);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2594;
                this.match(PostgreSqlParser.KW_GENERATED);
                this.state = 2595;
                this.generated_when();
                this.state = 2596;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 2606;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_IDENTITY:
                    {
                    this.state = 2597;
                    this.match(PostgreSqlParser.KW_IDENTITY);
                    this.state = 2599;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 197, this.context) ) {
                    case 1:
                        {
                        this.state = 2598;
                        this.optparenthesizedseqoptlist();
                        }
                        break;
                    }
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 2601;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 2602;
                    this.expression();
                    this.state = 2603;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    this.state = 2604;
                    this.match(PostgreSqlParser.KW_STORED);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2608;
                this.match(PostgreSqlParser.KW_REFERENCES);
                this.state = 2609;
                this.qualified_name();
                this.state = 2611;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 199, this.context) ) {
                case 1:
                    {
                    this.state = 2610;
                    this.opt_column_list();
                    }
                    break;
                }
                this.state = 2614;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 200, this.context) ) {
                case 1:
                    {
                    this.state = 2613;
                    this.key_match();
                    }
                    break;
                }
                this.state = 2617;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2616;
                    this.key_actions();
                    }
                }

                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2619;
                this.opt_collate_clause();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nulls_distinct(): Nulls_distinctContext {
        let localContext = new Nulls_distinctContext(this.context, this.state);
        this.enterRule(localContext, 168, PostgreSqlParser.RULE_nulls_distinct);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2622;
            this.match(PostgreSqlParser.KW_NULLS);
            this.state = 2624;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 77) {
                {
                this.state = 2623;
                this.match(PostgreSqlParser.KW_NOT);
                }
            }

            this.state = 2626;
            this.match(PostgreSqlParser.KW_DISTINCT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generated_when(): Generated_whenContext {
        let localContext = new Generated_whenContext(this.context, this.state);
        this.enterRule(localContext, 170, PostgreSqlParser.RULE_generated_when);
        try {
            this.state = 2631;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ALWAYS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2628;
                this.match(PostgreSqlParser.KW_ALWAYS);
                }
                break;
            case PostgreSqlParser.KW_BY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2629;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 2630;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deferrable_trigger(): Deferrable_triggerContext {
        let localContext = new Deferrable_triggerContext(this.context, this.state);
        this.enterRule(localContext, 172, PostgreSqlParser.RULE_deferrable_trigger);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2634;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 77) {
                {
                this.state = 2633;
                this.match(PostgreSqlParser.KW_NOT);
                }
            }

            this.state = 2636;
            this.match(PostgreSqlParser.KW_DEFERRABLE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public initially_trigger(): Initially_triggerContext {
        let localContext = new Initially_triggerContext(this.context, this.state);
        this.enterRule(localContext, 174, PostgreSqlParser.RULE_initially_trigger);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2638;
            this.match(PostgreSqlParser.KW_INITIALLY);
            this.state = 2639;
            _la = this.tokenStream.LA(1);
            if(!(_la === 180 || _la === 221)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablelikeclause(): TablelikeclauseContext {
        let localContext = new TablelikeclauseContext(this.context, this.state);
        this.enterRule(localContext, 176, PostgreSqlParser.RULE_tablelikeclause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2641;
            this.match(PostgreSqlParser.KW_LIKE);
            this.state = 2642;
            this.qualified_name();
            this.state = 2647;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 200 || _la === 224) {
                {
                {
                this.state = 2643;
                _la = this.tokenStream.LA(1);
                if(!(_la === 200 || _la === 224)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2644;
                this.tablelikeoption();
                }
                }
                this.state = 2649;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablelikeoption(): TablelikeoptionContext {
        let localContext = new TablelikeoptionContext(this.context, this.state);
        this.enterRule(localContext, 178, PostgreSqlParser.RULE_tablelikeoption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2650;
            _la = this.tokenStream.LA(1);
            if(!(_la === 30 || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 524321) !== 0) || _la === 219 || _la === 227 || _la === 342 || _la === 345 || _la === 438)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableconstraint(): TableconstraintContext {
        let localContext = new TableconstraintContext(this.context, this.state);
        this.enterRule(localContext, 180, PostgreSqlParser.RULE_tableconstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2654;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 2652;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 2653;
                this.colid();
                }
            }

            this.state = 2656;
            this.constraintelem();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintelem(): ConstraintelemContext {
        let localContext = new ConstraintelemContext(this.context, this.state);
        this.enterRule(localContext, 182, PostgreSqlParser.RULE_constraintelem);
        let _la: number;
        try {
            this.state = 2723;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CHECK:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2658;
                this.match(PostgreSqlParser.KW_CHECK);
                this.state = 2659;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2660;
                this.expression();
                this.state = 2661;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 2662;
                this.constraintattributespec();
                }
                break;
            case PostgreSqlParser.KW_PRIMARY:
            case PostgreSqlParser.KW_UNIQUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2667;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_UNIQUE:
                    {
                    this.state = 2664;
                    this.match(PostgreSqlParser.KW_UNIQUE);
                    }
                    break;
                case PostgreSqlParser.KW_PRIMARY:
                    {
                    {
                    this.state = 2665;
                    this.match(PostgreSqlParser.KW_PRIMARY);
                    this.state = 2666;
                    this.match(PostgreSqlParser.KW_KEY);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2684;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 2669;
                    this.opt_column_list();
                    this.state = 2671;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 209, this.context) ) {
                    case 1:
                        {
                        this.state = 2670;
                        this.opt_c_include();
                        }
                        break;
                    }
                    this.state = 2674;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 210, this.context) ) {
                    case 1:
                        {
                        this.state = 2673;
                        this.opt_definition();
                        }
                        break;
                    }
                    this.state = 2677;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 100) {
                        {
                        this.state = 2676;
                        this.optconstablespace();
                        }
                    }

                    this.state = 2679;
                    this.constraintattributespec();
                    }
                    break;
                case PostgreSqlParser.KW_USING:
                    {
                    this.state = 2681;
                    this.existingindex();
                    this.state = 2682;
                    this.constraintattributespec();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case PostgreSqlParser.KW_EXCLUDE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2686;
                this.match(PostgreSqlParser.KW_EXCLUDE);
                this.state = 2688;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2687;
                    this.table_access_method_clause();
                    }
                }

                this.state = 2690;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2691;
                this.exclusionconstraintlist();
                this.state = 2692;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 2694;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 214, this.context) ) {
                case 1:
                    {
                    this.state = 2693;
                    this.opt_c_include();
                    }
                    break;
                }
                this.state = 2697;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 215, this.context) ) {
                case 1:
                    {
                    this.state = 2696;
                    this.opt_definition();
                    }
                    break;
                }
                this.state = 2700;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2699;
                    this.optconstablespace();
                    }
                }

                this.state = 2703;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103) {
                    {
                    this.state = 2702;
                    this.exclusionwhereclause();
                    }
                }

                this.state = 2705;
                this.constraintattributespec();
                }
                break;
            case PostgreSqlParser.KW_FOREIGN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2707;
                this.match(PostgreSqlParser.KW_FOREIGN);
                this.state = 2708;
                this.match(PostgreSqlParser.KW_KEY);
                this.state = 2709;
                this.opt_column_list();
                this.state = 2710;
                this.match(PostgreSqlParser.KW_REFERENCES);
                this.state = 2711;
                this.qualified_name();
                this.state = 2713;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 218, this.context) ) {
                case 1:
                    {
                    this.state = 2712;
                    this.opt_column_list();
                    }
                    break;
                }
                this.state = 2716;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 219, this.context) ) {
                case 1:
                    {
                    this.state = 2715;
                    this.key_match();
                    }
                    break;
                }
                this.state = 2719;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2718;
                    this.key_actions();
                    }
                }

                this.state = 2721;
                this.constraintattributespec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_column_list(): Opt_column_listContext {
        let localContext = new Opt_column_listContext(this.context, this.state);
        this.enterRule(localContext, 184, PostgreSqlParser.RULE_opt_column_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2725;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2726;
            this.column_list();
            this.state = 2727;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_column_list_create(): Opt_column_list_createContext {
        let localContext = new Opt_column_list_createContext(this.context, this.state);
        this.enterRule(localContext, 186, PostgreSqlParser.RULE_opt_column_list_create);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2729;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2730;
            this.column_name_create();
            this.state = 2735;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2731;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2732;
                this.column_name_create();
                }
                }
                this.state = 2737;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2738;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_list(): Column_listContext {
        let localContext = new Column_listContext(this.context, this.state);
        this.enterRule(localContext, 188, PostgreSqlParser.RULE_column_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2740;
            this.column_name();
            this.state = 2745;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 223, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2741;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 2742;
                    this.column_name();
                    }
                    }
                }
                this.state = 2747;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 223, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_c_include(): Opt_c_includeContext {
        let localContext = new Opt_c_includeContext(this.context, this.state);
        this.enterRule(localContext, 190, PostgreSqlParser.RULE_opt_c_include);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2748;
            this.match(PostgreSqlParser.KW_INCLUDE);
            this.state = 2749;
            this.opt_column_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_match(): Key_matchContext {
        let localContext = new Key_matchContext(this.context, this.state);
        this.enterRule(localContext, 192, PostgreSqlParser.RULE_key_match);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2751;
            this.match(PostgreSqlParser.KW_MATCH);
            this.state = 2752;
            _la = this.tokenStream.LA(1);
            if(!(_la === 113 || _la === 284 || _la === 336)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exclusionconstraintlist(): ExclusionconstraintlistContext {
        let localContext = new ExclusionconstraintlistContext(this.context, this.state);
        this.enterRule(localContext, 194, PostgreSqlParser.RULE_exclusionconstraintlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2754;
            this.exclusionconstraintelem();
            this.state = 2759;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2755;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2756;
                this.exclusionconstraintelem();
                }
                }
                this.state = 2761;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exclusionconstraintelem(): ExclusionconstraintelemContext {
        let localContext = new ExclusionconstraintelemContext(this.context, this.state);
        this.enterRule(localContext, 196, PostgreSqlParser.RULE_exclusionconstraintelem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2762;
            this.index_elem();
            this.state = 2763;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 2770;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 225, this.context) ) {
            case 1:
                {
                this.state = 2764;
                this.any_operator();
                }
                break;
            case 2:
                {
                this.state = 2765;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 2766;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2767;
                this.any_operator();
                this.state = 2768;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exclusionwhereclause(): ExclusionwhereclauseContext {
        let localContext = new ExclusionwhereclauseContext(this.context, this.state);
        this.enterRule(localContext, 198, PostgreSqlParser.RULE_exclusionwhereclause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2772;
            this.match(PostgreSqlParser.KW_WHERE);
            this.state = 2773;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2774;
            this.expression();
            this.state = 2775;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_actions(): Key_actionsContext {
        let localContext = new Key_actionsContext(this.context, this.state);
        this.enterRule(localContext, 200, PostgreSqlParser.RULE_key_actions);
        let _la: number;
        try {
            this.state = 2785;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 228, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2777;
                this.key_update();
                this.state = 2779;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2778;
                    this.key_delete();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2781;
                this.key_delete();
                this.state = 2783;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2782;
                    this.key_update();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_update(): Key_updateContext {
        let localContext = new Key_updateContext(this.context, this.state);
        this.enterRule(localContext, 202, PostgreSqlParser.RULE_key_update);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2787;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 2788;
            this.match(PostgreSqlParser.KW_UPDATE);
            this.state = 2789;
            this.key_action();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_delete(): Key_deleteContext {
        let localContext = new Key_deleteContext(this.context, this.state);
        this.enterRule(localContext, 204, PostgreSqlParser.RULE_key_delete);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2791;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 2792;
            this.match(PostgreSqlParser.KW_DELETE);
            this.state = 2793;
            this.key_action();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_action(): Key_actionContext {
        let localContext = new Key_actionContext(this.context, this.state);
        this.enterRule(localContext, 206, PostgreSqlParser.RULE_key_action);
        let _la: number;
        try {
            this.state = 2804;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_NO:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2795;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 2796;
                this.match(PostgreSqlParser.KW_ACTION);
                }
                break;
            case PostgreSqlParser.KW_RESTRICT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2797;
                this.match(PostgreSqlParser.KW_RESTRICT);
                }
                break;
            case PostgreSqlParser.KW_CASCADE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2798;
                this.match(PostgreSqlParser.KW_CASCADE);
                }
                break;
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2799;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 2800;
                _la = this.tokenStream.LA(1);
                if(!(_la === 53 || _la === 78)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2802;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 229, this.context) ) {
                case 1:
                    {
                    this.state = 2801;
                    this.column_list();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optinherit(): OptinheritContext {
        let localContext = new OptinheritContext(this.context, this.state);
        this.enterRule(localContext, 208, PostgreSqlParser.RULE_optinherit);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2806;
            this.match(PostgreSqlParser.KW_INHERITS);
            this.state = 2807;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2808;
            this.qualified_name_list();
            this.state = 2809;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionspec(): PartitionspecContext {
        let localContext = new PartitionspecContext(this.context, this.state);
        this.enterRule(localContext, 210, PostgreSqlParser.RULE_partitionspec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2811;
            this.match(PostgreSqlParser.KW_PARTITION);
            this.state = 2812;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 2813;
            this.colid();
            this.state = 2814;
            this.part_params();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public part_params(): Part_paramsContext {
        let localContext = new Part_paramsContext(this.context, this.state);
        this.enterRule(localContext, 212, PostgreSqlParser.RULE_part_params);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2816;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2817;
            this.part_elem();
            this.state = 2822;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2818;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2819;
                this.part_elem();
                }
                }
                this.state = 2824;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2825;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public part_elem(): Part_elemContext {
        let localContext = new Part_elemContext(this.context, this.state);
        this.enterRule(localContext, 214, PostgreSqlParser.RULE_part_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2833;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 232, this.context) ) {
            case 1:
                {
                this.state = 2827;
                this.column_name();
                }
                break;
            case 2:
                {
                this.state = 2828;
                this.func_expr_windowless();
                }
                break;
            case 3:
                {
                {
                this.state = 2829;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2830;
                this.expression();
                this.state = 2831;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                }
                break;
            }
            this.state = 2836;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 233, this.context) ) {
            case 1:
                {
                this.state = 2835;
                this.opt_collate_clause();
                }
                break;
            }
            this.state = 2839;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 1572823) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 2838;
                this.any_name();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_access_method_clause(): Table_access_method_clauseContext {
        let localContext = new Table_access_method_clauseContext(this.context, this.state);
        this.enterRule(localContext, 216, PostgreSqlParser.RULE_table_access_method_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2841;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 2842;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optwith(): OptwithContext {
        let localContext = new OptwithContext(this.context, this.state);
        this.enterRule(localContext, 218, PostgreSqlParser.RULE_optwith);
        let _la: number;
        try {
            this.state = 2848;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 235, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2844;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 2845;
                this.reloptions();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2846;
                _la = this.tokenStream.LA(1);
                if(!(_la === 105 || _la === 379)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2847;
                this.match(PostgreSqlParser.KW_OIDS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public oncommitoption(): OncommitoptionContext {
        let localContext = new OncommitoptionContext(this.context, this.state);
        this.enterRule(localContext, 220, PostgreSqlParser.RULE_oncommitoption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2850;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 2851;
            this.match(PostgreSqlParser.KW_COMMIT);
            this.state = 2857;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DROP:
                {
                this.state = 2852;
                this.match(PostgreSqlParser.KW_DROP);
                }
                break;
            case PostgreSqlParser.KW_DELETE:
                {
                this.state = 2853;
                this.match(PostgreSqlParser.KW_DELETE);
                this.state = 2854;
                this.match(PostgreSqlParser.KW_ROWS);
                }
                break;
            case PostgreSqlParser.KW_PRESERVE:
                {
                this.state = 2855;
                this.match(PostgreSqlParser.KW_PRESERVE);
                this.state = 2856;
                this.match(PostgreSqlParser.KW_ROWS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opttablespace(): OpttablespaceContext {
        let localContext = new OpttablespaceContext(this.context, this.state);
        this.enterRule(localContext, 222, PostgreSqlParser.RULE_opttablespace);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2859;
            this.match(PostgreSqlParser.KW_TABLESPACE);
            this.state = 2860;
            this.tablespace_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_paramenters_create(): Index_paramenters_createContext {
        let localContext = new Index_paramenters_createContext(this.context, this.state);
        this.enterRule(localContext, 224, PostgreSqlParser.RULE_index_paramenters_create);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2863;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 237, this.context) ) {
            case 1:
                {
                this.state = 2862;
                this.opt_include();
                }
                break;
            }
            this.state = 2866;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 238, this.context) ) {
            case 1:
                {
                this.state = 2865;
                this.with_clause();
                }
                break;
            }
            this.state = 2869;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 2868;
                this.optconstablespace();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optconstablespace(): OptconstablespaceContext {
        let localContext = new OptconstablespaceContext(this.context, this.state);
        this.enterRule(localContext, 226, PostgreSqlParser.RULE_optconstablespace);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2871;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 2872;
            this.match(PostgreSqlParser.KW_INDEX);
            this.state = 2873;
            this.opttablespace();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public existingindex(): ExistingindexContext {
        let localContext = new ExistingindexContext(this.context, this.state);
        this.enterRule(localContext, 228, PostgreSqlParser.RULE_existingindex);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2875;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 2876;
            this.match(PostgreSqlParser.KW_INDEX);
            this.state = 2877;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createstatsstmt(): CreatestatsstmtContext {
        let localContext = new CreatestatsstmtContext(this.context, this.state);
        this.enterRule(localContext, 230, PostgreSqlParser.RULE_createstatsstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2879;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2880;
            this.match(PostgreSqlParser.KW_STATISTICS);
            this.state = 2885;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 1572823) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 2882;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 240, this.context) ) {
                case 1:
                    {
                    this.state = 2881;
                    this.opt_if_not_exists();
                    }
                    break;
                }
                this.state = 2884;
                this.any_name();
                }
            }

            this.state = 2888;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 2887;
                this.opt_column_list();
                }
            }

            this.state = 2890;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 2893;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 243, this.context) ) {
            case 1:
                {
                this.state = 2891;
                this.column_expr_list();
                }
                break;
            case 2:
                {
                this.state = 2892;
                this.expr_list();
                }
                break;
            }
            this.state = 2895;
            this.from_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterstatsstmt(): AlterstatsstmtContext {
        let localContext = new AlterstatsstmtContext(this.context, this.state);
        this.enterRule(localContext, 232, PostgreSqlParser.RULE_alterstatsstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2897;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 2898;
            this.match(PostgreSqlParser.KW_STATISTICS);
            this.state = 2900;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 244, this.context) ) {
            case 1:
                {
                this.state = 2899;
                this.opt_if_exists();
                }
                break;
            }
            this.state = 2902;
            this.any_name();
            this.state = 2903;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 2904;
            this.match(PostgreSqlParser.KW_STATISTICS);
            this.state = 2905;
            this.signediconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createasstmt(): CreateasstmtContext {
        let localContext = new CreateasstmtContext(this.context, this.state);
        this.enterRule(localContext, 234, PostgreSqlParser.RULE_createasstmt);
        let _la: number;
        try {
            localContext = new QueryCreateTableContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2907;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2909;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 213 || _la === 254 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 32773) !== 0)) {
                {
                this.state = 2908;
                this.opttemp();
                }
            }

            this.state = 2911;
            this.match(PostgreSqlParser.KW_TABLE);
            this.state = 2913;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 246, this.context) ) {
            case 1:
                {
                this.state = 2912;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 2915;
            this.create_as_target();
            this.state = 2916;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 2917;
            this.selectstmt();
            this.state = 2919;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 247, this.context) ) {
            case 1:
                {
                this.state = 2918;
                this.opt_with_data();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_as_target(): Create_as_targetContext {
        let localContext = new Create_as_targetContext(this.context, this.state);
        this.enterRule(localContext, 236, PostgreSqlParser.RULE_create_as_target);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2921;
            this.table_name_create();
            this.state = 2923;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 2922;
                this.opt_column_list_create();
                }
            }

            this.state = 2926;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 2925;
                this.table_access_method_clause();
                }
            }

            this.state = 2929;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105 || _la === 379) {
                {
                this.state = 2928;
                this.optwith();
                }
            }

            this.state = 2932;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 2931;
                this.oncommitoption();
                }
            }

            this.state = 2935;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 351) {
                {
                this.state = 2934;
                this.opttablespace();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_with_data(): Opt_with_dataContext {
        let localContext = new Opt_with_dataContext(this.context, this.state);
        this.enterRule(localContext, 238, PostgreSqlParser.RULE_opt_with_data);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2937;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 2941;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DATA:
                {
                this.state = 2938;
                this.match(PostgreSqlParser.KW_DATA);
                }
                break;
            case PostgreSqlParser.KW_NO:
                {
                this.state = 2939;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 2940;
                this.match(PostgreSqlParser.KW_DATA);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public creatematviewstmt(): CreatematviewstmtContext {
        let localContext = new CreatematviewstmtContext(this.context, this.state);
        this.enterRule(localContext, 240, PostgreSqlParser.RULE_creatematviewstmt);
        let _la: number;
        try {
            localContext = new CreateMaterializedViewContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2943;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2945;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 367) {
                {
                this.state = 2944;
                this.match(PostgreSqlParser.KW_UNLOGGED);
                }
            }

            this.state = 2947;
            this.match(PostgreSqlParser.KW_MATERIALIZED);
            this.state = 2948;
            this.match(PostgreSqlParser.KW_VIEW);
            this.state = 2950;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 255, this.context) ) {
            case 1:
                {
                this.state = 2949;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 2952;
            this.create_mv_target();
            this.state = 2953;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 2954;
            this.selectstmt();
            this.state = 2956;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 256, this.context) ) {
            case 1:
                {
                this.state = 2955;
                this.opt_with_data();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_mv_target(): Create_mv_targetContext {
        let localContext = new Create_mv_targetContext(this.context, this.state);
        this.enterRule(localContext, 242, PostgreSqlParser.RULE_create_mv_target);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2958;
            this.view_name_create();
            this.state = 2960;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 2959;
                this.opt_column_list_create();
                }
            }

            this.state = 2963;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 2962;
                this.table_access_method_clause();
                }
            }

            this.state = 2966;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 2965;
                this.opt_reloptions();
                }
            }

            this.state = 2969;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 351) {
                {
                this.state = 2968;
                this.opttablespace();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public refreshmatviewstmt(): RefreshmatviewstmtContext {
        let localContext = new RefreshmatviewstmtContext(this.context, this.state);
        this.enterRule(localContext, 244, PostgreSqlParser.RULE_refreshmatviewstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2971;
            this.match(PostgreSqlParser.KW_REFRESH);
            this.state = 2972;
            this.match(PostgreSqlParser.KW_MATERIALIZED);
            this.state = 2973;
            this.match(PostgreSqlParser.KW_VIEW);
            this.state = 2975;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 109) {
                {
                this.state = 2974;
                this.match(PostgreSqlParser.KW_CONCURRENTLY);
                }
            }

            this.state = 2977;
            this.view_name();
            this.state = 2979;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 262, this.context) ) {
            case 1:
                {
                this.state = 2978;
                this.opt_with_data();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createseqstmt(): CreateseqstmtContext {
        let localContext = new CreateseqstmtContext(this.context, this.state);
        this.enterRule(localContext, 246, PostgreSqlParser.RULE_createseqstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2981;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2983;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 213 || _la === 254 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 32773) !== 0)) {
                {
                this.state = 2982;
                this.opttemp();
                }
            }

            this.state = 2985;
            this.match(PostgreSqlParser.KW_SEQUENCE);
            this.state = 2987;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 264, this.context) ) {
            case 1:
                {
                this.state = 2986;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 2989;
            this.qualified_name();
            this.state = 2991;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 265, this.context) ) {
            case 1:
                {
                this.state = 2990;
                this.seqoptlist();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterseqstmt(): AlterseqstmtContext {
        let localContext = new AlterseqstmtContext(this.context, this.state);
        this.enterRule(localContext, 248, PostgreSqlParser.RULE_alterseqstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2993;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 2994;
            this.match(PostgreSqlParser.KW_SEQUENCE);
            this.state = 2996;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 266, this.context) ) {
            case 1:
                {
                this.state = 2995;
                this.opt_if_exists();
                }
                break;
            }
            this.state = 2998;
            this.qualified_name();
            this.state = 2999;
            this.seqoptlist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optparenthesizedseqoptlist(): OptparenthesizedseqoptlistContext {
        let localContext = new OptparenthesizedseqoptlistContext(this.context, this.state);
        this.enterRule(localContext, 250, PostgreSqlParser.RULE_optparenthesizedseqoptlist);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3001;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3002;
            this.seqoptlist();
            this.state = 3003;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public seqoptlist(): SeqoptlistContext {
        let localContext = new SeqoptlistContext(this.context, this.state);
        this.enterRule(localContext, 252, PostgreSqlParser.RULE_seqoptlist);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3006;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 3005;
                    this.seqoptelem();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3008;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 267, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public seqoptelem(): SeqoptelemContext {
        let localContext = new SeqoptelemContext(this.context, this.state);
        this.enterRule(localContext, 254, PostgreSqlParser.RULE_seqoptelem);
        let _la: number;
        try {
            this.state = 3043;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3010;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 3011;
                this.simpletypename();
                }
                break;
            case PostgreSqlParser.KW_CACHE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3012;
                this.match(PostgreSqlParser.KW_CACHE);
                this.state = 3014;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 13 || _la === 571 || _la === 573) {
                    {
                    this.state = 3013;
                    this.numericonly();
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_INCREMENT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3016;
                this.match(PostgreSqlParser.KW_INCREMENT);
                this.state = 3018;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 147) {
                    {
                    this.state = 3017;
                    this.match(PostgreSqlParser.KW_BY);
                    }
                }

                this.state = 3020;
                this.numericonly();
                }
                break;
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINVALUE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3021;
                _la = this.tokenStream.LA(1);
                if(!(_la === 260 || _la === 262)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3022;
                this.numericonly();
                }
                break;
            case PostgreSqlParser.KW_NO:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3023;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 3024;
                _la = this.tokenStream.LA(1);
                if(!(_la === 173 || _la === 260 || _la === 262)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_OWNED:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3025;
                this.match(PostgreSqlParser.KW_OWNED);
                this.state = 3026;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 3027;
                this.column_name();
                }
                break;
            case PostgreSqlParser.KW_SEQUENCE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3028;
                this.match(PostgreSqlParser.KW_SEQUENCE);
                this.state = 3029;
                this.match(PostgreSqlParser.KW_NAME);
                this.state = 3030;
                this.any_name();
                }
                break;
            case PostgreSqlParser.KW_START:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3031;
                this.match(PostgreSqlParser.KW_START);
                this.state = 3033;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 3032;
                    this.match(PostgreSqlParser.KW_WITH);
                    }
                }

                this.state = 3035;
                this.numericonly();
                }
                break;
            case PostgreSqlParser.KW_RESTART:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3036;
                this.match(PostgreSqlParser.KW_RESTART);
                this.state = 3038;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 271, this.context) ) {
                case 1:
                    {
                    this.state = 3037;
                    this.match(PostgreSqlParser.KW_WITH);
                    }
                    break;
                }
                this.state = 3041;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 13 || _la === 571 || _la === 573) {
                    {
                    this.state = 3040;
                    this.numericonly();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numericonly(): NumericonlyContext {
        let localContext = new NumericonlyContext(this.context, this.state);
        this.enterRule(localContext, 256, PostgreSqlParser.RULE_numericonly);
        let _la: number;
        try {
            this.state = 3050;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 275, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3046;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 13) {
                    {
                    this.state = 3045;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 12 || _la === 13)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3048;
                this.match(PostgreSqlParser.Numeric);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3049;
                this.signediconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numericonly_list(): Numericonly_listContext {
        let localContext = new Numericonly_listContext(this.context, this.state);
        this.enterRule(localContext, 258, PostgreSqlParser.RULE_numericonly_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3052;
            this.numericonly();
            this.state = 3057;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3053;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3054;
                this.numericonly();
                }
                }
                this.state = 3059;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createplangstmt(): CreateplangstmtContext {
        let localContext = new CreateplangstmtContext(this.context, this.state);
        this.enterRule(localContext, 260, PostgreSqlParser.RULE_createplangstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3060;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3062;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 3061;
                this.opt_or_replace();
                }
            }

            this.state = 3065;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 359) {
                {
                this.state = 3064;
                this.match(PostgreSqlParser.KW_TRUSTED);
                }
            }

            this.state = 3068;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 295) {
                {
                this.state = 3067;
                this.match(PostgreSqlParser.KW_PROCEDURAL);
                }
            }

            this.state = 3070;
            this.match(PostgreSqlParser.KW_LANGUAGE);
            this.state = 3071;
            this.colid();
            this.state = 3084;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 282, this.context) ) {
            case 1:
                {
                this.state = 3072;
                this.match(PostgreSqlParser.KW_HANDLER);
                this.state = 3073;
                this.any_name();
                this.state = 3076;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 280, this.context) ) {
                case 1:
                    {
                    this.state = 3074;
                    this.match(PostgreSqlParser.KW_INLINE);
                    this.state = 3075;
                    this.any_name();
                    }
                    break;
                }
                this.state = 3082;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 281, this.context) ) {
                case 1:
                    {
                    this.state = 3078;
                    this.match(PostgreSqlParser.KW_VALIDATOR);
                    this.state = 3079;
                    this.any_name();
                    }
                    break;
                case 2:
                    {
                    this.state = 3080;
                    this.match(PostgreSqlParser.KW_NO);
                    this.state = 3081;
                    this.match(PostgreSqlParser.KW_VALIDATOR);
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createtablespacestmt(): CreatetablespacestmtContext {
        let localContext = new CreatetablespacestmtContext(this.context, this.state);
        this.enterRule(localContext, 262, PostgreSqlParser.RULE_createtablespacestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3086;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3087;
            this.opttablespace();
            this.state = 3090;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 282) {
                {
                this.state = 3088;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 3089;
                this.rolespec();
                }
            }

            this.state = 3092;
            this.match(PostgreSqlParser.KW_LOCATION);
            this.state = 3093;
            this.sconst();
            this.state = 3095;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 284, this.context) ) {
            case 1:
                {
                this.state = 3094;
                this.opt_reloptions();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createextensionstmt(): CreateextensionstmtContext {
        let localContext = new CreateextensionstmtContext(this.context, this.state);
        this.enterRule(localContext, 264, PostgreSqlParser.RULE_createextensionstmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3097;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3098;
            this.match(PostgreSqlParser.KW_EXTENSION);
            this.state = 3100;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 285, this.context) ) {
            case 1:
                {
                this.state = 3099;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 3102;
            this.colid();
            this.state = 3104;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 286, this.context) ) {
            case 1:
                {
                this.state = 3103;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 3109;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 287, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3106;
                    this.create_extension_opt_item();
                    }
                    }
                }
                this.state = 3111;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 287, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_extension_opt_item(): Create_extension_opt_itemContext {
        let localContext = new Create_extension_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 266, PostgreSqlParser.RULE_create_extension_opt_item);
        let _la: number;
        try {
            this.state = 3117;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SCHEMA:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3112;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 3113;
                this.schema_name();
                }
                break;
            case PostgreSqlParser.KW_FROM:
            case PostgreSqlParser.KW_VERSION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3114;
                _la = this.tokenStream.LA(1);
                if(!(_la === 64 || _la === 375)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3115;
                this.nonreservedword_or_sconst();
                }
                break;
            case PostgreSqlParser.KW_CASCADE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3116;
                this.match(PostgreSqlParser.KW_CASCADE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterextensionstmt(): AlterextensionstmtContext {
        let localContext = new AlterextensionstmtContext(this.context, this.state);
        this.enterRule(localContext, 268, PostgreSqlParser.RULE_alterextensionstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3119;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3120;
            this.match(PostgreSqlParser.KW_EXTENSION);
            this.state = 3121;
            this.colid();
            this.state = 3122;
            this.match(PostgreSqlParser.KW_UPDATE);
            this.state = 3127;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 94) {
                {
                {
                this.state = 3123;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 3124;
                this.nonreservedword_or_sconst();
                }
                }
                this.state = 3129;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterextensioncontentsstmt(): AlterextensioncontentsstmtContext {
        let localContext = new AlterextensioncontentsstmtContext(this.context, this.state);
        this.enterRule(localContext, 270, PostgreSqlParser.RULE_alterextensioncontentsstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3130;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3131;
            this.match(PostgreSqlParser.KW_EXTENSION);
            this.state = 3132;
            this.colid();
            this.state = 3133;
            _la = this.tokenStream.LA(1);
            if(!(_la === 133 || _la === 191)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3166;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 290, this.context) ) {
            case 1:
                {
                this.state = 3134;
                this.match(PostgreSqlParser.KW_TRANSFORM);
                this.state = 3135;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 3136;
                this.typename();
                this.state = 3137;
                this.match(PostgreSqlParser.KW_LANGUAGE);
                this.state = 3138;
                this.colid();
                }
                break;
            case 2:
                {
                this.state = 3140;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 3141;
                this.routine_with_argtypes();
                }
                break;
            case 3:
                {
                this.state = 3142;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 3143;
                this.procedure_with_argtypes();
                }
                break;
            case 4:
                {
                this.state = 3144;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 3145;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 206)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3146;
                this.any_name();
                this.state = 3147;
                this.table_access_method_clause();
                }
                break;
            case 5:
                {
                this.state = 3149;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 3150;
                this.operator_with_argtypes();
                }
                break;
            case 6:
                {
                this.state = 3151;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 3152;
                this.function_with_argtypes();
                }
                break;
            case 7:
                {
                this.state = 3153;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3154;
                this.typename();
                }
                break;
            case 8:
                {
                this.state = 3155;
                this.match(PostgreSqlParser.KW_CAST);
                this.state = 3156;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 3157;
                this.typename();
                this.state = 3158;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 3159;
                this.typename();
                this.state = 3160;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 9:
                {
                this.state = 3162;
                this.match(PostgreSqlParser.KW_AGGREGATE);
                this.state = 3163;
                this.aggregate_with_argtypes();
                }
                break;
            case 10:
                {
                this.state = 3164;
                this.object_type_name();
                }
                break;
            case 11:
                {
                this.state = 3165;
                this.object_type_any_name();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createfdwstmt(): CreatefdwstmtContext {
        let localContext = new CreatefdwstmtContext(this.context, this.state);
        this.enterRule(localContext, 272, PostgreSqlParser.RULE_createfdwstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3168;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3169;
            this.match(PostgreSqlParser.KW_FOREIGN);
            this.state = 3170;
            this.match(PostgreSqlParser.KW_DATA);
            this.state = 3171;
            this.match(PostgreSqlParser.KW_WRAPPER);
            this.state = 3172;
            this.colid();
            this.state = 3174;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 291, this.context) ) {
            case 1:
                {
                this.state = 3173;
                this.fdw_options();
                }
                break;
            }
            this.state = 3177;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 292, this.context) ) {
            case 1:
                {
                this.state = 3176;
                this.create_generic_options();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fdw_option(): Fdw_optionContext {
        let localContext = new Fdw_optionContext(this.context, this.state);
        this.enterRule(localContext, 274, PostgreSqlParser.RULE_fdw_option);
        let _la: number;
        try {
            this.state = 3185;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_VALIDATOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3179;
                _la = this.tokenStream.LA(1);
                if(!(_la === 215 || _la === 373)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3181;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 293, this.context) ) {
                case 1:
                    {
                    this.state = 3180;
                    this.any_name();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_NO:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3183;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 3184;
                _la = this.tokenStream.LA(1);
                if(!(_la === 215 || _la === 373)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fdw_options(): Fdw_optionsContext {
        let localContext = new Fdw_optionsContext(this.context, this.state);
        this.enterRule(localContext, 276, PostgreSqlParser.RULE_fdw_options);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3188;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 3187;
                    this.fdw_option();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3190;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 295, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterfdwstmt(): AlterfdwstmtContext {
        let localContext = new AlterfdwstmtContext(this.context, this.state);
        this.enterRule(localContext, 278, PostgreSqlParser.RULE_alterfdwstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3192;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3193;
            this.match(PostgreSqlParser.KW_FOREIGN);
            this.state = 3194;
            this.match(PostgreSqlParser.KW_DATA);
            this.state = 3195;
            this.match(PostgreSqlParser.KW_WRAPPER);
            this.state = 3196;
            this.colid();
            this.state = 3202;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 297, this.context) ) {
            case 1:
                {
                this.state = 3198;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 215 || _la === 269 || _la === 373) {
                    {
                    this.state = 3197;
                    this.fdw_options();
                    }
                }

                this.state = 3200;
                this.alter_generic_options();
                }
                break;
            case 2:
                {
                this.state = 3201;
                this.fdw_options();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_generic_options(): Create_generic_optionsContext {
        let localContext = new Create_generic_optionsContext(this.context, this.state);
        this.enterRule(localContext, 280, PostgreSqlParser.RULE_create_generic_options);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3204;
            this.match(PostgreSqlParser.KW_OPTIONS);
            this.state = 3205;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3206;
            this.generic_option_list();
            this.state = 3207;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generic_option_list(): Generic_option_listContext {
        let localContext = new Generic_option_listContext(this.context, this.state);
        this.enterRule(localContext, 282, PostgreSqlParser.RULE_generic_option_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3209;
            this.generic_option_elem();
            this.state = 3214;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3210;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3211;
                this.generic_option_elem();
                }
                }
                this.state = 3216;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_generic_options(): Alter_generic_optionsContext {
        let localContext = new Alter_generic_optionsContext(this.context, this.state);
        this.enterRule(localContext, 284, PostgreSqlParser.RULE_alter_generic_options);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3217;
            this.match(PostgreSqlParser.KW_OPTIONS);
            this.state = 3218;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3219;
            this.alter_generic_option_list();
            this.state = 3220;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_generic_option_list(): Alter_generic_option_listContext {
        let localContext = new Alter_generic_option_listContext(this.context, this.state);
        this.enterRule(localContext, 286, PostgreSqlParser.RULE_alter_generic_option_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3222;
            this.alter_generic_option_elem();
            this.state = 3227;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3223;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3224;
                this.alter_generic_option_elem();
                }
                }
                this.state = 3229;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_generic_option_elem(): Alter_generic_option_elemContext {
        let localContext = new Alter_generic_option_elemContext(this.context, this.state);
        this.enterRule(localContext, 288, PostgreSqlParser.RULE_alter_generic_option_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3230;
            _la = this.tokenStream.LA(1);
            if(!(_la === 133 || _la === 191 || _la === 333)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3231;
            this.generic_option_elem();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generic_option_elem(): Generic_option_elemContext {
        let localContext = new Generic_option_elemContext(this.context, this.state);
        this.enterRule(localContext, 290, PostgreSqlParser.RULE_generic_option_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3233;
            this.collabel();
            this.state = 3234;
            this.sconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createforeignserverstmt(): CreateforeignserverstmtContext {
        let localContext = new CreateforeignserverstmtContext(this.context, this.state);
        this.enterRule(localContext, 292, PostgreSqlParser.RULE_createforeignserverstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3236;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3237;
            this.match(PostgreSqlParser.KW_SERVER);
            this.state = 3239;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 300, this.context) ) {
            case 1:
                {
                this.state = 3238;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 3241;
            this.colid();
            this.state = 3244;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 360) {
                {
                this.state = 3242;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 3243;
                this.sconst();
                }
            }

            this.state = 3247;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 375) {
                {
                this.state = 3246;
                this.foreign_server_version();
                }
            }

            this.state = 3249;
            this.match(PostgreSqlParser.KW_FOREIGN);
            this.state = 3250;
            this.match(PostgreSqlParser.KW_DATA);
            this.state = 3251;
            this.match(PostgreSqlParser.KW_WRAPPER);
            this.state = 3252;
            this.colid();
            this.state = 3254;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 303, this.context) ) {
            case 1:
                {
                this.state = 3253;
                this.create_generic_options();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public foreign_server_version(): Foreign_server_versionContext {
        let localContext = new Foreign_server_versionContext(this.context, this.state);
        this.enterRule(localContext, 294, PostgreSqlParser.RULE_foreign_server_version);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3256;
            this.match(PostgreSqlParser.KW_VERSION);
            this.state = 3259;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 3257;
                this.sconst();
                }
                break;
            case PostgreSqlParser.KW_NULL:
                {
                this.state = 3258;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterforeignserverstmt(): AlterforeignserverstmtContext {
        let localContext = new AlterforeignserverstmtContext(this.context, this.state);
        this.enterRule(localContext, 296, PostgreSqlParser.RULE_alterforeignserverstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3261;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3262;
            this.match(PostgreSqlParser.KW_SERVER);
            this.state = 3263;
            this.colid();
            this.state = 3269;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_OPTIONS:
                {
                this.state = 3264;
                this.alter_generic_options();
                }
                break;
            case PostgreSqlParser.KW_VERSION:
                {
                this.state = 3265;
                this.foreign_server_version();
                this.state = 3267;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 305, this.context) ) {
                case 1:
                    {
                    this.state = 3266;
                    this.alter_generic_options();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createforeigntablestmt(): CreateforeigntablestmtContext {
        let localContext = new CreateforeigntablestmtContext(this.context, this.state);
        this.enterRule(localContext, 298, PostgreSqlParser.RULE_createforeigntablestmt);
        let _la: number;
        try {
            this.state = 3310;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 314, this.context) ) {
            case 1:
                localContext = new CreateForeignTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3271;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3272;
                this.match(PostgreSqlParser.KW_FOREIGN);
                this.state = 3273;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 3275;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 307, this.context) ) {
                case 1:
                    {
                    this.state = 3274;
                    this.opt_if_not_exists();
                    }
                    break;
                }
                this.state = 3277;
                this.table_name_create();
                this.state = 3278;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 3280;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 1360008709) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2147491841) !== 0) || ((((_la - 120)) & ~0x1F) === 0 && ((1 << (_la - 120)) & 4294966809) !== 0) || ((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & 4294967295) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 4294967295) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290781183) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & 4294967295) !== 0) || ((((_la - 280)) & ~0x1F) === 0 && ((1 << (_la - 280)) & 4294967295) !== 0) || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 4294967295) !== 0) || ((((_la - 344)) & ~0x1F) === 0 && ((1 << (_la - 344)) & 4294967295) !== 0) || ((((_la - 376)) & ~0x1F) === 0 && ((1 << (_la - 376)) & 4294967295) !== 0) || ((((_la - 408)) & ~0x1F) === 0 && ((1 << (_la - 408)) & 4294967295) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & 4294950911) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & 3221225471) !== 0) || ((((_la - 506)) & ~0x1F) === 0 && ((1 << (_la - 506)) & 24575) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                    {
                    this.state = 3279;
                    this.tableelementlist();
                    }
                }

                this.state = 3282;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 3284;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 238) {
                    {
                    this.state = 3283;
                    this.optinherit();
                    }
                }

                this.state = 3286;
                this.match(PostgreSqlParser.KW_SERVER);
                this.state = 3287;
                this.colid();
                this.state = 3289;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 310, this.context) ) {
                case 1:
                    {
                    this.state = 3288;
                    this.create_generic_options();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new CreatePartitionForeignTableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3291;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3292;
                this.match(PostgreSqlParser.KW_FOREIGN);
                this.state = 3293;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 3295;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 311, this.context) ) {
                case 1:
                    {
                    this.state = 3294;
                    this.opt_if_not_exists();
                    }
                    break;
                }
                this.state = 3297;
                this.table_name_create();
                this.state = 3298;
                this.match(PostgreSqlParser.KW_PARTITION);
                this.state = 3299;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 3300;
                this.table_name();
                this.state = 3302;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 3301;
                    this.opttypedtableelementlist();
                    }
                }

                this.state = 3304;
                this.partitionboundspec();
                this.state = 3305;
                this.match(PostgreSqlParser.KW_SERVER);
                this.state = 3306;
                this.colid();
                this.state = 3308;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 313, this.context) ) {
                case 1:
                    {
                    this.state = 3307;
                    this.create_generic_options();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public importforeignschemastmt(): ImportforeignschemastmtContext {
        let localContext = new ImportforeignschemastmtContext(this.context, this.state);
        this.enterRule(localContext, 300, PostgreSqlParser.RULE_importforeignschemastmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3312;
            this.match(PostgreSqlParser.KW_IMPORT);
            this.state = 3313;
            this.match(PostgreSqlParser.KW_FOREIGN);
            this.state = 3314;
            this.match(PostgreSqlParser.KW_SCHEMA);
            this.state = 3315;
            this.schema_name();
            this.state = 3317;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 59 || _la === 74) {
                {
                this.state = 3316;
                this.import_qualification();
                }
            }

            this.state = 3319;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 3320;
            this.match(PostgreSqlParser.KW_SERVER);
            this.state = 3321;
            this.colid();
            this.state = 3322;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 3323;
            this.colid();
            this.state = 3325;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 316, this.context) ) {
            case 1:
                {
                this.state = 3324;
                this.create_generic_options();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public import_qualification(): Import_qualificationContext {
        let localContext = new Import_qualificationContext(this.context, this.state);
        this.enterRule(localContext, 302, PostgreSqlParser.RULE_import_qualification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3330;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_LIMIT:
                {
                this.state = 3327;
                this.match(PostgreSqlParser.KW_LIMIT);
                this.state = 3328;
                this.match(PostgreSqlParser.KW_TO);
                }
                break;
            case PostgreSqlParser.KW_EXCEPT:
                {
                this.state = 3329;
                this.match(PostgreSqlParser.KW_EXCEPT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3332;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3333;
            this.relation_expr_list();
            this.state = 3334;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createusermappingstmt(): CreateusermappingstmtContext {
        let localContext = new CreateusermappingstmtContext(this.context, this.state);
        this.enterRule(localContext, 304, PostgreSqlParser.RULE_createusermappingstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3336;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3337;
            this.match(PostgreSqlParser.KW_USER);
            this.state = 3338;
            this.match(PostgreSqlParser.KW_MAPPING);
            this.state = 3340;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 220) {
                {
                this.state = 3339;
                this.opt_if_not_exists();
                }
            }

            this.state = 3342;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 3343;
            this.auth_ident();
            this.state = 3344;
            this.match(PostgreSqlParser.KW_SERVER);
            this.state = 3345;
            this.colid();
            this.state = 3347;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 319, this.context) ) {
            case 1:
                {
                this.state = 3346;
                this.create_generic_options();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public auth_ident(): Auth_identContext {
        let localContext = new Auth_identContext(this.context, this.state);
        this.enterRule(localContext, 306, PostgreSqlParser.RULE_auth_ident);
        try {
            this.state = 3351;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3349;
                this.rolespec();
                }
                break;
            case PostgreSqlParser.KW_USER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3350;
                this.match(PostgreSqlParser.KW_USER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterusermappingstmt(): AlterusermappingstmtContext {
        let localContext = new AlterusermappingstmtContext(this.context, this.state);
        this.enterRule(localContext, 308, PostgreSqlParser.RULE_alterusermappingstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3353;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3354;
            this.match(PostgreSqlParser.KW_USER);
            this.state = 3355;
            this.match(PostgreSqlParser.KW_MAPPING);
            this.state = 3356;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 3357;
            this.auth_ident();
            this.state = 3358;
            this.match(PostgreSqlParser.KW_SERVER);
            this.state = 3359;
            this.colid();
            this.state = 3360;
            this.alter_generic_options();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createpolicystmt(): CreatepolicystmtContext {
        let localContext = new CreatepolicystmtContext(this.context, this.state);
        this.enterRule(localContext, 310, PostgreSqlParser.RULE_createpolicystmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3362;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3363;
            this.match(PostgreSqlParser.KW_POLICY);
            this.state = 3364;
            this.colid();
            this.state = 3365;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 3366;
            this.qualified_name();
            this.state = 3368;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 321, this.context) ) {
            case 1:
                {
                this.state = 3367;
                this.rowsecuritydefaultpermissive();
                }
                break;
            }
            this.state = 3372;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 62) {
                {
                this.state = 3370;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 3371;
                this.row_security_cmd();
                }
            }

            this.state = 3375;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 94) {
                {
                this.state = 3374;
                this.rowsecuritydefaulttorole();
                }
            }

            this.state = 3378;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 3377;
                this.rowsecurityoptionalexpr();
                }
            }

            this.state = 3381;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 325, this.context) ) {
            case 1:
                {
                this.state = 3380;
                this.rowsecurityoptionalwithcheck();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterpolicystmt(): AlterpolicystmtContext {
        let localContext = new AlterpolicystmtContext(this.context, this.state);
        this.enterRule(localContext, 312, PostgreSqlParser.RULE_alterpolicystmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3383;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3384;
            this.match(PostgreSqlParser.KW_POLICY);
            this.state = 3385;
            this.colid();
            this.state = 3386;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 3387;
            this.qualified_name();
            this.state = 3389;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 94) {
                {
                this.state = 3388;
                this.rowsecuritydefaulttorole();
                }
            }

            this.state = 3392;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 3391;
                this.rowsecurityoptionalexpr();
                }
            }

            this.state = 3395;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 328, this.context) ) {
            case 1:
                {
                this.state = 3394;
                this.rowsecurityoptionalwithcheck();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterprocedurestmt(): AlterprocedurestmtContext {
        let localContext = new AlterprocedurestmtContext(this.context, this.state);
        this.enterRule(localContext, 314, PostgreSqlParser.RULE_alterprocedurestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3397;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3398;
            this.match(PostgreSqlParser.KW_PROCEDURE);
            this.state = 3399;
            this.procedure_name();
            this.state = 3401;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 3400;
                this.func_args();
                }
            }

            this.state = 3403;
            this.procedure_cluase();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedure_cluase(): Procedure_cluaseContext {
        let localContext = new Procedure_cluaseContext(this.context, this.state);
        this.enterRule(localContext, 316, PostgreSqlParser.RULE_procedure_cluase);
        let _la: number;
        try {
            let alternative: number;
            this.state = 3431;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 333, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3405;
                this.procedure_action();
                this.state = 3409;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 330, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3406;
                        this.procedure_action();
                        }
                        }
                    }
                    this.state = 3411;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 330, this.context);
                }
                this.state = 3413;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 331, this.context) ) {
                case 1:
                    {
                    this.state = 3412;
                    this.match(PostgreSqlParser.KW_RESTRICT);
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3415;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 3416;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 3417;
                this.procedure_name_create();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3418;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 3419;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 3420;
                this.rolespec();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3421;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 3422;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 3423;
                this.schema_name_create();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3425;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 3424;
                    this.match(PostgreSqlParser.KW_NO);
                    }
                }

                this.state = 3427;
                this.match(PostgreSqlParser.KW_DEPENDS);
                this.state = 3428;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3429;
                this.match(PostgreSqlParser.KW_EXTENSION);
                this.state = 3430;
                this.colid();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedure_action(): Procedure_actionContext {
        let localContext = new Procedure_actionContext(this.context, this.state);
        this.enterRule(localContext, 318, PostgreSqlParser.RULE_procedure_action);
        let _la: number;
        try {
            this.state = 3462;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 339, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3443;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 336, this.context) ) {
                case 1:
                    {
                    this.state = 3434;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 205) {
                        {
                        this.state = 3433;
                        this.match(PostgreSqlParser.KW_EXTERNAL);
                        }
                    }

                    this.state = 3436;
                    this.match(PostgreSqlParser.KW_SECURITY);
                    this.state = 3437;
                    this.match(PostgreSqlParser.KW_INVOKER);
                    }
                    break;
                case 2:
                    {
                    this.state = 3439;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 205) {
                        {
                        this.state = 3438;
                        this.match(PostgreSqlParser.KW_EXTERNAL);
                        }
                    }

                    this.state = 3441;
                    this.match(PostgreSqlParser.KW_SECURITY);
                    this.state = 3442;
                    this.match(PostgreSqlParser.KW_DEFINER);
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3445;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 3446;
                this.colid();
                this.state = 3447;
                _la = this.tokenStream.LA(1);
                if(!(_la === 9 || _la === 94)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3450;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 337, this.context) ) {
                case 1:
                    {
                    this.state = 3448;
                    this.colid();
                    }
                    break;
                case 2:
                    {
                    this.state = 3449;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3452;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 3453;
                this.colid();
                this.state = 3454;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 3455;
                this.match(PostgreSqlParser.KW_CURRENT);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3457;
                this.match(PostgreSqlParser.KW_RESET);
                this.state = 3460;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_AND:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_COLLATE:
                case PostgreSqlParser.KW_CONSTRAINT:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_DO:
                case PostgreSqlParser.KW_FETCH:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 3458;
                    this.colid();
                    }
                    break;
                case PostgreSqlParser.KW_ALL:
                    {
                    this.state = 3459;
                    this.match(PostgreSqlParser.KW_ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsecurityoptionalexpr(): RowsecurityoptionalexprContext {
        let localContext = new RowsecurityoptionalexprContext(this.context, this.state);
        this.enterRule(localContext, 320, PostgreSqlParser.RULE_rowsecurityoptionalexpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3464;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 3465;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3466;
            this.expression();
            this.state = 3467;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsecurityoptionalwithcheck(): RowsecurityoptionalwithcheckContext {
        let localContext = new RowsecurityoptionalwithcheckContext(this.context, this.state);
        this.enterRule(localContext, 322, PostgreSqlParser.RULE_rowsecurityoptionalwithcheck);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3469;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 3470;
            this.match(PostgreSqlParser.KW_CHECK);
            this.state = 3471;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3472;
            this.expression();
            this.state = 3473;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsecuritydefaulttorole(): RowsecuritydefaulttoroleContext {
        let localContext = new RowsecuritydefaulttoroleContext(this.context, this.state);
        this.enterRule(localContext, 324, PostgreSqlParser.RULE_rowsecuritydefaulttorole);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3475;
            this.match(PostgreSqlParser.KW_TO);
            this.state = 3476;
            this.role_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsecuritydefaultpermissive(): RowsecuritydefaultpermissiveContext {
        let localContext = new RowsecuritydefaultpermissiveContext(this.context, this.state);
        this.enterRule(localContext, 326, PostgreSqlParser.RULE_rowsecuritydefaultpermissive);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3478;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 3482;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_PERMISSIVE:
                {
                this.state = 3479;
                this.match(PostgreSqlParser.KW_PERMISSIVE);
                }
                break;
            case PostgreSqlParser.KW_RESTRICTIVE:
                {
                this.state = 3480;
                this.match(PostgreSqlParser.KW_RESTRICTIVE);
                }
                break;
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 3481;
                this.identifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_security_cmd(): Row_security_cmdContext {
        let localContext = new Row_security_cmdContext(this.context, this.state);
        this.enterRule(localContext, 328, PostgreSqlParser.RULE_row_security_cmd);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3484;
            _la = this.tokenStream.LA(1);
            if(!(_la === 30 || _la === 88 || _la === 182 || _la === 241 || _la === 369)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createamstmt(): CreateamstmtContext {
        let localContext = new CreateamstmtContext(this.context, this.state);
        this.enterRule(localContext, 330, PostgreSqlParser.RULE_createamstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3486;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3487;
            this.match(PostgreSqlParser.KW_ACCESS);
            this.state = 3488;
            this.match(PostgreSqlParser.KW_METHOD);
            this.state = 3489;
            this.colid();
            this.state = 3490;
            this.match(PostgreSqlParser.KW_TYPE);
            this.state = 3491;
            _la = this.tokenStream.LA(1);
            if(!(_la === 92 || _la === 226)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3492;
            this.match(PostgreSqlParser.KW_HANDLER);
            this.state = 3493;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createtrigstmt(): CreatetrigstmtContext {
        let localContext = new CreatetrigstmtContext(this.context, this.state);
        this.enterRule(localContext, 332, PostgreSqlParser.RULE_createtrigstmt);
        let _la: number;
        try {
            this.state = 3550;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 350, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3495;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3497;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 3496;
                    this.opt_or_replace();
                    }
                }

                this.state = 3499;
                this.match(PostgreSqlParser.KW_TRIGGER);
                this.state = 3500;
                this.colid();
                this.state = 3501;
                this.triggeractiontime();
                this.state = 3502;
                this.triggerevents();
                this.state = 3503;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3504;
                this.table_name();
                this.state = 3506;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 447) {
                    {
                    this.state = 3505;
                    this.triggerreferencing();
                    }
                }

                this.state = 3509;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 3508;
                    this.triggerforspec();
                    }
                }

                this.state = 3512;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102) {
                    {
                    this.state = 3511;
                    this.triggerwhen();
                    }
                }

                this.state = 3514;
                this.match(PostgreSqlParser.KW_EXECUTE);
                this.state = 3515;
                this.function_or_procedure();
                this.state = 3516;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 3517;
                this.triggerfuncargs();
                this.state = 3518;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3520;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3522;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 3521;
                    this.opt_or_replace();
                    }
                }

                this.state = 3525;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 3524;
                    this.match(PostgreSqlParser.KW_CONSTRAINT);
                    }
                }

                this.state = 3527;
                this.match(PostgreSqlParser.KW_TRIGGER);
                this.state = 3528;
                this.colid();
                this.state = 3529;
                this.triggeractiontime();
                this.state = 3530;
                this.triggerevents();
                this.state = 3531;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3532;
                this.table_name();
                this.state = 3535;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64) {
                    {
                    this.state = 3533;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 3534;
                    this.qualified_name();
                    }
                }

                this.state = 3537;
                this.constraintattributespec();
                this.state = 3539;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 3538;
                    this.foreachrow();
                    }
                }

                this.state = 3542;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102) {
                    {
                    this.state = 3541;
                    this.triggerwhen();
                    }
                }

                this.state = 3544;
                this.match(PostgreSqlParser.KW_EXECUTE);
                this.state = 3545;
                this.function_or_procedure();
                this.state = 3546;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 3547;
                this.triggerfuncargs();
                this.state = 3548;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggeractiontime(): TriggeractiontimeContext {
        let localContext = new TriggeractiontimeContext(this.context, this.state);
        this.enterRule(localContext, 334, PostgreSqlParser.RULE_triggeractiontime);
        try {
            this.state = 3556;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_BEFORE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3552;
                this.match(PostgreSqlParser.KW_BEFORE);
                }
                break;
            case PostgreSqlParser.KW_AFTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3553;
                this.match(PostgreSqlParser.KW_AFTER);
                }
                break;
            case PostgreSqlParser.KW_INSTEAD:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3554;
                this.match(PostgreSqlParser.KW_INSTEAD);
                this.state = 3555;
                this.match(PostgreSqlParser.KW_OF);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public foreachrow(): ForeachrowContext {
        let localContext = new ForeachrowContext(this.context, this.state);
        this.enterRule(localContext, 336, PostgreSqlParser.RULE_foreachrow);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3558;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 3560;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 192) {
                {
                this.state = 3559;
                this.match(PostgreSqlParser.KW_EACH);
                }
            }

            this.state = 3562;
            _la = this.tokenStream.LA(1);
            if(!(_la === 341 || _la === 414)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerevents(): TriggereventsContext {
        let localContext = new TriggereventsContext(this.context, this.state);
        this.enterRule(localContext, 338, PostgreSqlParser.RULE_triggerevents);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3564;
            this.triggeroneevent();
            this.state = 3569;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 82) {
                {
                {
                this.state = 3565;
                this.match(PostgreSqlParser.KW_OR);
                this.state = 3566;
                this.triggeroneevent();
                }
                }
                this.state = 3571;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggeroneevent(): TriggeroneeventContext {
        let localContext = new TriggeroneeventContext(this.context, this.state);
        this.enterRule(localContext, 340, PostgreSqlParser.RULE_triggeroneevent);
        let _la: number;
        try {
            this.state = 3580;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_INSERT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3572;
                this.match(PostgreSqlParser.KW_INSERT);
                }
                break;
            case PostgreSqlParser.KW_DELETE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3573;
                this.match(PostgreSqlParser.KW_DELETE);
                }
                break;
            case PostgreSqlParser.KW_UPDATE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3574;
                this.match(PostgreSqlParser.KW_UPDATE);
                this.state = 3577;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 275) {
                    {
                    this.state = 3575;
                    this.match(PostgreSqlParser.KW_OF);
                    this.state = 3576;
                    this.column_list();
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_TRUNCATE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3579;
                this.match(PostgreSqlParser.KW_TRUNCATE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerreferencing(): TriggerreferencingContext {
        let localContext = new TriggerreferencingContext(this.context, this.state);
        this.enterRule(localContext, 342, PostgreSqlParser.RULE_triggerreferencing);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3582;
            this.match(PostgreSqlParser.KW_REFERENCING);
            this.state = 3584;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 3583;
                this.triggertransition();
                }
                }
                this.state = 3586;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 448 || _la === 449);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggertransition(): TriggertransitionContext {
        let localContext = new TriggertransitionContext(this.context, this.state);
        this.enterRule(localContext, 344, PostgreSqlParser.RULE_triggertransition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3588;
            _la = this.tokenStream.LA(1);
            if(!(_la === 448 || _la === 449)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3589;
            _la = this.tokenStream.LA(1);
            if(!(_la === 92 || _la === 414)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3591;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 3590;
                this.match(PostgreSqlParser.KW_AS);
                }
            }

            this.state = 3593;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerforspec(): TriggerforspecContext {
        let localContext = new TriggerforspecContext(this.context, this.state);
        this.enterRule(localContext, 346, PostgreSqlParser.RULE_triggerforspec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3595;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 3597;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 192) {
                {
                this.state = 3596;
                this.match(PostgreSqlParser.KW_EACH);
                }
            }

            this.state = 3599;
            _la = this.tokenStream.LA(1);
            if(!(_la === 341 || _la === 414)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerwhen(): TriggerwhenContext {
        let localContext = new TriggerwhenContext(this.context, this.state);
        this.enterRule(localContext, 348, PostgreSqlParser.RULE_triggerwhen);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3601;
            this.match(PostgreSqlParser.KW_WHEN);
            this.state = 3602;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3603;
            this.expression();
            this.state = 3604;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_or_procedure(): Function_or_procedureContext {
        let localContext = new Function_or_procedureContext(this.context, this.state);
        this.enterRule(localContext, 350, PostgreSqlParser.RULE_function_or_procedure);
        try {
            this.state = 3610;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FUNCTION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3606;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 3607;
                this.function_name();
                }
                break;
            case PostgreSqlParser.KW_PROCEDURE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3608;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 3609;
                this.procedure_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerfuncargs(): TriggerfuncargsContext {
        let localContext = new TriggerfuncargsContext(this.context, this.state);
        this.enterRule(localContext, 352, PostgreSqlParser.RULE_triggerfuncargs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3614;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ALL:
            case PostgreSqlParser.KW_ANALYSE:
            case PostgreSqlParser.KW_ANALYZE:
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ANY:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_AS:
            case PostgreSqlParser.KW_ASC:
            case PostgreSqlParser.KW_ASYMMETRIC:
            case PostgreSqlParser.KW_BOTH:
            case PostgreSqlParser.KW_CASE:
            case PostgreSqlParser.KW_CAST:
            case PostgreSqlParser.KW_CHECK:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_COLUMN:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_CREATE:
            case PostgreSqlParser.KW_CURRENT_CATALOG:
            case PostgreSqlParser.KW_CURRENT_DATE:
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_TIME:
            case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DEFERRABLE:
            case PostgreSqlParser.KW_DESC:
            case PostgreSqlParser.KW_DISTINCT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_ELSE:
            case PostgreSqlParser.KW_EXCEPT:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_FOR:
            case PostgreSqlParser.KW_FOREIGN:
            case PostgreSqlParser.KW_FROM:
            case PostgreSqlParser.KW_GRANT:
            case PostgreSqlParser.KW_GROUP:
            case PostgreSqlParser.KW_HAVING:
            case PostgreSqlParser.KW_IN:
            case PostgreSqlParser.KW_INITIALLY:
            case PostgreSqlParser.KW_INTERSECT:
            case PostgreSqlParser.KW_LATERAL:
            case PostgreSqlParser.KW_LEADING:
            case PostgreSqlParser.KW_LIMIT:
            case PostgreSqlParser.KW_LOCALTIME:
            case PostgreSqlParser.KW_LOCALTIMESTAMP:
            case PostgreSqlParser.KW_NOT:
            case PostgreSqlParser.KW_NULL:
            case PostgreSqlParser.KW_OFFSET:
            case PostgreSqlParser.KW_ON:
            case PostgreSqlParser.KW_ONLY:
            case PostgreSqlParser.KW_OR:
            case PostgreSqlParser.KW_ORDER:
            case PostgreSqlParser.KW_PLACING:
            case PostgreSqlParser.KW_PRIMARY:
            case PostgreSqlParser.KW_REFERENCES:
            case PostgreSqlParser.KW_RETURNING:
            case PostgreSqlParser.KW_SELECT:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_SOME:
            case PostgreSqlParser.KW_SYMMETRIC:
            case PostgreSqlParser.KW_TABLE:
            case PostgreSqlParser.KW_THEN:
            case PostgreSqlParser.KW_TO:
            case PostgreSqlParser.KW_TRAILING:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_UNION:
            case PostgreSqlParser.KW_UNIQUE:
            case PostgreSqlParser.KW_USER:
            case PostgreSqlParser.KW_USING:
            case PostgreSqlParser.KW_VARIADIC:
            case PostgreSqlParser.KW_WHEN:
            case PostgreSqlParser.KW_WHERE:
            case PostgreSqlParser.KW_WINDOW:
            case PostgreSqlParser.KW_WITH:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_END:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 3612;
                this.triggerfuncarg();
                }
                break;
            case PostgreSqlParser.CLOSE_PAREN:
            case PostgreSqlParser.COMMA:
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3620;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3616;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3617;
                this.triggerfuncarg();
                }
                }
                this.state = 3622;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerfuncarg(): TriggerfuncargContext {
        let localContext = new TriggerfuncargContext(this.context, this.state);
        this.enterRule(localContext, 354, PostgreSqlParser.RULE_triggerfuncarg);
        try {
            this.state = 3627;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 362, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3623;
                this.match(PostgreSqlParser.Integral);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3624;
                this.match(PostgreSqlParser.Numeric);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3625;
                this.sconst();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3626;
                this.collabel();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintattributespec(): ConstraintattributespecContext {
        let localContext = new ConstraintattributespecContext(this.context, this.state);
        this.enterRule(localContext, 356, PostgreSqlParser.RULE_constraintattributespec);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3632;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 363, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3629;
                    this.constraintattributeElem();
                    }
                    }
                }
                this.state = 3634;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 363, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintattributeElem(): ConstraintattributeElemContext {
        let localContext = new ConstraintattributeElemContext(this.context, this.state);
        this.enterRule(localContext, 358, PostgreSqlParser.RULE_constraintattributeElem);
        let _la: number;
        try {
            this.state = 3645;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 365, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3636;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 3635;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 3638;
                this.match(PostgreSqlParser.KW_DEFERRABLE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3639;
                this.match(PostgreSqlParser.KW_INITIALLY);
                this.state = 3640;
                _la = this.tokenStream.LA(1);
                if(!(_la === 180 || _la === 221)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3641;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 3642;
                this.match(PostgreSqlParser.KW_VALID);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3643;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 3644;
                this.match(PostgreSqlParser.KW_INHERIT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createeventtrigstmt(): CreateeventtrigstmtContext {
        let localContext = new CreateeventtrigstmtContext(this.context, this.state);
        this.enterRule(localContext, 360, PostgreSqlParser.RULE_createeventtrigstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3647;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3648;
            this.match(PostgreSqlParser.KW_EVENT);
            this.state = 3649;
            this.match(PostgreSqlParser.KW_TRIGGER);
            this.state = 3650;
            this.colid();
            this.state = 3651;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 3652;
            this.collabel();
            this.state = 3655;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 102) {
                {
                this.state = 3653;
                this.match(PostgreSqlParser.KW_WHEN);
                this.state = 3654;
                this.event_trigger_when_list();
                }
            }

            this.state = 3657;
            this.match(PostgreSqlParser.KW_EXECUTE);
            this.state = 3658;
            this.function_or_procedure();
            this.state = 3659;
            this.empty_grouping_set();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public event_trigger_when_list(): Event_trigger_when_listContext {
        let localContext = new Event_trigger_when_listContext(this.context, this.state);
        this.enterRule(localContext, 362, PostgreSqlParser.RULE_event_trigger_when_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3661;
            this.event_trigger_when_item();
            this.state = 3666;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 33) {
                {
                {
                this.state = 3662;
                this.match(PostgreSqlParser.KW_AND);
                this.state = 3663;
                this.event_trigger_when_item();
                }
                }
                this.state = 3668;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public event_trigger_when_item(): Event_trigger_when_itemContext {
        let localContext = new Event_trigger_when_itemContext(this.context, this.state);
        this.enterRule(localContext, 364, PostgreSqlParser.RULE_event_trigger_when_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3669;
            this.colid();
            this.state = 3670;
            this.match(PostgreSqlParser.KW_IN);
            this.state = 3671;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3672;
            this.event_trigger_value_list();
            this.state = 3673;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altereventtrigstmt(): AltereventtrigstmtContext {
        let localContext = new AltereventtrigstmtContext(this.context, this.state);
        this.enterRule(localContext, 366, PostgreSqlParser.RULE_altereventtrigstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3675;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3676;
            this.match(PostgreSqlParser.KW_EVENT);
            this.state = 3677;
            this.match(PostgreSqlParser.KW_TRIGGER);
            this.state = 3678;
            this.colid();
            this.state = 3679;
            this.enable_trigger();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enable_trigger(): Enable_triggerContext {
        let localContext = new Enable_triggerContext(this.context, this.state);
        this.enterRule(localContext, 368, PostgreSqlParser.RULE_enable_trigger);
        let _la: number;
        try {
            this.state = 3686;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ENABLE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3681;
                this.match(PostgreSqlParser.KW_ENABLE);
                this.state = 3683;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 368, this.context) ) {
                case 1:
                    {
                    this.state = 3682;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 139 || _la === 312)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_DISABLE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3685;
                this.match(PostgreSqlParser.KW_DISABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createassertionstmt(): CreateassertionstmtContext {
        let localContext = new CreateassertionstmtContext(this.context, this.state);
        this.enterRule(localContext, 370, PostgreSqlParser.RULE_createassertionstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3688;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3689;
            this.match(PostgreSqlParser.KW_ASSERTION);
            this.state = 3690;
            this.any_name();
            this.state = 3691;
            this.match(PostgreSqlParser.KW_CHECK);
            this.state = 3692;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3693;
            this.expression();
            this.state = 3694;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            this.state = 3695;
            this.constraintattributespec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public definestmt(): DefinestmtContext {
        let localContext = new DefinestmtContext(this.context, this.state);
        this.enterRule(localContext, 372, PostgreSqlParser.RULE_definestmt);
        let _la: number;
        try {
            this.state = 3769;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 380, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3697;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3699;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 3698;
                    this.opt_or_replace();
                    }
                }

                this.state = 3701;
                this.match(PostgreSqlParser.KW_AGGREGATE);
                this.state = 3702;
                this.function_name();
                this.state = 3717;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 372, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 3703;
                    this.aggr_args();
                    this.state = 3704;
                    this.definition();
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 3706;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 3707;
                    this.old_aggr_elem();
                    this.state = 3712;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 6) {
                        {
                        {
                        this.state = 3708;
                        this.match(PostgreSqlParser.COMMA);
                        this.state = 3709;
                        this.old_aggr_elem();
                        }
                        }
                        this.state = 3714;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 3715;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3719;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3720;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 3721;
                this.any_operator();
                this.state = 3722;
                this.definition();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3724;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3725;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 3726;
                this.any_name();
                this.state = 3727;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 3739;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 3728;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 3730;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 1572823) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                        {
                        this.state = 3729;
                        this.tablefuncelementlist();
                        }
                    }

                    this.state = 3732;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                case PostgreSqlParser.KW_ENUM:
                    {
                    this.state = 3733;
                    this.match(PostgreSqlParser.KW_ENUM);
                    this.state = 3734;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 3736;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 558)) & ~0x1F) === 0 && ((1 << (_la - 558)) & 67108885) !== 0)) {
                        {
                        this.state = 3735;
                        this.event_trigger_value_list();
                        }
                    }

                    this.state = 3738;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3741;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3742;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 3743;
                this.any_name();
                this.state = 3749;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 377, this.context) ) {
                case 1:
                    {
                    this.state = 3746;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 36) {
                        {
                        this.state = 3744;
                        this.match(PostgreSqlParser.KW_AS);
                        this.state = 3745;
                        this.match(PostgreSqlParser.KW_RANGE);
                        }
                    }

                    this.state = 3748;
                    this.definition();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3751;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3752;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 3753;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 3754;
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 185 || _la === 283 || _la === 353)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3755;
                this.any_name();
                this.state = 3756;
                this.definition();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3758;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3759;
                this.match(PostgreSqlParser.KW_COLLATION);
                this.state = 3761;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 378, this.context) ) {
                case 1:
                    {
                    this.state = 3760;
                    this.opt_if_not_exists();
                    }
                    break;
                }
                this.state = 3763;
                this.any_name();
                this.state = 3767;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 3764;
                    this.definition();
                    }
                    break;
                case PostgreSqlParser.KW_FROM:
                    {
                    {
                    this.state = 3765;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 3766;
                    this.any_name();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public definition(): DefinitionContext {
        let localContext = new DefinitionContext(this.context, this.state);
        this.enterRule(localContext, 374, PostgreSqlParser.RULE_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3771;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3772;
            this.def_list();
            this.state = 3773;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public def_list(): Def_listContext {
        let localContext = new Def_listContext(this.context, this.state);
        this.enterRule(localContext, 376, PostgreSqlParser.RULE_def_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3775;
            this.def_elem();
            this.state = 3780;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3776;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3777;
                this.def_elem();
                }
                }
                this.state = 3782;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public def_elem(): Def_elemContext {
        let localContext = new Def_elemContext(this.context, this.state);
        this.enterRule(localContext, 378, PostgreSqlParser.RULE_def_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3783;
            this.collabel();
            this.state = 3786;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 3784;
                this.match(PostgreSqlParser.EQUAL);
                this.state = 3785;
                this.def_arg();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public def_arg(): Def_argContext {
        let localContext = new Def_argContext(this.context, this.state);
        this.enterRule(localContext, 380, PostgreSqlParser.RULE_def_arg);
        try {
            this.state = 3794;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 383, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3788;
                this.func_type();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3789;
                this.reserved_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3790;
                this.qual_all_op();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3791;
                this.numericonly();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3792;
                this.sconst();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3793;
                this.match(PostgreSqlParser.KW_NONE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public old_aggr_elem(): Old_aggr_elemContext {
        let localContext = new Old_aggr_elemContext(this.context, this.state);
        this.enterRule(localContext, 382, PostgreSqlParser.RULE_old_aggr_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3796;
            this.identifier();
            this.state = 3797;
            this.match(PostgreSqlParser.EQUAL);
            this.state = 3798;
            this.def_arg();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public event_trigger_value_list(): Event_trigger_value_listContext {
        let localContext = new Event_trigger_value_listContext(this.context, this.state);
        this.enterRule(localContext, 384, PostgreSqlParser.RULE_event_trigger_value_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3800;
            this.sconst();
            this.state = 3804;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3801;
                this.notify_payload();
                }
                }
                this.state = 3806;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterenumstmt(): AlterenumstmtContext {
        let localContext = new AlterenumstmtContext(this.context, this.state);
        this.enterRule(localContext, 386, PostgreSqlParser.RULE_alterenumstmt);
        let _la: number;
        try {
            this.state = 3829;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 387, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3807;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 3808;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 3809;
                this.any_name();
                this.state = 3810;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 3811;
                this.match(PostgreSqlParser.KW_VALUE);
                this.state = 3813;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 3812;
                    this.opt_if_not_exists();
                    }
                }

                this.state = 3815;
                this.sconst();
                this.state = 3818;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 386, this.context) ) {
                case 1:
                    {
                    this.state = 3816;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 135 || _la === 145)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3817;
                    this.sconst();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3820;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 3821;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 3822;
                this.any_name();
                this.state = 3823;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 3824;
                this.match(PostgreSqlParser.KW_VALUE);
                this.state = 3825;
                this.sconst();
                this.state = 3826;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 3827;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_if_not_exists(): Opt_if_not_existsContext {
        let localContext = new Opt_if_not_existsContext(this.context, this.state);
        this.enterRule(localContext, 388, PostgreSqlParser.RULE_opt_if_not_exists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3831;
            this.match(PostgreSqlParser.KW_IF);
            this.state = 3832;
            this.match(PostgreSqlParser.KW_NOT);
            this.state = 3833;
            this.match(PostgreSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createopclassstmt(): CreateopclassstmtContext {
        let localContext = new CreateopclassstmtContext(this.context, this.state);
        this.enterRule(localContext, 390, PostgreSqlParser.RULE_createopclassstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3835;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3836;
            this.match(PostgreSqlParser.KW_OPERATOR);
            this.state = 3837;
            this.match(PostgreSqlParser.KW_CLASS);
            this.state = 3838;
            this.any_name();
            this.state = 3840;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 3839;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
            }

            this.state = 3842;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 3843;
            this.match(PostgreSqlParser.KW_TYPE);
            this.state = 3844;
            this.typename();
            this.state = 3845;
            this.table_access_method_clause();
            this.state = 3847;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 206) {
                {
                this.state = 3846;
                this.opt_opfamily();
                }
            }

            this.state = 3849;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 3850;
            this.opclass_item_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opclass_item_list(): Opclass_item_listContext {
        let localContext = new Opclass_item_listContext(this.context, this.state);
        this.enterRule(localContext, 392, PostgreSqlParser.RULE_opclass_item_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3852;
            this.opclass_item();
            this.state = 3857;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3853;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3854;
                this.opclass_item();
                }
                }
                this.state = 3859;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opclass_item(): Opclass_itemContext {
        let localContext = new Opclass_itemContext(this.context, this.state);
        this.enterRule(localContext, 394, PostgreSqlParser.RULE_opclass_item);
        let _la: number;
        try {
            this.state = 3880;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_OPERATOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3860;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 3861;
                this.match(PostgreSqlParser.Integral);
                this.state = 3862;
                this.any_operator();
                this.state = 3864;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 391, this.context) ) {
                case 1:
                    {
                    this.state = 3863;
                    this.oper_argtypes();
                    }
                    break;
                }
                this.state = 3867;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 3866;
                    this.opclass_purpose();
                    }
                }

                this.state = 3870;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 393, this.context) ) {
                case 1:
                    {
                    this.state = 3869;
                    this.match(PostgreSqlParser.KW_RECHECK);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_FUNCTION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3872;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 3873;
                this.match(PostgreSqlParser.Integral);
                this.state = 3875;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 3874;
                    this.prep_type_clause();
                    }
                }

                this.state = 3877;
                this.function_with_argtypes();
                }
                break;
            case PostgreSqlParser.KW_STORAGE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3878;
                this.match(PostgreSqlParser.KW_STORAGE);
                this.state = 3879;
                this.typename();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_opfamily(): Opt_opfamilyContext {
        let localContext = new Opt_opfamilyContext(this.context, this.state);
        this.enterRule(localContext, 396, PostgreSqlParser.RULE_opt_opfamily);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3882;
            this.match(PostgreSqlParser.KW_FAMILY);
            this.state = 3883;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opclass_purpose(): Opclass_purposeContext {
        let localContext = new Opclass_purposeContext(this.context, this.state);
        this.enterRule(localContext, 398, PostgreSqlParser.RULE_opclass_purpose);
        try {
            this.state = 3891;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 396, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3885;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 3886;
                this.match(PostgreSqlParser.KW_SEARCH);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3887;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 3888;
                this.match(PostgreSqlParser.KW_ORDER);
                this.state = 3889;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 3890;
                this.any_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createopfamilystmt(): CreateopfamilystmtContext {
        let localContext = new CreateopfamilystmtContext(this.context, this.state);
        this.enterRule(localContext, 400, PostgreSqlParser.RULE_createopfamilystmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3893;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3894;
            this.match(PostgreSqlParser.KW_OPERATOR);
            this.state = 3895;
            this.opt_opfamily();
            this.state = 3896;
            this.table_access_method_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alteropfamilystmt(): AlteropfamilystmtContext {
        let localContext = new AlteropfamilystmtContext(this.context, this.state);
        this.enterRule(localContext, 402, PostgreSqlParser.RULE_alteropfamilystmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3898;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3899;
            this.match(PostgreSqlParser.KW_OPERATOR);
            this.state = 3900;
            this.opt_opfamily();
            this.state = 3901;
            this.table_access_method_clause();
            this.state = 3913;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ADD:
                {
                this.state = 3902;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 3903;
                this.opclass_item_list();
                }
                break;
            case PostgreSqlParser.KW_DROP:
                {
                this.state = 3904;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3905;
                this.opclass_drop();
                this.state = 3910;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 3906;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 3907;
                    this.opclass_drop();
                    }
                    }
                    this.state = 3912;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opclass_drop(): Opclass_dropContext {
        let localContext = new Opclass_dropContext(this.context, this.state);
        this.enterRule(localContext, 404, PostgreSqlParser.RULE_opclass_drop);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3915;
            _la = this.tokenStream.LA(1);
            if(!(_la === 211 || _la === 278)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3916;
            this.match(PostgreSqlParser.Integral);
            this.state = 3917;
            this.prep_type_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reassignownedstmt(): ReassignownedstmtContext {
        let localContext = new ReassignownedstmtContext(this.context, this.state);
        this.enterRule(localContext, 406, PostgreSqlParser.RULE_reassignownedstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3919;
            this.match(PostgreSqlParser.KW_REASSIGN);
            this.state = 3920;
            this.match(PostgreSqlParser.KW_OWNED);
            this.state = 3921;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 3922;
            this.role_list();
            this.state = 3923;
            this.match(PostgreSqlParser.KW_TO);
            this.state = 3924;
            this.rolespec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropstmt(): DropstmtContext {
        let localContext = new DropstmtContext(this.context, this.state);
        this.enterRule(localContext, 408, PostgreSqlParser.RULE_dropstmt);
        let _la: number;
        try {
            this.state = 4108;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 432, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3926;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3949;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_SEQUENCE:
                    {
                    this.state = 3927;
                    this.match(PostgreSqlParser.KW_SEQUENCE);
                    }
                    break;
                case PostgreSqlParser.KW_INDEX:
                    {
                    this.state = 3928;
                    this.match(PostgreSqlParser.KW_INDEX);
                    }
                    break;
                case PostgreSqlParser.KW_COLLATION:
                    {
                    this.state = 3929;
                    this.match(PostgreSqlParser.KW_COLLATION);
                    }
                    break;
                case PostgreSqlParser.KW_CONVERSION:
                    {
                    this.state = 3930;
                    this.match(PostgreSqlParser.KW_CONVERSION);
                    }
                    break;
                case PostgreSqlParser.KW_STATISTICS:
                    {
                    this.state = 3931;
                    this.match(PostgreSqlParser.KW_STATISTICS);
                    }
                    break;
                case PostgreSqlParser.KW_PUBLICATION:
                    {
                    this.state = 3932;
                    this.match(PostgreSqlParser.KW_PUBLICATION);
                    }
                    break;
                case PostgreSqlParser.KW_SERVER:
                    {
                    this.state = 3933;
                    this.match(PostgreSqlParser.KW_SERVER);
                    }
                    break;
                case PostgreSqlParser.KW_ACCESS:
                    {
                    this.state = 3934;
                    this.match(PostgreSqlParser.KW_ACCESS);
                    this.state = 3935;
                    this.match(PostgreSqlParser.KW_METHOD);
                    }
                    break;
                case PostgreSqlParser.KW_EVENT:
                    {
                    this.state = 3936;
                    this.match(PostgreSqlParser.KW_EVENT);
                    this.state = 3937;
                    this.match(PostgreSqlParser.KW_TRIGGER);
                    }
                    break;
                case PostgreSqlParser.KW_EXTENSION:
                    {
                    this.state = 3938;
                    this.match(PostgreSqlParser.KW_EXTENSION);
                    }
                    break;
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_PROCEDURAL:
                    {
                    this.state = 3940;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 295) {
                        {
                        this.state = 3939;
                        this.match(PostgreSqlParser.KW_PROCEDURAL);
                        }
                    }

                    this.state = 3942;
                    this.match(PostgreSqlParser.KW_LANGUAGE);
                    }
                    break;
                case PostgreSqlParser.KW_FOREIGN:
                    {
                    this.state = 3943;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    this.state = 3944;
                    this.match(PostgreSqlParser.KW_DATA);
                    this.state = 3945;
                    this.match(PostgreSqlParser.KW_WRAPPER);
                    }
                    break;
                case PostgreSqlParser.KW_TEXT:
                    {
                    this.state = 3946;
                    this.match(PostgreSqlParser.KW_TEXT);
                    this.state = 3947;
                    this.match(PostgreSqlParser.KW_SEARCH);
                    this.state = 3948;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 163 || _la === 185 || _la === 283 || _la === 353)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3952;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 401, this.context) ) {
                case 1:
                    {
                    this.state = 3951;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3954;
                this.name_list();
                this.state = 3956;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 402, this.context) ) {
                case 1:
                    {
                    this.state = 3955;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3958;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3960;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 259) {
                    {
                    this.state = 3959;
                    this.match(PostgreSqlParser.KW_MATERIALIZED);
                    }
                }

                this.state = 3962;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 3964;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 404, this.context) ) {
                case 1:
                    {
                    this.state = 3963;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3966;
                this.view_nameList();
                this.state = 3968;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 405, this.context) ) {
                case 1:
                    {
                    this.state = 3967;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3970;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3972;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 63) {
                    {
                    this.state = 3971;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    }
                }

                this.state = 3974;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 3976;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 407, this.context) ) {
                case 1:
                    {
                    this.state = 3975;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3978;
                this.table_name_list();
                this.state = 3980;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 408, this.context) ) {
                case 1:
                    {
                    this.state = 3979;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3982;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3983;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 3985;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 409, this.context) ) {
                case 1:
                    {
                    this.state = 3984;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3987;
                this.schema_name_list();
                this.state = 3989;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 410, this.context) ) {
                case 1:
                    {
                    this.state = 3988;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3991;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3992;
                _la = this.tokenStream.LA(1);
                if(!(_la === 321 || _la === 357 || _la === 445)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3994;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 411, this.context) ) {
                case 1:
                    {
                    this.state = 3993;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3996;
                this.colid();
                this.state = 3997;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3998;
                this.any_name();
                this.state = 4000;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 412, this.context) ) {
                case 1:
                    {
                    this.state = 3999;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4002;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 4003;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4005;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 413, this.context) ) {
                case 1:
                    {
                    this.state = 4004;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4007;
                this.type_name_list();
                this.state = 4009;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 414, this.context) ) {
                case 1:
                    {
                    this.state = 4008;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4011;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 4012;
                this.match(PostgreSqlParser.KW_INDEX);
                this.state = 4013;
                this.match(PostgreSqlParser.KW_CONCURRENTLY);
                this.state = 4015;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 415, this.context) ) {
                case 1:
                    {
                    this.state = 4014;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4017;
                this.any_name_list();
                this.state = 4019;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 416, this.context) ) {
                case 1:
                    {
                    this.state = 4018;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4021;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 4022;
                this.match(PostgreSqlParser.KW_CAST);
                this.state = 4024;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 4023;
                    this.opt_if_exists();
                    }
                }

                this.state = 4026;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 4027;
                this.typename();
                this.state = 4028;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 4029;
                this.typename();
                this.state = 4030;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 4032;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 418, this.context) ) {
                case 1:
                    {
                    this.state = 4031;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4034;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 4035;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 4036;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 206)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4038;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 419, this.context) ) {
                case 1:
                    {
                    this.state = 4037;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4040;
                this.any_name();
                this.state = 4041;
                this.table_access_method_clause();
                this.state = 4043;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 420, this.context) ) {
                case 1:
                    {
                    this.state = 4042;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4045;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 4046;
                this.match(PostgreSqlParser.KW_OWNED);
                this.state = 4047;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 4048;
                this.role_list();
                this.state = 4050;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 421, this.context) ) {
                case 1:
                    {
                    this.state = 4049;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4052;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 4053;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 4055;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 422, this.context) ) {
                case 1:
                    {
                    this.state = 4054;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4057;
                this.colid();
                this.state = 4059;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 423, this.context) ) {
                case 1:
                    {
                    this.state = 4058;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4061;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 4062;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                this.state = 4064;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 424, this.context) ) {
                case 1:
                    {
                    this.state = 4063;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4066;
                this.tablespace_name();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4067;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 4068;
                this.match(PostgreSqlParser.KW_TRANSFORM);
                this.state = 4070;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 4069;
                    this.opt_if_exists();
                    }
                }

                this.state = 4072;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 4073;
                this.typename();
                this.state = 4074;
                this.match(PostgreSqlParser.KW_LANGUAGE);
                this.state = 4075;
                this.colid();
                this.state = 4077;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 426, this.context) ) {
                case 1:
                    {
                    this.state = 4076;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 4079;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 4080;
                _la = this.tokenStream.LA(1);
                if(!(_la === 66 || _la === 99 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4082;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 427, this.context) ) {
                case 1:
                    {
                    this.state = 4081;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4084;
                this.role_list();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 4085;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 4086;
                this.match(PostgreSqlParser.KW_USER);
                this.state = 4087;
                this.match(PostgreSqlParser.KW_MAPPING);
                this.state = 4089;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 4088;
                    this.opt_if_exists();
                    }
                }

                this.state = 4091;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 4092;
                this.auth_ident();
                this.state = 4093;
                this.match(PostgreSqlParser.KW_SERVER);
                this.state = 4094;
                this.colid();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 4096;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 4097;
                this.match(PostgreSqlParser.KW_DATABASE);
                this.state = 4099;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 429, this.context) ) {
                case 1:
                    {
                    this.state = 4098;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4101;
                this.database_name();
                this.state = 4106;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 431, this.context) ) {
                case 1:
                    {
                    this.state = 4103;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 105) {
                        {
                        this.state = 4102;
                        this.match(PostgreSqlParser.KW_WITH);
                        }
                    }

                    this.state = 4105;
                    this.drop_option_list();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public view_nameList(): View_nameListContext {
        let localContext = new View_nameListContext(this.context, this.state);
        this.enterRule(localContext, 410, PostgreSqlParser.RULE_view_nameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4110;
            this.view_name();
            this.state = 4115;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4111;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4112;
                this.view_name();
                }
                }
                this.state = 4117;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_type_any_name(): Object_type_any_nameContext {
        let localContext = new Object_type_any_nameContext(this.context, this.state);
        this.enterRule(localContext, 412, PostgreSqlParser.RULE_object_type_any_name);
        let _la: number;
        try {
            this.state = 4134;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FOREIGN:
            case PostgreSqlParser.KW_TABLE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4119;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 63) {
                    {
                    this.state = 4118;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    }
                }

                this.state = 4121;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 4122;
                this.table_name();
                }
                break;
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_VIEW:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4124;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 259) {
                    {
                    this.state = 4123;
                    this.match(PostgreSqlParser.KW_MATERIALIZED);
                    }
                }

                this.state = 4126;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 4127;
                this.view_name();
                }
                break;
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_STATISTICS:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4128;
                _la = this.tokenStream.LA(1);
                if(!(_la === 108 || _la === 168 || _la === 226 || _la === 328 || _la === 342)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4129;
                this.any_name();
                }
                break;
            case PostgreSqlParser.KW_TEXT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4130;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 4131;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 4132;
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 185 || _la === 283 || _la === 353)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4133;
                this.any_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_type_name(): Object_type_nameContext {
        let localContext = new Object_type_nameContext(this.context, this.state);
        this.enterRule(localContext, 414, PostgreSqlParser.RULE_object_type_name);
        let _la: number;
        try {
            this.state = 4160;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FOREIGN:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4152;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_EVENT:
                    {
                    this.state = 4136;
                    this.match(PostgreSqlParser.KW_EVENT);
                    this.state = 4137;
                    this.match(PostgreSqlParser.KW_TRIGGER);
                    }
                    break;
                case PostgreSqlParser.KW_ACCESS:
                    {
                    this.state = 4138;
                    this.match(PostgreSqlParser.KW_ACCESS);
                    this.state = 4139;
                    this.match(PostgreSqlParser.KW_METHOD);
                    }
                    break;
                case PostgreSqlParser.KW_EXTENSION:
                    {
                    this.state = 4140;
                    this.match(PostgreSqlParser.KW_EXTENSION);
                    }
                    break;
                case PostgreSqlParser.KW_PUBLICATION:
                    {
                    this.state = 4141;
                    this.match(PostgreSqlParser.KW_PUBLICATION);
                    }
                    break;
                case PostgreSqlParser.KW_SERVER:
                    {
                    this.state = 4142;
                    this.match(PostgreSqlParser.KW_SERVER);
                    }
                    break;
                case PostgreSqlParser.KW_ROLE:
                    {
                    this.state = 4143;
                    this.match(PostgreSqlParser.KW_ROLE);
                    }
                    break;
                case PostgreSqlParser.KW_SUBSCRIPTION:
                    {
                    this.state = 4144;
                    this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                    }
                    break;
                case PostgreSqlParser.KW_FOREIGN:
                    {
                    this.state = 4145;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    this.state = 4146;
                    this.match(PostgreSqlParser.KW_DATA);
                    this.state = 4147;
                    this.match(PostgreSqlParser.KW_WRAPPER);
                    }
                    break;
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_PROCEDURAL:
                    {
                    this.state = 4149;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 295) {
                        {
                        this.state = 4148;
                        this.match(PostgreSqlParser.KW_PROCEDURAL);
                        }
                    }

                    this.state = 4151;
                    this.match(PostgreSqlParser.KW_LANGUAGE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4154;
                this.colid();
                }
                break;
            case PostgreSqlParser.KW_SCHEMA:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4155;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 4156;
                this.schema_name();
                }
                break;
            case PostgreSqlParser.KW_DATABASE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4157;
                this.match(PostgreSqlParser.KW_DATABASE);
                this.state = 4158;
                this.database_name();
                }
                break;
            case PostgreSqlParser.KW_TABLESPACE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4159;
                this.opttablespace();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_type_name_on_any_name(): Object_type_name_on_any_nameContext {
        let localContext = new Object_type_name_on_any_nameContext(this.context, this.state);
        this.enterRule(localContext, 416, PostgreSqlParser.RULE_object_type_name_on_any_name);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4162;
            _la = this.tokenStream.LA(1);
            if(!(_la === 321 || _la === 357 || _la === 445)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public any_name_list(): Any_name_listContext {
        let localContext = new Any_name_listContext(this.context, this.state);
        this.enterRule(localContext, 418, PostgreSqlParser.RULE_any_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4164;
            this.any_name();
            this.state = 4169;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4165;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4166;
                this.any_name();
                }
                }
                this.state = 4171;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relation_column_name(): Relation_column_nameContext {
        let localContext = new Relation_column_nameContext(this.context, this.state);
        this.enterRule(localContext, 420, PostgreSqlParser.RULE_relation_column_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4172;
            this.colid();
            this.state = 4174;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 441, this.context) ) {
            case 1:
                {
                this.state = 4173;
                this.attrs();
                }
                break;
            }
            this.state = 4176;
            this.match(PostgreSqlParser.DOT);
            this.state = 4177;
            this.column_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public any_name(): Any_nameContext {
        let localContext = new Any_nameContext(this.context, this.state);
        this.enterRule(localContext, 422, PostgreSqlParser.RULE_any_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4179;
            this.colid();
            this.state = 4181;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 442, this.context) ) {
            case 1:
                {
                this.state = 4180;
                this.attrs();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public attrs(): AttrsContext {
        let localContext = new AttrsContext(this.context, this.state);
        this.enterRule(localContext, 424, PostgreSqlParser.RULE_attrs);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4185;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 4183;
                    this.match(PostgreSqlParser.DOT);
                    this.state = 4184;
                    this.collabel();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4187;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 443, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_list(): Type_name_listContext {
        let localContext = new Type_name_listContext(this.context, this.state);
        this.enterRule(localContext, 426, PostgreSqlParser.RULE_type_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4189;
            this.typename();
            this.state = 4194;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4190;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4191;
                this.typename();
                }
                }
                this.state = 4196;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncatestmt(): TruncatestmtContext {
        let localContext = new TruncatestmtContext(this.context, this.state);
        this.enterRule(localContext, 428, PostgreSqlParser.RULE_truncatestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4197;
            this.match(PostgreSqlParser.KW_TRUNCATE);
            this.state = 4199;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 92) {
                {
                this.state = 4198;
                this.match(PostgreSqlParser.KW_TABLE);
                }
            }

            this.state = 4201;
            this.truncate_table();
            this.state = 4206;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4202;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4203;
                this.truncate_table();
                }
                }
                this.state = 4208;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4211;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 447, this.context) ) {
            case 1:
                {
                this.state = 4209;
                _la = this.tokenStream.LA(1);
                if(!(_la === 167 || _la === 314)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4210;
                this.match(PostgreSqlParser.KW_IDENTITY);
                }
                break;
            }
            this.state = 4214;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 448, this.context) ) {
            case 1:
                {
                this.state = 4213;
                this.opt_drop_behavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncate_table(): Truncate_tableContext {
        let localContext = new Truncate_tableContext(this.context, this.state);
        this.enterRule(localContext, 430, PostgreSqlParser.RULE_truncate_table);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4217;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 4216;
                this.match(PostgreSqlParser.KW_ONLY);
                }
            }

            this.state = 4219;
            this.table_name();
            this.state = 4221;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 9) {
                {
                this.state = 4220;
                this.match(PostgreSqlParser.STAR);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commentstmt(): CommentstmtContext {
        let localContext = new CommentstmtContext(this.context, this.state);
        this.enterRule(localContext, 432, PostgreSqlParser.RULE_commentstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4223;
            this.match(PostgreSqlParser.KW_COMMENT);
            this.state = 4224;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 4277;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 453, this.context) ) {
            case 1:
                {
                this.state = 4225;
                this.object_type_any_name();
                }
                break;
            case 2:
                {
                this.state = 4226;
                this.object_type_name();
                }
                break;
            case 3:
                {
                this.state = 4227;
                this.match(PostgreSqlParser.KW_COLUMN);
                this.state = 4228;
                this.relation_column_name();
                }
                break;
            case 4:
                {
                this.state = 4229;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4230;
                this.typename();
                }
                break;
            case 5:
                {
                this.state = 4231;
                this.match(PostgreSqlParser.KW_AGGREGATE);
                this.state = 4232;
                this.aggregate_with_argtypes();
                }
                break;
            case 6:
                {
                this.state = 4233;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4234;
                this.function_with_argtypes();
                }
                break;
            case 7:
                {
                this.state = 4235;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 4236;
                this.operator_with_argtypes();
                }
                break;
            case 8:
                {
                this.state = 4237;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 4238;
                this.colid();
                this.state = 4239;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 4245;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 452, this.context) ) {
                case 1:
                    {
                    this.state = 4240;
                    this.table_name();
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 4242;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 451, this.context) ) {
                    case 1:
                        {
                        this.state = 4241;
                        this.match(PostgreSqlParser.KW_DOMAIN);
                        }
                        break;
                    }
                    this.state = 4244;
                    this.any_name();
                    }
                    }
                    break;
                }
                }
                break;
            case 9:
                {
                this.state = 4247;
                _la = this.tokenStream.LA(1);
                if(!(_la === 321 || _la === 357 || _la === 445)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4248;
                this.colid();
                this.state = 4249;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 4250;
                this.any_name();
                }
                break;
            case 10:
                {
                this.state = 4252;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4253;
                this.procedure_with_argtypes();
                }
                break;
            case 11:
                {
                this.state = 4254;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 4255;
                this.routine_with_argtypes();
                }
                break;
            case 12:
                {
                this.state = 4256;
                this.match(PostgreSqlParser.KW_TRANSFORM);
                this.state = 4257;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 4258;
                this.typename();
                this.state = 4259;
                this.match(PostgreSqlParser.KW_LANGUAGE);
                this.state = 4260;
                this.colid();
                }
                break;
            case 13:
                {
                this.state = 4262;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 4263;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 206)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4264;
                this.any_name();
                this.state = 4265;
                this.table_access_method_clause();
                }
                break;
            case 14:
                {
                this.state = 4267;
                this.match(PostgreSqlParser.KW_LARGE);
                this.state = 4268;
                this.match(PostgreSqlParser.KW_OBJECT);
                this.state = 4269;
                this.numericonly();
                }
                break;
            case 15:
                {
                this.state = 4270;
                this.match(PostgreSqlParser.KW_CAST);
                this.state = 4271;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 4272;
                this.typename();
                this.state = 4273;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 4274;
                this.typename();
                this.state = 4275;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            this.state = 4279;
            this.match(PostgreSqlParser.KW_IS);
            this.state = 4282;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 4280;
                this.sconst();
                }
                break;
            case PostgreSqlParser.KW_NULL:
                {
                this.state = 4281;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public seclabelstmt(): SeclabelstmtContext {
        let localContext = new SeclabelstmtContext(this.context, this.state);
        this.enterRule(localContext, 434, PostgreSqlParser.RULE_seclabelstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4284;
            this.match(PostgreSqlParser.KW_SECURITY);
            this.state = 4285;
            this.match(PostgreSqlParser.KW_LABEL);
            this.state = 4288;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 62) {
                {
                this.state = 4286;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 4287;
                this.nonreservedword_or_sconst();
                }
            }

            this.state = 4290;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 4308;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 456, this.context) ) {
            case 1:
                {
                this.state = 4291;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4292;
                this.typename();
                }
                break;
            case 2:
                {
                this.state = 4293;
                this.match(PostgreSqlParser.KW_AGGREGATE);
                this.state = 4294;
                this.aggregate_with_argtypes();
                }
                break;
            case 3:
                {
                this.state = 4295;
                this.match(PostgreSqlParser.KW_COLUMN);
                this.state = 4296;
                this.column_name();
                }
                break;
            case 4:
                {
                this.state = 4297;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4298;
                this.function_with_argtypes();
                }
                break;
            case 5:
                {
                this.state = 4299;
                this.match(PostgreSqlParser.KW_LARGE);
                this.state = 4300;
                this.match(PostgreSqlParser.KW_OBJECT);
                this.state = 4301;
                this.numericonly();
                }
                break;
            case 6:
                {
                this.state = 4302;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4303;
                this.procedure_with_argtypes();
                }
                break;
            case 7:
                {
                this.state = 4304;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 4305;
                this.routine_with_argtypes();
                }
                break;
            case 8:
                {
                this.state = 4306;
                this.object_type_any_name();
                }
                break;
            case 9:
                {
                this.state = 4307;
                this.object_type_name();
                }
                break;
            }
            this.state = 4310;
            this.match(PostgreSqlParser.KW_IS);
            this.state = 4313;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 4311;
                this.sconst();
                }
                break;
            case PostgreSqlParser.KW_NULL:
                {
                this.state = 4312;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fetchstmt(): FetchstmtContext {
        let localContext = new FetchstmtContext(this.context, this.state);
        this.enterRule(localContext, 436, PostgreSqlParser.RULE_fetchstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4315;
            _la = this.tokenStream.LA(1);
            if(!(_la === 61 || _la === 265)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4316;
            this.fetch_args();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fetch_args(): Fetch_argsContext {
        let localContext = new Fetch_argsContext(this.context, this.state);
        this.enterRule(localContext, 438, PostgreSqlParser.RULE_fetch_args);
        let _la: number;
        try {
            this.state = 4361;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 469, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4319;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 458, this.context) ) {
                case 1:
                    {
                    this.state = 4318;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 207 || _la === 249 || _la === 268 || _la === 293)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 4322;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 68) {
                    {
                    this.state = 4321;
                    this.from_in();
                    }
                }

                this.state = 4324;
                this.colid();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4326;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 130 || _la === 307) {
                    {
                    this.state = 4325;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 130 || _la === 307)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 4328;
                this.signediconst();
                this.state = 4330;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 68) {
                    {
                    this.state = 4329;
                    this.from_in();
                    }
                }

                this.state = 4332;
                this.colid();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4334;
                this.match(PostgreSqlParser.KW_FORWARD);
                this.state = 4336;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 13 || _la === 571) {
                    {
                    this.state = 4335;
                    this.signediconst();
                    }
                }

                this.state = 4339;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 68) {
                    {
                    this.state = 4338;
                    this.from_in();
                    }
                }

                this.state = 4341;
                this.colid();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4343;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 210) {
                    {
                    this.state = 4342;
                    this.match(PostgreSqlParser.KW_FORWARD);
                    }
                }

                this.state = 4345;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 4347;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 68) {
                    {
                    this.state = 4346;
                    this.from_in();
                    }
                }

                this.state = 4349;
                this.colid();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4350;
                this.match(PostgreSqlParser.KW_BACKWARD);
                this.state = 4355;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ALL:
                case PostgreSqlParser.KW_AND:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_COLLATE:
                case PostgreSqlParser.KW_CONSTRAINT:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_DO:
                case PostgreSqlParser.KW_FETCH:
                case PostgreSqlParser.KW_FROM:
                case PostgreSqlParser.KW_IN:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 4352;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 30) {
                        {
                        this.state = 4351;
                        this.match(PostgreSqlParser.KW_ALL);
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.PLUS:
                case PostgreSqlParser.MINUS:
                case PostgreSqlParser.Integral:
                    {
                    this.state = 4354;
                    this.signediconst();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4358;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 68) {
                    {
                    this.state = 4357;
                    this.from_in();
                    }
                }

                this.state = 4360;
                this.colid();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public from_in(): From_inContext {
        let localContext = new From_inContext(this.context, this.state);
        this.enterRule(localContext, 440, PostgreSqlParser.RULE_from_in);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4363;
            _la = this.tokenStream.LA(1);
            if(!(_la === 64 || _la === 68)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantstmt(): GrantstmtContext {
        let localContext = new GrantstmtContext(this.context, this.state);
        this.enterRule(localContext, 442, PostgreSqlParser.RULE_grantstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4365;
            this.match(PostgreSqlParser.KW_GRANT);
            this.state = 4366;
            this.privileges();
            this.state = 4367;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 4368;
            this.privilege_target();
            this.state = 4369;
            this.match(PostgreSqlParser.KW_TO);
            this.state = 4370;
            this.grantee_list();
            this.state = 4372;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 470, this.context) ) {
            case 1:
                {
                this.state = 4371;
                this.opt_grant_grant_option();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokestmt(): RevokestmtContext {
        let localContext = new RevokestmtContext(this.context, this.state);
        this.enterRule(localContext, 444, PostgreSqlParser.RULE_revokestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4374;
            this.match(PostgreSqlParser.KW_REVOKE);
            this.state = 4378;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 65) {
                {
                this.state = 4375;
                this.match(PostgreSqlParser.KW_GRANT);
                this.state = 4376;
                this.match(PostgreSqlParser.KW_OPTION);
                this.state = 4377;
                this.match(PostgreSqlParser.KW_FOR);
                }
            }

            this.state = 4380;
            this.privileges();
            this.state = 4381;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 4382;
            this.privilege_target();
            this.state = 4383;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 4384;
            this.grantee_list();
            this.state = 4386;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 472, this.context) ) {
            case 1:
                {
                this.state = 4385;
                this.opt_drop_behavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privileges(): PrivilegesContext {
        let localContext = new PrivilegesContext(this.context, this.state);
        this.enterRule(localContext, 446, PostgreSqlParser.RULE_privileges);
        let _la: number;
        try {
            this.state = 4404;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 476, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4388;
                this.privilege_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4389;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 4391;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 294) {
                    {
                    this.state = 4390;
                    this.match(PostgreSqlParser.KW_PRIVILEGES);
                    }
                }

                this.state = 4394;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 4393;
                    this.opt_column_list();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4396;
                this.beforeprivilegeselect();
                this.state = 4401;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 4397;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4398;
                    this.beforeprivilegeselect();
                    }
                    }
                    this.state = 4403;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public beforeprivilegeselect(): BeforeprivilegeselectContext {
        let localContext = new BeforeprivilegeselectContext(this.context, this.state);
        this.enterRule(localContext, 448, PostgreSqlParser.RULE_beforeprivilegeselect);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4406;
            _la = this.tokenStream.LA(1);
            if(!(_la === 46 || _la === 88 || _la === 182 || _la === 202 || _la === 241 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 131173) !== 0) || ((((_la - 521)) & ~0x1F) === 0 && ((1 << (_la - 521)) & 7) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege_list(): Privilege_listContext {
        let localContext = new Privilege_listContext(this.context, this.state);
        this.enterRule(localContext, 450, PostgreSqlParser.RULE_privilege_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4408;
            this.privilege();
            this.state = 4413;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4409;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4410;
                this.privilege();
                }
                }
                this.state = 4415;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege(): PrivilegeContext {
        let localContext = new PrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 452, PostgreSqlParser.RULE_privilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4420;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SELECT:
                {
                this.state = 4416;
                this.match(PostgreSqlParser.KW_SELECT);
                }
                break;
            case PostgreSqlParser.KW_REFERENCES:
                {
                this.state = 4417;
                this.match(PostgreSqlParser.KW_REFERENCES);
                }
                break;
            case PostgreSqlParser.KW_CREATE:
                {
                this.state = 4418;
                this.match(PostgreSqlParser.KW_CREATE);
                }
                break;
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 4419;
                this.colid();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4423;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 4422;
                this.opt_column_list();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege_target(): Privilege_targetContext {
        let localContext = new Privilege_targetContext(this.context, this.state);
        this.enterRule(localContext, 454, PostgreSqlParser.RULE_privilege_target);
        let _la: number;
        try {
            this.state = 4463;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 483, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4425;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 4426;
                this.table_name_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4428;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 480, this.context) ) {
                case 1:
                    {
                    this.state = 4427;
                    this.match(PostgreSqlParser.KW_SEQUENCE);
                    }
                    break;
                }
                this.state = 4430;
                this.qualified_name_list();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4438;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_FOREIGN:
                    {
                    this.state = 4431;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    this.state = 4435;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_DATA:
                        {
                        this.state = 4432;
                        this.match(PostgreSqlParser.KW_DATA);
                        this.state = 4433;
                        this.match(PostgreSqlParser.KW_WRAPPER);
                        }
                        break;
                    case PostgreSqlParser.KW_SERVER:
                        {
                        this.state = 4434;
                        this.match(PostgreSqlParser.KW_SERVER);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                case PostgreSqlParser.KW_LANGUAGE:
                    {
                    this.state = 4437;
                    this.match(PostgreSqlParser.KW_LANGUAGE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4440;
                this.name_list();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4441;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4442;
                this.function_with_argtypes_list();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4443;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4444;
                this.procedure_with_argtypes_list();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4445;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 4446;
                this.routine_with_argtypes_list();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4447;
                this.match(PostgreSqlParser.KW_DATABASE);
                this.state = 4448;
                this.database_nameList();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4449;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4450;
                this.any_name_list();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4451;
                this.match(PostgreSqlParser.KW_LARGE);
                this.state = 4452;
                this.match(PostgreSqlParser.KW_OBJECT);
                this.state = 4453;
                this.numericonly_list();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4454;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 4455;
                this.schema_name_list();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4456;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                this.state = 4457;
                this.tablespace_name_list();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4458;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 4459;
                _la = this.tokenStream.LA(1);
                if(!(_la === 212 || _la === 329 || _la === 350 || _la === 455 || _la === 457)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4460;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 4461;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 4462;
                this.schema_name_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantee_list(): Grantee_listContext {
        let localContext = new Grantee_listContext(this.context, this.state);
        this.enterRule(localContext, 456, PostgreSqlParser.RULE_grantee_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4465;
            this.grantee();
            this.state = 4470;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4466;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4467;
                this.grantee();
                }
                }
                this.state = 4472;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantee(): GranteeContext {
        let localContext = new GranteeContext(this.context, this.state);
        this.enterRule(localContext, 458, PostgreSqlParser.RULE_grantee);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4474;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 66) {
                {
                this.state = 4473;
                this.match(PostgreSqlParser.KW_GROUP);
                }
            }

            this.state = 4476;
            this.rolespec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_grant_grant_option(): Opt_grant_grant_optionContext {
        let localContext = new Opt_grant_grant_optionContext(this.context, this.state);
        this.enterRule(localContext, 460, PostgreSqlParser.RULE_opt_grant_grant_option);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4478;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 4479;
            this.match(PostgreSqlParser.KW_GRANT);
            this.state = 4480;
            this.match(PostgreSqlParser.KW_OPTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantrolestmt(): GrantrolestmtContext {
        let localContext = new GrantrolestmtContext(this.context, this.state);
        this.enterRule(localContext, 462, PostgreSqlParser.RULE_grantrolestmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4482;
            this.match(PostgreSqlParser.KW_GRANT);
            this.state = 4483;
            this.privilege_list();
            this.state = 4484;
            this.rowsecuritydefaulttorole();
            this.state = 4488;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 486, this.context) ) {
            case 1:
                {
                this.state = 4485;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 4486;
                this.match(PostgreSqlParser.KW_ADMIN);
                this.state = 4487;
                this.match(PostgreSqlParser.KW_OPTION);
                }
                break;
            }
            this.state = 4491;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 487, this.context) ) {
            case 1:
                {
                this.state = 4490;
                this.opt_granted_by();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokerolestmt(): RevokerolestmtContext {
        let localContext = new RevokerolestmtContext(this.context, this.state);
        this.enterRule(localContext, 464, PostgreSqlParser.RULE_revokerolestmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4493;
            this.match(PostgreSqlParser.KW_REVOKE);
            this.state = 4497;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 488, this.context) ) {
            case 1:
                {
                this.state = 4494;
                this.match(PostgreSqlParser.KW_ADMIN);
                this.state = 4495;
                this.match(PostgreSqlParser.KW_OPTION);
                this.state = 4496;
                this.match(PostgreSqlParser.KW_FOR);
                }
                break;
            }
            this.state = 4499;
            this.privilege_list();
            this.state = 4500;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 4501;
            this.role_list();
            this.state = 4503;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 489, this.context) ) {
            case 1:
                {
                this.state = 4502;
                this.opt_granted_by();
                }
                break;
            }
            this.state = 4506;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 490, this.context) ) {
            case 1:
                {
                this.state = 4505;
                this.opt_drop_behavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_granted_by(): Opt_granted_byContext {
        let localContext = new Opt_granted_byContext(this.context, this.state);
        this.enterRule(localContext, 466, PostgreSqlParser.RULE_opt_granted_by);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4508;
            this.match(PostgreSqlParser.KW_GRANTED);
            this.state = 4509;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 4510;
            this.rolespec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterdefaultprivilegesstmt(): AlterdefaultprivilegesstmtContext {
        let localContext = new AlterdefaultprivilegesstmtContext(this.context, this.state);
        this.enterRule(localContext, 468, PostgreSqlParser.RULE_alterdefaultprivilegesstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4512;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 4513;
            this.match(PostgreSqlParser.KW_DEFAULT);
            this.state = 4514;
            this.match(PostgreSqlParser.KW_PRIVILEGES);
            this.state = 4518;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 62 || _la === 68) {
                {
                {
                this.state = 4515;
                this.defacloption();
                }
                }
                this.state = 4520;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4521;
            this.defaclaction();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defacloption(): DefacloptionContext {
        let localContext = new DefacloptionContext(this.context, this.state);
        this.enterRule(localContext, 470, PostgreSqlParser.RULE_defacloption);
        let _la: number;
        try {
            this.state = 4529;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_IN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4523;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 4524;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 4525;
                this.schema_name_list();
                }
                break;
            case PostgreSqlParser.KW_FOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4526;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 4527;
                _la = this.tokenStream.LA(1);
                if(!(_la === 99 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4528;
                this.role_list();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaclaction(): DefaclactionContext {
        let localContext = new DefaclactionContext(this.context, this.state);
        this.enterRule(localContext, 472, PostgreSqlParser.RULE_defaclaction);
        let _la: number;
        try {
            this.state = 4554;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_GRANT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4531;
                this.match(PostgreSqlParser.KW_GRANT);
                this.state = 4532;
                this.privileges();
                this.state = 4533;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 4534;
                this.defacl_privilege_target();
                this.state = 4535;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4536;
                this.grantee_list();
                this.state = 4538;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 493, this.context) ) {
                case 1:
                    {
                    this.state = 4537;
                    this.opt_grant_grant_option();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_REVOKE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4540;
                this.match(PostgreSqlParser.KW_REVOKE);
                this.state = 4544;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65) {
                    {
                    this.state = 4541;
                    this.match(PostgreSqlParser.KW_GRANT);
                    this.state = 4542;
                    this.match(PostgreSqlParser.KW_OPTION);
                    this.state = 4543;
                    this.match(PostgreSqlParser.KW_FOR);
                    }
                }

                this.state = 4546;
                this.privileges();
                this.state = 4547;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 4548;
                this.defacl_privilege_target();
                this.state = 4549;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 4550;
                this.grantee_list();
                this.state = 4552;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 495, this.context) ) {
                case 1:
                    {
                    this.state = 4551;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defacl_privilege_target(): Defacl_privilege_targetContext {
        let localContext = new Defacl_privilege_targetContext(this.context, this.state);
        this.enterRule(localContext, 474, PostgreSqlParser.RULE_defacl_privilege_target);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4556;
            _la = this.tokenStream.LA(1);
            if(!(_la === 212 || _la === 329 || _la === 350 || _la === 361 || _la === 455 || _la === 456)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexstmt(): IndexstmtContext {
        let localContext = new IndexstmtContext(this.context, this.state);
        this.enterRule(localContext, 476, PostgreSqlParser.RULE_indexstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4558;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 4560;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 98) {
                {
                this.state = 4559;
                this.match(PostgreSqlParser.KW_UNIQUE);
                }
            }

            this.state = 4562;
            this.match(PostgreSqlParser.KW_INDEX);
            this.state = 4564;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 109) {
                {
                this.state = 4563;
                this.match(PostgreSqlParser.KW_CONCURRENTLY);
                }
            }

            this.state = 4567;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 499, this.context) ) {
            case 1:
                {
                this.state = 4566;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 4570;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 1572823) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 4569;
                this.colid();
                }
            }

            this.state = 4572;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 4573;
            this.relation_expr();
            this.state = 4575;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 4574;
                this.table_access_method_clause();
                }
            }

            this.state = 4577;
            this.index_params();
            this.state = 4579;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 502, this.context) ) {
            case 1:
                {
                this.state = 4578;
                this.opt_include();
                }
                break;
            }
            this.state = 4582;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 503, this.context) ) {
            case 1:
                {
                this.state = 4581;
                this.nulls_distinct();
                }
                break;
            }
            this.state = 4585;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 504, this.context) ) {
            case 1:
                {
                this.state = 4584;
                this.opt_reloptions();
                }
                break;
            }
            this.state = 4588;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 505, this.context) ) {
            case 1:
                {
                this.state = 4587;
                this.opttablespace();
                }
                break;
            }
            this.state = 4591;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 103) {
                {
                this.state = 4590;
                this.where_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_params(): Index_paramsContext {
        let localContext = new Index_paramsContext(this.context, this.state);
        this.enterRule(localContext, 478, PostgreSqlParser.RULE_index_params);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4593;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4594;
            this.index_elem();
            this.state = 4599;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4595;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4596;
                this.index_elem();
                }
                }
                this.state = 4601;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4602;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_elem_options(): Index_elem_optionsContext {
        let localContext = new Index_elem_optionsContext(this.context, this.state);
        this.enterRule(localContext, 480, PostgreSqlParser.RULE_index_elem_options);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4605;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 508, this.context) ) {
            case 1:
                {
                this.state = 4604;
                this.opt_collate_clause();
                }
                break;
            }
            this.state = 4613;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 510, this.context) ) {
            case 1:
                {
                this.state = 4608;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 509, this.context) ) {
                case 1:
                    {
                    this.state = 4607;
                    this.any_name();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 4610;
                this.any_name();
                this.state = 4611;
                this.reloptions();
                }
                break;
            }
            this.state = 4616;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 37 || _la === 55) {
                {
                this.state = 4615;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 55)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 4619;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 273) {
                {
                this.state = 4618;
                this.opt_nulls_order();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_elem(): Index_elemContext {
        let localContext = new Index_elemContext(this.context, this.state);
        this.enterRule(localContext, 482, PostgreSqlParser.RULE_index_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4627;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 513, this.context) ) {
            case 1:
                {
                this.state = 4621;
                this.column_name();
                }
                break;
            case 2:
                {
                this.state = 4622;
                this.func_expr_windowless();
                }
                break;
            case 3:
                {
                this.state = 4623;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 4624;
                this.expression();
                this.state = 4625;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            this.state = 4629;
            this.index_elem_options();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_include(): Opt_includeContext {
        let localContext = new Opt_includeContext(this.context, this.state);
        this.enterRule(localContext, 484, PostgreSqlParser.RULE_opt_include);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4631;
            this.match(PostgreSqlParser.KW_INCLUDE);
            this.state = 4632;
            this.index_params();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_nulls_order(): Opt_nulls_orderContext {
        let localContext = new Opt_nulls_orderContext(this.context, this.state);
        this.enterRule(localContext, 486, PostgreSqlParser.RULE_opt_nulls_order);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4634;
            this.match(PostgreSqlParser.KW_NULLS);
            this.state = 4635;
            _la = this.tokenStream.LA(1);
            if(!(_la === 207 || _la === 249)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createfunctionstmt(): CreatefunctionstmtContext {
        let localContext = new CreatefunctionstmtContext(this.context, this.state);
        this.enterRule(localContext, 488, PostgreSqlParser.RULE_createfunctionstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4637;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 4639;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 4638;
                this.opt_or_replace();
                }
            }

            this.state = 4645;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FUNCTION:
                {
                this.state = 4641;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4642;
                this.function_name_create();
                }
                break;
            case PostgreSqlParser.KW_PROCEDURE:
                {
                this.state = 4643;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4644;
                this.procedure_name_create();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4647;
            this.func_args_with_defaults();
            this.state = 4654;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 517, this.context) ) {
            case 1:
                {
                this.state = 4648;
                this.match(PostgreSqlParser.KW_RETURNS);
                this.state = 4652;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_AND:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_COLLATE:
                case PostgreSqlParser.KW_CONSTRAINT:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_DO:
                case PostgreSqlParser.KW_FETCH:
                case PostgreSqlParser.KW_AUTHORIZATION:
                case PostgreSqlParser.KW_BINARY:
                case PostgreSqlParser.KW_COLLATION:
                case PostgreSqlParser.KW_CONCURRENTLY:
                case PostgreSqlParser.KW_CROSS:
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                case PostgreSqlParser.KW_FREEZE:
                case PostgreSqlParser.KW_FULL:
                case PostgreSqlParser.KW_ILIKE:
                case PostgreSqlParser.KW_INNER:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_ISNULL:
                case PostgreSqlParser.KW_JOIN:
                case PostgreSqlParser.KW_LEFT:
                case PostgreSqlParser.KW_LIKE:
                case PostgreSqlParser.KW_NATURAL:
                case PostgreSqlParser.KW_NOTNULL:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_OVERLAPS:
                case PostgreSqlParser.KW_RIGHT:
                case PostgreSqlParser.KW_SIMILAR:
                case PostgreSqlParser.KW_VERBOSE:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_TABLESAMPLE:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 4649;
                    this.func_type();
                    }
                    break;
                case PostgreSqlParser.KW_TABLE:
                    {
                    this.state = 4650;
                    this.match(PostgreSqlParser.KW_TABLE);
                    this.state = 4651;
                    this.table_func_column_list();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            this.state = 4656;
            this.createfunc_opt_list();
            this.state = 4659;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 518, this.context) ) {
            case 1:
                {
                this.state = 4657;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 4658;
                this.attrilist();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public attrilist(): AttrilistContext {
        let localContext = new AttrilistContext(this.context, this.state);
        this.enterRule(localContext, 490, PostgreSqlParser.RULE_attrilist);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4661;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4662;
            this.name_list();
            this.state = 4663;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_or_replace(): Opt_or_replaceContext {
        let localContext = new Opt_or_replaceContext(this.context, this.state);
        this.enterRule(localContext, 492, PostgreSqlParser.RULE_opt_or_replace);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4665;
            this.match(PostgreSqlParser.KW_OR);
            this.state = 4666;
            this.match(PostgreSqlParser.KW_REPLACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_args(): Func_argsContext {
        let localContext = new Func_argsContext(this.context, this.state);
        this.enterRule(localContext, 494, PostgreSqlParser.RULE_func_args);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4668;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4670;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || _la === 68 || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4294967265) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 4294967295) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 4294967295) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 100660735) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 4669;
                this.func_args_list();
                }
            }

            this.state = 4672;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_args_list(): Func_args_listContext {
        let localContext = new Func_args_listContext(this.context, this.state);
        this.enterRule(localContext, 496, PostgreSqlParser.RULE_func_args_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4674;
            this.func_arg();
            this.state = 4679;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4675;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4676;
                this.func_arg();
                }
                }
                this.state = 4681;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routine_with_argtypes_list(): Routine_with_argtypes_listContext {
        let localContext = new Routine_with_argtypes_listContext(this.context, this.state);
        this.enterRule(localContext, 498, PostgreSqlParser.RULE_routine_with_argtypes_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4682;
            this.routine_with_argtypes();
            this.state = 4687;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4683;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4684;
                this.routine_with_argtypes();
                }
                }
                this.state = 4689;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routine_with_argtypes(): Routine_with_argtypesContext {
        let localContext = new Routine_with_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 500, PostgreSqlParser.RULE_routine_with_argtypes);
        try {
            this.state = 4695;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 522, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4690;
                this.routine_name();
                this.state = 4691;
                this.func_args();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4693;
                this.type_func_name_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4694;
                this.qualified_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedure_with_argtypes_list(): Procedure_with_argtypes_listContext {
        let localContext = new Procedure_with_argtypes_listContext(this.context, this.state);
        this.enterRule(localContext, 502, PostgreSqlParser.RULE_procedure_with_argtypes_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4697;
            this.procedure_with_argtypes();
            this.state = 4702;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4698;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4699;
                this.procedure_with_argtypes();
                }
                }
                this.state = 4704;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext {
        let localContext = new Procedure_with_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 504, PostgreSqlParser.RULE_procedure_with_argtypes);
        try {
            this.state = 4710;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 524, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4705;
                this.procedure_name();
                this.state = 4706;
                this.func_args();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4708;
                this.type_func_name_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4709;
                this.qualified_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_with_argtypes_list(): Function_with_argtypes_listContext {
        let localContext = new Function_with_argtypes_listContext(this.context, this.state);
        this.enterRule(localContext, 506, PostgreSqlParser.RULE_function_with_argtypes_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4712;
            this.function_with_argtypes();
            this.state = 4717;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4713;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4714;
                this.function_with_argtypes();
                }
                }
                this.state = 4719;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_with_argtypes(): Function_with_argtypesContext {
        let localContext = new Function_with_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 508, PostgreSqlParser.RULE_function_with_argtypes);
        try {
            this.state = 4725;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 526, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4720;
                this.function_name();
                this.state = 4721;
                this.func_args();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4723;
                this.type_func_name_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4724;
                this.qualified_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_args_with_defaults(): Func_args_with_defaultsContext {
        let localContext = new Func_args_with_defaultsContext(this.context, this.state);
        this.enterRule(localContext, 510, PostgreSqlParser.RULE_func_args_with_defaults);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4727;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4729;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || _la === 68 || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4294967265) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 4294967295) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 4294967295) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 100660735) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 4728;
                this.func_args_with_defaults_list();
                }
            }

            this.state = 4731;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_args_with_defaults_list(): Func_args_with_defaults_listContext {
        let localContext = new Func_args_with_defaults_listContext(this.context, this.state);
        this.enterRule(localContext, 512, PostgreSqlParser.RULE_func_args_with_defaults_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4733;
            this.func_arg_with_default();
            this.state = 4738;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4734;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4735;
                this.func_arg_with_default();
                }
                }
                this.state = 4740;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_arg(): Func_argContext {
        let localContext = new Func_argContext(this.context, this.state);
        this.enterRule(localContext, 514, PostgreSqlParser.RULE_func_arg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4749;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 531, this.context) ) {
            case 1:
                {
                this.state = 4741;
                this.arg_class();
                this.state = 4743;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 529, this.context) ) {
                case 1:
                    {
                    this.state = 4742;
                    this.type_function_name();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 4745;
                this.type_function_name();
                this.state = 4747;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 530, this.context) ) {
                case 1:
                    {
                    this.state = 4746;
                    this.arg_class();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 4751;
            this.func_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arg_class(): Arg_classContext {
        let localContext = new Arg_classContext(this.context, this.state);
        this.enterRule(localContext, 516, PostgreSqlParser.RULE_arg_class);
        try {
            this.state = 4760;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_IN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4753;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 4755;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 532, this.context) ) {
                case 1:
                    {
                    this.state = 4754;
                    this.match(PostgreSqlParser.KW_OUT);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_OUT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4757;
                this.match(PostgreSqlParser.KW_OUT);
                }
                break;
            case PostgreSqlParser.KW_INOUT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4758;
                this.match(PostgreSqlParser.KW_INOUT);
                }
                break;
            case PostgreSqlParser.KW_VARIADIC:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4759;
                this.match(PostgreSqlParser.KW_VARIADIC);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_type(): Func_typeContext {
        let localContext = new Func_typeContext(this.context, this.state);
        this.enterRule(localContext, 518, PostgreSqlParser.RULE_func_type);
        let _la: number;
        try {
            this.state = 4771;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 535, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4762;
                this.typename();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4764;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 415) {
                    {
                    this.state = 4763;
                    this.match(PostgreSqlParser.KW_SETOF);
                    }
                }

                this.state = 4766;
                this.type_function_name();
                this.state = 4767;
                this.attrs();
                this.state = 4768;
                this.match(PostgreSqlParser.PERCENT);
                this.state = 4769;
                this.match(PostgreSqlParser.KW_TYPE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_arg_with_default(): Func_arg_with_defaultContext {
        let localContext = new Func_arg_with_defaultContext(this.context, this.state);
        this.enterRule(localContext, 520, PostgreSqlParser.RULE_func_arg_with_default);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4773;
            this.func_arg();
            this.state = 4776;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10 || _la === 53) {
                {
                this.state = 4774;
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 53)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4775;
                this.expression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggr_args(): Aggr_argsContext {
        let localContext = new Aggr_argsContext(this.context, this.state);
        this.enterRule(localContext, 522, PostgreSqlParser.RULE_aggr_args);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4778;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4788;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.STAR:
                {
                this.state = 4779;
                this.match(PostgreSqlParser.STAR);
                }
                break;
            case PostgreSqlParser.CLOSE_PAREN:
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IN:
            case PostgreSqlParser.KW_ORDER:
            case PostgreSqlParser.KW_VARIADIC:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 4781;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || _la === 68 || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4294967265) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 4294967295) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 4294967295) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 100660735) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                    {
                    this.state = 4780;
                    this.func_args_list();
                    }
                }

                this.state = 4786;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 4783;
                    this.match(PostgreSqlParser.KW_ORDER);
                    this.state = 4784;
                    this.match(PostgreSqlParser.KW_BY);
                    this.state = 4785;
                    this.func_args_list();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4790;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext {
        let localContext = new Aggregate_with_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 524, PostgreSqlParser.RULE_aggregate_with_argtypes);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4792;
            this.function_name();
            this.state = 4793;
            this.aggr_args();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregate_with_argtypes_list(): Aggregate_with_argtypes_listContext {
        let localContext = new Aggregate_with_argtypes_listContext(this.context, this.state);
        this.enterRule(localContext, 526, PostgreSqlParser.RULE_aggregate_with_argtypes_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4795;
            this.aggregate_with_argtypes();
            this.state = 4800;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4796;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4797;
                this.aggregate_with_argtypes();
                }
                }
                this.state = 4802;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createfunc_opt_list(): Createfunc_opt_listContext {
        let localContext = new Createfunc_opt_listContext(this.context, this.state);
        this.enterRule(localContext, 528, PostgreSqlParser.RULE_createfunc_opt_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4804;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 4803;
                    this.createfunc_opt_item();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4806;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 541, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public common_func_opt_item(): Common_func_opt_itemContext {
        let localContext = new Common_func_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 530, PostgreSqlParser.RULE_common_func_opt_item);
        let _la: number;
        try {
            this.state = 4837;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_RETURNS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4811;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_RETURNS:
                    {
                    this.state = 4808;
                    this.match(PostgreSqlParser.KW_RETURNS);
                    this.state = 4809;
                    this.match(PostgreSqlParser.KW_NULL);
                    }
                    break;
                case PostgreSqlParser.KW_CALLED:
                    {
                    this.state = 4810;
                    this.match(PostgreSqlParser.KW_CALLED);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4813;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 4814;
                this.match(PostgreSqlParser.KW_NULL);
                this.state = 4815;
                this.match(PostgreSqlParser.KW_INPUT);
                }
                break;
            case PostgreSqlParser.KW_STRICT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4816;
                this.match(PostgreSqlParser.KW_STRICT);
                }
                break;
            case PostgreSqlParser.KW_IMMUTABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4817;
                this.match(PostgreSqlParser.KW_IMMUTABLE);
                }
                break;
            case PostgreSqlParser.KW_STABLE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4818;
                this.match(PostgreSqlParser.KW_STABLE);
                }
                break;
            case PostgreSqlParser.KW_VOLATILE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4819;
                this.match(PostgreSqlParser.KW_VOLATILE);
                }
                break;
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_SECURITY:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4821;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 205) {
                    {
                    this.state = 4820;
                    this.match(PostgreSqlParser.KW_EXTERNAL);
                    }
                }

                this.state = 4823;
                this.match(PostgreSqlParser.KW_SECURITY);
                this.state = 4824;
                _la = this.tokenStream.LA(1);
                if(!(_la === 181 || _la === 243)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_LEAKPROOF:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4825;
                this.match(PostgreSqlParser.KW_LEAKPROOF);
                }
                break;
            case PostgreSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4826;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 4827;
                this.match(PostgreSqlParser.KW_LEAKPROOF);
                }
                break;
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_ROWS:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4828;
                _la = this.tokenStream.LA(1);
                if(!(_la === 170 || _la === 320)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4829;
                this.numericonly();
                }
                break;
            case PostgreSqlParser.KW_SUPPORT:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4830;
                this.match(PostgreSqlParser.KW_SUPPORT);
                this.state = 4831;
                this.any_name();
                }
                break;
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4832;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 4833;
                this.set_rest_more();
                }
                break;
            case PostgreSqlParser.KW_RESET:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4834;
                this.variableresetstmt();
                }
                break;
            case PostgreSqlParser.KW_PARALLEL:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4835;
                this.match(PostgreSqlParser.KW_PARALLEL);
                this.state = 4836;
                this.colid();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createfunc_opt_item(): Createfunc_opt_itemContext {
        let localContext = new Createfunc_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 532, PostgreSqlParser.RULE_createfunc_opt_item);
        try {
            this.state = 4863;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 546, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4839;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 4840;
                this.sconst();
                this.state = 4841;
                this.notify_payload();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4843;
                this.match(PostgreSqlParser.KW_LANGUAGE);
                this.state = 4844;
                this.nonreservedword_or_sconst();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4845;
                this.match(PostgreSqlParser.KW_TRANSFORM);
                this.state = 4846;
                this.transform_type_name_list();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4847;
                this.match(PostgreSqlParser.KW_WINDOW);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4848;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 4849;
                this.colid();
                this.state = 4856;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_TO:
                    {
                    this.state = 4850;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 4851;
                    this.colid();
                    }
                    break;
                case PostgreSqlParser.EQUAL:
                    {
                    this.state = 4852;
                    this.match(PostgreSqlParser.EQUAL);
                    this.state = 4853;
                    this.colid();
                    }
                    break;
                case PostgreSqlParser.KW_FROM:
                    {
                    this.state = 4854;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 4855;
                    this.match(PostgreSqlParser.KW_CURRENT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4858;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 4859;
                this.colid();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4860;
                this.stmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4861;
                this.common_func_opt_item();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4862;
                this.colid();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transform_type_name_list(): Transform_type_name_listContext {
        let localContext = new Transform_type_name_listContext(this.context, this.state);
        this.enterRule(localContext, 534, PostgreSqlParser.RULE_transform_type_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4865;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 4866;
            this.match(PostgreSqlParser.KW_TYPE);
            this.state = 4867;
            this.typename();
            this.state = 4874;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4868;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4869;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 4870;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 4871;
                this.typename();
                }
                }
                this.state = 4876;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_definition(): Opt_definitionContext {
        let localContext = new Opt_definitionContext(this.context, this.state);
        this.enterRule(localContext, 536, PostgreSqlParser.RULE_opt_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4877;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 4878;
            this.definition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_func_column(): Table_func_columnContext {
        let localContext = new Table_func_columnContext(this.context, this.state);
        this.enterRule(localContext, 538, PostgreSqlParser.RULE_table_func_column);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4880;
            this.column_name();
            this.state = 4881;
            this.func_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_func_column_list(): Table_func_column_listContext {
        let localContext = new Table_func_column_listContext(this.context, this.state);
        this.enterRule(localContext, 540, PostgreSqlParser.RULE_table_func_column_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4883;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4884;
            this.table_func_column();
            this.state = 4889;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4885;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4886;
                this.table_func_column();
                }
                }
                this.state = 4891;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4892;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterfunctionstmt(): AlterfunctionstmtContext {
        let localContext = new AlterfunctionstmtContext(this.context, this.state);
        this.enterRule(localContext, 542, PostgreSqlParser.RULE_alterfunctionstmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4894;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 4895;
            this.alterFunctionTypeClause();
            this.state = 4897;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 4896;
                    this.common_func_opt_item();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4899;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 549, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            this.state = 4902;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 550, this.context) ) {
            case 1:
                {
                this.state = 4901;
                this.match(PostgreSqlParser.KW_RESTRICT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterFunctionTypeClause(): AlterFunctionTypeClauseContext {
        let localContext = new AlterFunctionTypeClauseContext(this.context, this.state);
        this.enterRule(localContext, 544, PostgreSqlParser.RULE_alterFunctionTypeClause);
        try {
            this.state = 4910;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FUNCTION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4904;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4905;
                this.function_with_argtypes();
                }
                break;
            case PostgreSqlParser.KW_PROCEDURE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4906;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4907;
                this.procedure_with_argtypes();
                }
                break;
            case PostgreSqlParser.KW_ROUTINE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4908;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 4909;
                this.routine_with_argtypes();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removefuncstmt(): RemovefuncstmtContext {
        let localContext = new RemovefuncstmtContext(this.context, this.state);
        this.enterRule(localContext, 546, PostgreSqlParser.RULE_removefuncstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4912;
            this.match(PostgreSqlParser.KW_DROP);
            this.state = 4928;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FUNCTION:
                {
                this.state = 4913;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4915;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 552, this.context) ) {
                case 1:
                    {
                    this.state = 4914;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4917;
                this.function_with_argtypes_list();
                }
                break;
            case PostgreSqlParser.KW_PROCEDURE:
                {
                this.state = 4918;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4920;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 553, this.context) ) {
                case 1:
                    {
                    this.state = 4919;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4922;
                this.procedure_with_argtypes_list();
                }
                break;
            case PostgreSqlParser.KW_ROUTINE:
                {
                this.state = 4923;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 4925;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 554, this.context) ) {
                case 1:
                    {
                    this.state = 4924;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4927;
                this.routine_with_argtypes_list();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4931;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 556, this.context) ) {
            case 1:
                {
                this.state = 4930;
                this.opt_drop_behavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removeaggrstmt(): RemoveaggrstmtContext {
        let localContext = new RemoveaggrstmtContext(this.context, this.state);
        this.enterRule(localContext, 548, PostgreSqlParser.RULE_removeaggrstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4933;
            this.match(PostgreSqlParser.KW_DROP);
            this.state = 4934;
            this.match(PostgreSqlParser.KW_AGGREGATE);
            this.state = 4936;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 557, this.context) ) {
            case 1:
                {
                this.state = 4935;
                this.opt_if_exists();
                }
                break;
            }
            this.state = 4938;
            this.aggregate_with_argtypes_list();
            this.state = 4940;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 558, this.context) ) {
            case 1:
                {
                this.state = 4939;
                this.opt_drop_behavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removeoperstmt(): RemoveoperstmtContext {
        let localContext = new RemoveoperstmtContext(this.context, this.state);
        this.enterRule(localContext, 550, PostgreSqlParser.RULE_removeoperstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4942;
            this.match(PostgreSqlParser.KW_DROP);
            this.state = 4943;
            this.match(PostgreSqlParser.KW_OPERATOR);
            this.state = 4945;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 559, this.context) ) {
            case 1:
                {
                this.state = 4944;
                this.opt_if_exists();
                }
                break;
            }
            this.state = 4947;
            this.operator_with_argtypes_list();
            this.state = 4949;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 560, this.context) ) {
            case 1:
                {
                this.state = 4948;
                this.opt_drop_behavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public oper_argtypes(): Oper_argtypesContext {
        let localContext = new Oper_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 552, PostgreSqlParser.RULE_oper_argtypes);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4951;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4964;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 562, this.context) ) {
            case 1:
                {
                this.state = 4952;
                this.typename();
                this.state = 4955;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 4953;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4954;
                    this.typename();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 4957;
                this.match(PostgreSqlParser.KW_NONE);
                this.state = 4958;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4959;
                this.typename();
                }
                break;
            case 3:
                {
                this.state = 4960;
                this.typename();
                this.state = 4961;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4962;
                this.match(PostgreSqlParser.KW_NONE);
                }
                break;
            }
            this.state = 4966;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public any_operator(): Any_operatorContext {
        let localContext = new Any_operatorContext(this.context, this.state);
        this.enterRule(localContext, 554, PostgreSqlParser.RULE_any_operator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4973;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 1572823) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                {
                this.state = 4968;
                this.colid();
                this.state = 4969;
                this.match(PostgreSqlParser.DOT);
                }
                }
                this.state = 4975;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4976;
            this.all_op();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operator_with_argtypes_list(): Operator_with_argtypes_listContext {
        let localContext = new Operator_with_argtypes_listContext(this.context, this.state);
        this.enterRule(localContext, 556, PostgreSqlParser.RULE_operator_with_argtypes_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4978;
            this.operator_with_argtypes();
            this.state = 4983;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4979;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4980;
                this.operator_with_argtypes();
                }
                }
                this.state = 4985;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operator_with_argtypes(): Operator_with_argtypesContext {
        let localContext = new Operator_with_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 558, PostgreSqlParser.RULE_operator_with_argtypes);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4986;
            this.any_operator();
            this.state = 4987;
            this.oper_argtypes();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dostmt(): DostmtContext {
        let localContext = new DostmtContext(this.context, this.state);
        this.enterRule(localContext, 560, PostgreSqlParser.RULE_dostmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4989;
            this.match(PostgreSqlParser.KW_DO);
            this.state = 4991;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 4990;
                    this.dostmt_opt_item();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4993;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 565, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dostmt_opt_item(): Dostmt_opt_itemContext {
        let localContext = new Dostmt_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 562, PostgreSqlParser.RULE_dostmt_opt_item);
        try {
            this.state = 4998;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4995;
                this.sconst();
                }
                break;
            case PostgreSqlParser.KW_LANGUAGE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4996;
                this.match(PostgreSqlParser.KW_LANGUAGE);
                this.state = 4997;
                this.nonreservedword_or_sconst();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createcaststmt(): CreatecaststmtContext {
        let localContext = new CreatecaststmtContext(this.context, this.state);
        this.enterRule(localContext, 564, PostgreSqlParser.RULE_createcaststmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5000;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5001;
            this.match(PostgreSqlParser.KW_CAST);
            this.state = 5002;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 5003;
            this.typename();
            this.state = 5004;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 5005;
            this.typename();
            this.state = 5006;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            this.state = 5021;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_WITHOUT:
                {
                {
                this.state = 5007;
                this.match(PostgreSqlParser.KW_WITHOUT);
                this.state = 5008;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 5010;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 567, this.context) ) {
                case 1:
                    {
                    this.state = 5009;
                    this.cast_context();
                    }
                    break;
                }
                }
                }
                break;
            case PostgreSqlParser.KW_WITH:
                {
                {
                this.state = 5012;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 5016;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_FUNCTION:
                    {
                    this.state = 5013;
                    this.match(PostgreSqlParser.KW_FUNCTION);
                    this.state = 5014;
                    this.function_with_argtypes();
                    }
                    break;
                case PostgreSqlParser.KW_INOUT:
                    {
                    this.state = 5015;
                    this.match(PostgreSqlParser.KW_INOUT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5019;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 569, this.context) ) {
                case 1:
                    {
                    this.state = 5018;
                    this.cast_context();
                    }
                    break;
                }
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cast_context(): Cast_contextContext {
        let localContext = new Cast_contextContext(this.context, this.state);
        this.enterRule(localContext, 566, PostgreSqlParser.RULE_cast_context);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5023;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 5024;
            _la = this.tokenStream.LA(1);
            if(!(_la === 141 || _la === 223)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_if_exists(): Opt_if_existsContext {
        let localContext = new Opt_if_existsContext(this.context, this.state);
        this.enterRule(localContext, 568, PostgreSqlParser.RULE_opt_if_exists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5026;
            this.match(PostgreSqlParser.KW_IF);
            this.state = 5027;
            this.match(PostgreSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createtransformstmt(): CreatetransformstmtContext {
        let localContext = new CreatetransformstmtContext(this.context, this.state);
        this.enterRule(localContext, 570, PostgreSqlParser.RULE_createtransformstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5029;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5031;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 5030;
                this.opt_or_replace();
                }
            }

            this.state = 5033;
            this.match(PostgreSqlParser.KW_TRANSFORM);
            this.state = 5034;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 5035;
            this.typename();
            this.state = 5036;
            this.match(PostgreSqlParser.KW_LANGUAGE);
            this.state = 5037;
            this.colid();
            this.state = 5038;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 5039;
            this.transform_element_list();
            this.state = 5040;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transform_element_list(): Transform_element_listContext {
        let localContext = new Transform_element_listContext(this.context, this.state);
        this.enterRule(localContext, 572, PostgreSqlParser.RULE_transform_element_list);
        let _la: number;
        try {
            this.state = 5056;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FROM:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5042;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 5043;
                this.sql_with_function();
                this.state = 5047;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 5044;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 5045;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 5046;
                    this.sql_with_function();
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_TO:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5049;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5050;
                this.sql_with_function();
                this.state = 5054;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 5051;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 5052;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 5053;
                    this.sql_with_function();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_with_function(): Sql_with_functionContext {
        let localContext = new Sql_with_functionContext(this.context, this.state);
        this.enterRule(localContext, 574, PostgreSqlParser.RULE_sql_with_function);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5058;
            this.match(PostgreSqlParser.KW_SQL);
            this.state = 5059;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 5060;
            this.match(PostgreSqlParser.KW_FUNCTION);
            this.state = 5061;
            this.function_with_argtypes();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reindexstmt(): ReindexstmtContext {
        let localContext = new ReindexstmtContext(this.context, this.state);
        this.enterRule(localContext, 576, PostgreSqlParser.RULE_reindexstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5063;
            this.match(PostgreSqlParser.KW_REINDEX);
            this.state = 5074;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 5064;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 5065;
                this.match(PostgreSqlParser.KW_VERBOSE);
                this.state = 5070;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 5066;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 5067;
                    this.match(PostgreSqlParser.KW_VERBOSE);
                    }
                    }
                    this.state = 5072;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5073;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
            }

            {
            this.state = 5076;
            this.reindex_target_multitable();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reindex_target_multitable(): Reindex_target_multitableContext {
        let localContext = new Reindex_target_multitableContext(this.context, this.state);
        this.enterRule(localContext, 578, PostgreSqlParser.RULE_reindex_target_multitable);
        let _la: number;
        try {
            this.state = 5103;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_INDEX:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5078;
                this.match(PostgreSqlParser.KW_INDEX);
                this.state = 5080;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 5079;
                    this.match(PostgreSqlParser.KW_CONCURRENTLY);
                    }
                }

                this.state = 5082;
                this.qualified_name();
                }
                break;
            case PostgreSqlParser.KW_TABLE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5083;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 5085;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 5084;
                    this.match(PostgreSqlParser.KW_CONCURRENTLY);
                    }
                }

                this.state = 5087;
                this.table_name();
                }
                break;
            case PostgreSqlParser.KW_SCHEMA:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5088;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 5090;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 5089;
                    this.match(PostgreSqlParser.KW_CONCURRENTLY);
                    }
                }

                this.state = 5092;
                this.schema_name();
                }
                break;
            case PostgreSqlParser.KW_SYSTEM:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5093;
                this.match(PostgreSqlParser.KW_SYSTEM);
                this.state = 5095;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 5094;
                    this.match(PostgreSqlParser.KW_CONCURRENTLY);
                    }
                }

                this.state = 5097;
                this.colid();
                }
                break;
            case PostgreSqlParser.KW_DATABASE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5098;
                this.match(PostgreSqlParser.KW_DATABASE);
                this.state = 5100;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 5099;
                    this.match(PostgreSqlParser.KW_CONCURRENTLY);
                    }
                }

                this.state = 5102;
                this.database_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altertblspcstmt(): AltertblspcstmtContext {
        let localContext = new AltertblspcstmtContext(this.context, this.state);
        this.enterRule(localContext, 580, PostgreSqlParser.RULE_altertblspcstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5105;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5106;
            this.opttablespace();
            this.state = 5107;
            _la = this.tokenStream.LA(1);
            if(!(_la === 313 || _la === 333)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5108;
            this.reloptions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renamestmt(): RenamestmtContext {
        let localContext = new RenamestmtContext(this.context, this.state);
        this.enterRule(localContext, 582, PostgreSqlParser.RULE_renamestmt);
        let _la: number;
        try {
            this.state = 5317;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 603, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5110;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5115;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_AGGREGATE:
                    {
                    this.state = 5111;
                    this.match(PostgreSqlParser.KW_AGGREGATE);
                    this.state = 5112;
                    this.aggregate_with_argtypes();
                    }
                    break;
                case PostgreSqlParser.KW_ROUTINE:
                    {
                    this.state = 5113;
                    this.match(PostgreSqlParser.KW_ROUTINE);
                    this.state = 5114;
                    this.routine_with_argtypes();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5117;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5118;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5119;
                this.colid();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5121;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5122;
                this.match(PostgreSqlParser.KW_DATABASE);
                this.state = 5123;
                this.database_name();
                this.state = 5124;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5125;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5126;
                this.database_name_create();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5128;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5129;
                _la = this.tokenStream.LA(1);
                if(!(_la === 108 || _la === 168 || _la === 189 || _la === 342 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5130;
                this.any_name();
                this.state = 5131;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5132;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5133;
                this.colid();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5135;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5136;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 5137;
                this.function_with_argtypes();
                this.state = 5138;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5139;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5140;
                this.function_name_create();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5142;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5143;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 5144;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 206)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5145;
                this.any_name();
                this.state = 5146;
                this.table_access_method_clause();
                this.state = 5147;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5148;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5149;
                this.colid();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5151;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5152;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 5153;
                this.procedure_with_argtypes();
                this.state = 5154;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5155;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5156;
                this.procedure_name_create();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5158;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5159;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 5160;
                this.schema_name();
                this.state = 5161;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5162;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5163;
                this.schema_name_create();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5165;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5166;
                _la = this.tokenStream.LA(1);
                if(!(_la === 226 || _la === 328)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5168;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 584, this.context) ) {
                case 1:
                    {
                    this.state = 5167;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 5170;
                this.qualified_name();
                this.state = 5171;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5172;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5173;
                this.colid();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 5175;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5177;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 259) {
                    {
                    this.state = 5176;
                    this.match(PostgreSqlParser.KW_MATERIALIZED);
                    }
                }

                this.state = 5179;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 5181;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 586, this.context) ) {
                case 1:
                    {
                    this.state = 5180;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 5183;
                this.view_name();
                this.state = 5184;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5185;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5186;
                this.view_name_create();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 5188;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5190;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 63) {
                    {
                    this.state = 5189;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    }
                }

                this.state = 5192;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 5194;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 588, this.context) ) {
                case 1:
                    {
                    this.state = 5193;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 5196;
                this.relation_expr();
                this.state = 5197;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5198;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5199;
                this.table_name_create();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 5201;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5226;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_FOREIGN:
                case PostgreSqlParser.KW_TABLE:
                    {
                    this.state = 5203;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 63) {
                        {
                        this.state = 5202;
                        this.match(PostgreSqlParser.KW_FOREIGN);
                        }
                    }

                    this.state = 5205;
                    this.match(PostgreSqlParser.KW_TABLE);
                    this.state = 5207;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 590, this.context) ) {
                    case 1:
                        {
                        this.state = 5206;
                        this.opt_if_exists();
                        }
                        break;
                    }
                    this.state = 5209;
                    this.relation_expr();
                    this.state = 5210;
                    this.match(PostgreSqlParser.KW_RENAME);
                    this.state = 5212;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 591, this.context) ) {
                    case 1:
                        {
                        this.state = 5211;
                        this.match(PostgreSqlParser.KW_COLUMN);
                        }
                        break;
                    }
                    }
                    break;
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_VIEW:
                    {
                    this.state = 5215;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 259) {
                        {
                        this.state = 5214;
                        this.match(PostgreSqlParser.KW_MATERIALIZED);
                        }
                    }

                    this.state = 5217;
                    this.match(PostgreSqlParser.KW_VIEW);
                    this.state = 5219;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 593, this.context) ) {
                    case 1:
                        {
                        this.state = 5218;
                        this.opt_if_exists();
                        }
                        break;
                    }
                    this.state = 5221;
                    this.view_name();
                    this.state = 5222;
                    this.match(PostgreSqlParser.KW_RENAME);
                    this.state = 5224;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 594, this.context) ) {
                    case 1:
                        {
                        this.state = 5223;
                        this.match(PostgreSqlParser.KW_COLUMN);
                        }
                        break;
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5228;
                this.column_name();
                this.state = 5229;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5230;
                this.column_name_create();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 5232;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5240;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_TABLE:
                    {
                    this.state = 5233;
                    this.match(PostgreSqlParser.KW_TABLE);
                    this.state = 5235;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 596, this.context) ) {
                    case 1:
                        {
                        this.state = 5234;
                        this.opt_if_exists();
                        }
                        break;
                    }
                    this.state = 5237;
                    this.relation_expr();
                    }
                    break;
                case PostgreSqlParser.KW_DOMAIN:
                    {
                    this.state = 5238;
                    this.match(PostgreSqlParser.KW_DOMAIN);
                    this.state = 5239;
                    this.any_name();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5242;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5243;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 5244;
                this.colid();
                this.state = 5245;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5246;
                this.colid();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 5248;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5255;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_POLICY:
                    {
                    {
                    this.state = 5249;
                    this.match(PostgreSqlParser.KW_POLICY);
                    this.state = 5251;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 598, this.context) ) {
                    case 1:
                        {
                        this.state = 5250;
                        this.opt_if_exists();
                        }
                        break;
                    }
                    }
                    }
                    break;
                case PostgreSqlParser.KW_RULE:
                    {
                    this.state = 5253;
                    this.match(PostgreSqlParser.KW_RULE);
                    }
                    break;
                case PostgreSqlParser.KW_TRIGGER:
                    {
                    this.state = 5254;
                    this.match(PostgreSqlParser.KW_TRIGGER);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5257;
                this.colid();
                this.state = 5258;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 5259;
                this.qualified_name();
                this.state = 5260;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5261;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5262;
                this.colid();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 5264;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5277;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_FOREIGN:
                    {
                    this.state = 5265;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    this.state = 5266;
                    this.match(PostgreSqlParser.KW_DATA);
                    this.state = 5267;
                    this.match(PostgreSqlParser.KW_WRAPPER);
                    }
                    break;
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_PROCEDURAL:
                    {
                    this.state = 5269;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 295) {
                        {
                        this.state = 5268;
                        this.match(PostgreSqlParser.KW_PROCEDURAL);
                        }
                    }

                    this.state = 5271;
                    this.match(PostgreSqlParser.KW_LANGUAGE);
                    }
                    break;
                case PostgreSqlParser.KW_PUBLICATION:
                    {
                    this.state = 5272;
                    this.match(PostgreSqlParser.KW_PUBLICATION);
                    }
                    break;
                case PostgreSqlParser.KW_SERVER:
                    {
                    this.state = 5273;
                    this.match(PostgreSqlParser.KW_SERVER);
                    }
                    break;
                case PostgreSqlParser.KW_SUBSCRIPTION:
                    {
                    this.state = 5274;
                    this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                    }
                    break;
                case PostgreSqlParser.KW_EVENT:
                    {
                    this.state = 5275;
                    this.match(PostgreSqlParser.KW_EVENT);
                    this.state = 5276;
                    this.match(PostgreSqlParser.KW_TRIGGER);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5279;
                this.colid();
                this.state = 5280;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5281;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5282;
                this.colid();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 5284;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5285;
                _la = this.tokenStream.LA(1);
                if(!(_la === 66 || _la === 99 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5286;
                this.rolespec();
                this.state = 5287;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5288;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5289;
                this.rolespec();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 5291;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5292;
                this.opttablespace();
                this.state = 5293;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5294;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5295;
                this.tablespace_name_create();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 5297;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5298;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 5299;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 5300;
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 185 || _la === 283 || _la === 353)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5301;
                this.any_name();
                this.state = 5302;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5303;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5304;
                this.colid();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 5306;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5307;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 5308;
                this.any_name();
                this.state = 5309;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5310;
                this.match(PostgreSqlParser.KW_ATTRIBUTE);
                this.state = 5311;
                this.colid();
                this.state = 5312;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5313;
                this.colid();
                this.state = 5315;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 602, this.context) ) {
                case 1:
                    {
                    this.state = 5314;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterobjectdependsstmt(): AlterobjectdependsstmtContext {
        let localContext = new AlterobjectdependsstmtContext(this.context, this.state);
        this.enterRule(localContext, 584, PostgreSqlParser.RULE_alterobjectdependsstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5319;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5336;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FUNCTION:
                {
                this.state = 5320;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 5321;
                this.function_with_argtypes();
                }
                break;
            case PostgreSqlParser.KW_PROCEDURE:
                {
                this.state = 5322;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 5323;
                this.procedure_with_argtypes();
                }
                break;
            case PostgreSqlParser.KW_ROUTINE:
                {
                this.state = 5324;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 5325;
                this.routine_with_argtypes();
                }
                break;
            case PostgreSqlParser.KW_TRIGGER:
                {
                this.state = 5326;
                this.match(PostgreSqlParser.KW_TRIGGER);
                this.state = 5327;
                this.colid();
                this.state = 5328;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 5329;
                this.qualified_name();
                }
                break;
            case PostgreSqlParser.KW_MATERIALIZED:
                {
                this.state = 5331;
                this.match(PostgreSqlParser.KW_MATERIALIZED);
                this.state = 5332;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 5333;
                this.view_name();
                }
                break;
            case PostgreSqlParser.KW_INDEX:
                {
                this.state = 5334;
                this.match(PostgreSqlParser.KW_INDEX);
                this.state = 5335;
                this.qualified_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 5339;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 269) {
                {
                this.state = 5338;
                this.match(PostgreSqlParser.KW_NO);
                }
            }

            this.state = 5341;
            this.match(PostgreSqlParser.KW_DEPENDS);
            this.state = 5342;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 5343;
            this.match(PostgreSqlParser.KW_EXTENSION);
            this.state = 5344;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterobjectschemastmt(): AlterobjectschemastmtContext {
        let localContext = new AlterobjectschemastmtContext(this.context, this.state);
        this.enterRule(localContext, 586, PostgreSqlParser.RULE_alterobjectschemastmt);
        let _la: number;
        try {
            this.state = 5407;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 613, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5346;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5385;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 611, this.context) ) {
                case 1:
                    {
                    this.state = 5347;
                    this.match(PostgreSqlParser.KW_AGGREGATE);
                    this.state = 5348;
                    this.aggregate_with_argtypes();
                    }
                    break;
                case 2:
                    {
                    this.state = 5349;
                    this.match(PostgreSqlParser.KW_EXTENSION);
                    this.state = 5350;
                    this.colid();
                    }
                    break;
                case 3:
                    {
                    this.state = 5351;
                    this.match(PostgreSqlParser.KW_FUNCTION);
                    this.state = 5352;
                    this.function_with_argtypes();
                    }
                    break;
                case 4:
                    {
                    this.state = 5353;
                    this.match(PostgreSqlParser.KW_OPERATOR);
                    this.state = 5354;
                    this.operator_with_argtypes();
                    }
                    break;
                case 5:
                    {
                    this.state = 5355;
                    this.match(PostgreSqlParser.KW_OPERATOR);
                    this.state = 5356;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 156 || _la === 206)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5357;
                    this.any_name();
                    this.state = 5358;
                    this.table_access_method_clause();
                    }
                    break;
                case 6:
                    {
                    this.state = 5360;
                    this.match(PostgreSqlParser.KW_PROCEDURE);
                    this.state = 5361;
                    this.procedure_with_argtypes();
                    }
                    break;
                case 7:
                    {
                    this.state = 5362;
                    this.match(PostgreSqlParser.KW_ROUTINE);
                    this.state = 5363;
                    this.routine_with_argtypes();
                    }
                    break;
                case 8:
                    {
                    this.state = 5364;
                    this.match(PostgreSqlParser.KW_SEQUENCE);
                    this.state = 5366;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 606, this.context) ) {
                    case 1:
                        {
                        this.state = 5365;
                        this.opt_if_exists();
                        }
                        break;
                    }
                    this.state = 5368;
                    this.qualified_name();
                    }
                    break;
                case 9:
                    {
                    this.state = 5370;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 259) {
                        {
                        this.state = 5369;
                        this.match(PostgreSqlParser.KW_MATERIALIZED);
                        }
                    }

                    this.state = 5372;
                    this.match(PostgreSqlParser.KW_VIEW);
                    this.state = 5374;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 608, this.context) ) {
                    case 1:
                        {
                        this.state = 5373;
                        this.opt_if_exists();
                        }
                        break;
                    }
                    this.state = 5376;
                    this.view_name();
                    }
                    break;
                case 10:
                    {
                    this.state = 5378;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 63) {
                        {
                        this.state = 5377;
                        this.match(PostgreSqlParser.KW_FOREIGN);
                        }
                    }

                    this.state = 5380;
                    this.match(PostgreSqlParser.KW_TABLE);
                    this.state = 5382;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 610, this.context) ) {
                    case 1:
                        {
                        this.state = 5381;
                        this.opt_if_exists();
                        }
                        break;
                    }
                    this.state = 5384;
                    this.relation_expr();
                    }
                    break;
                }
                this.state = 5387;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 5388;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 5389;
                this.schema_name();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5391;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5400;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_TEXT:
                    {
                    this.state = 5392;
                    this.match(PostgreSqlParser.KW_TEXT);
                    this.state = 5393;
                    this.match(PostgreSqlParser.KW_SEARCH);
                    this.state = 5394;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 163 || _la === 185 || _la === 283 || _la === 353)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case PostgreSqlParser.KW_COLLATION:
                    {
                    this.state = 5395;
                    this.match(PostgreSqlParser.KW_COLLATION);
                    }
                    break;
                case PostgreSqlParser.KW_CONVERSION:
                    {
                    this.state = 5396;
                    this.match(PostgreSqlParser.KW_CONVERSION);
                    }
                    break;
                case PostgreSqlParser.KW_DOMAIN:
                    {
                    this.state = 5397;
                    this.match(PostgreSqlParser.KW_DOMAIN);
                    }
                    break;
                case PostgreSqlParser.KW_STATISTICS:
                    {
                    this.state = 5398;
                    this.match(PostgreSqlParser.KW_STATISTICS);
                    }
                    break;
                case PostgreSqlParser.KW_TYPE:
                    {
                    this.state = 5399;
                    this.match(PostgreSqlParser.KW_TYPE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5402;
                this.any_name();
                this.state = 5403;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 5404;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 5405;
                this.schema_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alteroperatorstmt(): AlteroperatorstmtContext {
        let localContext = new AlteroperatorstmtContext(this.context, this.state);
        this.enterRule(localContext, 588, PostgreSqlParser.RULE_alteroperatorstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5409;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5410;
            this.match(PostgreSqlParser.KW_OPERATOR);
            this.state = 5411;
            this.operator_with_argtypes();
            this.state = 5412;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 5413;
            this.operator_def_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operator_def_list(): Operator_def_listContext {
        let localContext = new Operator_def_listContext(this.context, this.state);
        this.enterRule(localContext, 590, PostgreSqlParser.RULE_operator_def_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5415;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 5416;
            this.operator_def_elem();
            this.state = 5421;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5417;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5418;
                this.operator_def_elem();
                }
                }
                this.state = 5423;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 5424;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operator_def_elem(): Operator_def_elemContext {
        let localContext = new Operator_def_elemContext(this.context, this.state);
        this.enterRule(localContext, 592, PostgreSqlParser.RULE_operator_def_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5426;
            this.collabel();
            this.state = 5427;
            this.match(PostgreSqlParser.EQUAL);
            this.state = 5430;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 615, this.context) ) {
            case 1:
                {
                this.state = 5428;
                this.match(PostgreSqlParser.KW_NONE);
                }
                break;
            case 2:
                {
                this.state = 5429;
                this.operator_def_arg();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operator_def_arg(): Operator_def_argContext {
        let localContext = new Operator_def_argContext(this.context, this.state);
        this.enterRule(localContext, 594, PostgreSqlParser.RULE_operator_def_arg);
        try {
            this.state = 5437;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 616, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5432;
                this.func_type();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5433;
                this.reserved_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5434;
                this.qual_all_op();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5435;
                this.numericonly();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5436;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altertypestmt(): AltertypestmtContext {
        let localContext = new AltertypestmtContext(this.context, this.state);
        this.enterRule(localContext, 596, PostgreSqlParser.RULE_altertypestmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5439;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5440;
            this.match(PostgreSqlParser.KW_TYPE);
            this.state = 5441;
            this.any_name();
            this.state = 5442;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 5443;
            this.operator_def_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterownerstmt(): AlterownerstmtContext {
        let localContext = new AlterownerstmtContext(this.context, this.state);
        this.enterRule(localContext, 598, PostgreSqlParser.RULE_alterownerstmt);
        let _la: number;
        try {
            this.state = 5519;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 621, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5445;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5446;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 5447;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 206)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5448;
                this.any_name();
                this.state = 5449;
                this.table_access_method_clause();
                this.state = 5450;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5451;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5452;
                this.rolespec();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5454;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5481;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 618, this.context) ) {
                case 1:
                    {
                    this.state = 5455;
                    this.match(PostgreSqlParser.KW_AGGREGATE);
                    this.state = 5456;
                    this.aggregate_with_argtypes();
                    }
                    break;
                case 2:
                    {
                    this.state = 5457;
                    this.match(PostgreSqlParser.KW_DATABASE);
                    this.state = 5458;
                    this.database_name();
                    }
                    break;
                case 3:
                    {
                    this.state = 5459;
                    this.match(PostgreSqlParser.KW_FUNCTION);
                    this.state = 5460;
                    this.function_with_argtypes();
                    }
                    break;
                case 4:
                    {
                    this.state = 5462;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 295) {
                        {
                        this.state = 5461;
                        this.match(PostgreSqlParser.KW_PROCEDURAL);
                        }
                    }

                    this.state = 5464;
                    this.match(PostgreSqlParser.KW_LANGUAGE);
                    this.state = 5465;
                    this.colid();
                    }
                    break;
                case 5:
                    {
                    this.state = 5466;
                    this.match(PostgreSqlParser.KW_LARGE);
                    this.state = 5467;
                    this.match(PostgreSqlParser.KW_OBJECT);
                    this.state = 5468;
                    this.numericonly();
                    }
                    break;
                case 6:
                    {
                    this.state = 5469;
                    this.match(PostgreSqlParser.KW_LARGE);
                    this.state = 5470;
                    this.match(PostgreSqlParser.KW_OBJECT);
                    this.state = 5471;
                    this.numericonly();
                    }
                    break;
                case 7:
                    {
                    this.state = 5472;
                    this.match(PostgreSqlParser.KW_OPERATOR);
                    this.state = 5473;
                    this.operator_with_argtypes();
                    }
                    break;
                case 8:
                    {
                    this.state = 5474;
                    this.match(PostgreSqlParser.KW_PROCEDURE);
                    this.state = 5475;
                    this.procedure_with_argtypes();
                    }
                    break;
                case 9:
                    {
                    this.state = 5476;
                    this.match(PostgreSqlParser.KW_ROUTINE);
                    this.state = 5477;
                    this.routine_with_argtypes();
                    }
                    break;
                case 10:
                    {
                    this.state = 5478;
                    this.match(PostgreSqlParser.KW_SCHEMA);
                    this.state = 5479;
                    this.schema_name();
                    }
                    break;
                case 11:
                    {
                    this.state = 5480;
                    this.opttablespace();
                    }
                    break;
                }
                this.state = 5483;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5484;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5485;
                this.rolespec();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5487;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5496;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_TEXT:
                    {
                    this.state = 5488;
                    this.match(PostgreSqlParser.KW_TEXT);
                    this.state = 5489;
                    this.match(PostgreSqlParser.KW_SEARCH);
                    this.state = 5490;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 163 || _la === 185)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case PostgreSqlParser.KW_COLLATION:
                    {
                    this.state = 5491;
                    this.match(PostgreSqlParser.KW_COLLATION);
                    }
                    break;
                case PostgreSqlParser.KW_CONVERSION:
                    {
                    this.state = 5492;
                    this.match(PostgreSqlParser.KW_CONVERSION);
                    }
                    break;
                case PostgreSqlParser.KW_DOMAIN:
                    {
                    this.state = 5493;
                    this.match(PostgreSqlParser.KW_DOMAIN);
                    }
                    break;
                case PostgreSqlParser.KW_TYPE:
                    {
                    this.state = 5494;
                    this.match(PostgreSqlParser.KW_TYPE);
                    }
                    break;
                case PostgreSqlParser.KW_STATISTICS:
                    {
                    this.state = 5495;
                    this.match(PostgreSqlParser.KW_STATISTICS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5498;
                this.any_name();
                this.state = 5499;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5500;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5501;
                this.rolespec();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5503;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5512;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_SERVER:
                    {
                    this.state = 5504;
                    this.match(PostgreSqlParser.KW_SERVER);
                    }
                    break;
                case PostgreSqlParser.KW_FOREIGN:
                    {
                    {
                    this.state = 5505;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    this.state = 5506;
                    this.match(PostgreSqlParser.KW_DATA);
                    this.state = 5507;
                    this.match(PostgreSqlParser.KW_WRAPPER);
                    }
                    }
                    break;
                case PostgreSqlParser.KW_EVENT:
                    {
                    {
                    this.state = 5508;
                    this.match(PostgreSqlParser.KW_EVENT);
                    this.state = 5509;
                    this.match(PostgreSqlParser.KW_TRIGGER);
                    }
                    }
                    break;
                case PostgreSqlParser.KW_PUBLICATION:
                    {
                    this.state = 5510;
                    this.match(PostgreSqlParser.KW_PUBLICATION);
                    }
                    break;
                case PostgreSqlParser.KW_SUBSCRIPTION:
                    {
                    this.state = 5511;
                    this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5514;
                this.colid();
                this.state = 5515;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5516;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5517;
                this.rolespec();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createpublicationstmt(): CreatepublicationstmtContext {
        let localContext = new CreatepublicationstmtContext(this.context, this.state);
        this.enterRule(localContext, 600, PostgreSqlParser.RULE_createpublicationstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5521;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5522;
            this.match(PostgreSqlParser.KW_PUBLICATION);
            this.state = 5523;
            this.colid();
            this.state = 5525;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 62) {
                {
                this.state = 5524;
                this.publication_for_tables();
                }
            }

            this.state = 5528;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 623, this.context) ) {
            case 1:
                {
                this.state = 5527;
                this.opt_definition();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public publication_for_tables(): Publication_for_tablesContext {
        let localContext = new Publication_for_tablesContext(this.context, this.state);
        this.enterRule(localContext, 602, PostgreSqlParser.RULE_publication_for_tables);
        try {
            this.state = 5536;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 624, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5530;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 5531;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 5532;
                this.relation_expr_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5533;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 5534;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 5535;
                this.match(PostgreSqlParser.KW_TABLES);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterpublicationstmt(): AlterpublicationstmtContext {
        let localContext = new AlterpublicationstmtContext(this.context, this.state);
        this.enterRule(localContext, 604, PostgreSqlParser.RULE_alterpublicationstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5538;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5539;
            this.match(PostgreSqlParser.KW_PUBLICATION);
            this.state = 5540;
            this.colid();
            this.state = 5551;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 625, this.context) ) {
            case 1:
                {
                {
                this.state = 5541;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5542;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5543;
                this.rolespec();
                }
                }
                break;
            case 2:
                {
                {
                this.state = 5544;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 5545;
                this.definition();
                }
                }
                break;
            case 3:
                {
                {
                this.state = 5546;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5547;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5548;
                this.colid();
                }
                }
                break;
            case 4:
                {
                this.state = 5549;
                _la = this.tokenStream.LA(1);
                if(!(_la === 133 || _la === 191 || _la === 333)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5550;
                this.publication_relation_expr_list();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createsubscriptionstmt(): CreatesubscriptionstmtContext {
        let localContext = new CreatesubscriptionstmtContext(this.context, this.state);
        this.enterRule(localContext, 606, PostgreSqlParser.RULE_createsubscriptionstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5553;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5554;
            this.match(PostgreSqlParser.KW_SUBSCRIPTION);
            this.state = 5555;
            this.colid();
            this.state = 5556;
            this.match(PostgreSqlParser.KW_CONNECTION);
            this.state = 5557;
            this.sconst();
            this.state = 5558;
            this.match(PostgreSqlParser.KW_PUBLICATION);
            this.state = 5559;
            this.publication_name_list();
            this.state = 5561;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 626, this.context) ) {
            case 1:
                {
                this.state = 5560;
                this.opt_definition();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public publication_name_list(): Publication_name_listContext {
        let localContext = new Publication_name_listContext(this.context, this.state);
        this.enterRule(localContext, 608, PostgreSqlParser.RULE_publication_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5563;
            this.collabel();
            this.state = 5568;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5564;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5565;
                this.collabel();
                }
                }
                this.state = 5570;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altersubscriptionstmt(): AltersubscriptionstmtContext {
        let localContext = new AltersubscriptionstmtContext(this.context, this.state);
        this.enterRule(localContext, 610, PostgreSqlParser.RULE_altersubscriptionstmt);
        let _la: number;
        try {
            this.state = 5620;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 630, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5571;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5572;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5573;
                this.colid();
                this.state = 5574;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 5575;
                this.definition();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5577;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5578;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5579;
                this.colid();
                this.state = 5580;
                this.match(PostgreSqlParser.KW_CONNECTION);
                this.state = 5581;
                this.sconst();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5583;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5584;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5585;
                this.colid();
                this.state = 5586;
                this.match(PostgreSqlParser.KW_REFRESH);
                this.state = 5587;
                this.match(PostgreSqlParser.KW_PUBLICATION);
                this.state = 5589;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 628, this.context) ) {
                case 1:
                    {
                    this.state = 5588;
                    this.opt_definition();
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5591;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5592;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5593;
                this.colid();
                this.state = 5594;
                _la = this.tokenStream.LA(1);
                if(!(_la === 133 || _la === 191 || _la === 333)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5595;
                this.match(PostgreSqlParser.KW_PUBLICATION);
                this.state = 5596;
                this.publication_name_list();
                this.state = 5598;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 629, this.context) ) {
                case 1:
                    {
                    this.state = 5597;
                    this.opt_definition();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5600;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5601;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5602;
                this.colid();
                this.state = 5603;
                _la = this.tokenStream.LA(1);
                if(!(_la === 186 || _la === 193)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5605;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5606;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5607;
                this.colid();
                this.state = 5608;
                this.match(PostgreSqlParser.KW_SKIP);
                this.state = 5609;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 5610;
                this.old_aggr_elem();
                this.state = 5611;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5613;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5614;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5615;
                this.colid();
                this.state = 5616;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5617;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5618;
                this.rolespec();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rulestmt(): RulestmtContext {
        let localContext = new RulestmtContext(this.context, this.state);
        this.enterRule(localContext, 612, PostgreSqlParser.RULE_rulestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5622;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5624;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 5623;
                this.opt_or_replace();
                }
            }

            this.state = 5626;
            this.match(PostgreSqlParser.KW_RULE);
            this.state = 5627;
            this.colid();
            this.state = 5628;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 5629;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 5630;
            this.event();
            this.state = 5631;
            this.match(PostgreSqlParser.KW_TO);
            this.state = 5632;
            this.qualified_name();
            this.state = 5634;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 103) {
                {
                this.state = 5633;
                this.where_clause();
                }
            }

            this.state = 5636;
            this.match(PostgreSqlParser.KW_DO);
            this.state = 5638;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 137 || _la === 242) {
                {
                this.state = 5637;
                _la = this.tokenStream.LA(1);
                if(!(_la === 137 || _la === 242)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 5640;
            this.ruleactionlist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ruleactionlist(): RuleactionlistContext {
        let localContext = new RuleactionlistContext(this.context, this.state);
        this.enterRule(localContext, 614, PostgreSqlParser.RULE_ruleactionlist);
        try {
            this.state = 5648;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 634, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5642;
                this.match(PostgreSqlParser.KW_NOTHING);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5643;
                this.ruleactionstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5644;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 5645;
                this.ruleactionmulti();
                this.state = 5646;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ruleactionmulti(): RuleactionmultiContext {
        let localContext = new RuleactionmultiContext(this.context, this.state);
        this.enterRule(localContext, 616, PostgreSqlParser.RULE_ruleactionmulti);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5651;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2 || ((((_la - 88)) & ~0x1F) === 0 && ((1 << (_la - 88)) & 131089) !== 0) || _la === 182 || _la === 241 || _la === 271 || _la === 369 || _la === 422) {
                {
                this.state = 5650;
                this.ruleactionstmt();
                }
            }

            this.state = 5659;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 7) {
                {
                {
                this.state = 5653;
                this.match(PostgreSqlParser.SEMI);
                this.state = 5655;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2 || ((((_la - 88)) & ~0x1F) === 0 && ((1 << (_la - 88)) & 131089) !== 0) || _la === 182 || _la === 241 || _la === 271 || _la === 369 || _la === 422) {
                    {
                    this.state = 5654;
                    this.ruleactionstmt();
                    }
                }

                }
                }
                this.state = 5661;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ruleactionstmt(): RuleactionstmtContext {
        let localContext = new RuleactionstmtContext(this.context, this.state);
        this.enterRule(localContext, 618, PostgreSqlParser.RULE_ruleactionstmt);
        try {
            this.state = 5667;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 638, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5662;
                this.selectstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5663;
                this.insertstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5664;
                this.updatestmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5665;
                this.deletestmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5666;
                this.notifystmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public event(): EventContext {
        let localContext = new EventContext(this.context, this.state);
        this.enterRule(localContext, 620, PostgreSqlParser.RULE_event);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5669;
            _la = this.tokenStream.LA(1);
            if(!(_la === 88 || _la === 182 || _la === 241 || _la === 369)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notifystmt(): NotifystmtContext {
        let localContext = new NotifystmtContext(this.context, this.state);
        this.enterRule(localContext, 622, PostgreSqlParser.RULE_notifystmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5671;
            this.match(PostgreSqlParser.KW_NOTIFY);
            this.state = 5672;
            this.colid();
            this.state = 5674;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6) {
                {
                this.state = 5673;
                this.notify_payload();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notify_payload(): Notify_payloadContext {
        let localContext = new Notify_payloadContext(this.context, this.state);
        this.enterRule(localContext, 624, PostgreSqlParser.RULE_notify_payload);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5676;
            this.match(PostgreSqlParser.COMMA);
            this.state = 5677;
            this.sconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listenstmt(): ListenstmtContext {
        let localContext = new ListenstmtContext(this.context, this.state);
        this.enterRule(localContext, 626, PostgreSqlParser.RULE_listenstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5679;
            this.match(PostgreSqlParser.KW_LISTEN);
            this.state = 5680;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unlistenstmt(): UnlistenstmtContext {
        let localContext = new UnlistenstmtContext(this.context, this.state);
        this.enterRule(localContext, 628, PostgreSqlParser.RULE_unlistenstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5682;
            this.match(PostgreSqlParser.KW_UNLISTEN);
            this.state = 5685;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 5683;
                this.colid();
                }
                break;
            case PostgreSqlParser.STAR:
                {
                this.state = 5684;
                this.match(PostgreSqlParser.STAR);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionstmt(): TransactionstmtContext {
        let localContext = new TransactionstmtContext(this.context, this.state);
        this.enterRule(localContext, 630, PostgreSqlParser.RULE_transactionstmt);
        let _la: number;
        try {
            this.state = 5732;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 650, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5687;
                this.match(PostgreSqlParser.KW_BEGIN);
                this.state = 5689;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 641, this.context) ) {
                case 1:
                    {
                    this.state = 5688;
                    this.opt_transaction();
                    }
                    break;
                }
                this.state = 5692;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 642, this.context) ) {
                case 1:
                    {
                    this.state = 5691;
                    this.transaction_mode_list();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5694;
                this.match(PostgreSqlParser.KW_START);
                this.state = 5695;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 5697;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 643, this.context) ) {
                case 1:
                    {
                    this.state = 5696;
                    this.transaction_mode_list();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5699;
                this.match(PostgreSqlParser.KW_SAVEPOINT);
                this.state = 5700;
                this.colid();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5701;
                this.match(PostgreSqlParser.KW_RELEASE);
                this.state = 5703;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 644, this.context) ) {
                case 1:
                    {
                    this.state = 5702;
                    this.match(PostgreSqlParser.KW_SAVEPOINT);
                    }
                    break;
                }
                this.state = 5705;
                this.colid();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5706;
                this.match(PostgreSqlParser.KW_PREPARE);
                this.state = 5707;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 5708;
                this.sconst();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5709;
                _la = this.tokenStream.LA(1);
                if(!(_la === 161 || _la === 319)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5710;
                this.match(PostgreSqlParser.KW_PREPARED);
                this.state = 5711;
                this.sconst();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5712;
                _la = this.tokenStream.LA(1);
                if(!(_la === 129 || _la === 161 || _la === 319 || _la === 454)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5714;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 645, this.context) ) {
                case 1:
                    {
                    this.state = 5713;
                    this.opt_transaction();
                    }
                    break;
                }
                this.state = 5721;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 647, this.context) ) {
                case 1:
                    {
                    this.state = 5716;
                    this.match(PostgreSqlParser.KW_AND);
                    this.state = 5718;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 269) {
                        {
                        this.state = 5717;
                        this.match(PostgreSqlParser.KW_NO);
                        }
                    }

                    this.state = 5720;
                    this.match(PostgreSqlParser.KW_CHAIN);
                    }
                    break;
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5723;
                this.match(PostgreSqlParser.KW_ROLLBACK);
                this.state = 5725;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 356 || _la === 380) {
                    {
                    this.state = 5724;
                    this.opt_transaction();
                    }
                }

                this.state = 5727;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5729;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 649, this.context) ) {
                case 1:
                    {
                    this.state = 5728;
                    this.match(PostgreSqlParser.KW_SAVEPOINT);
                    }
                    break;
                }
                this.state = 5731;
                this.colid();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_transaction(): Opt_transactionContext {
        let localContext = new Opt_transactionContext(this.context, this.state);
        this.enterRule(localContext, 632, PostgreSqlParser.RULE_opt_transaction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5734;
            _la = this.tokenStream.LA(1);
            if(!(_la === 356 || _la === 380)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transaction_mode_item(): Transaction_mode_itemContext {
        let localContext = new Transaction_mode_itemContext(this.context, this.state);
        this.enterRule(localContext, 634, PostgreSqlParser.RULE_transaction_mode_item);
        let _la: number;
        try {
            this.state = 5745;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ISOLATION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5736;
                this.match(PostgreSqlParser.KW_ISOLATION);
                this.state = 5737;
                this.match(PostgreSqlParser.KW_LEVEL);
                this.state = 5738;
                this.iso_level();
                }
                break;
            case PostgreSqlParser.KW_READ:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5739;
                this.match(PostgreSqlParser.KW_READ);
                this.state = 5740;
                _la = this.tokenStream.LA(1);
                if(!(_la === 81 || _la === 382)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_DEFERRABLE:
            case PostgreSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5742;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 5741;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 5744;
                this.match(PostgreSqlParser.KW_DEFERRABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transaction_mode_list(): Transaction_mode_listContext {
        let localContext = new Transaction_mode_listContext(this.context, this.state);
        this.enterRule(localContext, 636, PostgreSqlParser.RULE_transaction_mode_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5747;
            this.transaction_mode_item();
            this.state = 5754;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 654, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 5749;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 6) {
                        {
                        this.state = 5748;
                        this.match(PostgreSqlParser.COMMA);
                        }
                    }

                    this.state = 5751;
                    this.transaction_mode_item();
                    }
                    }
                }
                this.state = 5756;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 654, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewstmt(): ViewstmtContext {
        let localContext = new ViewstmtContext(this.context, this.state);
        this.enterRule(localContext, 638, PostgreSqlParser.RULE_viewstmt);
        let _la: number;
        try {
            localContext = new CreateViewContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5757;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5760;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 5758;
                this.match(PostgreSqlParser.KW_OR);
                this.state = 5759;
                this.match(PostgreSqlParser.KW_REPLACE);
                }
            }

            this.state = 5763;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 213 || _la === 254 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 32773) !== 0)) {
                {
                this.state = 5762;
                this.opttemp();
                }
            }

            this.state = 5780;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_VIEW:
                {
                this.state = 5765;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 5766;
                this.view_name_create();
                this.state = 5768;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 5767;
                    this.opt_column_list_create();
                    }
                }

                this.state = 5771;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 5770;
                    this.opt_reloptions();
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_RECURSIVE:
                {
                this.state = 5773;
                this.match(PostgreSqlParser.KW_RECURSIVE);
                this.state = 5774;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 5775;
                this.view_name_create();
                this.state = 5776;
                this.opt_column_list();
                this.state = 5778;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 5777;
                    this.opt_reloptions();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 5782;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 5783;
            this.selectstmt();
            this.state = 5785;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 661, this.context) ) {
            case 1:
                {
                this.state = 5784;
                this.opt_check_option();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_check_option(): Opt_check_optionContext {
        let localContext = new Opt_check_optionContext(this.context, this.state);
        this.enterRule(localContext, 640, PostgreSqlParser.RULE_opt_check_option);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5787;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 5789;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 151 || _la === 254) {
                {
                this.state = 5788;
                _la = this.tokenStream.LA(1);
                if(!(_la === 151 || _la === 254)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 5791;
            this.match(PostgreSqlParser.KW_CHECK);
            this.state = 5792;
            this.match(PostgreSqlParser.KW_OPTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadstmt(): LoadstmtContext {
        let localContext = new LoadstmtContext(this.context, this.state);
        this.enterRule(localContext, 642, PostgreSqlParser.RULE_loadstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5794;
            this.match(PostgreSqlParser.KW_LOAD);
            this.state = 5795;
            this.sconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createdbstmt(): CreatedbstmtContext {
        let localContext = new CreatedbstmtContext(this.context, this.state);
        this.enterRule(localContext, 644, PostgreSqlParser.RULE_createdbstmt);
        try {
            localContext = new CreateDatabaseContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5797;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5798;
            this.match(PostgreSqlParser.KW_DATABASE);
            this.state = 5799;
            this.database_name_create();
            this.state = 5801;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 663, this.context) ) {
            case 1:
                {
                this.state = 5800;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 5804;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 664, this.context) ) {
            case 1:
                {
                this.state = 5803;
                this.createdb_opt_items();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createdb_opt_items(): Createdb_opt_itemsContext {
        let localContext = new Createdb_opt_itemsContext(this.context, this.state);
        this.enterRule(localContext, 646, PostgreSqlParser.RULE_createdb_opt_items);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5807;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 5806;
                    this.createdb_opt_item();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5809;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 665, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createdb_opt_item(): Createdb_opt_itemContext {
        let localContext = new Createdb_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 648, PostgreSqlParser.RULE_createdb_opt_item);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5811;
            this.createdb_opt_name();
            this.state = 5813;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 5812;
                this.match(PostgreSqlParser.EQUAL);
                }
            }

            this.state = 5818;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 667, this.context) ) {
            case 1:
                {
                this.state = 5815;
                this.signediconst();
                }
                break;
            case 2:
                {
                this.state = 5816;
                this.opt_boolean_or_string();
                }
                break;
            case 3:
                {
                this.state = 5817;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createdb_opt_name(): Createdb_opt_nameContext {
        let localContext = new Createdb_opt_nameContext(this.context, this.state);
        this.enterRule(localContext, 650, PostgreSqlParser.RULE_createdb_opt_name);
        try {
            this.state = 5828;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CONNECTION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5820;
                this.match(PostgreSqlParser.KW_CONNECTION);
                this.state = 5821;
                this.match(PostgreSqlParser.KW_LIMIT);
                }
                break;
            case PostgreSqlParser.KW_ENCODING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5822;
                this.match(PostgreSqlParser.KW_ENCODING);
                }
                break;
            case PostgreSqlParser.KW_LOCATION:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5823;
                this.match(PostgreSqlParser.KW_LOCATION);
                }
                break;
            case PostgreSqlParser.KW_OWNER:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5824;
                this.match(PostgreSqlParser.KW_OWNER);
                }
                break;
            case PostgreSqlParser.KW_TABLESPACE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5825;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                }
                break;
            case PostgreSqlParser.KW_TEMPLATE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5826;
                this.match(PostgreSqlParser.KW_TEMPLATE);
                }
                break;
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5827;
                this.identifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterdatabasestmt(): AlterdatabasestmtContext {
        let localContext = new AlterdatabasestmtContext(this.context, this.state);
        this.enterRule(localContext, 652, PostgreSqlParser.RULE_alterdatabasestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5830;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5831;
            this.match(PostgreSqlParser.KW_DATABASE);
            this.state = 5832;
            this.database_name();
            this.state = 5844;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 672, this.context) ) {
            case 1:
                {
                this.state = 5836;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 669, this.context) ) {
                case 1:
                    {
                    this.state = 5833;
                    this.match(PostgreSqlParser.KW_SET);
                    this.state = 5834;
                    this.match(PostgreSqlParser.KW_TABLESPACE);
                    this.state = 5835;
                    this.tablespace_name_create();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 5842;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 671, this.context) ) {
                case 1:
                    {
                    this.state = 5839;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 105) {
                        {
                        this.state = 5838;
                        this.match(PostgreSqlParser.KW_WITH);
                        }
                    }

                    this.state = 5841;
                    this.createdb_opt_items();
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterdatabasesetstmt(): AlterdatabasesetstmtContext {
        let localContext = new AlterdatabasesetstmtContext(this.context, this.state);
        this.enterRule(localContext, 654, PostgreSqlParser.RULE_alterdatabasesetstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5846;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5847;
            this.match(PostgreSqlParser.KW_DATABASE);
            this.state = 5848;
            this.database_name();
            this.state = 5850;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 673, this.context) ) {
            case 1:
                {
                this.state = 5849;
                this.setresetclause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_option_list(): Drop_option_listContext {
        let localContext = new Drop_option_listContext(this.context, this.state);
        this.enterRule(localContext, 656, PostgreSqlParser.RULE_drop_option_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5852;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 5853;
            this.match(PostgreSqlParser.KW_FORCE);
            this.state = 5858;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5854;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5855;
                this.match(PostgreSqlParser.KW_FORCE);
                }
                }
                this.state = 5860;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 5861;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altercollationstmt(): AltercollationstmtContext {
        let localContext = new AltercollationstmtContext(this.context, this.state);
        this.enterRule(localContext, 658, PostgreSqlParser.RULE_altercollationstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5863;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5864;
            this.match(PostgreSqlParser.KW_COLLATION);
            this.state = 5865;
            this.any_name();
            this.state = 5866;
            this.match(PostgreSqlParser.KW_REFRESH);
            this.state = 5867;
            this.match(PostgreSqlParser.KW_VERSION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altersystemstmt(): AltersystemstmtContext {
        let localContext = new AltersystemstmtContext(this.context, this.state);
        this.enterRule(localContext, 660, PostgreSqlParser.RULE_altersystemstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5869;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5870;
            this.match(PostgreSqlParser.KW_SYSTEM);
            this.state = 5871;
            _la = this.tokenStream.LA(1);
            if(!(_la === 313 || _la === 333)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5872;
            this.generic_set();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createdomainstmt(): CreatedomainstmtContext {
        let localContext = new CreatedomainstmtContext(this.context, this.state);
        this.enterRule(localContext, 662, PostgreSqlParser.RULE_createdomainstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5874;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5875;
            this.match(PostgreSqlParser.KW_DOMAIN);
            this.state = 5876;
            this.any_name();
            this.state = 5878;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 5877;
                this.match(PostgreSqlParser.KW_AS);
                }
            }

            this.state = 5880;
            this.typename();
            this.state = 5881;
            this.colquallist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterdomainstmt(): AlterdomainstmtContext {
        let localContext = new AlterdomainstmtContext(this.context, this.state);
        this.enterRule(localContext, 664, PostgreSqlParser.RULE_alterdomainstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5883;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5884;
            this.match(PostgreSqlParser.KW_DOMAIN);
            this.state = 5885;
            this.any_name();
            this.state = 5904;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 678, this.context) ) {
            case 1:
                {
                this.state = 5886;
                this.alter_column_default();
                }
                break;
            case 2:
                {
                this.state = 5887;
                _la = this.tokenStream.LA(1);
                if(!(_la === 191 || _la === 333)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5888;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 5889;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            case 3:
                {
                this.state = 5890;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 5891;
                this.tableconstraint();
                }
                break;
            case 4:
                {
                this.state = 5892;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 5893;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 5895;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 676, this.context) ) {
                case 1:
                    {
                    this.state = 5894;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 5897;
                this.colid();
                this.state = 5899;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 677, this.context) ) {
                case 1:
                    {
                    this.state = 5898;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 5:
                {
                this.state = 5901;
                this.match(PostgreSqlParser.KW_VALIDATE);
                this.state = 5902;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 5903;
                this.colid();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altertsdictionarystmt(): AltertsdictionarystmtContext {
        let localContext = new AltertsdictionarystmtContext(this.context, this.state);
        this.enterRule(localContext, 666, PostgreSqlParser.RULE_altertsdictionarystmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5906;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5907;
            this.match(PostgreSqlParser.KW_TEXT);
            this.state = 5908;
            this.match(PostgreSqlParser.KW_SEARCH);
            this.state = 5909;
            this.match(PostgreSqlParser.KW_DICTIONARY);
            this.state = 5910;
            this.any_name();
            this.state = 5911;
            this.definition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altertsconfigurationstmt(): AltertsconfigurationstmtContext {
        let localContext = new AltertsconfigurationstmtContext(this.context, this.state);
        this.enterRule(localContext, 668, PostgreSqlParser.RULE_altertsconfigurationstmt);
        let _la: number;
        try {
            this.state = 5954;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 681, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5913;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5914;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 5915;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 5916;
                this.match(PostgreSqlParser.KW_CONFIGURATION);
                this.state = 5917;
                this.any_name();
                this.state = 5918;
                _la = this.tokenStream.LA(1);
                if(!(_la === 133 || _la === 138)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5919;
                this.match(PostgreSqlParser.KW_MAPPING);
                this.state = 5920;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 5921;
                this.name_list();
                this.state = 5922;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 5923;
                this.any_name_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5925;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5926;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 5927;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 5928;
                this.match(PostgreSqlParser.KW_CONFIGURATION);
                this.state = 5929;
                this.any_name();
                this.state = 5930;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5931;
                this.match(PostgreSqlParser.KW_MAPPING);
                this.state = 5934;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 5932;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 5933;
                    this.name_list();
                    }
                }

                this.state = 5936;
                this.match(PostgreSqlParser.KW_REPLACE);
                this.state = 5937;
                this.any_name();
                this.state = 5938;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 5939;
                this.any_name();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5941;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5942;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 5943;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 5944;
                this.match(PostgreSqlParser.KW_CONFIGURATION);
                this.state = 5945;
                this.any_name();
                this.state = 5946;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 5947;
                this.match(PostgreSqlParser.KW_MAPPING);
                this.state = 5949;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 5948;
                    this.opt_if_exists();
                    }
                }

                this.state = 5951;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 5952;
                this.name_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createconversionstmt(): CreateconversionstmtContext {
        let localContext = new CreateconversionstmtContext(this.context, this.state);
        this.enterRule(localContext, 670, PostgreSqlParser.RULE_createconversionstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5956;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5958;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 5957;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
            }

            this.state = 5960;
            this.match(PostgreSqlParser.KW_CONVERSION);
            this.state = 5961;
            this.any_name();
            this.state = 5962;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 5963;
            this.sconst();
            this.state = 5964;
            this.match(PostgreSqlParser.KW_TO);
            this.state = 5965;
            this.sconst();
            this.state = 5966;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 5967;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public clusterstmt(): ClusterstmtContext {
        let localContext = new ClusterstmtContext(this.context, this.state);
        this.enterRule(localContext, 672, PostgreSqlParser.RULE_clusterstmt);
        let _la: number;
        try {
            this.state = 5985;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 687, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5969;
                this.match(PostgreSqlParser.KW_CLUSTER);
                this.state = 5971;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 5970;
                    this.opt_verbose();
                    }
                }

                this.state = 5977;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 685, this.context) ) {
                case 1:
                    {
                    this.state = 5973;
                    this.table_name();
                    this.state = 5975;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 100) {
                        {
                        this.state = 5974;
                        this.table_access_method_clause();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5979;
                this.match(PostgreSqlParser.KW_CLUSTER);
                this.state = 5980;
                this.opt_verbose_list();
                this.state = 5981;
                this.table_name();
                this.state = 5983;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 5982;
                    this.table_access_method_clause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_verbose_list(): Opt_verbose_listContext {
        let localContext = new Opt_verbose_listContext(this.context, this.state);
        this.enterRule(localContext, 674, PostgreSqlParser.RULE_opt_verbose_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5987;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 5988;
            this.opt_verbose();
            this.state = 5993;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5989;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5990;
                this.opt_verbose();
                }
                }
                this.state = 5995;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 5996;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vacuumstmt(): VacuumstmtContext {
        let localContext = new VacuumstmtContext(this.context, this.state);
        this.enterRule(localContext, 676, PostgreSqlParser.RULE_vacuumstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5998;
            this.match(PostgreSqlParser.KW_VACUUM);
            this.state = 6014;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 694, this.context) ) {
            case 1:
                {
                {
                this.state = 6000;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 113) {
                    {
                    this.state = 5999;
                    this.match(PostgreSqlParser.KW_FULL);
                    }
                }

                this.state = 6003;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 112) {
                    {
                    this.state = 6002;
                    this.match(PostgreSqlParser.KW_FREEZE);
                    }
                }

                this.state = 6006;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 6005;
                    this.opt_verbose();
                    }
                }

                this.state = 6009;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 692, this.context) ) {
                case 1:
                    {
                    this.state = 6008;
                    this.analyze_keyword();
                    }
                    break;
                }
                }
                }
                break;
            case 2:
                {
                this.state = 6012;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 693, this.context) ) {
                case 1:
                    {
                    this.state = 6011;
                    this.explain_option_list();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 6017;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 695, this.context) ) {
            case 1:
                {
                this.state = 6016;
                this.vacuum_relation_list();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyzestmt(): AnalyzestmtContext {
        let localContext = new AnalyzestmtContext(this.context, this.state);
        this.enterRule(localContext, 678, PostgreSqlParser.RULE_analyzestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6019;
            this.analyze_keyword();
            this.state = 6027;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 697, this.context) ) {
            case 1:
                {
                this.state = 6021;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 6020;
                    this.opt_verbose();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 6023;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6024;
                this.analyze_options_list();
                this.state = 6025;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            this.state = 6030;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 698, this.context) ) {
            case 1:
                {
                this.state = 6029;
                this.vacuum_relation_list();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vac_analyze_option_list(): Vac_analyze_option_listContext {
        let localContext = new Vac_analyze_option_listContext(this.context, this.state);
        this.enterRule(localContext, 680, PostgreSqlParser.RULE_vac_analyze_option_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6032;
            this.vac_analyze_option_elem();
            this.state = 6037;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6033;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6034;
                this.vac_analyze_option_elem();
                }
                }
                this.state = 6039;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyze_keyword(): Analyze_keywordContext {
        let localContext = new Analyze_keywordContext(this.context, this.state);
        this.enterRule(localContext, 682, PostgreSqlParser.RULE_analyze_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6040;
            _la = this.tokenStream.LA(1);
            if(!(_la === 31 || _la === 32)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vac_analyze_option_elem(): Vac_analyze_option_elemContext {
        let localContext = new Vac_analyze_option_elemContext(this.context, this.state);
        this.enterRule(localContext, 684, PostgreSqlParser.RULE_vac_analyze_option_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6042;
            this.vac_analyze_option_name();
            this.state = 6044;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 12 || _la === 13 || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 420484101) !== 0) || ((((_la - 80)) & ~0x1F) === 0 && ((1 << (_la - 80)) & 4227923969) !== 0) || ((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & 4294967295) !== 0) || ((((_la - 144)) & ~0x1F) === 0 && ((1 << (_la - 144)) & 4294967295) !== 0) || ((((_la - 176)) & ~0x1F) === 0 && ((1 << (_la - 176)) & 4294967295) !== 0) || ((((_la - 208)) & ~0x1F) === 0 && ((1 << (_la - 208)) & 3223322623) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & 4294967295) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & 4294967295) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & 4294967295) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & 4294967295) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & 4294967295) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & 4294967295) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & 4290772991) !== 0) || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & 4294967295) !== 0) || ((((_la - 496)) & ~0x1F) === 0 && ((1 << (_la - 496)) & 25165183) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 486582415) !== 0) || _la === 584) {
                {
                this.state = 6043;
                this.vac_analyze_option_arg();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vac_analyze_option_name(): Vac_analyze_option_nameContext {
        let localContext = new Vac_analyze_option_nameContext(this.context, this.state);
        this.enterRule(localContext, 686, PostgreSqlParser.RULE_vac_analyze_option_name);
        try {
            this.state = 6048;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6046;
                this.nonreservedword();
                }
                break;
            case PostgreSqlParser.KW_ANALYSE:
            case PostgreSqlParser.KW_ANALYZE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6047;
                this.analyze_keyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vac_analyze_option_arg(): Vac_analyze_option_argContext {
        let localContext = new Vac_analyze_option_argContext(this.context, this.state);
        this.enterRule(localContext, 688, PostgreSqlParser.RULE_vac_analyze_option_arg);
        try {
            this.state = 6052;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_ON:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6050;
                this.opt_boolean_or_string();
                }
                break;
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6051;
                this.numericonly();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyze_options_list(): Analyze_options_listContext {
        let localContext = new Analyze_options_listContext(this.context, this.state);
        this.enterRule(localContext, 690, PostgreSqlParser.RULE_analyze_options_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6054;
            this.analyze_option_elem();
            this.state = 6059;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6055;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6056;
                this.analyze_option_elem();
                }
                }
                this.state = 6061;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyze_option_elem(): Analyze_option_elemContext {
        let localContext = new Analyze_option_elemContext(this.context, this.state);
        this.enterRule(localContext, 692, PostgreSqlParser.RULE_analyze_option_elem);
        let _la: number;
        try {
            this.state = 6071;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_SKIP_LOCKED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6062;
                _la = this.tokenStream.LA(1);
                if(!(_la === 128 || _la === 547)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6064;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 60 || _la === 96) {
                    {
                    this.state = 6063;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 60 || _la === 96)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6066;
                this.match(PostgreSqlParser.KW_BUFFER_USAGE_LIMIT);
                this.state = 6069;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.PLUS:
                case PostgreSqlParser.MINUS:
                case PostgreSqlParser.Integral:
                case PostgreSqlParser.Numeric:
                    {
                    this.state = 6067;
                    this.numericonly();
                    }
                    break;
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6068;
                    this.sconst();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_verbose(): Opt_verboseContext {
        let localContext = new Opt_verboseContext(this.context, this.state);
        this.enterRule(localContext, 694, PostgreSqlParser.RULE_opt_verbose);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6073;
            this.match(PostgreSqlParser.KW_VERBOSE);
            this.state = 6075;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 60 || _la === 96) {
                {
                this.state = 6074;
                _la = this.tokenStream.LA(1);
                if(!(_la === 60 || _la === 96)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vacuum_relation(): Vacuum_relationContext {
        let localContext = new Vacuum_relationContext(this.context, this.state);
        this.enterRule(localContext, 696, PostgreSqlParser.RULE_vacuum_relation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6077;
            this.table_name();
            this.state = 6079;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 708, this.context) ) {
            case 1:
                {
                this.state = 6078;
                this.opt_column_list();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vacuum_relation_list(): Vacuum_relation_listContext {
        let localContext = new Vacuum_relation_listContext(this.context, this.state);
        this.enterRule(localContext, 698, PostgreSqlParser.RULE_vacuum_relation_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6081;
            this.vacuum_relation();
            this.state = 6086;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6082;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6083;
                this.vacuum_relation();
                }
                }
                this.state = 6088;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainstmt(): ExplainstmtContext {
        let localContext = new ExplainstmtContext(this.context, this.state);
        this.enterRule(localContext, 700, PostgreSqlParser.RULE_explainstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6089;
            this.match(PostgreSqlParser.KW_EXPLAIN);
            this.state = 6100;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 713, this.context) ) {
            case 1:
                {
                this.state = 6090;
                this.explain_option_list();
                }
                break;
            case 2:
                {
                this.state = 6092;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 6091;
                    this.match(PostgreSqlParser.KW_VERBOSE);
                    }
                }

                }
                break;
            case 3:
                {
                this.state = 6098;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 31 || _la === 32) {
                    {
                    this.state = 6094;
                    this.analyze_keyword();
                    this.state = 6096;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 128) {
                        {
                        this.state = 6095;
                        this.opt_verbose();
                        }
                    }

                    }
                }

                }
                break;
            }
            this.state = 6102;
            this.explainablestmt();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainablestmt(): ExplainablestmtContext {
        let localContext = new ExplainablestmtContext(this.context, this.state);
        this.enterRule(localContext, 702, PostgreSqlParser.RULE_explainablestmt);
        try {
            this.state = 6113;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 714, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6104;
                this.selectstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6105;
                this.insertstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6106;
                this.updatestmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6107;
                this.deletestmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6108;
                this.declarecursorstmt();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6109;
                this.createasstmt();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 6110;
                this.creatematviewstmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 6111;
                this.refreshmatviewstmt();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 6112;
                this.executestmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explain_option_list(): Explain_option_listContext {
        let localContext = new Explain_option_listContext(this.context, this.state);
        this.enterRule(localContext, 704, PostgreSqlParser.RULE_explain_option_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6115;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 6116;
            this.vac_analyze_option_list();
            this.state = 6117;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public preparestmt(): PreparestmtContext {
        let localContext = new PreparestmtContext(this.context, this.state);
        this.enterRule(localContext, 706, PostgreSqlParser.RULE_preparestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6119;
            this.match(PostgreSqlParser.KW_PREPARE);
            this.state = 6120;
            this.colid();
            this.state = 6122;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 6121;
                this.prep_type_clause();
                }
            }

            this.state = 6124;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 6125;
            this.preparablestmt();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public prep_type_clause(): Prep_type_clauseContext {
        let localContext = new Prep_type_clauseContext(this.context, this.state);
        this.enterRule(localContext, 708, PostgreSqlParser.RULE_prep_type_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6127;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 6128;
            this.type_name_list();
            this.state = 6129;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public preparablestmt(): PreparablestmtContext {
        let localContext = new PreparablestmtContext(this.context, this.state);
        this.enterRule(localContext, 710, PostgreSqlParser.RULE_preparablestmt);
        try {
            this.state = 6135;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 716, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6131;
                this.selectstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6132;
                this.insertstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6133;
                this.updatestmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6134;
                this.deletestmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public executestmt(): ExecutestmtContext {
        let localContext = new ExecutestmtContext(this.context, this.state);
        this.enterRule(localContext, 712, PostgreSqlParser.RULE_executestmt);
        let _la: number;
        try {
            this.state = 6160;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_EXECUTE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6137;
                this.match(PostgreSqlParser.KW_EXECUTE);
                this.state = 6138;
                this.colid();
                this.state = 6140;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 717, this.context) ) {
                case 1:
                    {
                    this.state = 6139;
                    this.execute_param_clause();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_CREATE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6142;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 6144;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 213 || _la === 254 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 32773) !== 0)) {
                    {
                    this.state = 6143;
                    this.opttemp();
                    }
                }

                this.state = 6146;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 6148;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 719, this.context) ) {
                case 1:
                    {
                    this.state = 6147;
                    this.opt_if_not_exists();
                    }
                    break;
                }
                this.state = 6150;
                this.create_as_target();
                this.state = 6151;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 6152;
                this.match(PostgreSqlParser.KW_EXECUTE);
                this.state = 6153;
                this.colid();
                this.state = 6155;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 720, this.context) ) {
                case 1:
                    {
                    this.state = 6154;
                    this.execute_param_clause();
                    }
                    break;
                }
                this.state = 6158;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 721, this.context) ) {
                case 1:
                    {
                    this.state = 6157;
                    this.opt_with_data();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public execute_param_clause(): Execute_param_clauseContext {
        let localContext = new Execute_param_clauseContext(this.context, this.state);
        this.enterRule(localContext, 714, PostgreSqlParser.RULE_execute_param_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6162;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 6163;
            this.expr_list();
            this.state = 6164;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deallocatestmt(): DeallocatestmtContext {
        let localContext = new DeallocatestmtContext(this.context, this.state);
        this.enterRule(localContext, 716, PostgreSqlParser.RULE_deallocatestmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6166;
            this.match(PostgreSqlParser.KW_DEALLOCATE);
            this.state = 6168;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 723, this.context) ) {
            case 1:
                {
                this.state = 6167;
                this.match(PostgreSqlParser.KW_PREPARE);
                }
                break;
            }
            this.state = 6172;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 6170;
                this.colid();
                }
                break;
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 6171;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertstmt(): InsertstmtContext {
        let localContext = new InsertstmtContext(this.context, this.state);
        this.enterRule(localContext, 718, PostgreSqlParser.RULE_insertstmt);
        let _la: number;
        try {
            localContext = new InsertStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6175;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 6174;
                this.with_clause();
                }
            }

            this.state = 6177;
            this.match(PostgreSqlParser.KW_INSERT);
            this.state = 6178;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 6179;
            this.table_name();
            this.state = 6182;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 6180;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 6181;
                this.colid();
                }
            }

            this.state = 6184;
            this.insert_rest();
            this.state = 6186;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 6185;
                this.opt_on_conflict();
                }
            }

            this.state = 6189;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 6188;
                this.returning_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insert_rest(): Insert_restContext {
        let localContext = new Insert_restContext(this.context, this.state);
        this.enterRule(localContext, 720, PostgreSqlParser.RULE_insert_rest);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6195;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 729, this.context) ) {
            case 1:
                {
                this.state = 6191;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6192;
                this.insert_column_list();
                this.state = 6193;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            this.state = 6200;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 463) {
                {
                this.state = 6197;
                this.match(PostgreSqlParser.KW_OVERRIDING);
                this.state = 6198;
                _la = this.tokenStream.LA(1);
                if(!(_la === 99 || _la === 349)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6199;
                this.match(PostgreSqlParser.KW_VALUE);
                }
            }

            this.state = 6204;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 731, this.context) ) {
            case 1:
                {
                this.state = 6202;
                this.default_values_or_values();
                }
                break;
            case 2:
                {
                this.state = 6203;
                this.selectstmt();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insert_column_list(): Insert_column_listContext {
        let localContext = new Insert_column_listContext(this.context, this.state);
        this.enterRule(localContext, 722, PostgreSqlParser.RULE_insert_column_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6206;
            this.insert_column_item();
            this.state = 6211;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6207;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6208;
                this.insert_column_item();
                }
                }
                this.state = 6213;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insert_column_item(): Insert_column_itemContext {
        let localContext = new Insert_column_itemContext(this.context, this.state);
        this.enterRule(localContext, 724, PostgreSqlParser.RULE_insert_column_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6214;
            this.column_name();
            this.state = 6215;
            this.opt_indirection();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_on_conflict(): Opt_on_conflictContext {
        let localContext = new Opt_on_conflictContext(this.context, this.state);
        this.enterRule(localContext, 726, PostgreSqlParser.RULE_opt_on_conflict);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6217;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 6218;
            this.match(PostgreSqlParser.KW_CONFLICT);
            this.state = 6220;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2 || _la === 80) {
                {
                this.state = 6219;
                this.opt_conf_expr();
                }
            }

            this.state = 6222;
            this.match(PostgreSqlParser.KW_DO);
            this.state = 6230;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_UPDATE:
                {
                this.state = 6223;
                this.match(PostgreSqlParser.KW_UPDATE);
                this.state = 6224;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 6225;
                this.set_clause_list();
                this.state = 6227;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103) {
                    {
                    this.state = 6226;
                    this.where_clause();
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_NOTHING:
                {
                this.state = 6229;
                this.match(PostgreSqlParser.KW_NOTHING);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_conf_expr(): Opt_conf_exprContext {
        let localContext = new Opt_conf_exprContext(this.context, this.state);
        this.enterRule(localContext, 728, PostgreSqlParser.RULE_opt_conf_expr);
        let _la: number;
        try {
            this.state = 6239;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6232;
                this.index_params();
                this.state = 6234;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103) {
                    {
                    this.state = 6233;
                    this.where_clause();
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_ON:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6236;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 6237;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 6238;
                this.colid();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returning_clause(): Returning_clauseContext {
        let localContext = new Returning_clauseContext(this.context, this.state);
        this.enterRule(localContext, 730, PostgreSqlParser.RULE_returning_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6241;
            this.match(PostgreSqlParser.KW_RETURNING);
            this.state = 6242;
            this.target_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deletestmt(): DeletestmtContext {
        let localContext = new DeletestmtContext(this.context, this.state);
        this.enterRule(localContext, 732, PostgreSqlParser.RULE_deletestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6245;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 6244;
                this.with_clause();
                }
            }

            this.state = 6247;
            this.match(PostgreSqlParser.KW_DELETE);
            this.state = 6248;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 6249;
            this.relation_expr_opt_alias();
            this.state = 6252;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 6250;
                this.match(PostgreSqlParser.KW_USING);
                this.state = 6251;
                this.from_list();
                }
            }

            this.state = 6255;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 103) {
                {
                this.state = 6254;
                this.where_or_current_clause();
                }
            }

            this.state = 6258;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 6257;
                this.returning_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockstmt(): LockstmtContext {
        let localContext = new LockstmtContext(this.context, this.state);
        this.enterRule(localContext, 734, PostgreSqlParser.RULE_lockstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6260;
            this.match(PostgreSqlParser.KW_LOCK);
            this.state = 6262;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 92) {
                {
                this.state = 6261;
                this.match(PostgreSqlParser.KW_TABLE);
                }
            }

            this.state = 6264;
            this.relation_expr_list();
            this.state = 6269;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 68) {
                {
                this.state = 6265;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 6266;
                this.lock_type();
                this.state = 6267;
                this.match(PostgreSqlParser.KW_MODE);
                }
            }

            this.state = 6272;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 744, this.context) ) {
            case 1:
                {
                this.state = 6271;
                this.match(PostgreSqlParser.KW_NOWAIT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lock_type(): Lock_typeContext {
        let localContext = new Lock_typeContext(this.context, this.state);
        this.enterRule(localContext, 736, PostgreSqlParser.RULE_lock_type);
        let _la: number;
        try {
            this.state = 6284;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ROW:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6274;
                _la = this.tokenStream.LA(1);
                if(!(_la === 131 || _la === 414)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6275;
                _la = this.tokenStream.LA(1);
                if(!(_la === 201 || _la === 334)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_SHARE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6276;
                this.match(PostgreSqlParser.KW_SHARE);
                this.state = 6281;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_UPDATE:
                    {
                    this.state = 6277;
                    this.match(PostgreSqlParser.KW_UPDATE);
                    this.state = 6278;
                    this.match(PostgreSqlParser.KW_EXCLUSIVE);
                    }
                    break;
                case PostgreSqlParser.KW_ROW:
                    {
                    this.state = 6279;
                    this.match(PostgreSqlParser.KW_ROW);
                    this.state = 6280;
                    this.match(PostgreSqlParser.KW_EXCLUSIVE);
                    }
                    break;
                case PostgreSqlParser.KW_MODE:
                    break;
                default:
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_EXCLUSIVE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6283;
                this.match(PostgreSqlParser.KW_EXCLUSIVE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_nowait_or_skip(): Opt_nowait_or_skipContext {
        let localContext = new Opt_nowait_or_skipContext(this.context, this.state);
        this.enterRule(localContext, 738, PostgreSqlParser.RULE_opt_nowait_or_skip);
        try {
            this.state = 6289;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_NOWAIT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6286;
                this.match(PostgreSqlParser.KW_NOWAIT);
                }
                break;
            case PostgreSqlParser.KW_SKIP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6287;
                this.match(PostgreSqlParser.KW_SKIP);
                this.state = 6288;
                this.match(PostgreSqlParser.KW_LOCKED);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updatestmt(): UpdatestmtContext {
        let localContext = new UpdatestmtContext(this.context, this.state);
        this.enterRule(localContext, 740, PostgreSqlParser.RULE_updatestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6292;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 6291;
                this.with_clause();
                }
            }

            this.state = 6294;
            this.match(PostgreSqlParser.KW_UPDATE);
            this.state = 6295;
            this.relation_expr_opt_alias();
            this.state = 6296;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 6297;
            this.set_clause_list();
            this.state = 6299;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 64) {
                {
                this.state = 6298;
                this.from_clause();
                }
            }

            this.state = 6302;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 103) {
                {
                this.state = 6301;
                this.where_or_current_clause();
                }
            }

            this.state = 6305;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 6304;
                this.returning_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_clause_list(): Set_clause_listContext {
        let localContext = new Set_clause_listContext(this.context, this.state);
        this.enterRule(localContext, 742, PostgreSqlParser.RULE_set_clause_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6307;
            this.set_clause();
            this.state = 6312;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6308;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6309;
                this.set_clause();
                }
                }
                this.state = 6314;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_clause(): Set_clauseContext {
        let localContext = new Set_clauseContext(this.context, this.state);
        this.enterRule(localContext, 744, PostgreSqlParser.RULE_set_clause);
        try {
            this.state = 6333;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 755, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6315;
                this.insert_column_item();
                this.state = 6316;
                this.match(PostgreSqlParser.EQUAL);
                this.state = 6317;
                this.expression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6319;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6320;
                this.insert_column_list();
                this.state = 6321;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 6322;
                this.match(PostgreSqlParser.EQUAL);
                this.state = 6331;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 754, this.context) ) {
                case 1:
                    {
                    this.state = 6324;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 753, this.context) ) {
                    case 1:
                        {
                        this.state = 6323;
                        this.match(PostgreSqlParser.KW_ROW);
                        }
                        break;
                    }
                    this.state = 6326;
                    this.expression();
                    }
                    break;
                case 2:
                    {
                    this.state = 6327;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 6328;
                    this.select_clause();
                    this.state = 6329;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public declarecursorstmt(): DeclarecursorstmtContext {
        let localContext = new DeclarecursorstmtContext(this.context, this.state);
        this.enterRule(localContext, 746, PostgreSqlParser.RULE_declarecursorstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6335;
            this.match(PostgreSqlParser.KW_DECLARE);
            this.state = 6336;
            this.colid();
            this.state = 6337;
            this.cursor_options();
            this.state = 6338;
            this.match(PostgreSqlParser.KW_CURSOR);
            this.state = 6341;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105 || _la === 379) {
                {
                this.state = 6339;
                _la = this.tokenStream.LA(1);
                if(!(_la === 105 || _la === 379)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6340;
                this.match(PostgreSqlParser.KW_HOLD);
                }
            }

            this.state = 6343;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 6344;
            this.selectstmt();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cursor_options(): Cursor_optionsContext {
        let localContext = new Cursor_optionsContext(this.context, this.state);
        this.enterRule(localContext, 748, PostgreSqlParser.RULE_cursor_options);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6351;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 107 || _la === 240 || _la === 269 || _la === 324) {
                {
                this.state = 6349;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_SCROLL:
                    {
                    this.state = 6346;
                    this.opt_scrollable();
                    }
                    break;
                case PostgreSqlParser.KW_BINARY:
                    {
                    this.state = 6347;
                    this.match(PostgreSqlParser.KW_BINARY);
                    }
                    break;
                case PostgreSqlParser.KW_INSENSITIVE:
                    {
                    this.state = 6348;
                    this.match(PostgreSqlParser.KW_INSENSITIVE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                this.state = 6353;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectstmt(): SelectstmtContext {
        let localContext = new SelectstmtContext(this.context, this.state);
        this.enterRule(localContext, 750, PostgreSqlParser.RULE_selectstmt);
        try {
            this.state = 6356;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 759, this.context) ) {
            case 1:
                localContext = new SelectStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6354;
                this.select_no_parens();
                }
                break;
            case 2:
                localContext = new SelectStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6355;
                this.select_with_parens();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_with_parens(): Select_with_parensContext {
        let localContext = new Select_with_parensContext(this.context, this.state);
        this.enterRule(localContext, 752, PostgreSqlParser.RULE_select_with_parens);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6358;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 6361;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 760, this.context) ) {
            case 1:
                {
                this.state = 6359;
                this.select_no_parens();
                }
                break;
            case 2:
                {
                this.state = 6360;
                this.select_with_parens();
                }
                break;
            }
            this.state = 6363;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_no_parens(): Select_no_parensContext {
        let localContext = new Select_no_parensContext(this.context, this.state);
        this.enterRule(localContext, 754, PostgreSqlParser.RULE_select_no_parens);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6366;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 6365;
                this.with_clause();
                }
            }

            this.state = 6368;
            this.select_clause();
            this.state = 6370;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 83) {
                {
                this.state = 6369;
                this.sort_clause();
                }
            }

            this.state = 6380;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 765, this.context) ) {
            case 1:
                {
                this.state = 6372;
                this.for_locking_clause();
                this.state = 6374;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 763, this.context) ) {
                case 1:
                    {
                    this.state = 6373;
                    this.select_limit();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 6376;
                this.select_limit();
                this.state = 6378;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 6377;
                    this.for_locking_clause();
                    }
                }

                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_clause(): Select_clauseContext {
        let localContext = new Select_clauseContext(this.context, this.state);
        this.enterRule(localContext, 756, PostgreSqlParser.RULE_select_clause);
        try {
            this.state = 6384;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 766, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6382;
                this.simple_select();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6383;
                this.select_with_parens();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simple_select(): Simple_selectContext {
        let localContext = new Simple_selectContext(this.context, this.state);
        this.enterRule(localContext, 758, PostgreSqlParser.RULE_simple_select);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6408;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SELECT:
                {
                this.state = 6386;
                this.match(PostgreSqlParser.KW_SELECT);
                this.state = 6396;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 770, this.context) ) {
                case 1:
                    {
                    this.state = 6388;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 767, this.context) ) {
                    case 1:
                        {
                        this.state = 6387;
                        this.match(PostgreSqlParser.KW_ALL);
                        }
                        break;
                    }
                    this.state = 6391;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 768, this.context) ) {
                    case 1:
                        {
                        this.state = 6390;
                        this.into_clause();
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 6394;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 769, this.context) ) {
                    case 1:
                        {
                        this.state = 6393;
                        this.distinct_clause();
                        }
                        break;
                    }
                    }
                    break;
                }
                this.state = 6398;
                this.sql_expression();
                }
                break;
            case PostgreSqlParser.KW_VALUES:
                {
                this.state = 6399;
                this.values_clause();
                }
                break;
            case PostgreSqlParser.KW_TABLE:
                {
                this.state = 6400;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 6401;
                this.relation_expr();
                }
                break;
            case PostgreSqlParser.OPEN_PAREN:
                {
                this.state = 6402;
                this.select_with_parens();
                this.state = 6403;
                this.set_operator_with_all_or_distinct();
                this.state = 6406;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 771, this.context) ) {
                case 1:
                    {
                    this.state = 6404;
                    this.simple_select();
                    }
                    break;
                case 2:
                    {
                    this.state = 6405;
                    this.select_with_parens();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 6417;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 774, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 6410;
                    this.set_operator_with_all_or_distinct();
                    this.state = 6413;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 773, this.context) ) {
                    case 1:
                        {
                        this.state = 6411;
                        this.simple_select();
                        }
                        break;
                    case 2:
                        {
                        this.state = 6412;
                        this.select_with_parens();
                        }
                        break;
                    }
                    }
                    }
                }
                this.state = 6419;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 774, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_operator_with_all_or_distinct(): Set_operator_with_all_or_distinctContext {
        let localContext = new Set_operator_with_all_or_distinctContext(this.context, this.state);
        this.enterRule(localContext, 760, PostgreSqlParser.RULE_set_operator_with_all_or_distinct);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6420;
            _la = this.tokenStream.LA(1);
            if(!(_la === 59 || _la === 70 || _la === 97)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6422;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30 || _la === 56) {
                {
                this.state = 6421;
                this.all_or_distinct();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_clause(): With_clauseContext {
        let localContext = new With_clauseContext(this.context, this.state);
        this.enterRule(localContext, 762, PostgreSqlParser.RULE_with_clause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6424;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 6426;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 776, this.context) ) {
            case 1:
                {
                this.state = 6425;
                this.match(PostgreSqlParser.KW_RECURSIVE);
                }
                break;
            }
            {
            this.state = 6428;
            this.common_table_expr();
            this.state = 6433;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 777, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 6429;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6430;
                    this.common_table_expr();
                    }
                    }
                }
                this.state = 6435;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 777, this.context);
            }
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public common_table_expr(): Common_table_exprContext {
        let localContext = new Common_table_exprContext(this.context, this.state);
        this.enterRule(localContext, 764, PostgreSqlParser.RULE_common_table_expr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6436;
            this.colid();
            this.state = 6438;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 6437;
                this.opt_column_list();
                }
            }

            this.state = 6440;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 6445;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 77 || _la === 259) {
                {
                this.state = 6442;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6441;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6444;
                this.match(PostgreSqlParser.KW_MATERIALIZED);
                }
            }

            this.state = 6447;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 6448;
            this.preparablestmt();
            this.state = 6449;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            this.state = 6451;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 781, this.context) ) {
            case 1:
                {
                this.state = 6450;
                this.search_cluase();
                }
                break;
            }
            this.state = 6454;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 782, this.context) ) {
            case 1:
                {
                this.state = 6453;
                this.cycle_cluase();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public search_cluase(): Search_cluaseContext {
        let localContext = new Search_cluaseContext(this.context, this.state);
        this.enterRule(localContext, 766, PostgreSqlParser.RULE_search_cluase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6456;
            this.match(PostgreSqlParser.KW_SEARCH);
            this.state = 6457;
            _la = this.tokenStream.LA(1);
            if(!(_la === 527 || _la === 528)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6458;
            this.match(PostgreSqlParser.KW_FIRST);
            this.state = 6459;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 6460;
            this.column_list();
            this.state = 6461;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 6462;
            this.column_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cycle_cluase(): Cycle_cluaseContext {
        let localContext = new Cycle_cluaseContext(this.context, this.state);
        this.enterRule(localContext, 768, PostgreSqlParser.RULE_cycle_cluase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6464;
            this.match(PostgreSqlParser.KW_CYCLE);
            this.state = 6465;
            this.column_list();
            this.state = 6466;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 6467;
            this.column_name();
            this.state = 6473;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 94) {
                {
                this.state = 6468;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 6469;
                this.colid();
                this.state = 6470;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 6471;
                this.colid();
                }
            }

            this.state = 6475;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 6476;
            this.column_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public into_clause(): Into_clauseContext {
        let localContext = new Into_clauseContext(this.context, this.state);
        this.enterRule(localContext, 770, PostgreSqlParser.RULE_into_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6478;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 6484;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 785, this.context) ) {
            case 1:
                {
                this.state = 6480;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 784, this.context) ) {
                case 1:
                    {
                    this.state = 6479;
                    this.match(PostgreSqlParser.KW_STRICT);
                    }
                    break;
                }
                this.state = 6482;
                this.opttempTableName();
                }
                break;
            case 2:
                {
                this.state = 6483;
                this.expr_list();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opttempTableName(): OpttempTableNameContext {
        let localContext = new OpttempTableNameContext(this.context, this.state);
        this.enterRule(localContext, 772, PostgreSqlParser.RULE_opttempTableName);
        let _la: number;
        try {
            this.state = 6501;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 790, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6487;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 213 || _la === 254) {
                    {
                    this.state = 6486;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 213 || _la === 254)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 6489;
                _la = this.tokenStream.LA(1);
                if(!(_la === 352 || _la === 354)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6491;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 92) {
                    {
                    this.state = 6490;
                    this.match(PostgreSqlParser.KW_TABLE);
                    }
                }

                this.state = 6493;
                this.table_name_create();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6495;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 788, this.context) ) {
                case 1:
                    {
                    this.state = 6494;
                    this.match(PostgreSqlParser.KW_UNLOGGED);
                    }
                    break;
                }
                this.state = 6498;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 92) {
                    {
                    this.state = 6497;
                    this.match(PostgreSqlParser.KW_TABLE);
                    }
                }

                this.state = 6500;
                this.table_name_create();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public all_or_distinct(): All_or_distinctContext {
        let localContext = new All_or_distinctContext(this.context, this.state);
        this.enterRule(localContext, 774, PostgreSqlParser.RULE_all_or_distinct);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6503;
            _la = this.tokenStream.LA(1);
            if(!(_la === 30 || _la === 56)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public distinct_clause(): Distinct_clauseContext {
        let localContext = new Distinct_clauseContext(this.context, this.state);
        this.enterRule(localContext, 776, PostgreSqlParser.RULE_distinct_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6505;
            this.match(PostgreSqlParser.KW_DISTINCT);
            this.state = 6508;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 791, this.context) ) {
            case 1:
                {
                this.state = 6506;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 6507;
                this.execute_param_clause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sort_clause(): Sort_clauseContext {
        let localContext = new Sort_clauseContext(this.context, this.state);
        this.enterRule(localContext, 778, PostgreSqlParser.RULE_sort_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6510;
            this.match(PostgreSqlParser.KW_ORDER);
            this.state = 6511;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 6512;
            this.sortby();
            this.state = 6517;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6513;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6514;
                this.sortby();
                }
                }
                this.state = 6519;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortby(): SortbyContext {
        let localContext = new SortbyContext(this.context, this.state);
        this.enterRule(localContext, 780, PostgreSqlParser.RULE_sortby);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6520;
            this.column_expr_noparen();
            this.state = 6524;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 793, this.context) ) {
            case 1:
                {
                this.state = 6521;
                this.match(PostgreSqlParser.KW_USING);
                this.state = 6522;
                this.qual_all_op();
                }
                break;
            case 2:
                {
                this.state = 6523;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 55)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 6527;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 794, this.context) ) {
            case 1:
                {
                this.state = 6526;
                this.opt_nulls_order();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_limit(): Select_limitContext {
        let localContext = new Select_limitContext(this.context, this.state);
        this.enterRule(localContext, 782, PostgreSqlParser.RULE_select_limit);
        let _la: number;
        try {
            this.state = 6540;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_OFFSET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6529;
                this.offset_clause();
                this.state = 6531;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 795, this.context) ) {
                case 1:
                    {
                    this.state = 6530;
                    this.fetch_clause();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_LIMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6535;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_LIMIT:
                    {
                    this.state = 6533;
                    this.limit_clause();
                    }
                    break;
                case PostgreSqlParser.KW_FETCH:
                    {
                    this.state = 6534;
                    this.fetch_clause();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 6538;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 79) {
                    {
                    this.state = 6537;
                    this.offset_clause();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limit_clause(): Limit_clauseContext {
        let localContext = new Limit_clauseContext(this.context, this.state);
        this.enterRule(localContext, 784, PostgreSqlParser.RULE_limit_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6542;
            this.match(PostgreSqlParser.KW_LIMIT);
            this.state = 6545;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.PARAM:
            case PostgreSqlParser.Operator:
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_CASE:
            case PostgreSqlParser.KW_CAST:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_CURRENT_CATALOG:
            case PostgreSqlParser.KW_CURRENT_DATE:
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_TIME:
            case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_LOCALTIME:
            case PostgreSqlParser.KW_LOCALTIMESTAMP:
            case PostgreSqlParser.KW_NOT:
            case PostgreSqlParser.KW_NULL:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_UNIQUE:
            case PostgreSqlParser.KW_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.BinaryStringConstant:
            case PostgreSqlParser.HexadecimalStringConstant:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 6543;
                this.expression();
                }
                break;
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 6544;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 6549;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6) {
                {
                this.state = 6547;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6548;
                this.expression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fetch_clause(): Fetch_clauseContext {
        let localContext = new Fetch_clauseContext(this.context, this.state);
        this.enterRule(localContext, 786, PostgreSqlParser.RULE_fetch_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6551;
            this.match(PostgreSqlParser.KW_FETCH);
            this.state = 6552;
            _la = this.tokenStream.LA(1);
            if(!(_la === 207 || _la === 268)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6566;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 803, this.context) ) {
            case 1:
                {
                this.state = 6553;
                this.select_fetch_first_value();
                this.state = 6554;
                this.row_or_rows();
                this.state = 6558;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ONLY:
                    {
                    this.state = 6555;
                    this.match(PostgreSqlParser.KW_ONLY);
                    }
                    break;
                case PostgreSqlParser.KW_WITH:
                    {
                    this.state = 6556;
                    this.match(PostgreSqlParser.KW_WITH);
                    this.state = 6557;
                    this.match(PostgreSqlParser.KW_TIES);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                {
                this.state = 6560;
                this.row_or_rows();
                this.state = 6564;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ONLY:
                    {
                    this.state = 6561;
                    this.match(PostgreSqlParser.KW_ONLY);
                    }
                    break;
                case PostgreSqlParser.KW_WITH:
                    {
                    this.state = 6562;
                    this.match(PostgreSqlParser.KW_WITH);
                    this.state = 6563;
                    this.match(PostgreSqlParser.KW_TIES);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public offset_clause(): Offset_clauseContext {
        let localContext = new Offset_clauseContext(this.context, this.state);
        this.enterRule(localContext, 788, PostgreSqlParser.RULE_offset_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6568;
            this.match(PostgreSqlParser.KW_OFFSET);
            this.state = 6573;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 804, this.context) ) {
            case 1:
                {
                this.state = 6569;
                this.select_fetch_first_value();
                this.state = 6570;
                this.row_or_rows();
                }
                break;
            case 2:
                {
                this.state = 6572;
                this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_fetch_first_value(): Select_fetch_first_valueContext {
        let localContext = new Select_fetch_first_valueContext(this.context, this.state);
        this.enterRule(localContext, 790, PostgreSqlParser.RULE_select_fetch_first_value);
        let _la: number;
        try {
            this.state = 6578;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 805, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6575;
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 13)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6576;
                _la = this.tokenStream.LA(1);
                if(!(_la === 571 || _la === 573)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6577;
                this.primaryExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_or_rows(): Row_or_rowsContext {
        let localContext = new Row_or_rowsContext(this.context, this.state);
        this.enterRule(localContext, 792, PostgreSqlParser.RULE_row_or_rows);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6580;
            _la = this.tokenStream.LA(1);
            if(!(_la === 320 || _la === 414)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public group_clause(): Group_clauseContext {
        let localContext = new Group_clauseContext(this.context, this.state);
        this.enterRule(localContext, 794, PostgreSqlParser.RULE_group_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6582;
            this.match(PostgreSqlParser.KW_GROUP);
            this.state = 6583;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 6585;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 806, this.context) ) {
            case 1:
                {
                this.state = 6584;
                this.all_or_distinct();
                }
                break;
            }
            this.state = 6587;
            this.group_by_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public group_by_list(): Group_by_listContext {
        let localContext = new Group_by_listContext(this.context, this.state);
        this.enterRule(localContext, 796, PostgreSqlParser.RULE_group_by_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6589;
            this.group_by_item();
            this.state = 6594;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 807, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 6590;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6591;
                    this.group_by_item();
                    }
                    }
                }
                this.state = 6596;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 807, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public group_by_item(): Group_by_itemContext {
        let localContext = new Group_by_itemContext(this.context, this.state);
        this.enterRule(localContext, 798, PostgreSqlParser.RULE_group_by_item);
        let _la: number;
        try {
            this.state = 6612;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 809, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6597;
                this.column_expr_noparen();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6598;
                this.empty_grouping_set();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6600;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 468 || _la === 469) {
                    {
                    this.state = 6599;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 468 || _la === 469)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 6602;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6603;
                this.column_expr_list_noparen();
                this.state = 6604;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6606;
                this.match(PostgreSqlParser.KW_GROUPING);
                this.state = 6607;
                this.match(PostgreSqlParser.KW_SETS);
                this.state = 6608;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6609;
                this.group_by_list();
                this.state = 6610;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public empty_grouping_set(): Empty_grouping_setContext {
        let localContext = new Empty_grouping_setContext(this.context, this.state);
        this.enterRule(localContext, 800, PostgreSqlParser.RULE_empty_grouping_set);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6614;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 6615;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public having_clause(): Having_clauseContext {
        let localContext = new Having_clauseContext(this.context, this.state);
        this.enterRule(localContext, 802, PostgreSqlParser.RULE_having_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6617;
            this.match(PostgreSqlParser.KW_HAVING);
            this.state = 6618;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public for_locking_clause(): For_locking_clauseContext {
        let localContext = new For_locking_clauseContext(this.context, this.state);
        this.enterRule(localContext, 804, PostgreSqlParser.RULE_for_locking_clause);
        let _la: number;
        try {
            this.state = 6628;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 811, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6621;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 6620;
                    this.for_locking_item();
                    }
                    }
                    this.state = 6623;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 62);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6625;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 6626;
                this.match(PostgreSqlParser.KW_READ);
                this.state = 6627;
                this.match(PostgreSqlParser.KW_ONLY);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public for_locking_item(): For_locking_itemContext {
        let localContext = new For_locking_itemContext(this.context, this.state);
        this.enterRule(localContext, 806, PostgreSqlParser.RULE_for_locking_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6630;
            this.for_locking_strength();
            this.state = 6633;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 812, this.context) ) {
            case 1:
                {
                this.state = 6631;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 6632;
                this.qualified_name_list();
                }
                break;
            }
            this.state = 6636;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 813, this.context) ) {
            case 1:
                {
                this.state = 6635;
                this.opt_nowait_or_skip();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public for_locking_strength(): For_locking_strengthContext {
        let localContext = new For_locking_strengthContext(this.context, this.state);
        this.enterRule(localContext, 808, PostgreSqlParser.RULE_for_locking_strength);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6638;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 6648;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_UPDATE:
                {
                this.state = 6641;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 6639;
                    this.match(PostgreSqlParser.KW_NO);
                    this.state = 6640;
                    this.match(PostgreSqlParser.KW_KEY);
                    }
                }

                this.state = 6643;
                this.match(PostgreSqlParser.KW_UPDATE);
                }
                break;
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_SHARE:
                {
                this.state = 6645;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 245) {
                    {
                    this.state = 6644;
                    this.match(PostgreSqlParser.KW_KEY);
                    }
                }

                this.state = 6647;
                this.match(PostgreSqlParser.KW_SHARE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values_clause(): Values_clauseContext {
        let localContext = new Values_clauseContext(this.context, this.state);
        this.enterRule(localContext, 810, PostgreSqlParser.RULE_values_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6650;
            this.match(PostgreSqlParser.KW_VALUES);
            this.state = 6651;
            this.execute_param_clause();
            this.state = 6656;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6652;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6653;
                this.execute_param_clause();
                }
                }
                this.state = 6658;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public from_clause(): From_clauseContext {
        let localContext = new From_clauseContext(this.context, this.state);
        this.enterRule(localContext, 812, PostgreSqlParser.RULE_from_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6659;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 6660;
            this.from_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public from_list(): From_listContext {
        let localContext = new From_listContext(this.context, this.state);
        this.enterRule(localContext, 814, PostgreSqlParser.RULE_from_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6662;
            this.table_ref();
            this.state = 6667;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 818, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 6663;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6664;
                    this.table_ref();
                    }
                    }
                }
                this.state = 6669;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 818, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_ref(): Table_refContext {
        let localContext = new Table_refContext(this.context, this.state);
        this.enterRule(localContext, 816, PostgreSqlParser.RULE_table_ref);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6721;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 831, this.context) ) {
            case 1:
                {
                this.state = 6672;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 819, this.context) ) {
                case 1:
                    {
                    this.state = 6670;
                    this.relation_expr();
                    }
                    break;
                case 2:
                    {
                    this.state = 6671;
                    this.view_relation_expr();
                    }
                    break;
                }
                this.state = 6675;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 820, this.context) ) {
                case 1:
                    {
                    this.state = 6674;
                    this.alias_clause();
                    }
                    break;
                }
                this.state = 6678;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 472) {
                    {
                    this.state = 6677;
                    this.tablesample_clause();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 6681;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 72) {
                    {
                    this.state = 6680;
                    this.match(PostgreSqlParser.KW_LATERAL);
                    }
                }

                this.state = 6695;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 826, this.context) ) {
                case 1:
                    {
                    this.state = 6683;
                    this.xmltable();
                    this.state = 6685;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 823, this.context) ) {
                    case 1:
                        {
                        this.state = 6684;
                        this.alias_clause();
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 6687;
                    this.func_table();
                    this.state = 6689;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 824, this.context) ) {
                    case 1:
                        {
                        this.state = 6688;
                        this.func_alias_clause();
                        }
                        break;
                    }
                    }
                    break;
                case 3:
                    {
                    this.state = 6691;
                    this.select_with_parens();
                    this.state = 6693;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 825, this.context) ) {
                    case 1:
                        {
                        this.state = 6692;
                        this.alias_clause();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case 3:
                {
                this.state = 6697;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6698;
                this.table_ref();
                this.state = 6715;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_CROSS:
                    {
                    this.state = 6699;
                    this.match(PostgreSqlParser.KW_CROSS);
                    this.state = 6700;
                    this.match(PostgreSqlParser.KW_JOIN);
                    this.state = 6701;
                    this.table_ref();
                    }
                    break;
                case PostgreSqlParser.KW_NATURAL:
                    {
                    this.state = 6702;
                    this.match(PostgreSqlParser.KW_NATURAL);
                    this.state = 6704;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
                        {
                        this.state = 6703;
                        this.join_type();
                        }
                    }

                    this.state = 6706;
                    this.match(PostgreSqlParser.KW_JOIN);
                    this.state = 6707;
                    this.table_ref();
                    }
                    break;
                case PostgreSqlParser.KW_FULL:
                case PostgreSqlParser.KW_INNER:
                case PostgreSqlParser.KW_JOIN:
                case PostgreSqlParser.KW_LEFT:
                case PostgreSqlParser.KW_RIGHT:
                    {
                    this.state = 6709;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
                        {
                        this.state = 6708;
                        this.join_type();
                        }
                    }

                    this.state = 6711;
                    this.match(PostgreSqlParser.KW_JOIN);
                    this.state = 6712;
                    this.table_ref();
                    this.state = 6713;
                    this.join_qual();
                    }
                    break;
                case PostgreSqlParser.CLOSE_PAREN:
                    break;
                default:
                    break;
                }
                this.state = 6717;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 6719;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 830, this.context) ) {
                case 1:
                    {
                    this.state = 6718;
                    this.alias_clause();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 6741;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 835, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 6739;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_CROSS:
                        {
                        this.state = 6723;
                        this.match(PostgreSqlParser.KW_CROSS);
                        this.state = 6724;
                        this.match(PostgreSqlParser.KW_JOIN);
                        this.state = 6725;
                        this.table_ref();
                        }
                        break;
                    case PostgreSqlParser.KW_NATURAL:
                        {
                        this.state = 6726;
                        this.match(PostgreSqlParser.KW_NATURAL);
                        this.state = 6728;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
                            {
                            this.state = 6727;
                            this.join_type();
                            }
                        }

                        this.state = 6730;
                        this.match(PostgreSqlParser.KW_JOIN);
                        this.state = 6731;
                        this.table_ref();
                        }
                        break;
                    case PostgreSqlParser.KW_FULL:
                    case PostgreSqlParser.KW_INNER:
                    case PostgreSqlParser.KW_JOIN:
                    case PostgreSqlParser.KW_LEFT:
                    case PostgreSqlParser.KW_RIGHT:
                        {
                        this.state = 6733;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
                            {
                            this.state = 6732;
                            this.join_type();
                            }
                        }

                        this.state = 6735;
                        this.match(PostgreSqlParser.KW_JOIN);
                        this.state = 6736;
                        this.table_ref();
                        this.state = 6737;
                        this.join_qual();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }
                this.state = 6743;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 835, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alias_clause(): Alias_clauseContext {
        let localContext = new Alias_clauseContext(this.context, this.state);
        this.enterRule(localContext, 818, PostgreSqlParser.RULE_alias_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6745;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 6744;
                this.match(PostgreSqlParser.KW_AS);
                }
            }

            this.state = 6747;
            this.colid();
            this.state = 6752;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 837, this.context) ) {
            case 1:
                {
                this.state = 6748;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6749;
                this.name_list();
                this.state = 6750;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_alias_clause(): Func_alias_clauseContext {
        let localContext = new Func_alias_clauseContext(this.context, this.state);
        this.enterRule(localContext, 820, PostgreSqlParser.RULE_func_alias_clause);
        let _la: number;
        try {
            this.state = 6766;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 840, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6754;
                this.alias_clause();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6760;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_AS:
                    {
                    this.state = 6755;
                    this.match(PostgreSqlParser.KW_AS);
                    this.state = 6757;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 1572823) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                        {
                        this.state = 6756;
                        this.colid();
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.KW_AND:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_COLLATE:
                case PostgreSqlParser.KW_CONSTRAINT:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_DO:
                case PostgreSqlParser.KW_FETCH:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6759;
                    this.colid();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 6762;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6763;
                this.tablefuncelementlist();
                this.state = 6764;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public join_type(): Join_typeContext {
        let localContext = new Join_typeContext(this.context, this.state);
        this.enterRule(localContext, 822, PostgreSqlParser.RULE_join_type);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6768;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 8261) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6770;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 123) {
                {
                this.state = 6769;
                this.match(PostgreSqlParser.KW_OUTER);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public join_qual(): Join_qualContext {
        let localContext = new Join_qualContext(this.context, this.state);
        this.enterRule(localContext, 824, PostgreSqlParser.RULE_join_qual);
        try {
            this.state = 6776;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_USING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6772;
                this.match(PostgreSqlParser.KW_USING);
                this.state = 6773;
                this.opt_column_list();
                }
                break;
            case PostgreSqlParser.KW_ON:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6774;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 6775;
                this.expression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relation_expr(): Relation_exprContext {
        let localContext = new Relation_exprContext(this.context, this.state);
        this.enterRule(localContext, 826, PostgreSqlParser.RULE_relation_expr);
        try {
            this.state = 6793;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 845, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6778;
                this.truncate_table();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6779;
                this.match(PostgreSqlParser.KW_ONLY);
                this.state = 6785;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_AND:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_COLLATE:
                case PostgreSqlParser.KW_CONSTRAINT:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_DO:
                case PostgreSqlParser.KW_FETCH:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6780;
                    this.table_name();
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 6781;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 6782;
                    this.table_name();
                    this.state = 6783;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6787;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 6788;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 6791;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_AND:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_COLLATE:
                case PostgreSqlParser.KW_CONSTRAINT:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_DO:
                case PostgreSqlParser.KW_FETCH:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6789;
                    this.schema_name();
                    }
                    break;
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                    {
                    this.state = 6790;
                    this.match(PostgreSqlParser.KW_CURRENT_SCHEMA);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public view_relation_expr(): View_relation_exprContext {
        let localContext = new View_relation_exprContext(this.context, this.state);
        this.enterRule(localContext, 828, PostgreSqlParser.RULE_view_relation_expr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6796;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 6795;
                this.match(PostgreSqlParser.KW_ONLY);
                }
            }

            this.state = 6798;
            this.view_name();
            this.state = 6800;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 847, this.context) ) {
            case 1:
                {
                this.state = 6799;
                this.match(PostgreSqlParser.STAR);
                }
                break;
            }
            this.state = 6803;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 848, this.context) ) {
            case 1:
                {
                this.state = 6802;
                this.column_list();
                }
                break;
            }
            this.state = 6806;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 849, this.context) ) {
            case 1:
                {
                this.state = 6805;
                this.where_clause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public publication_relation_expr(): Publication_relation_exprContext {
        let localContext = new Publication_relation_exprContext(this.context, this.state);
        this.enterRule(localContext, 830, PostgreSqlParser.RULE_publication_relation_expr);
        let _la: number;
        try {
            this.state = 6832;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 854, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6808;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 6809;
                this.truncate_table();
                this.state = 6811;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 850, this.context) ) {
                case 1:
                    {
                    this.state = 6810;
                    this.opt_column_list();
                    }
                    break;
                }
                this.state = 6814;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103) {
                    {
                    this.state = 6813;
                    this.where_clause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6816;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 6817;
                this.match(PostgreSqlParser.KW_ONLY);
                this.state = 6823;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_AND:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_COLLATE:
                case PostgreSqlParser.KW_CONSTRAINT:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_DO:
                case PostgreSqlParser.KW_FETCH:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6818;
                    this.table_name();
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 6819;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 6820;
                    this.table_name();
                    this.state = 6821;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6825;
                this.match(PostgreSqlParser.KW_TABLES);
                this.state = 6826;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 6827;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 6830;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_AND:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_COLLATE:
                case PostgreSqlParser.KW_CONSTRAINT:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_DO:
                case PostgreSqlParser.KW_FETCH:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6828;
                    this.schema_name();
                    }
                    break;
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                    {
                    this.state = 6829;
                    this.match(PostgreSqlParser.KW_CURRENT_SCHEMA);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relation_expr_list(): Relation_expr_listContext {
        let localContext = new Relation_expr_listContext(this.context, this.state);
        this.enterRule(localContext, 832, PostgreSqlParser.RULE_relation_expr_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6834;
            this.relation_expr();
            this.state = 6839;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6835;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6836;
                this.relation_expr();
                }
                }
                this.state = 6841;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public publication_relation_expr_list(): Publication_relation_expr_listContext {
        let localContext = new Publication_relation_expr_listContext(this.context, this.state);
        this.enterRule(localContext, 834, PostgreSqlParser.RULE_publication_relation_expr_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6842;
            this.publication_relation_expr();
            this.state = 6847;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6843;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6844;
                this.publication_relation_expr();
                }
                }
                this.state = 6849;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relation_expr_opt_alias(): Relation_expr_opt_aliasContext {
        let localContext = new Relation_expr_opt_aliasContext(this.context, this.state);
        this.enterRule(localContext, 836, PostgreSqlParser.RULE_relation_expr_opt_alias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6850;
            this.relation_expr();
            this.state = 6855;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 858, this.context) ) {
            case 1:
                {
                this.state = 6852;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 36) {
                    {
                    this.state = 6851;
                    this.match(PostgreSqlParser.KW_AS);
                    }
                }

                this.state = 6854;
                this.colid();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablesample_clause(): Tablesample_clauseContext {
        let localContext = new Tablesample_clauseContext(this.context, this.state);
        this.enterRule(localContext, 838, PostgreSqlParser.RULE_tablesample_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6857;
            this.match(PostgreSqlParser.KW_TABLESAMPLE);
            this.state = 6858;
            this.function_name();
            this.state = 6859;
            this.execute_param_clause();
            this.state = 6861;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 859, this.context) ) {
            case 1:
                {
                this.state = 6860;
                this.opt_repeatable_clause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_repeatable_clause(): Opt_repeatable_clauseContext {
        let localContext = new Opt_repeatable_clauseContext(this.context, this.state);
        this.enterRule(localContext, 840, PostgreSqlParser.RULE_opt_repeatable_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6863;
            this.match(PostgreSqlParser.KW_REPEATABLE);
            this.state = 6864;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 6865;
            this.expression();
            this.state = 6866;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_table(): Func_tableContext {
        let localContext = new Func_tableContext(this.context, this.state);
        this.enterRule(localContext, 842, PostgreSqlParser.RULE_func_table);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6875;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 860, this.context) ) {
            case 1:
                {
                this.state = 6868;
                this.func_expr_windowless();
                }
                break;
            case 2:
                {
                {
                this.state = 6869;
                this.match(PostgreSqlParser.KW_ROWS);
                this.state = 6870;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 6871;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6872;
                this.rowsfrom_list();
                this.state = 6873;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                }
                break;
            }
            this.state = 6879;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 861, this.context) ) {
            case 1:
                {
                this.state = 6877;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 6878;
                this.match(PostgreSqlParser.KW_ORDINALITY);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsfrom_item(): Rowsfrom_itemContext {
        let localContext = new Rowsfrom_itemContext(this.context, this.state);
        this.enterRule(localContext, 844, PostgreSqlParser.RULE_rowsfrom_item);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6881;
            this.func_expr_windowless();
            this.state = 6887;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 6882;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 6883;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6884;
                this.tablefuncelementlist();
                this.state = 6885;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsfrom_list(): Rowsfrom_listContext {
        let localContext = new Rowsfrom_listContext(this.context, this.state);
        this.enterRule(localContext, 846, PostgreSqlParser.RULE_rowsfrom_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6889;
            this.rowsfrom_item();
            this.state = 6894;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6890;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6891;
                this.rowsfrom_item();
                }
                }
                this.state = 6896;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public where_clause(): Where_clauseContext {
        let localContext = new Where_clauseContext(this.context, this.state);
        this.enterRule(localContext, 848, PostgreSqlParser.RULE_where_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6897;
            this.match(PostgreSqlParser.KW_WHERE);
            this.state = 6898;
            this.column_expr_noparen();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public where_or_current_clause(): Where_or_current_clauseContext {
        let localContext = new Where_or_current_clauseContext(this.context, this.state);
        this.enterRule(localContext, 850, PostgreSqlParser.RULE_where_or_current_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6900;
            this.match(PostgreSqlParser.KW_WHERE);
            this.state = 6905;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 864, this.context) ) {
            case 1:
                {
                this.state = 6901;
                this.match(PostgreSqlParser.KW_CURRENT);
                this.state = 6902;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 6903;
                this.colid();
                }
                break;
            case 2:
                {
                this.state = 6904;
                this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablefuncelementlist(): TablefuncelementlistContext {
        let localContext = new TablefuncelementlistContext(this.context, this.state);
        this.enterRule(localContext, 852, PostgreSqlParser.RULE_tablefuncelementlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6907;
            this.tablefuncelement();
            this.state = 6912;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6908;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6909;
                this.tablefuncelement();
                }
                }
                this.state = 6914;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablefuncelement(): TablefuncelementContext {
        let localContext = new TablefuncelementContext(this.context, this.state);
        this.enterRule(localContext, 854, PostgreSqlParser.RULE_tablefuncelement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6915;
            this.colid();
            this.state = 6916;
            this.typename();
            this.state = 6918;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 866, this.context) ) {
            case 1:
                {
                this.state = 6917;
                this.opt_collate_clause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmltable(): XmltableContext {
        let localContext = new XmltableContext(this.context, this.state);
        this.enterRule(localContext, 856, PostgreSqlParser.RULE_xmltable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6920;
            this.match(PostgreSqlParser.KW_XMLTABLE);
            this.state = 6921;
            this.match(PostgreSqlParser.OPEN_PAREN);
            {
            this.state = 6928;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 867, this.context) ) {
            case 1:
                {
                this.state = 6922;
                this.match(PostgreSqlParser.KW_XMLNAMESPACES);
                this.state = 6923;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6924;
                this.xml_namespace_list();
                this.state = 6925;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 6926;
                this.match(PostgreSqlParser.COMMA);
                }
                break;
            }
            this.state = 6930;
            this.primaryExpression(0);
            this.state = 6931;
            this.xmlexists_argument();
            this.state = 6932;
            this.match(PostgreSqlParser.KW_COLUMNS);
            this.state = 6933;
            this.xmltable_column_list();
            }
            this.state = 6935;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmltable_column_list(): Xmltable_column_listContext {
        let localContext = new Xmltable_column_listContext(this.context, this.state);
        this.enterRule(localContext, 858, PostgreSqlParser.RULE_xmltable_column_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6937;
            this.xmltable_column_el();
            this.state = 6942;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6938;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6939;
                this.xmltable_column_el();
                }
                }
                this.state = 6944;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmltable_column_el(): Xmltable_column_elContext {
        let localContext = new Xmltable_column_elContext(this.context, this.state);
        this.enterRule(localContext, 860, PostgreSqlParser.RULE_xmltable_column_el);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6945;
            this.colid();
            this.state = 6952;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 6946;
                this.typename();
                this.state = 6948;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || _la === 77 || _la === 78 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 268451969) !== 0) || ((((_la - 153)) & ~0x1F) === 0 && ((1 << (_la - 153)) & 540945) !== 0) || _la === 207 || _la === 210 || ((((_la - 241)) & ~0x1F) === 0 && ((1 << (_la - 241)) & 419430657) !== 0) || ((((_la - 279)) & ~0x1F) === 0 && ((1 << (_la - 279)) & 268451841) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & 1051713) !== 0) || _la === 360 || _la === 433 || _la === 434 || ((((_la - 477)) & ~0x1F) === 0 && ((1 << (_la - 477)) & 3959414785) !== 0) || ((((_la - 509)) & ~0x1F) === 0 && ((1 << (_la - 509)) & 3071) !== 0) || ((((_la - 549)) & ~0x1F) === 0 && ((1 << (_la - 549)) & 100674083) !== 0) || _la === 584) {
                    {
                    this.state = 6947;
                    this.xmltable_column_option_list();
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_FOR:
                {
                this.state = 6950;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 6951;
                this.match(PostgreSqlParser.KW_ORDINALITY);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmltable_column_option_list(): Xmltable_column_option_listContext {
        let localContext = new Xmltable_column_option_listContext(this.context, this.state);
        this.enterRule(localContext, 862, PostgreSqlParser.RULE_xmltable_column_option_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6955;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 6954;
                this.xmltable_column_option_el();
                }
                }
                this.state = 6957;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || _la === 77 || _la === 78 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 268451969) !== 0) || ((((_la - 153)) & ~0x1F) === 0 && ((1 << (_la - 153)) & 540945) !== 0) || _la === 207 || _la === 210 || ((((_la - 241)) & ~0x1F) === 0 && ((1 << (_la - 241)) & 419430657) !== 0) || ((((_la - 279)) & ~0x1F) === 0 && ((1 << (_la - 279)) & 268451841) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & 1051713) !== 0) || _la === 360 || _la === 433 || _la === 434 || ((((_la - 477)) & ~0x1F) === 0 && ((1 << (_la - 477)) & 3959414785) !== 0) || ((((_la - 509)) & ~0x1F) === 0 && ((1 << (_la - 509)) & 3071) !== 0) || ((((_la - 549)) & ~0x1F) === 0 && ((1 << (_la - 549)) & 100674083) !== 0) || _la === 584);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmltable_column_option_el(): Xmltable_column_option_elContext {
        let localContext = new Xmltable_column_option_elContext(this.context, this.state);
        this.enterRule(localContext, 864, PostgreSqlParser.RULE_xmltable_column_option_el);
        let _la: number;
        try {
            this.state = 6968;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6961;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 872, this.context) ) {
                case 1:
                    {
                    this.state = 6959;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                case 2:
                    {
                    this.state = 6960;
                    this.identifier();
                    }
                    break;
                }
                this.state = 6963;
                this.expression();
                }
                break;
            case PostgreSqlParser.KW_NOT:
            case PostgreSqlParser.KW_NULL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6965;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6964;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6967;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_namespace_list(): Xml_namespace_listContext {
        let localContext = new Xml_namespace_listContext(this.context, this.state);
        this.enterRule(localContext, 866, PostgreSqlParser.RULE_xml_namespace_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6970;
            this.xml_namespace_el();
            this.state = 6975;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6971;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6972;
                this.xml_namespace_el();
                }
                }
                this.state = 6977;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_namespace_el(): Xml_namespace_elContext {
        let localContext = new Xml_namespace_elContext(this.context, this.state);
        this.enterRule(localContext, 868, PostgreSqlParser.RULE_xml_namespace_el);
        try {
            this.state = 6984;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 876, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6978;
                this.primaryExpression(0);
                this.state = 6979;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 6980;
                this.collabel();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6982;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 6983;
                this.primaryExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typename(): TypenameContext {
        let localContext = new TypenameContext(this.context, this.state);
        this.enterRule(localContext, 870, PostgreSqlParser.RULE_typename);
        let _la: number;
        try {
            this.state = 7003;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 880, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6987;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 415) {
                    {
                    this.state = 6986;
                    this.match(PostgreSqlParser.KW_SETOF);
                    }
                }

                this.state = 6989;
                this.simpletypename();
                this.state = 6997;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 879, this.context) ) {
                case 1:
                    {
                    this.state = 6990;
                    this.opt_array_bounds();
                    }
                    break;
                case 2:
                    {
                    this.state = 6991;
                    this.match(PostgreSqlParser.KW_ARRAY);
                    this.state = 6995;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 878, this.context) ) {
                    case 1:
                        {
                        this.state = 6992;
                        this.match(PostgreSqlParser.OPEN_BRACKET);
                        this.state = 6993;
                        this.match(PostgreSqlParser.Integral);
                        this.state = 6994;
                        this.match(PostgreSqlParser.CLOSE_BRACKET);
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6999;
                this.qualified_name();
                this.state = 7000;
                this.match(PostgreSqlParser.PERCENT);
                this.state = 7001;
                _la = this.tokenStream.LA(1);
                if(!(_la === 360 || _la === 477)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_array_bounds(): Opt_array_boundsContext {
        let localContext = new Opt_array_boundsContext(this.context, this.state);
        this.enterRule(localContext, 872, PostgreSqlParser.RULE_opt_array_bounds);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7012;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 882, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7005;
                    this.match(PostgreSqlParser.OPEN_BRACKET);
                    this.state = 7007;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 571) {
                        {
                        this.state = 7006;
                        this.match(PostgreSqlParser.Integral);
                        }
                    }

                    this.state = 7009;
                    this.match(PostgreSqlParser.CLOSE_BRACKET);
                    }
                    }
                }
                this.state = 7014;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 882, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpletypename(): SimpletypenameContext {
        let localContext = new SimpletypenameContext(this.context, this.state);
        this.enterRule(localContext, 874, PostgreSqlParser.RULE_simpletypename);
        try {
            this.state = 7024;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 885, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7015;
                this.generictype();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7016;
                this.consttypename();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7017;
                this.match(PostgreSqlParser.KW_INTERVAL);
                this.state = 7022;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 884, this.context) ) {
                case 1:
                    {
                    this.state = 7019;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 883, this.context) ) {
                    case 1:
                        {
                        this.state = 7018;
                        this.opt_interval();
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 7021;
                    this.opt_float();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public consttypename(): ConsttypenameContext {
        let localContext = new ConsttypenameContext(this.context, this.state);
        this.enterRule(localContext, 876, PostgreSqlParser.RULE_consttypename);
        try {
            this.state = 7030;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_SMALLINT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7026;
                this.numeric();
                }
                break;
            case PostgreSqlParser.KW_BIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7027;
                this.bit();
                }
                break;
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_VARCHAR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7028;
                this.character();
                }
                break;
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7029;
                this.constdatetime();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generictype(): GenerictypeContext {
        let localContext = new GenerictypeContext(this.context, this.state);
        this.enterRule(localContext, 878, PostgreSqlParser.RULE_generictype);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7032;
            this.type_function_name();
            this.state = 7034;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 887, this.context) ) {
            case 1:
                {
                this.state = 7033;
                this.attrs();
                }
                break;
            }
            this.state = 7037;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 888, this.context) ) {
            case 1:
                {
                this.state = 7036;
                this.execute_param_clause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numeric(): NumericContext {
        let localContext = new NumericContext(this.context, this.state);
        this.enterRule(localContext, 880, PostgreSqlParser.RULE_numeric);
        let _la: number;
        try {
            this.state = 7055;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_INT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7039;
                this.match(PostgreSqlParser.KW_INT);
                }
                break;
            case PostgreSqlParser.KW_INTEGER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7040;
                this.match(PostgreSqlParser.KW_INTEGER);
                }
                break;
            case PostgreSqlParser.KW_SMALLINT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7041;
                this.match(PostgreSqlParser.KW_SMALLINT);
                }
                break;
            case PostgreSqlParser.KW_BIGINT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7042;
                this.match(PostgreSqlParser.KW_BIGINT);
                }
                break;
            case PostgreSqlParser.KW_REAL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7043;
                this.match(PostgreSqlParser.KW_REAL);
                }
                break;
            case PostgreSqlParser.KW_FLOAT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7044;
                this.match(PostgreSqlParser.KW_FLOAT);
                this.state = 7046;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 889, this.context) ) {
                case 1:
                    {
                    this.state = 7045;
                    this.opt_float();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_DOUBLE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7048;
                this.match(PostgreSqlParser.KW_DOUBLE);
                this.state = 7049;
                this.match(PostgreSqlParser.KW_PRECISION);
                }
                break;
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_NUMERIC:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7050;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 394)) & ~0x1F) === 0 && ((1 << (_la - 394)) & 32771) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7052;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 890, this.context) ) {
                case 1:
                    {
                    this.state = 7051;
                    this.execute_param_clause();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_BOOLEAN:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 7054;
                this.match(PostgreSqlParser.KW_BOOLEAN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_float(): Opt_floatContext {
        let localContext = new Opt_floatContext(this.context, this.state);
        this.enterRule(localContext, 882, PostgreSqlParser.RULE_opt_float);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7057;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 7058;
            this.match(PostgreSqlParser.Integral);
            this.state = 7059;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bit(): BitContext {
        let localContext = new BitContext(this.context, this.state);
        this.enterRule(localContext, 884, PostgreSqlParser.RULE_bit);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7061;
            this.match(PostgreSqlParser.KW_BIT);
            this.state = 7063;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 892, this.context) ) {
            case 1:
                {
                this.state = 7062;
                this.match(PostgreSqlParser.KW_VARYING);
                }
                break;
            }
            this.state = 7066;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 893, this.context) ) {
            case 1:
                {
                this.state = 7065;
                this.execute_param_clause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public character(): CharacterContext {
        let localContext = new CharacterContext(this.context, this.state);
        this.enterRule(localContext, 886, PostgreSqlParser.RULE_character);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7068;
            this.character_c();
            this.state = 7070;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 894, this.context) ) {
            case 1:
                {
                this.state = 7069;
                this.opt_float();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public character_c(): Character_cContext {
        let localContext = new Character_cContext(this.context, this.state);
        this.enterRule(localContext, 888, PostgreSqlParser.RULE_character_c);
        let _la: number;
        try {
            this.state = 7082;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_NCHAR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7072;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 32771) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7074;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 895, this.context) ) {
                case 1:
                    {
                    this.state = 7073;
                    this.match(PostgreSqlParser.KW_VARYING);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_VARCHAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7076;
                this.match(PostgreSqlParser.KW_VARCHAR);
                }
                break;
            case PostgreSqlParser.KW_NATIONAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7077;
                this.match(PostgreSqlParser.KW_NATIONAL);
                this.state = 7078;
                _la = this.tokenStream.LA(1);
                if(!(_la === 391 || _la === 392)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7080;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 896, this.context) ) {
                case 1:
                    {
                    this.state = 7079;
                    this.match(PostgreSqlParser.KW_VARYING);
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constdatetime(): ConstdatetimeContext {
        let localContext = new ConstdatetimeContext(this.context, this.state);
        this.enterRule(localContext, 890, PostgreSqlParser.RULE_constdatetime);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7084;
            _la = this.tokenStream.LA(1);
            if(!(_la === 418 || _la === 419)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 7086;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 898, this.context) ) {
            case 1:
                {
                this.state = 7085;
                this.opt_float();
                }
                break;
            }
            this.state = 7091;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 899, this.context) ) {
            case 1:
                {
                this.state = 7088;
                _la = this.tokenStream.LA(1);
                if(!(_la === 105 || _la === 379)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7089;
                this.match(PostgreSqlParser.KW_TIME);
                this.state = 7090;
                this.match(PostgreSqlParser.KW_ZONE);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_interval(): Opt_intervalContext {
        let localContext = new Opt_intervalContext(this.context, this.state);
        this.enterRule(localContext, 892, PostgreSqlParser.RULE_opt_interval);
        try {
            this.state = 7122;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_MONTH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7093;
                this.match(PostgreSqlParser.KW_MONTH);
                }
                break;
            case PostgreSqlParser.KW_SECOND:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7094;
                this.interval_second();
                }
                break;
            case PostgreSqlParser.KW_YEAR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7095;
                this.match(PostgreSqlParser.KW_YEAR);
                this.state = 7098;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 900, this.context) ) {
                case 1:
                    {
                    this.state = 7096;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 7097;
                    this.match(PostgreSqlParser.KW_MONTH);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_DAY:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7100;
                this.match(PostgreSqlParser.KW_DAY);
                this.state = 7107;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 902, this.context) ) {
                case 1:
                    {
                    this.state = 7101;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 7105;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_HOUR:
                        {
                        this.state = 7102;
                        this.match(PostgreSqlParser.KW_HOUR);
                        }
                        break;
                    case PostgreSqlParser.KW_MINUTE:
                        {
                        this.state = 7103;
                        this.match(PostgreSqlParser.KW_MINUTE);
                        }
                        break;
                    case PostgreSqlParser.KW_SECOND:
                        {
                        this.state = 7104;
                        this.interval_second();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_HOUR:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7109;
                this.match(PostgreSqlParser.KW_HOUR);
                this.state = 7115;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 904, this.context) ) {
                case 1:
                    {
                    this.state = 7110;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 7113;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_MINUTE:
                        {
                        this.state = 7111;
                        this.match(PostgreSqlParser.KW_MINUTE);
                        }
                        break;
                    case PostgreSqlParser.KW_SECOND:
                        {
                        this.state = 7112;
                        this.interval_second();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_MINUTE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7117;
                this.match(PostgreSqlParser.KW_MINUTE);
                this.state = 7120;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 905, this.context) ) {
                case 1:
                    {
                    this.state = 7118;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 7119;
                    this.interval_second();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval_second(): Interval_secondContext {
        let localContext = new Interval_secondContext(this.context, this.state);
        this.enterRule(localContext, 894, PostgreSqlParser.RULE_interval_second);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7124;
            this.match(PostgreSqlParser.KW_SECOND);
            this.state = 7126;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 907, this.context) ) {
            case 1:
                {
                this.state = 7125;
                this.opt_float();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 896, PostgreSqlParser.RULE_comparisonOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7128;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 44237824) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 898, PostgreSqlParser.RULE_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7130;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public booleanExpression(): BooleanExpressionContext;
    public booleanExpression(_p: number): BooleanExpressionContext;
    public booleanExpression(_p?: number): BooleanExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BooleanExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 900;
        this.enterRecursionRule(localContext, 900, PostgreSqlParser.RULE_booleanExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7139;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.PARAM:
            case PostgreSqlParser.Operator:
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_CASE:
            case PostgreSqlParser.KW_CAST:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_CURRENT_CATALOG:
            case PostgreSqlParser.KW_CURRENT_DATE:
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_TIME:
            case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_LOCALTIME:
            case PostgreSqlParser.KW_LOCALTIMESTAMP:
            case PostgreSqlParser.KW_NULL:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_UNIQUE:
            case PostgreSqlParser.KW_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.BinaryStringConstant:
            case PostgreSqlParser.HexadecimalStringConstant:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                localContext = new PredicatedContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 7133;
                (localContext as PredicatedContext)._valueExpression = this.valueExpression(0);
                this.state = 7135;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 908, this.context) ) {
                case 1:
                    {
                    this.state = 7134;
                    this.predicate((localContext as PredicatedContext)._valueExpression);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_NOT:
                {
                localContext = new LogicalNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 7137;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 7138;
                this.booleanExpression(3);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 7149;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 911, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 7147;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 910, this.context) ) {
                    case 1:
                        {
                        localContext = new LogicalBinaryContext(new BooleanExpressionContext(parentContext, parentState));
                        (localContext as LogicalBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_booleanExpression);
                        this.state = 7141;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 7142;
                        (localContext as LogicalBinaryContext)._operator = this.match(PostgreSqlParser.KW_AND);
                        this.state = 7143;
                        (localContext as LogicalBinaryContext)._right = this.booleanExpression(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new LogicalBinaryContext(new BooleanExpressionContext(parentContext, parentState));
                        (localContext as LogicalBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_booleanExpression);
                        this.state = 7144;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 7145;
                        (localContext as LogicalBinaryContext)._operator = this.match(PostgreSqlParser.KW_OR);
                        this.state = 7146;
                        (localContext as LogicalBinaryContext)._right = this.booleanExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 7151;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 911, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public predicate(value: antlr.ParserRuleContext): PredicateContext {
        let localContext = new PredicateContext(this.context, this.state, value);
        this.enterRule(localContext, 902, PostgreSqlParser.RULE_predicate);
        let _la: number;
        try {
            this.state = 7223;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 923, this.context) ) {
            case 1:
                localContext = new ComparisonContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7152;
                this.comparisonOperator();
                this.state = 7153;
                (localContext as ComparisonContext)._right = this.valueExpression(0);
                }
                break;
            case 2:
                localContext = new QuantifiedComparisonContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7155;
                this.comparisonOperator();
                this.state = 7156;
                this.subquery_Op();
                this.state = 7157;
                this.sub_type();
                this.state = 7163;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 912, this.context) ) {
                case 1:
                    {
                    this.state = 7158;
                    this.select_with_parens();
                    }
                    break;
                case 2:
                    {
                    this.state = 7159;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 7160;
                    this.expression();
                    this.state = 7161;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new BetweenContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7166;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 7165;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 7168;
                this.match(PostgreSqlParser.KW_BETWEEN);
                this.state = 7169;
                (localContext as BetweenContext)._lower = this.valueExpression(0);
                this.state = 7170;
                this.match(PostgreSqlParser.KW_AND);
                this.state = 7171;
                (localContext as BetweenContext)._upper = this.valueExpression(0);
                }
                break;
            case 4:
                localContext = new InListContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7174;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 7173;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 7176;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 7177;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7178;
                this.expression();
                this.state = 7183;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 7179;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7180;
                    this.expression();
                    }
                    }
                    this.state = 7185;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 7186;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 5:
                localContext = new InSubqueryContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7189;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 7188;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 7191;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 7192;
                this.select_with_parens();
                }
                break;
            case 6:
                localContext = new LikeContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7194;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 7193;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 7204;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_LIKE:
                    {
                    this.state = 7196;
                    this.match(PostgreSqlParser.KW_LIKE);
                    }
                    break;
                case PostgreSqlParser.KW_ILIKE:
                    {
                    this.state = 7197;
                    this.match(PostgreSqlParser.KW_ILIKE);
                    }
                    break;
                case PostgreSqlParser.KW_SIMILAR:
                    {
                    this.state = 7198;
                    this.match(PostgreSqlParser.KW_SIMILAR);
                    this.state = 7199;
                    this.match(PostgreSqlParser.KW_TO);
                    }
                    break;
                case PostgreSqlParser.KW_BETWEEN:
                    {
                    this.state = 7200;
                    this.match(PostgreSqlParser.KW_BETWEEN);
                    this.state = 7202;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 91) {
                        {
                        this.state = 7201;
                        this.match(PostgreSqlParser.KW_SYMMETRIC);
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 7206;
                (localContext as LikeContext)._pattern = this.valueExpression(0);
                this.state = 7209;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 920, this.context) ) {
                case 1:
                    {
                    this.state = 7207;
                    this.match(PostgreSqlParser.KW_ESCAPE);
                    this.state = 7208;
                    (localContext as LikeContext)._escape = this.valueExpression(0);
                    }
                    break;
                }
                }
                break;
            case 7:
                localContext = new NullPredicateContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7211;
                this.match(PostgreSqlParser.KW_IS);
                this.state = 7213;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 7212;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 7215;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            case 8:
                localContext = new DistinctFromContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7216;
                this.match(PostgreSqlParser.KW_IS);
                this.state = 7218;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 7217;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 7220;
                this.match(PostgreSqlParser.KW_DISTINCT);
                this.state = 7221;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 7222;
                (localContext as DistinctFromContext)._right = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 904;
        this.enterRecursionRule(localContext, 904, PostgreSqlParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7229;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 924, this.context) ) {
            case 1:
                {
                localContext = new ValueExpressionDefaultContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 7226;
                this.primaryExpression(0);
                }
                break;
            case 2:
                {
                localContext = new ArithmeticUnaryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 7227;
                (localContext as ArithmeticUnaryContext)._operator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 13)) {
                    (localContext as ArithmeticUnaryContext)._operator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7228;
                this.valueExpression(4);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 7247;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 926, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 7245;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 925, this.context) ) {
                    case 1:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_valueExpression);
                        this.state = 7231;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 7232;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 134234624) !== 0))) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 7233;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_valueExpression);
                        this.state = 7234;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 7235;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 12 || _la === 13)) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 7236;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(3);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ConcatenationContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ConcatenationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_valueExpression);
                        this.state = 7237;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 7238;
                        this.match(PostgreSqlParser.CARET);
                        this.state = 7239;
                        (localContext as ConcatenationContext)._right = this.valueExpression(2);
                        }
                        break;
                    case 4:
                        {
                        localContext = new AtTimeZoneContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_valueExpression);
                        this.state = 7240;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 7241;
                        this.match(PostgreSqlParser.KW_AT);
                        this.state = 7242;
                        this.match(PostgreSqlParser.KW_TIME);
                        this.state = 7243;
                        this.match(PostgreSqlParser.KW_ZONE);
                        this.state = 7244;
                        this.expression();
                        }
                        break;
                    }
                    }
                }
                this.state = 7249;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 926, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public primaryExpression(): PrimaryExpressionContext;
    public primaryExpression(_p: number): PrimaryExpressionContext;
    public primaryExpression(_p?: number): PrimaryExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new PrimaryExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 906;
        this.enterRecursionRule(localContext, 906, PostgreSqlParser.RULE_primaryExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7338;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 937, this.context) ) {
            case 1:
                {
                this.state = 7251;
                _la = this.tokenStream.LA(1);
                if(!(_la === 98 || _la === 396)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7252;
                this.select_with_parens();
                }
                break;
            case 2:
                {
                this.state = 7253;
                this.match(PostgreSqlParser.KW_ARRAY);
                this.state = 7256;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 7254;
                    this.select_with_parens();
                    }
                    break;
                case PostgreSqlParser.OPEN_BRACKET:
                    {
                    this.state = 7255;
                    this.array_expr();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                {
                this.state = 7258;
                this.match(PostgreSqlParser.PARAM);
                this.state = 7259;
                this.opt_indirection();
                }
                break;
            case 4:
                {
                this.state = 7260;
                this.match(PostgreSqlParser.KW_GROUPING);
                this.state = 7261;
                this.execute_param_clause();
                }
                break;
            case 5:
                {
                this.state = 7262;
                this.match(PostgreSqlParser.Integral);
                }
                break;
            case 6:
                {
                this.state = 7263;
                this.match(PostgreSqlParser.Numeric);
                }
                break;
            case 7:
                {
                this.state = 7264;
                this.match(PostgreSqlParser.BinaryStringConstant);
                }
                break;
            case 8:
                {
                this.state = 7265;
                this.match(PostgreSqlParser.HexadecimalStringConstant);
                }
                break;
            case 9:
                {
                this.state = 7266;
                this.function_name();
                this.state = 7276;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 7267;
                    this.sconst();
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 7268;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 7269;
                    this.func_arg_list();
                    this.state = 7271;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 83) {
                        {
                        this.state = 7270;
                        this.sort_clause();
                        }
                    }

                    this.state = 7273;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    this.state = 7274;
                    this.sconst();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 10:
                {
                this.state = 7279;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 190 || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 3525731551) !== 0) || _la === 423) {
                    {
                    this.state = 7278;
                    this.consttypename();
                    }
                }

                this.state = 7281;
                this.sconst();
                }
                break;
            case 11:
                {
                this.state = 7282;
                this.match(PostgreSqlParser.KW_INTERVAL);
                this.state = 7290;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 7283;
                    this.sconst();
                    this.state = 7285;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 931, this.context) ) {
                    case 1:
                        {
                        this.state = 7284;
                        this.opt_interval();
                        }
                        break;
                    }
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 7287;
                    this.opt_float();
                    this.state = 7288;
                    this.sconst();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 12:
                {
                this.state = 7292;
                this.match(PostgreSqlParser.KW_TRUE);
                }
                break;
            case 13:
                {
                this.state = 7293;
                this.match(PostgreSqlParser.KW_FALSE);
                }
                break;
            case 14:
                {
                this.state = 7294;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            case 15:
                {
                this.state = 7295;
                this.match(PostgreSqlParser.PLSQLVARIABLENAME);
                }
                break;
            case 16:
                {
                this.state = 7296;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7297;
                localContext._a_expr_in_parens = this.expression();
                this.state = 7298;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 7299;
                this.opt_indirection();
                }
                break;
            case 17:
                {
                this.state = 7301;
                this.match(PostgreSqlParser.KW_CASE);
                this.state = 7303;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 421516677) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 100660735) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                    {
                    this.state = 7302;
                    this.expression();
                    }
                }

                this.state = 7306;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 7305;
                    this.when_clause();
                    }
                    }
                    this.state = 7308;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 102);
                this.state = 7312;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 58) {
                    {
                    this.state = 7310;
                    this.match(PostgreSqlParser.KW_ELSE);
                    this.state = 7311;
                    this.expression();
                    }
                }

                this.state = 7314;
                this.match(PostgreSqlParser.KW_END);
                }
                break;
            case 18:
                {
                this.state = 7316;
                this.func_expr();
                }
                break;
            case 19:
                {
                this.state = 7317;
                this.select_with_parens();
                this.state = 7319;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 936, this.context) ) {
                case 1:
                    {
                    this.state = 7318;
                    this.indirection();
                    }
                    break;
                }
                }
                break;
            case 20:
                {
                this.state = 7321;
                this.explicit_row();
                }
                break;
            case 21:
                {
                this.state = 7322;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7323;
                this.expression();
                this.state = 7324;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7325;
                this.expr_list();
                this.state = 7326;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 22:
                {
                this.state = 7328;
                this.row();
                this.state = 7329;
                this.match(PostgreSqlParser.KW_OVERLAPS);
                this.state = 7330;
                this.row();
                }
                break;
            case 23:
                {
                this.state = 7332;
                this.qualified_name();
                }
                break;
            case 24:
                {
                this.state = 7333;
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 13)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7334;
                this.primaryExpression(5);
                }
                break;
            case 25:
                {
                this.state = 7335;
                this.qual_op();
                this.state = 7336;
                this.primaryExpression(2);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 7367;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 942, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 7365;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 941, this.context) ) {
                    case 1:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_primaryExpression);
                        this.state = 7340;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 7341;
                        this.mathop();
                        this.state = 7342;
                        this.primaryExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_primaryExpression);
                        this.state = 7344;
                        if (!(this.precpred(this.context, 6))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 6)");
                        }
                        this.state = 7345;
                        this.match(PostgreSqlParser.TYPECAST);
                        this.state = 7346;
                        this.typename();
                        }
                        break;
                    case 3:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_primaryExpression);
                        this.state = 7347;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 7348;
                        this.qual_op();
                        this.state = 7350;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 938, this.context) ) {
                        case 1:
                            {
                            this.state = 7349;
                            this.primaryExpression(0);
                            }
                            break;
                        }
                        }
                        break;
                    case 4:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_primaryExpression);
                        this.state = 7352;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 7353;
                        this.match(PostgreSqlParser.KW_IS);
                        this.state = 7355;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 77) {
                            {
                            this.state = 7354;
                            this.match(PostgreSqlParser.KW_NOT);
                            }
                        }

                        this.state = 7363;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case PostgreSqlParser.KW_DISTINCT:
                            {
                            this.state = 7357;
                            this.match(PostgreSqlParser.KW_DISTINCT);
                            this.state = 7358;
                            this.match(PostgreSqlParser.KW_FROM);
                            this.state = 7359;
                            this.primaryExpression(0);
                            }
                            break;
                        case PostgreSqlParser.KW_OF:
                            {
                            this.state = 7360;
                            this.match(PostgreSqlParser.KW_OF);
                            this.state = 7361;
                            this.prep_type_clause();
                            }
                            break;
                        case PostgreSqlParser.KW_DOCUMENT:
                            {
                            this.state = 7362;
                            this.match(PostgreSqlParser.KW_DOCUMENT);
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                        break;
                    }
                    }
                }
                this.state = 7369;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 942, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public func_application(): Func_applicationContext {
        let localContext = new Func_applicationContext(this.context, this.state);
        this.enterRule(localContext, 908, PostgreSqlParser.RULE_func_application);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7370;
            this.function_name();
            this.state = 7396;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 948, this.context) ) {
            case 1:
                {
                this.state = 7371;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7393;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                case PostgreSqlParser.PLUS:
                case PostgreSqlParser.MINUS:
                case PostgreSqlParser.PARAM:
                case PostgreSqlParser.Operator:
                case PostgreSqlParser.KW_AND:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_CASE:
                case PostgreSqlParser.KW_CAST:
                case PostgreSqlParser.KW_COLLATE:
                case PostgreSqlParser.KW_CONSTRAINT:
                case PostgreSqlParser.KW_CURRENT_CATALOG:
                case PostgreSqlParser.KW_CURRENT_DATE:
                case PostgreSqlParser.KW_CURRENT_ROLE:
                case PostgreSqlParser.KW_CURRENT_TIME:
                case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
                case PostgreSqlParser.KW_CURRENT_USER:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_DO:
                case PostgreSqlParser.KW_FALSE:
                case PostgreSqlParser.KW_FETCH:
                case PostgreSqlParser.KW_LOCALTIME:
                case PostgreSqlParser.KW_LOCALTIMESTAMP:
                case PostgreSqlParser.KW_NOT:
                case PostgreSqlParser.KW_NULL:
                case PostgreSqlParser.KW_SESSION_USER:
                case PostgreSqlParser.KW_TRUE:
                case PostgreSqlParser.KW_UNIQUE:
                case PostgreSqlParser.KW_USER:
                case PostgreSqlParser.KW_AUTHORIZATION:
                case PostgreSqlParser.KW_BINARY:
                case PostgreSqlParser.KW_COLLATION:
                case PostgreSqlParser.KW_CONCURRENTLY:
                case PostgreSqlParser.KW_CROSS:
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                case PostgreSqlParser.KW_FREEZE:
                case PostgreSqlParser.KW_FULL:
                case PostgreSqlParser.KW_ILIKE:
                case PostgreSqlParser.KW_INNER:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_ISNULL:
                case PostgreSqlParser.KW_JOIN:
                case PostgreSqlParser.KW_LEFT:
                case PostgreSqlParser.KW_LIKE:
                case PostgreSqlParser.KW_NATURAL:
                case PostgreSqlParser.KW_NOTNULL:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_OVERLAPS:
                case PostgreSqlParser.KW_RIGHT:
                case PostgreSqlParser.KW_SIMILAR:
                case PostgreSqlParser.KW_VERBOSE:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_TABLESAMPLE:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.BinaryStringConstant:
                case PostgreSqlParser.HexadecimalStringConstant:
                case PostgreSqlParser.Integral:
                case PostgreSqlParser.Numeric:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 7372;
                    this.func_arg_list();
                    this.state = 7376;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 6) {
                        {
                        this.state = 7373;
                        this.match(PostgreSqlParser.COMMA);
                        this.state = 7374;
                        this.match(PostgreSqlParser.KW_VARIADIC);
                        this.state = 7375;
                        this.func_arg_expr();
                        }
                    }

                    this.state = 7379;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 83) {
                        {
                        this.state = 7378;
                        this.sort_clause();
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.KW_VARIADIC:
                    {
                    this.state = 7381;
                    this.match(PostgreSqlParser.KW_VARIADIC);
                    this.state = 7382;
                    this.func_arg_expr();
                    this.state = 7384;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 83) {
                        {
                        this.state = 7383;
                        this.sort_clause();
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.KW_ALL:
                case PostgreSqlParser.KW_DISTINCT:
                    {
                    this.state = 7386;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 30 || _la === 56)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 7387;
                    this.func_arg_list();
                    this.state = 7389;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 83) {
                        {
                        this.state = 7388;
                        this.sort_clause();
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.STAR:
                    {
                    this.state = 7391;
                    this.match(PostgreSqlParser.STAR);
                    }
                    break;
                case PostgreSqlParser.CLOSE_PAREN:
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 7395;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_expr(): Func_exprContext {
        let localContext = new Func_exprContext(this.context, this.state);
        this.enterRule(localContext, 910, PostgreSqlParser.RULE_func_expr);
        try {
            this.state = 7423;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 953, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7398;
                this.func_application();
                this.state = 7405;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 949, this.context) ) {
                case 1:
                    {
                    this.state = 7399;
                    this.match(PostgreSqlParser.KW_WITHIN);
                    this.state = 7400;
                    this.match(PostgreSqlParser.KW_GROUP);
                    this.state = 7401;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 7402;
                    this.sort_clause();
                    this.state = 7403;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                this.state = 7413;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 950, this.context) ) {
                case 1:
                    {
                    this.state = 7407;
                    this.match(PostgreSqlParser.KW_FILTER);
                    this.state = 7408;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 7409;
                    this.match(PostgreSqlParser.KW_WHERE);
                    this.state = 7410;
                    this.expression();
                    this.state = 7411;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                this.state = 7420;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 952, this.context) ) {
                case 1:
                    {
                    this.state = 7415;
                    this.match(PostgreSqlParser.KW_OVER);
                    this.state = 7418;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.OPEN_PAREN:
                        {
                        this.state = 7416;
                        this.window_specification();
                        }
                        break;
                    case PostgreSqlParser.KW_AND:
                    case PostgreSqlParser.KW_ARRAY:
                    case PostgreSqlParser.KW_COLLATE:
                    case PostgreSqlParser.KW_CONSTRAINT:
                    case PostgreSqlParser.KW_DEFAULT:
                    case PostgreSqlParser.KW_DO:
                    case PostgreSqlParser.KW_FETCH:
                    case PostgreSqlParser.KW_IS:
                    case PostgreSqlParser.KW_OUTER:
                    case PostgreSqlParser.KW_OVER:
                    case PostgreSqlParser.KW_ABORT:
                    case PostgreSqlParser.KW_ABSOLUTE:
                    case PostgreSqlParser.KW_ACCESS:
                    case PostgreSqlParser.KW_ACTION:
                    case PostgreSqlParser.KW_ADD:
                    case PostgreSqlParser.KW_ADMIN:
                    case PostgreSqlParser.KW_AFTER:
                    case PostgreSqlParser.KW_AGGREGATE:
                    case PostgreSqlParser.KW_ALSO:
                    case PostgreSqlParser.KW_ALTER:
                    case PostgreSqlParser.KW_ALWAYS:
                    case PostgreSqlParser.KW_ASSERTION:
                    case PostgreSqlParser.KW_ASSIGNMENT:
                    case PostgreSqlParser.KW_AT:
                    case PostgreSqlParser.KW_ATTRIBUTE:
                    case PostgreSqlParser.KW_BACKWARD:
                    case PostgreSqlParser.KW_BEFORE:
                    case PostgreSqlParser.KW_BEGIN:
                    case PostgreSqlParser.KW_BY:
                    case PostgreSqlParser.KW_CACHE:
                    case PostgreSqlParser.KW_CALLED:
                    case PostgreSqlParser.KW_CASCADE:
                    case PostgreSqlParser.KW_CASCADED:
                    case PostgreSqlParser.KW_CATALOG:
                    case PostgreSqlParser.KW_CHAIN:
                    case PostgreSqlParser.KW_CHARACTERISTICS:
                    case PostgreSqlParser.KW_CHECKPOINT:
                    case PostgreSqlParser.KW_CLASS:
                    case PostgreSqlParser.KW_CLOSE:
                    case PostgreSqlParser.KW_CLUSTER:
                    case PostgreSqlParser.KW_COMMENT:
                    case PostgreSqlParser.KW_COMMENTS:
                    case PostgreSqlParser.KW_COMMIT:
                    case PostgreSqlParser.KW_COMMITTED:
                    case PostgreSqlParser.KW_CONFIGURATION:
                    case PostgreSqlParser.KW_CONNECTION:
                    case PostgreSqlParser.KW_CONSTRAINTS:
                    case PostgreSqlParser.KW_CONTENT:
                    case PostgreSqlParser.KW_CONTINUE:
                    case PostgreSqlParser.KW_CONVERSION:
                    case PostgreSqlParser.KW_COPY:
                    case PostgreSqlParser.KW_COST:
                    case PostgreSqlParser.KW_CSV:
                    case PostgreSqlParser.KW_CURSOR:
                    case PostgreSqlParser.KW_CYCLE:
                    case PostgreSqlParser.KW_DATA:
                    case PostgreSqlParser.KW_DATABASE:
                    case PostgreSqlParser.KW_DAY:
                    case PostgreSqlParser.KW_DEALLOCATE:
                    case PostgreSqlParser.KW_DECLARE:
                    case PostgreSqlParser.KW_DEFAULTS:
                    case PostgreSqlParser.KW_DEFERRED:
                    case PostgreSqlParser.KW_DEFINER:
                    case PostgreSqlParser.KW_DELETE:
                    case PostgreSqlParser.KW_DELIMITER:
                    case PostgreSqlParser.KW_DELIMITERS:
                    case PostgreSqlParser.KW_DICTIONARY:
                    case PostgreSqlParser.KW_DISABLE:
                    case PostgreSqlParser.KW_DISCARD:
                    case PostgreSqlParser.KW_DOCUMENT:
                    case PostgreSqlParser.KW_DOMAIN:
                    case PostgreSqlParser.KW_DOUBLE:
                    case PostgreSqlParser.KW_DROP:
                    case PostgreSqlParser.KW_EACH:
                    case PostgreSqlParser.KW_ENABLE:
                    case PostgreSqlParser.KW_ENCODING:
                    case PostgreSqlParser.KW_ENCRYPTED:
                    case PostgreSqlParser.KW_ENUM:
                    case PostgreSqlParser.KW_ESCAPE:
                    case PostgreSqlParser.KW_EVENT:
                    case PostgreSqlParser.KW_EXCLUDE:
                    case PostgreSqlParser.KW_EXCLUDING:
                    case PostgreSqlParser.KW_EXCLUSIVE:
                    case PostgreSqlParser.KW_EXECUTE:
                    case PostgreSqlParser.KW_EXPLAIN:
                    case PostgreSqlParser.KW_EXTENSION:
                    case PostgreSqlParser.KW_EXTERNAL:
                    case PostgreSqlParser.KW_FAMILY:
                    case PostgreSqlParser.KW_FIRST:
                    case PostgreSqlParser.KW_FOLLOWING:
                    case PostgreSqlParser.KW_FORCE:
                    case PostgreSqlParser.KW_FORWARD:
                    case PostgreSqlParser.KW_FUNCTION:
                    case PostgreSqlParser.KW_FUNCTIONS:
                    case PostgreSqlParser.KW_GLOBAL:
                    case PostgreSqlParser.KW_GRANTED:
                    case PostgreSqlParser.KW_HANDLER:
                    case PostgreSqlParser.KW_HEADER:
                    case PostgreSqlParser.KW_HOLD:
                    case PostgreSqlParser.KW_HOUR:
                    case PostgreSqlParser.KW_IDENTITY:
                    case PostgreSqlParser.KW_IF:
                    case PostgreSqlParser.KW_IMMEDIATE:
                    case PostgreSqlParser.KW_IMMUTABLE:
                    case PostgreSqlParser.KW_IMPLICIT:
                    case PostgreSqlParser.KW_INCLUDING:
                    case PostgreSqlParser.KW_INCREMENT:
                    case PostgreSqlParser.KW_INDEX:
                    case PostgreSqlParser.KW_INDEXES:
                    case PostgreSqlParser.KW_INHERIT:
                    case PostgreSqlParser.KW_INHERITS:
                    case PostgreSqlParser.KW_INLINE:
                    case PostgreSqlParser.KW_INSENSITIVE:
                    case PostgreSqlParser.KW_INSERT:
                    case PostgreSqlParser.KW_INSTEAD:
                    case PostgreSqlParser.KW_INVOKER:
                    case PostgreSqlParser.KW_ISOLATION:
                    case PostgreSqlParser.KW_KEY:
                    case PostgreSqlParser.KW_LABEL:
                    case PostgreSqlParser.KW_LANGUAGE:
                    case PostgreSqlParser.KW_LARGE:
                    case PostgreSqlParser.KW_LAST:
                    case PostgreSqlParser.KW_LEAKPROOF:
                    case PostgreSqlParser.KW_LEVEL:
                    case PostgreSqlParser.KW_LISTEN:
                    case PostgreSqlParser.KW_LOAD:
                    case PostgreSqlParser.KW_LOCAL:
                    case PostgreSqlParser.KW_LOCATION:
                    case PostgreSqlParser.KW_LOCK:
                    case PostgreSqlParser.KW_MAPPING:
                    case PostgreSqlParser.KW_MATCH:
                    case PostgreSqlParser.KW_MATERIALIZED:
                    case PostgreSqlParser.KW_MAXVALUE:
                    case PostgreSqlParser.KW_MINUTE:
                    case PostgreSqlParser.KW_MINVALUE:
                    case PostgreSqlParser.KW_MODE:
                    case PostgreSqlParser.KW_MONTH:
                    case PostgreSqlParser.KW_MOVE:
                    case PostgreSqlParser.KW_NAME:
                    case PostgreSqlParser.KW_NAMES:
                    case PostgreSqlParser.KW_NEXT:
                    case PostgreSqlParser.KW_NO:
                    case PostgreSqlParser.KW_NOTHING:
                    case PostgreSqlParser.KW_NOTIFY:
                    case PostgreSqlParser.KW_NOWAIT:
                    case PostgreSqlParser.KW_NULLS:
                    case PostgreSqlParser.KW_OBJECT:
                    case PostgreSqlParser.KW_OF:
                    case PostgreSqlParser.KW_OFF:
                    case PostgreSqlParser.KW_OIDS:
                    case PostgreSqlParser.KW_OPERATOR:
                    case PostgreSqlParser.KW_OPTION:
                    case PostgreSqlParser.KW_OPTIONS:
                    case PostgreSqlParser.KW_OWNED:
                    case PostgreSqlParser.KW_OWNER:
                    case PostgreSqlParser.KW_PARSER:
                    case PostgreSqlParser.KW_PARTIAL:
                    case PostgreSqlParser.KW_PARTITION:
                    case PostgreSqlParser.KW_PASSING:
                    case PostgreSqlParser.KW_PASSWORD:
                    case PostgreSqlParser.KW_PLANS:
                    case PostgreSqlParser.KW_PRECEDING:
                    case PostgreSqlParser.KW_PREPARE:
                    case PostgreSqlParser.KW_PREPARED:
                    case PostgreSqlParser.KW_PRESERVE:
                    case PostgreSqlParser.KW_PRIOR:
                    case PostgreSqlParser.KW_PRIVILEGES:
                    case PostgreSqlParser.KW_PROCEDURAL:
                    case PostgreSqlParser.KW_PROCEDURE:
                    case PostgreSqlParser.KW_PROGRAM:
                    case PostgreSqlParser.KW_QUOTE:
                    case PostgreSqlParser.KW_RANGE:
                    case PostgreSqlParser.KW_READ:
                    case PostgreSqlParser.KW_REASSIGN:
                    case PostgreSqlParser.KW_RECHECK:
                    case PostgreSqlParser.KW_RECURSIVE:
                    case PostgreSqlParser.KW_REF:
                    case PostgreSqlParser.KW_REFRESH:
                    case PostgreSqlParser.KW_REINDEX:
                    case PostgreSqlParser.KW_RELATIVE:
                    case PostgreSqlParser.KW_RELEASE:
                    case PostgreSqlParser.KW_RENAME:
                    case PostgreSqlParser.KW_REPEATABLE:
                    case PostgreSqlParser.KW_REPLACE:
                    case PostgreSqlParser.KW_REPLICA:
                    case PostgreSqlParser.KW_RESET:
                    case PostgreSqlParser.KW_RESTART:
                    case PostgreSqlParser.KW_RESTRICT:
                    case PostgreSqlParser.KW_RETURNS:
                    case PostgreSqlParser.KW_REVOKE:
                    case PostgreSqlParser.KW_ROLE:
                    case PostgreSqlParser.KW_ROLLBACK:
                    case PostgreSqlParser.KW_ROWS:
                    case PostgreSqlParser.KW_RULE:
                    case PostgreSqlParser.KW_SAVEPOINT:
                    case PostgreSqlParser.KW_SCHEMA:
                    case PostgreSqlParser.KW_SCROLL:
                    case PostgreSqlParser.KW_SEARCH:
                    case PostgreSqlParser.KW_SECOND:
                    case PostgreSqlParser.KW_SECURITY:
                    case PostgreSqlParser.KW_SEQUENCE:
                    case PostgreSqlParser.KW_SEQUENCES:
                    case PostgreSqlParser.KW_SERIALIZABLE:
                    case PostgreSqlParser.KW_SERVER:
                    case PostgreSqlParser.KW_SESSION:
                    case PostgreSqlParser.KW_SET:
                    case PostgreSqlParser.KW_SHARE:
                    case PostgreSqlParser.KW_SHOW:
                    case PostgreSqlParser.KW_SIMPLE:
                    case PostgreSqlParser.KW_SNAPSHOT:
                    case PostgreSqlParser.KW_STABLE:
                    case PostgreSqlParser.KW_STANDALONE:
                    case PostgreSqlParser.KW_START:
                    case PostgreSqlParser.KW_STATEMENT:
                    case PostgreSqlParser.KW_STATISTICS:
                    case PostgreSqlParser.KW_STDIN:
                    case PostgreSqlParser.KW_STDOUT:
                    case PostgreSqlParser.KW_STORAGE:
                    case PostgreSqlParser.KW_STRICT:
                    case PostgreSqlParser.KW_STRIP:
                    case PostgreSqlParser.KW_SYSID:
                    case PostgreSqlParser.KW_SYSTEM:
                    case PostgreSqlParser.KW_TABLES:
                    case PostgreSqlParser.KW_TABLESPACE:
                    case PostgreSqlParser.KW_TEMP:
                    case PostgreSqlParser.KW_TEMPLATE:
                    case PostgreSqlParser.KW_TEMPORARY:
                    case PostgreSqlParser.KW_TEXT:
                    case PostgreSqlParser.KW_TRANSACTION:
                    case PostgreSqlParser.KW_TRIGGER:
                    case PostgreSqlParser.KW_TRUNCATE:
                    case PostgreSqlParser.KW_TRUSTED:
                    case PostgreSqlParser.KW_TYPE:
                    case PostgreSqlParser.KW_TYPES:
                    case PostgreSqlParser.KW_UNBOUNDED:
                    case PostgreSqlParser.KW_UNCOMMITTED:
                    case PostgreSqlParser.KW_UNENCRYPTED:
                    case PostgreSqlParser.KW_UNKNOWN:
                    case PostgreSqlParser.KW_UNLISTEN:
                    case PostgreSqlParser.KW_UNLOGGED:
                    case PostgreSqlParser.KW_UNTIL:
                    case PostgreSqlParser.KW_UPDATE:
                    case PostgreSqlParser.KW_VACUUM:
                    case PostgreSqlParser.KW_VALID:
                    case PostgreSqlParser.KW_VALIDATE:
                    case PostgreSqlParser.KW_VALIDATOR:
                    case PostgreSqlParser.KW_VARYING:
                    case PostgreSqlParser.KW_VERSION:
                    case PostgreSqlParser.KW_VIEW:
                    case PostgreSqlParser.KW_VOLATILE:
                    case PostgreSqlParser.KW_WHITESPACE:
                    case PostgreSqlParser.KW_WITHOUT:
                    case PostgreSqlParser.KW_WORK:
                    case PostgreSqlParser.KW_WRAPPER:
                    case PostgreSqlParser.KW_WRITE:
                    case PostgreSqlParser.KW_XML:
                    case PostgreSqlParser.KW_YEAR:
                    case PostgreSqlParser.KW_YES:
                    case PostgreSqlParser.KW_ZONE:
                    case PostgreSqlParser.KW_BETWEEN:
                    case PostgreSqlParser.KW_BIGINT:
                    case PostgreSqlParser.KW_BIT:
                    case PostgreSqlParser.KW_BOOLEAN:
                    case PostgreSqlParser.KW_CHAR:
                    case PostgreSqlParser.KW_CHARACTER:
                    case PostgreSqlParser.KW_COALESCE:
                    case PostgreSqlParser.KW_DEC:
                    case PostgreSqlParser.KW_DECIMAL:
                    case PostgreSqlParser.KW_EXISTS:
                    case PostgreSqlParser.KW_EXTRACT:
                    case PostgreSqlParser.KW_FLOAT:
                    case PostgreSqlParser.KW_GREATEST:
                    case PostgreSqlParser.KW_INOUT:
                    case PostgreSqlParser.KW_INT:
                    case PostgreSqlParser.KW_INTEGER:
                    case PostgreSqlParser.KW_INTERVAL:
                    case PostgreSqlParser.KW_LEAST:
                    case PostgreSqlParser.KW_NATIONAL:
                    case PostgreSqlParser.KW_NCHAR:
                    case PostgreSqlParser.KW_NONE:
                    case PostgreSqlParser.KW_NULLIF:
                    case PostgreSqlParser.KW_NUMERIC:
                    case PostgreSqlParser.KW_OVERLAY:
                    case PostgreSqlParser.KW_POSITION:
                    case PostgreSqlParser.KW_PRECISION:
                    case PostgreSqlParser.KW_REAL:
                    case PostgreSqlParser.KW_ROW:
                    case PostgreSqlParser.KW_SETOF:
                    case PostgreSqlParser.KW_SMALLINT:
                    case PostgreSqlParser.KW_SUBSTRING:
                    case PostgreSqlParser.KW_TIME:
                    case PostgreSqlParser.KW_TIMESTAMP:
                    case PostgreSqlParser.KW_TREAT:
                    case PostgreSqlParser.KW_TRIM:
                    case PostgreSqlParser.KW_VALUES:
                    case PostgreSqlParser.KW_VARCHAR:
                    case PostgreSqlParser.KW_XMLATTRIBUTES:
                    case PostgreSqlParser.KW_XMLCONCAT:
                    case PostgreSqlParser.KW_XMLELEMENT:
                    case PostgreSqlParser.KW_XMLEXISTS:
                    case PostgreSqlParser.KW_XMLFOREST:
                    case PostgreSqlParser.KW_XMLPARSE:
                    case PostgreSqlParser.KW_XMLPI:
                    case PostgreSqlParser.KW_XMLROOT:
                    case PostgreSqlParser.KW_XMLSERIALIZE:
                    case PostgreSqlParser.KW_CALL:
                    case PostgreSqlParser.KW_CURRENT:
                    case PostgreSqlParser.KW_ATTACH:
                    case PostgreSqlParser.KW_DETACH:
                    case PostgreSqlParser.KW_EXPRESSION:
                    case PostgreSqlParser.KW_GENERATED:
                    case PostgreSqlParser.KW_LOGGED:
                    case PostgreSqlParser.KW_STORED:
                    case PostgreSqlParser.KW_INCLUDE:
                    case PostgreSqlParser.KW_ROUTINE:
                    case PostgreSqlParser.KW_TRANSFORM:
                    case PostgreSqlParser.KW_IMPORT:
                    case PostgreSqlParser.KW_POLICY:
                    case PostgreSqlParser.KW_METHOD:
                    case PostgreSqlParser.KW_REFERENCING:
                    case PostgreSqlParser.KW_NEW:
                    case PostgreSqlParser.KW_OLD:
                    case PostgreSqlParser.KW_VALUE:
                    case PostgreSqlParser.KW_SUBSCRIPTION:
                    case PostgreSqlParser.KW_PUBLICATION:
                    case PostgreSqlParser.KW_OUT:
                    case PostgreSqlParser.KW_ROUTINES:
                    case PostgreSqlParser.KW_SCHEMAS:
                    case PostgreSqlParser.KW_PROCEDURES:
                    case PostgreSqlParser.KW_INPUT:
                    case PostgreSqlParser.KW_SUPPORT:
                    case PostgreSqlParser.KW_PARALLEL:
                    case PostgreSqlParser.KW_SQL:
                    case PostgreSqlParser.KW_DEPENDS:
                    case PostgreSqlParser.KW_OVERRIDING:
                    case PostgreSqlParser.KW_CONFLICT:
                    case PostgreSqlParser.KW_SKIP:
                    case PostgreSqlParser.KW_LOCKED:
                    case PostgreSqlParser.KW_TIES:
                    case PostgreSqlParser.KW_ROLLUP:
                    case PostgreSqlParser.KW_CUBE:
                    case PostgreSqlParser.KW_GROUPING:
                    case PostgreSqlParser.KW_SETS:
                    case PostgreSqlParser.KW_ORDINALITY:
                    case PostgreSqlParser.KW_XMLTABLE:
                    case PostgreSqlParser.KW_COLUMNS:
                    case PostgreSqlParser.KW_XMLNAMESPACES:
                    case PostgreSqlParser.KW_ROWTYPE:
                    case PostgreSqlParser.KW_NORMALIZED:
                    case PostgreSqlParser.KW_WITHIN:
                    case PostgreSqlParser.KW_FILTER:
                    case PostgreSqlParser.KW_GROUPS:
                    case PostgreSqlParser.KW_OTHERS:
                    case PostgreSqlParser.KW_NFC:
                    case PostgreSqlParser.KW_NFD:
                    case PostgreSqlParser.KW_NFKC:
                    case PostgreSqlParser.KW_NFKD:
                    case PostgreSqlParser.KW_UESCAPE:
                    case PostgreSqlParser.KW_VIEWS:
                    case PostgreSqlParser.KW_NORMALIZE:
                    case PostgreSqlParser.KW_DUMP:
                    case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                    case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                    case PostgreSqlParser.KW_ERROR:
                    case PostgreSqlParser.KW_USE_VARIABLE:
                    case PostgreSqlParser.KW_USE_COLUMN:
                    case PostgreSqlParser.KW_ALIAS:
                    case PostgreSqlParser.KW_CONSTANT:
                    case PostgreSqlParser.KW_PERFORM:
                    case PostgreSqlParser.KW_GET:
                    case PostgreSqlParser.KW_DIAGNOSTICS:
                    case PostgreSqlParser.KW_STACKED:
                    case PostgreSqlParser.KW_ELSIF:
                    case PostgreSqlParser.KW_REVERSE:
                    case PostgreSqlParser.KW_SLICE:
                    case PostgreSqlParser.KW_EXIT:
                    case PostgreSqlParser.KW_RETURN:
                    case PostgreSqlParser.KW_QUERY:
                    case PostgreSqlParser.KW_RAISE:
                    case PostgreSqlParser.KW_SQLSTATE:
                    case PostgreSqlParser.KW_DEBUG:
                    case PostgreSqlParser.KW_LOG:
                    case PostgreSqlParser.KW_INFO:
                    case PostgreSqlParser.KW_NOTICE:
                    case PostgreSqlParser.KW_WARNING:
                    case PostgreSqlParser.KW_EXCEPTION:
                    case PostgreSqlParser.KW_ASSERT:
                    case PostgreSqlParser.KW_OPEN:
                    case PostgreSqlParser.KW_SKIP_LOCKED:
                    case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                    case PostgreSqlParser.Identifier:
                    case PostgreSqlParser.QuotedIdentifier:
                    case PostgreSqlParser.UnicodeQuotedIdentifier:
                    case PostgreSqlParser.StringConstant:
                    case PostgreSqlParser.UnicodeEscapeStringConstant:
                    case PostgreSqlParser.BeginDollarStringConstant:
                    case PostgreSqlParser.PLSQLVARIABLENAME:
                    case PostgreSqlParser.PLSQLIDENTIFIER:
                    case PostgreSqlParser.EscapeStringConstant:
                        {
                        this.state = 7417;
                        this.colid();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7422;
                this.func_expr_common_subexpr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_expr_windowless(): Func_expr_windowlessContext {
        let localContext = new Func_expr_windowlessContext(this.context, this.state);
        this.enterRule(localContext, 912, PostgreSqlParser.RULE_func_expr_windowless);
        try {
            this.state = 7427;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 954, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7425;
                this.func_application();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7426;
                this.func_expr_common_subexpr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_expr_common_subexpr(): Func_expr_common_subexprContext {
        let localContext = new Func_expr_common_subexprContext(this.context, this.state);
        this.enterRule(localContext, 914, PostgreSqlParser.RULE_func_expr_common_subexpr);
        let _la: number;
        try {
            this.state = 7567;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_COLLATION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7429;
                this.match(PostgreSqlParser.KW_COLLATION);
                this.state = 7430;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 7431;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7432;
                this.expression();
                this.state = 7433;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_DATE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7435;
                this.match(PostgreSqlParser.KW_CURRENT_DATE);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_TIME:
            case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
            case PostgreSqlParser.KW_LOCALTIME:
            case PostgreSqlParser.KW_LOCALTIMESTAMP:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7436;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & 100663299) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7438;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 955, this.context) ) {
                case 1:
                    {
                    this.state = 7437;
                    this.opt_float();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_CURRENT_ROLE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7440;
                this.match(PostgreSqlParser.KW_CURRENT_ROLE);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_USER:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7441;
                this.match(PostgreSqlParser.KW_CURRENT_USER);
                }
                break;
            case PostgreSqlParser.KW_SESSION_USER:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7442;
                this.match(PostgreSqlParser.KW_SESSION_USER);
                }
                break;
            case PostgreSqlParser.KW_USER:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7443;
                this.match(PostgreSqlParser.KW_USER);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_CATALOG:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7444;
                this.match(PostgreSqlParser.KW_CURRENT_CATALOG);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 7445;
                this.match(PostgreSqlParser.KW_CURRENT_SCHEMA);
                }
                break;
            case PostgreSqlParser.KW_CAST:
            case PostgreSqlParser.KW_TREAT:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 7446;
                _la = this.tokenStream.LA(1);
                if(!(_la === 41 || _la === 420)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7447;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7448;
                this.expression();
                this.state = 7449;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 7450;
                this.typename();
                this.state = 7451;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_EXTRACT:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 7453;
                this.match(PostgreSqlParser.KW_EXTRACT);
                this.state = 7454;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7456;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 268451969) !== 0) || ((((_la - 153)) & ~0x1F) === 0 && ((1 << (_la - 153)) & 8929553) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & 2057) !== 0) || ((((_la - 241)) & ~0x1F) === 0 && ((1 << (_la - 241)) & 428867841) !== 0) || ((((_la - 279)) & ~0x1F) === 0 && ((1 << (_la - 279)) & 268451841) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & 1059905) !== 0) || _la === 360 || _la === 384 || _la === 433 || _la === 434 || ((((_la - 477)) & ~0x1F) === 0 && ((1 << (_la - 477)) & 3959414785) !== 0) || ((((_la - 509)) & ~0x1F) === 0 && ((1 << (_la - 509)) & 3071) !== 0) || ((((_la - 549)) & ~0x1F) === 0 && ((1 << (_la - 549)) & 100674083) !== 0) || _la === 584) {
                    {
                    this.state = 7455;
                    this.extract_list();
                    }
                }

                this.state = 7458;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_NORMALIZE:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 7459;
                this.match(PostgreSqlParser.KW_NORMALIZE);
                this.state = 7460;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7461;
                this.expression();
                this.state = 7464;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 7462;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7463;
                    this.unicode_normal_form();
                    }
                }

                this.state = 7466;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_OVERLAY:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 7468;
                this.match(PostgreSqlParser.KW_OVERLAY);
                this.state = 7469;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7470;
                this.overlay_list();
                this.state = 7471;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_POSITION:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 7473;
                this.match(PostgreSqlParser.KW_POSITION);
                this.state = 7474;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7479;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 421516677) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763019) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 100660735) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                    {
                    this.state = 7475;
                    this.primaryExpression(0);
                    this.state = 7476;
                    this.match(PostgreSqlParser.KW_IN);
                    this.state = 7477;
                    this.primaryExpression(0);
                    }
                }

                this.state = 7481;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_SUBSTRING:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 7482;
                this.match(PostgreSqlParser.KW_SUBSTRING);
                this.state = 7483;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7485;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 421516677) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 100660735) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                    {
                    this.state = 7484;
                    this.substr_list();
                    }
                }

                this.state = 7487;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_TRIM:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 7488;
                this.match(PostgreSqlParser.KW_TRIM);
                this.state = 7489;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7491;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 39 || _la === 73 || _la === 95) {
                    {
                    this.state = 7490;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 39 || _la === 73 || _la === 95)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 7493;
                this.trim_list();
                this.state = 7494;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_NULLIF:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 7496;
                this.match(PostgreSqlParser.KW_NULLIF);
                this.state = 7497;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7498;
                this.expression();
                this.state = 7499;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7500;
                this.expression();
                this.state = 7501;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_XMLCONCAT:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 7503;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & 2113) !== 0) || _la === 425)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7504;
                this.execute_param_clause();
                }
                break;
            case PostgreSqlParser.KW_XMLELEMENT:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 7505;
                this.match(PostgreSqlParser.KW_XMLELEMENT);
                this.state = 7506;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7507;
                this.match(PostgreSqlParser.KW_NAME);
                this.state = 7508;
                this.collabel();
                this.state = 7514;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 7509;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7512;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 961, this.context) ) {
                    case 1:
                        {
                        this.state = 7510;
                        this.xml_attributes();
                        }
                        break;
                    case 2:
                        {
                        this.state = 7511;
                        this.expr_list();
                        }
                        break;
                    }
                    }
                }

                this.state = 7516;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLEXISTS:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 7518;
                this.match(PostgreSqlParser.KW_XMLEXISTS);
                this.state = 7519;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7520;
                this.primaryExpression(0);
                this.state = 7521;
                this.xmlexists_argument();
                this.state = 7522;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLFOREST:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 7524;
                this.match(PostgreSqlParser.KW_XMLFOREST);
                this.state = 7525;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7526;
                this.xml_attribute_list();
                this.state = 7527;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLPARSE:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 7529;
                this.match(PostgreSqlParser.KW_XMLPARSE);
                this.state = 7530;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7531;
                this.document_or_content();
                this.state = 7532;
                this.expression();
                this.state = 7534;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 292 || _la === 347) {
                    {
                    this.state = 7533;
                    this.xml_whitespace_option();
                    }
                }

                this.state = 7536;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLPI:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 7538;
                this.match(PostgreSqlParser.KW_XMLPI);
                this.state = 7539;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7540;
                this.match(PostgreSqlParser.KW_NAME);
                this.state = 7541;
                this.collabel();
                this.state = 7544;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 7542;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7543;
                    this.expression();
                    }
                }

                this.state = 7546;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLROOT:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 7548;
                this.match(PostgreSqlParser.KW_XMLROOT);
                this.state = 7549;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7550;
                this.match(PostgreSqlParser.KW_XML);
                this.state = 7551;
                this.expression();
                this.state = 7552;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7553;
                this.xml_root_version();
                this.state = 7555;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 7554;
                    this.opt_xml_root_standalone();
                    }
                }

                this.state = 7557;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLSERIALIZE:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 7559;
                this.match(PostgreSqlParser.KW_XMLSERIALIZE);
                this.state = 7560;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7561;
                this.document_or_content();
                this.state = 7562;
                this.expression();
                this.state = 7563;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 7564;
                this.simpletypename();
                this.state = 7565;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_root_version(): Xml_root_versionContext {
        let localContext = new Xml_root_versionContext(this.context, this.state);
        this.enterRule(localContext, 916, PostgreSqlParser.RULE_xml_root_version);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7569;
            this.match(PostgreSqlParser.KW_VERSION);
            this.state = 7573;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 967, this.context) ) {
            case 1:
                {
                {
                this.state = 7570;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 7571;
                this.match(PostgreSqlParser.KW_VALUE);
                }
                }
                break;
            case 2:
                {
                this.state = 7572;
                this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_xml_root_standalone(): Opt_xml_root_standaloneContext {
        let localContext = new Opt_xml_root_standaloneContext(this.context, this.state);
        this.enterRule(localContext, 918, PostgreSqlParser.RULE_opt_xml_root_standalone);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7575;
            this.match(PostgreSqlParser.COMMA);
            this.state = 7576;
            this.match(PostgreSqlParser.KW_STANDALONE);
            this.state = 7582;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_VALUE:
                {
                {
                this.state = 7578;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 7577;
                    this.match(PostgreSqlParser.KW_NO);
                    }
                }

                this.state = 7580;
                this.match(PostgreSqlParser.KW_VALUE);
                }
                }
                break;
            case PostgreSqlParser.KW_YES:
                {
                this.state = 7581;
                this.match(PostgreSqlParser.KW_YES);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_attributes(): Xml_attributesContext {
        let localContext = new Xml_attributesContext(this.context, this.state);
        this.enterRule(localContext, 920, PostgreSqlParser.RULE_xml_attributes);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7584;
            this.match(PostgreSqlParser.KW_XMLATTRIBUTES);
            this.state = 7585;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 7586;
            this.xml_attribute_list();
            this.state = 7587;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_attribute_list(): Xml_attribute_listContext {
        let localContext = new Xml_attribute_listContext(this.context, this.state);
        this.enterRule(localContext, 922, PostgreSqlParser.RULE_xml_attribute_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7589;
            this.xml_attribute_el();
            this.state = 7594;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7590;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7591;
                this.xml_attribute_el();
                }
                }
                this.state = 7596;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_attribute_el(): Xml_attribute_elContext {
        let localContext = new Xml_attribute_elContext(this.context, this.state);
        this.enterRule(localContext, 924, PostgreSqlParser.RULE_xml_attribute_el);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7597;
            this.expression();
            this.state = 7600;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 7598;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 7599;
                this.collabel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public document_or_content(): Document_or_contentContext {
        let localContext = new Document_or_contentContext(this.context, this.state);
        this.enterRule(localContext, 926, PostgreSqlParser.RULE_document_or_content);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7602;
            _la = this.tokenStream.LA(1);
            if(!(_la === 166 || _la === 188)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_whitespace_option(): Xml_whitespace_optionContext {
        let localContext = new Xml_whitespace_optionContext(this.context, this.state);
        this.enterRule(localContext, 928, PostgreSqlParser.RULE_xml_whitespace_option);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7604;
            _la = this.tokenStream.LA(1);
            if(!(_la === 292 || _la === 347)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 7605;
            this.match(PostgreSqlParser.KW_WHITESPACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmlexists_argument(): Xmlexists_argumentContext {
        let localContext = new Xmlexists_argumentContext(this.context, this.state);
        this.enterRule(localContext, 930, PostgreSqlParser.RULE_xmlexists_argument);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7607;
            this.match(PostgreSqlParser.KW_PASSING);
            this.state = 7609;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 972, this.context) ) {
            case 1:
                {
                this.state = 7608;
                this.xml_passing_mech();
                }
                break;
            }
            this.state = 7611;
            this.primaryExpression(0);
            this.state = 7613;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 147) {
                {
                this.state = 7612;
                this.xml_passing_mech();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_passing_mech(): Xml_passing_mechContext {
        let localContext = new Xml_passing_mechContext(this.context, this.state);
        this.enterRule(localContext, 932, PostgreSqlParser.RULE_xml_passing_mech);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7615;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 7616;
            _la = this.tokenStream.LA(1);
            if(!(_la === 304 || _la === 450)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_clause(): Window_clauseContext {
        let localContext = new Window_clauseContext(this.context, this.state);
        this.enterRule(localContext, 934, PostgreSqlParser.RULE_window_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7618;
            this.match(PostgreSqlParser.KW_WINDOW);
            this.state = 7619;
            this.window_definition_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_definition_list(): Window_definition_listContext {
        let localContext = new Window_definition_listContext(this.context, this.state);
        this.enterRule(localContext, 936, PostgreSqlParser.RULE_window_definition_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7621;
            this.window_definition();
            this.state = 7626;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 974, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7622;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7623;
                    this.window_definition();
                    }
                    }
                }
                this.state = 7628;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 974, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_definition(): Window_definitionContext {
        let localContext = new Window_definitionContext(this.context, this.state);
        this.enterRule(localContext, 938, PostgreSqlParser.RULE_window_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7629;
            this.colid();
            this.state = 7630;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 7631;
            this.window_specification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public over_clause(): Over_clauseContext {
        let localContext = new Over_clauseContext(this.context, this.state);
        this.enterRule(localContext, 940, PostgreSqlParser.RULE_over_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7633;
            this.match(PostgreSqlParser.KW_OVER);
            this.state = 7636;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
                {
                this.state = 7634;
                this.window_specification();
                }
                break;
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 7635;
                this.colid();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_specification(): Window_specificationContext {
        let localContext = new Window_specificationContext(this.context, this.state);
        this.enterRule(localContext, 942, PostgreSqlParser.RULE_window_specification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7638;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 7640;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 976, this.context) ) {
            case 1:
                {
                this.state = 7639;
                this.colid();
                }
                break;
            }
            this.state = 7645;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 285) {
                {
                this.state = 7642;
                this.match(PostgreSqlParser.KW_PARTITION);
                this.state = 7643;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 7644;
                this.expr_list();
                }
            }

            this.state = 7648;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 83) {
                {
                this.state = 7647;
                this.sort_clause();
                }
            }

            this.state = 7651;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 299 || _la === 320 || _la === 481) {
                {
                this.state = 7650;
                this.opt_frame_clause();
                }
            }

            this.state = 7653;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_frame_clause(): Opt_frame_clauseContext {
        let localContext = new Opt_frame_clauseContext(this.context, this.state);
        this.enterRule(localContext, 944, PostgreSqlParser.RULE_opt_frame_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7655;
            _la = this.tokenStream.LA(1);
            if(!(_la === 299 || _la === 320 || _la === 481)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            {
            this.state = 7660;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 980, this.context) ) {
            case 1:
                {
                this.state = 7656;
                this.match(PostgreSqlParser.KW_BETWEEN);
                this.state = 7657;
                this.frame_bound();
                this.state = 7658;
                this.match(PostgreSqlParser.KW_AND);
                }
                break;
            }
            this.state = 7662;
            this.frame_bound();
            }
            this.state = 7673;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 199) {
                {
                this.state = 7664;
                this.match(PostgreSqlParser.KW_EXCLUDE);
                this.state = 7671;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_CURRENT:
                    {
                    this.state = 7665;
                    this.match(PostgreSqlParser.KW_CURRENT);
                    this.state = 7666;
                    this.match(PostgreSqlParser.KW_ROW);
                    }
                    break;
                case PostgreSqlParser.KW_GROUP:
                    {
                    this.state = 7667;
                    this.match(PostgreSqlParser.KW_GROUP);
                    }
                    break;
                case PostgreSqlParser.KW_TIES:
                    {
                    this.state = 7668;
                    this.match(PostgreSqlParser.KW_TIES);
                    }
                    break;
                case PostgreSqlParser.KW_NO:
                    {
                    this.state = 7669;
                    this.match(PostgreSqlParser.KW_NO);
                    this.state = 7670;
                    this.match(PostgreSqlParser.KW_OTHERS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frame_bound(): Frame_boundContext {
        let localContext = new Frame_boundContext(this.context, this.state);
        this.enterRule(localContext, 946, PostgreSqlParser.RULE_frame_bound);
        let _la: number;
        try {
            this.state = 7682;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 984, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7677;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 983, this.context) ) {
                case 1:
                    {
                    this.state = 7675;
                    this.match(PostgreSqlParser.KW_UNBOUNDED);
                    }
                    break;
                case 2:
                    {
                    this.state = 7676;
                    this.expression();
                    }
                    break;
                }
                this.state = 7679;
                _la = this.tokenStream.LA(1);
                if(!(_la === 208 || _la === 289)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7680;
                this.match(PostgreSqlParser.KW_CURRENT);
                this.state = 7681;
                this.match(PostgreSqlParser.KW_ROW);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row(): RowContext {
        let localContext = new RowContext(this.context, this.state);
        this.enterRule(localContext, 948, PostgreSqlParser.RULE_row);
        try {
            this.state = 7691;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ROW:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7684;
                this.explicit_row();
                }
                break;
            case PostgreSqlParser.OPEN_PAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7685;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7686;
                this.expr_list();
                this.state = 7687;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7688;
                this.expression();
                this.state = 7689;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explicit_row(): Explicit_rowContext {
        let localContext = new Explicit_rowContext(this.context, this.state);
        this.enterRule(localContext, 950, PostgreSqlParser.RULE_explicit_row);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7693;
            this.match(PostgreSqlParser.KW_ROW);
            this.state = 7694;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 7696;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 421516677) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 100660735) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                {
                this.state = 7695;
                this.expr_list();
                }
            }

            this.state = 7698;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sub_type(): Sub_typeContext {
        let localContext = new Sub_typeContext(this.context, this.state);
        this.enterRule(localContext, 952, PostgreSqlParser.RULE_sub_type);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7700;
            _la = this.tokenStream.LA(1);
            if(!(_la === 30 || _la === 34 || _la === 90)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public all_op(): All_opContext {
        let localContext = new All_opContext(this.context, this.state);
        this.enterRule(localContext, 954, PostgreSqlParser.RULE_all_op);
        try {
            this.state = 7704;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.Operator:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7702;
                this.match(PostgreSqlParser.Operator);
                }
                break;
            case PostgreSqlParser.STAR:
            case PostgreSqlParser.EQUAL:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.SLASH:
            case PostgreSqlParser.CARET:
            case PostgreSqlParser.LT:
            case PostgreSqlParser.GT:
            case PostgreSqlParser.LESS_EQUALS:
            case PostgreSqlParser.GREATER_EQUALS:
            case PostgreSqlParser.NOT_EQUALS:
            case PostgreSqlParser.PERCENT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7703;
                this.mathop();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mathop(): MathopContext {
        let localContext = new MathopContext(this.context, this.state);
        this.enterRule(localContext, 956, PostgreSqlParser.RULE_mathop);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7706;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 178517504) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qual_op(): Qual_opContext {
        let localContext = new Qual_opContext(this.context, this.state);
        this.enterRule(localContext, 958, PostgreSqlParser.RULE_qual_op);
        try {
            this.state = 7714;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.Operator:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7708;
                this.match(PostgreSqlParser.Operator);
                }
                break;
            case PostgreSqlParser.KW_OPERATOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7709;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 7710;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7711;
                this.any_operator();
                this.state = 7712;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qual_all_op(): Qual_all_opContext {
        let localContext = new Qual_all_opContext(this.context, this.state);
        this.enterRule(localContext, 960, PostgreSqlParser.RULE_qual_all_op);
        try {
            this.state = 7722;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.STAR:
            case PostgreSqlParser.EQUAL:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.SLASH:
            case PostgreSqlParser.CARET:
            case PostgreSqlParser.LT:
            case PostgreSqlParser.GT:
            case PostgreSqlParser.LESS_EQUALS:
            case PostgreSqlParser.GREATER_EQUALS:
            case PostgreSqlParser.NOT_EQUALS:
            case PostgreSqlParser.PERCENT:
            case PostgreSqlParser.Operator:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7716;
                this.all_op();
                }
                break;
            case PostgreSqlParser.KW_OPERATOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7717;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 7718;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7719;
                this.any_operator();
                this.state = 7720;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subquery_Op(): Subquery_OpContext {
        let localContext = new Subquery_OpContext(this.context, this.state);
        this.enterRule(localContext, 962, PostgreSqlParser.RULE_subquery_Op);
        let _la: number;
        try {
            this.state = 7733;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 992, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7724;
                this.qual_all_op();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7726;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 7725;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 7728;
                this.match(PostgreSqlParser.KW_LIKE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7730;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 7729;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 7732;
                this.match(PostgreSqlParser.KW_ILIKE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expr_list(): Expr_listContext {
        let localContext = new Expr_listContext(this.context, this.state);
        this.enterRule(localContext, 964, PostgreSqlParser.RULE_expr_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7735;
            this.expression();
            this.state = 7740;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 993, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7736;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7737;
                    this.expression();
                    }
                    }
                }
                this.state = 7742;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 993, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_expr_list_noparen(): Column_expr_list_noparenContext {
        let localContext = new Column_expr_list_noparenContext(this.context, this.state);
        this.enterRule(localContext, 966, PostgreSqlParser.RULE_column_expr_list_noparen);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7743;
            this.column_expr_noparen();
            this.state = 7748;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7744;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7745;
                this.column_expr_noparen();
                }
                }
                this.state = 7750;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_expr_list(): Column_expr_listContext {
        let localContext = new Column_expr_listContext(this.context, this.state);
        this.enterRule(localContext, 968, PostgreSqlParser.RULE_column_expr_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7751;
            this.column_expr();
            this.state = 7756;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7752;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7753;
                this.column_expr();
                }
                }
                this.state = 7758;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_expr(): Column_exprContext {
        let localContext = new Column_exprContext(this.context, this.state);
        this.enterRule(localContext, 970, PostgreSqlParser.RULE_column_expr);
        try {
            this.state = 7764;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 996, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 7759;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7760;
                this.expression();
                this.state = 7761;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7763;
                this.column_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_expr_noparen(): Column_expr_noparenContext {
        let localContext = new Column_expr_noparenContext(this.context, this.state);
        this.enterRule(localContext, 972, PostgreSqlParser.RULE_column_expr_noparen);
        try {
            this.state = 7768;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 997, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7766;
                this.expression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7767;
                this.column_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_arg_list(): Func_arg_listContext {
        let localContext = new Func_arg_listContext(this.context, this.state);
        this.enterRule(localContext, 974, PostgreSqlParser.RULE_func_arg_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7770;
            this.func_arg_expr();
            this.state = 7775;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 998, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7771;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7772;
                    this.func_arg_expr();
                    }
                    }
                }
                this.state = 7777;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 998, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_arg_expr(): Func_arg_exprContext {
        let localContext = new Func_arg_exprContext(this.context, this.state);
        this.enterRule(localContext, 976, PostgreSqlParser.RULE_func_arg_expr);
        let _la: number;
        try {
            this.state = 7783;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 999, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7778;
                this.expression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7779;
                this.type_function_name();
                this.state = 7780;
                _la = this.tokenStream.LA(1);
                if(!(_la === 20 || _la === 22)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7781;
                this.expression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public array_expr(): Array_exprContext {
        let localContext = new Array_exprContext(this.context, this.state);
        this.enterRule(localContext, 978, PostgreSqlParser.RULE_array_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7785;
            this.match(PostgreSqlParser.OPEN_BRACKET);
            this.state = 7788;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.PARAM:
            case PostgreSqlParser.Operator:
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_CASE:
            case PostgreSqlParser.KW_CAST:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_CURRENT_CATALOG:
            case PostgreSqlParser.KW_CURRENT_DATE:
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_TIME:
            case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_LOCALTIME:
            case PostgreSqlParser.KW_LOCALTIMESTAMP:
            case PostgreSqlParser.KW_NOT:
            case PostgreSqlParser.KW_NULL:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_UNIQUE:
            case PostgreSqlParser.KW_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.BinaryStringConstant:
            case PostgreSqlParser.HexadecimalStringConstant:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 7786;
                this.expr_list();
                }
                break;
            case PostgreSqlParser.OPEN_BRACKET:
                {
                this.state = 7787;
                this.array_expr_list();
                }
                break;
            case PostgreSqlParser.CLOSE_BRACKET:
                break;
            default:
                break;
            }
            this.state = 7790;
            this.match(PostgreSqlParser.CLOSE_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public array_expr_list(): Array_expr_listContext {
        let localContext = new Array_expr_listContext(this.context, this.state);
        this.enterRule(localContext, 980, PostgreSqlParser.RULE_array_expr_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7792;
            this.array_expr();
            this.state = 7797;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7793;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7794;
                this.array_expr();
                }
                }
                this.state = 7799;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extract_list(): Extract_listContext {
        let localContext = new Extract_listContext(this.context, this.state);
        this.enterRule(localContext, 982, PostgreSqlParser.RULE_extract_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7800;
            this.extract_arg();
            this.state = 7801;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 7802;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extract_arg(): Extract_argContext {
        let localContext = new Extract_argContext(this.context, this.state);
        this.enterRule(localContext, 984, PostgreSqlParser.RULE_extract_arg);
        try {
            this.state = 7812;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1002, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7804;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7805;
                this.match(PostgreSqlParser.KW_YEAR);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7806;
                this.match(PostgreSqlParser.KW_MONTH);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7807;
                this.match(PostgreSqlParser.KW_DAY);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7808;
                this.match(PostgreSqlParser.KW_HOUR);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7809;
                this.match(PostgreSqlParser.KW_MINUTE);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7810;
                this.match(PostgreSqlParser.KW_SECOND);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7811;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unicode_normal_form(): Unicode_normal_formContext {
        let localContext = new Unicode_normal_formContext(this.context, this.state);
        this.enterRule(localContext, 986, PostgreSqlParser.RULE_unicode_normal_form);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7814;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 483)) & ~0x1F) === 0 && ((1 << (_la - 483)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public overlay_list(): Overlay_listContext {
        let localContext = new Overlay_listContext(this.context, this.state);
        this.enterRule(localContext, 988, PostgreSqlParser.RULE_overlay_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7816;
            this.expression();
            this.state = 7817;
            this.match(PostgreSqlParser.KW_PLACING);
            this.state = 7818;
            this.expression();
            this.state = 7819;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 7820;
            this.expression();
            this.state = 7823;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 62) {
                {
                this.state = 7821;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 7822;
                this.expression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public substr_list(): Substr_listContext {
        let localContext = new Substr_listContext(this.context, this.state);
        this.enterRule(localContext, 990, PostgreSqlParser.RULE_substr_list);
        let _la: number;
        try {
            this.state = 7846;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1006, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7825;
                this.expression();
                this.state = 7826;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 7827;
                this.expression();
                this.state = 7830;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 7828;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 7829;
                    this.expression();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7832;
                this.expression();
                this.state = 7833;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 7834;
                this.expression();
                this.state = 7837;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64) {
                    {
                    this.state = 7835;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 7836;
                    this.expression();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7839;
                this.expression();
                this.state = 7840;
                this.match(PostgreSqlParser.KW_SIMILAR);
                this.state = 7841;
                this.expression();
                this.state = 7842;
                this.match(PostgreSqlParser.KW_ESCAPE);
                this.state = 7843;
                this.expression();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7845;
                this.expr_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trim_list(): Trim_listContext {
        let localContext = new Trim_listContext(this.context, this.state);
        this.enterRule(localContext, 992, PostgreSqlParser.RULE_trim_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7852;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1008, this.context) ) {
            case 1:
                {
                this.state = 7849;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 421516677) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 100660735) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                    {
                    this.state = 7848;
                    this.expression();
                    }
                }

                this.state = 7851;
                this.match(PostgreSqlParser.KW_FROM);
                }
                break;
            }
            this.state = 7854;
            this.expr_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public when_clause(): When_clauseContext {
        let localContext = new When_clauseContext(this.context, this.state);
        this.enterRule(localContext, 994, PostgreSqlParser.RULE_when_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7856;
            this.match(PostgreSqlParser.KW_WHEN);
            this.state = 7857;
            this.expression();
            this.state = 7858;
            this.match(PostgreSqlParser.KW_THEN);
            this.state = 7859;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indirection_el(): Indirection_elContext {
        let localContext = new Indirection_elContext(this.context, this.state);
        this.enterRule(localContext, 996, PostgreSqlParser.RULE_indirection_el);
        let _la: number;
        try {
            this.state = 7878;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.DOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7861;
                this.match(PostgreSqlParser.DOT);
                this.state = 7864;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ALL:
                case PostgreSqlParser.KW_ANALYSE:
                case PostgreSqlParser.KW_ANALYZE:
                case PostgreSqlParser.KW_AND:
                case PostgreSqlParser.KW_ANY:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_AS:
                case PostgreSqlParser.KW_ASC:
                case PostgreSqlParser.KW_ASYMMETRIC:
                case PostgreSqlParser.KW_BOTH:
                case PostgreSqlParser.KW_CASE:
                case PostgreSqlParser.KW_CAST:
                case PostgreSqlParser.KW_CHECK:
                case PostgreSqlParser.KW_COLLATE:
                case PostgreSqlParser.KW_COLUMN:
                case PostgreSqlParser.KW_CONSTRAINT:
                case PostgreSqlParser.KW_CREATE:
                case PostgreSqlParser.KW_CURRENT_CATALOG:
                case PostgreSqlParser.KW_CURRENT_DATE:
                case PostgreSqlParser.KW_CURRENT_ROLE:
                case PostgreSqlParser.KW_CURRENT_TIME:
                case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
                case PostgreSqlParser.KW_CURRENT_USER:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_DEFERRABLE:
                case PostgreSqlParser.KW_DESC:
                case PostgreSqlParser.KW_DISTINCT:
                case PostgreSqlParser.KW_DO:
                case PostgreSqlParser.KW_ELSE:
                case PostgreSqlParser.KW_EXCEPT:
                case PostgreSqlParser.KW_FALSE:
                case PostgreSqlParser.KW_FETCH:
                case PostgreSqlParser.KW_FOR:
                case PostgreSqlParser.KW_FOREIGN:
                case PostgreSqlParser.KW_FROM:
                case PostgreSqlParser.KW_GRANT:
                case PostgreSqlParser.KW_GROUP:
                case PostgreSqlParser.KW_HAVING:
                case PostgreSqlParser.KW_IN:
                case PostgreSqlParser.KW_INITIALLY:
                case PostgreSqlParser.KW_INTERSECT:
                case PostgreSqlParser.KW_LATERAL:
                case PostgreSqlParser.KW_LEADING:
                case PostgreSqlParser.KW_LIMIT:
                case PostgreSqlParser.KW_LOCALTIME:
                case PostgreSqlParser.KW_LOCALTIMESTAMP:
                case PostgreSqlParser.KW_NOT:
                case PostgreSqlParser.KW_NULL:
                case PostgreSqlParser.KW_OFFSET:
                case PostgreSqlParser.KW_ON:
                case PostgreSqlParser.KW_ONLY:
                case PostgreSqlParser.KW_OR:
                case PostgreSqlParser.KW_ORDER:
                case PostgreSqlParser.KW_PLACING:
                case PostgreSqlParser.KW_PRIMARY:
                case PostgreSqlParser.KW_REFERENCES:
                case PostgreSqlParser.KW_RETURNING:
                case PostgreSqlParser.KW_SELECT:
                case PostgreSqlParser.KW_SESSION_USER:
                case PostgreSqlParser.KW_SOME:
                case PostgreSqlParser.KW_SYMMETRIC:
                case PostgreSqlParser.KW_TABLE:
                case PostgreSqlParser.KW_THEN:
                case PostgreSqlParser.KW_TO:
                case PostgreSqlParser.KW_TRAILING:
                case PostgreSqlParser.KW_TRUE:
                case PostgreSqlParser.KW_UNION:
                case PostgreSqlParser.KW_UNIQUE:
                case PostgreSqlParser.KW_USER:
                case PostgreSqlParser.KW_USING:
                case PostgreSqlParser.KW_VARIADIC:
                case PostgreSqlParser.KW_WHEN:
                case PostgreSqlParser.KW_WHERE:
                case PostgreSqlParser.KW_WINDOW:
                case PostgreSqlParser.KW_WITH:
                case PostgreSqlParser.KW_AUTHORIZATION:
                case PostgreSqlParser.KW_BINARY:
                case PostgreSqlParser.KW_COLLATION:
                case PostgreSqlParser.KW_CONCURRENTLY:
                case PostgreSqlParser.KW_CROSS:
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                case PostgreSqlParser.KW_FREEZE:
                case PostgreSqlParser.KW_FULL:
                case PostgreSqlParser.KW_ILIKE:
                case PostgreSqlParser.KW_INNER:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_ISNULL:
                case PostgreSqlParser.KW_JOIN:
                case PostgreSqlParser.KW_LEFT:
                case PostgreSqlParser.KW_LIKE:
                case PostgreSqlParser.KW_NATURAL:
                case PostgreSqlParser.KW_NOTNULL:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_OVERLAPS:
                case PostgreSqlParser.KW_RIGHT:
                case PostgreSqlParser.KW_SIMILAR:
                case PostgreSqlParser.KW_VERBOSE:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_END:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_TABLESAMPLE:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 7862;
                    this.collabel();
                    }
                    break;
                case PostgreSqlParser.STAR:
                    {
                    this.state = 7863;
                    this.match(PostgreSqlParser.STAR);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case PostgreSqlParser.OPEN_BRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7866;
                this.match(PostgreSqlParser.OPEN_BRACKET);
                this.state = 7875;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1012, this.context) ) {
                case 1:
                    {
                    this.state = 7867;
                    this.expression();
                    }
                    break;
                case 2:
                    {
                    this.state = 7869;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 421516677) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 100660735) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                        {
                        this.state = 7868;
                        this.expression();
                        }
                    }

                    this.state = 7871;
                    this.match(PostgreSqlParser.COLON);
                    this.state = 7873;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 421516677) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 100660735) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                        {
                        this.state = 7872;
                        this.expression();
                        }
                    }

                    }
                    break;
                }
                this.state = 7877;
                this.match(PostgreSqlParser.CLOSE_BRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indirection(): IndirectionContext {
        let localContext = new IndirectionContext(this.context, this.state);
        this.enterRule(localContext, 998, PostgreSqlParser.RULE_indirection);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7881;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 7880;
                    this.indirection_el();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 7883;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1014, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_indirection(): Opt_indirectionContext {
        let localContext = new Opt_indirectionContext(this.context, this.state);
        this.enterRule(localContext, 1000, PostgreSqlParser.RULE_opt_indirection);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7888;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1015, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7885;
                    this.indirection_el();
                    }
                    }
                }
                this.state = 7890;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1015, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public target_list(): Target_listContext {
        let localContext = new Target_listContext(this.context, this.state);
        this.enterRule(localContext, 1002, PostgreSqlParser.RULE_target_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7891;
            this.target_el();
            this.state = 7896;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1016, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7892;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7893;
                    this.target_el();
                    }
                    }
                }
                this.state = 7898;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1016, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public target_el(): Target_elContext {
        let localContext = new Target_elContext(this.context, this.state);
        this.enterRule(localContext, 1004, PostgreSqlParser.RULE_target_el);
        try {
            this.state = 7907;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1018, this.context) ) {
            case 1:
                localContext = new Target_labelContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7899;
                this.column_expr_noparen();
                this.state = 7904;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1017, this.context) ) {
                case 1:
                    {
                    this.state = 7900;
                    this.match(PostgreSqlParser.KW_AS);
                    this.state = 7901;
                    this.collabel();
                    }
                    break;
                case 2:
                    {
                    this.state = 7902;
                    this.identifier();
                    }
                    break;
                case 3:
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new Target_starContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7906;
                this.match(PostgreSqlParser.STAR);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualified_name_list(): Qualified_name_listContext {
        let localContext = new Qualified_name_listContext(this.context, this.state);
        this.enterRule(localContext, 1006, PostgreSqlParser.RULE_qualified_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7909;
            this.qualified_name();
            this.state = 7914;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7910;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7911;
                this.qualified_name();
                }
                }
                this.state = 7916;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_name_list(): Table_name_listContext {
        let localContext = new Table_name_listContext(this.context, this.state);
        this.enterRule(localContext, 1008, PostgreSqlParser.RULE_table_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7917;
            this.table_name();
            this.state = 7922;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7918;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7919;
                this.table_name();
                }
                }
                this.state = 7924;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schema_name_list(): Schema_name_listContext {
        let localContext = new Schema_name_listContext(this.context, this.state);
        this.enterRule(localContext, 1010, PostgreSqlParser.RULE_schema_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7925;
            this.schema_name();
            this.state = 7930;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7926;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7927;
                this.schema_name();
                }
                }
                this.state = 7932;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public database_nameList(): Database_nameListContext {
        let localContext = new Database_nameListContext(this.context, this.state);
        this.enterRule(localContext, 1012, PostgreSqlParser.RULE_database_nameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7933;
            this.database_name();
            this.state = 7938;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7934;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7935;
                this.database_name();
                }
                }
                this.state = 7940;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedure_name_list(): Procedure_name_listContext {
        let localContext = new Procedure_name_listContext(this.context, this.state);
        this.enterRule(localContext, 1014, PostgreSqlParser.RULE_procedure_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7941;
            this.procedure_name();
            this.state = 7946;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7942;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7943;
                this.procedure_name();
                }
                }
                this.state = 7948;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablespace_name_create(): Tablespace_name_createContext {
        let localContext = new Tablespace_name_createContext(this.context, this.state);
        this.enterRule(localContext, 1016, PostgreSqlParser.RULE_tablespace_name_create);
        try {
            localContext = new TablespaceNameCreateContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7949;
            this.qualified_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablespace_name(): Tablespace_nameContext {
        let localContext = new Tablespace_nameContext(this.context, this.state);
        this.enterRule(localContext, 1018, PostgreSqlParser.RULE_tablespace_name);
        try {
            localContext = new TablespaceNameContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7951;
            this.qualified_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_name_create(): Table_name_createContext {
        let localContext = new Table_name_createContext(this.context, this.state);
        this.enterRule(localContext, 1020, PostgreSqlParser.RULE_table_name_create);
        try {
            localContext = new TableNameCreateContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7953;
            this.qualified_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_name(): Table_nameContext {
        let localContext = new Table_nameContext(this.context, this.state);
        this.enterRule(localContext, 1022, PostgreSqlParser.RULE_table_name);
        try {
            localContext = new TableNameContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7955;
            this.qualified_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public view_name_create(): View_name_createContext {
        let localContext = new View_name_createContext(this.context, this.state);
        this.enterRule(localContext, 1024, PostgreSqlParser.RULE_view_name_create);
        try {
            localContext = new ViewNameCreateContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7957;
            this.qualified_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public view_name(): View_nameContext {
        let localContext = new View_nameContext(this.context, this.state);
        this.enterRule(localContext, 1026, PostgreSqlParser.RULE_view_name);
        try {
            localContext = new ViewNameContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7959;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualified_name(): Qualified_nameContext {
        let localContext = new Qualified_nameContext(this.context, this.state);
        this.enterRule(localContext, 1028, PostgreSqlParser.RULE_qualified_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7961;
            this.colid();
            this.state = 7963;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1024, this.context) ) {
            case 1:
                {
                this.state = 7962;
                this.indirection();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablespace_name_list(): Tablespace_name_listContext {
        let localContext = new Tablespace_name_listContext(this.context, this.state);
        this.enterRule(localContext, 1030, PostgreSqlParser.RULE_tablespace_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7965;
            this.tablespace_name();
            this.state = 7970;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7966;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7967;
                this.tablespace_name();
                }
                }
                this.state = 7972;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public name_list(): Name_listContext {
        let localContext = new Name_listContext(this.context, this.state);
        this.enterRule(localContext, 1032, PostgreSqlParser.RULE_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7973;
            this.colid();
            this.state = 7978;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7974;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7975;
                this.colid();
                }
                }
                this.state = 7980;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public database_name_create(): Database_name_createContext {
        let localContext = new Database_name_createContext(this.context, this.state);
        this.enterRule(localContext, 1034, PostgreSqlParser.RULE_database_name_create);
        try {
            localContext = new DatabaseNameCreateContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7981;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public database_name(): Database_nameContext {
        let localContext = new Database_nameContext(this.context, this.state);
        this.enterRule(localContext, 1036, PostgreSqlParser.RULE_database_name);
        try {
            localContext = new DatabaseNameContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7983;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schema_name(): Schema_nameContext {
        let localContext = new Schema_nameContext(this.context, this.state);
        this.enterRule(localContext, 1038, PostgreSqlParser.RULE_schema_name);
        try {
            localContext = new SchemaNameContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7985;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routine_name_create(): Routine_name_createContext {
        let localContext = new Routine_name_createContext(this.context, this.state);
        this.enterRule(localContext, 1040, PostgreSqlParser.RULE_routine_name_create);
        try {
            localContext = new RoutineNameCreateContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7987;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routine_name(): Routine_nameContext {
        let localContext = new Routine_nameContext(this.context, this.state);
        this.enterRule(localContext, 1042, PostgreSqlParser.RULE_routine_name);
        try {
            localContext = new RoutineNameContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7989;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedure_name(): Procedure_nameContext {
        let localContext = new Procedure_nameContext(this.context, this.state);
        this.enterRule(localContext, 1044, PostgreSqlParser.RULE_procedure_name);
        try {
            this.state = 7995;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1027, this.context) ) {
            case 1:
                localContext = new ProcedureNameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7991;
                this.type_function_name();
                }
                break;
            case 2:
                localContext = new ProcedureNameContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7992;
                this.colid();
                this.state = 7993;
                this.indirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedure_name_create(): Procedure_name_createContext {
        let localContext = new Procedure_name_createContext(this.context, this.state);
        this.enterRule(localContext, 1046, PostgreSqlParser.RULE_procedure_name_create);
        try {
            this.state = 8001;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1028, this.context) ) {
            case 1:
                localContext = new ProcedureNameCreateContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7997;
                this.type_function_name();
                }
                break;
            case 2:
                localContext = new ProcedureNameCreateContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7998;
                this.colid();
                this.state = 7999;
                this.indirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_name(): Column_nameContext {
        let localContext = new Column_nameContext(this.context, this.state);
        this.enterRule(localContext, 1048, PostgreSqlParser.RULE_column_name);
        try {
            this.state = 8007;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1029, this.context) ) {
            case 1:
                localContext = new ColumnNameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8003;
                this.colid();
                this.state = 8004;
                this.opt_indirection();
                }
                break;
            case 2:
                localContext = new ColumnNameMatchContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8006;
                if (!(this.shouldMatchEmpty())) {
                    throw this.createFailedPredicateException("this.shouldMatchEmpty()");
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_name_create(): Column_name_createContext {
        let localContext = new Column_name_createContext(this.context, this.state);
        this.enterRule(localContext, 1050, PostgreSqlParser.RULE_column_name_create);
        try {
            localContext = new ColumnNameCreateContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8009;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_name_create(): Function_name_createContext {
        let localContext = new Function_name_createContext(this.context, this.state);
        this.enterRule(localContext, 1052, PostgreSqlParser.RULE_function_name_create);
        try {
            this.state = 8015;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1030, this.context) ) {
            case 1:
                localContext = new FunctionNameCreateContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8011;
                this.type_function_name();
                }
                break;
            case 2:
                localContext = new FunctionNameCreateContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8012;
                this.colid();
                this.state = 8013;
                this.indirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_name(): Function_nameContext {
        let localContext = new Function_nameContext(this.context, this.state);
        this.enterRule(localContext, 1054, PostgreSqlParser.RULE_function_name);
        try {
            this.state = 8021;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1031, this.context) ) {
            case 1:
                localContext = new FunctionNameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8017;
                this.type_function_name();
                }
                break;
            case 2:
                localContext = new FunctionNameContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8018;
                this.colid();
                this.state = 8019;
                this.indirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public usual_name(): Usual_nameContext {
        let localContext = new Usual_nameContext(this.context, this.state);
        this.enterRule(localContext, 1056, PostgreSqlParser.RULE_usual_name);
        try {
            this.state = 8027;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1032, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8023;
                this.type_function_name();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8024;
                this.colid();
                this.state = 8025;
                this.indirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sconst(): SconstContext {
        let localContext = new SconstContext(this.context, this.state);
        this.enterRule(localContext, 1058, PostgreSqlParser.RULE_sconst);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8029;
            this.anysconst();
            this.state = 8032;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1033, this.context) ) {
            case 1:
                {
                this.state = 8030;
                this.match(PostgreSqlParser.KW_UESCAPE);
                this.state = 8031;
                this.anysconst();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public anysconst(): AnysconstContext {
        let localContext = new AnysconstContext(this.context, this.state);
        this.enterRule(localContext, 1060, PostgreSqlParser.RULE_anysconst);
        let _la: number;
        try {
            this.state = 8045;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.StringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8034;
                this.match(PostgreSqlParser.StringConstant);
                }
                break;
            case PostgreSqlParser.UnicodeEscapeStringConstant:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8035;
                this.match(PostgreSqlParser.UnicodeEscapeStringConstant);
                }
                break;
            case PostgreSqlParser.BeginDollarStringConstant:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8036;
                this.match(PostgreSqlParser.BeginDollarStringConstant);
                this.state = 8040;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 588) {
                    {
                    {
                    this.state = 8037;
                    this.match(PostgreSqlParser.DollarText);
                    }
                    }
                    this.state = 8042;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 8043;
                this.match(PostgreSqlParser.EndDollarStringConstant);
                }
                break;
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8044;
                this.match(PostgreSqlParser.EscapeStringConstant);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signediconst(): SignediconstContext {
        let localContext = new SignediconstContext(this.context, this.state);
        this.enterRule(localContext, 1062, PostgreSqlParser.RULE_signediconst);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8048;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 12 || _la === 13) {
                {
                this.state = 8047;
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 13)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 8050;
            this.match(PostgreSqlParser.Integral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rolespec(): RolespecContext {
        let localContext = new RolespecContext(this.context, this.state);
        this.enterRule(localContext, 1064, PostgreSqlParser.RULE_rolespec);
        try {
            this.state = 8057;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8052;
                this.nonreservedword();
                }
                break;
            case PostgreSqlParser.KW_CURRENT_USER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8053;
                this.match(PostgreSqlParser.KW_CURRENT_USER);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_ROLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8054;
                this.match(PostgreSqlParser.KW_CURRENT_ROLE);
                }
                break;
            case PostgreSqlParser.KW_SESSION_USER:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8055;
                this.match(PostgreSqlParser.KW_SESSION_USER);
                }
                break;
            case PostgreSqlParser.KW_PUBLIC:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8056;
                this.match(PostgreSqlParser.KW_PUBLIC);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public role_list(): Role_listContext {
        let localContext = new Role_listContext(this.context, this.state);
        this.enterRule(localContext, 1066, PostgreSqlParser.RULE_role_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8059;
            this.rolespec();
            this.state = 8064;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8060;
                this.match(PostgreSqlParser.COMMA);
                this.state = 8061;
                this.rolespec();
                }
                }
                this.state = 8066;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colid(): ColidContext {
        let localContext = new ColidContext(this.context, this.state);
        this.enterRule(localContext, 1068, PostgreSqlParser.RULE_colid);
        try {
            this.state = 8071;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1039, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8067;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8068;
                this.unreserved_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8069;
                this.col_name_keyword();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8070;
                this.plsql_unreserved_keyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_function_name(): Type_function_nameContext {
        let localContext = new Type_function_nameContext(this.context, this.state);
        this.enterRule(localContext, 1070, PostgreSqlParser.RULE_type_function_name);
        try {
            this.state = 8077;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1040, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8073;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8074;
                this.unreserved_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8075;
                this.plsql_unreserved_keyword();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8076;
                this.type_func_name_keyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonreservedword(): NonreservedwordContext {
        let localContext = new NonreservedwordContext(this.context, this.state);
        this.enterRule(localContext, 1072, PostgreSqlParser.RULE_nonreservedword);
        try {
            this.state = 8083;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1041, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8079;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8080;
                this.unreserved_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8081;
                this.col_name_keyword();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8082;
                this.type_func_name_keyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collabel(): CollabelContext {
        let localContext = new CollabelContext(this.context, this.state);
        this.enterRule(localContext, 1074, PostgreSqlParser.RULE_collabel);
        try {
            this.state = 8088;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1042, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8085;
                this.nonreservedword();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8086;
                this.plsql_unreserved_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8087;
                this.reserved_keyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1076, PostgreSqlParser.RULE_identifier);
        try {
            this.state = 8101;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8090;
                this.match(PostgreSqlParser.Identifier);
                this.state = 8093;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1043, this.context) ) {
                case 1:
                    {
                    this.state = 8091;
                    this.match(PostgreSqlParser.KW_UESCAPE);
                    this.state = 8092;
                    this.anysconst();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8095;
                this.sconst();
                }
                break;
            case PostgreSqlParser.QuotedIdentifier:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8096;
                this.match(PostgreSqlParser.QuotedIdentifier);
                }
                break;
            case PostgreSqlParser.UnicodeQuotedIdentifier:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8097;
                this.match(PostgreSqlParser.UnicodeQuotedIdentifier);
                }
                break;
            case PostgreSqlParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8098;
                this.match(PostgreSqlParser.PLSQLVARIABLENAME);
                }
                break;
            case PostgreSqlParser.PLSQLIDENTIFIER:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 8099;
                this.match(PostgreSqlParser.PLSQLIDENTIFIER);
                }
                break;
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 8100;
                this.plsql_unreserved_keyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unreserved_keyword(): Unreserved_keywordContext {
        let localContext = new Unreserved_keywordContext(this.context, this.state);
        this.enterRule(localContext, 1078, PostgreSqlParser.RULE_unreserved_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8103;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 124)) & ~0x1F) === 0 && ((1 << (_la - 124)) & 4294967265) !== 0) || ((((_la - 156)) & ~0x1F) === 0 && ((1 << (_la - 156)) & 4294967295) !== 0) || ((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & 4294967295) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & 4294705663) !== 0) || ((((_la - 252)) & ~0x1F) === 0 && ((1 << (_la - 252)) & 4294967295) !== 0) || ((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & 4294967295) !== 0) || ((((_la - 316)) & ~0x1F) === 0 && ((1 << (_la - 316)) & 4294967295) !== 0) || ((((_la - 348)) & ~0x1F) === 0 && ((1 << (_la - 348)) & 4294967295) !== 0) || ((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & 127) !== 0) || ((((_la - 433)) & ~0x1F) === 0 && ((1 << (_la - 433)) & 4291821567) !== 0) || ((((_la - 465)) & ~0x1F) === 0 && ((1 << (_la - 465)) & 16770399) !== 0) || _la === 547 || _la === 548)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public col_name_keyword(): Col_name_keywordContext {
        let localContext = new Col_name_keywordContext(this.context, this.state);
        this.enterRule(localContext, 1080, PostgreSqlParser.RULE_col_name_keyword);
        try {
            this.state = 8156;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1045, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8105;
                this.match(PostgreSqlParser.KW_BETWEEN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8106;
                this.match(PostgreSqlParser.KW_BIGINT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8107;
                this.bit();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8108;
                this.match(PostgreSqlParser.KW_BOOLEAN);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8109;
                this.match(PostgreSqlParser.KW_CHAR);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 8110;
                this.character();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 8111;
                this.match(PostgreSqlParser.KW_COALESCE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 8112;
                this.match(PostgreSqlParser.KW_DEC);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 8113;
                this.match(PostgreSqlParser.KW_DECIMAL);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 8114;
                this.match(PostgreSqlParser.KW_EXISTS);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 8115;
                this.match(PostgreSqlParser.KW_EXTRACT);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 8116;
                this.match(PostgreSqlParser.KW_FLOAT);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 8117;
                this.match(PostgreSqlParser.KW_GREATEST);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 8118;
                this.match(PostgreSqlParser.KW_GROUPING);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 8119;
                this.match(PostgreSqlParser.KW_INOUT);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 8120;
                this.match(PostgreSqlParser.KW_INT);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 8121;
                this.match(PostgreSqlParser.KW_INTEGER);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 8122;
                this.match(PostgreSqlParser.KW_INTERVAL);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 8123;
                this.match(PostgreSqlParser.KW_LEAST);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 8124;
                this.match(PostgreSqlParser.KW_NATIONAL);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 8125;
                this.match(PostgreSqlParser.KW_NCHAR);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 8126;
                this.match(PostgreSqlParser.KW_NONE);
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 8127;
                this.match(PostgreSqlParser.KW_NORMALIZE);
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 8128;
                this.match(PostgreSqlParser.KW_NULLIF);
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 8129;
                this.numeric();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 8130;
                this.match(PostgreSqlParser.KW_OUT);
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 8131;
                this.match(PostgreSqlParser.KW_OVERLAY);
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 8132;
                this.match(PostgreSqlParser.KW_POSITION);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 8133;
                this.match(PostgreSqlParser.KW_PRECISION);
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 8134;
                this.match(PostgreSqlParser.KW_REAL);
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 8135;
                this.match(PostgreSqlParser.KW_ROW);
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 8136;
                this.match(PostgreSqlParser.KW_SETOF);
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 8137;
                this.match(PostgreSqlParser.KW_SMALLINT);
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 8138;
                this.match(PostgreSqlParser.KW_SUBSTRING);
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 8139;
                this.match(PostgreSqlParser.KW_TIME);
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 8140;
                this.match(PostgreSqlParser.KW_TIMESTAMP);
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 8141;
                this.match(PostgreSqlParser.KW_TREAT);
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 8142;
                this.match(PostgreSqlParser.KW_TRIM);
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 8143;
                this.match(PostgreSqlParser.KW_VALUES);
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 8144;
                this.match(PostgreSqlParser.KW_VARCHAR);
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 8145;
                this.match(PostgreSqlParser.KW_XMLATTRIBUTES);
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 8146;
                this.match(PostgreSqlParser.KW_XMLCONCAT);
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 8147;
                this.match(PostgreSqlParser.KW_XMLELEMENT);
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 8148;
                this.match(PostgreSqlParser.KW_XMLEXISTS);
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 8149;
                this.match(PostgreSqlParser.KW_XMLFOREST);
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 8150;
                this.match(PostgreSqlParser.KW_XMLNAMESPACES);
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 8151;
                this.match(PostgreSqlParser.KW_XMLPARSE);
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 8152;
                this.match(PostgreSqlParser.KW_XMLPI);
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 8153;
                this.match(PostgreSqlParser.KW_XMLROOT);
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 8154;
                this.match(PostgreSqlParser.KW_XMLSERIALIZE);
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 8155;
                this.match(PostgreSqlParser.KW_XMLTABLE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_func_name_keyword(): Type_func_name_keywordContext {
        let localContext = new Type_func_name_keywordContext(this.context, this.state);
        this.enterRule(localContext, 1082, PostgreSqlParser.RULE_type_func_name_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8158;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & 8126463) !== 0) || _la === 472)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reserved_keyword(): Reserved_keywordContext {
        let localContext = new Reserved_keywordContext(this.context, this.state);
        this.enterRule(localContext, 1084, PostgreSqlParser.RULE_reserved_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8160;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4286578687) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 4294966783) !== 0) || ((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 4095) !== 0) || _la === 454)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comp_option(): Comp_optionContext {
        let localContext = new Comp_optionContext(this.context, this.state);
        this.enterRule(localContext, 1086, PostgreSqlParser.RULE_comp_option);
        let _la: number;
        try {
            this.state = 8171;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1046, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8162;
                this.match(PostgreSqlParser.Operator);
                this.state = 8163;
                this.match(PostgreSqlParser.KW_OPTION);
                this.state = 8164;
                this.match(PostgreSqlParser.KW_DUMP);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8165;
                this.match(PostgreSqlParser.Operator);
                this.state = 8166;
                this.match(PostgreSqlParser.KW_PRINT_STRICT_PARAMS);
                this.state = 8167;
                this.option_value();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8168;
                this.match(PostgreSqlParser.Operator);
                this.state = 8169;
                this.match(PostgreSqlParser.KW_VARIABLE_CONFLICT);
                this.state = 8170;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 493)) & ~0x1F) === 0 && ((1 << (_la - 493)) & 7) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public option_value(): Option_valueContext {
        let localContext = new Option_valueContext(this.context, this.state);
        this.enterRule(localContext, 1088, PostgreSqlParser.RULE_option_value);
        try {
            this.state = 8177;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1047, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8173;
                this.sconst();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8174;
                this.reserved_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8175;
                this.plsql_unreserved_keyword();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8176;
                this.unreserved_keyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pl_block(): Pl_blockContext {
        let localContext = new Pl_blockContext(this.context, this.state);
        this.enterRule(localContext, 1090, PostgreSqlParser.RULE_pl_block);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8179;
            this.decl_sect();
            this.state = 8180;
            this.match(PostgreSqlParser.KW_BEGIN);
            this.state = 8181;
            this.proc_sect();
            this.state = 8183;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 517) {
                {
                this.state = 8182;
                this.exception_sect();
                }
            }

            this.state = 8185;
            this.match(PostgreSqlParser.KW_END);
            this.state = 8187;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 1572823) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 8186;
                this.any_identifier();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decl_sect(): Decl_sectContext {
        let localContext = new Decl_sectContext(this.context, this.state);
        this.enterRule(localContext, 1092, PostgreSqlParser.RULE_decl_sect);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8190;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 18) {
                {
                this.state = 8189;
                this.label_decl();
                }
            }

            this.state = 8196;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 178) {
                {
                this.state = 8192;
                this.match(PostgreSqlParser.KW_DECLARE);
                this.state = 8194;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1051, this.context) ) {
                case 1:
                    {
                    this.state = 8193;
                    this.decl_stmts();
                    }
                    break;
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decl_stmts(): Decl_stmtsContext {
        let localContext = new Decl_stmtsContext(this.context, this.state);
        this.enterRule(localContext, 1094, PostgreSqlParser.RULE_decl_stmts);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8201;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    this.state = 8201;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 1053, this.context) ) {
                    case 1:
                        {
                        this.state = 8198;
                        this.decl_statement();
                        }
                        break;
                    case 2:
                        {
                        this.state = 8199;
                        this.match(PostgreSqlParser.KW_DECLARE);
                        }
                        break;
                    case 3:
                        {
                        this.state = 8200;
                        this.label_decl();
                        }
                        break;
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 8203;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1054, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public label_decl(): Label_declContext {
        let localContext = new Label_declContext(this.context, this.state);
        this.enterRule(localContext, 1096, PostgreSqlParser.RULE_label_decl);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8205;
            this.match(PostgreSqlParser.LESS_LESS);
            this.state = 8206;
            this.any_identifier();
            this.state = 8207;
            this.match(PostgreSqlParser.GREATER_GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decl_statement(): Decl_statementContext {
        let localContext = new Decl_statementContext(this.context, this.state);
        this.enterRule(localContext, 1098, PostgreSqlParser.RULE_decl_statement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8209;
            this.any_identifier();
            this.state = 8238;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1061, this.context) ) {
            case 1:
                {
                this.state = 8210;
                this.match(PostgreSqlParser.KW_ALIAS);
                this.state = 8211;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 8212;
                this.decl_aliasitem();
                }
                break;
            case 2:
                {
                this.state = 8214;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1055, this.context) ) {
                case 1:
                    {
                    this.state = 8213;
                    this.match(PostgreSqlParser.KW_CONSTANT);
                    }
                    break;
                }
                this.state = 8216;
                this.typename();
                this.state = 8218;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 43) {
                    {
                    this.state = 8217;
                    this.opt_collate_clause();
                    }
                }

                this.state = 8222;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 8220;
                    this.match(PostgreSqlParser.KW_NOT);
                    this.state = 8221;
                    this.match(PostgreSqlParser.KW_NULL);
                    }
                }

                this.state = 8227;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 10 || _la === 20 || _la === 53) {
                    {
                    this.state = 8224;
                    this.decl_defkey();
                    this.state = 8225;
                    this.sql_expression();
                    }
                }

                }
                break;
            case 3:
                {
                this.state = 8230;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269 || _la === 324) {
                    {
                    this.state = 8229;
                    this.opt_scrollable();
                    }
                }

                this.state = 8232;
                this.match(PostgreSqlParser.KW_CURSOR);
                this.state = 8234;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 8233;
                    this.decl_cursor_args();
                    }
                }

                this.state = 8236;
                _la = this.tokenStream.LA(1);
                if(!(_la === 62 || _la === 116)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8237;
                this.selectstmt();
                }
                break;
            }
            this.state = 8240;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_scrollable(): Opt_scrollableContext {
        let localContext = new Opt_scrollableContext(this.context, this.state);
        this.enterRule(localContext, 1100, PostgreSqlParser.RULE_opt_scrollable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8243;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 269) {
                {
                this.state = 8242;
                this.match(PostgreSqlParser.KW_NO);
                }
            }

            this.state = 8245;
            this.match(PostgreSqlParser.KW_SCROLL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decl_cursor_args(): Decl_cursor_argsContext {
        let localContext = new Decl_cursor_argsContext(this.context, this.state);
        this.enterRule(localContext, 1102, PostgreSqlParser.RULE_decl_cursor_args);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8247;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 8248;
            this.decl_cursor_arglist();
            this.state = 8249;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decl_cursor_arglist(): Decl_cursor_arglistContext {
        let localContext = new Decl_cursor_arglistContext(this.context, this.state);
        this.enterRule(localContext, 1104, PostgreSqlParser.RULE_decl_cursor_arglist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8251;
            this.decl_cursor_arg();
            this.state = 8256;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8252;
                this.match(PostgreSqlParser.COMMA);
                this.state = 8253;
                this.decl_cursor_arg();
                }
                }
                this.state = 8258;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decl_cursor_arg(): Decl_cursor_argContext {
        let localContext = new Decl_cursor_argContext(this.context, this.state);
        this.enterRule(localContext, 1106, PostgreSqlParser.RULE_decl_cursor_arg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8259;
            this.any_identifier();
            this.state = 8260;
            this.typename();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decl_aliasitem(): Decl_aliasitemContext {
        let localContext = new Decl_aliasitemContext(this.context, this.state);
        this.enterRule(localContext, 1108, PostgreSqlParser.RULE_decl_aliasitem);
        try {
            this.state = 8264;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.PARAM:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8262;
                this.match(PostgreSqlParser.PARAM);
                }
                break;
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8263;
                this.colid();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decl_defkey(): Decl_defkeyContext {
        let localContext = new Decl_defkeyContext(this.context, this.state);
        this.enterRule(localContext, 1110, PostgreSqlParser.RULE_decl_defkey);
        try {
            this.state = 8268;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.EQUAL:
            case PostgreSqlParser.COLON_EQUALS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8266;
                this.assign_operator();
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8267;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assign_operator(): Assign_operatorContext {
        let localContext = new Assign_operatorContext(this.context, this.state);
        this.enterRule(localContext, 1112, PostgreSqlParser.RULE_assign_operator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8270;
            _la = this.tokenStream.LA(1);
            if(!(_la === 10 || _la === 20)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public proc_sect(): Proc_sectContext {
        let localContext = new Proc_sectContext(this.context, this.state);
        this.enterRule(localContext, 1114, PostgreSqlParser.RULE_proc_sect);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8275;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1066, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 8272;
                    this.proc_stmt();
                    }
                    }
                }
                this.state = 8277;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1066, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public proc_stmt(): Proc_stmtContext {
        let localContext = new Proc_stmtContext(this.context, this.state);
        this.enterRule(localContext, 1116, PostgreSqlParser.RULE_proc_stmt);
        try {
            this.state = 8302;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1067, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8278;
                this.pl_block();
                this.state = 8279;
                this.match(PostgreSqlParser.SEMI);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8281;
                this.stmt_return();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8282;
                this.stmt_raise();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8283;
                this.stmt_assign();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8284;
                this.stmt_if();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 8285;
                this.stmt_case();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 8286;
                this.stmt_loop_while_for();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 8287;
                this.stmt_foreach_a();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 8288;
                this.stmt_exit();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 8289;
                this.stmt_assert();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 8290;
                this.stmt_execsql();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 8291;
                this.stmt_dynexecute();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 8292;
                this.stmt_perform();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 8293;
                this.stmt_call();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 8294;
                this.stmt_getdiag();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 8295;
                this.stmt_open();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 8296;
                this.stmt_fetch();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 8297;
                this.stmt_move();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 8298;
                this.stmt_close();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 8299;
                this.stmt_null();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 8300;
                this.stmt_commit_or_rollback();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 8301;
                this.stmt_set();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_perform(): Stmt_performContext {
        let localContext = new Stmt_performContext(this.context, this.state);
        this.enterRule(localContext, 1118, PostgreSqlParser.RULE_stmt_perform);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8304;
            this.match(PostgreSqlParser.KW_PERFORM);
            this.state = 8305;
            this.sql_expression();
            this.state = 8306;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_call(): Stmt_callContext {
        let localContext = new Stmt_callContext(this.context, this.state);
        this.enterRule(localContext, 1120, PostgreSqlParser.RULE_stmt_call);
        let _la: number;
        try {
            this.state = 8327;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CALL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8308;
                this.match(PostgreSqlParser.KW_CALL);
                this.state = 8309;
                this.any_identifier();
                this.state = 8316;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1069, this.context) ) {
                case 1:
                    {
                    this.state = 8310;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 8312;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 421516677) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 100660735) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                        {
                        this.state = 8311;
                        this.expr_list();
                        }
                    }

                    this.state = 8314;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    this.state = 8315;
                    this.match(PostgreSqlParser.SEMI);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_DO:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8318;
                this.match(PostgreSqlParser.KW_DO);
                this.state = 8319;
                this.any_identifier();
                this.state = 8320;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 8322;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 421516677) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 100660735) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                    {
                    this.state = 8321;
                    this.expr_list();
                    }
                }

                this.state = 8324;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 8325;
                this.match(PostgreSqlParser.SEMI);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_assign(): Stmt_assignContext {
        let localContext = new Stmt_assignContext(this.context, this.state);
        this.enterRule(localContext, 1122, PostgreSqlParser.RULE_stmt_assign);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8329;
            this.assign_var();
            this.state = 8330;
            this.assign_operator();
            this.state = 8331;
            this.sql_expression();
            this.state = 8332;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_getdiag(): Stmt_getdiagContext {
        let localContext = new Stmt_getdiagContext(this.context, this.state);
        this.enterRule(localContext, 1124, PostgreSqlParser.RULE_stmt_getdiag);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8334;
            this.match(PostgreSqlParser.KW_GET);
            this.state = 8336;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 434 || _la === 501) {
                {
                this.state = 8335;
                _la = this.tokenStream.LA(1);
                if(!(_la === 434 || _la === 501)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 8338;
            this.match(PostgreSqlParser.KW_DIAGNOSTICS);
            this.state = 8339;
            this.getdiag_list();
            this.state = 8340;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getdiag_list(): Getdiag_listContext {
        let localContext = new Getdiag_listContext(this.context, this.state);
        this.enterRule(localContext, 1126, PostgreSqlParser.RULE_getdiag_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8342;
            this.getdiag_list_item();
            this.state = 8347;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8343;
                this.match(PostgreSqlParser.COMMA);
                this.state = 8344;
                this.getdiag_list_item();
                }
                }
                this.state = 8349;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getdiag_list_item(): Getdiag_list_itemContext {
        let localContext = new Getdiag_list_itemContext(this.context, this.state);
        this.enterRule(localContext, 1128, PostgreSqlParser.RULE_getdiag_list_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8350;
            this.assign_var();
            this.state = 8351;
            this.assign_operator();
            this.state = 8352;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assign_var(): Assign_varContext {
        let localContext = new Assign_varContext(this.context, this.state);
        this.enterRule(localContext, 1130, PostgreSqlParser.RULE_assign_var);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8356;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 8354;
                this.any_name();
                }
                break;
            case PostgreSqlParser.PARAM:
                {
                this.state = 8355;
                this.match(PostgreSqlParser.PARAM);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 8364;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 8358;
                this.match(PostgreSqlParser.OPEN_BRACKET);
                this.state = 8359;
                this.expression();
                this.state = 8360;
                this.match(PostgreSqlParser.CLOSE_BRACKET);
                }
                }
                this.state = 8366;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_if(): Stmt_ifContext {
        let localContext = new Stmt_ifContext(this.context, this.state);
        this.enterRule(localContext, 1132, PostgreSqlParser.RULE_stmt_if);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8367;
            this.match(PostgreSqlParser.KW_IF);
            this.state = 8368;
            this.sql_expression();
            this.state = 8369;
            this.match(PostgreSqlParser.KW_THEN);
            this.state = 8370;
            this.proc_sect();
            this.state = 8371;
            this.stmt_elsifs();
            this.state = 8373;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 58) {
                {
                this.state = 8372;
                this.stmt_else();
                }
            }

            this.state = 8375;
            this.match(PostgreSqlParser.KW_END);
            this.state = 8376;
            this.match(PostgreSqlParser.KW_IF);
            this.state = 8377;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_elsifs(): Stmt_elsifsContext {
        let localContext = new Stmt_elsifsContext(this.context, this.state);
        this.enterRule(localContext, 1134, PostgreSqlParser.RULE_stmt_elsifs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8386;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 502) {
                {
                {
                this.state = 8379;
                this.match(PostgreSqlParser.KW_ELSIF);
                this.state = 8380;
                this.expression();
                this.state = 8381;
                this.match(PostgreSqlParser.KW_THEN);
                this.state = 8382;
                this.proc_sect();
                }
                }
                this.state = 8388;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_else(): Stmt_elseContext {
        let localContext = new Stmt_elseContext(this.context, this.state);
        this.enterRule(localContext, 1136, PostgreSqlParser.RULE_stmt_else);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8389;
            this.match(PostgreSqlParser.KW_ELSE);
            this.state = 8390;
            this.proc_sect();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_case(): Stmt_caseContext {
        let localContext = new Stmt_caseContext(this.context, this.state);
        this.enterRule(localContext, 1138, PostgreSqlParser.RULE_stmt_case);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8392;
            this.match(PostgreSqlParser.KW_CASE);
            this.state = 8394;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1078, this.context) ) {
            case 1:
                {
                this.state = 8393;
                this.sql_expression();
                }
                break;
            }
            this.state = 8397;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 8396;
                this.case_when();
                }
                }
                this.state = 8399;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 102);
            this.state = 8402;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 58) {
                {
                this.state = 8401;
                this.stmt_else();
                }
            }

            this.state = 8404;
            this.match(PostgreSqlParser.KW_END);
            this.state = 8405;
            this.match(PostgreSqlParser.KW_CASE);
            this.state = 8406;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public case_when(): Case_whenContext {
        let localContext = new Case_whenContext(this.context, this.state);
        this.enterRule(localContext, 1140, PostgreSqlParser.RULE_case_when);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8408;
            this.match(PostgreSqlParser.KW_WHEN);
            this.state = 8409;
            this.expr_list();
            this.state = 8410;
            this.match(PostgreSqlParser.KW_THEN);
            this.state = 8411;
            this.proc_sect();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_loop_while_for(): Stmt_loop_while_forContext {
        let localContext = new Stmt_loop_while_forContext(this.context, this.state);
        this.enterRule(localContext, 1142, PostgreSqlParser.RULE_stmt_loop_while_for);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8414;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 18) {
                {
                this.state = 8413;
                this.label_decl();
                }
            }

            this.state = 8420;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_WHILE:
                {
                {
                this.state = 8416;
                this.match(PostgreSqlParser.KW_WHILE);
                this.state = 8417;
                this.expression();
                }
                }
                break;
            case PostgreSqlParser.KW_FOR:
                {
                {
                this.state = 8418;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 8419;
                this.for_control();
                }
                }
                break;
            case PostgreSqlParser.KW_LOOP:
                break;
            default:
                break;
            }
            this.state = 8422;
            this.loop_body();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public for_control(): For_controlContext {
        let localContext = new For_controlContext(this.context, this.state);
        this.enterRule(localContext, 1144, PostgreSqlParser.RULE_for_control);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8424;
            this.any_name_list();
            this.state = 8425;
            this.match(PostgreSqlParser.KW_IN);
            this.state = 8447;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1087, this.context) ) {
            case 1:
                {
                this.state = 8426;
                this.colid();
                this.state = 8428;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 8427;
                    this.execute_param_clause();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 8430;
                this.selectstmt();
                }
                break;
            case 3:
                {
                this.state = 8431;
                this.explainstmt();
                }
                break;
            case 4:
                {
                this.state = 8432;
                this.match(PostgreSqlParser.KW_EXECUTE);
                this.state = 8433;
                this.expression();
                this.state = 8435;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 8434;
                    this.opt_for_using_expression();
                    }
                }

                }
                break;
            case 5:
                {
                this.state = 8438;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1085, this.context) ) {
                case 1:
                    {
                    this.state = 8437;
                    this.match(PostgreSqlParser.KW_REVERSE);
                    }
                    break;
                }
                this.state = 8440;
                this.expression();
                this.state = 8441;
                this.match(PostgreSqlParser.DOT_DOT);
                this.state = 8442;
                this.expression();
                this.state = 8445;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 147) {
                    {
                    this.state = 8443;
                    this.match(PostgreSqlParser.KW_BY);
                    this.state = 8444;
                    this.expression();
                    }
                }

                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_for_using_expression(): Opt_for_using_expressionContext {
        let localContext = new Opt_for_using_expressionContext(this.context, this.state);
        this.enterRule(localContext, 1146, PostgreSqlParser.RULE_opt_for_using_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8449;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 8450;
            this.expr_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_foreach_a(): Stmt_foreach_aContext {
        let localContext = new Stmt_foreach_aContext(this.context, this.state);
        this.enterRule(localContext, 1148, PostgreSqlParser.RULE_stmt_foreach_a);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8453;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 18) {
                {
                this.state = 8452;
                this.label_decl();
                }
            }

            this.state = 8455;
            this.match(PostgreSqlParser.KW_FOREACH);
            this.state = 8456;
            this.any_name_list();
            this.state = 8459;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 506) {
                {
                this.state = 8457;
                this.match(PostgreSqlParser.KW_SLICE);
                this.state = 8458;
                this.match(PostgreSqlParser.Integral);
                }
            }

            this.state = 8461;
            this.match(PostgreSqlParser.KW_IN);
            this.state = 8462;
            this.match(PostgreSqlParser.KW_ARRAY);
            this.state = 8463;
            this.expression();
            this.state = 8464;
            this.loop_body();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_exit(): Stmt_exitContext {
        let localContext = new Stmt_exitContext(this.context, this.state);
        this.enterRule(localContext, 1150, PostgreSqlParser.RULE_stmt_exit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8466;
            _la = this.tokenStream.LA(1);
            if(!(_la === 167 || _la === 507)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8468;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 1572823) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 8467;
                this.any_identifier();
                }
            }

            this.state = 8472;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 102) {
                {
                this.state = 8470;
                this.match(PostgreSqlParser.KW_WHEN);
                this.state = 8471;
                this.sql_expression();
                }
            }

            this.state = 8474;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_return(): Stmt_returnContext {
        let localContext = new Stmt_returnContext(this.context, this.state);
        this.enterRule(localContext, 1152, PostgreSqlParser.RULE_stmt_return);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8476;
            this.match(PostgreSqlParser.KW_RETURN);
            this.state = 8490;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1094, this.context) ) {
            case 1:
                {
                this.state = 8477;
                this.match(PostgreSqlParser.KW_NEXT);
                this.state = 8478;
                this.sql_expression();
                }
                break;
            case 2:
                {
                this.state = 8479;
                this.match(PostgreSqlParser.KW_QUERY);
                this.state = 8485;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_EXECUTE:
                    {
                    this.state = 8480;
                    this.match(PostgreSqlParser.KW_EXECUTE);
                    this.state = 8481;
                    this.expression();
                    this.state = 8482;
                    this.opt_for_using_expression();
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                case PostgreSqlParser.KW_SELECT:
                case PostgreSqlParser.KW_TABLE:
                case PostgreSqlParser.KW_WITH:
                case PostgreSqlParser.KW_VALUES:
                    {
                    this.state = 8484;
                    this.selectstmt();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                {
                this.state = 8488;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1093, this.context) ) {
                case 1:
                    {
                    this.state = 8487;
                    this.sql_expression();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 8492;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_raise(): Stmt_raiseContext {
        let localContext = new Stmt_raiseContext(this.context, this.state);
        this.enterRule(localContext, 1154, PostgreSqlParser.RULE_stmt_raise);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8494;
            this.match(PostgreSqlParser.KW_RAISE);
            this.state = 8512;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1099, this.context) ) {
            case 1:
                {
                this.state = 8496;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1095, this.context) ) {
                case 1:
                    {
                    this.state = 8495;
                    this.opt_stmt_raise_level();
                    }
                    break;
                }
                this.state = 8505;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1097, this.context) ) {
                case 1:
                    {
                    this.state = 8498;
                    this.identifier();
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 8499;
                    this.match(PostgreSqlParser.KW_SQLSTATE);
                    this.state = 8500;
                    this.sconst();
                    }
                    }
                    break;
                case 3:
                    {
                    {
                    this.state = 8501;
                    this.sconst();
                    this.state = 8503;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 6) {
                        {
                        this.state = 8502;
                        this.opt_raise_list();
                        }
                    }

                    }
                    }
                    break;
                }
                this.state = 8509;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 8507;
                    this.match(PostgreSqlParser.KW_USING);
                    this.state = 8508;
                    this.opt_raise_using_elem_list();
                    }
                }

                this.state = 8511;
                this.match(PostgreSqlParser.SEMI);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_stmt_raise_level(): Opt_stmt_raise_levelContext {
        let localContext = new Opt_stmt_raise_levelContext(this.context, this.state);
        this.enterRule(localContext, 1156, PostgreSqlParser.RULE_opt_stmt_raise_level);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8514;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 512)) & ~0x1F) === 0 && ((1 << (_la - 512)) & 63) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_raise_list(): Opt_raise_listContext {
        let localContext = new Opt_raise_listContext(this.context, this.state);
        this.enterRule(localContext, 1158, PostgreSqlParser.RULE_opt_raise_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8518;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 8516;
                this.match(PostgreSqlParser.COMMA);
                this.state = 8517;
                this.expression();
                }
                }
                this.state = 8520;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 6);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_raise_using_elem(): Opt_raise_using_elemContext {
        let localContext = new Opt_raise_using_elemContext(this.context, this.state);
        this.enterRule(localContext, 1160, PostgreSqlParser.RULE_opt_raise_using_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8522;
            this.identifier();
            this.state = 8523;
            this.match(PostgreSqlParser.EQUAL);
            this.state = 8524;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_raise_using_elem_list(): Opt_raise_using_elem_listContext {
        let localContext = new Opt_raise_using_elem_listContext(this.context, this.state);
        this.enterRule(localContext, 1162, PostgreSqlParser.RULE_opt_raise_using_elem_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8526;
            this.opt_raise_using_elem();
            this.state = 8531;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8527;
                this.match(PostgreSqlParser.COMMA);
                this.state = 8528;
                this.opt_raise_using_elem();
                }
                }
                this.state = 8533;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_assert(): Stmt_assertContext {
        let localContext = new Stmt_assertContext(this.context, this.state);
        this.enterRule(localContext, 1164, PostgreSqlParser.RULE_stmt_assert);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8534;
            this.match(PostgreSqlParser.KW_ASSERT);
            this.state = 8535;
            this.sql_expression();
            this.state = 8538;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6) {
                {
                this.state = 8536;
                this.match(PostgreSqlParser.COMMA);
                this.state = 8537;
                this.sql_expression();
                }
            }

            this.state = 8540;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loop_body(): Loop_bodyContext {
        let localContext = new Loop_bodyContext(this.context, this.state);
        this.enterRule(localContext, 1166, PostgreSqlParser.RULE_loop_body);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8542;
            this.match(PostgreSqlParser.KW_LOOP);
            this.state = 8543;
            this.proc_sect();
            this.state = 8544;
            this.match(PostgreSqlParser.KW_END);
            this.state = 8545;
            this.match(PostgreSqlParser.KW_LOOP);
            this.state = 8547;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 1572823) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 8546;
                this.any_identifier();
                }
            }

            this.state = 8549;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_execsql(): Stmt_execsqlContext {
        let localContext = new Stmt_execsqlContext(this.context, this.state);
        this.enterRule(localContext, 1168, PostgreSqlParser.RULE_stmt_execsql);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8551;
            this.stmt();
            this.state = 8553;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 71) {
                {
                this.state = 8552;
                this.opt_execute_into();
                }
            }

            this.state = 8555;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_dynexecute(): Stmt_dynexecuteContext {
        let localContext = new Stmt_dynexecuteContext(this.context, this.state);
        this.enterRule(localContext, 1170, PostgreSqlParser.RULE_stmt_dynexecute);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8557;
            this.match(PostgreSqlParser.KW_EXECUTE);
            this.state = 8558;
            this.expression();
            this.state = 8572;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1109, this.context) ) {
            case 1:
                {
                this.state = 8560;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 71) {
                    {
                    this.state = 8559;
                    this.opt_execute_into();
                    }
                }

                this.state = 8563;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 8562;
                    this.opt_for_using_expression();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 8566;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 8565;
                    this.opt_for_using_expression();
                    }
                }

                this.state = 8569;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 71) {
                    {
                    this.state = 8568;
                    this.opt_execute_into();
                    }
                }

                }
                break;
            case 3:
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            }
            this.state = 8574;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_execute_into(): Opt_execute_intoContext {
        let localContext = new Opt_execute_intoContext(this.context, this.state);
        this.enterRule(localContext, 1172, PostgreSqlParser.RULE_opt_execute_into);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8576;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 8578;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1110, this.context) ) {
            case 1:
                {
                this.state = 8577;
                this.match(PostgreSqlParser.KW_STRICT);
                }
                break;
            }
            this.state = 8580;
            this.expr_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_open(): Stmt_openContext {
        let localContext = new Stmt_openContext(this.context, this.state);
        this.enterRule(localContext, 1174, PostgreSqlParser.RULE_stmt_open);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8582;
            this.match(PostgreSqlParser.KW_OPEN);
            this.state = 8603;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1115, this.context) ) {
            case 1:
                {
                this.state = 8583;
                this.cursor_variable();
                this.state = 8585;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269 || _la === 324) {
                    {
                    this.state = 8584;
                    this.opt_scrollable();
                    }
                }

                this.state = 8587;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 8594;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                case PostgreSqlParser.KW_SELECT:
                case PostgreSqlParser.KW_TABLE:
                case PostgreSqlParser.KW_WITH:
                case PostgreSqlParser.KW_VALUES:
                    {
                    this.state = 8588;
                    this.selectstmt();
                    }
                    break;
                case PostgreSqlParser.KW_EXECUTE:
                    {
                    this.state = 8589;
                    this.match(PostgreSqlParser.KW_EXECUTE);
                    this.state = 8590;
                    this.sql_expression();
                    this.state = 8592;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 100) {
                        {
                        this.state = 8591;
                        this.opt_for_using_expression();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                {
                this.state = 8596;
                this.colid();
                this.state = 8601;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 8597;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 8598;
                    this.opt_open_bound_list();
                    this.state = 8599;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                }

                }
                break;
            }
            this.state = 8605;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_open_bound_list_item(): Opt_open_bound_list_itemContext {
        let localContext = new Opt_open_bound_list_itemContext(this.context, this.state);
        this.enterRule(localContext, 1176, PostgreSqlParser.RULE_opt_open_bound_list_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8610;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1116, this.context) ) {
            case 1:
                {
                this.state = 8607;
                this.colid();
                this.state = 8608;
                this.match(PostgreSqlParser.COLON_EQUALS);
                }
                break;
            }
            this.state = 8612;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_open_bound_list(): Opt_open_bound_listContext {
        let localContext = new Opt_open_bound_listContext(this.context, this.state);
        this.enterRule(localContext, 1178, PostgreSqlParser.RULE_opt_open_bound_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8614;
            this.opt_open_bound_list_item();
            this.state = 8619;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8615;
                this.match(PostgreSqlParser.COMMA);
                this.state = 8616;
                this.opt_open_bound_list_item();
                }
                }
                this.state = 8621;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_fetch(): Stmt_fetchContext {
        let localContext = new Stmt_fetchContext(this.context, this.state);
        this.enterRule(localContext, 1180, PostgreSqlParser.RULE_stmt_fetch);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8622;
            this.match(PostgreSqlParser.KW_FETCH);
            this.state = 8624;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1118, this.context) ) {
            case 1:
                {
                this.state = 8623;
                localContext._direction = this.opt_fetch_direction();
                }
                break;
            }
            this.state = 8627;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 64 || _la === 68) {
                {
                this.state = 8626;
                this.from_in();
                }
            }

            this.state = 8629;
            this.cursor_variable();
            this.state = 8630;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 8631;
            this.expr_list();
            this.state = 8632;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_fetch_direction(): Opt_fetch_directionContext {
        let localContext = new Opt_fetch_directionContext(this.context, this.state);
        this.enterRule(localContext, 1182, PostgreSqlParser.RULE_opt_fetch_direction);
        let _la: number;
        try {
            this.state = 8648;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1122, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8634;
                this.match(PostgreSqlParser.KW_NEXT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8635;
                this.match(PostgreSqlParser.KW_PRIOR);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8636;
                this.match(PostgreSqlParser.KW_FIRST);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8637;
                this.match(PostgreSqlParser.KW_LAST);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8639;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1120, this.context) ) {
                case 1:
                    {
                    this.state = 8638;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 130 || _la === 307)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 8641;
                this.expression();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 8642;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 8643;
                _la = this.tokenStream.LA(1);
                if(!(_la === 144 || _la === 210)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8646;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1121, this.context) ) {
                case 1:
                    {
                    this.state = 8644;
                    this.expression();
                    }
                    break;
                case 2:
                    {
                    this.state = 8645;
                    this.match(PostgreSqlParser.KW_ALL);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_move(): Stmt_moveContext {
        let localContext = new Stmt_moveContext(this.context, this.state);
        this.enterRule(localContext, 1184, PostgreSqlParser.RULE_stmt_move);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8650;
            this.match(PostgreSqlParser.KW_MOVE);
            this.state = 8652;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1123, this.context) ) {
            case 1:
                {
                this.state = 8651;
                this.opt_fetch_direction();
                }
                break;
            }
            this.state = 8654;
            this.cursor_variable();
            this.state = 8655;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mergestmt(): MergestmtContext {
        let localContext = new MergestmtContext(this.context, this.state);
        this.enterRule(localContext, 1186, PostgreSqlParser.RULE_mergestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8658;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 8657;
                this.with_clause();
                }
            }

            this.state = 8660;
            this.match(PostgreSqlParser.KW_MERGE);
            this.state = 8661;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 8663;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 8662;
                this.match(PostgreSqlParser.KW_ONLY);
                }
            }

            this.state = 8665;
            this.table_name();
            this.state = 8667;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 9) {
                {
                this.state = 8666;
                this.match(PostgreSqlParser.STAR);
                }
            }

            this.state = 8673;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266381) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 1572823) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 8670;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 36) {
                    {
                    this.state = 8669;
                    this.match(PostgreSqlParser.KW_AS);
                    }
                }

                this.state = 8672;
                this.colid();
                }
            }

            this.state = 8675;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 8676;
            this.data_source();
            this.state = 8677;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 8678;
            this.expression();
            this.state = 8680;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 8679;
                this.merge_when_clause();
                }
                }
                this.state = 8682;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 102);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public data_source(): Data_sourceContext {
        let localContext = new Data_sourceContext(this.context, this.state);
        this.enterRule(localContext, 1188, PostgreSqlParser.RULE_data_source);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8695;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1133, this.context) ) {
            case 1:
                {
                this.state = 8685;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 8684;
                    this.match(PostgreSqlParser.KW_ONLY);
                    }
                }

                this.state = 8687;
                this.table_name();
                this.state = 8689;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 9) {
                    {
                    this.state = 8688;
                    this.match(PostgreSqlParser.STAR);
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 8693;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1132, this.context) ) {
                case 1:
                    {
                    this.state = 8691;
                    this.select_no_parens();
                    }
                    break;
                case 2:
                    {
                    this.state = 8692;
                    this.values_clause();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 8701;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266381) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 1572823) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 8698;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 36) {
                    {
                    this.state = 8697;
                    this.match(PostgreSqlParser.KW_AS);
                    }
                }

                this.state = 8700;
                this.colid();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public merge_when_clause(): Merge_when_clauseContext {
        let localContext = new Merge_when_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1190, PostgreSqlParser.RULE_merge_when_clause);
        let _la: number;
        try {
            this.state = 8729;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1140, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8703;
                this.match(PostgreSqlParser.KW_WHEN);
                this.state = 8704;
                this.match(PostgreSqlParser.KW_MATCHED);
                this.state = 8707;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 33) {
                    {
                    this.state = 8705;
                    this.match(PostgreSqlParser.KW_AND);
                    this.state = 8706;
                    this.expression();
                    }
                }

                this.state = 8709;
                this.match(PostgreSqlParser.KW_THEN);
                this.state = 8714;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_UPDATE:
                    {
                    this.state = 8710;
                    this.merge_update();
                    }
                    break;
                case PostgreSqlParser.KW_DELETE:
                    {
                    this.state = 8711;
                    this.match(PostgreSqlParser.KW_DELETE);
                    }
                    break;
                case PostgreSqlParser.KW_DO:
                    {
                    this.state = 8712;
                    this.match(PostgreSqlParser.KW_DO);
                    this.state = 8713;
                    this.match(PostgreSqlParser.KW_NOTHING);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8716;
                this.match(PostgreSqlParser.KW_WHEN);
                this.state = 8717;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 8718;
                this.match(PostgreSqlParser.KW_MATCHED);
                this.state = 8721;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 33) {
                    {
                    this.state = 8719;
                    this.match(PostgreSqlParser.KW_AND);
                    this.state = 8720;
                    this.expression();
                    }
                }

                this.state = 8723;
                this.match(PostgreSqlParser.KW_THEN);
                this.state = 8727;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_INSERT:
                    {
                    this.state = 8724;
                    this.merge_insert();
                    }
                    break;
                case PostgreSqlParser.KW_DO:
                    {
                    this.state = 8725;
                    this.match(PostgreSqlParser.KW_DO);
                    this.state = 8726;
                    this.match(PostgreSqlParser.KW_NOTHING);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public merge_insert(): Merge_insertContext {
        let localContext = new Merge_insertContext(this.context, this.state);
        this.enterRule(localContext, 1192, PostgreSqlParser.RULE_merge_insert);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8731;
            this.match(PostgreSqlParser.KW_INSERT);
            this.state = 8733;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 8732;
                this.opt_column_list();
                }
            }

            this.state = 8738;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 463) {
                {
                this.state = 8735;
                this.match(PostgreSqlParser.KW_OVERRIDING);
                this.state = 8736;
                _la = this.tokenStream.LA(1);
                if(!(_la === 99 || _la === 349)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8737;
                this.match(PostgreSqlParser.KW_VALUE);
                }
            }

            this.state = 8740;
            this.default_values_or_values();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public merge_update(): Merge_updateContext {
        let localContext = new Merge_updateContext(this.context, this.state);
        this.enterRule(localContext, 1194, PostgreSqlParser.RULE_merge_update);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8742;
            this.match(PostgreSqlParser.KW_UPDATE);
            this.state = 8743;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 8754;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    this.state = 8754;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 1143, this.context) ) {
                    case 1:
                        {
                        this.state = 8744;
                        this.column_name();
                        this.state = 8745;
                        this.match(PostgreSqlParser.EQUAL);
                        this.state = 8746;
                        this.exprofdefault();
                        }
                        break;
                    case 2:
                        {
                        this.state = 8748;
                        this.opt_column_list();
                        this.state = 8749;
                        this.match(PostgreSqlParser.EQUAL);
                        this.state = 8750;
                        this.match(PostgreSqlParser.OPEN_PAREN);
                        this.state = 8751;
                        this.exprofdefaultlist();
                        this.state = 8752;
                        this.match(PostgreSqlParser.CLOSE_PAREN);
                        }
                        break;
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 8756;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1144, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public default_values_or_values(): Default_values_or_valuesContext {
        let localContext = new Default_values_or_valuesContext(this.context, this.state);
        this.enterRule(localContext, 1196, PostgreSqlParser.RULE_default_values_or_values);
        try {
            this.state = 8762;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_VALUES:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8758;
                this.match(PostgreSqlParser.KW_VALUES);
                this.state = 8759;
                this.exprofdefaultlist();
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8760;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 8761;
                this.match(PostgreSqlParser.KW_VALUES);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exprofdefaultlist(): ExprofdefaultlistContext {
        let localContext = new ExprofdefaultlistContext(this.context, this.state);
        this.enterRule(localContext, 1198, PostgreSqlParser.RULE_exprofdefaultlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8764;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 8765;
            this.exprofdefault();
            this.state = 8770;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8766;
                this.match(PostgreSqlParser.COMMA);
                this.state = 8767;
                this.exprofdefault();
                }
                }
                this.state = 8772;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 8773;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exprofdefault(): ExprofdefaultContext {
        let localContext = new ExprofdefaultContext(this.context, this.state);
        this.enterRule(localContext, 1200, PostgreSqlParser.RULE_exprofdefault);
        try {
            this.state = 8777;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1147, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8775;
                this.sortby();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8776;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_close(): Stmt_closeContext {
        let localContext = new Stmt_closeContext(this.context, this.state);
        this.enterRule(localContext, 1202, PostgreSqlParser.RULE_stmt_close);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8779;
            this.match(PostgreSqlParser.KW_CLOSE);
            this.state = 8780;
            this.cursor_variable();
            this.state = 8781;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_null(): Stmt_nullContext {
        let localContext = new Stmt_nullContext(this.context, this.state);
        this.enterRule(localContext, 1204, PostgreSqlParser.RULE_stmt_null);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8783;
            this.match(PostgreSqlParser.KW_NULL);
            this.state = 8784;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_commit_or_rollback(): Stmt_commit_or_rollbackContext {
        let localContext = new Stmt_commit_or_rollbackContext(this.context, this.state);
        this.enterRule(localContext, 1206, PostgreSqlParser.RULE_stmt_commit_or_rollback);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8786;
            _la = this.tokenStream.LA(1);
            if(!(_la === 161 || _la === 319)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8792;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 33) {
                {
                this.state = 8787;
                this.match(PostgreSqlParser.KW_AND);
                this.state = 8789;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 8788;
                    this.match(PostgreSqlParser.KW_NO);
                    }
                }

                this.state = 8791;
                this.match(PostgreSqlParser.KW_CHAIN);
                }
            }

            this.state = 8794;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_set(): Stmt_setContext {
        let localContext = new Stmt_setContext(this.context, this.state);
        this.enterRule(localContext, 1208, PostgreSqlParser.RULE_stmt_set);
        try {
            this.state = 8808;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8796;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 8797;
                this.any_name();
                this.state = 8798;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 8799;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 8800;
                this.match(PostgreSqlParser.SEMI);
                }
                break;
            case PostgreSqlParser.KW_RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8802;
                this.match(PostgreSqlParser.KW_RESET);
                this.state = 8805;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_AND:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_COLLATE:
                case PostgreSqlParser.KW_CONSTRAINT:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_DO:
                case PostgreSqlParser.KW_FETCH:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 8803;
                    this.any_name();
                    }
                    break;
                case PostgreSqlParser.KW_ALL:
                    {
                    this.state = 8804;
                    this.match(PostgreSqlParser.KW_ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 8807;
                this.match(PostgreSqlParser.SEMI);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cursor_variable(): Cursor_variableContext {
        let localContext = new Cursor_variableContext(this.context, this.state);
        this.enterRule(localContext, 1210, PostgreSqlParser.RULE_cursor_variable);
        try {
            this.state = 8812;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8810;
                this.colid();
                }
                break;
            case PostgreSqlParser.PARAM:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8811;
                this.match(PostgreSqlParser.PARAM);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exception_sect(): Exception_sectContext {
        let localContext = new Exception_sectContext(this.context, this.state);
        this.enterRule(localContext, 1212, PostgreSqlParser.RULE_exception_sect);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8814;
            this.match(PostgreSqlParser.KW_EXCEPTION);
            this.state = 8816;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 8815;
                this.proc_exception();
                }
                }
                this.state = 8818;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 102);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public proc_exception(): Proc_exceptionContext {
        let localContext = new Proc_exceptionContext(this.context, this.state);
        this.enterRule(localContext, 1214, PostgreSqlParser.RULE_proc_exception);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8820;
            this.match(PostgreSqlParser.KW_WHEN);
            this.state = 8821;
            this.proc_conditions();
            this.state = 8822;
            this.match(PostgreSqlParser.KW_THEN);
            this.state = 8823;
            this.proc_sect();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public proc_conditions(): Proc_conditionsContext {
        let localContext = new Proc_conditionsContext(this.context, this.state);
        this.enterRule(localContext, 1216, PostgreSqlParser.RULE_proc_conditions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8825;
            this.proc_condition();
            this.state = 8830;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 82) {
                {
                {
                this.state = 8826;
                this.match(PostgreSqlParser.KW_OR);
                this.state = 8827;
                this.proc_condition();
                }
                }
                this.state = 8832;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public proc_condition(): Proc_conditionContext {
        let localContext = new Proc_conditionContext(this.context, this.state);
        this.enterRule(localContext, 1218, PostgreSqlParser.RULE_proc_condition);
        try {
            this.state = 8836;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1155, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8833;
                this.any_identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8834;
                this.match(PostgreSqlParser.KW_SQLSTATE);
                this.state = 8835;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public any_identifier(): Any_identifierContext {
        let localContext = new Any_identifierContext(this.context, this.state);
        this.enterRule(localContext, 1220, PostgreSqlParser.RULE_any_identifier);
        try {
            this.state = 8840;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1156, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8838;
                this.colid();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8839;
                this.plsql_unreserved_keyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public plsql_unreserved_keyword(): Plsql_unreserved_keywordContext {
        let localContext = new Plsql_unreserved_keywordContext(this.context, this.state);
        this.enterRule(localContext, 1222, PostgreSqlParser.RULE_plsql_unreserved_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8842;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 286266373) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 268451969) !== 0) || ((((_la - 153)) & ~0x1F) === 0 && ((1 << (_la - 153)) & 540945) !== 0) || _la === 207 || _la === 210 || ((((_la - 241)) & ~0x1F) === 0 && ((1 << (_la - 241)) & 419430657) !== 0) || ((((_la - 279)) & ~0x1F) === 0 && ((1 << (_la - 279)) & 268451841) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & 1051713) !== 0) || _la === 360 || _la === 433 || _la === 434 || ((((_la - 477)) & ~0x1F) === 0 && ((1 << (_la - 477)) & 3959414785) !== 0) || ((((_la - 509)) & ~0x1F) === 0 && ((1 << (_la - 509)) & 3071) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_expression(): Sql_expressionContext {
        let localContext = new Sql_expressionContext(this.context, this.state);
        this.enterRule(localContext, 1224, PostgreSqlParser.RULE_sql_expression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8845;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1157, this.context) ) {
            case 1:
                {
                this.state = 8844;
                this.target_list();
                }
                break;
            }
            this.state = 8848;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1158, this.context) ) {
            case 1:
                {
                this.state = 8847;
                this.into_clause();
                }
                break;
            }
            this.state = 8851;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 64) {
                {
                this.state = 8850;
                this.from_clause();
                }
            }

            this.state = 8854;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 103) {
                {
                this.state = 8853;
                this.where_clause();
                }
            }

            this.state = 8857;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 66) {
                {
                this.state = 8856;
                this.group_clause();
                }
            }

            this.state = 8860;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 67) {
                {
                this.state = 8859;
                this.having_clause();
                }
            }

            this.state = 8863;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1163, this.context) ) {
            case 1:
                {
                this.state = 8862;
                this.window_clause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.RuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 450:
            return this.booleanExpression_sempred(localContext as BooleanExpressionContext, predIndex);
        case 452:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        case 453:
            return this.primaryExpression_sempred(localContext as PrimaryExpressionContext, predIndex);
        case 524:
            return this.column_name_sempred(localContext as Column_nameContext, predIndex);
        }
        return true;
    }
    private booleanExpression_sempred(localContext: BooleanExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.precpred(this.context, 2);
        case 1:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 2:
            return this.precpred(this.context, 3);
        case 3:
            return this.precpred(this.context, 2);
        case 4:
            return this.precpred(this.context, 1);
        case 5:
            return this.precpred(this.context, 5);
        }
        return true;
    }
    private primaryExpression_sempred(localContext: PrimaryExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 6:
            return this.precpred(this.context, 3);
        case 7:
            return this.precpred(this.context, 6);
        case 8:
            return this.precpred(this.context, 4);
        case 9:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private column_name_sempred(localContext: Column_nameContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 10:
            return this.shouldMatchEmpty();
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,590,8866,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
        7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,
        2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,
        7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,
        2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,
        7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,7,466,
        2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,2,472,
        7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
        2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,
        7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
        2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,
        7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,
        2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,
        7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,
        2,511,7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,2,516,
        7,516,2,517,7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,7,521,
        2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,2,526,7,526,2,527,
        7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,2,532,7,532,
        2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,2,538,
        7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
        2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,
        7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,
        2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,
        7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,
        2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,
        7,571,2,572,7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,
        2,577,7,577,2,578,7,578,2,579,7,579,2,580,7,580,2,581,7,581,2,582,
        7,582,2,583,7,583,2,584,7,584,2,585,7,585,2,586,7,586,2,587,7,587,
        2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,2,592,7,592,2,593,
        7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,2,598,7,598,
        2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,2,604,
        7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,7,609,
        2,610,7,610,2,611,7,611,2,612,7,612,1,0,5,0,1228,8,0,10,0,12,0,1231,
        9,0,1,0,1,0,1,1,1,1,3,1,1237,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1357,
        8,2,3,2,1359,8,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,3,4,1368,8,4,1,4,1,
        4,1,5,5,5,1373,8,5,10,5,12,5,1376,9,5,1,6,5,6,1379,8,6,10,6,12,6,
        1382,9,6,1,7,1,7,1,7,3,7,1387,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,1422,8,7,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,3,8,1432,8,8,1,9,1,9,1,9,1,9,3,9,1438,8,9,1,9,
        1,9,1,10,1,10,1,10,1,10,3,10,1446,8,10,1,10,1,10,1,11,1,11,1,11,
        1,11,3,11,1454,8,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        3,12,1465,8,12,1,12,1,12,1,13,1,13,5,13,1471,8,13,10,13,12,13,1474,
        9,13,1,13,3,13,1477,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,3,13,1489,8,13,1,13,1,13,1,13,1,13,3,13,1495,8,13,1,14,
        1,14,1,14,1,14,3,14,1501,8,14,1,14,1,14,3,14,1505,8,14,1,14,1,14,
        1,14,3,14,1510,8,14,1,14,1,14,3,14,1514,8,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,1527,8,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,3,14,1537,8,14,3,14,1539,8,14,1,15,1,15,
        1,15,1,15,3,15,1545,8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,3,17,1559,8,17,1,17,3,17,1562,8,17,1,17,1,17,
        1,17,3,17,1567,8,17,1,17,5,17,1570,8,17,10,17,12,17,1573,9,17,1,
        18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,3,19,1583,8,19,1,20,1,20,3,
        20,1587,8,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,
        21,1599,8,21,1,22,1,22,3,22,1603,8,22,1,22,3,22,1606,8,22,1,22,1,
        22,3,22,1610,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,3,23,1622,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,1640,8,23,1,24,1,24,1,24,5,
        24,1645,8,24,10,24,12,24,1648,9,24,1,25,1,25,1,25,5,25,1653,8,25,
        10,25,12,25,1656,9,25,1,26,1,26,3,26,1660,8,26,1,27,1,27,1,27,1,
        27,1,27,3,27,1667,8,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,1675,8,
        28,1,29,1,29,1,29,1,29,3,29,1681,8,29,1,30,1,30,1,30,1,30,1,30,1,
        30,3,30,1689,8,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1697,8,30,1,
        31,1,31,3,31,1701,8,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,3,33,1715,8,33,1,34,1,34,1,34,3,34,1720,8,34,1,
        35,1,35,1,35,3,35,1725,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,3,36,1737,8,36,1,37,1,37,1,37,1,37,3,37,1743,8,37,1,
        37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,3,40,1755,8,40,1,
        40,1,40,1,40,3,40,1760,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,3,40,1770,8,40,1,40,1,40,1,40,1,40,3,40,1776,8,40,1,40,1,40,1,
        40,3,40,1781,8,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1789,8,40,1,
        40,1,40,1,40,3,40,1794,8,40,1,40,1,40,1,40,1,40,1,40,3,40,1801,8,
        40,1,40,1,40,1,40,3,40,1806,8,40,1,40,1,40,1,40,3,40,1811,8,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1821,8,40,1,40,1,40,1,
        40,3,40,1826,8,40,1,40,1,40,1,40,3,40,1831,8,40,1,40,1,40,1,40,1,
        40,1,40,3,40,1838,8,40,1,40,1,40,3,40,1842,8,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1856,8,40,1,40,1,
        40,1,40,1,40,3,40,1862,8,40,1,40,1,40,1,40,1,40,3,40,1868,8,40,1,
        40,1,40,1,40,3,40,1873,8,40,1,41,1,41,1,41,5,41,1878,8,41,10,41,
        12,41,1881,9,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,
        1892,8,42,1,43,1,43,1,43,1,43,5,43,1898,8,43,10,43,12,43,1901,9,
        43,1,43,1,43,1,44,1,44,1,44,3,44,1908,8,44,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1924,8,46,1,
        47,1,47,1,47,1,47,1,48,1,48,1,48,3,48,1933,8,48,1,48,1,48,1,48,1,
        48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1947,8,48,1,48,1,
        48,3,48,1951,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
        48,3,48,1963,8,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1971,8,48,1,
        48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1981,8,48,1,48,1,48,1,
        48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
        48,1,48,1,48,3,48,2001,8,48,1,48,3,48,2004,8,48,1,48,1,48,1,48,1,
        48,1,48,3,48,2011,8,48,1,48,3,48,2014,8,48,1,48,1,48,3,48,2018,8,
        48,1,48,1,48,3,48,2022,8,48,1,48,3,48,2025,8,48,1,48,1,48,1,48,3,
        48,2030,8,48,1,48,1,48,1,48,3,48,2035,8,48,1,48,1,48,3,48,2039,8,
        48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,2048,8,48,1,48,1,48,1,
        48,1,48,3,48,2054,8,48,1,48,1,48,3,48,2058,8,48,1,48,1,48,1,48,1,
        48,1,48,1,48,1,48,3,48,2067,8,48,1,48,3,48,2070,8,48,1,48,1,48,1,
        48,1,48,3,48,2076,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,2085,
        8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,2094,8,48,1,48,1,48,
        3,48,2098,8,48,1,48,1,48,4,48,2102,8,48,11,48,12,48,2103,1,48,1,
        48,3,48,2108,8,48,1,48,1,48,1,48,1,48,3,48,2114,8,48,1,48,1,48,3,
        48,2118,8,48,1,48,1,48,1,48,3,48,2123,8,48,1,48,1,48,1,48,3,48,2128,
        8,48,1,48,1,48,3,48,2132,8,48,1,48,3,48,2135,8,48,1,49,1,49,1,49,
        1,49,1,49,3,49,2142,8,49,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,
        1,52,3,52,2153,8,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,
        1,55,5,55,2165,8,55,10,55,12,55,2168,9,55,1,56,1,56,1,56,1,56,1,
        56,3,56,2175,8,56,1,57,1,57,3,57,2179,8,57,1,57,3,57,2182,8,57,1,
        57,1,57,1,57,1,57,3,57,2188,8,57,3,57,2190,8,57,1,58,1,58,1,58,1,
        58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,
        58,2208,8,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,5,60,2217,8,60,10,
        60,12,60,2220,9,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,5,61,
        2230,8,61,10,61,12,61,2233,9,61,1,62,1,62,1,62,1,62,3,62,2239,8,
        62,1,62,1,62,1,62,3,62,2244,8,62,1,62,1,62,3,62,2248,8,62,1,62,1,
        62,1,62,1,62,1,62,3,62,2255,8,62,1,62,1,62,1,62,3,62,2260,8,62,1,
        62,3,62,2263,8,62,3,62,2265,8,62,1,63,1,63,1,63,3,63,2270,8,63,1,
        64,1,64,3,64,2274,8,64,1,64,1,64,3,64,2278,8,64,1,64,1,64,3,64,2282,
        8,64,1,64,1,64,3,64,2286,8,64,1,64,3,64,2289,8,64,1,64,1,64,3,64,
        2293,8,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,2301,8,64,1,64,1,64,
        3,64,2305,8,64,1,64,1,64,3,64,2309,8,64,1,65,1,65,1,65,3,65,2314,
        8,65,1,66,5,66,2317,8,66,10,66,12,66,2320,9,66,1,66,1,66,1,66,1,
        66,5,66,2326,8,66,10,66,12,66,2329,9,66,1,66,1,66,3,66,2333,8,66,
        1,67,1,67,1,67,1,67,3,67,2339,8,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,3,67,2348,8,67,1,67,1,67,3,67,2352,8,67,1,67,1,67,1,67,1,67,
        3,67,2358,8,67,1,68,3,68,2361,8,68,1,68,1,68,1,68,1,69,1,69,3,69,
        2368,8,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,2377,8,70,1,71,
        1,71,1,71,5,71,2382,8,71,10,71,12,71,2385,9,71,1,72,1,72,3,72,2389,
        8,72,1,72,1,72,3,72,2393,8,72,1,72,1,72,1,72,3,72,2398,8,72,1,72,
        1,72,3,72,2402,8,72,1,72,3,72,2405,8,72,1,72,3,72,2408,8,72,1,72,
        3,72,2411,8,72,1,72,3,72,2414,8,72,1,72,3,72,2417,8,72,1,72,1,72,
        1,72,3,72,2422,8,72,1,72,3,72,2425,8,72,1,72,3,72,2428,8,72,1,72,
        3,72,2431,8,72,1,72,3,72,2434,8,72,1,72,3,72,2437,8,72,1,72,1,72,
        1,72,1,72,3,72,2443,8,72,1,72,1,72,3,72,2447,8,72,1,72,3,72,2450,
        8,72,1,72,3,72,2453,8,72,1,72,3,72,2456,8,72,1,72,3,72,2459,8,72,
        3,72,2461,8,72,1,73,1,73,1,73,1,73,1,73,3,73,2468,8,73,1,74,1,74,
        1,74,1,74,1,75,1,75,1,75,5,75,2477,8,75,10,75,12,75,2480,9,75,1,
        76,1,76,1,76,5,76,2485,8,76,10,76,12,76,2488,9,76,1,77,1,77,1,77,
        3,77,2493,8,77,1,78,1,78,1,78,3,78,2498,8,78,1,78,1,78,1,78,3,78,
        2503,8,78,1,79,1,79,1,79,3,79,2508,8,79,1,79,3,79,2511,8,79,1,79,
        1,79,3,79,2515,8,79,1,79,3,79,2518,8,79,1,79,1,79,3,79,2522,8,79,
        1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2533,8,80,1,81,
        5,81,2536,8,81,10,81,12,81,2539,9,81,1,82,1,82,3,82,2543,8,82,1,
        82,1,82,3,82,2547,8,82,1,82,3,82,2550,8,82,1,82,1,82,3,82,2554,8,
        82,1,82,3,82,2557,8,82,3,82,2559,8,82,1,83,3,83,2562,8,83,1,83,1,
        83,1,83,3,83,2567,8,83,1,83,3,83,2570,8,83,1,83,1,83,3,83,2574,8,
        83,1,83,1,83,1,83,1,83,3,83,2580,8,83,1,83,3,83,2583,8,83,1,83,1,
        83,1,83,1,83,1,83,1,83,3,83,2591,8,83,1,83,1,83,1,83,1,83,1,83,1,
        83,1,83,3,83,2600,8,83,1,83,1,83,1,83,1,83,1,83,3,83,2607,8,83,1,
        83,1,83,1,83,3,83,2612,8,83,1,83,3,83,2615,8,83,1,83,3,83,2618,8,
        83,1,83,3,83,2621,8,83,1,84,1,84,3,84,2625,8,84,1,84,1,84,1,85,1,
        85,1,85,3,85,2632,8,85,1,86,3,86,2635,8,86,1,86,1,86,1,87,1,87,1,
        87,1,88,1,88,1,88,1,88,5,88,2646,8,88,10,88,12,88,2649,9,88,1,89,
        1,89,1,90,1,90,3,90,2655,8,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,
        1,91,1,91,1,91,1,91,3,91,2668,8,91,1,91,1,91,3,91,2672,8,91,1,91,
        3,91,2675,8,91,1,91,3,91,2678,8,91,1,91,1,91,1,91,1,91,1,91,3,91,
        2685,8,91,1,91,1,91,3,91,2689,8,91,1,91,1,91,1,91,1,91,3,91,2695,
        8,91,1,91,3,91,2698,8,91,1,91,3,91,2701,8,91,1,91,3,91,2704,8,91,
        1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,2714,8,91,1,91,3,91,
        2717,8,91,1,91,3,91,2720,8,91,1,91,1,91,3,91,2724,8,91,1,92,1,92,
        1,92,1,92,1,93,1,93,1,93,1,93,5,93,2734,8,93,10,93,12,93,2737,9,
        93,1,93,1,93,1,94,1,94,1,94,5,94,2744,8,94,10,94,12,94,2747,9,94,
        1,95,1,95,1,95,1,96,1,96,1,96,1,97,1,97,1,97,5,97,2758,8,97,10,97,
        12,97,2761,9,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,2771,
        8,98,1,99,1,99,1,99,1,99,1,99,1,100,1,100,3,100,2780,8,100,1,100,
        1,100,3,100,2784,8,100,3,100,2786,8,100,1,101,1,101,1,101,1,101,
        1,102,1,102,1,102,1,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        3,103,2803,8,103,3,103,2805,8,103,1,104,1,104,1,104,1,104,1,104,
        1,105,1,105,1,105,1,105,1,105,1,106,1,106,1,106,1,106,5,106,2821,
        8,106,10,106,12,106,2824,9,106,1,106,1,106,1,107,1,107,1,107,1,107,
        1,107,1,107,3,107,2834,8,107,1,107,3,107,2837,8,107,1,107,3,107,
        2840,8,107,1,108,1,108,1,108,1,109,1,109,1,109,1,109,3,109,2849,
        8,109,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,2858,8,110,
        1,111,1,111,1,111,1,112,3,112,2864,8,112,1,112,3,112,2867,8,112,
        1,112,3,112,2870,8,112,1,113,1,113,1,113,1,113,1,114,1,114,1,114,
        1,114,1,115,1,115,1,115,3,115,2883,8,115,1,115,3,115,2886,8,115,
        1,115,3,115,2889,8,115,1,115,1,115,1,115,3,115,2894,8,115,1,115,
        1,115,1,116,1,116,1,116,3,116,2901,8,116,1,116,1,116,1,116,1,116,
        1,116,1,117,1,117,3,117,2910,8,117,1,117,1,117,3,117,2914,8,117,
        1,117,1,117,1,117,1,117,3,117,2920,8,117,1,118,1,118,3,118,2924,
        8,118,1,118,3,118,2927,8,118,1,118,3,118,2930,8,118,1,118,3,118,
        2933,8,118,1,118,3,118,2936,8,118,1,119,1,119,1,119,1,119,3,119,
        2942,8,119,1,120,1,120,3,120,2946,8,120,1,120,1,120,1,120,3,120,
        2951,8,120,1,120,1,120,1,120,1,120,3,120,2957,8,120,1,121,1,121,
        3,121,2961,8,121,1,121,3,121,2964,8,121,1,121,3,121,2967,8,121,1,
        121,3,121,2970,8,121,1,122,1,122,1,122,1,122,3,122,2976,8,122,1,
        122,1,122,3,122,2980,8,122,1,123,1,123,3,123,2984,8,123,1,123,1,
        123,3,123,2988,8,123,1,123,1,123,3,123,2992,8,123,1,124,1,124,1,
        124,3,124,2997,8,124,1,124,1,124,1,124,1,125,1,125,1,125,1,125,1,
        126,4,126,3007,8,126,11,126,12,126,3008,1,127,1,127,1,127,1,127,
        3,127,3015,8,127,1,127,1,127,3,127,3019,8,127,1,127,1,127,1,127,
        1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,
        3034,8,127,1,127,1,127,1,127,3,127,3039,8,127,1,127,3,127,3042,8,
        127,3,127,3044,8,127,1,128,3,128,3047,8,128,1,128,1,128,3,128,3051,
        8,128,1,129,1,129,1,129,5,129,3056,8,129,10,129,12,129,3059,9,129,
        1,130,1,130,3,130,3063,8,130,1,130,3,130,3066,8,130,1,130,3,130,
        3069,8,130,1,130,1,130,1,130,1,130,1,130,1,130,3,130,3077,8,130,
        1,130,1,130,1,130,1,130,3,130,3083,8,130,3,130,3085,8,130,1,131,
        1,131,1,131,1,131,3,131,3091,8,131,1,131,1,131,1,131,3,131,3096,
        8,131,1,132,1,132,1,132,3,132,3101,8,132,1,132,1,132,3,132,3105,
        8,132,1,132,5,132,3108,8,132,10,132,12,132,3111,9,132,1,133,1,133,
        1,133,1,133,1,133,3,133,3118,8,133,1,134,1,134,1,134,1,134,1,134,
        1,134,5,134,3126,8,134,10,134,12,134,3129,9,134,1,135,1,135,1,135,
        1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
        1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
        1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
        3,135,3167,8,135,1,136,1,136,1,136,1,136,1,136,1,136,3,136,3175,
        8,136,1,136,3,136,3178,8,136,1,137,1,137,3,137,3182,8,137,1,137,
        1,137,3,137,3186,8,137,1,138,4,138,3189,8,138,11,138,12,138,3190,
        1,139,1,139,1,139,1,139,1,139,1,139,3,139,3199,8,139,1,139,1,139,
        3,139,3203,8,139,1,140,1,140,1,140,1,140,1,140,1,141,1,141,1,141,
        5,141,3213,8,141,10,141,12,141,3216,9,141,1,142,1,142,1,142,1,142,
        1,142,1,143,1,143,1,143,5,143,3226,8,143,10,143,12,143,3229,9,143,
        1,144,1,144,1,144,1,145,1,145,1,145,1,146,1,146,1,146,3,146,3240,
        8,146,1,146,1,146,1,146,3,146,3245,8,146,1,146,3,146,3248,8,146,
        1,146,1,146,1,146,1,146,1,146,3,146,3255,8,146,1,147,1,147,1,147,
        3,147,3260,8,147,1,148,1,148,1,148,1,148,1,148,1,148,3,148,3268,
        8,148,3,148,3270,8,148,1,149,1,149,1,149,1,149,3,149,3276,8,149,
        1,149,1,149,1,149,3,149,3281,8,149,1,149,1,149,3,149,3285,8,149,
        1,149,1,149,1,149,3,149,3290,8,149,1,149,1,149,1,149,1,149,3,149,
        3296,8,149,1,149,1,149,1,149,1,149,1,149,3,149,3303,8,149,1,149,
        1,149,1,149,1,149,3,149,3309,8,149,3,149,3311,8,149,1,150,1,150,
        1,150,1,150,1,150,3,150,3318,8,150,1,150,1,150,1,150,1,150,1,150,
        1,150,3,150,3326,8,150,1,151,1,151,1,151,3,151,3331,8,151,1,151,
        1,151,1,151,1,151,1,152,1,152,1,152,1,152,3,152,3341,8,152,1,152,
        1,152,1,152,1,152,1,152,3,152,3348,8,152,1,153,1,153,3,153,3352,
        8,153,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,155,
        1,155,1,155,1,155,1,155,1,155,3,155,3369,8,155,1,155,1,155,3,155,
        3373,8,155,1,155,3,155,3376,8,155,1,155,3,155,3379,8,155,1,155,3,
        155,3382,8,155,1,156,1,156,1,156,1,156,1,156,1,156,3,156,3390,8,
        156,1,156,3,156,3393,8,156,1,156,3,156,3396,8,156,1,157,1,157,1,
        157,1,157,3,157,3402,8,157,1,157,1,157,1,158,1,158,5,158,3408,8,
        158,10,158,12,158,3411,9,158,1,158,3,158,3414,8,158,1,158,1,158,
        1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,3,158,3426,8,158,
        1,158,1,158,1,158,1,158,3,158,3432,8,158,1,159,3,159,3435,8,159,
        1,159,1,159,1,159,3,159,3440,8,159,1,159,1,159,3,159,3444,8,159,
        1,159,1,159,1,159,1,159,1,159,3,159,3451,8,159,1,159,1,159,1,159,
        1,159,1,159,1,159,1,159,1,159,3,159,3461,8,159,3,159,3463,8,159,
        1,160,1,160,1,160,1,160,1,160,1,161,1,161,1,161,1,161,1,161,1,161,
        1,162,1,162,1,162,1,163,1,163,1,163,1,163,3,163,3483,8,163,1,164,
        1,164,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,166,
        1,166,3,166,3498,8,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,
        3,166,3507,8,166,1,166,3,166,3510,8,166,1,166,3,166,3513,8,166,1,
        166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,3,166,3523,8,166,1,
        166,3,166,3526,8,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,
        166,3,166,3536,8,166,1,166,1,166,3,166,3540,8,166,1,166,3,166,3543,
        8,166,1,166,1,166,1,166,1,166,1,166,1,166,3,166,3551,8,166,1,167,
        1,167,1,167,1,167,3,167,3557,8,167,1,168,1,168,3,168,3561,8,168,
        1,168,1,168,1,169,1,169,1,169,5,169,3568,8,169,10,169,12,169,3571,
        9,169,1,170,1,170,1,170,1,170,1,170,3,170,3578,8,170,1,170,3,170,
        3581,8,170,1,171,1,171,4,171,3585,8,171,11,171,12,171,3586,1,172,
        1,172,1,172,3,172,3592,8,172,1,172,1,172,1,173,1,173,3,173,3598,
        8,173,1,173,1,173,1,174,1,174,1,174,1,174,1,174,1,175,1,175,1,175,
        1,175,3,175,3611,8,175,1,176,1,176,3,176,3615,8,176,1,176,1,176,
        5,176,3619,8,176,10,176,12,176,3622,9,176,1,177,1,177,1,177,1,177,
        3,177,3628,8,177,1,178,5,178,3631,8,178,10,178,12,178,3634,9,178,
        1,179,3,179,3637,8,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
        3,179,3646,8,179,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,
        3,180,3656,8,180,1,180,1,180,1,180,1,180,1,181,1,181,1,181,5,181,
        3665,8,181,10,181,12,181,3668,9,181,1,182,1,182,1,182,1,182,1,182,
        1,182,1,183,1,183,1,183,1,183,1,183,1,183,1,184,1,184,3,184,3684,
        8,184,1,184,3,184,3687,8,184,1,185,1,185,1,185,1,185,1,185,1,185,
        1,185,1,185,1,185,1,186,1,186,3,186,3700,8,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,5,186,3711,8,186,10,186,12,186,
        3714,9,186,1,186,1,186,3,186,3718,8,186,1,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,3,186,3731,8,186,1,186,
        1,186,1,186,1,186,3,186,3737,8,186,1,186,3,186,3740,8,186,1,186,
        1,186,1,186,1,186,1,186,3,186,3747,8,186,1,186,3,186,3750,8,186,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,3,186,
        3762,8,186,1,186,1,186,1,186,1,186,3,186,3768,8,186,3,186,3770,8,
        186,1,187,1,187,1,187,1,187,1,188,1,188,1,188,5,188,3779,8,188,10,
        188,12,188,3782,9,188,1,189,1,189,1,189,3,189,3787,8,189,1,190,1,
        190,1,190,1,190,1,190,1,190,3,190,3795,8,190,1,191,1,191,1,191,1,
        191,1,192,1,192,5,192,3803,8,192,10,192,12,192,3806,9,192,1,193,
        1,193,1,193,1,193,1,193,1,193,3,193,3814,8,193,1,193,1,193,1,193,
        3,193,3819,8,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,
        1,193,3,193,3830,8,193,1,194,1,194,1,194,1,194,1,195,1,195,1,195,
        1,195,1,195,3,195,3841,8,195,1,195,1,195,1,195,1,195,1,195,3,195,
        3848,8,195,1,195,1,195,1,195,1,196,1,196,1,196,5,196,3856,8,196,
        10,196,12,196,3859,9,196,1,197,1,197,1,197,1,197,3,197,3865,8,197,
        1,197,3,197,3868,8,197,1,197,3,197,3871,8,197,1,197,1,197,1,197,
        3,197,3876,8,197,1,197,1,197,1,197,3,197,3881,8,197,1,198,1,198,
        1,198,1,199,1,199,1,199,1,199,1,199,1,199,3,199,3892,8,199,1,200,
        1,200,1,200,1,200,1,200,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,5,201,3909,8,201,10,201,12,201,3912,9,201,3,201,
        3914,8,201,1,202,1,202,1,202,1,202,1,203,1,203,1,203,1,203,1,203,
        1,203,1,203,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,
        1,204,1,204,1,204,1,204,1,204,3,204,3941,8,204,1,204,1,204,1,204,
        1,204,1,204,1,204,1,204,3,204,3950,8,204,1,204,3,204,3953,8,204,
        1,204,1,204,3,204,3957,8,204,1,204,1,204,3,204,3961,8,204,1,204,
        1,204,3,204,3965,8,204,1,204,1,204,3,204,3969,8,204,1,204,1,204,
        3,204,3973,8,204,1,204,1,204,3,204,3977,8,204,1,204,1,204,3,204,
        3981,8,204,1,204,1,204,1,204,3,204,3986,8,204,1,204,1,204,3,204,
        3990,8,204,1,204,1,204,1,204,3,204,3995,8,204,1,204,1,204,1,204,
        1,204,3,204,4001,8,204,1,204,1,204,1,204,3,204,4006,8,204,1,204,
        1,204,3,204,4010,8,204,1,204,1,204,1,204,1,204,3,204,4016,8,204,
        1,204,1,204,3,204,4020,8,204,1,204,1,204,1,204,3,204,4025,8,204,
        1,204,1,204,1,204,1,204,1,204,1,204,3,204,4033,8,204,1,204,1,204,
        1,204,1,204,3,204,4039,8,204,1,204,1,204,1,204,3,204,4044,8,204,
        1,204,1,204,1,204,1,204,1,204,3,204,4051,8,204,1,204,1,204,1,204,
        3,204,4056,8,204,1,204,1,204,3,204,4060,8,204,1,204,1,204,1,204,
        3,204,4065,8,204,1,204,1,204,1,204,1,204,3,204,4071,8,204,1,204,
        1,204,1,204,1,204,1,204,3,204,4078,8,204,1,204,1,204,1,204,3,204,
        4083,8,204,1,204,1,204,1,204,1,204,1,204,3,204,4090,8,204,1,204,
        1,204,1,204,1,204,1,204,1,204,1,204,1,204,3,204,4100,8,204,1,204,
        1,204,3,204,4104,8,204,1,204,3,204,4107,8,204,3,204,4109,8,204,1,
        205,1,205,1,205,5,205,4114,8,205,10,205,12,205,4117,9,205,1,206,
        3,206,4120,8,206,1,206,1,206,1,206,3,206,4125,8,206,1,206,1,206,
        1,206,1,206,1,206,1,206,1,206,1,206,3,206,4135,8,206,1,207,1,207,
        1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,
        3,207,4150,8,207,1,207,3,207,4153,8,207,1,207,1,207,1,207,1,207,
        1,207,1,207,3,207,4161,8,207,1,208,1,208,1,209,1,209,1,209,5,209,
        4168,8,209,10,209,12,209,4171,9,209,1,210,1,210,3,210,4175,8,210,
        1,210,1,210,1,210,1,211,1,211,3,211,4182,8,211,1,212,1,212,4,212,
        4186,8,212,11,212,12,212,4187,1,213,1,213,1,213,5,213,4193,8,213,
        10,213,12,213,4196,9,213,1,214,1,214,3,214,4200,8,214,1,214,1,214,
        1,214,5,214,4205,8,214,10,214,12,214,4208,9,214,1,214,1,214,3,214,
        4212,8,214,1,214,3,214,4215,8,214,1,215,3,215,4218,8,215,1,215,1,
        215,3,215,4222,8,215,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,
        216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,3,216,4243,8,216,1,216,3,216,4246,8,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,3,216,4278,8,216,1,216,1,216,1,216,
        3,216,4283,8,216,1,217,1,217,1,217,1,217,3,217,4289,8,217,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,3,217,4309,8,217,1,217,1,217,
        1,217,3,217,4314,8,217,1,218,1,218,1,218,1,219,3,219,4320,8,219,
        1,219,3,219,4323,8,219,1,219,1,219,3,219,4327,8,219,1,219,1,219,
        3,219,4331,8,219,1,219,1,219,1,219,1,219,3,219,4337,8,219,1,219,
        3,219,4340,8,219,1,219,1,219,3,219,4344,8,219,1,219,1,219,3,219,
        4348,8,219,1,219,1,219,1,219,3,219,4353,8,219,1,219,3,219,4356,8,
        219,1,219,3,219,4359,8,219,1,219,3,219,4362,8,219,1,220,1,220,1,
        221,1,221,1,221,1,221,1,221,1,221,1,221,3,221,4373,8,221,1,222,1,
        222,1,222,1,222,3,222,4379,8,222,1,222,1,222,1,222,1,222,1,222,1,
        222,3,222,4387,8,222,1,223,1,223,1,223,3,223,4392,8,223,1,223,3,
        223,4395,8,223,1,223,1,223,1,223,5,223,4400,8,223,10,223,12,223,
        4403,9,223,3,223,4405,8,223,1,224,1,224,1,225,1,225,1,225,5,225,
        4412,8,225,10,225,12,225,4415,9,225,1,226,1,226,1,226,1,226,3,226,
        4421,8,226,1,226,3,226,4424,8,226,1,227,1,227,1,227,3,227,4429,8,
        227,1,227,1,227,1,227,1,227,1,227,3,227,4436,8,227,1,227,3,227,4439,
        8,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,3,227,4464,8,227,1,228,1,228,1,228,5,228,4469,8,228,
        10,228,12,228,4472,9,228,1,229,3,229,4475,8,229,1,229,1,229,1,230,
        1,230,1,230,1,230,1,231,1,231,1,231,1,231,1,231,1,231,3,231,4489,
        8,231,1,231,3,231,4492,8,231,1,232,1,232,1,232,1,232,3,232,4498,
        8,232,1,232,1,232,1,232,1,232,3,232,4504,8,232,1,232,3,232,4507,
        8,232,1,233,1,233,1,233,1,233,1,234,1,234,1,234,1,234,5,234,4517,
        8,234,10,234,12,234,4520,9,234,1,234,1,234,1,235,1,235,1,235,1,235,
        1,235,1,235,3,235,4530,8,235,1,236,1,236,1,236,1,236,1,236,1,236,
        1,236,3,236,4539,8,236,1,236,1,236,1,236,1,236,3,236,4545,8,236,
        1,236,1,236,1,236,1,236,1,236,1,236,3,236,4553,8,236,3,236,4555,
        8,236,1,237,1,237,1,238,1,238,3,238,4561,8,238,1,238,1,238,3,238,
        4565,8,238,1,238,3,238,4568,8,238,1,238,3,238,4571,8,238,1,238,1,
        238,1,238,3,238,4576,8,238,1,238,1,238,3,238,4580,8,238,1,238,3,
        238,4583,8,238,1,238,3,238,4586,8,238,1,238,3,238,4589,8,238,1,238,
        3,238,4592,8,238,1,239,1,239,1,239,1,239,5,239,4598,8,239,10,239,
        12,239,4601,9,239,1,239,1,239,1,240,3,240,4606,8,240,1,240,3,240,
        4609,8,240,1,240,1,240,1,240,3,240,4614,8,240,1,240,3,240,4617,8,
        240,1,240,3,240,4620,8,240,1,241,1,241,1,241,1,241,1,241,1,241,3,
        241,4628,8,241,1,241,1,241,1,242,1,242,1,242,1,243,1,243,1,243,1,
        244,1,244,3,244,4640,8,244,1,244,1,244,1,244,1,244,3,244,4646,8,
        244,1,244,1,244,1,244,1,244,1,244,3,244,4653,8,244,3,244,4655,8,
        244,1,244,1,244,1,244,3,244,4660,8,244,1,245,1,245,1,245,1,245,1,
        246,1,246,1,246,1,247,1,247,3,247,4671,8,247,1,247,1,247,1,248,1,
        248,1,248,5,248,4678,8,248,10,248,12,248,4681,9,248,1,249,1,249,
        1,249,5,249,4686,8,249,10,249,12,249,4689,9,249,1,250,1,250,1,250,
        1,250,1,250,3,250,4696,8,250,1,251,1,251,1,251,5,251,4701,8,251,
        10,251,12,251,4704,9,251,1,252,1,252,1,252,1,252,1,252,3,252,4711,
        8,252,1,253,1,253,1,253,5,253,4716,8,253,10,253,12,253,4719,9,253,
        1,254,1,254,1,254,1,254,1,254,3,254,4726,8,254,1,255,1,255,3,255,
        4730,8,255,1,255,1,255,1,256,1,256,1,256,5,256,4737,8,256,10,256,
        12,256,4740,9,256,1,257,1,257,3,257,4744,8,257,1,257,1,257,3,257,
        4748,8,257,3,257,4750,8,257,1,257,1,257,1,258,1,258,3,258,4756,8,
        258,1,258,1,258,1,258,3,258,4761,8,258,1,259,1,259,3,259,4765,8,
        259,1,259,1,259,1,259,1,259,1,259,3,259,4772,8,259,1,260,1,260,1,
        260,3,260,4777,8,260,1,261,1,261,1,261,3,261,4782,8,261,1,261,1,
        261,1,261,3,261,4787,8,261,3,261,4789,8,261,1,261,1,261,1,262,1,
        262,1,262,1,263,1,263,1,263,5,263,4799,8,263,10,263,12,263,4802,
        9,263,1,264,4,264,4805,8,264,11,264,12,264,4806,1,265,1,265,1,265,
        3,265,4812,8,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        3,265,4822,8,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,3,265,4838,8,265,1,266,1,266,
        1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,1,266,
        1,266,1,266,1,266,1,266,3,266,4857,8,266,1,266,1,266,1,266,1,266,
        1,266,3,266,4864,8,266,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
        5,267,4873,8,267,10,267,12,267,4876,9,267,1,268,1,268,1,268,1,269,
        1,269,1,269,1,270,1,270,1,270,1,270,5,270,4888,8,270,10,270,12,270,
        4891,9,270,1,270,1,270,1,271,1,271,1,271,4,271,4898,8,271,11,271,
        12,271,4899,1,271,3,271,4903,8,271,1,272,1,272,1,272,1,272,1,272,
        1,272,3,272,4911,8,272,1,273,1,273,1,273,3,273,4916,8,273,1,273,
        1,273,1,273,3,273,4921,8,273,1,273,1,273,1,273,3,273,4926,8,273,
        1,273,3,273,4929,8,273,1,273,3,273,4932,8,273,1,274,1,274,1,274,
        3,274,4937,8,274,1,274,1,274,3,274,4941,8,274,1,275,1,275,1,275,
        3,275,4946,8,275,1,275,1,275,3,275,4950,8,275,1,276,1,276,1,276,
        1,276,3,276,4956,8,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,
        3,276,4965,8,276,1,276,1,276,1,277,1,277,1,277,5,277,4972,8,277,
        10,277,12,277,4975,9,277,1,277,1,277,1,278,1,278,1,278,5,278,4982,
        8,278,10,278,12,278,4985,9,278,1,279,1,279,1,279,1,280,1,280,4,280,
        4992,8,280,11,280,12,280,4993,1,281,1,281,1,281,3,281,4999,8,281,
        1,282,1,282,1,282,1,282,1,282,1,282,1,282,1,282,1,282,1,282,3,282,
        5011,8,282,1,282,1,282,1,282,1,282,3,282,5017,8,282,1,282,3,282,
        5020,8,282,3,282,5022,8,282,1,283,1,283,1,283,1,284,1,284,1,284,
        1,285,1,285,3,285,5032,8,285,1,285,1,285,1,285,1,285,1,285,1,285,
        1,285,1,285,1,285,1,286,1,286,1,286,1,286,1,286,3,286,5048,8,286,
        1,286,1,286,1,286,1,286,1,286,3,286,5055,8,286,3,286,5057,8,286,
        1,287,1,287,1,287,1,287,1,287,1,288,1,288,1,288,1,288,1,288,5,288,
        5069,8,288,10,288,12,288,5072,9,288,1,288,3,288,5075,8,288,1,288,
        1,288,1,289,1,289,3,289,5081,8,289,1,289,1,289,1,289,3,289,5086,
        8,289,1,289,1,289,1,289,3,289,5091,8,289,1,289,1,289,1,289,3,289,
        5096,8,289,1,289,1,289,1,289,3,289,5101,8,289,1,289,3,289,5104,8,
        289,1,290,1,290,1,290,1,290,1,290,1,291,1,291,1,291,1,291,1,291,
        3,291,5116,8,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,
        1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,
        1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,
        1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,
        1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,3,291,
        5169,8,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,3,291,5178,
        8,291,1,291,1,291,3,291,5182,8,291,1,291,1,291,1,291,1,291,1,291,
        1,291,1,291,3,291,5191,8,291,1,291,1,291,3,291,5195,8,291,1,291,
        1,291,1,291,1,291,1,291,1,291,1,291,3,291,5204,8,291,1,291,1,291,
        3,291,5208,8,291,1,291,1,291,1,291,3,291,5213,8,291,1,291,3,291,
        5216,8,291,1,291,1,291,3,291,5220,8,291,1,291,1,291,1,291,3,291,
        5225,8,291,3,291,5227,8,291,1,291,1,291,1,291,1,291,1,291,1,291,
        1,291,3,291,5236,8,291,1,291,1,291,1,291,3,291,5241,8,291,1,291,
        1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,3,291,5252,8,291,
        1,291,1,291,3,291,5256,8,291,1,291,1,291,1,291,1,291,1,291,1,291,
        1,291,1,291,1,291,1,291,1,291,1,291,3,291,5270,8,291,1,291,1,291,
        1,291,1,291,1,291,1,291,3,291,5278,8,291,1,291,1,291,1,291,1,291,
        1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,
        1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,
        1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,3,291,
        5316,8,291,3,291,5318,8,291,1,292,1,292,1,292,1,292,1,292,1,292,
        1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,
        3,292,5337,8,292,1,292,3,292,5340,8,292,1,292,1,292,1,292,1,292,
        1,292,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,
        1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,3,293,
        5367,8,293,1,293,1,293,3,293,5371,8,293,1,293,1,293,3,293,5375,8,
        293,1,293,1,293,3,293,5379,8,293,1,293,1,293,3,293,5383,8,293,1,
        293,3,293,5386,8,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,
        293,1,293,1,293,1,293,1,293,1,293,3,293,5401,8,293,1,293,1,293,1,
        293,1,293,1,293,3,293,5408,8,293,1,294,1,294,1,294,1,294,1,294,1,
        294,1,295,1,295,1,295,1,295,5,295,5420,8,295,10,295,12,295,5423,
        9,295,1,295,1,295,1,296,1,296,1,296,1,296,3,296,5431,8,296,1,297,
        1,297,1,297,1,297,1,297,3,297,5438,8,297,1,298,1,298,1,298,1,298,
        1,298,1,298,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,
        1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,3,299,5463,8,299,
        1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,
        1,299,1,299,1,299,1,299,1,299,1,299,3,299,5482,8,299,1,299,1,299,
        1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,
        3,299,5497,8,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,
        1,299,1,299,1,299,1,299,1,299,1,299,3,299,5513,8,299,1,299,1,299,
        1,299,1,299,1,299,3,299,5520,8,299,1,300,1,300,1,300,1,300,3,300,
        5526,8,300,1,300,3,300,5529,8,300,1,301,1,301,1,301,1,301,1,301,
        1,301,3,301,5537,8,301,1,302,1,302,1,302,1,302,1,302,1,302,1,302,
        1,302,1,302,1,302,1,302,1,302,1,302,3,302,5552,8,302,1,303,1,303,
        1,303,1,303,1,303,1,303,1,303,1,303,3,303,5562,8,303,1,304,1,304,
        1,304,5,304,5567,8,304,10,304,12,304,5570,9,304,1,305,1,305,1,305,
        1,305,1,305,1,305,1,305,1,305,1,305,1,305,1,305,1,305,1,305,1,305,
        1,305,1,305,1,305,1,305,3,305,5590,8,305,1,305,1,305,1,305,1,305,
        1,305,1,305,1,305,3,305,5599,8,305,1,305,1,305,1,305,1,305,1,305,
        1,305,1,305,1,305,1,305,1,305,1,305,1,305,1,305,1,305,1,305,1,305,
        1,305,1,305,1,305,1,305,3,305,5621,8,305,1,306,1,306,3,306,5625,
        8,306,1,306,1,306,1,306,1,306,1,306,1,306,1,306,1,306,3,306,5635,
        8,306,1,306,1,306,3,306,5639,8,306,1,306,1,306,1,307,1,307,1,307,
        1,307,1,307,1,307,3,307,5649,8,307,1,308,3,308,5652,8,308,1,308,
        1,308,3,308,5656,8,308,5,308,5658,8,308,10,308,12,308,5661,9,308,
        1,309,1,309,1,309,1,309,1,309,3,309,5668,8,309,1,310,1,310,1,311,
        1,311,1,311,3,311,5675,8,311,1,312,1,312,1,312,1,313,1,313,1,313,
        1,314,1,314,1,314,3,314,5686,8,314,1,315,1,315,3,315,5690,8,315,
        1,315,3,315,5693,8,315,1,315,1,315,1,315,3,315,5698,8,315,1,315,
        1,315,1,315,1,315,3,315,5704,8,315,1,315,1,315,1,315,1,315,1,315,
        1,315,1,315,1,315,1,315,3,315,5715,8,315,1,315,1,315,3,315,5719,
        8,315,1,315,3,315,5722,8,315,1,315,1,315,3,315,5726,8,315,1,315,
        1,315,3,315,5730,8,315,1,315,3,315,5733,8,315,1,316,1,316,1,317,
        1,317,1,317,1,317,1,317,1,317,3,317,5743,8,317,1,317,3,317,5746,
        8,317,1,318,1,318,3,318,5750,8,318,1,318,5,318,5753,8,318,10,318,
        12,318,5756,9,318,1,319,1,319,1,319,3,319,5761,8,319,1,319,3,319,
        5764,8,319,1,319,1,319,1,319,3,319,5769,8,319,1,319,3,319,5772,8,
        319,1,319,1,319,1,319,1,319,1,319,3,319,5779,8,319,3,319,5781,8,
        319,1,319,1,319,1,319,3,319,5786,8,319,1,320,1,320,3,320,5790,8,
        320,1,320,1,320,1,320,1,321,1,321,1,321,1,322,1,322,1,322,1,322,
        3,322,5802,8,322,1,322,3,322,5805,8,322,1,323,4,323,5808,8,323,11,
        323,12,323,5809,1,324,1,324,3,324,5814,8,324,1,324,1,324,1,324,3,
        324,5819,8,324,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,3,
        325,5829,8,325,1,326,1,326,1,326,1,326,1,326,1,326,3,326,5837,8,
        326,1,326,3,326,5840,8,326,1,326,3,326,5843,8,326,3,326,5845,8,326,
        1,327,1,327,1,327,1,327,3,327,5851,8,327,1,328,1,328,1,328,1,328,
        5,328,5857,8,328,10,328,12,328,5860,9,328,1,328,1,328,1,329,1,329,
        1,329,1,329,1,329,1,329,1,330,1,330,1,330,1,330,1,330,1,331,1,331,
        1,331,1,331,3,331,5879,8,331,1,331,1,331,1,331,1,332,1,332,1,332,
        1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,3,332,5896,
        8,332,1,332,1,332,3,332,5900,8,332,1,332,1,332,1,332,3,332,5905,
        8,332,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,334,1,334,1,334,
        1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,
        1,334,1,334,1,334,1,334,1,334,1,334,1,334,3,334,5935,8,334,1,334,
        1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,
        1,334,3,334,5950,8,334,1,334,1,334,1,334,3,334,5955,8,334,1,335,
        1,335,3,335,5959,8,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,
        1,335,1,335,1,336,1,336,3,336,5972,8,336,1,336,1,336,3,336,5976,
        8,336,3,336,5978,8,336,1,336,1,336,1,336,1,336,3,336,5984,8,336,
        3,336,5986,8,336,1,337,1,337,1,337,1,337,5,337,5992,8,337,10,337,
        12,337,5995,9,337,1,337,1,337,1,338,1,338,3,338,6001,8,338,1,338,
        3,338,6004,8,338,1,338,3,338,6007,8,338,1,338,3,338,6010,8,338,1,
        338,3,338,6013,8,338,3,338,6015,8,338,1,338,3,338,6018,8,338,1,339,
        1,339,3,339,6022,8,339,1,339,1,339,1,339,1,339,3,339,6028,8,339,
        1,339,3,339,6031,8,339,1,340,1,340,1,340,5,340,6036,8,340,10,340,
        12,340,6039,9,340,1,341,1,341,1,342,1,342,3,342,6045,8,342,1,343,
        1,343,3,343,6049,8,343,1,344,1,344,3,344,6053,8,344,1,345,1,345,
        1,345,5,345,6058,8,345,10,345,12,345,6061,9,345,1,346,1,346,3,346,
        6065,8,346,1,346,1,346,1,346,3,346,6070,8,346,3,346,6072,8,346,1,
        347,1,347,3,347,6076,8,347,1,348,1,348,3,348,6080,8,348,1,349,1,
        349,1,349,5,349,6085,8,349,10,349,12,349,6088,9,349,1,350,1,350,
        1,350,3,350,6093,8,350,1,350,1,350,3,350,6097,8,350,3,350,6099,8,
        350,3,350,6101,8,350,1,350,1,350,1,351,1,351,1,351,1,351,1,351,1,
        351,1,351,1,351,1,351,3,351,6114,8,351,1,352,1,352,1,352,1,352,1,
        353,1,353,1,353,3,353,6123,8,353,1,353,1,353,1,353,1,354,1,354,1,
        354,1,354,1,355,1,355,1,355,1,355,3,355,6136,8,355,1,356,1,356,1,
        356,3,356,6141,8,356,1,356,1,356,3,356,6145,8,356,1,356,1,356,3,
        356,6149,8,356,1,356,1,356,1,356,1,356,1,356,3,356,6156,8,356,1,
        356,3,356,6159,8,356,3,356,6161,8,356,1,357,1,357,1,357,1,357,1,
        358,1,358,3,358,6169,8,358,1,358,1,358,3,358,6173,8,358,1,359,3,
        359,6176,8,359,1,359,1,359,1,359,1,359,1,359,3,359,6183,8,359,1,
        359,1,359,3,359,6187,8,359,1,359,3,359,6190,8,359,1,360,1,360,1,
        360,1,360,3,360,6196,8,360,1,360,1,360,1,360,3,360,6201,8,360,1,
        360,1,360,3,360,6205,8,360,1,361,1,361,1,361,5,361,6210,8,361,10,
        361,12,361,6213,9,361,1,362,1,362,1,362,1,363,1,363,1,363,3,363,
        6221,8,363,1,363,1,363,1,363,1,363,1,363,3,363,6228,8,363,1,363,
        3,363,6231,8,363,1,364,1,364,3,364,6235,8,364,1,364,1,364,1,364,
        3,364,6240,8,364,1,365,1,365,1,365,1,366,3,366,6246,8,366,1,366,
        1,366,1,366,1,366,1,366,3,366,6253,8,366,1,366,3,366,6256,8,366,
        1,366,3,366,6259,8,366,1,367,1,367,3,367,6263,8,367,1,367,1,367,
        1,367,1,367,1,367,3,367,6270,8,367,1,367,3,367,6273,8,367,1,368,
        1,368,1,368,1,368,1,368,1,368,1,368,3,368,6282,8,368,1,368,3,368,
        6285,8,368,1,369,1,369,1,369,3,369,6290,8,369,1,370,3,370,6293,8,
        370,1,370,1,370,1,370,1,370,1,370,3,370,6300,8,370,1,370,3,370,6303,
        8,370,1,370,3,370,6306,8,370,1,371,1,371,1,371,5,371,6311,8,371,
        10,371,12,371,6314,9,371,1,372,1,372,1,372,1,372,1,372,1,372,1,372,
        1,372,1,372,3,372,6325,8,372,1,372,1,372,1,372,1,372,1,372,3,372,
        6332,8,372,3,372,6334,8,372,1,373,1,373,1,373,1,373,1,373,1,373,
        3,373,6342,8,373,1,373,1,373,1,373,1,374,1,374,1,374,5,374,6350,
        8,374,10,374,12,374,6353,9,374,1,375,1,375,3,375,6357,8,375,1,376,
        1,376,1,376,3,376,6362,8,376,1,376,1,376,1,377,3,377,6367,8,377,
        1,377,1,377,3,377,6371,8,377,1,377,1,377,3,377,6375,8,377,1,377,
        1,377,3,377,6379,8,377,3,377,6381,8,377,1,378,1,378,3,378,6385,8,
        378,1,379,1,379,3,379,6389,8,379,1,379,3,379,6392,8,379,1,379,3,
        379,6395,8,379,3,379,6397,8,379,1,379,1,379,1,379,1,379,1,379,1,
        379,1,379,1,379,3,379,6407,8,379,3,379,6409,8,379,1,379,1,379,1,
        379,3,379,6414,8,379,5,379,6416,8,379,10,379,12,379,6419,9,379,1,
        380,1,380,3,380,6423,8,380,1,381,1,381,3,381,6427,8,381,1,381,1,
        381,1,381,5,381,6432,8,381,10,381,12,381,6435,9,381,1,382,1,382,
        3,382,6439,8,382,1,382,1,382,3,382,6443,8,382,1,382,3,382,6446,8,
        382,1,382,1,382,1,382,1,382,3,382,6452,8,382,1,382,3,382,6455,8,
        382,1,383,1,383,1,383,1,383,1,383,1,383,1,383,1,383,1,384,1,384,
        1,384,1,384,1,384,1,384,1,384,1,384,1,384,3,384,6474,8,384,1,384,
        1,384,1,384,1,385,1,385,3,385,6481,8,385,1,385,1,385,3,385,6485,
        8,385,1,386,3,386,6488,8,386,1,386,1,386,3,386,6492,8,386,1,386,
        1,386,3,386,6496,8,386,1,386,3,386,6499,8,386,1,386,3,386,6502,8,
        386,1,387,1,387,1,388,1,388,1,388,3,388,6509,8,388,1,389,1,389,1,
        389,1,389,1,389,5,389,6516,8,389,10,389,12,389,6519,9,389,1,390,
        1,390,1,390,1,390,3,390,6525,8,390,1,390,3,390,6528,8,390,1,391,
        1,391,3,391,6532,8,391,1,391,1,391,3,391,6536,8,391,1,391,3,391,
        6539,8,391,3,391,6541,8,391,1,392,1,392,1,392,3,392,6546,8,392,1,
        392,1,392,3,392,6550,8,392,1,393,1,393,1,393,1,393,1,393,1,393,1,
        393,3,393,6559,8,393,1,393,1,393,1,393,1,393,3,393,6565,8,393,3,
        393,6567,8,393,1,394,1,394,1,394,1,394,1,394,3,394,6574,8,394,1,
        395,1,395,1,395,3,395,6579,8,395,1,396,1,396,1,397,1,397,1,397,3,
        397,6586,8,397,1,397,1,397,1,398,1,398,1,398,5,398,6593,8,398,10,
        398,12,398,6596,9,398,1,399,1,399,1,399,3,399,6601,8,399,1,399,1,
        399,1,399,1,399,1,399,1,399,1,399,1,399,1,399,1,399,3,399,6613,8,
        399,1,400,1,400,1,400,1,401,1,401,1,401,1,402,4,402,6622,8,402,11,
        402,12,402,6623,1,402,1,402,1,402,3,402,6629,8,402,1,403,1,403,1,
        403,3,403,6634,8,403,1,403,3,403,6637,8,403,1,404,1,404,1,404,3,
        404,6642,8,404,1,404,1,404,3,404,6646,8,404,1,404,3,404,6649,8,404,
        1,405,1,405,1,405,1,405,5,405,6655,8,405,10,405,12,405,6658,9,405,
        1,406,1,406,1,406,1,407,1,407,1,407,5,407,6666,8,407,10,407,12,407,
        6669,9,407,1,408,1,408,3,408,6673,8,408,1,408,3,408,6676,8,408,1,
        408,3,408,6679,8,408,1,408,3,408,6682,8,408,1,408,1,408,3,408,6686,
        8,408,1,408,1,408,3,408,6690,8,408,1,408,1,408,3,408,6694,8,408,
        3,408,6696,8,408,1,408,1,408,1,408,1,408,1,408,1,408,1,408,3,408,
        6705,8,408,1,408,1,408,1,408,3,408,6710,8,408,1,408,1,408,1,408,
        1,408,3,408,6716,8,408,1,408,1,408,3,408,6720,8,408,3,408,6722,8,
        408,1,408,1,408,1,408,1,408,1,408,3,408,6729,8,408,1,408,1,408,1,
        408,3,408,6734,8,408,1,408,1,408,1,408,1,408,5,408,6740,8,408,10,
        408,12,408,6743,9,408,1,409,3,409,6746,8,409,1,409,1,409,1,409,1,
        409,1,409,3,409,6753,8,409,1,410,1,410,1,410,3,410,6758,8,410,1,
        410,3,410,6761,8,410,1,410,1,410,1,410,1,410,3,410,6767,8,410,1,
        411,1,411,3,411,6771,8,411,1,412,1,412,1,412,1,412,3,412,6777,8,
        412,1,413,1,413,1,413,1,413,1,413,1,413,1,413,3,413,6786,8,413,1,
        413,1,413,1,413,1,413,3,413,6792,8,413,3,413,6794,8,413,1,414,3,
        414,6797,8,414,1,414,1,414,3,414,6801,8,414,1,414,3,414,6804,8,414,
        1,414,3,414,6807,8,414,1,415,1,415,1,415,3,415,6812,8,415,1,415,
        3,415,6815,8,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,3,415,
        6824,8,415,1,415,1,415,1,415,1,415,1,415,3,415,6831,8,415,3,415,
        6833,8,415,1,416,1,416,1,416,5,416,6838,8,416,10,416,12,416,6841,
        9,416,1,417,1,417,1,417,5,417,6846,8,417,10,417,12,417,6849,9,417,
        1,418,1,418,3,418,6853,8,418,1,418,3,418,6856,8,418,1,419,1,419,
        1,419,1,419,3,419,6862,8,419,1,420,1,420,1,420,1,420,1,420,1,421,
        1,421,1,421,1,421,1,421,1,421,1,421,3,421,6876,8,421,1,421,1,421,
        3,421,6880,8,421,1,422,1,422,1,422,1,422,1,422,1,422,3,422,6888,
        8,422,1,423,1,423,1,423,5,423,6893,8,423,10,423,12,423,6896,9,423,
        1,424,1,424,1,424,1,425,1,425,1,425,1,425,1,425,3,425,6906,8,425,
        1,426,1,426,1,426,5,426,6911,8,426,10,426,12,426,6914,9,426,1,427,
        1,427,1,427,3,427,6919,8,427,1,428,1,428,1,428,1,428,1,428,1,428,
        1,428,1,428,3,428,6929,8,428,1,428,1,428,1,428,1,428,1,428,1,428,
        1,428,1,429,1,429,1,429,5,429,6941,8,429,10,429,12,429,6944,9,429,
        1,430,1,430,1,430,3,430,6949,8,430,1,430,1,430,3,430,6953,8,430,
        1,431,4,431,6956,8,431,11,431,12,431,6957,1,432,1,432,3,432,6962,
        8,432,1,432,1,432,3,432,6966,8,432,1,432,3,432,6969,8,432,1,433,
        1,433,1,433,5,433,6974,8,433,10,433,12,433,6977,9,433,1,434,1,434,
        1,434,1,434,1,434,1,434,3,434,6985,8,434,1,435,3,435,6988,8,435,
        1,435,1,435,1,435,1,435,1,435,1,435,3,435,6996,8,435,3,435,6998,
        8,435,1,435,1,435,1,435,1,435,3,435,7004,8,435,1,436,1,436,3,436,
        7008,8,436,1,436,5,436,7011,8,436,10,436,12,436,7014,9,436,1,437,
        1,437,1,437,1,437,3,437,7020,8,437,1,437,3,437,7023,8,437,3,437,
        7025,8,437,1,438,1,438,1,438,1,438,3,438,7031,8,438,1,439,1,439,
        3,439,7035,8,439,1,439,3,439,7038,8,439,1,440,1,440,1,440,1,440,
        1,440,1,440,1,440,3,440,7047,8,440,1,440,1,440,1,440,1,440,3,440,
        7053,8,440,1,440,3,440,7056,8,440,1,441,1,441,1,441,1,441,1,442,
        1,442,3,442,7064,8,442,1,442,3,442,7067,8,442,1,443,1,443,3,443,
        7071,8,443,1,444,1,444,3,444,7075,8,444,1,444,1,444,1,444,1,444,
        3,444,7081,8,444,3,444,7083,8,444,1,445,1,445,3,445,7087,8,445,1,
        445,1,445,1,445,3,445,7092,8,445,1,446,1,446,1,446,1,446,1,446,3,
        446,7099,8,446,1,446,1,446,1,446,1,446,1,446,3,446,7106,8,446,3,
        446,7108,8,446,1,446,1,446,1,446,1,446,3,446,7114,8,446,3,446,7116,
        8,446,1,446,1,446,1,446,3,446,7121,8,446,3,446,7123,8,446,1,447,
        1,447,3,447,7127,8,447,1,448,1,448,1,449,1,449,1,450,1,450,1,450,
        3,450,7136,8,450,1,450,1,450,3,450,7140,8,450,1,450,1,450,1,450,
        1,450,1,450,1,450,5,450,7148,8,450,10,450,12,450,7151,9,450,1,451,
        1,451,1,451,1,451,1,451,1,451,1,451,1,451,1,451,1,451,1,451,3,451,
        7164,8,451,1,451,3,451,7167,8,451,1,451,1,451,1,451,1,451,1,451,
        1,451,3,451,7175,8,451,1,451,1,451,1,451,1,451,1,451,5,451,7182,
        8,451,10,451,12,451,7185,9,451,1,451,1,451,1,451,3,451,7190,8,451,
        1,451,1,451,1,451,3,451,7195,8,451,1,451,1,451,1,451,1,451,1,451,
        1,451,3,451,7203,8,451,3,451,7205,8,451,1,451,1,451,1,451,3,451,
        7210,8,451,1,451,1,451,3,451,7214,8,451,1,451,1,451,1,451,3,451,
        7219,8,451,1,451,1,451,1,451,3,451,7224,8,451,1,452,1,452,1,452,
        1,452,3,452,7230,8,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,5,452,7246,8,452,10,452,
        12,452,7249,9,452,1,453,1,453,1,453,1,453,1,453,1,453,3,453,7257,
        8,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,
        1,453,1,453,1,453,3,453,7272,8,453,1,453,1,453,1,453,3,453,7277,
        8,453,1,453,3,453,7280,8,453,1,453,1,453,1,453,1,453,3,453,7286,
        8,453,1,453,1,453,1,453,3,453,7291,8,453,1,453,1,453,1,453,1,453,
        1,453,1,453,1,453,1,453,1,453,1,453,1,453,3,453,7304,8,453,1,453,
        4,453,7307,8,453,11,453,12,453,7308,1,453,1,453,3,453,7313,8,453,
        1,453,1,453,1,453,1,453,1,453,3,453,7320,8,453,1,453,1,453,1,453,
        1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,
        1,453,1,453,1,453,3,453,7339,8,453,1,453,1,453,1,453,1,453,1,453,
        1,453,1,453,1,453,1,453,1,453,3,453,7351,8,453,1,453,1,453,1,453,
        3,453,7356,8,453,1,453,1,453,1,453,1,453,1,453,1,453,3,453,7364,
        8,453,5,453,7366,8,453,10,453,12,453,7369,9,453,1,454,1,454,1,454,
        1,454,1,454,1,454,3,454,7377,8,454,1,454,3,454,7380,8,454,1,454,
        1,454,1,454,3,454,7385,8,454,1,454,1,454,1,454,3,454,7390,8,454,
        1,454,1,454,3,454,7394,8,454,1,454,3,454,7397,8,454,1,455,1,455,
        1,455,1,455,1,455,1,455,1,455,3,455,7406,8,455,1,455,1,455,1,455,
        1,455,1,455,1,455,3,455,7414,8,455,1,455,1,455,1,455,3,455,7419,
        8,455,3,455,7421,8,455,1,455,3,455,7424,8,455,1,456,1,456,3,456,
        7428,8,456,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,
        3,457,7439,8,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,
        1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,3,457,7457,8,457,
        1,457,1,457,1,457,1,457,1,457,1,457,3,457,7465,8,457,1,457,1,457,
        1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,
        3,457,7480,8,457,1,457,1,457,1,457,1,457,3,457,7486,8,457,1,457,
        1,457,1,457,1,457,3,457,7492,8,457,1,457,1,457,1,457,1,457,1,457,
        1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,
        1,457,1,457,1,457,3,457,7513,8,457,3,457,7515,8,457,1,457,1,457,
        1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,
        1,457,1,457,1,457,1,457,1,457,3,457,7535,8,457,1,457,1,457,1,457,
        1,457,1,457,1,457,1,457,1,457,3,457,7545,8,457,1,457,1,457,1,457,
        1,457,1,457,1,457,1,457,1,457,1,457,3,457,7556,8,457,1,457,1,457,
        1,457,1,457,1,457,1,457,1,457,1,457,1,457,1,457,3,457,7568,8,457,
        1,458,1,458,1,458,1,458,3,458,7574,8,458,1,459,1,459,1,459,3,459,
        7579,8,459,1,459,1,459,3,459,7583,8,459,1,460,1,460,1,460,1,460,
        1,460,1,461,1,461,1,461,5,461,7593,8,461,10,461,12,461,7596,9,461,
        1,462,1,462,1,462,3,462,7601,8,462,1,463,1,463,1,464,1,464,1,464,
        1,465,1,465,3,465,7610,8,465,1,465,1,465,3,465,7614,8,465,1,466,
        1,466,1,466,1,467,1,467,1,467,1,468,1,468,1,468,5,468,7625,8,468,
        10,468,12,468,7628,9,468,1,469,1,469,1,469,1,469,1,470,1,470,1,470,
        3,470,7637,8,470,1,471,1,471,3,471,7641,8,471,1,471,1,471,1,471,
        3,471,7646,8,471,1,471,3,471,7649,8,471,1,471,3,471,7652,8,471,1,
        471,1,471,1,472,1,472,1,472,1,472,1,472,3,472,7661,8,472,1,472,1,
        472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,3,472,7672,8,472,3,
        472,7674,8,472,1,473,1,473,3,473,7678,8,473,1,473,1,473,1,473,3,
        473,7683,8,473,1,474,1,474,1,474,1,474,1,474,1,474,1,474,3,474,7692,
        8,474,1,475,1,475,1,475,3,475,7697,8,475,1,475,1,475,1,476,1,476,
        1,477,1,477,3,477,7705,8,477,1,478,1,478,1,479,1,479,1,479,1,479,
        1,479,1,479,3,479,7715,8,479,1,480,1,480,1,480,1,480,1,480,1,480,
        3,480,7723,8,480,1,481,1,481,3,481,7727,8,481,1,481,1,481,3,481,
        7731,8,481,1,481,3,481,7734,8,481,1,482,1,482,1,482,5,482,7739,8,
        482,10,482,12,482,7742,9,482,1,483,1,483,1,483,5,483,7747,8,483,
        10,483,12,483,7750,9,483,1,484,1,484,1,484,5,484,7755,8,484,10,484,
        12,484,7758,9,484,1,485,1,485,1,485,1,485,1,485,3,485,7765,8,485,
        1,486,1,486,3,486,7769,8,486,1,487,1,487,1,487,5,487,7774,8,487,
        10,487,12,487,7777,9,487,1,488,1,488,1,488,1,488,1,488,3,488,7784,
        8,488,1,489,1,489,1,489,3,489,7789,8,489,1,489,1,489,1,490,1,490,
        1,490,5,490,7796,8,490,10,490,12,490,7799,9,490,1,491,1,491,1,491,
        1,491,1,492,1,492,1,492,1,492,1,492,1,492,1,492,1,492,3,492,7813,
        8,492,1,493,1,493,1,494,1,494,1,494,1,494,1,494,1,494,1,494,3,494,
        7824,8,494,1,495,1,495,1,495,1,495,1,495,3,495,7831,8,495,1,495,
        1,495,1,495,1,495,1,495,3,495,7838,8,495,1,495,1,495,1,495,1,495,
        1,495,1,495,1,495,3,495,7847,8,495,1,496,3,496,7850,8,496,1,496,
        3,496,7853,8,496,1,496,1,496,1,497,1,497,1,497,1,497,1,497,1,498,
        1,498,1,498,3,498,7865,8,498,1,498,1,498,1,498,3,498,7870,8,498,
        1,498,1,498,3,498,7874,8,498,3,498,7876,8,498,1,498,3,498,7879,8,
        498,1,499,4,499,7882,8,499,11,499,12,499,7883,1,500,5,500,7887,8,
        500,10,500,12,500,7890,9,500,1,501,1,501,1,501,5,501,7895,8,501,
        10,501,12,501,7898,9,501,1,502,1,502,1,502,1,502,1,502,3,502,7905,
        8,502,1,502,3,502,7908,8,502,1,503,1,503,1,503,5,503,7913,8,503,
        10,503,12,503,7916,9,503,1,504,1,504,1,504,5,504,7921,8,504,10,504,
        12,504,7924,9,504,1,505,1,505,1,505,5,505,7929,8,505,10,505,12,505,
        7932,9,505,1,506,1,506,1,506,5,506,7937,8,506,10,506,12,506,7940,
        9,506,1,507,1,507,1,507,5,507,7945,8,507,10,507,12,507,7948,9,507,
        1,508,1,508,1,509,1,509,1,510,1,510,1,511,1,511,1,512,1,512,1,513,
        1,513,1,514,1,514,3,514,7964,8,514,1,515,1,515,1,515,5,515,7969,
        8,515,10,515,12,515,7972,9,515,1,516,1,516,1,516,5,516,7977,8,516,
        10,516,12,516,7980,9,516,1,517,1,517,1,518,1,518,1,519,1,519,1,520,
        1,520,1,521,1,521,1,522,1,522,1,522,1,522,3,522,7996,8,522,1,523,
        1,523,1,523,1,523,3,523,8002,8,523,1,524,1,524,1,524,1,524,3,524,
        8008,8,524,1,525,1,525,1,526,1,526,1,526,1,526,3,526,8016,8,526,
        1,527,1,527,1,527,1,527,3,527,8022,8,527,1,528,1,528,1,528,1,528,
        3,528,8028,8,528,1,529,1,529,1,529,3,529,8033,8,529,1,530,1,530,
        1,530,1,530,5,530,8039,8,530,10,530,12,530,8042,9,530,1,530,1,530,
        3,530,8046,8,530,1,531,3,531,8049,8,531,1,531,1,531,1,532,1,532,
        1,532,1,532,1,532,3,532,8058,8,532,1,533,1,533,1,533,5,533,8063,
        8,533,10,533,12,533,8066,9,533,1,534,1,534,1,534,1,534,3,534,8072,
        8,534,1,535,1,535,1,535,1,535,3,535,8078,8,535,1,536,1,536,1,536,
        1,536,3,536,8084,8,536,1,537,1,537,1,537,3,537,8089,8,537,1,538,
        1,538,1,538,3,538,8094,8,538,1,538,1,538,1,538,1,538,1,538,1,538,
        3,538,8102,8,538,1,539,1,539,1,540,1,540,1,540,1,540,1,540,1,540,
        1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,
        1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,
        1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,
        1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,1,540,
        1,540,3,540,8157,8,540,1,541,1,541,1,542,1,542,1,543,1,543,1,543,
        1,543,1,543,1,543,1,543,1,543,1,543,3,543,8172,8,543,1,544,1,544,
        1,544,1,544,3,544,8178,8,544,1,545,1,545,1,545,1,545,3,545,8184,
        8,545,1,545,1,545,3,545,8188,8,545,1,546,3,546,8191,8,546,1,546,
        1,546,3,546,8195,8,546,3,546,8197,8,546,1,547,1,547,1,547,4,547,
        8202,8,547,11,547,12,547,8203,1,548,1,548,1,548,1,548,1,549,1,549,
        1,549,1,549,1,549,3,549,8215,8,549,1,549,1,549,3,549,8219,8,549,
        1,549,1,549,3,549,8223,8,549,1,549,1,549,1,549,3,549,8228,8,549,
        1,549,3,549,8231,8,549,1,549,1,549,3,549,8235,8,549,1,549,1,549,
        3,549,8239,8,549,1,549,1,549,1,550,3,550,8244,8,550,1,550,1,550,
        1,551,1,551,1,551,1,551,1,552,1,552,1,552,5,552,8255,8,552,10,552,
        12,552,8258,9,552,1,553,1,553,1,553,1,554,1,554,3,554,8265,8,554,
        1,555,1,555,3,555,8269,8,555,1,556,1,556,1,557,5,557,8274,8,557,
        10,557,12,557,8277,9,557,1,558,1,558,1,558,1,558,1,558,1,558,1,558,
        1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,
        1,558,1,558,1,558,1,558,1,558,1,558,3,558,8303,8,558,1,559,1,559,
        1,559,1,559,1,560,1,560,1,560,1,560,3,560,8313,8,560,1,560,1,560,
        3,560,8317,8,560,1,560,1,560,1,560,1,560,3,560,8323,8,560,1,560,
        1,560,1,560,3,560,8328,8,560,1,561,1,561,1,561,1,561,1,561,1,562,
        1,562,3,562,8337,8,562,1,562,1,562,1,562,1,562,1,563,1,563,1,563,
        5,563,8346,8,563,10,563,12,563,8349,9,563,1,564,1,564,1,564,1,564,
        1,565,1,565,3,565,8357,8,565,1,565,1,565,1,565,1,565,5,565,8363,
        8,565,10,565,12,565,8366,9,565,1,566,1,566,1,566,1,566,1,566,1,566,
        3,566,8374,8,566,1,566,1,566,1,566,1,566,1,567,1,567,1,567,1,567,
        1,567,5,567,8385,8,567,10,567,12,567,8388,9,567,1,568,1,568,1,568,
        1,569,1,569,3,569,8395,8,569,1,569,4,569,8398,8,569,11,569,12,569,
        8399,1,569,3,569,8403,8,569,1,569,1,569,1,569,1,569,1,570,1,570,
        1,570,1,570,1,570,1,571,3,571,8415,8,571,1,571,1,571,1,571,1,571,
        3,571,8421,8,571,1,571,1,571,1,572,1,572,1,572,1,572,3,572,8429,
        8,572,1,572,1,572,1,572,1,572,1,572,3,572,8436,8,572,1,572,3,572,
        8439,8,572,1,572,1,572,1,572,1,572,1,572,3,572,8446,8,572,3,572,
        8448,8,572,1,573,1,573,1,573,1,574,3,574,8454,8,574,1,574,1,574,
        1,574,1,574,3,574,8460,8,574,1,574,1,574,1,574,1,574,1,574,1,575,
        1,575,3,575,8469,8,575,1,575,1,575,3,575,8473,8,575,1,575,1,575,
        1,576,1,576,1,576,1,576,1,576,1,576,1,576,1,576,1,576,3,576,8486,
        8,576,1,576,3,576,8489,8,576,3,576,8491,8,576,1,576,1,576,1,577,
        1,577,3,577,8497,8,577,1,577,1,577,1,577,1,577,1,577,3,577,8504,
        8,577,3,577,8506,8,577,1,577,1,577,3,577,8510,8,577,1,577,3,577,
        8513,8,577,1,578,1,578,1,579,1,579,4,579,8519,8,579,11,579,12,579,
        8520,1,580,1,580,1,580,1,580,1,581,1,581,1,581,5,581,8530,8,581,
        10,581,12,581,8533,9,581,1,582,1,582,1,582,1,582,3,582,8539,8,582,
        1,582,1,582,1,583,1,583,1,583,1,583,1,583,3,583,8548,8,583,1,583,
        1,583,1,584,1,584,3,584,8554,8,584,1,584,1,584,1,585,1,585,1,585,
        3,585,8561,8,585,1,585,3,585,8564,8,585,1,585,3,585,8567,8,585,1,
        585,3,585,8570,8,585,1,585,3,585,8573,8,585,1,585,1,585,1,586,1,
        586,3,586,8579,8,586,1,586,1,586,1,587,1,587,1,587,3,587,8586,8,
        587,1,587,1,587,1,587,1,587,1,587,3,587,8593,8,587,3,587,8595,8,
        587,1,587,1,587,1,587,1,587,1,587,3,587,8602,8,587,3,587,8604,8,
        587,1,587,1,587,1,588,1,588,1,588,3,588,8611,8,588,1,588,1,588,1,
        589,1,589,1,589,5,589,8618,8,589,10,589,12,589,8621,9,589,1,590,
        1,590,3,590,8625,8,590,1,590,3,590,8628,8,590,1,590,1,590,1,590,
        1,590,1,590,1,591,1,591,1,591,1,591,1,591,3,591,8640,8,591,1,591,
        1,591,1,591,1,591,1,591,3,591,8647,8,591,3,591,8649,8,591,1,592,
        1,592,3,592,8653,8,592,1,592,1,592,1,592,1,593,3,593,8659,8,593,
        1,593,1,593,1,593,3,593,8664,8,593,1,593,1,593,3,593,8668,8,593,
        1,593,3,593,8671,8,593,1,593,3,593,8674,8,593,1,593,1,593,1,593,
        1,593,1,593,4,593,8681,8,593,11,593,12,593,8682,1,594,3,594,8686,
        8,594,1,594,1,594,3,594,8690,8,594,1,594,1,594,3,594,8694,8,594,
        3,594,8696,8,594,1,594,3,594,8699,8,594,1,594,3,594,8702,8,594,1,
        595,1,595,1,595,1,595,3,595,8708,8,595,1,595,1,595,1,595,1,595,1,
        595,3,595,8715,8,595,1,595,1,595,1,595,1,595,1,595,3,595,8722,8,
        595,1,595,1,595,1,595,1,595,3,595,8728,8,595,3,595,8730,8,595,1,
        596,1,596,3,596,8734,8,596,1,596,1,596,1,596,3,596,8739,8,596,1,
        596,1,596,1,597,1,597,1,597,1,597,1,597,1,597,1,597,1,597,1,597,
        1,597,1,597,1,597,4,597,8755,8,597,11,597,12,597,8756,1,598,1,598,
        1,598,1,598,3,598,8763,8,598,1,599,1,599,1,599,1,599,5,599,8769,
        8,599,10,599,12,599,8772,9,599,1,599,1,599,1,600,1,600,3,600,8778,
        8,600,1,601,1,601,1,601,1,601,1,602,1,602,1,602,1,603,1,603,1,603,
        3,603,8790,8,603,1,603,3,603,8793,8,603,1,603,1,603,1,604,1,604,
        1,604,1,604,1,604,1,604,1,604,1,604,1,604,3,604,8806,8,604,1,604,
        3,604,8809,8,604,1,605,1,605,3,605,8813,8,605,1,606,1,606,4,606,
        8817,8,606,11,606,12,606,8818,1,607,1,607,1,607,1,607,1,607,1,608,
        1,608,1,608,5,608,8829,8,608,10,608,12,608,8832,9,608,1,609,1,609,
        1,609,3,609,8837,8,609,1,610,1,610,3,610,8841,8,610,1,611,1,611,
        1,612,3,612,8846,8,612,1,612,3,612,8849,8,612,1,612,3,612,8852,8,
        612,1,612,3,612,8855,8,612,1,612,3,612,8858,8,612,1,612,3,612,8861,
        8,612,1,612,3,612,8864,8,612,1,612,0,3,900,904,906,613,0,2,4,6,8,
        10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
        54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
        98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
        164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
        196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,
        228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,
        260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
        292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
        324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
        356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
        388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,
        420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,
        452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,
        484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,
        516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,
        548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,
        580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,
        612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,
        644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,
        676,678,680,682,684,686,688,690,692,694,696,698,700,702,704,706,
        708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,
        740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,
        772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,802,
        804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,
        836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,866,
        868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,898,
        900,902,904,906,908,910,912,914,916,918,920,922,924,926,928,930,
        932,934,936,938,940,942,944,946,948,950,952,954,956,958,960,962,
        964,966,968,970,972,974,976,978,980,982,984,986,988,990,992,994,
        996,998,1000,1002,1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,
        1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,
        1050,1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,
        1076,1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,
        1102,1104,1106,1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,
        1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,
        1154,1156,1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,
        1180,1182,1184,1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,
        1206,1208,1210,1212,1214,1216,1218,1220,1222,1224,0,119,2,0,195,
        195,364,364,2,0,66,66,318,318,2,0,99,99,318,318,2,0,134,134,318,
        318,1,0,529,531,2,0,10,10,94,94,2,0,133,133,191,191,2,0,254,254,
        332,332,2,0,162,162,363,363,2,0,180,180,221,221,5,0,30,30,288,288,
        329,329,352,352,354,354,2,0,109,109,532,532,2,0,158,158,277,277,
        2,0,367,367,439,439,2,0,139,139,312,312,2,0,191,191,333,333,2,0,
        313,313,333,333,2,0,150,150,315,315,2,0,64,64,94,94,4,0,78,78,183,
        183,197,197,298,298,2,0,213,213,254,254,2,0,352,352,354,354,2,0,
        200,200,224,224,9,0,30,30,160,160,165,165,179,179,219,219,227,227,
        342,342,345,345,438,438,3,0,113,113,284,284,336,336,2,0,53,53,78,
        78,2,0,105,105,379,379,2,0,260,260,262,262,3,0,173,173,260,260,262,
        262,1,0,12,13,2,0,64,64,375,375,2,0,156,156,206,206,2,0,189,189,
        360,360,2,0,215,215,373,373,3,0,133,133,191,191,333,333,2,0,9,9,
        94,94,5,0,30,30,88,88,182,182,241,241,369,369,2,0,92,92,226,226,
        2,0,341,341,414,414,1,0,448,449,2,0,92,92,414,414,4,0,163,163,185,
        185,283,283,353,353,2,0,135,135,145,145,2,0,211,211,278,278,3,0,
        321,321,357,357,445,445,3,0,66,66,99,99,318,318,5,0,108,108,168,
        168,226,226,328,328,342,342,2,0,167,167,314,314,2,0,61,61,265,265,
        4,0,207,207,249,249,268,268,293,293,2,0,130,130,307,307,2,0,64,64,
        68,68,10,0,46,46,88,88,182,182,202,202,241,241,352,352,354,354,357,
        358,369,369,521,523,5,0,212,212,329,329,350,350,455,455,457,457,
        5,0,212,212,329,329,350,350,361,361,455,456,2,0,37,37,55,55,2,0,
        207,207,249,249,2,0,10,10,53,53,2,0,181,181,243,243,2,0,170,170,
        320,320,2,0,141,141,223,223,5,0,108,108,168,168,189,189,342,342,
        360,360,2,0,226,226,328,328,2,0,163,163,185,185,2,0,186,186,193,
        193,2,0,137,137,242,242,4,0,88,88,182,182,241,241,369,369,2,0,161,
        161,319,319,4,0,129,129,161,161,319,319,454,454,2,0,356,356,380,
        380,2,0,81,81,382,382,2,0,151,151,254,254,2,0,133,133,138,138,1,
        0,31,32,2,0,128,128,547,547,2,0,60,60,96,96,2,0,99,99,349,349,2,
        0,131,131,414,414,2,0,201,201,334,334,3,0,59,59,70,70,97,97,1,0,
        527,528,2,0,30,30,56,56,2,0,207,207,268,268,2,0,571,571,573,573,
        2,0,320,320,414,414,1,0,468,469,4,0,113,113,115,115,119,119,126,
        126,2,0,360,360,477,477,2,0,394,395,409,409,2,0,391,392,406,406,
        1,0,391,392,1,0,418,419,5,0,10,10,16,17,21,21,23,23,25,25,3,0,9,
        9,14,14,27,27,2,0,98,98,396,396,2,0,50,51,75,76,2,0,41,41,420,420,
        3,0,39,39,73,73,95,95,4,0,393,393,399,399,404,404,425,425,2,0,166,
        166,188,188,2,0,292,292,347,347,2,0,304,304,450,450,3,0,299,299,
        320,320,481,481,2,0,208,208,289,289,3,0,30,30,34,34,90,90,6,0,9,
        10,12,17,21,21,23,23,25,25,27,27,2,0,20,20,22,22,1,0,483,486,10,
        0,124,124,129,228,238,386,433,452,455,469,471,471,473,473,475,475,
        478,488,547,548,3,0,106,123,125,128,472,472,4,0,30,52,54,70,72,105,
        454,454,1,0,493,495,2,0,62,62,116,116,2,0,10,10,20,20,2,0,434,434,
        501,501,2,0,167,167,507,507,1,0,512,517,2,0,144,144,210,210,36,0,
        33,33,35,35,43,43,45,45,53,53,57,57,61,61,116,116,123,123,130,130,
        144,144,153,153,157,157,161,161,167,167,172,172,207,207,210,210,
        241,241,249,249,265,265,268,269,279,279,293,293,307,307,313,313,
        319,319,323,324,333,333,360,360,433,434,477,477,490,502,504,504,
        506,518,520,520,10130,0,1229,1,0,0,0,2,1234,1,0,0,0,4,1358,1,0,0,
        0,6,1360,1,0,0,0,8,1363,1,0,0,0,10,1374,1,0,0,0,12,1380,1,0,0,0,
        14,1421,1,0,0,0,16,1431,1,0,0,0,18,1433,1,0,0,0,20,1441,1,0,0,0,
        22,1449,1,0,0,0,24,1460,1,0,0,0,26,1494,1,0,0,0,28,1538,1,0,0,0,
        30,1540,1,0,0,0,32,1548,1,0,0,0,34,1555,1,0,0,0,36,1574,1,0,0,0,
        38,1582,1,0,0,0,40,1584,1,0,0,0,42,1598,1,0,0,0,44,1602,1,0,0,0,
        46,1639,1,0,0,0,48,1641,1,0,0,0,50,1649,1,0,0,0,52,1659,1,0,0,0,
        54,1666,1,0,0,0,56,1674,1,0,0,0,58,1680,1,0,0,0,60,1696,1,0,0,0,
        62,1700,1,0,0,0,64,1702,1,0,0,0,66,1714,1,0,0,0,68,1719,1,0,0,0,
        70,1724,1,0,0,0,72,1726,1,0,0,0,74,1738,1,0,0,0,76,1746,1,0,0,0,
        78,1748,1,0,0,0,80,1872,1,0,0,0,82,1874,1,0,0,0,84,1891,1,0,0,0,
        86,1893,1,0,0,0,88,1907,1,0,0,0,90,1909,1,0,0,0,92,1923,1,0,0,0,
        94,1925,1,0,0,0,96,2134,1,0,0,0,98,2141,1,0,0,0,100,2143,1,0,0,0,
        102,2145,1,0,0,0,104,2152,1,0,0,0,106,2154,1,0,0,0,108,2158,1,0,
        0,0,110,2161,1,0,0,0,112,2169,1,0,0,0,114,2189,1,0,0,0,116,2207,
        1,0,0,0,118,2209,1,0,0,0,120,2212,1,0,0,0,122,2223,1,0,0,0,124,2264,
        1,0,0,0,126,2266,1,0,0,0,128,2308,1,0,0,0,130,2313,1,0,0,0,132,2332,
        1,0,0,0,134,2357,1,0,0,0,136,2360,1,0,0,0,138,2365,1,0,0,0,140,2376,
        1,0,0,0,142,2378,1,0,0,0,144,2386,1,0,0,0,146,2467,1,0,0,0,148,2469,
        1,0,0,0,150,2473,1,0,0,0,152,2481,1,0,0,0,154,2492,1,0,0,0,156,2502,
        1,0,0,0,158,2504,1,0,0,0,160,2525,1,0,0,0,162,2537,1,0,0,0,164,2558,
        1,0,0,0,166,2620,1,0,0,0,168,2622,1,0,0,0,170,2631,1,0,0,0,172,2634,
        1,0,0,0,174,2638,1,0,0,0,176,2641,1,0,0,0,178,2650,1,0,0,0,180,2654,
        1,0,0,0,182,2723,1,0,0,0,184,2725,1,0,0,0,186,2729,1,0,0,0,188,2740,
        1,0,0,0,190,2748,1,0,0,0,192,2751,1,0,0,0,194,2754,1,0,0,0,196,2762,
        1,0,0,0,198,2772,1,0,0,0,200,2785,1,0,0,0,202,2787,1,0,0,0,204,2791,
        1,0,0,0,206,2804,1,0,0,0,208,2806,1,0,0,0,210,2811,1,0,0,0,212,2816,
        1,0,0,0,214,2833,1,0,0,0,216,2841,1,0,0,0,218,2848,1,0,0,0,220,2850,
        1,0,0,0,222,2859,1,0,0,0,224,2863,1,0,0,0,226,2871,1,0,0,0,228,2875,
        1,0,0,0,230,2879,1,0,0,0,232,2897,1,0,0,0,234,2907,1,0,0,0,236,2921,
        1,0,0,0,238,2937,1,0,0,0,240,2943,1,0,0,0,242,2958,1,0,0,0,244,2971,
        1,0,0,0,246,2981,1,0,0,0,248,2993,1,0,0,0,250,3001,1,0,0,0,252,3006,
        1,0,0,0,254,3043,1,0,0,0,256,3050,1,0,0,0,258,3052,1,0,0,0,260,3060,
        1,0,0,0,262,3086,1,0,0,0,264,3097,1,0,0,0,266,3117,1,0,0,0,268,3119,
        1,0,0,0,270,3130,1,0,0,0,272,3168,1,0,0,0,274,3185,1,0,0,0,276,3188,
        1,0,0,0,278,3192,1,0,0,0,280,3204,1,0,0,0,282,3209,1,0,0,0,284,3217,
        1,0,0,0,286,3222,1,0,0,0,288,3230,1,0,0,0,290,3233,1,0,0,0,292,3236,
        1,0,0,0,294,3256,1,0,0,0,296,3261,1,0,0,0,298,3310,1,0,0,0,300,3312,
        1,0,0,0,302,3330,1,0,0,0,304,3336,1,0,0,0,306,3351,1,0,0,0,308,3353,
        1,0,0,0,310,3362,1,0,0,0,312,3383,1,0,0,0,314,3397,1,0,0,0,316,3431,
        1,0,0,0,318,3462,1,0,0,0,320,3464,1,0,0,0,322,3469,1,0,0,0,324,3475,
        1,0,0,0,326,3478,1,0,0,0,328,3484,1,0,0,0,330,3486,1,0,0,0,332,3550,
        1,0,0,0,334,3556,1,0,0,0,336,3558,1,0,0,0,338,3564,1,0,0,0,340,3580,
        1,0,0,0,342,3582,1,0,0,0,344,3588,1,0,0,0,346,3595,1,0,0,0,348,3601,
        1,0,0,0,350,3610,1,0,0,0,352,3614,1,0,0,0,354,3627,1,0,0,0,356,3632,
        1,0,0,0,358,3645,1,0,0,0,360,3647,1,0,0,0,362,3661,1,0,0,0,364,3669,
        1,0,0,0,366,3675,1,0,0,0,368,3686,1,0,0,0,370,3688,1,0,0,0,372,3769,
        1,0,0,0,374,3771,1,0,0,0,376,3775,1,0,0,0,378,3783,1,0,0,0,380,3794,
        1,0,0,0,382,3796,1,0,0,0,384,3800,1,0,0,0,386,3829,1,0,0,0,388,3831,
        1,0,0,0,390,3835,1,0,0,0,392,3852,1,0,0,0,394,3880,1,0,0,0,396,3882,
        1,0,0,0,398,3891,1,0,0,0,400,3893,1,0,0,0,402,3898,1,0,0,0,404,3915,
        1,0,0,0,406,3919,1,0,0,0,408,4108,1,0,0,0,410,4110,1,0,0,0,412,4134,
        1,0,0,0,414,4160,1,0,0,0,416,4162,1,0,0,0,418,4164,1,0,0,0,420,4172,
        1,0,0,0,422,4179,1,0,0,0,424,4185,1,0,0,0,426,4189,1,0,0,0,428,4197,
        1,0,0,0,430,4217,1,0,0,0,432,4223,1,0,0,0,434,4284,1,0,0,0,436,4315,
        1,0,0,0,438,4361,1,0,0,0,440,4363,1,0,0,0,442,4365,1,0,0,0,444,4374,
        1,0,0,0,446,4404,1,0,0,0,448,4406,1,0,0,0,450,4408,1,0,0,0,452,4420,
        1,0,0,0,454,4463,1,0,0,0,456,4465,1,0,0,0,458,4474,1,0,0,0,460,4478,
        1,0,0,0,462,4482,1,0,0,0,464,4493,1,0,0,0,466,4508,1,0,0,0,468,4512,
        1,0,0,0,470,4529,1,0,0,0,472,4554,1,0,0,0,474,4556,1,0,0,0,476,4558,
        1,0,0,0,478,4593,1,0,0,0,480,4605,1,0,0,0,482,4627,1,0,0,0,484,4631,
        1,0,0,0,486,4634,1,0,0,0,488,4637,1,0,0,0,490,4661,1,0,0,0,492,4665,
        1,0,0,0,494,4668,1,0,0,0,496,4674,1,0,0,0,498,4682,1,0,0,0,500,4695,
        1,0,0,0,502,4697,1,0,0,0,504,4710,1,0,0,0,506,4712,1,0,0,0,508,4725,
        1,0,0,0,510,4727,1,0,0,0,512,4733,1,0,0,0,514,4749,1,0,0,0,516,4760,
        1,0,0,0,518,4771,1,0,0,0,520,4773,1,0,0,0,522,4778,1,0,0,0,524,4792,
        1,0,0,0,526,4795,1,0,0,0,528,4804,1,0,0,0,530,4837,1,0,0,0,532,4863,
        1,0,0,0,534,4865,1,0,0,0,536,4877,1,0,0,0,538,4880,1,0,0,0,540,4883,
        1,0,0,0,542,4894,1,0,0,0,544,4910,1,0,0,0,546,4912,1,0,0,0,548,4933,
        1,0,0,0,550,4942,1,0,0,0,552,4951,1,0,0,0,554,4973,1,0,0,0,556,4978,
        1,0,0,0,558,4986,1,0,0,0,560,4989,1,0,0,0,562,4998,1,0,0,0,564,5000,
        1,0,0,0,566,5023,1,0,0,0,568,5026,1,0,0,0,570,5029,1,0,0,0,572,5056,
        1,0,0,0,574,5058,1,0,0,0,576,5063,1,0,0,0,578,5103,1,0,0,0,580,5105,
        1,0,0,0,582,5317,1,0,0,0,584,5319,1,0,0,0,586,5407,1,0,0,0,588,5409,
        1,0,0,0,590,5415,1,0,0,0,592,5426,1,0,0,0,594,5437,1,0,0,0,596,5439,
        1,0,0,0,598,5519,1,0,0,0,600,5521,1,0,0,0,602,5536,1,0,0,0,604,5538,
        1,0,0,0,606,5553,1,0,0,0,608,5563,1,0,0,0,610,5620,1,0,0,0,612,5622,
        1,0,0,0,614,5648,1,0,0,0,616,5651,1,0,0,0,618,5667,1,0,0,0,620,5669,
        1,0,0,0,622,5671,1,0,0,0,624,5676,1,0,0,0,626,5679,1,0,0,0,628,5682,
        1,0,0,0,630,5732,1,0,0,0,632,5734,1,0,0,0,634,5745,1,0,0,0,636,5747,
        1,0,0,0,638,5757,1,0,0,0,640,5787,1,0,0,0,642,5794,1,0,0,0,644,5797,
        1,0,0,0,646,5807,1,0,0,0,648,5811,1,0,0,0,650,5828,1,0,0,0,652,5830,
        1,0,0,0,654,5846,1,0,0,0,656,5852,1,0,0,0,658,5863,1,0,0,0,660,5869,
        1,0,0,0,662,5874,1,0,0,0,664,5883,1,0,0,0,666,5906,1,0,0,0,668,5954,
        1,0,0,0,670,5956,1,0,0,0,672,5985,1,0,0,0,674,5987,1,0,0,0,676,5998,
        1,0,0,0,678,6019,1,0,0,0,680,6032,1,0,0,0,682,6040,1,0,0,0,684,6042,
        1,0,0,0,686,6048,1,0,0,0,688,6052,1,0,0,0,690,6054,1,0,0,0,692,6071,
        1,0,0,0,694,6073,1,0,0,0,696,6077,1,0,0,0,698,6081,1,0,0,0,700,6089,
        1,0,0,0,702,6113,1,0,0,0,704,6115,1,0,0,0,706,6119,1,0,0,0,708,6127,
        1,0,0,0,710,6135,1,0,0,0,712,6160,1,0,0,0,714,6162,1,0,0,0,716,6166,
        1,0,0,0,718,6175,1,0,0,0,720,6195,1,0,0,0,722,6206,1,0,0,0,724,6214,
        1,0,0,0,726,6217,1,0,0,0,728,6239,1,0,0,0,730,6241,1,0,0,0,732,6245,
        1,0,0,0,734,6260,1,0,0,0,736,6284,1,0,0,0,738,6289,1,0,0,0,740,6292,
        1,0,0,0,742,6307,1,0,0,0,744,6333,1,0,0,0,746,6335,1,0,0,0,748,6351,
        1,0,0,0,750,6356,1,0,0,0,752,6358,1,0,0,0,754,6366,1,0,0,0,756,6384,
        1,0,0,0,758,6408,1,0,0,0,760,6420,1,0,0,0,762,6424,1,0,0,0,764,6436,
        1,0,0,0,766,6456,1,0,0,0,768,6464,1,0,0,0,770,6478,1,0,0,0,772,6501,
        1,0,0,0,774,6503,1,0,0,0,776,6505,1,0,0,0,778,6510,1,0,0,0,780,6520,
        1,0,0,0,782,6540,1,0,0,0,784,6542,1,0,0,0,786,6551,1,0,0,0,788,6568,
        1,0,0,0,790,6578,1,0,0,0,792,6580,1,0,0,0,794,6582,1,0,0,0,796,6589,
        1,0,0,0,798,6612,1,0,0,0,800,6614,1,0,0,0,802,6617,1,0,0,0,804,6628,
        1,0,0,0,806,6630,1,0,0,0,808,6638,1,0,0,0,810,6650,1,0,0,0,812,6659,
        1,0,0,0,814,6662,1,0,0,0,816,6721,1,0,0,0,818,6745,1,0,0,0,820,6766,
        1,0,0,0,822,6768,1,0,0,0,824,6776,1,0,0,0,826,6793,1,0,0,0,828,6796,
        1,0,0,0,830,6832,1,0,0,0,832,6834,1,0,0,0,834,6842,1,0,0,0,836,6850,
        1,0,0,0,838,6857,1,0,0,0,840,6863,1,0,0,0,842,6875,1,0,0,0,844,6881,
        1,0,0,0,846,6889,1,0,0,0,848,6897,1,0,0,0,850,6900,1,0,0,0,852,6907,
        1,0,0,0,854,6915,1,0,0,0,856,6920,1,0,0,0,858,6937,1,0,0,0,860,6945,
        1,0,0,0,862,6955,1,0,0,0,864,6968,1,0,0,0,866,6970,1,0,0,0,868,6984,
        1,0,0,0,870,7003,1,0,0,0,872,7012,1,0,0,0,874,7024,1,0,0,0,876,7030,
        1,0,0,0,878,7032,1,0,0,0,880,7055,1,0,0,0,882,7057,1,0,0,0,884,7061,
        1,0,0,0,886,7068,1,0,0,0,888,7082,1,0,0,0,890,7084,1,0,0,0,892,7122,
        1,0,0,0,894,7124,1,0,0,0,896,7128,1,0,0,0,898,7130,1,0,0,0,900,7139,
        1,0,0,0,902,7223,1,0,0,0,904,7229,1,0,0,0,906,7338,1,0,0,0,908,7370,
        1,0,0,0,910,7423,1,0,0,0,912,7427,1,0,0,0,914,7567,1,0,0,0,916,7569,
        1,0,0,0,918,7575,1,0,0,0,920,7584,1,0,0,0,922,7589,1,0,0,0,924,7597,
        1,0,0,0,926,7602,1,0,0,0,928,7604,1,0,0,0,930,7607,1,0,0,0,932,7615,
        1,0,0,0,934,7618,1,0,0,0,936,7621,1,0,0,0,938,7629,1,0,0,0,940,7633,
        1,0,0,0,942,7638,1,0,0,0,944,7655,1,0,0,0,946,7682,1,0,0,0,948,7691,
        1,0,0,0,950,7693,1,0,0,0,952,7700,1,0,0,0,954,7704,1,0,0,0,956,7706,
        1,0,0,0,958,7714,1,0,0,0,960,7722,1,0,0,0,962,7733,1,0,0,0,964,7735,
        1,0,0,0,966,7743,1,0,0,0,968,7751,1,0,0,0,970,7764,1,0,0,0,972,7768,
        1,0,0,0,974,7770,1,0,0,0,976,7783,1,0,0,0,978,7785,1,0,0,0,980,7792,
        1,0,0,0,982,7800,1,0,0,0,984,7812,1,0,0,0,986,7814,1,0,0,0,988,7816,
        1,0,0,0,990,7846,1,0,0,0,992,7852,1,0,0,0,994,7856,1,0,0,0,996,7878,
        1,0,0,0,998,7881,1,0,0,0,1000,7888,1,0,0,0,1002,7891,1,0,0,0,1004,
        7907,1,0,0,0,1006,7909,1,0,0,0,1008,7917,1,0,0,0,1010,7925,1,0,0,
        0,1012,7933,1,0,0,0,1014,7941,1,0,0,0,1016,7949,1,0,0,0,1018,7951,
        1,0,0,0,1020,7953,1,0,0,0,1022,7955,1,0,0,0,1024,7957,1,0,0,0,1026,
        7959,1,0,0,0,1028,7961,1,0,0,0,1030,7965,1,0,0,0,1032,7973,1,0,0,
        0,1034,7981,1,0,0,0,1036,7983,1,0,0,0,1038,7985,1,0,0,0,1040,7987,
        1,0,0,0,1042,7989,1,0,0,0,1044,7995,1,0,0,0,1046,8001,1,0,0,0,1048,
        8007,1,0,0,0,1050,8009,1,0,0,0,1052,8015,1,0,0,0,1054,8021,1,0,0,
        0,1056,8027,1,0,0,0,1058,8029,1,0,0,0,1060,8045,1,0,0,0,1062,8048,
        1,0,0,0,1064,8057,1,0,0,0,1066,8059,1,0,0,0,1068,8071,1,0,0,0,1070,
        8077,1,0,0,0,1072,8083,1,0,0,0,1074,8088,1,0,0,0,1076,8101,1,0,0,
        0,1078,8103,1,0,0,0,1080,8156,1,0,0,0,1082,8158,1,0,0,0,1084,8160,
        1,0,0,0,1086,8171,1,0,0,0,1088,8177,1,0,0,0,1090,8179,1,0,0,0,1092,
        8190,1,0,0,0,1094,8201,1,0,0,0,1096,8205,1,0,0,0,1098,8209,1,0,0,
        0,1100,8243,1,0,0,0,1102,8247,1,0,0,0,1104,8251,1,0,0,0,1106,8259,
        1,0,0,0,1108,8264,1,0,0,0,1110,8268,1,0,0,0,1112,8270,1,0,0,0,1114,
        8275,1,0,0,0,1116,8302,1,0,0,0,1118,8304,1,0,0,0,1120,8327,1,0,0,
        0,1122,8329,1,0,0,0,1124,8334,1,0,0,0,1126,8342,1,0,0,0,1128,8350,
        1,0,0,0,1130,8356,1,0,0,0,1132,8367,1,0,0,0,1134,8386,1,0,0,0,1136,
        8389,1,0,0,0,1138,8392,1,0,0,0,1140,8408,1,0,0,0,1142,8414,1,0,0,
        0,1144,8424,1,0,0,0,1146,8449,1,0,0,0,1148,8453,1,0,0,0,1150,8466,
        1,0,0,0,1152,8476,1,0,0,0,1154,8494,1,0,0,0,1156,8514,1,0,0,0,1158,
        8518,1,0,0,0,1160,8522,1,0,0,0,1162,8526,1,0,0,0,1164,8534,1,0,0,
        0,1166,8542,1,0,0,0,1168,8551,1,0,0,0,1170,8557,1,0,0,0,1172,8576,
        1,0,0,0,1174,8582,1,0,0,0,1176,8610,1,0,0,0,1178,8614,1,0,0,0,1180,
        8622,1,0,0,0,1182,8648,1,0,0,0,1184,8650,1,0,0,0,1186,8658,1,0,0,
        0,1188,8695,1,0,0,0,1190,8729,1,0,0,0,1192,8731,1,0,0,0,1194,8742,
        1,0,0,0,1196,8762,1,0,0,0,1198,8764,1,0,0,0,1200,8777,1,0,0,0,1202,
        8779,1,0,0,0,1204,8783,1,0,0,0,1206,8786,1,0,0,0,1208,8808,1,0,0,
        0,1210,8812,1,0,0,0,1212,8814,1,0,0,0,1214,8820,1,0,0,0,1216,8825,
        1,0,0,0,1218,8836,1,0,0,0,1220,8840,1,0,0,0,1222,8842,1,0,0,0,1224,
        8845,1,0,0,0,1226,1228,3,2,1,0,1227,1226,1,0,0,0,1228,1231,1,0,0,
        0,1229,1227,1,0,0,0,1229,1230,1,0,0,0,1230,1232,1,0,0,0,1231,1229,
        1,0,0,0,1232,1233,5,0,0,1,1233,1,1,0,0,0,1234,1236,3,4,2,0,1235,
        1237,5,7,0,0,1236,1235,1,0,0,0,1236,1237,1,0,0,0,1237,3,1,0,0,0,
        1238,1359,3,366,183,0,1239,1359,3,658,329,0,1240,1359,3,652,326,
        0,1241,1359,3,654,327,0,1242,1359,3,468,234,0,1243,1359,3,664,332,
        0,1244,1359,3,386,193,0,1245,1359,3,268,134,0,1246,1359,3,270,135,
        0,1247,1359,3,278,139,0,1248,1359,3,296,148,0,1249,1359,3,542,271,
        0,1250,1359,3,32,16,0,1251,1359,3,584,292,0,1252,1359,3,586,293,
        0,1253,1359,3,598,299,0,1254,1359,3,588,294,0,1255,1359,3,596,298,
        0,1256,1359,3,312,156,0,1257,1359,3,314,157,0,1258,1359,3,248,124,
        0,1259,1359,3,660,330,0,1260,1359,3,80,40,0,1261,1359,3,580,290,
        0,1262,1359,3,122,61,0,1263,1359,3,604,302,0,1264,1359,3,22,11,0,
        1265,1359,3,24,12,0,1266,1359,3,20,10,0,1267,1359,3,610,305,0,1268,
        1359,3,232,116,0,1269,1359,3,668,334,0,1270,1359,3,666,333,0,1271,
        1359,3,308,154,0,1272,1359,3,678,339,0,1273,1359,3,6,3,0,1274,1359,
        3,76,38,0,1275,1359,3,126,63,0,1276,1359,3,672,336,0,1277,1359,3,
        432,216,0,1278,1359,3,74,37,0,1279,1359,3,128,64,0,1280,1359,3,330,
        165,0,1281,1359,3,234,117,0,1282,1359,3,370,185,0,1283,1359,3,564,
        282,0,1284,1359,3,670,335,0,1285,1359,3,662,331,0,1286,1359,3,264,
        132,0,1287,1359,3,272,136,0,1288,1359,3,292,146,0,1289,1359,3,298,
        149,0,1290,1359,3,488,244,0,1291,1359,3,30,15,0,1292,1359,3,240,
        120,0,1293,1359,3,390,195,0,1294,1359,3,400,200,0,1295,1359,3,600,
        300,0,1296,1359,3,402,201,0,1297,1359,3,310,155,0,1298,1359,3,260,
        130,0,1299,1359,3,34,17,0,1300,1359,3,246,123,0,1301,1359,3,144,
        72,0,1302,1359,3,606,303,0,1303,1359,3,230,115,0,1304,1359,3,262,
        131,0,1305,1359,3,570,285,0,1306,1359,3,332,166,0,1307,1359,3,360,
        180,0,1308,1359,3,8,4,0,1309,1359,3,18,9,0,1310,1359,3,304,152,0,
        1311,1359,3,644,322,0,1312,1359,3,716,358,0,1313,1359,3,746,373,
        0,1314,1359,3,372,186,0,1315,1359,3,732,366,0,1316,1359,3,78,39,
        0,1317,1359,3,560,280,0,1318,1359,3,408,204,0,1319,1359,3,712,356,
        0,1320,1359,3,700,350,0,1321,1359,3,436,218,0,1322,1359,3,442,221,
        0,1323,1359,3,462,231,0,1324,1359,3,1186,593,0,1325,1359,3,300,150,
        0,1326,1359,3,476,238,0,1327,1359,3,718,359,0,1328,1359,3,626,313,
        0,1329,1359,3,244,122,0,1330,1359,3,642,321,0,1331,1359,3,734,367,
        0,1332,1359,3,622,311,0,1333,1359,3,706,353,0,1334,1359,3,406,203,
        0,1335,1359,3,576,288,0,1336,1359,3,548,274,0,1337,1359,3,546,273,
        0,1338,1359,3,550,275,0,1339,1359,3,582,291,0,1340,1359,3,444,222,
        0,1341,1359,3,464,232,0,1342,1359,3,612,306,0,1343,1359,3,434,217,
        0,1344,1359,3,750,375,0,1345,1359,3,630,315,0,1346,1359,3,428,214,
        0,1347,1359,3,628,314,0,1348,1359,3,740,370,0,1349,1359,3,676,338,
        0,1350,1359,3,64,32,0,1351,1359,3,40,20,0,1352,1359,3,72,36,0,1353,
        1359,3,638,319,0,1354,1356,5,581,0,0,1355,1357,5,582,0,0,1356,1355,
        1,0,0,0,1356,1357,1,0,0,0,1357,1359,1,0,0,0,1358,1238,1,0,0,0,1358,
        1239,1,0,0,0,1358,1240,1,0,0,0,1358,1241,1,0,0,0,1358,1242,1,0,0,
        0,1358,1243,1,0,0,0,1358,1244,1,0,0,0,1358,1245,1,0,0,0,1358,1246,
        1,0,0,0,1358,1247,1,0,0,0,1358,1248,1,0,0,0,1358,1249,1,0,0,0,1358,
        1250,1,0,0,0,1358,1251,1,0,0,0,1358,1252,1,0,0,0,1358,1253,1,0,0,
        0,1358,1254,1,0,0,0,1358,1255,1,0,0,0,1358,1256,1,0,0,0,1358,1257,
        1,0,0,0,1358,1258,1,0,0,0,1358,1259,1,0,0,0,1358,1260,1,0,0,0,1358,
        1261,1,0,0,0,1358,1262,1,0,0,0,1358,1263,1,0,0,0,1358,1264,1,0,0,
        0,1358,1265,1,0,0,0,1358,1266,1,0,0,0,1358,1267,1,0,0,0,1358,1268,
        1,0,0,0,1358,1269,1,0,0,0,1358,1270,1,0,0,0,1358,1271,1,0,0,0,1358,
        1272,1,0,0,0,1358,1273,1,0,0,0,1358,1274,1,0,0,0,1358,1275,1,0,0,
        0,1358,1276,1,0,0,0,1358,1277,1,0,0,0,1358,1278,1,0,0,0,1358,1279,
        1,0,0,0,1358,1280,1,0,0,0,1358,1281,1,0,0,0,1358,1282,1,0,0,0,1358,
        1283,1,0,0,0,1358,1284,1,0,0,0,1358,1285,1,0,0,0,1358,1286,1,0,0,
        0,1358,1287,1,0,0,0,1358,1288,1,0,0,0,1358,1289,1,0,0,0,1358,1290,
        1,0,0,0,1358,1291,1,0,0,0,1358,1292,1,0,0,0,1358,1293,1,0,0,0,1358,
        1294,1,0,0,0,1358,1295,1,0,0,0,1358,1296,1,0,0,0,1358,1297,1,0,0,
        0,1358,1298,1,0,0,0,1358,1299,1,0,0,0,1358,1300,1,0,0,0,1358,1301,
        1,0,0,0,1358,1302,1,0,0,0,1358,1303,1,0,0,0,1358,1304,1,0,0,0,1358,
        1305,1,0,0,0,1358,1306,1,0,0,0,1358,1307,1,0,0,0,1358,1308,1,0,0,
        0,1358,1309,1,0,0,0,1358,1310,1,0,0,0,1358,1311,1,0,0,0,1358,1312,
        1,0,0,0,1358,1313,1,0,0,0,1358,1314,1,0,0,0,1358,1315,1,0,0,0,1358,
        1316,1,0,0,0,1358,1317,1,0,0,0,1358,1318,1,0,0,0,1358,1319,1,0,0,
        0,1358,1320,1,0,0,0,1358,1321,1,0,0,0,1358,1322,1,0,0,0,1358,1323,
        1,0,0,0,1358,1324,1,0,0,0,1358,1325,1,0,0,0,1358,1326,1,0,0,0,1358,
        1327,1,0,0,0,1358,1328,1,0,0,0,1358,1329,1,0,0,0,1358,1330,1,0,0,
        0,1358,1331,1,0,0,0,1358,1332,1,0,0,0,1358,1333,1,0,0,0,1358,1334,
        1,0,0,0,1358,1335,1,0,0,0,1358,1336,1,0,0,0,1358,1337,1,0,0,0,1358,
        1338,1,0,0,0,1358,1339,1,0,0,0,1358,1340,1,0,0,0,1358,1341,1,0,0,
        0,1358,1342,1,0,0,0,1358,1343,1,0,0,0,1358,1344,1,0,0,0,1358,1345,
        1,0,0,0,1358,1346,1,0,0,0,1358,1347,1,0,0,0,1358,1348,1,0,0,0,1358,
        1349,1,0,0,0,1358,1350,1,0,0,0,1358,1351,1,0,0,0,1358,1352,1,0,0,
        0,1358,1353,1,0,0,0,1358,1354,1,0,0,0,1359,5,1,0,0,0,1360,1361,5,
        433,0,0,1361,1362,3,908,454,0,1362,7,1,0,0,0,1363,1364,5,46,0,0,
        1364,1365,5,318,0,0,1365,1367,3,1064,532,0,1366,1368,5,105,0,0,1367,
        1366,1,0,0,0,1367,1368,1,0,0,0,1368,1369,1,0,0,0,1369,1370,3,10,
        5,0,1370,9,1,0,0,0,1371,1373,3,16,8,0,1372,1371,1,0,0,0,1373,1376,
        1,0,0,0,1374,1372,1,0,0,0,1374,1375,1,0,0,0,1375,11,1,0,0,0,1376,
        1374,1,0,0,0,1377,1379,3,14,7,0,1378,1377,1,0,0,0,1379,1382,1,0,
        0,0,1380,1378,1,0,0,0,1380,1381,1,0,0,0,1381,13,1,0,0,0,1382,1380,
        1,0,0,0,1383,1386,5,287,0,0,1384,1387,3,1058,529,0,1385,1387,5,78,
        0,0,1386,1384,1,0,0,0,1386,1385,1,0,0,0,1387,1422,1,0,0,0,1388,1389,
        7,0,0,0,1389,1390,5,287,0,0,1390,1422,3,1058,529,0,1391,1422,5,228,
        0,0,1392,1422,5,229,0,0,1393,1422,5,236,0,0,1394,1422,5,237,0,0,
        1395,1422,5,234,0,0,1396,1422,5,235,0,0,1397,1422,5,232,0,0,1398,
        1422,5,233,0,0,1399,1422,5,230,0,0,1400,1422,5,231,0,0,1401,1422,
        5,535,0,0,1402,1422,5,536,0,0,1403,1422,5,537,0,0,1404,1422,5,538,
        0,0,1405,1422,5,539,0,0,1406,1422,5,540,0,0,1407,1408,5,164,0,0,
        1408,1409,5,74,0,0,1409,1422,3,1062,531,0,1410,1411,5,371,0,0,1411,
        1412,5,368,0,0,1412,1422,3,1058,529,0,1413,1414,5,68,0,0,1414,1415,
        7,1,0,0,1415,1422,3,1032,516,0,1416,1417,7,2,0,0,1417,1422,3,1066,
        533,0,1418,1419,5,134,0,0,1419,1422,3,1032,516,0,1420,1422,3,1076,
        538,0,1421,1383,1,0,0,0,1421,1388,1,0,0,0,1421,1391,1,0,0,0,1421,
        1392,1,0,0,0,1421,1393,1,0,0,0,1421,1394,1,0,0,0,1421,1395,1,0,0,
        0,1421,1396,1,0,0,0,1421,1397,1,0,0,0,1421,1398,1,0,0,0,1421,1399,
        1,0,0,0,1421,1400,1,0,0,0,1421,1401,1,0,0,0,1421,1402,1,0,0,0,1421,
        1403,1,0,0,0,1421,1404,1,0,0,0,1421,1405,1,0,0,0,1421,1406,1,0,0,
        0,1421,1407,1,0,0,0,1421,1410,1,0,0,0,1421,1413,1,0,0,0,1421,1416,
        1,0,0,0,1421,1418,1,0,0,0,1421,1420,1,0,0,0,1422,15,1,0,0,0,1423,
        1432,3,14,7,0,1424,1425,5,348,0,0,1425,1432,5,571,0,0,1426,1427,
        7,3,0,0,1427,1432,3,1066,533,0,1428,1429,5,68,0,0,1429,1430,7,1,
        0,0,1430,1432,3,1066,533,0,1431,1423,1,0,0,0,1431,1424,1,0,0,0,1431,
        1426,1,0,0,0,1431,1428,1,0,0,0,1432,17,1,0,0,0,1433,1434,5,46,0,
        0,1434,1435,5,99,0,0,1435,1437,3,1064,532,0,1436,1438,5,105,0,0,
        1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,1439,1,0,0,0,1439,1440,
        3,10,5,0,1440,19,1,0,0,0,1441,1442,5,138,0,0,1442,1443,7,2,0,0,1443,
        1445,3,1064,532,0,1444,1446,5,105,0,0,1445,1444,1,0,0,0,1445,1446,
        1,0,0,0,1446,1447,1,0,0,0,1447,1448,3,12,6,0,1448,21,1,0,0,0,1449,
        1450,5,138,0,0,1450,1453,7,2,0,0,1451,1454,5,30,0,0,1452,1454,3,
        1064,532,0,1453,1451,1,0,0,0,1453,1452,1,0,0,0,1454,1455,1,0,0,0,
        1455,1456,5,68,0,0,1456,1457,5,175,0,0,1457,1458,3,1036,518,0,1458,
        1459,3,68,34,0,1459,23,1,0,0,0,1460,1461,5,138,0,0,1461,1462,5,442,
        0,0,1462,1464,3,1042,521,0,1463,1465,3,494,247,0,1464,1463,1,0,0,
        0,1464,1465,1,0,0,0,1465,1466,1,0,0,0,1466,1467,3,26,13,0,1467,25,
        1,0,0,0,1468,1472,3,28,14,0,1469,1471,3,28,14,0,1470,1469,1,0,0,
        0,1471,1474,1,0,0,0,1472,1470,1,0,0,0,1472,1473,1,0,0,0,1473,1476,
        1,0,0,0,1474,1472,1,0,0,0,1475,1477,5,315,0,0,1476,1475,1,0,0,0,
        1476,1477,1,0,0,0,1477,1495,1,0,0,0,1478,1479,5,309,0,0,1479,1480,
        5,94,0,0,1480,1495,3,1040,520,0,1481,1482,5,282,0,0,1482,1483,5,
        94,0,0,1483,1495,3,1064,532,0,1484,1485,5,333,0,0,1485,1486,5,323,
        0,0,1486,1495,3,36,18,0,1487,1489,5,269,0,0,1488,1487,1,0,0,0,1488,
        1489,1,0,0,0,1489,1490,1,0,0,0,1490,1491,5,462,0,0,1491,1492,5,80,
        0,0,1492,1493,5,204,0,0,1493,1495,3,1068,534,0,1494,1468,1,0,0,0,
        1494,1478,1,0,0,0,1494,1481,1,0,0,0,1494,1484,1,0,0,0,1494,1488,
        1,0,0,0,1495,27,1,0,0,0,1496,1539,5,222,0,0,1497,1539,5,338,0,0,
        1498,1539,5,377,0,0,1499,1501,5,77,0,0,1500,1499,1,0,0,0,1500,1501,
        1,0,0,0,1501,1502,1,0,0,0,1502,1539,5,250,0,0,1503,1505,5,205,0,
        0,1504,1503,1,0,0,0,1504,1505,1,0,0,0,1505,1506,1,0,0,0,1506,1507,
        5,327,0,0,1507,1514,5,243,0,0,1508,1510,5,205,0,0,1509,1508,1,0,
        0,0,1509,1510,1,0,0,0,1510,1511,1,0,0,0,1511,1512,5,327,0,0,1512,
        1514,5,181,0,0,1513,1504,1,0,0,0,1513,1509,1,0,0,0,1514,1539,1,0,
        0,0,1515,1516,5,460,0,0,1516,1539,7,4,0,0,1517,1518,5,170,0,0,1518,
        1539,3,1074,537,0,1519,1520,5,320,0,0,1520,1539,3,1068,534,0,1521,
        1522,5,333,0,0,1522,1523,3,1068,534,0,1523,1526,7,5,0,0,1524,1527,
        3,1068,534,0,1525,1527,5,53,0,0,1526,1524,1,0,0,0,1526,1525,1,0,
        0,0,1527,1539,1,0,0,0,1528,1529,5,333,0,0,1529,1530,3,1068,534,0,
        1530,1531,5,64,0,0,1531,1532,5,434,0,0,1532,1539,1,0,0,0,1533,1536,
        5,313,0,0,1534,1537,3,1068,534,0,1535,1537,5,30,0,0,1536,1534,1,
        0,0,0,1536,1535,1,0,0,0,1537,1539,1,0,0,0,1538,1496,1,0,0,0,1538,
        1497,1,0,0,0,1538,1498,1,0,0,0,1538,1500,1,0,0,0,1538,1513,1,0,0,
        0,1538,1515,1,0,0,0,1538,1517,1,0,0,0,1538,1519,1,0,0,0,1538,1521,
        1,0,0,0,1538,1528,1,0,0,0,1538,1533,1,0,0,0,1539,29,1,0,0,0,1540,
        1541,5,46,0,0,1541,1542,5,66,0,0,1542,1544,3,1064,532,0,1543,1545,
        5,105,0,0,1544,1543,1,0,0,0,1544,1545,1,0,0,0,1545,1546,1,0,0,0,
        1546,1547,3,10,5,0,1547,31,1,0,0,0,1548,1549,5,138,0,0,1549,1550,
        5,66,0,0,1550,1551,3,1064,532,0,1551,1552,7,6,0,0,1552,1553,5,99,
        0,0,1553,1554,3,1066,533,0,1554,33,1,0,0,0,1555,1556,5,46,0,0,1556,
        1558,5,323,0,0,1557,1559,3,388,194,0,1558,1557,1,0,0,0,1558,1559,
        1,0,0,0,1559,1566,1,0,0,0,1560,1562,3,36,18,0,1561,1560,1,0,0,0,
        1561,1562,1,0,0,0,1562,1563,1,0,0,0,1563,1564,5,106,0,0,1564,1567,
        3,1064,532,0,1565,1567,3,36,18,0,1566,1561,1,0,0,0,1566,1565,1,0,
        0,0,1567,1571,1,0,0,0,1568,1570,3,38,19,0,1569,1568,1,0,0,0,1570,
        1573,1,0,0,0,1571,1569,1,0,0,0,1571,1572,1,0,0,0,1572,35,1,0,0,0,
        1573,1571,1,0,0,0,1574,1575,3,422,211,0,1575,37,1,0,0,0,1576,1583,
        3,144,72,0,1577,1583,3,476,238,0,1578,1583,3,246,123,0,1579,1583,
        3,332,166,0,1580,1583,3,442,221,0,1581,1583,3,638,319,0,1582,1576,
        1,0,0,0,1582,1577,1,0,0,0,1582,1578,1,0,0,0,1582,1579,1,0,0,0,1582,
        1580,1,0,0,0,1582,1581,1,0,0,0,1583,39,1,0,0,0,1584,1586,5,333,0,
        0,1585,1587,7,7,0,0,1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,1588,
        1,0,0,0,1588,1589,3,42,21,0,1589,41,1,0,0,0,1590,1591,5,356,0,0,
        1591,1599,3,636,318,0,1592,1593,5,332,0,0,1593,1594,5,154,0,0,1594,
        1595,5,36,0,0,1595,1596,5,356,0,0,1596,1599,3,636,318,0,1597,1599,
        3,46,23,0,1598,1590,1,0,0,0,1598,1592,1,0,0,0,1598,1597,1,0,0,0,
        1599,43,1,0,0,0,1600,1603,5,30,0,0,1601,1603,3,48,24,0,1602,1600,
        1,0,0,0,1602,1601,1,0,0,0,1603,1605,1,0,0,0,1604,1606,7,5,0,0,1605,
        1604,1,0,0,0,1605,1606,1,0,0,0,1606,1609,1,0,0,0,1607,1610,5,53,
        0,0,1608,1610,3,50,25,0,1609,1607,1,0,0,0,1609,1608,1,0,0,0,1609,
        1610,1,0,0,0,1610,45,1,0,0,0,1611,1612,5,418,0,0,1612,1613,5,386,
        0,0,1613,1640,3,60,30,0,1614,1615,5,152,0,0,1615,1640,3,1058,529,
        0,1616,1617,5,323,0,0,1617,1640,3,1038,519,0,1618,1621,5,267,0,0,
        1619,1622,3,1058,529,0,1620,1622,5,53,0,0,1621,1619,1,0,0,0,1621,
        1620,1,0,0,0,1621,1622,1,0,0,0,1622,1640,1,0,0,0,1623,1624,5,318,
        0,0,1624,1640,3,62,31,0,1625,1626,5,332,0,0,1626,1627,5,106,0,0,
        1627,1640,3,62,31,0,1628,1629,5,383,0,0,1629,1630,5,279,0,0,1630,
        1640,3,926,463,0,1631,1632,5,356,0,0,1632,1633,5,337,0,0,1633,1640,
        3,1058,529,0,1634,1635,3,48,24,0,1635,1636,5,64,0,0,1636,1637,5,
        434,0,0,1637,1640,1,0,0,0,1638,1640,3,44,22,0,1639,1611,1,0,0,0,
        1639,1614,1,0,0,0,1639,1616,1,0,0,0,1639,1618,1,0,0,0,1639,1623,
        1,0,0,0,1639,1625,1,0,0,0,1639,1628,1,0,0,0,1639,1631,1,0,0,0,1639,
        1634,1,0,0,0,1639,1638,1,0,0,0,1640,47,1,0,0,0,1641,1646,3,1068,
        534,0,1642,1643,5,11,0,0,1643,1645,3,1068,534,0,1644,1642,1,0,0,
        0,1645,1648,1,0,0,0,1646,1644,1,0,0,0,1646,1647,1,0,0,0,1647,49,
        1,0,0,0,1648,1646,1,0,0,0,1649,1654,3,52,26,0,1650,1651,5,6,0,0,
        1651,1653,3,52,26,0,1652,1650,1,0,0,0,1653,1656,1,0,0,0,1654,1652,
        1,0,0,0,1654,1655,1,0,0,0,1655,51,1,0,0,0,1656,1654,1,0,0,0,1657,
        1660,3,58,29,0,1658,1660,3,256,128,0,1659,1657,1,0,0,0,1659,1658,
        1,0,0,0,1660,53,1,0,0,0,1661,1662,5,300,0,0,1662,1667,7,8,0,0,1663,
        1664,5,310,0,0,1664,1667,5,300,0,0,1665,1667,5,330,0,0,1666,1661,
        1,0,0,0,1666,1663,1,0,0,0,1666,1665,1,0,0,0,1667,55,1,0,0,0,1668,
        1675,5,96,0,0,1669,1675,5,60,0,0,1670,1675,5,80,0,0,1671,1675,3,
        1048,524,0,1672,1675,3,1082,541,0,1673,1675,3,1058,529,0,1674,1668,
        1,0,0,0,1674,1669,1,0,0,0,1674,1670,1,0,0,0,1674,1671,1,0,0,0,1674,
        1672,1,0,0,0,1674,1673,1,0,0,0,1675,57,1,0,0,0,1676,1681,5,96,0,
        0,1677,1681,5,60,0,0,1678,1681,5,80,0,0,1679,1681,3,62,31,0,1680,
        1676,1,0,0,0,1680,1677,1,0,0,0,1680,1678,1,0,0,0,1680,1679,1,0,0,
        0,1681,59,1,0,0,0,1682,1697,3,1058,529,0,1683,1697,5,53,0,0,1684,
        1697,3,1076,538,0,1685,1686,5,403,0,0,1686,1688,3,1058,529,0,1687,
        1689,3,892,446,0,1688,1687,1,0,0,0,1688,1689,1,0,0,0,1689,1697,1,
        0,0,0,1690,1691,5,403,0,0,1691,1692,3,882,441,0,1692,1693,3,1058,
        529,0,1693,1697,1,0,0,0,1694,1697,3,256,128,0,1695,1697,5,254,0,
        0,1696,1682,1,0,0,0,1696,1683,1,0,0,0,1696,1684,1,0,0,0,1696,1685,
        1,0,0,0,1696,1690,1,0,0,0,1696,1694,1,0,0,0,1696,1695,1,0,0,0,1697,
        61,1,0,0,0,1698,1701,3,1072,536,0,1699,1701,3,1058,529,0,1700,1698,
        1,0,0,0,1700,1699,1,0,0,0,1701,63,1,0,0,0,1702,1703,5,313,0,0,1703,
        1704,3,66,33,0,1704,65,1,0,0,0,1705,1706,5,418,0,0,1706,1715,5,386,
        0,0,1707,1708,5,356,0,0,1708,1709,5,244,0,0,1709,1715,5,251,0,0,
        1710,1711,5,332,0,0,1711,1715,5,106,0,0,1712,1715,5,30,0,0,1713,
        1715,3,48,24,0,1714,1705,1,0,0,0,1714,1707,1,0,0,0,1714,1710,1,0,
        0,0,1714,1712,1,0,0,0,1714,1713,1,0,0,0,1715,67,1,0,0,0,1716,1717,
        5,333,0,0,1717,1720,3,42,21,0,1718,1720,3,64,32,0,1719,1716,1,0,
        0,0,1719,1718,1,0,0,0,1720,69,1,0,0,0,1721,1722,5,333,0,0,1722,1725,
        3,46,23,0,1723,1725,3,64,32,0,1724,1721,1,0,0,0,1724,1723,1,0,0,
        0,1725,71,1,0,0,0,1726,1736,5,335,0,0,1727,1737,3,48,24,0,1728,1729,
        5,418,0,0,1729,1737,5,386,0,0,1730,1731,5,356,0,0,1731,1732,5,244,
        0,0,1732,1737,5,251,0,0,1733,1734,5,332,0,0,1734,1737,5,106,0,0,
        1735,1737,5,30,0,0,1736,1727,1,0,0,0,1736,1728,1,0,0,0,1736,1730,
        1,0,0,0,1736,1733,1,0,0,0,1736,1735,1,0,0,0,1737,73,1,0,0,0,1738,
        1739,5,333,0,0,1739,1742,5,165,0,0,1740,1743,5,30,0,0,1741,1743,
        3,1006,503,0,1742,1740,1,0,0,0,1742,1741,1,0,0,0,1743,1744,1,0,0,
        0,1744,1745,7,9,0,0,1745,75,1,0,0,0,1746,1747,5,155,0,0,1747,77,
        1,0,0,0,1748,1749,5,187,0,0,1749,1750,7,10,0,0,1750,79,1,0,0,0,1751,
        1752,5,138,0,0,1752,1754,5,92,0,0,1753,1755,3,568,284,0,1754,1753,
        1,0,0,0,1754,1755,1,0,0,0,1755,1756,1,0,0,0,1756,1759,3,826,413,
        0,1757,1760,3,82,41,0,1758,1760,3,92,46,0,1759,1757,1,0,0,0,1759,
        1758,1,0,0,0,1760,1873,1,0,0,0,1761,1762,5,138,0,0,1762,1763,5,92,
        0,0,1763,1764,5,30,0,0,1764,1765,5,68,0,0,1765,1769,3,222,111,0,
        1766,1767,5,281,0,0,1767,1768,5,147,0,0,1768,1770,3,1066,533,0,1769,
        1766,1,0,0,0,1769,1770,1,0,0,0,1770,1771,1,0,0,0,1771,1772,5,333,
        0,0,1772,1773,5,351,0,0,1773,1775,3,1016,508,0,1774,1776,5,272,0,
        0,1775,1774,1,0,0,0,1775,1776,1,0,0,0,1776,1873,1,0,0,0,1777,1778,
        5,138,0,0,1778,1780,5,92,0,0,1779,1781,3,568,284,0,1780,1779,1,0,
        0,0,1780,1781,1,0,0,0,1781,1782,1,0,0,0,1782,1783,3,1022,511,0,1783,
        1788,3,94,47,0,1784,1785,5,62,0,0,1785,1786,5,422,0,0,1786,1789,
        3,84,42,0,1787,1789,5,53,0,0,1788,1784,1,0,0,0,1788,1787,1,0,0,0,
        1789,1873,1,0,0,0,1790,1791,5,138,0,0,1791,1793,5,92,0,0,1792,1794,
        3,568,284,0,1793,1792,1,0,0,0,1793,1794,1,0,0,0,1794,1795,1,0,0,
        0,1795,1796,3,1022,511,0,1796,1797,5,436,0,0,1797,1798,5,285,0,0,
        1798,1800,3,1028,514,0,1799,1801,7,11,0,0,1800,1799,1,0,0,0,1800,
        1801,1,0,0,0,1801,1873,1,0,0,0,1802,1803,5,138,0,0,1803,1805,5,226,
        0,0,1804,1806,3,568,284,0,1805,1804,1,0,0,0,1805,1806,1,0,0,0,1806,
        1807,1,0,0,0,1807,1810,3,1028,514,0,1808,1811,3,82,41,0,1809,1811,
        3,94,47,0,1810,1808,1,0,0,0,1810,1809,1,0,0,0,1811,1873,1,0,0,0,
        1812,1813,5,138,0,0,1813,1814,5,226,0,0,1814,1815,5,30,0,0,1815,
        1816,5,68,0,0,1816,1820,3,222,111,0,1817,1818,5,281,0,0,1818,1819,
        5,147,0,0,1819,1821,3,1066,533,0,1820,1817,1,0,0,0,1820,1821,1,0,
        0,0,1821,1822,1,0,0,0,1822,1823,5,333,0,0,1823,1825,3,222,111,0,
        1824,1826,5,272,0,0,1825,1824,1,0,0,0,1825,1826,1,0,0,0,1826,1873,
        1,0,0,0,1827,1828,5,138,0,0,1828,1830,5,328,0,0,1829,1831,3,568,
        284,0,1830,1829,1,0,0,0,1830,1831,1,0,0,0,1831,1832,1,0,0,0,1832,
        1833,3,1028,514,0,1833,1834,3,82,41,0,1834,1873,1,0,0,0,1835,1837,
        5,138,0,0,1836,1838,5,259,0,0,1837,1836,1,0,0,0,1837,1838,1,0,0,
        0,1838,1839,1,0,0,0,1839,1841,5,376,0,0,1840,1842,3,568,284,0,1841,
        1840,1,0,0,0,1841,1842,1,0,0,0,1842,1843,1,0,0,0,1843,1844,3,1026,
        513,0,1844,1845,3,82,41,0,1845,1873,1,0,0,0,1846,1847,5,138,0,0,
        1847,1848,5,259,0,0,1848,1849,5,376,0,0,1849,1850,5,30,0,0,1850,
        1851,5,68,0,0,1851,1855,3,222,111,0,1852,1853,5,281,0,0,1853,1854,
        5,147,0,0,1854,1856,3,1066,533,0,1855,1852,1,0,0,0,1855,1856,1,0,
        0,0,1856,1857,1,0,0,0,1857,1858,5,333,0,0,1858,1859,5,351,0,0,1859,
        1861,3,1016,508,0,1860,1862,5,272,0,0,1861,1860,1,0,0,0,1861,1862,
        1,0,0,0,1862,1873,1,0,0,0,1863,1864,5,138,0,0,1864,1865,5,63,0,0,
        1865,1867,5,92,0,0,1866,1868,3,568,284,0,1867,1866,1,0,0,0,1867,
        1868,1,0,0,0,1868,1869,1,0,0,0,1869,1870,3,826,413,0,1870,1871,3,
        82,41,0,1871,1873,1,0,0,0,1872,1751,1,0,0,0,1872,1761,1,0,0,0,1872,
        1777,1,0,0,0,1872,1790,1,0,0,0,1872,1802,1,0,0,0,1872,1812,1,0,0,
        0,1872,1827,1,0,0,0,1872,1835,1,0,0,0,1872,1846,1,0,0,0,1872,1863,
        1,0,0,0,1873,81,1,0,0,0,1874,1879,3,96,48,0,1875,1876,5,6,0,0,1876,
        1878,3,96,48,0,1877,1875,1,0,0,0,1878,1881,1,0,0,0,1879,1877,1,0,
        0,0,1879,1880,1,0,0,0,1880,83,1,0,0,0,1881,1879,1,0,0,0,1882,1883,
        5,68,0,0,1883,1892,3,714,357,0,1884,1885,5,64,0,0,1885,1886,3,86,
        43,0,1886,1887,5,94,0,0,1887,1888,3,86,43,0,1888,1892,1,0,0,0,1889,
        1890,5,105,0,0,1890,1892,3,90,45,0,1891,1882,1,0,0,0,1891,1884,1,
        0,0,0,1891,1889,1,0,0,0,1892,85,1,0,0,0,1893,1894,5,2,0,0,1894,1899,
        3,88,44,0,1895,1896,5,6,0,0,1896,1898,3,88,44,0,1897,1895,1,0,0,
        0,1898,1901,1,0,0,0,1899,1897,1,0,0,0,1899,1900,1,0,0,0,1900,1902,
        1,0,0,0,1901,1899,1,0,0,0,1902,1903,5,3,0,0,1903,87,1,0,0,0,1904,
        1908,3,714,357,0,1905,1908,5,262,0,0,1906,1908,5,260,0,0,1907,1904,
        1,0,0,0,1907,1905,1,0,0,0,1907,1906,1,0,0,0,1908,89,1,0,0,0,1909,
        1910,5,2,0,0,1910,1911,5,533,0,0,1911,1912,3,256,128,0,1912,1913,
        5,6,0,0,1913,1914,5,534,0,0,1914,1915,3,256,128,0,1915,1916,5,3,
        0,0,1916,91,1,0,0,0,1917,1918,3,94,47,0,1918,1919,3,116,58,0,1919,
        1924,1,0,0,0,1920,1921,5,436,0,0,1921,1922,5,285,0,0,1922,1924,3,
        1028,514,0,1923,1917,1,0,0,0,1923,1920,1,0,0,0,1924,93,1,0,0,0,1925,
        1926,5,435,0,0,1926,1927,5,285,0,0,1927,1928,3,1028,514,0,1928,95,
        1,0,0,0,1929,1932,5,133,0,0,1930,1931,5,45,0,0,1931,1933,3,1068,
        534,0,1932,1930,1,0,0,0,1932,1933,1,0,0,0,1933,1934,1,0,0,0,1934,
        2135,3,182,91,0,1935,1936,5,138,0,0,1936,1937,5,45,0,0,1937,1938,
        3,1068,534,0,1938,1939,3,356,178,0,1939,2135,1,0,0,0,1940,1941,5,
        372,0,0,1941,1942,5,45,0,0,1942,2135,3,1068,534,0,1943,1944,5,191,
        0,0,1944,1946,5,45,0,0,1945,1947,3,568,284,0,1946,1945,1,0,0,0,1946,
        1947,1,0,0,0,1947,1948,1,0,0,0,1948,1950,3,1068,534,0,1949,1951,
        3,100,50,0,1950,1949,1,0,0,0,1950,1951,1,0,0,0,1951,2135,1,0,0,0,
        1952,1953,5,333,0,0,1953,1954,5,379,0,0,1954,2135,7,12,0,0,1955,
        1956,5,158,0,0,1956,1957,5,80,0,0,1957,2135,3,1068,534,0,1958,1959,
        5,333,0,0,1959,2135,7,13,0,0,1960,1962,5,193,0,0,1961,1963,7,14,
        0,0,1962,1961,1,0,0,0,1962,1963,1,0,0,0,1963,1964,1,0,0,0,1964,2135,
        5,357,0,0,1965,1966,5,186,0,0,1966,1970,5,357,0,0,1967,1971,5,30,
        0,0,1968,1971,5,99,0,0,1969,1971,3,1068,534,0,1970,1967,1,0,0,0,
        1970,1968,1,0,0,0,1970,1969,1,0,0,0,1971,2135,1,0,0,0,1972,1973,
        5,193,0,0,1973,1974,7,14,0,0,1974,1975,5,321,0,0,1975,2135,3,1068,
        534,0,1976,1977,5,186,0,0,1977,1978,5,321,0,0,1978,2135,3,1068,534,
        0,1979,1981,5,269,0,0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,
        1,0,0,0,1982,1983,5,228,0,0,1983,2135,3,1028,514,0,1984,1985,5,275,
        0,0,1985,2135,3,422,211,0,1986,1987,5,77,0,0,1987,2135,5,275,0,0,
        1988,1989,5,282,0,0,1989,1990,5,94,0,0,1990,2135,3,1064,532,0,1991,
        1992,5,333,0,0,1992,1993,5,351,0,0,1993,2135,3,1016,508,0,1994,1995,
        5,312,0,0,1995,1996,5,219,0,0,1996,2135,3,104,52,0,1997,2004,5,193,
        0,0,1998,2004,5,186,0,0,1999,2001,5,269,0,0,2000,1999,1,0,0,0,2000,
        2001,1,0,0,0,2001,2002,1,0,0,0,2002,2004,5,209,0,0,2003,1997,1,0,
        0,0,2003,1998,1,0,0,0,2003,2000,1,0,0,0,2004,2005,1,0,0,0,2005,2006,
        5,414,0,0,2006,2007,5,251,0,0,2007,2135,5,327,0,0,2008,2010,5,191,
        0,0,2009,2011,5,44,0,0,2010,2009,1,0,0,0,2010,2011,1,0,0,0,2011,
        2013,1,0,0,0,2012,2014,3,568,284,0,2013,2012,1,0,0,0,2013,2014,1,
        0,0,0,2014,2015,1,0,0,0,2015,2017,3,1048,524,0,2016,2018,3,100,50,
        0,2017,2016,1,0,0,0,2017,2018,1,0,0,0,2018,2135,1,0,0,0,2019,2021,
        5,133,0,0,2020,2022,5,44,0,0,2021,2020,1,0,0,0,2021,2022,1,0,0,0,
        2022,2024,1,0,0,0,2023,2025,3,388,194,0,2024,2023,1,0,0,0,2024,2025,
        1,0,0,0,2025,2026,1,0,0,0,2026,2135,3,158,79,0,2027,2029,5,138,0,
        0,2028,2030,5,44,0,0,2029,2028,1,0,0,0,2029,2030,1,0,0,0,2030,2031,
        1,0,0,0,2031,2034,3,1048,524,0,2032,2035,3,98,49,0,2033,2035,3,284,
        142,0,2034,2032,1,0,0,0,2034,2033,1,0,0,0,2035,2135,1,0,0,0,2036,
        2038,5,138,0,0,2037,2039,5,44,0,0,2038,2037,1,0,0,0,2038,2039,1,
        0,0,0,2039,2040,1,0,0,0,2040,2041,3,1048,524,0,2041,2042,7,15,0,
        0,2042,2043,5,77,0,0,2043,2044,5,78,0,0,2044,2135,1,0,0,0,2045,2047,
        5,138,0,0,2046,2048,5,44,0,0,2047,2046,1,0,0,0,2047,2048,1,0,0,0,
        2048,2049,1,0,0,0,2049,2050,3,1048,524,0,2050,2051,5,191,0,0,2051,
        2053,5,437,0,0,2052,2054,3,568,284,0,2053,2052,1,0,0,0,2053,2054,
        1,0,0,0,2054,2135,1,0,0,0,2055,2057,5,138,0,0,2056,2058,5,44,0,0,
        2057,2056,1,0,0,0,2057,2058,1,0,0,0,2058,2059,1,0,0,0,2059,2060,
        3,1048,524,0,2060,2061,5,333,0,0,2061,2062,5,342,0,0,2062,2063,3,
        1062,531,0,2063,2135,1,0,0,0,2064,2066,5,138,0,0,2065,2067,5,44,
        0,0,2066,2065,1,0,0,0,2066,2067,1,0,0,0,2067,2068,1,0,0,0,2068,2070,
        3,1048,524,0,2069,2064,1,0,0,0,2069,2070,1,0,0,0,2070,2071,1,0,0,
        0,2071,2072,7,16,0,0,2072,2135,3,106,53,0,2073,2075,5,138,0,0,2074,
        2076,5,44,0,0,2075,2074,1,0,0,0,2075,2076,1,0,0,0,2076,2077,1,0,
        0,0,2077,2078,3,1048,524,0,2078,2079,5,333,0,0,2079,2080,5,345,0,
        0,2080,2081,3,1068,534,0,2081,2135,1,0,0,0,2082,2084,5,138,0,0,2083,
        2085,5,44,0,0,2084,2083,1,0,0,0,2084,2085,1,0,0,0,2085,2086,1,0,
        0,0,2086,2087,3,1048,524,0,2087,2088,5,133,0,0,2088,2089,5,438,0,
        0,2089,2090,3,170,85,0,2090,2091,5,36,0,0,2091,2093,5,219,0,0,2092,
        2094,3,250,125,0,2093,2092,1,0,0,0,2093,2094,1,0,0,0,2094,2135,1,
        0,0,0,2095,2097,5,138,0,0,2096,2098,5,44,0,0,2097,2096,1,0,0,0,2097,
        2098,1,0,0,0,2098,2099,1,0,0,0,2099,2101,3,1048,524,0,2100,2102,
        3,114,57,0,2101,2100,1,0,0,0,2102,2103,1,0,0,0,2103,2101,1,0,0,0,
        2103,2104,1,0,0,0,2104,2135,1,0,0,0,2105,2107,5,138,0,0,2106,2108,
        5,44,0,0,2107,2106,1,0,0,0,2107,2108,1,0,0,0,2108,2109,1,0,0,0,2109,
        2110,3,1048,524,0,2110,2111,5,191,0,0,2111,2113,5,219,0,0,2112,2114,
        3,568,284,0,2113,2112,1,0,0,0,2113,2114,1,0,0,0,2114,2135,1,0,0,
        0,2115,2117,5,138,0,0,2116,2118,5,44,0,0,2117,2116,1,0,0,0,2117,
        2118,1,0,0,0,2118,2119,1,0,0,0,2119,2122,3,1048,524,0,2120,2121,
        5,333,0,0,2121,2123,5,174,0,0,2122,2120,1,0,0,0,2122,2123,1,0,0,
        0,2123,2124,1,0,0,0,2124,2125,5,360,0,0,2125,2127,3,870,435,0,2126,
        2128,3,102,51,0,2127,2126,1,0,0,0,2127,2128,1,0,0,0,2128,2131,1,
        0,0,0,2129,2130,5,100,0,0,2130,2132,3,898,449,0,2131,2129,1,0,0,
        0,2131,2132,1,0,0,0,2132,2135,1,0,0,0,2133,2135,3,284,142,0,2134,
        1929,1,0,0,0,2134,1935,1,0,0,0,2134,1940,1,0,0,0,2134,1943,1,0,0,
        0,2134,1952,1,0,0,0,2134,1955,1,0,0,0,2134,1958,1,0,0,0,2134,1960,
        1,0,0,0,2134,1965,1,0,0,0,2134,1972,1,0,0,0,2134,1976,1,0,0,0,2134,
        1980,1,0,0,0,2134,1984,1,0,0,0,2134,1986,1,0,0,0,2134,1988,1,0,0,
        0,2134,1991,1,0,0,0,2134,1994,1,0,0,0,2134,2003,1,0,0,0,2134,2008,
        1,0,0,0,2134,2019,1,0,0,0,2134,2027,1,0,0,0,2134,2036,1,0,0,0,2134,
        2045,1,0,0,0,2134,2055,1,0,0,0,2134,2069,1,0,0,0,2134,2073,1,0,0,
        0,2134,2082,1,0,0,0,2134,2095,1,0,0,0,2134,2105,1,0,0,0,2134,2115,
        1,0,0,0,2134,2133,1,0,0,0,2135,97,1,0,0,0,2136,2137,5,333,0,0,2137,
        2138,5,53,0,0,2138,2142,3,898,449,0,2139,2140,5,191,0,0,2140,2142,
        5,53,0,0,2141,2136,1,0,0,0,2141,2139,1,0,0,0,2142,99,1,0,0,0,2143,
        2144,7,17,0,0,2144,101,1,0,0,0,2145,2146,5,43,0,0,2146,2147,3,422,
        211,0,2147,103,1,0,0,0,2148,2153,5,270,0,0,2149,2153,5,113,0,0,2150,
        2153,5,53,0,0,2151,2153,3,228,114,0,2152,2148,1,0,0,0,2152,2149,
        1,0,0,0,2152,2150,1,0,0,0,2152,2151,1,0,0,0,2153,105,1,0,0,0,2154,
        2155,5,2,0,0,2155,2156,3,110,55,0,2156,2157,5,3,0,0,2157,107,1,0,
        0,0,2158,2159,5,105,0,0,2159,2160,3,106,53,0,2160,109,1,0,0,0,2161,
        2166,3,112,56,0,2162,2163,5,6,0,0,2163,2165,3,112,56,0,2164,2162,
        1,0,0,0,2165,2168,1,0,0,0,2166,2164,1,0,0,0,2166,2167,1,0,0,0,2167,
        111,1,0,0,0,2168,2166,1,0,0,0,2169,2174,3,1074,537,0,2170,2171,5,
        10,0,0,2171,2175,3,380,190,0,2172,2173,5,11,0,0,2173,2175,3,378,
        189,0,2174,2170,1,0,0,0,2174,2172,1,0,0,0,2174,2175,1,0,0,0,2175,
        113,1,0,0,0,2176,2181,5,314,0,0,2177,2179,5,105,0,0,2178,2177,1,
        0,0,0,2178,2179,1,0,0,0,2179,2180,1,0,0,0,2180,2182,3,256,128,0,
        2181,2178,1,0,0,0,2181,2182,1,0,0,0,2182,2190,1,0,0,0,2183,2187,
        5,333,0,0,2184,2188,3,254,127,0,2185,2186,5,438,0,0,2186,2188,3,
        170,85,0,2187,2184,1,0,0,0,2187,2185,1,0,0,0,2188,2190,1,0,0,0,2189,
        2176,1,0,0,0,2189,2183,1,0,0,0,2190,115,1,0,0,0,2191,2192,5,62,0,
        0,2192,2193,5,422,0,0,2193,2194,5,105,0,0,2194,2208,3,120,60,0,2195,
        2196,5,62,0,0,2196,2197,5,422,0,0,2197,2198,5,68,0,0,2198,2208,3,
        714,357,0,2199,2200,5,62,0,0,2200,2201,5,422,0,0,2201,2202,5,64,
        0,0,2202,2203,3,714,357,0,2203,2204,5,94,0,0,2204,2205,3,714,357,
        0,2205,2208,1,0,0,0,2206,2208,5,53,0,0,2207,2191,1,0,0,0,2207,2195,
        1,0,0,0,2207,2199,1,0,0,0,2207,2206,1,0,0,0,2208,117,1,0,0,0,2209,
        2210,3,1072,536,0,2210,2211,5,571,0,0,2211,119,1,0,0,0,2212,2213,
        5,2,0,0,2213,2218,3,118,59,0,2214,2215,5,6,0,0,2215,2217,3,118,59,
        0,2216,2214,1,0,0,0,2217,2220,1,0,0,0,2218,2216,1,0,0,0,2218,2219,
        1,0,0,0,2219,2221,1,0,0,0,2220,2218,1,0,0,0,2221,2222,5,3,0,0,2222,
        121,1,0,0,0,2223,2224,5,138,0,0,2224,2225,5,360,0,0,2225,2226,3,
        422,211,0,2226,2231,3,124,62,0,2227,2228,5,6,0,0,2228,2230,3,124,
        62,0,2229,2227,1,0,0,0,2230,2233,1,0,0,0,2231,2229,1,0,0,0,2231,
        2232,1,0,0,0,2232,123,1,0,0,0,2233,2231,1,0,0,0,2234,2235,5,133,
        0,0,2235,2236,5,143,0,0,2236,2238,3,854,427,0,2237,2239,3,100,50,
        0,2238,2237,1,0,0,0,2238,2239,1,0,0,0,2239,2265,1,0,0,0,2240,2241,
        5,191,0,0,2241,2243,5,143,0,0,2242,2244,3,568,284,0,2243,2242,1,
        0,0,0,2243,2244,1,0,0,0,2244,2245,1,0,0,0,2245,2247,3,1068,534,0,
        2246,2248,3,100,50,0,2247,2246,1,0,0,0,2247,2248,1,0,0,0,2248,2265,
        1,0,0,0,2249,2250,5,138,0,0,2250,2251,5,143,0,0,2251,2254,3,1068,
        534,0,2252,2253,5,333,0,0,2253,2255,5,174,0,0,2254,2252,1,0,0,0,
        2254,2255,1,0,0,0,2255,2256,1,0,0,0,2256,2257,5,360,0,0,2257,2259,
        3,870,435,0,2258,2260,3,102,51,0,2259,2258,1,0,0,0,2259,2260,1,0,
        0,0,2260,2262,1,0,0,0,2261,2263,3,100,50,0,2262,2261,1,0,0,0,2262,
        2263,1,0,0,0,2263,2265,1,0,0,0,2264,2234,1,0,0,0,2264,2240,1,0,0,
        0,2264,2249,1,0,0,0,2265,125,1,0,0,0,2266,2269,5,157,0,0,2267,2270,
        3,1068,534,0,2268,2270,5,30,0,0,2269,2267,1,0,0,0,2269,2268,1,0,
        0,0,2270,127,1,0,0,0,2271,2273,5,169,0,0,2272,2274,5,107,0,0,2273,
        2272,1,0,0,0,2273,2274,1,0,0,0,2274,2275,1,0,0,0,2275,2277,3,1022,
        511,0,2276,2278,3,184,92,0,2277,2276,1,0,0,0,2277,2278,1,0,0,0,2278,
        2279,1,0,0,0,2279,2281,7,18,0,0,2280,2282,5,297,0,0,2281,2280,1,
        0,0,0,2281,2282,1,0,0,0,2282,2283,1,0,0,0,2283,2285,3,130,65,0,2284,
        2286,3,136,68,0,2285,2284,1,0,0,0,2285,2286,1,0,0,0,2286,2288,1,
        0,0,0,2287,2289,5,105,0,0,2288,2287,1,0,0,0,2288,2289,1,0,0,0,2289,
        2290,1,0,0,0,2290,2292,3,132,66,0,2291,2293,3,848,424,0,2292,2291,
        1,0,0,0,2292,2293,1,0,0,0,2293,2309,1,0,0,0,2294,2295,5,169,0,0,
        2295,2296,5,2,0,0,2296,2297,3,710,355,0,2297,2298,5,3,0,0,2298,2300,
        5,94,0,0,2299,2301,5,297,0,0,2300,2299,1,0,0,0,2300,2301,1,0,0,0,
        2301,2302,1,0,0,0,2302,2304,3,130,65,0,2303,2305,5,105,0,0,2304,
        2303,1,0,0,0,2304,2305,1,0,0,0,2305,2306,1,0,0,0,2306,2307,3,132,
        66,0,2307,2309,1,0,0,0,2308,2271,1,0,0,0,2308,2294,1,0,0,0,2309,
        129,1,0,0,0,2310,2314,3,1058,529,0,2311,2314,5,343,0,0,2312,2314,
        5,344,0,0,2313,2310,1,0,0,0,2313,2311,1,0,0,0,2313,2312,1,0,0,0,
        2314,131,1,0,0,0,2315,2317,3,134,67,0,2316,2315,1,0,0,0,2317,2320,
        1,0,0,0,2318,2316,1,0,0,0,2318,2319,1,0,0,0,2319,2333,1,0,0,0,2320,
        2318,1,0,0,0,2321,2322,5,2,0,0,2322,2327,3,138,69,0,2323,2324,5,
        6,0,0,2324,2326,3,138,69,0,2325,2323,1,0,0,0,2326,2329,1,0,0,0,2327,
        2325,1,0,0,0,2327,2328,1,0,0,0,2328,2330,1,0,0,0,2329,2327,1,0,0,
        0,2330,2331,5,3,0,0,2331,2333,1,0,0,0,2332,2318,1,0,0,0,2332,2321,
        1,0,0,0,2333,133,1,0,0,0,2334,2358,5,107,0,0,2335,2358,5,112,0,0,
        2336,2338,7,19,0,0,2337,2339,5,36,0,0,2338,2337,1,0,0,0,2338,2339,
        1,0,0,0,2339,2340,1,0,0,0,2340,2358,3,1058,529,0,2341,2358,5,171,
        0,0,2342,2358,5,216,0,0,2343,2344,5,209,0,0,2344,2347,5,298,0,0,
        2345,2348,3,188,94,0,2346,2348,5,9,0,0,2347,2345,1,0,0,0,2347,2346,
        1,0,0,0,2348,2358,1,0,0,0,2349,2351,5,209,0,0,2350,2352,5,77,0,0,
        2351,2350,1,0,0,0,2351,2352,1,0,0,0,2352,2353,1,0,0,0,2353,2354,
        5,78,0,0,2354,2358,3,188,94,0,2355,2356,5,194,0,0,2356,2358,3,1058,
        529,0,2357,2334,1,0,0,0,2357,2335,1,0,0,0,2357,2336,1,0,0,0,2357,
        2341,1,0,0,0,2357,2342,1,0,0,0,2357,2343,1,0,0,0,2357,2349,1,0,0,
        0,2357,2355,1,0,0,0,2358,135,1,0,0,0,2359,2361,5,100,0,0,2360,2359,
        1,0,0,0,2360,2361,1,0,0,0,2361,2362,1,0,0,0,2362,2363,5,184,0,0,
        2363,2364,3,1058,529,0,2364,137,1,0,0,0,2365,2367,3,1074,537,0,2366,
        2368,3,140,70,0,2367,2366,1,0,0,0,2367,2368,1,0,0,0,2368,139,1,0,
        0,0,2369,2377,3,58,29,0,2370,2377,3,256,128,0,2371,2377,5,9,0,0,
        2372,2373,5,2,0,0,2373,2374,3,142,71,0,2374,2375,5,3,0,0,2375,2377,
        1,0,0,0,2376,2369,1,0,0,0,2376,2370,1,0,0,0,2376,2371,1,0,0,0,2376,
        2372,1,0,0,0,2377,141,1,0,0,0,2378,2383,3,56,28,0,2379,2380,5,6,
        0,0,2380,2382,3,56,28,0,2381,2379,1,0,0,0,2382,2385,1,0,0,0,2383,
        2381,1,0,0,0,2383,2384,1,0,0,0,2384,143,1,0,0,0,2385,2383,1,0,0,
        0,2386,2388,5,46,0,0,2387,2389,3,146,73,0,2388,2387,1,0,0,0,2388,
        2389,1,0,0,0,2389,2390,1,0,0,0,2390,2392,5,92,0,0,2391,2393,3,388,
        194,0,2392,2391,1,0,0,0,2392,2393,1,0,0,0,2393,2394,1,0,0,0,2394,
        2460,3,1020,510,0,2395,2397,5,2,0,0,2396,2398,3,150,75,0,2397,2396,
        1,0,0,0,2397,2398,1,0,0,0,2398,2399,1,0,0,0,2399,2401,5,3,0,0,2400,
        2402,3,208,104,0,2401,2400,1,0,0,0,2401,2402,1,0,0,0,2402,2404,1,
        0,0,0,2403,2405,3,210,105,0,2404,2403,1,0,0,0,2404,2405,1,0,0,0,
        2405,2407,1,0,0,0,2406,2408,3,216,108,0,2407,2406,1,0,0,0,2407,2408,
        1,0,0,0,2408,2410,1,0,0,0,2409,2411,3,218,109,0,2410,2409,1,0,0,
        0,2410,2411,1,0,0,0,2411,2413,1,0,0,0,2412,2414,3,220,110,0,2413,
        2412,1,0,0,0,2413,2414,1,0,0,0,2414,2416,1,0,0,0,2415,2417,3,222,
        111,0,2416,2415,1,0,0,0,2416,2417,1,0,0,0,2417,2461,1,0,0,0,2418,
        2419,5,275,0,0,2419,2421,3,422,211,0,2420,2422,3,148,74,0,2421,2420,
        1,0,0,0,2421,2422,1,0,0,0,2422,2424,1,0,0,0,2423,2425,3,210,105,
        0,2424,2423,1,0,0,0,2424,2425,1,0,0,0,2425,2427,1,0,0,0,2426,2428,
        3,216,108,0,2427,2426,1,0,0,0,2427,2428,1,0,0,0,2428,2430,1,0,0,
        0,2429,2431,3,218,109,0,2430,2429,1,0,0,0,2430,2431,1,0,0,0,2431,
        2433,1,0,0,0,2432,2434,3,220,110,0,2433,2432,1,0,0,0,2433,2434,1,
        0,0,0,2434,2436,1,0,0,0,2435,2437,3,222,111,0,2436,2435,1,0,0,0,
        2436,2437,1,0,0,0,2437,2461,1,0,0,0,2438,2439,5,285,0,0,2439,2440,
        5,275,0,0,2440,2442,3,1028,514,0,2441,2443,3,148,74,0,2442,2441,
        1,0,0,0,2442,2443,1,0,0,0,2443,2444,1,0,0,0,2444,2446,3,116,58,0,
        2445,2447,3,210,105,0,2446,2445,1,0,0,0,2446,2447,1,0,0,0,2447,2449,
        1,0,0,0,2448,2450,3,216,108,0,2449,2448,1,0,0,0,2449,2450,1,0,0,
        0,2450,2452,1,0,0,0,2451,2453,3,218,109,0,2452,2451,1,0,0,0,2452,
        2453,1,0,0,0,2453,2455,1,0,0,0,2454,2456,3,220,110,0,2455,2454,1,
        0,0,0,2455,2456,1,0,0,0,2456,2458,1,0,0,0,2457,2459,3,222,111,0,
        2458,2457,1,0,0,0,2458,2459,1,0,0,0,2459,2461,1,0,0,0,2460,2395,
        1,0,0,0,2460,2418,1,0,0,0,2460,2438,1,0,0,0,2461,145,1,0,0,0,2462,
        2468,5,354,0,0,2463,2468,5,352,0,0,2464,2465,7,20,0,0,2465,2468,
        7,21,0,0,2466,2468,5,367,0,0,2467,2462,1,0,0,0,2467,2463,1,0,0,0,
        2467,2464,1,0,0,0,2467,2466,1,0,0,0,2468,147,1,0,0,0,2469,2470,5,
        2,0,0,2470,2471,3,152,76,0,2471,2472,5,3,0,0,2472,149,1,0,0,0,2473,
        2478,3,154,77,0,2474,2475,5,6,0,0,2475,2477,3,154,77,0,2476,2474,
        1,0,0,0,2477,2480,1,0,0,0,2478,2476,1,0,0,0,2478,2479,1,0,0,0,2479,
        151,1,0,0,0,2480,2478,1,0,0,0,2481,2486,3,156,78,0,2482,2483,5,6,
        0,0,2483,2485,3,156,78,0,2484,2482,1,0,0,0,2485,2488,1,0,0,0,2486,
        2484,1,0,0,0,2486,2487,1,0,0,0,2487,153,1,0,0,0,2488,2486,1,0,0,
        0,2489,2493,3,158,79,0,2490,2493,3,176,88,0,2491,2493,3,180,90,0,
        2492,2489,1,0,0,0,2492,2490,1,0,0,0,2492,2491,1,0,0,0,2493,155,1,
        0,0,0,2494,2497,3,1050,525,0,2495,2496,5,105,0,0,2496,2498,5,280,
        0,0,2497,2495,1,0,0,0,2497,2498,1,0,0,0,2498,2499,1,0,0,0,2499,2500,
        3,162,81,0,2500,2503,1,0,0,0,2501,2503,3,180,90,0,2502,2494,1,0,
        0,0,2502,2501,1,0,0,0,2503,157,1,0,0,0,2504,2505,3,1050,525,0,2505,
        2507,3,870,435,0,2506,2508,3,280,140,0,2507,2506,1,0,0,0,2507,2508,
        1,0,0,0,2508,2510,1,0,0,0,2509,2511,3,160,80,0,2510,2509,1,0,0,0,
        2510,2511,1,0,0,0,2511,2514,1,0,0,0,2512,2513,5,543,0,0,2513,2515,
        3,1068,534,0,2514,2512,1,0,0,0,2514,2515,1,0,0,0,2515,2517,1,0,0,
        0,2516,2518,3,102,51,0,2517,2516,1,0,0,0,2517,2518,1,0,0,0,2518,
        2521,1,0,0,0,2519,2520,5,105,0,0,2520,2522,5,280,0,0,2521,2519,1,
        0,0,0,2521,2522,1,0,0,0,2522,2523,1,0,0,0,2523,2524,3,162,81,0,2524,
        159,1,0,0,0,2525,2532,5,345,0,0,2526,2533,5,544,0,0,2527,2533,5,
        205,0,0,2528,2533,5,545,0,0,2529,2533,5,546,0,0,2530,2533,5,53,0,
        0,2531,2533,3,1068,534,0,2532,2526,1,0,0,0,2532,2527,1,0,0,0,2532,
        2528,1,0,0,0,2532,2529,1,0,0,0,2532,2530,1,0,0,0,2532,2531,1,0,0,
        0,2533,161,1,0,0,0,2534,2536,3,164,82,0,2535,2534,1,0,0,0,2536,2539,
        1,0,0,0,2537,2535,1,0,0,0,2537,2538,1,0,0,0,2538,163,1,0,0,0,2539,
        2537,1,0,0,0,2540,2541,5,45,0,0,2541,2543,3,1068,534,0,2542,2540,
        1,0,0,0,2542,2543,1,0,0,0,2543,2544,1,0,0,0,2544,2546,3,166,83,0,
        2545,2547,3,172,86,0,2546,2545,1,0,0,0,2546,2547,1,0,0,0,2547,2549,
        1,0,0,0,2548,2550,3,174,87,0,2549,2548,1,0,0,0,2549,2550,1,0,0,0,
        2550,2559,1,0,0,0,2551,2553,3,166,83,0,2552,2554,3,172,86,0,2553,
        2552,1,0,0,0,2553,2554,1,0,0,0,2554,2556,1,0,0,0,2555,2557,3,174,
        87,0,2556,2555,1,0,0,0,2556,2557,1,0,0,0,2557,2559,1,0,0,0,2558,
        2542,1,0,0,0,2558,2551,1,0,0,0,2559,165,1,0,0,0,2560,2562,5,77,0,
        0,2561,2560,1,0,0,0,2561,2562,1,0,0,0,2562,2563,1,0,0,0,2563,2621,
        5,78,0,0,2564,2566,5,98,0,0,2565,2567,3,536,268,0,2566,2565,1,0,
        0,0,2566,2567,1,0,0,0,2567,2569,1,0,0,0,2568,2570,3,226,113,0,2569,
        2568,1,0,0,0,2569,2570,1,0,0,0,2570,2621,1,0,0,0,2571,2573,5,98,
        0,0,2572,2574,3,168,84,0,2573,2572,1,0,0,0,2573,2574,1,0,0,0,2574,
        2575,1,0,0,0,2575,2621,3,224,112,0,2576,2577,5,85,0,0,2577,2579,
        5,245,0,0,2578,2580,3,536,268,0,2579,2578,1,0,0,0,2579,2580,1,0,
        0,0,2580,2582,1,0,0,0,2581,2583,3,226,113,0,2582,2581,1,0,0,0,2582,
        2583,1,0,0,0,2583,2621,1,0,0,0,2584,2585,5,42,0,0,2585,2586,5,2,
        0,0,2586,2587,3,898,449,0,2587,2590,5,3,0,0,2588,2589,5,269,0,0,
        2589,2591,5,228,0,0,2590,2588,1,0,0,0,2590,2591,1,0,0,0,2591,2621,
        1,0,0,0,2592,2593,5,53,0,0,2593,2621,3,906,453,0,2594,2595,5,438,
        0,0,2595,2596,3,170,85,0,2596,2606,5,36,0,0,2597,2599,5,219,0,0,
        2598,2600,3,250,125,0,2599,2598,1,0,0,0,2599,2600,1,0,0,0,2600,2607,
        1,0,0,0,2601,2602,5,2,0,0,2602,2603,3,898,449,0,2603,2604,5,3,0,
        0,2604,2605,5,440,0,0,2605,2607,1,0,0,0,2606,2597,1,0,0,0,2606,2601,
        1,0,0,0,2607,2621,1,0,0,0,2608,2609,5,86,0,0,2609,2611,3,1028,514,
        0,2610,2612,3,184,92,0,2611,2610,1,0,0,0,2611,2612,1,0,0,0,2612,
        2614,1,0,0,0,2613,2615,3,192,96,0,2614,2613,1,0,0,0,2614,2615,1,
        0,0,0,2615,2617,1,0,0,0,2616,2618,3,200,100,0,2617,2616,1,0,0,0,
        2617,2618,1,0,0,0,2618,2621,1,0,0,0,2619,2621,3,102,51,0,2620,2561,
        1,0,0,0,2620,2564,1,0,0,0,2620,2571,1,0,0,0,2620,2576,1,0,0,0,2620,
        2584,1,0,0,0,2620,2592,1,0,0,0,2620,2594,1,0,0,0,2620,2608,1,0,0,
        0,2620,2619,1,0,0,0,2621,167,1,0,0,0,2622,2624,5,273,0,0,2623,2625,
        5,77,0,0,2624,2623,1,0,0,0,2624,2625,1,0,0,0,2625,2626,1,0,0,0,2626,
        2627,5,56,0,0,2627,169,1,0,0,0,2628,2632,5,139,0,0,2629,2630,5,147,
        0,0,2630,2632,5,53,0,0,2631,2628,1,0,0,0,2631,2629,1,0,0,0,2632,
        171,1,0,0,0,2633,2635,5,77,0,0,2634,2633,1,0,0,0,2634,2635,1,0,0,
        0,2635,2636,1,0,0,0,2636,2637,5,54,0,0,2637,173,1,0,0,0,2638,2639,
        5,69,0,0,2639,2640,7,9,0,0,2640,175,1,0,0,0,2641,2642,5,120,0,0,
        2642,2647,3,1028,514,0,2643,2644,7,22,0,0,2644,2646,3,178,89,0,2645,
        2643,1,0,0,0,2646,2649,1,0,0,0,2647,2645,1,0,0,0,2647,2648,1,0,0,
        0,2648,177,1,0,0,0,2649,2647,1,0,0,0,2650,2651,7,23,0,0,2651,179,
        1,0,0,0,2652,2653,5,45,0,0,2653,2655,3,1068,534,0,2654,2652,1,0,
        0,0,2654,2655,1,0,0,0,2655,2656,1,0,0,0,2656,2657,3,182,91,0,2657,
        181,1,0,0,0,2658,2659,5,42,0,0,2659,2660,5,2,0,0,2660,2661,3,898,
        449,0,2661,2662,5,3,0,0,2662,2663,3,356,178,0,2663,2724,1,0,0,0,
        2664,2668,5,98,0,0,2665,2666,5,85,0,0,2666,2668,5,245,0,0,2667,2664,
        1,0,0,0,2667,2665,1,0,0,0,2668,2684,1,0,0,0,2669,2671,3,184,92,0,
        2670,2672,3,190,95,0,2671,2670,1,0,0,0,2671,2672,1,0,0,0,2672,2674,
        1,0,0,0,2673,2675,3,536,268,0,2674,2673,1,0,0,0,2674,2675,1,0,0,
        0,2675,2677,1,0,0,0,2676,2678,3,226,113,0,2677,2676,1,0,0,0,2677,
        2678,1,0,0,0,2678,2679,1,0,0,0,2679,2680,3,356,178,0,2680,2685,1,
        0,0,0,2681,2682,3,228,114,0,2682,2683,3,356,178,0,2683,2685,1,0,
        0,0,2684,2669,1,0,0,0,2684,2681,1,0,0,0,2685,2724,1,0,0,0,2686,2688,
        5,199,0,0,2687,2689,3,216,108,0,2688,2687,1,0,0,0,2688,2689,1,0,
        0,0,2689,2690,1,0,0,0,2690,2691,5,2,0,0,2691,2692,3,194,97,0,2692,
        2694,5,3,0,0,2693,2695,3,190,95,0,2694,2693,1,0,0,0,2694,2695,1,
        0,0,0,2695,2697,1,0,0,0,2696,2698,3,536,268,0,2697,2696,1,0,0,0,
        2697,2698,1,0,0,0,2698,2700,1,0,0,0,2699,2701,3,226,113,0,2700,2699,
        1,0,0,0,2700,2701,1,0,0,0,2701,2703,1,0,0,0,2702,2704,3,198,99,0,
        2703,2702,1,0,0,0,2703,2704,1,0,0,0,2704,2705,1,0,0,0,2705,2706,
        3,356,178,0,2706,2724,1,0,0,0,2707,2708,5,63,0,0,2708,2709,5,245,
        0,0,2709,2710,3,184,92,0,2710,2711,5,86,0,0,2711,2713,3,1028,514,
        0,2712,2714,3,184,92,0,2713,2712,1,0,0,0,2713,2714,1,0,0,0,2714,
        2716,1,0,0,0,2715,2717,3,192,96,0,2716,2715,1,0,0,0,2716,2717,1,
        0,0,0,2717,2719,1,0,0,0,2718,2720,3,200,100,0,2719,2718,1,0,0,0,
        2719,2720,1,0,0,0,2720,2721,1,0,0,0,2721,2722,3,356,178,0,2722,2724,
        1,0,0,0,2723,2658,1,0,0,0,2723,2667,1,0,0,0,2723,2686,1,0,0,0,2723,
        2707,1,0,0,0,2724,183,1,0,0,0,2725,2726,5,2,0,0,2726,2727,3,188,
        94,0,2727,2728,5,3,0,0,2728,185,1,0,0,0,2729,2730,5,2,0,0,2730,2735,
        3,1050,525,0,2731,2732,5,6,0,0,2732,2734,3,1050,525,0,2733,2731,
        1,0,0,0,2734,2737,1,0,0,0,2735,2733,1,0,0,0,2735,2736,1,0,0,0,2736,
        2738,1,0,0,0,2737,2735,1,0,0,0,2738,2739,5,3,0,0,2739,187,1,0,0,
        0,2740,2745,3,1048,524,0,2741,2742,5,6,0,0,2742,2744,3,1048,524,
        0,2743,2741,1,0,0,0,2744,2747,1,0,0,0,2745,2743,1,0,0,0,2745,2746,
        1,0,0,0,2746,189,1,0,0,0,2747,2745,1,0,0,0,2748,2749,5,441,0,0,2749,
        2750,3,184,92,0,2750,191,1,0,0,0,2751,2752,5,258,0,0,2752,2753,7,
        24,0,0,2753,193,1,0,0,0,2754,2759,3,196,98,0,2755,2756,5,6,0,0,2756,
        2758,3,196,98,0,2757,2755,1,0,0,0,2758,2761,1,0,0,0,2759,2757,1,
        0,0,0,2759,2760,1,0,0,0,2760,195,1,0,0,0,2761,2759,1,0,0,0,2762,
        2763,3,482,241,0,2763,2770,5,105,0,0,2764,2771,3,554,277,0,2765,
        2766,5,278,0,0,2766,2767,5,2,0,0,2767,2768,3,554,277,0,2768,2769,
        5,3,0,0,2769,2771,1,0,0,0,2770,2764,1,0,0,0,2770,2765,1,0,0,0,2771,
        197,1,0,0,0,2772,2773,5,103,0,0,2773,2774,5,2,0,0,2774,2775,3,898,
        449,0,2775,2776,5,3,0,0,2776,199,1,0,0,0,2777,2779,3,202,101,0,2778,
        2780,3,204,102,0,2779,2778,1,0,0,0,2779,2780,1,0,0,0,2780,2786,1,
        0,0,0,2781,2783,3,204,102,0,2782,2784,3,202,101,0,2783,2782,1,0,
        0,0,2783,2784,1,0,0,0,2784,2786,1,0,0,0,2785,2777,1,0,0,0,2785,2781,
        1,0,0,0,2786,201,1,0,0,0,2787,2788,5,80,0,0,2788,2789,5,369,0,0,
        2789,2790,3,206,103,0,2790,203,1,0,0,0,2791,2792,5,80,0,0,2792,2793,
        5,182,0,0,2793,2794,3,206,103,0,2794,205,1,0,0,0,2795,2796,5,269,
        0,0,2796,2805,5,132,0,0,2797,2805,5,315,0,0,2798,2805,5,150,0,0,
        2799,2800,5,333,0,0,2800,2802,7,25,0,0,2801,2803,3,188,94,0,2802,
        2801,1,0,0,0,2802,2803,1,0,0,0,2803,2805,1,0,0,0,2804,2795,1,0,0,
        0,2804,2797,1,0,0,0,2804,2798,1,0,0,0,2804,2799,1,0,0,0,2805,207,
        1,0,0,0,2806,2807,5,238,0,0,2807,2808,5,2,0,0,2808,2809,3,1006,503,
        0,2809,2810,5,3,0,0,2810,209,1,0,0,0,2811,2812,5,285,0,0,2812,2813,
        5,147,0,0,2813,2814,3,1068,534,0,2814,2815,3,212,106,0,2815,211,
        1,0,0,0,2816,2817,5,2,0,0,2817,2822,3,214,107,0,2818,2819,5,6,0,
        0,2819,2821,3,214,107,0,2820,2818,1,0,0,0,2821,2824,1,0,0,0,2822,
        2820,1,0,0,0,2822,2823,1,0,0,0,2823,2825,1,0,0,0,2824,2822,1,0,0,
        0,2825,2826,5,3,0,0,2826,213,1,0,0,0,2827,2834,3,1048,524,0,2828,
        2834,3,912,456,0,2829,2830,5,2,0,0,2830,2831,3,898,449,0,2831,2832,
        5,3,0,0,2832,2834,1,0,0,0,2833,2827,1,0,0,0,2833,2828,1,0,0,0,2833,
        2829,1,0,0,0,2834,2836,1,0,0,0,2835,2837,3,102,51,0,2836,2835,1,
        0,0,0,2836,2837,1,0,0,0,2837,2839,1,0,0,0,2838,2840,3,422,211,0,
        2839,2838,1,0,0,0,2839,2840,1,0,0,0,2840,215,1,0,0,0,2841,2842,5,
        100,0,0,2842,2843,3,1068,534,0,2843,217,1,0,0,0,2844,2845,5,105,
        0,0,2845,2849,3,106,53,0,2846,2847,7,26,0,0,2847,2849,5,277,0,0,
        2848,2844,1,0,0,0,2848,2846,1,0,0,0,2849,219,1,0,0,0,2850,2851,5,
        80,0,0,2851,2857,5,161,0,0,2852,2858,5,191,0,0,2853,2854,5,182,0,
        0,2854,2858,5,320,0,0,2855,2856,5,292,0,0,2856,2858,5,320,0,0,2857,
        2852,1,0,0,0,2857,2853,1,0,0,0,2857,2855,1,0,0,0,2858,221,1,0,0,
        0,2859,2860,5,351,0,0,2860,2861,3,1018,509,0,2861,223,1,0,0,0,2862,
        2864,3,484,242,0,2863,2862,1,0,0,0,2863,2864,1,0,0,0,2864,2866,1,
        0,0,0,2865,2867,3,762,381,0,2866,2865,1,0,0,0,2866,2867,1,0,0,0,
        2867,2869,1,0,0,0,2868,2870,3,226,113,0,2869,2868,1,0,0,0,2869,2870,
        1,0,0,0,2870,225,1,0,0,0,2871,2872,5,100,0,0,2872,2873,5,226,0,0,
        2873,2874,3,222,111,0,2874,227,1,0,0,0,2875,2876,5,100,0,0,2876,
        2877,5,226,0,0,2877,2878,3,1068,534,0,2878,229,1,0,0,0,2879,2880,
        5,46,0,0,2880,2885,5,342,0,0,2881,2883,3,388,194,0,2882,2881,1,0,
        0,0,2882,2883,1,0,0,0,2883,2884,1,0,0,0,2884,2886,3,422,211,0,2885,
        2882,1,0,0,0,2885,2886,1,0,0,0,2886,2888,1,0,0,0,2887,2889,3,184,
        92,0,2888,2887,1,0,0,0,2888,2889,1,0,0,0,2889,2890,1,0,0,0,2890,
        2893,5,80,0,0,2891,2894,3,968,484,0,2892,2894,3,964,482,0,2893,2891,
        1,0,0,0,2893,2892,1,0,0,0,2894,2895,1,0,0,0,2895,2896,3,812,406,
        0,2896,231,1,0,0,0,2897,2898,5,138,0,0,2898,2900,5,342,0,0,2899,
        2901,3,568,284,0,2900,2899,1,0,0,0,2900,2901,1,0,0,0,2901,2902,1,
        0,0,0,2902,2903,3,422,211,0,2903,2904,5,333,0,0,2904,2905,5,342,
        0,0,2905,2906,3,1062,531,0,2906,233,1,0,0,0,2907,2909,5,46,0,0,2908,
        2910,3,146,73,0,2909,2908,1,0,0,0,2909,2910,1,0,0,0,2910,2911,1,
        0,0,0,2911,2913,5,92,0,0,2912,2914,3,388,194,0,2913,2912,1,0,0,0,
        2913,2914,1,0,0,0,2914,2915,1,0,0,0,2915,2916,3,236,118,0,2916,2917,
        5,36,0,0,2917,2919,3,750,375,0,2918,2920,3,238,119,0,2919,2918,1,
        0,0,0,2919,2920,1,0,0,0,2920,235,1,0,0,0,2921,2923,3,1020,510,0,
        2922,2924,3,186,93,0,2923,2922,1,0,0,0,2923,2924,1,0,0,0,2924,2926,
        1,0,0,0,2925,2927,3,216,108,0,2926,2925,1,0,0,0,2926,2927,1,0,0,
        0,2927,2929,1,0,0,0,2928,2930,3,218,109,0,2929,2928,1,0,0,0,2929,
        2930,1,0,0,0,2930,2932,1,0,0,0,2931,2933,3,220,110,0,2932,2931,1,
        0,0,0,2932,2933,1,0,0,0,2933,2935,1,0,0,0,2934,2936,3,222,111,0,
        2935,2934,1,0,0,0,2935,2936,1,0,0,0,2936,237,1,0,0,0,2937,2941,5,
        105,0,0,2938,2942,5,174,0,0,2939,2940,5,269,0,0,2940,2942,5,174,
        0,0,2941,2938,1,0,0,0,2941,2939,1,0,0,0,2942,239,1,0,0,0,2943,2945,
        5,46,0,0,2944,2946,5,367,0,0,2945,2944,1,0,0,0,2945,2946,1,0,0,0,
        2946,2947,1,0,0,0,2947,2948,5,259,0,0,2948,2950,5,376,0,0,2949,2951,
        3,388,194,0,2950,2949,1,0,0,0,2950,2951,1,0,0,0,2951,2952,1,0,0,
        0,2952,2953,3,242,121,0,2953,2954,5,36,0,0,2954,2956,3,750,375,0,
        2955,2957,3,238,119,0,2956,2955,1,0,0,0,2956,2957,1,0,0,0,2957,241,
        1,0,0,0,2958,2960,3,1024,512,0,2959,2961,3,186,93,0,2960,2959,1,
        0,0,0,2960,2961,1,0,0,0,2961,2963,1,0,0,0,2962,2964,3,216,108,0,
        2963,2962,1,0,0,0,2963,2964,1,0,0,0,2964,2966,1,0,0,0,2965,2967,
        3,108,54,0,2966,2965,1,0,0,0,2966,2967,1,0,0,0,2967,2969,1,0,0,0,
        2968,2970,3,222,111,0,2969,2968,1,0,0,0,2969,2970,1,0,0,0,2970,243,
        1,0,0,0,2971,2972,5,305,0,0,2972,2973,5,259,0,0,2973,2975,5,376,
        0,0,2974,2976,5,109,0,0,2975,2974,1,0,0,0,2975,2976,1,0,0,0,2976,
        2977,1,0,0,0,2977,2979,3,1026,513,0,2978,2980,3,238,119,0,2979,2978,
        1,0,0,0,2979,2980,1,0,0,0,2980,245,1,0,0,0,2981,2983,5,46,0,0,2982,
        2984,3,146,73,0,2983,2982,1,0,0,0,2983,2984,1,0,0,0,2984,2985,1,
        0,0,0,2985,2987,5,328,0,0,2986,2988,3,388,194,0,2987,2986,1,0,0,
        0,2987,2988,1,0,0,0,2988,2989,1,0,0,0,2989,2991,3,1028,514,0,2990,
        2992,3,252,126,0,2991,2990,1,0,0,0,2991,2992,1,0,0,0,2992,247,1,
        0,0,0,2993,2994,5,138,0,0,2994,2996,5,328,0,0,2995,2997,3,568,284,
        0,2996,2995,1,0,0,0,2996,2997,1,0,0,0,2997,2998,1,0,0,0,2998,2999,
        3,1028,514,0,2999,3000,3,252,126,0,3000,249,1,0,0,0,3001,3002,5,
        2,0,0,3002,3003,3,252,126,0,3003,3004,5,3,0,0,3004,251,1,0,0,0,3005,
        3007,3,254,127,0,3006,3005,1,0,0,0,3007,3008,1,0,0,0,3008,3006,1,
        0,0,0,3008,3009,1,0,0,0,3009,253,1,0,0,0,3010,3011,5,36,0,0,3011,
        3044,3,874,437,0,3012,3014,5,148,0,0,3013,3015,3,256,128,0,3014,
        3013,1,0,0,0,3014,3015,1,0,0,0,3015,3044,1,0,0,0,3016,3018,5,225,
        0,0,3017,3019,5,147,0,0,3018,3017,1,0,0,0,3018,3019,1,0,0,0,3019,
        3020,1,0,0,0,3020,3044,3,256,128,0,3021,3022,7,27,0,0,3022,3044,
        3,256,128,0,3023,3024,5,269,0,0,3024,3044,7,28,0,0,3025,3026,5,281,
        0,0,3026,3027,5,147,0,0,3027,3044,3,1048,524,0,3028,3029,5,328,0,
        0,3029,3030,5,266,0,0,3030,3044,3,422,211,0,3031,3033,5,340,0,0,
        3032,3034,5,105,0,0,3033,3032,1,0,0,0,3033,3034,1,0,0,0,3034,3035,
        1,0,0,0,3035,3044,3,256,128,0,3036,3038,5,314,0,0,3037,3039,5,105,
        0,0,3038,3037,1,0,0,0,3038,3039,1,0,0,0,3039,3041,1,0,0,0,3040,3042,
        3,256,128,0,3041,3040,1,0,0,0,3041,3042,1,0,0,0,3042,3044,1,0,0,
        0,3043,3010,1,0,0,0,3043,3012,1,0,0,0,3043,3016,1,0,0,0,3043,3021,
        1,0,0,0,3043,3023,1,0,0,0,3043,3025,1,0,0,0,3043,3028,1,0,0,0,3043,
        3031,1,0,0,0,3043,3036,1,0,0,0,3044,255,1,0,0,0,3045,3047,7,29,0,
        0,3046,3045,1,0,0,0,3046,3047,1,0,0,0,3047,3048,1,0,0,0,3048,3051,
        5,573,0,0,3049,3051,3,1062,531,0,3050,3046,1,0,0,0,3050,3049,1,0,
        0,0,3051,257,1,0,0,0,3052,3057,3,256,128,0,3053,3054,5,6,0,0,3054,
        3056,3,256,128,0,3055,3053,1,0,0,0,3056,3059,1,0,0,0,3057,3055,1,
        0,0,0,3057,3058,1,0,0,0,3058,259,1,0,0,0,3059,3057,1,0,0,0,3060,
        3062,5,46,0,0,3061,3063,3,492,246,0,3062,3061,1,0,0,0,3062,3063,
        1,0,0,0,3063,3065,1,0,0,0,3064,3066,5,359,0,0,3065,3064,1,0,0,0,
        3065,3066,1,0,0,0,3066,3068,1,0,0,0,3067,3069,5,295,0,0,3068,3067,
        1,0,0,0,3068,3069,1,0,0,0,3069,3070,1,0,0,0,3070,3071,5,247,0,0,
        3071,3084,3,1068,534,0,3072,3073,5,215,0,0,3073,3076,3,422,211,0,
        3074,3075,5,239,0,0,3075,3077,3,422,211,0,3076,3074,1,0,0,0,3076,
        3077,1,0,0,0,3077,3082,1,0,0,0,3078,3079,5,373,0,0,3079,3083,3,422,
        211,0,3080,3081,5,269,0,0,3081,3083,5,373,0,0,3082,3078,1,0,0,0,
        3082,3080,1,0,0,0,3082,3083,1,0,0,0,3083,3085,1,0,0,0,3084,3072,
        1,0,0,0,3084,3085,1,0,0,0,3085,261,1,0,0,0,3086,3087,5,46,0,0,3087,
        3090,3,222,111,0,3088,3089,5,282,0,0,3089,3091,3,1064,532,0,3090,
        3088,1,0,0,0,3090,3091,1,0,0,0,3091,3092,1,0,0,0,3092,3093,5,255,
        0,0,3093,3095,3,1058,529,0,3094,3096,3,108,54,0,3095,3094,1,0,0,
        0,3095,3096,1,0,0,0,3096,263,1,0,0,0,3097,3098,5,46,0,0,3098,3100,
        5,204,0,0,3099,3101,3,388,194,0,3100,3099,1,0,0,0,3100,3101,1,0,
        0,0,3101,3102,1,0,0,0,3102,3104,3,1068,534,0,3103,3105,5,105,0,0,
        3104,3103,1,0,0,0,3104,3105,1,0,0,0,3105,3109,1,0,0,0,3106,3108,
        3,266,133,0,3107,3106,1,0,0,0,3108,3111,1,0,0,0,3109,3107,1,0,0,
        0,3109,3110,1,0,0,0,3110,265,1,0,0,0,3111,3109,1,0,0,0,3112,3113,
        5,323,0,0,3113,3118,3,1038,519,0,3114,3115,7,30,0,0,3115,3118,3,
        62,31,0,3116,3118,5,150,0,0,3117,3112,1,0,0,0,3117,3114,1,0,0,0,
        3117,3116,1,0,0,0,3118,267,1,0,0,0,3119,3120,5,138,0,0,3120,3121,
        5,204,0,0,3121,3122,3,1068,534,0,3122,3127,5,369,0,0,3123,3124,5,
        94,0,0,3124,3126,3,62,31,0,3125,3123,1,0,0,0,3126,3129,1,0,0,0,3127,
        3125,1,0,0,0,3127,3128,1,0,0,0,3128,269,1,0,0,0,3129,3127,1,0,0,
        0,3130,3131,5,138,0,0,3131,3132,5,204,0,0,3132,3133,3,1068,534,0,
        3133,3166,7,6,0,0,3134,3135,5,443,0,0,3135,3136,5,62,0,0,3136,3137,
        3,870,435,0,3137,3138,5,247,0,0,3138,3139,3,1068,534,0,3139,3167,
        1,0,0,0,3140,3141,5,442,0,0,3141,3167,3,500,250,0,3142,3143,5,296,
        0,0,3143,3167,3,504,252,0,3144,3145,5,278,0,0,3145,3146,7,31,0,0,
        3146,3147,3,422,211,0,3147,3148,3,216,108,0,3148,3167,1,0,0,0,3149,
        3150,5,278,0,0,3150,3167,3,558,279,0,3151,3152,5,211,0,0,3152,3167,
        3,508,254,0,3153,3154,7,32,0,0,3154,3167,3,870,435,0,3155,3156,5,
        41,0,0,3156,3157,5,2,0,0,3157,3158,3,870,435,0,3158,3159,5,36,0,
        0,3159,3160,3,870,435,0,3160,3161,5,3,0,0,3161,3167,1,0,0,0,3162,
        3163,5,136,0,0,3163,3167,3,524,262,0,3164,3167,3,414,207,0,3165,
        3167,3,412,206,0,3166,3134,1,0,0,0,3166,3140,1,0,0,0,3166,3142,1,
        0,0,0,3166,3144,1,0,0,0,3166,3149,1,0,0,0,3166,3151,1,0,0,0,3166,
        3153,1,0,0,0,3166,3155,1,0,0,0,3166,3162,1,0,0,0,3166,3164,1,0,0,
        0,3166,3165,1,0,0,0,3167,271,1,0,0,0,3168,3169,5,46,0,0,3169,3170,
        5,63,0,0,3170,3171,5,174,0,0,3171,3172,5,381,0,0,3172,3174,3,1068,
        534,0,3173,3175,3,276,138,0,3174,3173,1,0,0,0,3174,3175,1,0,0,0,
        3175,3177,1,0,0,0,3176,3178,3,280,140,0,3177,3176,1,0,0,0,3177,3178,
        1,0,0,0,3178,273,1,0,0,0,3179,3181,7,33,0,0,3180,3182,3,422,211,
        0,3181,3180,1,0,0,0,3181,3182,1,0,0,0,3182,3186,1,0,0,0,3183,3184,
        5,269,0,0,3184,3186,7,33,0,0,3185,3179,1,0,0,0,3185,3183,1,0,0,0,
        3186,275,1,0,0,0,3187,3189,3,274,137,0,3188,3187,1,0,0,0,3189,3190,
        1,0,0,0,3190,3188,1,0,0,0,3190,3191,1,0,0,0,3191,277,1,0,0,0,3192,
        3193,5,138,0,0,3193,3194,5,63,0,0,3194,3195,5,174,0,0,3195,3196,
        5,381,0,0,3196,3202,3,1068,534,0,3197,3199,3,276,138,0,3198,3197,
        1,0,0,0,3198,3199,1,0,0,0,3199,3200,1,0,0,0,3200,3203,3,284,142,
        0,3201,3203,3,276,138,0,3202,3198,1,0,0,0,3202,3201,1,0,0,0,3203,
        279,1,0,0,0,3204,3205,5,280,0,0,3205,3206,5,2,0,0,3206,3207,3,282,
        141,0,3207,3208,5,3,0,0,3208,281,1,0,0,0,3209,3214,3,290,145,0,3210,
        3211,5,6,0,0,3211,3213,3,290,145,0,3212,3210,1,0,0,0,3213,3216,1,
        0,0,0,3214,3212,1,0,0,0,3214,3215,1,0,0,0,3215,283,1,0,0,0,3216,
        3214,1,0,0,0,3217,3218,5,280,0,0,3218,3219,5,2,0,0,3219,3220,3,286,
        143,0,3220,3221,5,3,0,0,3221,285,1,0,0,0,3222,3227,3,288,144,0,3223,
        3224,5,6,0,0,3224,3226,3,288,144,0,3225,3223,1,0,0,0,3226,3229,1,
        0,0,0,3227,3225,1,0,0,0,3227,3228,1,0,0,0,3228,287,1,0,0,0,3229,
        3227,1,0,0,0,3230,3231,7,34,0,0,3231,3232,3,290,145,0,3232,289,1,
        0,0,0,3233,3234,3,1074,537,0,3234,3235,3,1058,529,0,3235,291,1,0,
        0,0,3236,3237,5,46,0,0,3237,3239,5,331,0,0,3238,3240,3,388,194,0,
        3239,3238,1,0,0,0,3239,3240,1,0,0,0,3240,3241,1,0,0,0,3241,3244,
        3,1068,534,0,3242,3243,5,360,0,0,3243,3245,3,1058,529,0,3244,3242,
        1,0,0,0,3244,3245,1,0,0,0,3245,3247,1,0,0,0,3246,3248,3,294,147,
        0,3247,3246,1,0,0,0,3247,3248,1,0,0,0,3248,3249,1,0,0,0,3249,3250,
        5,63,0,0,3250,3251,5,174,0,0,3251,3252,5,381,0,0,3252,3254,3,1068,
        534,0,3253,3255,3,280,140,0,3254,3253,1,0,0,0,3254,3255,1,0,0,0,
        3255,293,1,0,0,0,3256,3259,5,375,0,0,3257,3260,3,1058,529,0,3258,
        3260,5,78,0,0,3259,3257,1,0,0,0,3259,3258,1,0,0,0,3260,295,1,0,0,
        0,3261,3262,5,138,0,0,3262,3263,5,331,0,0,3263,3269,3,1068,534,0,
        3264,3270,3,284,142,0,3265,3267,3,294,147,0,3266,3268,3,284,142,
        0,3267,3266,1,0,0,0,3267,3268,1,0,0,0,3268,3270,1,0,0,0,3269,3264,
        1,0,0,0,3269,3265,1,0,0,0,3270,297,1,0,0,0,3271,3272,5,46,0,0,3272,
        3273,5,63,0,0,3273,3275,5,92,0,0,3274,3276,3,388,194,0,3275,3274,
        1,0,0,0,3275,3276,1,0,0,0,3276,3277,1,0,0,0,3277,3278,3,1020,510,
        0,3278,3280,5,2,0,0,3279,3281,3,150,75,0,3280,3279,1,0,0,0,3280,
        3281,1,0,0,0,3281,3282,1,0,0,0,3282,3284,5,3,0,0,3283,3285,3,208,
        104,0,3284,3283,1,0,0,0,3284,3285,1,0,0,0,3285,3286,1,0,0,0,3286,
        3287,5,331,0,0,3287,3289,3,1068,534,0,3288,3290,3,280,140,0,3289,
        3288,1,0,0,0,3289,3290,1,0,0,0,3290,3311,1,0,0,0,3291,3292,5,46,
        0,0,3292,3293,5,63,0,0,3293,3295,5,92,0,0,3294,3296,3,388,194,0,
        3295,3294,1,0,0,0,3295,3296,1,0,0,0,3296,3297,1,0,0,0,3297,3298,
        3,1020,510,0,3298,3299,5,285,0,0,3299,3300,5,275,0,0,3300,3302,3,
        1022,511,0,3301,3303,3,148,74,0,3302,3301,1,0,0,0,3302,3303,1,0,
        0,0,3303,3304,1,0,0,0,3304,3305,3,116,58,0,3305,3306,5,331,0,0,3306,
        3308,3,1068,534,0,3307,3309,3,280,140,0,3308,3307,1,0,0,0,3308,3309,
        1,0,0,0,3309,3311,1,0,0,0,3310,3271,1,0,0,0,3310,3291,1,0,0,0,3311,
        299,1,0,0,0,3312,3313,5,444,0,0,3313,3314,5,63,0,0,3314,3315,5,323,
        0,0,3315,3317,3,1038,519,0,3316,3318,3,302,151,0,3317,3316,1,0,0,
        0,3317,3318,1,0,0,0,3318,3319,1,0,0,0,3319,3320,5,64,0,0,3320,3321,
        5,331,0,0,3321,3322,3,1068,534,0,3322,3323,5,71,0,0,3323,3325,3,
        1068,534,0,3324,3326,3,280,140,0,3325,3324,1,0,0,0,3325,3326,1,0,
        0,0,3326,301,1,0,0,0,3327,3328,5,74,0,0,3328,3331,5,94,0,0,3329,
        3331,5,59,0,0,3330,3327,1,0,0,0,3330,3329,1,0,0,0,3331,3332,1,0,
        0,0,3332,3333,5,2,0,0,3333,3334,3,832,416,0,3334,3335,5,3,0,0,3335,
        303,1,0,0,0,3336,3337,5,46,0,0,3337,3338,5,99,0,0,3338,3340,5,257,
        0,0,3339,3341,3,388,194,0,3340,3339,1,0,0,0,3340,3341,1,0,0,0,3341,
        3342,1,0,0,0,3342,3343,5,62,0,0,3343,3344,3,306,153,0,3344,3345,
        5,331,0,0,3345,3347,3,1068,534,0,3346,3348,3,280,140,0,3347,3346,
        1,0,0,0,3347,3348,1,0,0,0,3348,305,1,0,0,0,3349,3352,3,1064,532,
        0,3350,3352,5,99,0,0,3351,3349,1,0,0,0,3351,3350,1,0,0,0,3352,307,
        1,0,0,0,3353,3354,5,138,0,0,3354,3355,5,99,0,0,3355,3356,5,257,0,
        0,3356,3357,5,62,0,0,3357,3358,3,306,153,0,3358,3359,5,331,0,0,3359,
        3360,3,1068,534,0,3360,3361,3,284,142,0,3361,309,1,0,0,0,3362,3363,
        5,46,0,0,3363,3364,5,445,0,0,3364,3365,3,1068,534,0,3365,3366,5,
        80,0,0,3366,3368,3,1028,514,0,3367,3369,3,326,163,0,3368,3367,1,
        0,0,0,3368,3369,1,0,0,0,3369,3372,1,0,0,0,3370,3371,5,62,0,0,3371,
        3373,3,328,164,0,3372,3370,1,0,0,0,3372,3373,1,0,0,0,3373,3375,1,
        0,0,0,3374,3376,3,324,162,0,3375,3374,1,0,0,0,3375,3376,1,0,0,0,
        3376,3378,1,0,0,0,3377,3379,3,320,160,0,3378,3377,1,0,0,0,3378,3379,
        1,0,0,0,3379,3381,1,0,0,0,3380,3382,3,322,161,0,3381,3380,1,0,0,
        0,3381,3382,1,0,0,0,3382,311,1,0,0,0,3383,3384,5,138,0,0,3384,3385,
        5,445,0,0,3385,3386,3,1068,534,0,3386,3387,5,80,0,0,3387,3389,3,
        1028,514,0,3388,3390,3,324,162,0,3389,3388,1,0,0,0,3389,3390,1,0,
        0,0,3390,3392,1,0,0,0,3391,3393,3,320,160,0,3392,3391,1,0,0,0,3392,
        3393,1,0,0,0,3393,3395,1,0,0,0,3394,3396,3,322,161,0,3395,3394,1,
        0,0,0,3395,3396,1,0,0,0,3396,313,1,0,0,0,3397,3398,5,138,0,0,3398,
        3399,5,296,0,0,3399,3401,3,1044,522,0,3400,3402,3,494,247,0,3401,
        3400,1,0,0,0,3401,3402,1,0,0,0,3402,3403,1,0,0,0,3403,3404,3,316,
        158,0,3404,315,1,0,0,0,3405,3409,3,318,159,0,3406,3408,3,318,159,
        0,3407,3406,1,0,0,0,3408,3411,1,0,0,0,3409,3407,1,0,0,0,3409,3410,
        1,0,0,0,3410,3413,1,0,0,0,3411,3409,1,0,0,0,3412,3414,5,315,0,0,
        3413,3412,1,0,0,0,3413,3414,1,0,0,0,3414,3432,1,0,0,0,3415,3416,
        5,309,0,0,3416,3417,5,94,0,0,3417,3432,3,1046,523,0,3418,3419,5,
        282,0,0,3419,3420,5,94,0,0,3420,3432,3,1064,532,0,3421,3422,5,333,
        0,0,3422,3423,5,323,0,0,3423,3432,3,36,18,0,3424,3426,5,269,0,0,
        3425,3424,1,0,0,0,3425,3426,1,0,0,0,3426,3427,1,0,0,0,3427,3428,
        5,462,0,0,3428,3429,5,80,0,0,3429,3430,5,204,0,0,3430,3432,3,1068,
        534,0,3431,3405,1,0,0,0,3431,3415,1,0,0,0,3431,3418,1,0,0,0,3431,
        3421,1,0,0,0,3431,3425,1,0,0,0,3432,317,1,0,0,0,3433,3435,5,205,
        0,0,3434,3433,1,0,0,0,3434,3435,1,0,0,0,3435,3436,1,0,0,0,3436,3437,
        5,327,0,0,3437,3444,5,243,0,0,3438,3440,5,205,0,0,3439,3438,1,0,
        0,0,3439,3440,1,0,0,0,3440,3441,1,0,0,0,3441,3442,5,327,0,0,3442,
        3444,5,181,0,0,3443,3434,1,0,0,0,3443,3439,1,0,0,0,3444,3463,1,0,
        0,0,3445,3446,5,333,0,0,3446,3447,3,1068,534,0,3447,3450,7,35,0,
        0,3448,3451,3,1068,534,0,3449,3451,5,53,0,0,3450,3448,1,0,0,0,3450,
        3449,1,0,0,0,3451,3463,1,0,0,0,3452,3453,5,333,0,0,3453,3454,3,1068,
        534,0,3454,3455,5,64,0,0,3455,3456,5,434,0,0,3456,3463,1,0,0,0,3457,
        3460,5,313,0,0,3458,3461,3,1068,534,0,3459,3461,5,30,0,0,3460,3458,
        1,0,0,0,3460,3459,1,0,0,0,3461,3463,1,0,0,0,3462,3443,1,0,0,0,3462,
        3445,1,0,0,0,3462,3452,1,0,0,0,3462,3457,1,0,0,0,3463,319,1,0,0,
        0,3464,3465,5,100,0,0,3465,3466,5,2,0,0,3466,3467,3,898,449,0,3467,
        3468,5,3,0,0,3468,321,1,0,0,0,3469,3470,5,105,0,0,3470,3471,5,42,
        0,0,3471,3472,5,2,0,0,3472,3473,3,898,449,0,3473,3474,5,3,0,0,3474,
        323,1,0,0,0,3475,3476,5,94,0,0,3476,3477,3,1066,533,0,3477,325,1,
        0,0,0,3478,3482,5,36,0,0,3479,3483,5,541,0,0,3480,3483,5,542,0,0,
        3481,3483,3,1076,538,0,3482,3479,1,0,0,0,3482,3480,1,0,0,0,3482,
        3481,1,0,0,0,3483,327,1,0,0,0,3484,3485,7,36,0,0,3485,329,1,0,0,
        0,3486,3487,5,46,0,0,3487,3488,5,131,0,0,3488,3489,5,446,0,0,3489,
        3490,3,1068,534,0,3490,3491,5,360,0,0,3491,3492,7,37,0,0,3492,3493,
        5,215,0,0,3493,3494,3,422,211,0,3494,331,1,0,0,0,3495,3497,5,46,
        0,0,3496,3498,3,492,246,0,3497,3496,1,0,0,0,3497,3498,1,0,0,0,3498,
        3499,1,0,0,0,3499,3500,5,357,0,0,3500,3501,3,1068,534,0,3501,3502,
        3,334,167,0,3502,3503,3,338,169,0,3503,3504,5,80,0,0,3504,3506,3,
        1022,511,0,3505,3507,3,342,171,0,3506,3505,1,0,0,0,3506,3507,1,0,
        0,0,3507,3509,1,0,0,0,3508,3510,3,346,173,0,3509,3508,1,0,0,0,3509,
        3510,1,0,0,0,3510,3512,1,0,0,0,3511,3513,3,348,174,0,3512,3511,1,
        0,0,0,3512,3513,1,0,0,0,3513,3514,1,0,0,0,3514,3515,5,202,0,0,3515,
        3516,3,350,175,0,3516,3517,5,2,0,0,3517,3518,3,352,176,0,3518,3519,
        5,3,0,0,3519,3551,1,0,0,0,3520,3522,5,46,0,0,3521,3523,3,492,246,
        0,3522,3521,1,0,0,0,3522,3523,1,0,0,0,3523,3525,1,0,0,0,3524,3526,
        5,45,0,0,3525,3524,1,0,0,0,3525,3526,1,0,0,0,3526,3527,1,0,0,0,3527,
        3528,5,357,0,0,3528,3529,3,1068,534,0,3529,3530,3,334,167,0,3530,
        3531,3,338,169,0,3531,3532,5,80,0,0,3532,3535,3,1022,511,0,3533,
        3534,5,64,0,0,3534,3536,3,1028,514,0,3535,3533,1,0,0,0,3535,3536,
        1,0,0,0,3536,3537,1,0,0,0,3537,3539,3,356,178,0,3538,3540,3,336,
        168,0,3539,3538,1,0,0,0,3539,3540,1,0,0,0,3540,3542,1,0,0,0,3541,
        3543,3,348,174,0,3542,3541,1,0,0,0,3542,3543,1,0,0,0,3543,3544,1,
        0,0,0,3544,3545,5,202,0,0,3545,3546,3,350,175,0,3546,3547,5,2,0,
        0,3547,3548,3,352,176,0,3548,3549,5,3,0,0,3549,3551,1,0,0,0,3550,
        3495,1,0,0,0,3550,3520,1,0,0,0,3551,333,1,0,0,0,3552,3557,5,145,
        0,0,3553,3557,5,135,0,0,3554,3555,5,242,0,0,3555,3557,5,275,0,0,
        3556,3552,1,0,0,0,3556,3553,1,0,0,0,3556,3554,1,0,0,0,3557,335,1,
        0,0,0,3558,3560,5,62,0,0,3559,3561,5,192,0,0,3560,3559,1,0,0,0,3560,
        3561,1,0,0,0,3561,3562,1,0,0,0,3562,3563,7,38,0,0,3563,337,1,0,0,
        0,3564,3569,3,340,170,0,3565,3566,5,82,0,0,3566,3568,3,340,170,0,
        3567,3565,1,0,0,0,3568,3571,1,0,0,0,3569,3567,1,0,0,0,3569,3570,
        1,0,0,0,3570,339,1,0,0,0,3571,3569,1,0,0,0,3572,3581,5,241,0,0,3573,
        3581,5,182,0,0,3574,3577,5,369,0,0,3575,3576,5,275,0,0,3576,3578,
        3,188,94,0,3577,3575,1,0,0,0,3577,3578,1,0,0,0,3578,3581,1,0,0,0,
        3579,3581,5,358,0,0,3580,3572,1,0,0,0,3580,3573,1,0,0,0,3580,3574,
        1,0,0,0,3580,3579,1,0,0,0,3581,341,1,0,0,0,3582,3584,5,447,0,0,3583,
        3585,3,344,172,0,3584,3583,1,0,0,0,3585,3586,1,0,0,0,3586,3584,1,
        0,0,0,3586,3587,1,0,0,0,3587,343,1,0,0,0,3588,3589,7,39,0,0,3589,
        3591,7,40,0,0,3590,3592,5,36,0,0,3591,3590,1,0,0,0,3591,3592,1,0,
        0,0,3592,3593,1,0,0,0,3593,3594,3,1068,534,0,3594,345,1,0,0,0,3595,
        3597,5,62,0,0,3596,3598,5,192,0,0,3597,3596,1,0,0,0,3597,3598,1,
        0,0,0,3598,3599,1,0,0,0,3599,3600,7,38,0,0,3600,347,1,0,0,0,3601,
        3602,5,102,0,0,3602,3603,5,2,0,0,3603,3604,3,898,449,0,3604,3605,
        5,3,0,0,3605,349,1,0,0,0,3606,3607,5,211,0,0,3607,3611,3,1054,527,
        0,3608,3609,5,296,0,0,3609,3611,3,1044,522,0,3610,3606,1,0,0,0,3610,
        3608,1,0,0,0,3611,351,1,0,0,0,3612,3615,3,354,177,0,3613,3615,1,
        0,0,0,3614,3612,1,0,0,0,3614,3613,1,0,0,0,3615,3620,1,0,0,0,3616,
        3617,5,6,0,0,3617,3619,3,354,177,0,3618,3616,1,0,0,0,3619,3622,1,
        0,0,0,3620,3618,1,0,0,0,3620,3621,1,0,0,0,3621,353,1,0,0,0,3622,
        3620,1,0,0,0,3623,3628,5,571,0,0,3624,3628,5,573,0,0,3625,3628,3,
        1058,529,0,3626,3628,3,1074,537,0,3627,3623,1,0,0,0,3627,3624,1,
        0,0,0,3627,3625,1,0,0,0,3627,3626,1,0,0,0,3628,355,1,0,0,0,3629,
        3631,3,358,179,0,3630,3629,1,0,0,0,3631,3634,1,0,0,0,3632,3630,1,
        0,0,0,3632,3633,1,0,0,0,3633,357,1,0,0,0,3634,3632,1,0,0,0,3635,
        3637,5,77,0,0,3636,3635,1,0,0,0,3636,3637,1,0,0,0,3637,3638,1,0,
        0,0,3638,3646,5,54,0,0,3639,3640,5,69,0,0,3640,3646,7,9,0,0,3641,
        3642,5,77,0,0,3642,3646,5,371,0,0,3643,3644,5,269,0,0,3644,3646,
        5,228,0,0,3645,3636,1,0,0,0,3645,3639,1,0,0,0,3645,3641,1,0,0,0,
        3645,3643,1,0,0,0,3646,359,1,0,0,0,3647,3648,5,46,0,0,3648,3649,
        5,198,0,0,3649,3650,5,357,0,0,3650,3651,3,1068,534,0,3651,3652,5,
        80,0,0,3652,3655,3,1074,537,0,3653,3654,5,102,0,0,3654,3656,3,362,
        181,0,3655,3653,1,0,0,0,3655,3656,1,0,0,0,3656,3657,1,0,0,0,3657,
        3658,5,202,0,0,3658,3659,3,350,175,0,3659,3660,3,800,400,0,3660,
        361,1,0,0,0,3661,3666,3,364,182,0,3662,3663,5,33,0,0,3663,3665,3,
        364,182,0,3664,3662,1,0,0,0,3665,3668,1,0,0,0,3666,3664,1,0,0,0,
        3666,3667,1,0,0,0,3667,363,1,0,0,0,3668,3666,1,0,0,0,3669,3670,3,
        1068,534,0,3670,3671,5,68,0,0,3671,3672,5,2,0,0,3672,3673,3,384,
        192,0,3673,3674,5,3,0,0,3674,365,1,0,0,0,3675,3676,5,138,0,0,3676,
        3677,5,198,0,0,3677,3678,5,357,0,0,3678,3679,3,1068,534,0,3679,3680,
        3,368,184,0,3680,367,1,0,0,0,3681,3683,5,193,0,0,3682,3684,7,14,
        0,0,3683,3682,1,0,0,0,3683,3684,1,0,0,0,3684,3687,1,0,0,0,3685,3687,
        5,186,0,0,3686,3681,1,0,0,0,3686,3685,1,0,0,0,3687,369,1,0,0,0,3688,
        3689,5,46,0,0,3689,3690,5,140,0,0,3690,3691,3,422,211,0,3691,3692,
        5,42,0,0,3692,3693,5,2,0,0,3693,3694,3,898,449,0,3694,3695,5,3,0,
        0,3695,3696,3,356,178,0,3696,371,1,0,0,0,3697,3699,5,46,0,0,3698,
        3700,3,492,246,0,3699,3698,1,0,0,0,3699,3700,1,0,0,0,3700,3701,1,
        0,0,0,3701,3702,5,136,0,0,3702,3717,3,1054,527,0,3703,3704,3,522,
        261,0,3704,3705,3,374,187,0,3705,3718,1,0,0,0,3706,3707,5,2,0,0,
        3707,3712,3,382,191,0,3708,3709,5,6,0,0,3709,3711,3,382,191,0,3710,
        3708,1,0,0,0,3711,3714,1,0,0,0,3712,3710,1,0,0,0,3712,3713,1,0,0,
        0,3713,3715,1,0,0,0,3714,3712,1,0,0,0,3715,3716,5,3,0,0,3716,3718,
        1,0,0,0,3717,3703,1,0,0,0,3717,3706,1,0,0,0,3718,3770,1,0,0,0,3719,
        3720,5,46,0,0,3720,3721,5,278,0,0,3721,3722,3,554,277,0,3722,3723,
        3,374,187,0,3723,3770,1,0,0,0,3724,3725,5,46,0,0,3725,3726,5,360,
        0,0,3726,3727,3,422,211,0,3727,3739,5,36,0,0,3728,3730,5,2,0,0,3729,
        3731,3,852,426,0,3730,3729,1,0,0,0,3730,3731,1,0,0,0,3731,3732,1,
        0,0,0,3732,3740,5,3,0,0,3733,3734,5,196,0,0,3734,3736,5,2,0,0,3735,
        3737,3,384,192,0,3736,3735,1,0,0,0,3736,3737,1,0,0,0,3737,3738,1,
        0,0,0,3738,3740,5,3,0,0,3739,3728,1,0,0,0,3739,3733,1,0,0,0,3740,
        3770,1,0,0,0,3741,3742,5,46,0,0,3742,3743,5,360,0,0,3743,3749,3,
        422,211,0,3744,3745,5,36,0,0,3745,3747,5,299,0,0,3746,3744,1,0,0,
        0,3746,3747,1,0,0,0,3747,3748,1,0,0,0,3748,3750,3,374,187,0,3749,
        3746,1,0,0,0,3749,3750,1,0,0,0,3750,3770,1,0,0,0,3751,3752,5,46,
        0,0,3752,3753,5,355,0,0,3753,3754,5,325,0,0,3754,3755,7,41,0,0,3755,
        3756,3,422,211,0,3756,3757,3,374,187,0,3757,3770,1,0,0,0,3758,3759,
        5,46,0,0,3759,3761,5,108,0,0,3760,3762,3,388,194,0,3761,3760,1,0,
        0,0,3761,3762,1,0,0,0,3762,3763,1,0,0,0,3763,3767,3,422,211,0,3764,
        3768,3,374,187,0,3765,3766,5,64,0,0,3766,3768,3,422,211,0,3767,3764,
        1,0,0,0,3767,3765,1,0,0,0,3768,3770,1,0,0,0,3769,3697,1,0,0,0,3769,
        3719,1,0,0,0,3769,3724,1,0,0,0,3769,3741,1,0,0,0,3769,3751,1,0,0,
        0,3769,3758,1,0,0,0,3770,373,1,0,0,0,3771,3772,5,2,0,0,3772,3773,
        3,376,188,0,3773,3774,5,3,0,0,3774,375,1,0,0,0,3775,3780,3,378,189,
        0,3776,3777,5,6,0,0,3777,3779,3,378,189,0,3778,3776,1,0,0,0,3779,
        3782,1,0,0,0,3780,3778,1,0,0,0,3780,3781,1,0,0,0,3781,377,1,0,0,
        0,3782,3780,1,0,0,0,3783,3786,3,1074,537,0,3784,3785,5,10,0,0,3785,
        3787,3,380,190,0,3786,3784,1,0,0,0,3786,3787,1,0,0,0,3787,379,1,
        0,0,0,3788,3795,3,518,259,0,3789,3795,3,1084,542,0,3790,3795,3,960,
        480,0,3791,3795,3,256,128,0,3792,3795,3,1058,529,0,3793,3795,5,407,
        0,0,3794,3788,1,0,0,0,3794,3789,1,0,0,0,3794,3790,1,0,0,0,3794,3791,
        1,0,0,0,3794,3792,1,0,0,0,3794,3793,1,0,0,0,3795,381,1,0,0,0,3796,
        3797,3,1076,538,0,3797,3798,5,10,0,0,3798,3799,3,380,190,0,3799,
        383,1,0,0,0,3800,3804,3,1058,529,0,3801,3803,3,624,312,0,3802,3801,
        1,0,0,0,3803,3806,1,0,0,0,3804,3802,1,0,0,0,3804,3805,1,0,0,0,3805,
        385,1,0,0,0,3806,3804,1,0,0,0,3807,3808,5,138,0,0,3808,3809,5,360,
        0,0,3809,3810,3,422,211,0,3810,3811,5,133,0,0,3811,3813,5,450,0,
        0,3812,3814,3,388,194,0,3813,3812,1,0,0,0,3813,3814,1,0,0,0,3814,
        3815,1,0,0,0,3815,3818,3,1058,529,0,3816,3817,7,42,0,0,3817,3819,
        3,1058,529,0,3818,3816,1,0,0,0,3818,3819,1,0,0,0,3819,3830,1,0,0,
        0,3820,3821,5,138,0,0,3821,3822,5,360,0,0,3822,3823,3,422,211,0,
        3823,3824,5,309,0,0,3824,3825,5,450,0,0,3825,3826,3,1058,529,0,3826,
        3827,5,94,0,0,3827,3828,3,1058,529,0,3828,3830,1,0,0,0,3829,3807,
        1,0,0,0,3829,3820,1,0,0,0,3830,387,1,0,0,0,3831,3832,5,220,0,0,3832,
        3833,5,77,0,0,3833,3834,5,396,0,0,3834,389,1,0,0,0,3835,3836,5,46,
        0,0,3836,3837,5,278,0,0,3837,3838,5,156,0,0,3838,3840,3,422,211,
        0,3839,3841,5,53,0,0,3840,3839,1,0,0,0,3840,3841,1,0,0,0,3841,3842,
        1,0,0,0,3842,3843,5,62,0,0,3843,3844,5,360,0,0,3844,3845,3,870,435,
        0,3845,3847,3,216,108,0,3846,3848,3,396,198,0,3847,3846,1,0,0,0,
        3847,3848,1,0,0,0,3848,3849,1,0,0,0,3849,3850,5,36,0,0,3850,3851,
        3,392,196,0,3851,391,1,0,0,0,3852,3857,3,394,197,0,3853,3854,5,6,
        0,0,3854,3856,3,394,197,0,3855,3853,1,0,0,0,3856,3859,1,0,0,0,3857,
        3855,1,0,0,0,3857,3858,1,0,0,0,3858,393,1,0,0,0,3859,3857,1,0,0,
        0,3860,3861,5,278,0,0,3861,3862,5,571,0,0,3862,3864,3,554,277,0,
        3863,3865,3,552,276,0,3864,3863,1,0,0,0,3864,3865,1,0,0,0,3865,3867,
        1,0,0,0,3866,3868,3,398,199,0,3867,3866,1,0,0,0,3867,3868,1,0,0,
        0,3868,3870,1,0,0,0,3869,3871,5,302,0,0,3870,3869,1,0,0,0,3870,3871,
        1,0,0,0,3871,3881,1,0,0,0,3872,3873,5,211,0,0,3873,3875,5,571,0,
        0,3874,3876,3,708,354,0,3875,3874,1,0,0,0,3875,3876,1,0,0,0,3876,
        3877,1,0,0,0,3877,3881,3,508,254,0,3878,3879,5,345,0,0,3879,3881,
        3,870,435,0,3880,3860,1,0,0,0,3880,3872,1,0,0,0,3880,3878,1,0,0,
        0,3881,395,1,0,0,0,3882,3883,5,206,0,0,3883,3884,3,422,211,0,3884,
        397,1,0,0,0,3885,3886,5,62,0,0,3886,3892,5,325,0,0,3887,3888,5,62,
        0,0,3888,3889,5,83,0,0,3889,3890,5,147,0,0,3890,3892,3,422,211,0,
        3891,3885,1,0,0,0,3891,3887,1,0,0,0,3892,399,1,0,0,0,3893,3894,5,
        46,0,0,3894,3895,5,278,0,0,3895,3896,3,396,198,0,3896,3897,3,216,
        108,0,3897,401,1,0,0,0,3898,3899,5,138,0,0,3899,3900,5,278,0,0,3900,
        3901,3,396,198,0,3901,3913,3,216,108,0,3902,3903,5,133,0,0,3903,
        3914,3,392,196,0,3904,3905,5,191,0,0,3905,3910,3,404,202,0,3906,
        3907,5,6,0,0,3907,3909,3,404,202,0,3908,3906,1,0,0,0,3909,3912,1,
        0,0,0,3910,3908,1,0,0,0,3910,3911,1,0,0,0,3911,3914,1,0,0,0,3912,
        3910,1,0,0,0,3913,3902,1,0,0,0,3913,3904,1,0,0,0,3914,403,1,0,0,
        0,3915,3916,7,43,0,0,3916,3917,5,571,0,0,3917,3918,3,708,354,0,3918,
        405,1,0,0,0,3919,3920,5,301,0,0,3920,3921,5,281,0,0,3921,3922,5,
        147,0,0,3922,3923,3,1066,533,0,3923,3924,5,94,0,0,3924,3925,3,1064,
        532,0,3925,407,1,0,0,0,3926,3949,5,191,0,0,3927,3950,5,328,0,0,3928,
        3950,5,226,0,0,3929,3950,5,108,0,0,3930,3950,5,168,0,0,3931,3950,
        5,342,0,0,3932,3950,5,452,0,0,3933,3950,5,331,0,0,3934,3935,5,131,
        0,0,3935,3950,5,446,0,0,3936,3937,5,198,0,0,3937,3950,5,357,0,0,
        3938,3950,5,204,0,0,3939,3941,5,295,0,0,3940,3939,1,0,0,0,3940,3941,
        1,0,0,0,3941,3942,1,0,0,0,3942,3950,5,247,0,0,3943,3944,5,63,0,0,
        3944,3945,5,174,0,0,3945,3950,5,381,0,0,3946,3947,5,355,0,0,3947,
        3948,5,325,0,0,3948,3950,7,41,0,0,3949,3927,1,0,0,0,3949,3928,1,
        0,0,0,3949,3929,1,0,0,0,3949,3930,1,0,0,0,3949,3931,1,0,0,0,3949,
        3932,1,0,0,0,3949,3933,1,0,0,0,3949,3934,1,0,0,0,3949,3936,1,0,0,
        0,3949,3938,1,0,0,0,3949,3940,1,0,0,0,3949,3943,1,0,0,0,3949,3946,
        1,0,0,0,3950,3952,1,0,0,0,3951,3953,3,568,284,0,3952,3951,1,0,0,
        0,3952,3953,1,0,0,0,3953,3954,1,0,0,0,3954,3956,3,1032,516,0,3955,
        3957,3,100,50,0,3956,3955,1,0,0,0,3956,3957,1,0,0,0,3957,4109,1,
        0,0,0,3958,3960,5,191,0,0,3959,3961,5,259,0,0,3960,3959,1,0,0,0,
        3960,3961,1,0,0,0,3961,3962,1,0,0,0,3962,3964,5,376,0,0,3963,3965,
        3,568,284,0,3964,3963,1,0,0,0,3964,3965,1,0,0,0,3965,3966,1,0,0,
        0,3966,3968,3,410,205,0,3967,3969,3,100,50,0,3968,3967,1,0,0,0,3968,
        3969,1,0,0,0,3969,4109,1,0,0,0,3970,3972,5,191,0,0,3971,3973,5,63,
        0,0,3972,3971,1,0,0,0,3972,3973,1,0,0,0,3973,3974,1,0,0,0,3974,3976,
        5,92,0,0,3975,3977,3,568,284,0,3976,3975,1,0,0,0,3976,3977,1,0,0,
        0,3977,3978,1,0,0,0,3978,3980,3,1008,504,0,3979,3981,3,100,50,0,
        3980,3979,1,0,0,0,3980,3981,1,0,0,0,3981,4109,1,0,0,0,3982,3983,
        5,191,0,0,3983,3985,5,323,0,0,3984,3986,3,568,284,0,3985,3984,1,
        0,0,0,3985,3986,1,0,0,0,3986,3987,1,0,0,0,3987,3989,3,1010,505,0,
        3988,3990,3,100,50,0,3989,3988,1,0,0,0,3989,3990,1,0,0,0,3990,4109,
        1,0,0,0,3991,3992,5,191,0,0,3992,3994,7,44,0,0,3993,3995,3,568,284,
        0,3994,3993,1,0,0,0,3994,3995,1,0,0,0,3995,3996,1,0,0,0,3996,3997,
        3,1068,534,0,3997,3998,5,80,0,0,3998,4000,3,422,211,0,3999,4001,
        3,100,50,0,4000,3999,1,0,0,0,4000,4001,1,0,0,0,4001,4109,1,0,0,0,
        4002,4003,5,191,0,0,4003,4005,7,32,0,0,4004,4006,3,568,284,0,4005,
        4004,1,0,0,0,4005,4006,1,0,0,0,4006,4007,1,0,0,0,4007,4009,3,426,
        213,0,4008,4010,3,100,50,0,4009,4008,1,0,0,0,4009,4010,1,0,0,0,4010,
        4109,1,0,0,0,4011,4012,5,191,0,0,4012,4013,5,226,0,0,4013,4015,5,
        109,0,0,4014,4016,3,568,284,0,4015,4014,1,0,0,0,4015,4016,1,0,0,
        0,4016,4017,1,0,0,0,4017,4019,3,418,209,0,4018,4020,3,100,50,0,4019,
        4018,1,0,0,0,4019,4020,1,0,0,0,4020,4109,1,0,0,0,4021,4022,5,191,
        0,0,4022,4024,5,41,0,0,4023,4025,3,568,284,0,4024,4023,1,0,0,0,4024,
        4025,1,0,0,0,4025,4026,1,0,0,0,4026,4027,5,2,0,0,4027,4028,3,870,
        435,0,4028,4029,5,36,0,0,4029,4030,3,870,435,0,4030,4032,5,3,0,0,
        4031,4033,3,100,50,0,4032,4031,1,0,0,0,4032,4033,1,0,0,0,4033,4109,
        1,0,0,0,4034,4035,5,191,0,0,4035,4036,5,278,0,0,4036,4038,7,31,0,
        0,4037,4039,3,568,284,0,4038,4037,1,0,0,0,4038,4039,1,0,0,0,4039,
        4040,1,0,0,0,4040,4041,3,422,211,0,4041,4043,3,216,108,0,4042,4044,
        3,100,50,0,4043,4042,1,0,0,0,4043,4044,1,0,0,0,4044,4109,1,0,0,0,
        4045,4046,5,191,0,0,4046,4047,5,281,0,0,4047,4048,5,147,0,0,4048,
        4050,3,1066,533,0,4049,4051,3,100,50,0,4050,4049,1,0,0,0,4050,4051,
        1,0,0,0,4051,4109,1,0,0,0,4052,4053,5,191,0,0,4053,4055,5,451,0,
        0,4054,4056,3,568,284,0,4055,4054,1,0,0,0,4055,4056,1,0,0,0,4056,
        4057,1,0,0,0,4057,4059,3,1068,534,0,4058,4060,3,100,50,0,4059,4058,
        1,0,0,0,4059,4060,1,0,0,0,4060,4109,1,0,0,0,4061,4062,5,191,0,0,
        4062,4064,5,351,0,0,4063,4065,3,568,284,0,4064,4063,1,0,0,0,4064,
        4065,1,0,0,0,4065,4066,1,0,0,0,4066,4109,3,1018,509,0,4067,4068,
        5,191,0,0,4068,4070,5,443,0,0,4069,4071,3,568,284,0,4070,4069,1,
        0,0,0,4070,4071,1,0,0,0,4071,4072,1,0,0,0,4072,4073,5,62,0,0,4073,
        4074,3,870,435,0,4074,4075,5,247,0,0,4075,4077,3,1068,534,0,4076,
        4078,3,100,50,0,4077,4076,1,0,0,0,4077,4078,1,0,0,0,4078,4109,1,
        0,0,0,4079,4080,5,191,0,0,4080,4082,7,45,0,0,4081,4083,3,568,284,
        0,4082,4081,1,0,0,0,4082,4083,1,0,0,0,4083,4084,1,0,0,0,4084,4109,
        3,1066,533,0,4085,4086,5,191,0,0,4086,4087,5,99,0,0,4087,4089,5,
        257,0,0,4088,4090,3,568,284,0,4089,4088,1,0,0,0,4089,4090,1,0,0,
        0,4090,4091,1,0,0,0,4091,4092,5,62,0,0,4092,4093,3,306,153,0,4093,
        4094,5,331,0,0,4094,4095,3,1068,534,0,4095,4109,1,0,0,0,4096,4097,
        5,191,0,0,4097,4099,5,175,0,0,4098,4100,3,568,284,0,4099,4098,1,
        0,0,0,4099,4100,1,0,0,0,4100,4101,1,0,0,0,4101,4106,3,1036,518,0,
        4102,4104,5,105,0,0,4103,4102,1,0,0,0,4103,4104,1,0,0,0,4104,4105,
        1,0,0,0,4105,4107,3,656,328,0,4106,4103,1,0,0,0,4106,4107,1,0,0,
        0,4107,4109,1,0,0,0,4108,3926,1,0,0,0,4108,3958,1,0,0,0,4108,3970,
        1,0,0,0,4108,3982,1,0,0,0,4108,3991,1,0,0,0,4108,4002,1,0,0,0,4108,
        4011,1,0,0,0,4108,4021,1,0,0,0,4108,4034,1,0,0,0,4108,4045,1,0,0,
        0,4108,4052,1,0,0,0,4108,4061,1,0,0,0,4108,4067,1,0,0,0,4108,4079,
        1,0,0,0,4108,4085,1,0,0,0,4108,4096,1,0,0,0,4109,409,1,0,0,0,4110,
        4115,3,1026,513,0,4111,4112,5,6,0,0,4112,4114,3,1026,513,0,4113,
        4111,1,0,0,0,4114,4117,1,0,0,0,4115,4113,1,0,0,0,4115,4116,1,0,0,
        0,4116,411,1,0,0,0,4117,4115,1,0,0,0,4118,4120,5,63,0,0,4119,4118,
        1,0,0,0,4119,4120,1,0,0,0,4120,4121,1,0,0,0,4121,4122,5,92,0,0,4122,
        4135,3,1022,511,0,4123,4125,5,259,0,0,4124,4123,1,0,0,0,4124,4125,
        1,0,0,0,4125,4126,1,0,0,0,4126,4127,5,376,0,0,4127,4135,3,1026,513,
        0,4128,4129,7,46,0,0,4129,4135,3,422,211,0,4130,4131,5,355,0,0,4131,
        4132,5,325,0,0,4132,4133,7,41,0,0,4133,4135,3,422,211,0,4134,4119,
        1,0,0,0,4134,4124,1,0,0,0,4134,4128,1,0,0,0,4134,4130,1,0,0,0,4135,
        413,1,0,0,0,4136,4137,5,198,0,0,4137,4153,5,357,0,0,4138,4139,5,
        131,0,0,4139,4153,5,446,0,0,4140,4153,5,204,0,0,4141,4153,5,452,
        0,0,4142,4153,5,331,0,0,4143,4153,5,318,0,0,4144,4153,5,451,0,0,
        4145,4146,5,63,0,0,4146,4147,5,174,0,0,4147,4153,5,381,0,0,4148,
        4150,5,295,0,0,4149,4148,1,0,0,0,4149,4150,1,0,0,0,4150,4151,1,0,
        0,0,4151,4153,5,247,0,0,4152,4136,1,0,0,0,4152,4138,1,0,0,0,4152,
        4140,1,0,0,0,4152,4141,1,0,0,0,4152,4142,1,0,0,0,4152,4143,1,0,0,
        0,4152,4144,1,0,0,0,4152,4145,1,0,0,0,4152,4149,1,0,0,0,4153,4154,
        1,0,0,0,4154,4161,3,1068,534,0,4155,4156,5,323,0,0,4156,4161,3,1038,
        519,0,4157,4158,5,175,0,0,4158,4161,3,1036,518,0,4159,4161,3,222,
        111,0,4160,4152,1,0,0,0,4160,4155,1,0,0,0,4160,4157,1,0,0,0,4160,
        4159,1,0,0,0,4161,415,1,0,0,0,4162,4163,7,44,0,0,4163,417,1,0,0,
        0,4164,4169,3,422,211,0,4165,4166,5,6,0,0,4166,4168,3,422,211,0,
        4167,4165,1,0,0,0,4168,4171,1,0,0,0,4169,4167,1,0,0,0,4169,4170,
        1,0,0,0,4170,419,1,0,0,0,4171,4169,1,0,0,0,4172,4174,3,1068,534,
        0,4173,4175,3,424,212,0,4174,4173,1,0,0,0,4174,4175,1,0,0,0,4175,
        4176,1,0,0,0,4176,4177,5,11,0,0,4177,4178,3,1048,524,0,4178,421,
        1,0,0,0,4179,4181,3,1068,534,0,4180,4182,3,424,212,0,4181,4180,1,
        0,0,0,4181,4182,1,0,0,0,4182,423,1,0,0,0,4183,4184,5,11,0,0,4184,
        4186,3,1074,537,0,4185,4183,1,0,0,0,4186,4187,1,0,0,0,4187,4185,
        1,0,0,0,4187,4188,1,0,0,0,4188,425,1,0,0,0,4189,4194,3,870,435,0,
        4190,4191,5,6,0,0,4191,4193,3,870,435,0,4192,4190,1,0,0,0,4193,4196,
        1,0,0,0,4194,4192,1,0,0,0,4194,4195,1,0,0,0,4195,427,1,0,0,0,4196,
        4194,1,0,0,0,4197,4199,5,358,0,0,4198,4200,5,92,0,0,4199,4198,1,
        0,0,0,4199,4200,1,0,0,0,4200,4201,1,0,0,0,4201,4206,3,430,215,0,
        4202,4203,5,6,0,0,4203,4205,3,430,215,0,4204,4202,1,0,0,0,4205,4208,
        1,0,0,0,4206,4204,1,0,0,0,4206,4207,1,0,0,0,4207,4211,1,0,0,0,4208,
        4206,1,0,0,0,4209,4210,7,47,0,0,4210,4212,5,219,0,0,4211,4209,1,
        0,0,0,4211,4212,1,0,0,0,4212,4214,1,0,0,0,4213,4215,3,100,50,0,4214,
        4213,1,0,0,0,4214,4215,1,0,0,0,4215,429,1,0,0,0,4216,4218,5,81,0,
        0,4217,4216,1,0,0,0,4217,4218,1,0,0,0,4218,4219,1,0,0,0,4219,4221,
        3,1022,511,0,4220,4222,5,9,0,0,4221,4220,1,0,0,0,4221,4222,1,0,0,
        0,4222,431,1,0,0,0,4223,4224,5,159,0,0,4224,4277,5,80,0,0,4225,4278,
        3,412,206,0,4226,4278,3,414,207,0,4227,4228,5,44,0,0,4228,4278,3,
        420,210,0,4229,4230,7,32,0,0,4230,4278,3,870,435,0,4231,4232,5,136,
        0,0,4232,4278,3,524,262,0,4233,4234,5,211,0,0,4234,4278,3,508,254,
        0,4235,4236,5,278,0,0,4236,4278,3,558,279,0,4237,4238,5,45,0,0,4238,
        4239,3,1068,534,0,4239,4245,5,80,0,0,4240,4246,3,1022,511,0,4241,
        4243,5,189,0,0,4242,4241,1,0,0,0,4242,4243,1,0,0,0,4243,4244,1,0,
        0,0,4244,4246,3,422,211,0,4245,4240,1,0,0,0,4245,4242,1,0,0,0,4246,
        4278,1,0,0,0,4247,4248,7,44,0,0,4248,4249,3,1068,534,0,4249,4250,
        5,80,0,0,4250,4251,3,422,211,0,4251,4278,1,0,0,0,4252,4253,5,296,
        0,0,4253,4278,3,504,252,0,4254,4255,5,442,0,0,4255,4278,3,500,250,
        0,4256,4257,5,443,0,0,4257,4258,5,62,0,0,4258,4259,3,870,435,0,4259,
        4260,5,247,0,0,4260,4261,3,1068,534,0,4261,4278,1,0,0,0,4262,4263,
        5,278,0,0,4263,4264,7,31,0,0,4264,4265,3,422,211,0,4265,4266,3,216,
        108,0,4266,4278,1,0,0,0,4267,4268,5,248,0,0,4268,4269,5,274,0,0,
        4269,4278,3,256,128,0,4270,4271,5,41,0,0,4271,4272,5,2,0,0,4272,
        4273,3,870,435,0,4273,4274,5,36,0,0,4274,4275,3,870,435,0,4275,4276,
        5,3,0,0,4276,4278,1,0,0,0,4277,4225,1,0,0,0,4277,4226,1,0,0,0,4277,
        4227,1,0,0,0,4277,4229,1,0,0,0,4277,4231,1,0,0,0,4277,4233,1,0,0,
        0,4277,4235,1,0,0,0,4277,4237,1,0,0,0,4277,4247,1,0,0,0,4277,4252,
        1,0,0,0,4277,4254,1,0,0,0,4277,4256,1,0,0,0,4277,4262,1,0,0,0,4277,
        4267,1,0,0,0,4277,4270,1,0,0,0,4278,4279,1,0,0,0,4279,4282,5,116,
        0,0,4280,4283,3,1058,529,0,4281,4283,5,78,0,0,4282,4280,1,0,0,0,
        4282,4281,1,0,0,0,4283,433,1,0,0,0,4284,4285,5,327,0,0,4285,4288,
        5,246,0,0,4286,4287,5,62,0,0,4287,4289,3,62,31,0,4288,4286,1,0,0,
        0,4288,4289,1,0,0,0,4289,4290,1,0,0,0,4290,4308,5,80,0,0,4291,4292,
        7,32,0,0,4292,4309,3,870,435,0,4293,4294,5,136,0,0,4294,4309,3,524,
        262,0,4295,4296,5,44,0,0,4296,4309,3,1048,524,0,4297,4298,5,211,
        0,0,4298,4309,3,508,254,0,4299,4300,5,248,0,0,4300,4301,5,274,0,
        0,4301,4309,3,256,128,0,4302,4303,5,296,0,0,4303,4309,3,504,252,
        0,4304,4305,5,442,0,0,4305,4309,3,500,250,0,4306,4309,3,412,206,
        0,4307,4309,3,414,207,0,4308,4291,1,0,0,0,4308,4293,1,0,0,0,4308,
        4295,1,0,0,0,4308,4297,1,0,0,0,4308,4299,1,0,0,0,4308,4302,1,0,0,
        0,4308,4304,1,0,0,0,4308,4306,1,0,0,0,4308,4307,1,0,0,0,4309,4310,
        1,0,0,0,4310,4313,5,116,0,0,4311,4314,3,1058,529,0,4312,4314,5,78,
        0,0,4313,4311,1,0,0,0,4313,4312,1,0,0,0,4314,435,1,0,0,0,4315,4316,
        7,48,0,0,4316,4317,3,438,219,0,4317,437,1,0,0,0,4318,4320,7,49,0,
        0,4319,4318,1,0,0,0,4319,4320,1,0,0,0,4320,4322,1,0,0,0,4321,4323,
        3,440,220,0,4322,4321,1,0,0,0,4322,4323,1,0,0,0,4323,4324,1,0,0,
        0,4324,4362,3,1068,534,0,4325,4327,7,50,0,0,4326,4325,1,0,0,0,4326,
        4327,1,0,0,0,4327,4328,1,0,0,0,4328,4330,3,1062,531,0,4329,4331,
        3,440,220,0,4330,4329,1,0,0,0,4330,4331,1,0,0,0,4331,4332,1,0,0,
        0,4332,4333,3,1068,534,0,4333,4362,1,0,0,0,4334,4336,5,210,0,0,4335,
        4337,3,1062,531,0,4336,4335,1,0,0,0,4336,4337,1,0,0,0,4337,4339,
        1,0,0,0,4338,4340,3,440,220,0,4339,4338,1,0,0,0,4339,4340,1,0,0,
        0,4340,4341,1,0,0,0,4341,4362,3,1068,534,0,4342,4344,5,210,0,0,4343,
        4342,1,0,0,0,4343,4344,1,0,0,0,4344,4345,1,0,0,0,4345,4347,5,30,
        0,0,4346,4348,3,440,220,0,4347,4346,1,0,0,0,4347,4348,1,0,0,0,4348,
        4349,1,0,0,0,4349,4362,3,1068,534,0,4350,4355,5,144,0,0,4351,4353,
        5,30,0,0,4352,4351,1,0,0,0,4352,4353,1,0,0,0,4353,4356,1,0,0,0,4354,
        4356,3,1062,531,0,4355,4352,1,0,0,0,4355,4354,1,0,0,0,4356,4358,
        1,0,0,0,4357,4359,3,440,220,0,4358,4357,1,0,0,0,4358,4359,1,0,0,
        0,4359,4360,1,0,0,0,4360,4362,3,1068,534,0,4361,4319,1,0,0,0,4361,
        4326,1,0,0,0,4361,4334,1,0,0,0,4361,4343,1,0,0,0,4361,4350,1,0,0,
        0,4362,439,1,0,0,0,4363,4364,7,51,0,0,4364,441,1,0,0,0,4365,4366,
        5,65,0,0,4366,4367,3,446,223,0,4367,4368,5,80,0,0,4368,4369,3,454,
        227,0,4369,4370,5,94,0,0,4370,4372,3,456,228,0,4371,4373,3,460,230,
        0,4372,4371,1,0,0,0,4372,4373,1,0,0,0,4373,443,1,0,0,0,4374,4378,
        5,317,0,0,4375,4376,5,65,0,0,4376,4377,5,279,0,0,4377,4379,5,62,
        0,0,4378,4375,1,0,0,0,4378,4379,1,0,0,0,4379,4380,1,0,0,0,4380,4381,
        3,446,223,0,4381,4382,5,80,0,0,4382,4383,3,454,227,0,4383,4384,5,
        64,0,0,4384,4386,3,456,228,0,4385,4387,3,100,50,0,4386,4385,1,0,
        0,0,4386,4387,1,0,0,0,4387,445,1,0,0,0,4388,4405,3,450,225,0,4389,
        4391,5,30,0,0,4390,4392,5,294,0,0,4391,4390,1,0,0,0,4391,4392,1,
        0,0,0,4392,4394,1,0,0,0,4393,4395,3,184,92,0,4394,4393,1,0,0,0,4394,
        4395,1,0,0,0,4395,4405,1,0,0,0,4396,4401,3,448,224,0,4397,4398,5,
        6,0,0,4398,4400,3,448,224,0,4399,4397,1,0,0,0,4400,4403,1,0,0,0,
        4401,4399,1,0,0,0,4401,4402,1,0,0,0,4402,4405,1,0,0,0,4403,4401,
        1,0,0,0,4404,4388,1,0,0,0,4404,4389,1,0,0,0,4404,4396,1,0,0,0,4405,
        447,1,0,0,0,4406,4407,7,52,0,0,4407,449,1,0,0,0,4408,4413,3,452,
        226,0,4409,4410,5,6,0,0,4410,4412,3,452,226,0,4411,4409,1,0,0,0,
        4412,4415,1,0,0,0,4413,4411,1,0,0,0,4413,4414,1,0,0,0,4414,451,1,
        0,0,0,4415,4413,1,0,0,0,4416,4421,5,88,0,0,4417,4421,5,86,0,0,4418,
        4421,5,46,0,0,4419,4421,3,1068,534,0,4420,4416,1,0,0,0,4420,4417,
        1,0,0,0,4420,4418,1,0,0,0,4420,4419,1,0,0,0,4421,4423,1,0,0,0,4422,
        4424,3,184,92,0,4423,4422,1,0,0,0,4423,4424,1,0,0,0,4424,453,1,0,
        0,0,4425,4426,5,92,0,0,4426,4464,3,1008,504,0,4427,4429,5,328,0,
        0,4428,4427,1,0,0,0,4428,4429,1,0,0,0,4429,4430,1,0,0,0,4430,4464,
        3,1006,503,0,4431,4435,5,63,0,0,4432,4433,5,174,0,0,4433,4436,5,
        381,0,0,4434,4436,5,331,0,0,4435,4432,1,0,0,0,4435,4434,1,0,0,0,
        4436,4439,1,0,0,0,4437,4439,5,247,0,0,4438,4431,1,0,0,0,4438,4437,
        1,0,0,0,4439,4440,1,0,0,0,4440,4464,3,1032,516,0,4441,4442,5,211,
        0,0,4442,4464,3,506,253,0,4443,4444,5,296,0,0,4444,4464,3,502,251,
        0,4445,4446,5,442,0,0,4446,4464,3,498,249,0,4447,4448,5,175,0,0,
        4448,4464,3,1012,506,0,4449,4450,7,32,0,0,4450,4464,3,418,209,0,
        4451,4452,5,248,0,0,4452,4453,5,274,0,0,4453,4464,3,258,129,0,4454,
        4455,5,323,0,0,4455,4464,3,1010,505,0,4456,4457,5,351,0,0,4457,4464,
        3,1030,515,0,4458,4459,5,30,0,0,4459,4460,7,53,0,0,4460,4461,5,68,
        0,0,4461,4462,5,323,0,0,4462,4464,3,1010,505,0,4463,4425,1,0,0,0,
        4463,4428,1,0,0,0,4463,4438,1,0,0,0,4463,4441,1,0,0,0,4463,4443,
        1,0,0,0,4463,4445,1,0,0,0,4463,4447,1,0,0,0,4463,4449,1,0,0,0,4463,
        4451,1,0,0,0,4463,4454,1,0,0,0,4463,4456,1,0,0,0,4463,4458,1,0,0,
        0,4464,455,1,0,0,0,4465,4470,3,458,229,0,4466,4467,5,6,0,0,4467,
        4469,3,458,229,0,4468,4466,1,0,0,0,4469,4472,1,0,0,0,4470,4468,1,
        0,0,0,4470,4471,1,0,0,0,4471,457,1,0,0,0,4472,4470,1,0,0,0,4473,
        4475,5,66,0,0,4474,4473,1,0,0,0,4474,4475,1,0,0,0,4475,4476,1,0,
        0,0,4476,4477,3,1064,532,0,4477,459,1,0,0,0,4478,4479,5,105,0,0,
        4479,4480,5,65,0,0,4480,4481,5,279,0,0,4481,461,1,0,0,0,4482,4483,
        5,65,0,0,4483,4484,3,450,225,0,4484,4488,3,324,162,0,4485,4486,5,
        105,0,0,4486,4487,5,134,0,0,4487,4489,5,279,0,0,4488,4485,1,0,0,
        0,4488,4489,1,0,0,0,4489,4491,1,0,0,0,4490,4492,3,466,233,0,4491,
        4490,1,0,0,0,4491,4492,1,0,0,0,4492,463,1,0,0,0,4493,4497,5,317,
        0,0,4494,4495,5,134,0,0,4495,4496,5,279,0,0,4496,4498,5,62,0,0,4497,
        4494,1,0,0,0,4497,4498,1,0,0,0,4498,4499,1,0,0,0,4499,4500,3,450,
        225,0,4500,4501,5,64,0,0,4501,4503,3,1066,533,0,4502,4504,3,466,
        233,0,4503,4502,1,0,0,0,4503,4504,1,0,0,0,4504,4506,1,0,0,0,4505,
        4507,3,100,50,0,4506,4505,1,0,0,0,4506,4507,1,0,0,0,4507,465,1,0,
        0,0,4508,4509,5,214,0,0,4509,4510,5,147,0,0,4510,4511,3,1064,532,
        0,4511,467,1,0,0,0,4512,4513,5,138,0,0,4513,4514,5,53,0,0,4514,4518,
        5,294,0,0,4515,4517,3,470,235,0,4516,4515,1,0,0,0,4517,4520,1,0,
        0,0,4518,4516,1,0,0,0,4518,4519,1,0,0,0,4519,4521,1,0,0,0,4520,4518,
        1,0,0,0,4521,4522,3,472,236,0,4522,469,1,0,0,0,4523,4524,5,68,0,
        0,4524,4525,5,323,0,0,4525,4530,3,1010,505,0,4526,4527,5,62,0,0,
        4527,4528,7,2,0,0,4528,4530,3,1066,533,0,4529,4523,1,0,0,0,4529,
        4526,1,0,0,0,4530,471,1,0,0,0,4531,4532,5,65,0,0,4532,4533,3,446,
        223,0,4533,4534,5,80,0,0,4534,4535,3,474,237,0,4535,4536,5,94,0,
        0,4536,4538,3,456,228,0,4537,4539,3,460,230,0,4538,4537,1,0,0,0,
        4538,4539,1,0,0,0,4539,4555,1,0,0,0,4540,4544,5,317,0,0,4541,4542,
        5,65,0,0,4542,4543,5,279,0,0,4543,4545,5,62,0,0,4544,4541,1,0,0,
        0,4544,4545,1,0,0,0,4545,4546,1,0,0,0,4546,4547,3,446,223,0,4547,
        4548,5,80,0,0,4548,4549,3,474,237,0,4549,4550,5,64,0,0,4550,4552,
        3,456,228,0,4551,4553,3,100,50,0,4552,4551,1,0,0,0,4552,4553,1,0,
        0,0,4553,4555,1,0,0,0,4554,4531,1,0,0,0,4554,4540,1,0,0,0,4555,473,
        1,0,0,0,4556,4557,7,54,0,0,4557,475,1,0,0,0,4558,4560,5,46,0,0,4559,
        4561,5,98,0,0,4560,4559,1,0,0,0,4560,4561,1,0,0,0,4561,4562,1,0,
        0,0,4562,4564,5,226,0,0,4563,4565,5,109,0,0,4564,4563,1,0,0,0,4564,
        4565,1,0,0,0,4565,4567,1,0,0,0,4566,4568,3,388,194,0,4567,4566,1,
        0,0,0,4567,4568,1,0,0,0,4568,4570,1,0,0,0,4569,4571,3,1068,534,0,
        4570,4569,1,0,0,0,4570,4571,1,0,0,0,4571,4572,1,0,0,0,4572,4573,
        5,80,0,0,4573,4575,3,826,413,0,4574,4576,3,216,108,0,4575,4574,1,
        0,0,0,4575,4576,1,0,0,0,4576,4577,1,0,0,0,4577,4579,3,478,239,0,
        4578,4580,3,484,242,0,4579,4578,1,0,0,0,4579,4580,1,0,0,0,4580,4582,
        1,0,0,0,4581,4583,3,168,84,0,4582,4581,1,0,0,0,4582,4583,1,0,0,0,
        4583,4585,1,0,0,0,4584,4586,3,108,54,0,4585,4584,1,0,0,0,4585,4586,
        1,0,0,0,4586,4588,1,0,0,0,4587,4589,3,222,111,0,4588,4587,1,0,0,
        0,4588,4589,1,0,0,0,4589,4591,1,0,0,0,4590,4592,3,848,424,0,4591,
        4590,1,0,0,0,4591,4592,1,0,0,0,4592,477,1,0,0,0,4593,4594,5,2,0,
        0,4594,4599,3,482,241,0,4595,4596,5,6,0,0,4596,4598,3,482,241,0,
        4597,4595,1,0,0,0,4598,4601,1,0,0,0,4599,4597,1,0,0,0,4599,4600,
        1,0,0,0,4600,4602,1,0,0,0,4601,4599,1,0,0,0,4602,4603,5,3,0,0,4603,
        479,1,0,0,0,4604,4606,3,102,51,0,4605,4604,1,0,0,0,4605,4606,1,0,
        0,0,4606,4613,1,0,0,0,4607,4609,3,422,211,0,4608,4607,1,0,0,0,4608,
        4609,1,0,0,0,4609,4614,1,0,0,0,4610,4611,3,422,211,0,4611,4612,3,
        106,53,0,4612,4614,1,0,0,0,4613,4608,1,0,0,0,4613,4610,1,0,0,0,4614,
        4616,1,0,0,0,4615,4617,7,55,0,0,4616,4615,1,0,0,0,4616,4617,1,0,
        0,0,4617,4619,1,0,0,0,4618,4620,3,486,243,0,4619,4618,1,0,0,0,4619,
        4620,1,0,0,0,4620,481,1,0,0,0,4621,4628,3,1048,524,0,4622,4628,3,
        912,456,0,4623,4624,5,2,0,0,4624,4625,3,898,449,0,4625,4626,5,3,
        0,0,4626,4628,1,0,0,0,4627,4621,1,0,0,0,4627,4622,1,0,0,0,4627,4623,
        1,0,0,0,4628,4629,1,0,0,0,4629,4630,3,480,240,0,4630,483,1,0,0,0,
        4631,4632,5,441,0,0,4632,4633,3,478,239,0,4633,485,1,0,0,0,4634,
        4635,5,273,0,0,4635,4636,7,56,0,0,4636,487,1,0,0,0,4637,4639,5,46,
        0,0,4638,4640,3,492,246,0,4639,4638,1,0,0,0,4639,4640,1,0,0,0,4640,
        4645,1,0,0,0,4641,4642,5,211,0,0,4642,4646,3,1052,526,0,4643,4644,
        5,296,0,0,4644,4646,3,1046,523,0,4645,4641,1,0,0,0,4645,4643,1,0,
        0,0,4646,4647,1,0,0,0,4647,4654,3,510,255,0,4648,4652,5,316,0,0,
        4649,4653,3,518,259,0,4650,4651,5,92,0,0,4651,4653,3,540,270,0,4652,
        4649,1,0,0,0,4652,4650,1,0,0,0,4653,4655,1,0,0,0,4654,4648,1,0,0,
        0,4654,4655,1,0,0,0,4655,4656,1,0,0,0,4656,4659,3,528,264,0,4657,
        4658,5,105,0,0,4658,4660,3,490,245,0,4659,4657,1,0,0,0,4659,4660,
        1,0,0,0,4660,489,1,0,0,0,4661,4662,5,2,0,0,4662,4663,3,1032,516,
        0,4663,4664,5,3,0,0,4664,491,1,0,0,0,4665,4666,5,82,0,0,4666,4667,
        5,311,0,0,4667,493,1,0,0,0,4668,4670,5,2,0,0,4669,4671,3,496,248,
        0,4670,4669,1,0,0,0,4670,4671,1,0,0,0,4671,4672,1,0,0,0,4672,4673,
        5,3,0,0,4673,495,1,0,0,0,4674,4679,3,514,257,0,4675,4676,5,6,0,0,
        4676,4678,3,514,257,0,4677,4675,1,0,0,0,4678,4681,1,0,0,0,4679,4677,
        1,0,0,0,4679,4680,1,0,0,0,4680,497,1,0,0,0,4681,4679,1,0,0,0,4682,
        4687,3,500,250,0,4683,4684,5,6,0,0,4684,4686,3,500,250,0,4685,4683,
        1,0,0,0,4686,4689,1,0,0,0,4687,4685,1,0,0,0,4687,4688,1,0,0,0,4688,
        499,1,0,0,0,4689,4687,1,0,0,0,4690,4691,3,1042,521,0,4691,4692,3,
        494,247,0,4692,4696,1,0,0,0,4693,4696,3,1082,541,0,4694,4696,3,1028,
        514,0,4695,4690,1,0,0,0,4695,4693,1,0,0,0,4695,4694,1,0,0,0,4696,
        501,1,0,0,0,4697,4702,3,504,252,0,4698,4699,5,6,0,0,4699,4701,3,
        504,252,0,4700,4698,1,0,0,0,4701,4704,1,0,0,0,4702,4700,1,0,0,0,
        4702,4703,1,0,0,0,4703,503,1,0,0,0,4704,4702,1,0,0,0,4705,4706,3,
        1044,522,0,4706,4707,3,494,247,0,4707,4711,1,0,0,0,4708,4711,3,1082,
        541,0,4709,4711,3,1028,514,0,4710,4705,1,0,0,0,4710,4708,1,0,0,0,
        4710,4709,1,0,0,0,4711,505,1,0,0,0,4712,4717,3,508,254,0,4713,4714,
        5,6,0,0,4714,4716,3,508,254,0,4715,4713,1,0,0,0,4716,4719,1,0,0,
        0,4717,4715,1,0,0,0,4717,4718,1,0,0,0,4718,507,1,0,0,0,4719,4717,
        1,0,0,0,4720,4721,3,1054,527,0,4721,4722,3,494,247,0,4722,4726,1,
        0,0,0,4723,4726,3,1082,541,0,4724,4726,3,1028,514,0,4725,4720,1,
        0,0,0,4725,4723,1,0,0,0,4725,4724,1,0,0,0,4726,509,1,0,0,0,4727,
        4729,5,2,0,0,4728,4730,3,512,256,0,4729,4728,1,0,0,0,4729,4730,1,
        0,0,0,4730,4731,1,0,0,0,4731,4732,5,3,0,0,4732,511,1,0,0,0,4733,
        4738,3,520,260,0,4734,4735,5,6,0,0,4735,4737,3,520,260,0,4736,4734,
        1,0,0,0,4737,4740,1,0,0,0,4738,4736,1,0,0,0,4738,4739,1,0,0,0,4739,
        513,1,0,0,0,4740,4738,1,0,0,0,4741,4743,3,516,258,0,4742,4744,3,
        1070,535,0,4743,4742,1,0,0,0,4743,4744,1,0,0,0,4744,4750,1,0,0,0,
        4745,4747,3,1070,535,0,4746,4748,3,516,258,0,4747,4746,1,0,0,0,4747,
        4748,1,0,0,0,4748,4750,1,0,0,0,4749,4741,1,0,0,0,4749,4745,1,0,0,
        0,4749,4750,1,0,0,0,4750,4751,1,0,0,0,4751,4752,3,518,259,0,4752,
        515,1,0,0,0,4753,4755,5,68,0,0,4754,4756,5,453,0,0,4755,4754,1,0,
        0,0,4755,4756,1,0,0,0,4756,4761,1,0,0,0,4757,4761,5,453,0,0,4758,
        4761,5,400,0,0,4759,4761,5,101,0,0,4760,4753,1,0,0,0,4760,4757,1,
        0,0,0,4760,4758,1,0,0,0,4760,4759,1,0,0,0,4761,517,1,0,0,0,4762,
        4772,3,870,435,0,4763,4765,5,415,0,0,4764,4763,1,0,0,0,4764,4765,
        1,0,0,0,4765,4766,1,0,0,0,4766,4767,3,1070,535,0,4767,4768,3,424,
        212,0,4768,4769,5,27,0,0,4769,4770,5,360,0,0,4770,4772,1,0,0,0,4771,
        4762,1,0,0,0,4771,4764,1,0,0,0,4772,519,1,0,0,0,4773,4776,3,514,
        257,0,4774,4775,7,57,0,0,4775,4777,3,898,449,0,4776,4774,1,0,0,0,
        4776,4777,1,0,0,0,4777,521,1,0,0,0,4778,4788,5,2,0,0,4779,4789,5,
        9,0,0,4780,4782,3,496,248,0,4781,4780,1,0,0,0,4781,4782,1,0,0,0,
        4782,4786,1,0,0,0,4783,4784,5,83,0,0,4784,4785,5,147,0,0,4785,4787,
        3,496,248,0,4786,4783,1,0,0,0,4786,4787,1,0,0,0,4787,4789,1,0,0,
        0,4788,4779,1,0,0,0,4788,4781,1,0,0,0,4789,4790,1,0,0,0,4790,4791,
        5,3,0,0,4791,523,1,0,0,0,4792,4793,3,1054,527,0,4793,4794,3,522,
        261,0,4794,525,1,0,0,0,4795,4800,3,524,262,0,4796,4797,5,6,0,0,4797,
        4799,3,524,262,0,4798,4796,1,0,0,0,4799,4802,1,0,0,0,4800,4798,1,
        0,0,0,4800,4801,1,0,0,0,4801,527,1,0,0,0,4802,4800,1,0,0,0,4803,
        4805,3,532,266,0,4804,4803,1,0,0,0,4805,4806,1,0,0,0,4806,4804,1,
        0,0,0,4806,4807,1,0,0,0,4807,529,1,0,0,0,4808,4809,5,316,0,0,4809,
        4812,5,78,0,0,4810,4812,5,149,0,0,4811,4808,1,0,0,0,4811,4810,1,
        0,0,0,4812,4813,1,0,0,0,4813,4814,5,80,0,0,4814,4815,5,78,0,0,4815,
        4838,5,458,0,0,4816,4838,5,346,0,0,4817,4838,5,222,0,0,4818,4838,
        5,338,0,0,4819,4838,5,377,0,0,4820,4822,5,205,0,0,4821,4820,1,0,
        0,0,4821,4822,1,0,0,0,4822,4823,1,0,0,0,4823,4824,5,327,0,0,4824,
        4838,7,58,0,0,4825,4838,5,250,0,0,4826,4827,5,77,0,0,4827,4838,5,
        250,0,0,4828,4829,7,59,0,0,4829,4838,3,256,128,0,4830,4831,5,459,
        0,0,4831,4838,3,422,211,0,4832,4833,5,333,0,0,4833,4838,3,46,23,
        0,4834,4838,3,64,32,0,4835,4836,5,460,0,0,4836,4838,3,1068,534,0,
        4837,4811,1,0,0,0,4837,4816,1,0,0,0,4837,4817,1,0,0,0,4837,4818,
        1,0,0,0,4837,4819,1,0,0,0,4837,4821,1,0,0,0,4837,4825,1,0,0,0,4837,
        4826,1,0,0,0,4837,4828,1,0,0,0,4837,4830,1,0,0,0,4837,4832,1,0,0,
        0,4837,4834,1,0,0,0,4837,4835,1,0,0,0,4838,531,1,0,0,0,4839,4840,
        5,36,0,0,4840,4841,3,1058,529,0,4841,4842,3,624,312,0,4842,4864,
        1,0,0,0,4843,4844,5,247,0,0,4844,4864,3,62,31,0,4845,4846,5,443,
        0,0,4846,4864,3,534,267,0,4847,4864,5,104,0,0,4848,4849,5,333,0,
        0,4849,4856,3,1068,534,0,4850,4851,5,94,0,0,4851,4857,3,1068,534,
        0,4852,4853,5,10,0,0,4853,4857,3,1068,534,0,4854,4855,5,64,0,0,4855,
        4857,5,434,0,0,4856,4850,1,0,0,0,4856,4852,1,0,0,0,4856,4854,1,0,
        0,0,4857,4864,1,0,0,0,4858,4859,5,36,0,0,4859,4864,3,1068,534,0,
        4860,4864,3,4,2,0,4861,4864,3,530,265,0,4862,4864,3,1068,534,0,4863,
        4839,1,0,0,0,4863,4843,1,0,0,0,4863,4845,1,0,0,0,4863,4847,1,0,0,
        0,4863,4848,1,0,0,0,4863,4858,1,0,0,0,4863,4860,1,0,0,0,4863,4861,
        1,0,0,0,4863,4862,1,0,0,0,4864,533,1,0,0,0,4865,4866,5,62,0,0,4866,
        4867,5,360,0,0,4867,4874,3,870,435,0,4868,4869,5,6,0,0,4869,4870,
        5,62,0,0,4870,4871,5,360,0,0,4871,4873,3,870,435,0,4872,4868,1,0,
        0,0,4873,4876,1,0,0,0,4874,4872,1,0,0,0,4874,4875,1,0,0,0,4875,535,
        1,0,0,0,4876,4874,1,0,0,0,4877,4878,5,105,0,0,4878,4879,3,374,187,
        0,4879,537,1,0,0,0,4880,4881,3,1048,524,0,4881,4882,3,518,259,0,
        4882,539,1,0,0,0,4883,4884,5,2,0,0,4884,4889,3,538,269,0,4885,4886,
        5,6,0,0,4886,4888,3,538,269,0,4887,4885,1,0,0,0,4888,4891,1,0,0,
        0,4889,4887,1,0,0,0,4889,4890,1,0,0,0,4890,4892,1,0,0,0,4891,4889,
        1,0,0,0,4892,4893,5,3,0,0,4893,541,1,0,0,0,4894,4895,5,138,0,0,4895,
        4897,3,544,272,0,4896,4898,3,530,265,0,4897,4896,1,0,0,0,4898,4899,
        1,0,0,0,4899,4897,1,0,0,0,4899,4900,1,0,0,0,4900,4902,1,0,0,0,4901,
        4903,5,315,0,0,4902,4901,1,0,0,0,4902,4903,1,0,0,0,4903,543,1,0,
        0,0,4904,4905,5,211,0,0,4905,4911,3,508,254,0,4906,4907,5,296,0,
        0,4907,4911,3,504,252,0,4908,4909,5,442,0,0,4909,4911,3,500,250,
        0,4910,4904,1,0,0,0,4910,4906,1,0,0,0,4910,4908,1,0,0,0,4911,545,
        1,0,0,0,4912,4928,5,191,0,0,4913,4915,5,211,0,0,4914,4916,3,568,
        284,0,4915,4914,1,0,0,0,4915,4916,1,0,0,0,4916,4917,1,0,0,0,4917,
        4929,3,506,253,0,4918,4920,5,296,0,0,4919,4921,3,568,284,0,4920,
        4919,1,0,0,0,4920,4921,1,0,0,0,4921,4922,1,0,0,0,4922,4929,3,502,
        251,0,4923,4925,5,442,0,0,4924,4926,3,568,284,0,4925,4924,1,0,0,
        0,4925,4926,1,0,0,0,4926,4927,1,0,0,0,4927,4929,3,498,249,0,4928,
        4913,1,0,0,0,4928,4918,1,0,0,0,4928,4923,1,0,0,0,4929,4931,1,0,0,
        0,4930,4932,3,100,50,0,4931,4930,1,0,0,0,4931,4932,1,0,0,0,4932,
        547,1,0,0,0,4933,4934,5,191,0,0,4934,4936,5,136,0,0,4935,4937,3,
        568,284,0,4936,4935,1,0,0,0,4936,4937,1,0,0,0,4937,4938,1,0,0,0,
        4938,4940,3,526,263,0,4939,4941,3,100,50,0,4940,4939,1,0,0,0,4940,
        4941,1,0,0,0,4941,549,1,0,0,0,4942,4943,5,191,0,0,4943,4945,5,278,
        0,0,4944,4946,3,568,284,0,4945,4944,1,0,0,0,4945,4946,1,0,0,0,4946,
        4947,1,0,0,0,4947,4949,3,556,278,0,4948,4950,3,100,50,0,4949,4948,
        1,0,0,0,4949,4950,1,0,0,0,4950,551,1,0,0,0,4951,4964,5,2,0,0,4952,
        4955,3,870,435,0,4953,4954,5,6,0,0,4954,4956,3,870,435,0,4955,4953,
        1,0,0,0,4955,4956,1,0,0,0,4956,4965,1,0,0,0,4957,4958,5,407,0,0,
        4958,4959,5,6,0,0,4959,4965,3,870,435,0,4960,4961,3,870,435,0,4961,
        4962,5,6,0,0,4962,4963,5,407,0,0,4963,4965,1,0,0,0,4964,4952,1,0,
        0,0,4964,4957,1,0,0,0,4964,4960,1,0,0,0,4965,4966,1,0,0,0,4966,4967,
        5,3,0,0,4967,553,1,0,0,0,4968,4969,3,1068,534,0,4969,4970,5,11,0,
        0,4970,4972,1,0,0,0,4971,4968,1,0,0,0,4972,4975,1,0,0,0,4973,4971,
        1,0,0,0,4973,4974,1,0,0,0,4974,4976,1,0,0,0,4975,4973,1,0,0,0,4976,
        4977,3,954,477,0,4977,555,1,0,0,0,4978,4983,3,558,279,0,4979,4980,
        5,6,0,0,4980,4982,3,558,279,0,4981,4979,1,0,0,0,4982,4985,1,0,0,
        0,4983,4981,1,0,0,0,4983,4984,1,0,0,0,4984,557,1,0,0,0,4985,4983,
        1,0,0,0,4986,4987,3,554,277,0,4987,4988,3,552,276,0,4988,559,1,0,
        0,0,4989,4991,5,57,0,0,4990,4992,3,562,281,0,4991,4990,1,0,0,0,4992,
        4993,1,0,0,0,4993,4991,1,0,0,0,4993,4994,1,0,0,0,4994,561,1,0,0,
        0,4995,4999,3,1058,529,0,4996,4997,5,247,0,0,4997,4999,3,62,31,0,
        4998,4995,1,0,0,0,4998,4996,1,0,0,0,4999,563,1,0,0,0,5000,5001,5,
        46,0,0,5001,5002,5,41,0,0,5002,5003,5,2,0,0,5003,5004,3,870,435,
        0,5004,5005,5,36,0,0,5005,5006,3,870,435,0,5006,5021,5,3,0,0,5007,
        5008,5,379,0,0,5008,5010,5,211,0,0,5009,5011,3,566,283,0,5010,5009,
        1,0,0,0,5010,5011,1,0,0,0,5011,5022,1,0,0,0,5012,5016,5,105,0,0,
        5013,5014,5,211,0,0,5014,5017,3,508,254,0,5015,5017,5,400,0,0,5016,
        5013,1,0,0,0,5016,5015,1,0,0,0,5017,5019,1,0,0,0,5018,5020,3,566,
        283,0,5019,5018,1,0,0,0,5019,5020,1,0,0,0,5020,5022,1,0,0,0,5021,
        5007,1,0,0,0,5021,5012,1,0,0,0,5022,565,1,0,0,0,5023,5024,5,36,0,
        0,5024,5025,7,60,0,0,5025,567,1,0,0,0,5026,5027,5,220,0,0,5027,5028,
        5,396,0,0,5028,569,1,0,0,0,5029,5031,5,46,0,0,5030,5032,3,492,246,
        0,5031,5030,1,0,0,0,5031,5032,1,0,0,0,5032,5033,1,0,0,0,5033,5034,
        5,443,0,0,5034,5035,5,62,0,0,5035,5036,3,870,435,0,5036,5037,5,247,
        0,0,5037,5038,3,1068,534,0,5038,5039,5,2,0,0,5039,5040,3,572,286,
        0,5040,5041,5,3,0,0,5041,571,1,0,0,0,5042,5043,5,64,0,0,5043,5047,
        3,574,287,0,5044,5045,5,6,0,0,5045,5046,5,94,0,0,5046,5048,3,574,
        287,0,5047,5044,1,0,0,0,5047,5048,1,0,0,0,5048,5057,1,0,0,0,5049,
        5050,5,94,0,0,5050,5054,3,574,287,0,5051,5052,5,6,0,0,5052,5053,
        5,64,0,0,5053,5055,3,574,287,0,5054,5051,1,0,0,0,5054,5055,1,0,0,
        0,5055,5057,1,0,0,0,5056,5042,1,0,0,0,5056,5049,1,0,0,0,5057,573,
        1,0,0,0,5058,5059,5,461,0,0,5059,5060,5,105,0,0,5060,5061,5,211,
        0,0,5061,5062,3,508,254,0,5062,575,1,0,0,0,5063,5074,5,306,0,0,5064,
        5065,5,2,0,0,5065,5070,5,128,0,0,5066,5067,5,6,0,0,5067,5069,5,128,
        0,0,5068,5066,1,0,0,0,5069,5072,1,0,0,0,5070,5068,1,0,0,0,5070,5071,
        1,0,0,0,5071,5073,1,0,0,0,5072,5070,1,0,0,0,5073,5075,5,3,0,0,5074,
        5064,1,0,0,0,5074,5075,1,0,0,0,5075,5076,1,0,0,0,5076,5077,3,578,
        289,0,5077,577,1,0,0,0,5078,5080,5,226,0,0,5079,5081,5,109,0,0,5080,
        5079,1,0,0,0,5080,5081,1,0,0,0,5081,5082,1,0,0,0,5082,5104,3,1028,
        514,0,5083,5085,5,92,0,0,5084,5086,5,109,0,0,5085,5084,1,0,0,0,5085,
        5086,1,0,0,0,5086,5087,1,0,0,0,5087,5104,3,1022,511,0,5088,5090,
        5,323,0,0,5089,5091,5,109,0,0,5090,5089,1,0,0,0,5090,5091,1,0,0,
        0,5091,5092,1,0,0,0,5092,5104,3,1038,519,0,5093,5095,5,349,0,0,5094,
        5096,5,109,0,0,5095,5094,1,0,0,0,5095,5096,1,0,0,0,5096,5097,1,0,
        0,0,5097,5104,3,1068,534,0,5098,5100,5,175,0,0,5099,5101,5,109,0,
        0,5100,5099,1,0,0,0,5100,5101,1,0,0,0,5101,5102,1,0,0,0,5102,5104,
        3,1036,518,0,5103,5078,1,0,0,0,5103,5083,1,0,0,0,5103,5088,1,0,0,
        0,5103,5093,1,0,0,0,5103,5098,1,0,0,0,5104,579,1,0,0,0,5105,5106,
        5,138,0,0,5106,5107,3,222,111,0,5107,5108,7,16,0,0,5108,5109,3,106,
        53,0,5109,581,1,0,0,0,5110,5115,5,138,0,0,5111,5112,5,136,0,0,5112,
        5116,3,524,262,0,5113,5114,5,442,0,0,5114,5116,3,500,250,0,5115,
        5111,1,0,0,0,5115,5113,1,0,0,0,5116,5117,1,0,0,0,5117,5118,5,309,
        0,0,5118,5119,5,94,0,0,5119,5120,3,1068,534,0,5120,5318,1,0,0,0,
        5121,5122,5,138,0,0,5122,5123,5,175,0,0,5123,5124,3,1036,518,0,5124,
        5125,5,309,0,0,5125,5126,5,94,0,0,5126,5127,3,1034,517,0,5127,5318,
        1,0,0,0,5128,5129,5,138,0,0,5129,5130,7,61,0,0,5130,5131,3,422,211,
        0,5131,5132,5,309,0,0,5132,5133,5,94,0,0,5133,5134,3,1068,534,0,
        5134,5318,1,0,0,0,5135,5136,5,138,0,0,5136,5137,5,211,0,0,5137,5138,
        3,508,254,0,5138,5139,5,309,0,0,5139,5140,5,94,0,0,5140,5141,3,1052,
        526,0,5141,5318,1,0,0,0,5142,5143,5,138,0,0,5143,5144,5,278,0,0,
        5144,5145,7,31,0,0,5145,5146,3,422,211,0,5146,5147,3,216,108,0,5147,
        5148,5,309,0,0,5148,5149,5,94,0,0,5149,5150,3,1068,534,0,5150,5318,
        1,0,0,0,5151,5152,5,138,0,0,5152,5153,5,296,0,0,5153,5154,3,504,
        252,0,5154,5155,5,309,0,0,5155,5156,5,94,0,0,5156,5157,3,1046,523,
        0,5157,5318,1,0,0,0,5158,5159,5,138,0,0,5159,5160,5,323,0,0,5160,
        5161,3,1038,519,0,5161,5162,5,309,0,0,5162,5163,5,94,0,0,5163,5164,
        3,36,18,0,5164,5318,1,0,0,0,5165,5166,5,138,0,0,5166,5168,7,62,0,
        0,5167,5169,3,568,284,0,5168,5167,1,0,0,0,5168,5169,1,0,0,0,5169,
        5170,1,0,0,0,5170,5171,3,1028,514,0,5171,5172,5,309,0,0,5172,5173,
        5,94,0,0,5173,5174,3,1068,534,0,5174,5318,1,0,0,0,5175,5177,5,138,
        0,0,5176,5178,5,259,0,0,5177,5176,1,0,0,0,5177,5178,1,0,0,0,5178,
        5179,1,0,0,0,5179,5181,5,376,0,0,5180,5182,3,568,284,0,5181,5180,
        1,0,0,0,5181,5182,1,0,0,0,5182,5183,1,0,0,0,5183,5184,3,1026,513,
        0,5184,5185,5,309,0,0,5185,5186,5,94,0,0,5186,5187,3,1024,512,0,
        5187,5318,1,0,0,0,5188,5190,5,138,0,0,5189,5191,5,63,0,0,5190,5189,
        1,0,0,0,5190,5191,1,0,0,0,5191,5192,1,0,0,0,5192,5194,5,92,0,0,5193,
        5195,3,568,284,0,5194,5193,1,0,0,0,5194,5195,1,0,0,0,5195,5196,1,
        0,0,0,5196,5197,3,826,413,0,5197,5198,5,309,0,0,5198,5199,5,94,0,
        0,5199,5200,3,1020,510,0,5200,5318,1,0,0,0,5201,5226,5,138,0,0,5202,
        5204,5,63,0,0,5203,5202,1,0,0,0,5203,5204,1,0,0,0,5204,5205,1,0,
        0,0,5205,5207,5,92,0,0,5206,5208,3,568,284,0,5207,5206,1,0,0,0,5207,
        5208,1,0,0,0,5208,5209,1,0,0,0,5209,5210,3,826,413,0,5210,5212,5,
        309,0,0,5211,5213,5,44,0,0,5212,5211,1,0,0,0,5212,5213,1,0,0,0,5213,
        5227,1,0,0,0,5214,5216,5,259,0,0,5215,5214,1,0,0,0,5215,5216,1,0,
        0,0,5216,5217,1,0,0,0,5217,5219,5,376,0,0,5218,5220,3,568,284,0,
        5219,5218,1,0,0,0,5219,5220,1,0,0,0,5220,5221,1,0,0,0,5221,5222,
        3,1026,513,0,5222,5224,5,309,0,0,5223,5225,5,44,0,0,5224,5223,1,
        0,0,0,5224,5225,1,0,0,0,5225,5227,1,0,0,0,5226,5203,1,0,0,0,5226,
        5215,1,0,0,0,5227,5228,1,0,0,0,5228,5229,3,1048,524,0,5229,5230,
        5,94,0,0,5230,5231,3,1050,525,0,5231,5318,1,0,0,0,5232,5240,5,138,
        0,0,5233,5235,5,92,0,0,5234,5236,3,568,284,0,5235,5234,1,0,0,0,5235,
        5236,1,0,0,0,5236,5237,1,0,0,0,5237,5241,3,826,413,0,5238,5239,5,
        189,0,0,5239,5241,3,422,211,0,5240,5233,1,0,0,0,5240,5238,1,0,0,
        0,5241,5242,1,0,0,0,5242,5243,5,309,0,0,5243,5244,5,45,0,0,5244,
        5245,3,1068,534,0,5245,5246,5,94,0,0,5246,5247,3,1068,534,0,5247,
        5318,1,0,0,0,5248,5255,5,138,0,0,5249,5251,5,445,0,0,5250,5252,3,
        568,284,0,5251,5250,1,0,0,0,5251,5252,1,0,0,0,5252,5256,1,0,0,0,
        5253,5256,5,321,0,0,5254,5256,5,357,0,0,5255,5249,1,0,0,0,5255,5253,
        1,0,0,0,5255,5254,1,0,0,0,5256,5257,1,0,0,0,5257,5258,3,1068,534,
        0,5258,5259,5,80,0,0,5259,5260,3,1028,514,0,5260,5261,5,309,0,0,
        5261,5262,5,94,0,0,5262,5263,3,1068,534,0,5263,5318,1,0,0,0,5264,
        5277,5,138,0,0,5265,5266,5,63,0,0,5266,5267,5,174,0,0,5267,5278,
        5,381,0,0,5268,5270,5,295,0,0,5269,5268,1,0,0,0,5269,5270,1,0,0,
        0,5270,5271,1,0,0,0,5271,5278,5,247,0,0,5272,5278,5,452,0,0,5273,
        5278,5,331,0,0,5274,5278,5,451,0,0,5275,5276,5,198,0,0,5276,5278,
        5,357,0,0,5277,5265,1,0,0,0,5277,5269,1,0,0,0,5277,5272,1,0,0,0,
        5277,5273,1,0,0,0,5277,5274,1,0,0,0,5277,5275,1,0,0,0,5278,5279,
        1,0,0,0,5279,5280,3,1068,534,0,5280,5281,5,309,0,0,5281,5282,5,94,
        0,0,5282,5283,3,1068,534,0,5283,5318,1,0,0,0,5284,5285,5,138,0,0,
        5285,5286,7,45,0,0,5286,5287,3,1064,532,0,5287,5288,5,309,0,0,5288,
        5289,5,94,0,0,5289,5290,3,1064,532,0,5290,5318,1,0,0,0,5291,5292,
        5,138,0,0,5292,5293,3,222,111,0,5293,5294,5,309,0,0,5294,5295,5,
        94,0,0,5295,5296,3,1016,508,0,5296,5318,1,0,0,0,5297,5298,5,138,
        0,0,5298,5299,5,355,0,0,5299,5300,5,325,0,0,5300,5301,7,41,0,0,5301,
        5302,3,422,211,0,5302,5303,5,309,0,0,5303,5304,5,94,0,0,5304,5305,
        3,1068,534,0,5305,5318,1,0,0,0,5306,5307,5,138,0,0,5307,5308,5,360,
        0,0,5308,5309,3,422,211,0,5309,5310,5,309,0,0,5310,5311,5,143,0,
        0,5311,5312,3,1068,534,0,5312,5313,5,94,0,0,5313,5315,3,1068,534,
        0,5314,5316,3,100,50,0,5315,5314,1,0,0,0,5315,5316,1,0,0,0,5316,
        5318,1,0,0,0,5317,5110,1,0,0,0,5317,5121,1,0,0,0,5317,5128,1,0,0,
        0,5317,5135,1,0,0,0,5317,5142,1,0,0,0,5317,5151,1,0,0,0,5317,5158,
        1,0,0,0,5317,5165,1,0,0,0,5317,5175,1,0,0,0,5317,5188,1,0,0,0,5317,
        5201,1,0,0,0,5317,5232,1,0,0,0,5317,5248,1,0,0,0,5317,5264,1,0,0,
        0,5317,5284,1,0,0,0,5317,5291,1,0,0,0,5317,5297,1,0,0,0,5317,5306,
        1,0,0,0,5318,583,1,0,0,0,5319,5336,5,138,0,0,5320,5321,5,211,0,0,
        5321,5337,3,508,254,0,5322,5323,5,296,0,0,5323,5337,3,504,252,0,
        5324,5325,5,442,0,0,5325,5337,3,500,250,0,5326,5327,5,357,0,0,5327,
        5328,3,1068,534,0,5328,5329,5,80,0,0,5329,5330,3,1028,514,0,5330,
        5337,1,0,0,0,5331,5332,5,259,0,0,5332,5333,5,376,0,0,5333,5337,3,
        1026,513,0,5334,5335,5,226,0,0,5335,5337,3,1028,514,0,5336,5320,
        1,0,0,0,5336,5322,1,0,0,0,5336,5324,1,0,0,0,5336,5326,1,0,0,0,5336,
        5331,1,0,0,0,5336,5334,1,0,0,0,5337,5339,1,0,0,0,5338,5340,5,269,
        0,0,5339,5338,1,0,0,0,5339,5340,1,0,0,0,5340,5341,1,0,0,0,5341,5342,
        5,462,0,0,5342,5343,5,80,0,0,5343,5344,5,204,0,0,5344,5345,3,1068,
        534,0,5345,585,1,0,0,0,5346,5385,5,138,0,0,5347,5348,5,136,0,0,5348,
        5386,3,524,262,0,5349,5350,5,204,0,0,5350,5386,3,1068,534,0,5351,
        5352,5,211,0,0,5352,5386,3,508,254,0,5353,5354,5,278,0,0,5354,5386,
        3,558,279,0,5355,5356,5,278,0,0,5356,5357,7,31,0,0,5357,5358,3,422,
        211,0,5358,5359,3,216,108,0,5359,5386,1,0,0,0,5360,5361,5,296,0,
        0,5361,5386,3,504,252,0,5362,5363,5,442,0,0,5363,5386,3,500,250,
        0,5364,5366,5,328,0,0,5365,5367,3,568,284,0,5366,5365,1,0,0,0,5366,
        5367,1,0,0,0,5367,5368,1,0,0,0,5368,5386,3,1028,514,0,5369,5371,
        5,259,0,0,5370,5369,1,0,0,0,5370,5371,1,0,0,0,5371,5372,1,0,0,0,
        5372,5374,5,376,0,0,5373,5375,3,568,284,0,5374,5373,1,0,0,0,5374,
        5375,1,0,0,0,5375,5376,1,0,0,0,5376,5386,3,1026,513,0,5377,5379,
        5,63,0,0,5378,5377,1,0,0,0,5378,5379,1,0,0,0,5379,5380,1,0,0,0,5380,
        5382,5,92,0,0,5381,5383,3,568,284,0,5382,5381,1,0,0,0,5382,5383,
        1,0,0,0,5383,5384,1,0,0,0,5384,5386,3,826,413,0,5385,5347,1,0,0,
        0,5385,5349,1,0,0,0,5385,5351,1,0,0,0,5385,5353,1,0,0,0,5385,5355,
        1,0,0,0,5385,5360,1,0,0,0,5385,5362,1,0,0,0,5385,5364,1,0,0,0,5385,
        5370,1,0,0,0,5385,5378,1,0,0,0,5386,5387,1,0,0,0,5387,5388,5,333,
        0,0,5388,5389,5,323,0,0,5389,5390,3,1038,519,0,5390,5408,1,0,0,0,
        5391,5400,5,138,0,0,5392,5393,5,355,0,0,5393,5394,5,325,0,0,5394,
        5401,7,41,0,0,5395,5401,5,108,0,0,5396,5401,5,168,0,0,5397,5401,
        5,189,0,0,5398,5401,5,342,0,0,5399,5401,5,360,0,0,5400,5392,1,0,
        0,0,5400,5395,1,0,0,0,5400,5396,1,0,0,0,5400,5397,1,0,0,0,5400,5398,
        1,0,0,0,5400,5399,1,0,0,0,5401,5402,1,0,0,0,5402,5403,3,422,211,
        0,5403,5404,5,333,0,0,5404,5405,5,323,0,0,5405,5406,3,1038,519,0,
        5406,5408,1,0,0,0,5407,5346,1,0,0,0,5407,5391,1,0,0,0,5408,587,1,
        0,0,0,5409,5410,5,138,0,0,5410,5411,5,278,0,0,5411,5412,3,558,279,
        0,5412,5413,5,333,0,0,5413,5414,3,590,295,0,5414,589,1,0,0,0,5415,
        5416,5,2,0,0,5416,5421,3,592,296,0,5417,5418,5,6,0,0,5418,5420,3,
        592,296,0,5419,5417,1,0,0,0,5420,5423,1,0,0,0,5421,5419,1,0,0,0,
        5421,5422,1,0,0,0,5422,5424,1,0,0,0,5423,5421,1,0,0,0,5424,5425,
        5,3,0,0,5425,591,1,0,0,0,5426,5427,3,1074,537,0,5427,5430,5,10,0,
        0,5428,5431,5,407,0,0,5429,5431,3,594,297,0,5430,5428,1,0,0,0,5430,
        5429,1,0,0,0,5431,593,1,0,0,0,5432,5438,3,518,259,0,5433,5438,3,
        1084,542,0,5434,5438,3,960,480,0,5435,5438,3,256,128,0,5436,5438,
        3,1058,529,0,5437,5432,1,0,0,0,5437,5433,1,0,0,0,5437,5434,1,0,0,
        0,5437,5435,1,0,0,0,5437,5436,1,0,0,0,5438,595,1,0,0,0,5439,5440,
        5,138,0,0,5440,5441,5,360,0,0,5441,5442,3,422,211,0,5442,5443,5,
        333,0,0,5443,5444,3,590,295,0,5444,597,1,0,0,0,5445,5446,5,138,0,
        0,5446,5447,5,278,0,0,5447,5448,7,31,0,0,5448,5449,3,422,211,0,5449,
        5450,3,216,108,0,5450,5451,5,282,0,0,5451,5452,5,94,0,0,5452,5453,
        3,1064,532,0,5453,5520,1,0,0,0,5454,5481,5,138,0,0,5455,5456,5,136,
        0,0,5456,5482,3,524,262,0,5457,5458,5,175,0,0,5458,5482,3,1036,518,
        0,5459,5460,5,211,0,0,5460,5482,3,508,254,0,5461,5463,5,295,0,0,
        5462,5461,1,0,0,0,5462,5463,1,0,0,0,5463,5464,1,0,0,0,5464,5465,
        5,247,0,0,5465,5482,3,1068,534,0,5466,5467,5,248,0,0,5467,5468,5,
        274,0,0,5468,5482,3,256,128,0,5469,5470,5,248,0,0,5470,5471,5,274,
        0,0,5471,5482,3,256,128,0,5472,5473,5,278,0,0,5473,5482,3,558,279,
        0,5474,5475,5,296,0,0,5475,5482,3,504,252,0,5476,5477,5,442,0,0,
        5477,5482,3,500,250,0,5478,5479,5,323,0,0,5479,5482,3,1038,519,0,
        5480,5482,3,222,111,0,5481,5455,1,0,0,0,5481,5457,1,0,0,0,5481,5459,
        1,0,0,0,5481,5462,1,0,0,0,5481,5466,1,0,0,0,5481,5469,1,0,0,0,5481,
        5472,1,0,0,0,5481,5474,1,0,0,0,5481,5476,1,0,0,0,5481,5478,1,0,0,
        0,5481,5480,1,0,0,0,5482,5483,1,0,0,0,5483,5484,5,282,0,0,5484,5485,
        5,94,0,0,5485,5486,3,1064,532,0,5486,5520,1,0,0,0,5487,5496,5,138,
        0,0,5488,5489,5,355,0,0,5489,5490,5,325,0,0,5490,5497,7,63,0,0,5491,
        5497,5,108,0,0,5492,5497,5,168,0,0,5493,5497,5,189,0,0,5494,5497,
        5,360,0,0,5495,5497,5,342,0,0,5496,5488,1,0,0,0,5496,5491,1,0,0,
        0,5496,5492,1,0,0,0,5496,5493,1,0,0,0,5496,5494,1,0,0,0,5496,5495,
        1,0,0,0,5497,5498,1,0,0,0,5498,5499,3,422,211,0,5499,5500,5,282,
        0,0,5500,5501,5,94,0,0,5501,5502,3,1064,532,0,5502,5520,1,0,0,0,
        5503,5512,5,138,0,0,5504,5513,5,331,0,0,5505,5506,5,63,0,0,5506,
        5507,5,174,0,0,5507,5513,5,381,0,0,5508,5509,5,198,0,0,5509,5513,
        5,357,0,0,5510,5513,5,452,0,0,5511,5513,5,451,0,0,5512,5504,1,0,
        0,0,5512,5505,1,0,0,0,5512,5508,1,0,0,0,5512,5510,1,0,0,0,5512,5511,
        1,0,0,0,5513,5514,1,0,0,0,5514,5515,3,1068,534,0,5515,5516,5,282,
        0,0,5516,5517,5,94,0,0,5517,5518,3,1064,532,0,5518,5520,1,0,0,0,
        5519,5445,1,0,0,0,5519,5454,1,0,0,0,5519,5487,1,0,0,0,5519,5503,
        1,0,0,0,5520,599,1,0,0,0,5521,5522,5,46,0,0,5522,5523,5,452,0,0,
        5523,5525,3,1068,534,0,5524,5526,3,602,301,0,5525,5524,1,0,0,0,5525,
        5526,1,0,0,0,5526,5528,1,0,0,0,5527,5529,3,536,268,0,5528,5527,1,
        0,0,0,5528,5529,1,0,0,0,5529,601,1,0,0,0,5530,5531,5,62,0,0,5531,
        5532,5,92,0,0,5532,5537,3,832,416,0,5533,5534,5,62,0,0,5534,5535,
        5,30,0,0,5535,5537,5,350,0,0,5536,5530,1,0,0,0,5536,5533,1,0,0,0,
        5537,603,1,0,0,0,5538,5539,5,138,0,0,5539,5540,5,452,0,0,5540,5551,
        3,1068,534,0,5541,5542,5,282,0,0,5542,5543,5,94,0,0,5543,5552,3,
        1064,532,0,5544,5545,5,333,0,0,5545,5552,3,374,187,0,5546,5547,5,
        309,0,0,5547,5548,5,94,0,0,5548,5552,3,1068,534,0,5549,5550,7,34,
        0,0,5550,5552,3,834,417,0,5551,5541,1,0,0,0,5551,5544,1,0,0,0,5551,
        5546,1,0,0,0,5551,5549,1,0,0,0,5552,605,1,0,0,0,5553,5554,5,46,0,
        0,5554,5555,5,451,0,0,5555,5556,3,1068,534,0,5556,5557,5,164,0,0,
        5557,5558,3,1058,529,0,5558,5559,5,452,0,0,5559,5561,3,608,304,0,
        5560,5562,3,536,268,0,5561,5560,1,0,0,0,5561,5562,1,0,0,0,5562,607,
        1,0,0,0,5563,5568,3,1074,537,0,5564,5565,5,6,0,0,5565,5567,3,1074,
        537,0,5566,5564,1,0,0,0,5567,5570,1,0,0,0,5568,5566,1,0,0,0,5568,
        5569,1,0,0,0,5569,609,1,0,0,0,5570,5568,1,0,0,0,5571,5572,5,138,
        0,0,5572,5573,5,451,0,0,5573,5574,3,1068,534,0,5574,5575,5,333,0,
        0,5575,5576,3,374,187,0,5576,5621,1,0,0,0,5577,5578,5,138,0,0,5578,
        5579,5,451,0,0,5579,5580,3,1068,534,0,5580,5581,5,164,0,0,5581,5582,
        3,1058,529,0,5582,5621,1,0,0,0,5583,5584,5,138,0,0,5584,5585,5,451,
        0,0,5585,5586,3,1068,534,0,5586,5587,5,305,0,0,5587,5589,5,452,0,
        0,5588,5590,3,536,268,0,5589,5588,1,0,0,0,5589,5590,1,0,0,0,5590,
        5621,1,0,0,0,5591,5592,5,138,0,0,5592,5593,5,451,0,0,5593,5594,3,
        1068,534,0,5594,5595,7,34,0,0,5595,5596,5,452,0,0,5596,5598,3,608,
        304,0,5597,5599,3,536,268,0,5598,5597,1,0,0,0,5598,5599,1,0,0,0,
        5599,5621,1,0,0,0,5600,5601,5,138,0,0,5601,5602,5,451,0,0,5602,5603,
        3,1068,534,0,5603,5604,7,64,0,0,5604,5621,1,0,0,0,5605,5606,5,138,
        0,0,5606,5607,5,451,0,0,5607,5608,3,1068,534,0,5608,5609,5,465,0,
        0,5609,5610,5,2,0,0,5610,5611,3,382,191,0,5611,5612,5,3,0,0,5612,
        5621,1,0,0,0,5613,5614,5,138,0,0,5614,5615,5,451,0,0,5615,5616,3,
        1068,534,0,5616,5617,5,282,0,0,5617,5618,5,94,0,0,5618,5619,3,1064,
        532,0,5619,5621,1,0,0,0,5620,5571,1,0,0,0,5620,5577,1,0,0,0,5620,
        5583,1,0,0,0,5620,5591,1,0,0,0,5620,5600,1,0,0,0,5620,5605,1,0,0,
        0,5620,5613,1,0,0,0,5621,611,1,0,0,0,5622,5624,5,46,0,0,5623,5625,
        3,492,246,0,5624,5623,1,0,0,0,5624,5625,1,0,0,0,5625,5626,1,0,0,
        0,5626,5627,5,321,0,0,5627,5628,3,1068,534,0,5628,5629,5,36,0,0,
        5629,5630,5,80,0,0,5630,5631,3,620,310,0,5631,5632,5,94,0,0,5632,
        5634,3,1028,514,0,5633,5635,3,848,424,0,5634,5633,1,0,0,0,5634,5635,
        1,0,0,0,5635,5636,1,0,0,0,5636,5638,5,57,0,0,5637,5639,7,65,0,0,
        5638,5637,1,0,0,0,5638,5639,1,0,0,0,5639,5640,1,0,0,0,5640,5641,
        3,614,307,0,5641,613,1,0,0,0,5642,5649,5,270,0,0,5643,5649,3,618,
        309,0,5644,5645,5,2,0,0,5645,5646,3,616,308,0,5646,5647,5,3,0,0,
        5647,5649,1,0,0,0,5648,5642,1,0,0,0,5648,5643,1,0,0,0,5648,5644,
        1,0,0,0,5649,615,1,0,0,0,5650,5652,3,618,309,0,5651,5650,1,0,0,0,
        5651,5652,1,0,0,0,5652,5659,1,0,0,0,5653,5655,5,7,0,0,5654,5656,
        3,618,309,0,5655,5654,1,0,0,0,5655,5656,1,0,0,0,5656,5658,1,0,0,
        0,5657,5653,1,0,0,0,5658,5661,1,0,0,0,5659,5657,1,0,0,0,5659,5660,
        1,0,0,0,5660,617,1,0,0,0,5661,5659,1,0,0,0,5662,5668,3,750,375,0,
        5663,5668,3,718,359,0,5664,5668,3,740,370,0,5665,5668,3,732,366,
        0,5666,5668,3,622,311,0,5667,5662,1,0,0,0,5667,5663,1,0,0,0,5667,
        5664,1,0,0,0,5667,5665,1,0,0,0,5667,5666,1,0,0,0,5668,619,1,0,0,
        0,5669,5670,7,66,0,0,5670,621,1,0,0,0,5671,5672,5,271,0,0,5672,5674,
        3,1068,534,0,5673,5675,3,624,312,0,5674,5673,1,0,0,0,5674,5675,1,
        0,0,0,5675,623,1,0,0,0,5676,5677,5,6,0,0,5677,5678,3,1058,529,0,
        5678,625,1,0,0,0,5679,5680,5,252,0,0,5680,5681,3,1068,534,0,5681,
        627,1,0,0,0,5682,5685,5,366,0,0,5683,5686,3,1068,534,0,5684,5686,
        5,9,0,0,5685,5683,1,0,0,0,5685,5684,1,0,0,0,5686,629,1,0,0,0,5687,
        5689,5,146,0,0,5688,5690,3,632,316,0,5689,5688,1,0,0,0,5689,5690,
        1,0,0,0,5690,5692,1,0,0,0,5691,5693,3,636,318,0,5692,5691,1,0,0,
        0,5692,5693,1,0,0,0,5693,5733,1,0,0,0,5694,5695,5,340,0,0,5695,5697,
        5,356,0,0,5696,5698,3,636,318,0,5697,5696,1,0,0,0,5697,5698,1,0,
        0,0,5698,5733,1,0,0,0,5699,5700,5,322,0,0,5700,5733,3,1068,534,0,
        5701,5703,5,308,0,0,5702,5704,5,322,0,0,5703,5702,1,0,0,0,5703,5704,
        1,0,0,0,5704,5705,1,0,0,0,5705,5733,3,1068,534,0,5706,5707,5,290,
        0,0,5707,5708,5,356,0,0,5708,5733,3,1058,529,0,5709,5710,7,67,0,
        0,5710,5711,5,291,0,0,5711,5733,3,1058,529,0,5712,5714,7,68,0,0,
        5713,5715,3,632,316,0,5714,5713,1,0,0,0,5714,5715,1,0,0,0,5715,5721,
        1,0,0,0,5716,5718,5,33,0,0,5717,5719,5,269,0,0,5718,5717,1,0,0,0,
        5718,5719,1,0,0,0,5719,5720,1,0,0,0,5720,5722,5,153,0,0,5721,5716,
        1,0,0,0,5721,5722,1,0,0,0,5722,5733,1,0,0,0,5723,5725,5,319,0,0,
        5724,5726,3,632,316,0,5725,5724,1,0,0,0,5725,5726,1,0,0,0,5726,5727,
        1,0,0,0,5727,5729,5,94,0,0,5728,5730,5,322,0,0,5729,5728,1,0,0,0,
        5729,5730,1,0,0,0,5730,5731,1,0,0,0,5731,5733,3,1068,534,0,5732,
        5687,1,0,0,0,5732,5694,1,0,0,0,5732,5699,1,0,0,0,5732,5701,1,0,0,
        0,5732,5706,1,0,0,0,5732,5709,1,0,0,0,5732,5712,1,0,0,0,5732,5723,
        1,0,0,0,5733,631,1,0,0,0,5734,5735,7,69,0,0,5735,633,1,0,0,0,5736,
        5737,5,244,0,0,5737,5738,5,251,0,0,5738,5746,3,54,27,0,5739,5740,
        5,300,0,0,5740,5746,7,70,0,0,5741,5743,5,77,0,0,5742,5741,1,0,0,
        0,5742,5743,1,0,0,0,5743,5744,1,0,0,0,5744,5746,5,54,0,0,5745,5736,
        1,0,0,0,5745,5739,1,0,0,0,5745,5742,1,0,0,0,5746,635,1,0,0,0,5747,
        5754,3,634,317,0,5748,5750,5,6,0,0,5749,5748,1,0,0,0,5749,5750,1,
        0,0,0,5750,5751,1,0,0,0,5751,5753,3,634,317,0,5752,5749,1,0,0,0,
        5753,5756,1,0,0,0,5754,5752,1,0,0,0,5754,5755,1,0,0,0,5755,637,1,
        0,0,0,5756,5754,1,0,0,0,5757,5760,5,46,0,0,5758,5759,5,82,0,0,5759,
        5761,5,311,0,0,5760,5758,1,0,0,0,5760,5761,1,0,0,0,5761,5763,1,0,
        0,0,5762,5764,3,146,73,0,5763,5762,1,0,0,0,5763,5764,1,0,0,0,5764,
        5780,1,0,0,0,5765,5766,5,376,0,0,5766,5768,3,1024,512,0,5767,5769,
        3,186,93,0,5768,5767,1,0,0,0,5768,5769,1,0,0,0,5769,5771,1,0,0,0,
        5770,5772,3,108,54,0,5771,5770,1,0,0,0,5771,5772,1,0,0,0,5772,5781,
        1,0,0,0,5773,5774,5,303,0,0,5774,5775,5,376,0,0,5775,5776,3,1024,
        512,0,5776,5778,3,184,92,0,5777,5779,3,108,54,0,5778,5777,1,0,0,
        0,5778,5779,1,0,0,0,5779,5781,1,0,0,0,5780,5765,1,0,0,0,5780,5773,
        1,0,0,0,5781,5782,1,0,0,0,5782,5783,5,36,0,0,5783,5785,3,750,375,
        0,5784,5786,3,640,320,0,5785,5784,1,0,0,0,5785,5786,1,0,0,0,5786,
        639,1,0,0,0,5787,5789,5,105,0,0,5788,5790,7,71,0,0,5789,5788,1,0,
        0,0,5789,5790,1,0,0,0,5790,5791,1,0,0,0,5791,5792,5,42,0,0,5792,
        5793,5,279,0,0,5793,641,1,0,0,0,5794,5795,5,253,0,0,5795,5796,3,
        1058,529,0,5796,643,1,0,0,0,5797,5798,5,46,0,0,5798,5799,5,175,0,
        0,5799,5801,3,1034,517,0,5800,5802,5,105,0,0,5801,5800,1,0,0,0,5801,
        5802,1,0,0,0,5802,5804,1,0,0,0,5803,5805,3,646,323,0,5804,5803,1,
        0,0,0,5804,5805,1,0,0,0,5805,645,1,0,0,0,5806,5808,3,648,324,0,5807,
        5806,1,0,0,0,5808,5809,1,0,0,0,5809,5807,1,0,0,0,5809,5810,1,0,0,
        0,5810,647,1,0,0,0,5811,5813,3,650,325,0,5812,5814,5,10,0,0,5813,
        5812,1,0,0,0,5813,5814,1,0,0,0,5814,5818,1,0,0,0,5815,5819,3,1062,
        531,0,5816,5819,3,58,29,0,5817,5819,5,53,0,0,5818,5815,1,0,0,0,5818,
        5816,1,0,0,0,5818,5817,1,0,0,0,5819,649,1,0,0,0,5820,5821,5,164,
        0,0,5821,5829,5,74,0,0,5822,5829,5,194,0,0,5823,5829,5,255,0,0,5824,
        5829,5,282,0,0,5825,5829,5,351,0,0,5826,5829,5,353,0,0,5827,5829,
        3,1076,538,0,5828,5820,1,0,0,0,5828,5822,1,0,0,0,5828,5823,1,0,0,
        0,5828,5824,1,0,0,0,5828,5825,1,0,0,0,5828,5826,1,0,0,0,5828,5827,
        1,0,0,0,5829,651,1,0,0,0,5830,5831,5,138,0,0,5831,5832,5,175,0,0,
        5832,5844,3,1036,518,0,5833,5834,5,333,0,0,5834,5835,5,351,0,0,5835,
        5837,3,1016,508,0,5836,5833,1,0,0,0,5836,5837,1,0,0,0,5837,5845,
        1,0,0,0,5838,5840,5,105,0,0,5839,5838,1,0,0,0,5839,5840,1,0,0,0,
        5840,5841,1,0,0,0,5841,5843,3,646,323,0,5842,5839,1,0,0,0,5842,5843,
        1,0,0,0,5843,5845,1,0,0,0,5844,5836,1,0,0,0,5844,5842,1,0,0,0,5845,
        653,1,0,0,0,5846,5847,5,138,0,0,5847,5848,5,175,0,0,5848,5850,3,
        1036,518,0,5849,5851,3,68,34,0,5850,5849,1,0,0,0,5850,5851,1,0,0,
        0,5851,655,1,0,0,0,5852,5853,5,2,0,0,5853,5858,5,209,0,0,5854,5855,
        5,6,0,0,5855,5857,5,209,0,0,5856,5854,1,0,0,0,5857,5860,1,0,0,0,
        5858,5856,1,0,0,0,5858,5859,1,0,0,0,5859,5861,1,0,0,0,5860,5858,
        1,0,0,0,5861,5862,5,3,0,0,5862,657,1,0,0,0,5863,5864,5,138,0,0,5864,
        5865,5,108,0,0,5865,5866,3,422,211,0,5866,5867,5,305,0,0,5867,5868,
        5,375,0,0,5868,659,1,0,0,0,5869,5870,5,138,0,0,5870,5871,5,349,0,
        0,5871,5872,7,16,0,0,5872,5873,3,44,22,0,5873,661,1,0,0,0,5874,5875,
        5,46,0,0,5875,5876,5,189,0,0,5876,5878,3,422,211,0,5877,5879,5,36,
        0,0,5878,5877,1,0,0,0,5878,5879,1,0,0,0,5879,5880,1,0,0,0,5880,5881,
        3,870,435,0,5881,5882,3,162,81,0,5882,663,1,0,0,0,5883,5884,5,138,
        0,0,5884,5885,5,189,0,0,5885,5904,3,422,211,0,5886,5905,3,98,49,
        0,5887,5888,7,15,0,0,5888,5889,5,77,0,0,5889,5905,5,78,0,0,5890,
        5891,5,133,0,0,5891,5905,3,180,90,0,5892,5893,5,191,0,0,5893,5895,
        5,45,0,0,5894,5896,3,568,284,0,5895,5894,1,0,0,0,5895,5896,1,0,0,
        0,5896,5897,1,0,0,0,5897,5899,3,1068,534,0,5898,5900,3,100,50,0,
        5899,5898,1,0,0,0,5899,5900,1,0,0,0,5900,5905,1,0,0,0,5901,5902,
        5,372,0,0,5902,5903,5,45,0,0,5903,5905,3,1068,534,0,5904,5886,1,
        0,0,0,5904,5887,1,0,0,0,5904,5890,1,0,0,0,5904,5892,1,0,0,0,5904,
        5901,1,0,0,0,5905,665,1,0,0,0,5906,5907,5,138,0,0,5907,5908,5,355,
        0,0,5908,5909,5,325,0,0,5909,5910,5,185,0,0,5910,5911,3,422,211,
        0,5911,5912,3,374,187,0,5912,667,1,0,0,0,5913,5914,5,138,0,0,5914,
        5915,5,355,0,0,5915,5916,5,325,0,0,5916,5917,5,163,0,0,5917,5918,
        3,422,211,0,5918,5919,7,72,0,0,5919,5920,5,257,0,0,5920,5921,5,62,
        0,0,5921,5922,3,1032,516,0,5922,5923,5,105,0,0,5923,5924,3,418,209,
        0,5924,5955,1,0,0,0,5925,5926,5,138,0,0,5926,5927,5,355,0,0,5927,
        5928,5,325,0,0,5928,5929,5,163,0,0,5929,5930,3,422,211,0,5930,5931,
        5,138,0,0,5931,5934,5,257,0,0,5932,5933,5,62,0,0,5933,5935,3,1032,
        516,0,5934,5932,1,0,0,0,5934,5935,1,0,0,0,5935,5936,1,0,0,0,5936,
        5937,5,311,0,0,5937,5938,3,422,211,0,5938,5939,5,105,0,0,5939,5940,
        3,422,211,0,5940,5955,1,0,0,0,5941,5942,5,138,0,0,5942,5943,5,355,
        0,0,5943,5944,5,325,0,0,5944,5945,5,163,0,0,5945,5946,3,422,211,
        0,5946,5947,5,191,0,0,5947,5949,5,257,0,0,5948,5950,3,568,284,0,
        5949,5948,1,0,0,0,5949,5950,1,0,0,0,5950,5951,1,0,0,0,5951,5952,
        5,62,0,0,5952,5953,3,1032,516,0,5953,5955,1,0,0,0,5954,5913,1,0,
        0,0,5954,5925,1,0,0,0,5954,5941,1,0,0,0,5955,669,1,0,0,0,5956,5958,
        5,46,0,0,5957,5959,5,53,0,0,5958,5957,1,0,0,0,5958,5959,1,0,0,0,
        5959,5960,1,0,0,0,5960,5961,5,168,0,0,5961,5962,3,422,211,0,5962,
        5963,5,62,0,0,5963,5964,3,1058,529,0,5964,5965,5,94,0,0,5965,5966,
        3,1058,529,0,5966,5967,5,64,0,0,5967,5968,3,422,211,0,5968,671,1,
        0,0,0,5969,5971,5,158,0,0,5970,5972,3,694,347,0,5971,5970,1,0,0,
        0,5971,5972,1,0,0,0,5972,5977,1,0,0,0,5973,5975,3,1022,511,0,5974,
        5976,3,216,108,0,5975,5974,1,0,0,0,5975,5976,1,0,0,0,5976,5978,1,
        0,0,0,5977,5973,1,0,0,0,5977,5978,1,0,0,0,5978,5986,1,0,0,0,5979,
        5980,5,158,0,0,5980,5981,3,674,337,0,5981,5983,3,1022,511,0,5982,
        5984,3,216,108,0,5983,5982,1,0,0,0,5983,5984,1,0,0,0,5984,5986,1,
        0,0,0,5985,5969,1,0,0,0,5985,5979,1,0,0,0,5986,673,1,0,0,0,5987,
        5988,5,2,0,0,5988,5993,3,694,347,0,5989,5990,5,6,0,0,5990,5992,3,
        694,347,0,5991,5989,1,0,0,0,5992,5995,1,0,0,0,5993,5991,1,0,0,0,
        5993,5994,1,0,0,0,5994,5996,1,0,0,0,5995,5993,1,0,0,0,5996,5997,
        5,3,0,0,5997,675,1,0,0,0,5998,6014,5,370,0,0,5999,6001,5,113,0,0,
        6000,5999,1,0,0,0,6000,6001,1,0,0,0,6001,6003,1,0,0,0,6002,6004,
        5,112,0,0,6003,6002,1,0,0,0,6003,6004,1,0,0,0,6004,6006,1,0,0,0,
        6005,6007,3,694,347,0,6006,6005,1,0,0,0,6006,6007,1,0,0,0,6007,6009,
        1,0,0,0,6008,6010,3,682,341,0,6009,6008,1,0,0,0,6009,6010,1,0,0,
        0,6010,6015,1,0,0,0,6011,6013,3,704,352,0,6012,6011,1,0,0,0,6012,
        6013,1,0,0,0,6013,6015,1,0,0,0,6014,6000,1,0,0,0,6014,6012,1,0,0,
        0,6015,6017,1,0,0,0,6016,6018,3,698,349,0,6017,6016,1,0,0,0,6017,
        6018,1,0,0,0,6018,677,1,0,0,0,6019,6027,3,682,341,0,6020,6022,3,
        694,347,0,6021,6020,1,0,0,0,6021,6022,1,0,0,0,6022,6028,1,0,0,0,
        6023,6024,5,2,0,0,6024,6025,3,690,345,0,6025,6026,5,3,0,0,6026,6028,
        1,0,0,0,6027,6021,1,0,0,0,6027,6023,1,0,0,0,6028,6030,1,0,0,0,6029,
        6031,3,698,349,0,6030,6029,1,0,0,0,6030,6031,1,0,0,0,6031,679,1,
        0,0,0,6032,6037,3,684,342,0,6033,6034,5,6,0,0,6034,6036,3,684,342,
        0,6035,6033,1,0,0,0,6036,6039,1,0,0,0,6037,6035,1,0,0,0,6037,6038,
        1,0,0,0,6038,681,1,0,0,0,6039,6037,1,0,0,0,6040,6041,7,73,0,0,6041,
        683,1,0,0,0,6042,6044,3,686,343,0,6043,6045,3,688,344,0,6044,6043,
        1,0,0,0,6044,6045,1,0,0,0,6045,685,1,0,0,0,6046,6049,3,1072,536,
        0,6047,6049,3,682,341,0,6048,6046,1,0,0,0,6048,6047,1,0,0,0,6049,
        687,1,0,0,0,6050,6053,3,58,29,0,6051,6053,3,256,128,0,6052,6050,
        1,0,0,0,6052,6051,1,0,0,0,6053,689,1,0,0,0,6054,6059,3,692,346,0,
        6055,6056,5,6,0,0,6056,6058,3,692,346,0,6057,6055,1,0,0,0,6058,6061,
        1,0,0,0,6059,6057,1,0,0,0,6059,6060,1,0,0,0,6060,691,1,0,0,0,6061,
        6059,1,0,0,0,6062,6064,7,74,0,0,6063,6065,7,75,0,0,6064,6063,1,0,
        0,0,6064,6065,1,0,0,0,6065,6072,1,0,0,0,6066,6069,5,548,0,0,6067,
        6070,3,256,128,0,6068,6070,3,1058,529,0,6069,6067,1,0,0,0,6069,6068,
        1,0,0,0,6070,6072,1,0,0,0,6071,6062,1,0,0,0,6071,6066,1,0,0,0,6072,
        693,1,0,0,0,6073,6075,5,128,0,0,6074,6076,7,75,0,0,6075,6074,1,0,
        0,0,6075,6076,1,0,0,0,6076,695,1,0,0,0,6077,6079,3,1022,511,0,6078,
        6080,3,184,92,0,6079,6078,1,0,0,0,6079,6080,1,0,0,0,6080,697,1,0,
        0,0,6081,6086,3,696,348,0,6082,6083,5,6,0,0,6083,6085,3,696,348,
        0,6084,6082,1,0,0,0,6085,6088,1,0,0,0,6086,6084,1,0,0,0,6086,6087,
        1,0,0,0,6087,699,1,0,0,0,6088,6086,1,0,0,0,6089,6100,5,203,0,0,6090,
        6101,3,704,352,0,6091,6093,5,128,0,0,6092,6091,1,0,0,0,6092,6093,
        1,0,0,0,6093,6101,1,0,0,0,6094,6096,3,682,341,0,6095,6097,3,694,
        347,0,6096,6095,1,0,0,0,6096,6097,1,0,0,0,6097,6099,1,0,0,0,6098,
        6094,1,0,0,0,6098,6099,1,0,0,0,6099,6101,1,0,0,0,6100,6090,1,0,0,
        0,6100,6092,1,0,0,0,6100,6098,1,0,0,0,6101,6102,1,0,0,0,6102,6103,
        3,702,351,0,6103,701,1,0,0,0,6104,6114,3,750,375,0,6105,6114,3,718,
        359,0,6106,6114,3,740,370,0,6107,6114,3,732,366,0,6108,6114,3,746,
        373,0,6109,6114,3,234,117,0,6110,6114,3,240,120,0,6111,6114,3,244,
        122,0,6112,6114,3,712,356,0,6113,6104,1,0,0,0,6113,6105,1,0,0,0,
        6113,6106,1,0,0,0,6113,6107,1,0,0,0,6113,6108,1,0,0,0,6113,6109,
        1,0,0,0,6113,6110,1,0,0,0,6113,6111,1,0,0,0,6113,6112,1,0,0,0,6114,
        703,1,0,0,0,6115,6116,5,2,0,0,6116,6117,3,680,340,0,6117,6118,5,
        3,0,0,6118,705,1,0,0,0,6119,6120,5,290,0,0,6120,6122,3,1068,534,
        0,6121,6123,3,708,354,0,6122,6121,1,0,0,0,6122,6123,1,0,0,0,6123,
        6124,1,0,0,0,6124,6125,5,36,0,0,6125,6126,3,710,355,0,6126,707,1,
        0,0,0,6127,6128,5,2,0,0,6128,6129,3,426,213,0,6129,6130,5,3,0,0,
        6130,709,1,0,0,0,6131,6136,3,750,375,0,6132,6136,3,718,359,0,6133,
        6136,3,740,370,0,6134,6136,3,732,366,0,6135,6131,1,0,0,0,6135,6132,
        1,0,0,0,6135,6133,1,0,0,0,6135,6134,1,0,0,0,6136,711,1,0,0,0,6137,
        6138,5,202,0,0,6138,6140,3,1068,534,0,6139,6141,3,714,357,0,6140,
        6139,1,0,0,0,6140,6141,1,0,0,0,6141,6161,1,0,0,0,6142,6144,5,46,
        0,0,6143,6145,3,146,73,0,6144,6143,1,0,0,0,6144,6145,1,0,0,0,6145,
        6146,1,0,0,0,6146,6148,5,92,0,0,6147,6149,3,388,194,0,6148,6147,
        1,0,0,0,6148,6149,1,0,0,0,6149,6150,1,0,0,0,6150,6151,3,236,118,
        0,6151,6152,5,36,0,0,6152,6153,5,202,0,0,6153,6155,3,1068,534,0,
        6154,6156,3,714,357,0,6155,6154,1,0,0,0,6155,6156,1,0,0,0,6156,6158,
        1,0,0,0,6157,6159,3,238,119,0,6158,6157,1,0,0,0,6158,6159,1,0,0,
        0,6159,6161,1,0,0,0,6160,6137,1,0,0,0,6160,6142,1,0,0,0,6161,713,
        1,0,0,0,6162,6163,5,2,0,0,6163,6164,3,964,482,0,6164,6165,5,3,0,
        0,6165,715,1,0,0,0,6166,6168,5,177,0,0,6167,6169,5,290,0,0,6168,
        6167,1,0,0,0,6168,6169,1,0,0,0,6169,6172,1,0,0,0,6170,6173,3,1068,
        534,0,6171,6173,5,30,0,0,6172,6170,1,0,0,0,6172,6171,1,0,0,0,6173,
        717,1,0,0,0,6174,6176,3,762,381,0,6175,6174,1,0,0,0,6175,6176,1,
        0,0,0,6176,6177,1,0,0,0,6177,6178,5,241,0,0,6178,6179,5,71,0,0,6179,
        6182,3,1022,511,0,6180,6181,5,36,0,0,6181,6183,3,1068,534,0,6182,
        6180,1,0,0,0,6182,6183,1,0,0,0,6183,6184,1,0,0,0,6184,6186,3,720,
        360,0,6185,6187,3,726,363,0,6186,6185,1,0,0,0,6186,6187,1,0,0,0,
        6187,6189,1,0,0,0,6188,6190,3,730,365,0,6189,6188,1,0,0,0,6189,6190,
        1,0,0,0,6190,719,1,0,0,0,6191,6192,5,2,0,0,6192,6193,3,722,361,0,
        6193,6194,5,3,0,0,6194,6196,1,0,0,0,6195,6191,1,0,0,0,6195,6196,
        1,0,0,0,6196,6200,1,0,0,0,6197,6198,5,463,0,0,6198,6199,7,76,0,0,
        6199,6201,5,450,0,0,6200,6197,1,0,0,0,6200,6201,1,0,0,0,6201,6204,
        1,0,0,0,6202,6205,3,1196,598,0,6203,6205,3,750,375,0,6204,6202,1,
        0,0,0,6204,6203,1,0,0,0,6205,721,1,0,0,0,6206,6211,3,724,362,0,6207,
        6208,5,6,0,0,6208,6210,3,724,362,0,6209,6207,1,0,0,0,6210,6213,1,
        0,0,0,6211,6209,1,0,0,0,6211,6212,1,0,0,0,6212,723,1,0,0,0,6213,
        6211,1,0,0,0,6214,6215,3,1048,524,0,6215,6216,3,1000,500,0,6216,
        725,1,0,0,0,6217,6218,5,80,0,0,6218,6220,5,464,0,0,6219,6221,3,728,
        364,0,6220,6219,1,0,0,0,6220,6221,1,0,0,0,6221,6222,1,0,0,0,6222,
        6230,5,57,0,0,6223,6224,5,369,0,0,6224,6225,5,333,0,0,6225,6227,
        3,742,371,0,6226,6228,3,848,424,0,6227,6226,1,0,0,0,6227,6228,1,
        0,0,0,6228,6231,1,0,0,0,6229,6231,5,270,0,0,6230,6223,1,0,0,0,6230,
        6229,1,0,0,0,6231,727,1,0,0,0,6232,6234,3,478,239,0,6233,6235,3,
        848,424,0,6234,6233,1,0,0,0,6234,6235,1,0,0,0,6235,6240,1,0,0,0,
        6236,6237,5,80,0,0,6237,6238,5,45,0,0,6238,6240,3,1068,534,0,6239,
        6232,1,0,0,0,6239,6236,1,0,0,0,6240,729,1,0,0,0,6241,6242,5,87,0,
        0,6242,6243,3,1002,501,0,6243,731,1,0,0,0,6244,6246,3,762,381,0,
        6245,6244,1,0,0,0,6245,6246,1,0,0,0,6246,6247,1,0,0,0,6247,6248,
        5,182,0,0,6248,6249,5,64,0,0,6249,6252,3,836,418,0,6250,6251,5,100,
        0,0,6251,6253,3,814,407,0,6252,6250,1,0,0,0,6252,6253,1,0,0,0,6253,
        6255,1,0,0,0,6254,6256,3,850,425,0,6255,6254,1,0,0,0,6255,6256,1,
        0,0,0,6256,6258,1,0,0,0,6257,6259,3,730,365,0,6258,6257,1,0,0,0,
        6258,6259,1,0,0,0,6259,733,1,0,0,0,6260,6262,5,256,0,0,6261,6263,
        5,92,0,0,6262,6261,1,0,0,0,6262,6263,1,0,0,0,6263,6264,1,0,0,0,6264,
        6269,3,832,416,0,6265,6266,5,68,0,0,6266,6267,3,736,368,0,6267,6268,
        5,263,0,0,6268,6270,1,0,0,0,6269,6265,1,0,0,0,6269,6270,1,0,0,0,
        6270,6272,1,0,0,0,6271,6273,5,272,0,0,6272,6271,1,0,0,0,6272,6273,
        1,0,0,0,6273,735,1,0,0,0,6274,6275,7,77,0,0,6275,6285,7,78,0,0,6276,
        6281,5,334,0,0,6277,6278,5,369,0,0,6278,6282,5,201,0,0,6279,6280,
        5,414,0,0,6280,6282,5,201,0,0,6281,6277,1,0,0,0,6281,6279,1,0,0,
        0,6281,6282,1,0,0,0,6282,6285,1,0,0,0,6283,6285,5,201,0,0,6284,6274,
        1,0,0,0,6284,6276,1,0,0,0,6284,6283,1,0,0,0,6285,737,1,0,0,0,6286,
        6290,5,272,0,0,6287,6288,5,465,0,0,6288,6290,5,466,0,0,6289,6286,
        1,0,0,0,6289,6287,1,0,0,0,6290,739,1,0,0,0,6291,6293,3,762,381,0,
        6292,6291,1,0,0,0,6292,6293,1,0,0,0,6293,6294,1,0,0,0,6294,6295,
        5,369,0,0,6295,6296,3,836,418,0,6296,6297,5,333,0,0,6297,6299,3,
        742,371,0,6298,6300,3,812,406,0,6299,6298,1,0,0,0,6299,6300,1,0,
        0,0,6300,6302,1,0,0,0,6301,6303,3,850,425,0,6302,6301,1,0,0,0,6302,
        6303,1,0,0,0,6303,6305,1,0,0,0,6304,6306,3,730,365,0,6305,6304,1,
        0,0,0,6305,6306,1,0,0,0,6306,741,1,0,0,0,6307,6312,3,744,372,0,6308,
        6309,5,6,0,0,6309,6311,3,744,372,0,6310,6308,1,0,0,0,6311,6314,1,
        0,0,0,6312,6310,1,0,0,0,6312,6313,1,0,0,0,6313,743,1,0,0,0,6314,
        6312,1,0,0,0,6315,6316,3,724,362,0,6316,6317,5,10,0,0,6317,6318,
        3,898,449,0,6318,6334,1,0,0,0,6319,6320,5,2,0,0,6320,6321,3,722,
        361,0,6321,6322,5,3,0,0,6322,6331,5,10,0,0,6323,6325,5,414,0,0,6324,
        6323,1,0,0,0,6324,6325,1,0,0,0,6325,6326,1,0,0,0,6326,6332,3,898,
        449,0,6327,6328,5,2,0,0,6328,6329,3,756,378,0,6329,6330,5,3,0,0,
        6330,6332,1,0,0,0,6331,6324,1,0,0,0,6331,6327,1,0,0,0,6332,6334,
        1,0,0,0,6333,6315,1,0,0,0,6333,6319,1,0,0,0,6334,745,1,0,0,0,6335,
        6336,5,178,0,0,6336,6337,3,1068,534,0,6337,6338,3,748,374,0,6338,
        6341,5,172,0,0,6339,6340,7,26,0,0,6340,6342,5,217,0,0,6341,6339,
        1,0,0,0,6341,6342,1,0,0,0,6342,6343,1,0,0,0,6343,6344,5,62,0,0,6344,
        6345,3,750,375,0,6345,747,1,0,0,0,6346,6350,3,1100,550,0,6347,6350,
        5,107,0,0,6348,6350,5,240,0,0,6349,6346,1,0,0,0,6349,6347,1,0,0,
        0,6349,6348,1,0,0,0,6350,6353,1,0,0,0,6351,6349,1,0,0,0,6351,6352,
        1,0,0,0,6352,749,1,0,0,0,6353,6351,1,0,0,0,6354,6357,3,754,377,0,
        6355,6357,3,752,376,0,6356,6354,1,0,0,0,6356,6355,1,0,0,0,6357,751,
        1,0,0,0,6358,6361,5,2,0,0,6359,6362,3,754,377,0,6360,6362,3,752,
        376,0,6361,6359,1,0,0,0,6361,6360,1,0,0,0,6362,6363,1,0,0,0,6363,
        6364,5,3,0,0,6364,753,1,0,0,0,6365,6367,3,762,381,0,6366,6365,1,
        0,0,0,6366,6367,1,0,0,0,6367,6368,1,0,0,0,6368,6370,3,756,378,0,
        6369,6371,3,778,389,0,6370,6369,1,0,0,0,6370,6371,1,0,0,0,6371,6380,
        1,0,0,0,6372,6374,3,804,402,0,6373,6375,3,782,391,0,6374,6373,1,
        0,0,0,6374,6375,1,0,0,0,6375,6381,1,0,0,0,6376,6378,3,782,391,0,
        6377,6379,3,804,402,0,6378,6377,1,0,0,0,6378,6379,1,0,0,0,6379,6381,
        1,0,0,0,6380,6372,1,0,0,0,6380,6376,1,0,0,0,6380,6381,1,0,0,0,6381,
        755,1,0,0,0,6382,6385,3,758,379,0,6383,6385,3,752,376,0,6384,6382,
        1,0,0,0,6384,6383,1,0,0,0,6385,757,1,0,0,0,6386,6396,5,88,0,0,6387,
        6389,5,30,0,0,6388,6387,1,0,0,0,6388,6389,1,0,0,0,6389,6391,1,0,
        0,0,6390,6392,3,770,385,0,6391,6390,1,0,0,0,6391,6392,1,0,0,0,6392,
        6397,1,0,0,0,6393,6395,3,776,388,0,6394,6393,1,0,0,0,6394,6395,1,
        0,0,0,6395,6397,1,0,0,0,6396,6388,1,0,0,0,6396,6394,1,0,0,0,6397,
        6398,1,0,0,0,6398,6409,3,1224,612,0,6399,6409,3,810,405,0,6400,6401,
        5,92,0,0,6401,6409,3,826,413,0,6402,6403,3,752,376,0,6403,6406,3,
        760,380,0,6404,6407,3,758,379,0,6405,6407,3,752,376,0,6406,6404,
        1,0,0,0,6406,6405,1,0,0,0,6407,6409,1,0,0,0,6408,6386,1,0,0,0,6408,
        6399,1,0,0,0,6408,6400,1,0,0,0,6408,6402,1,0,0,0,6409,6417,1,0,0,
        0,6410,6413,3,760,380,0,6411,6414,3,758,379,0,6412,6414,3,752,376,
        0,6413,6411,1,0,0,0,6413,6412,1,0,0,0,6414,6416,1,0,0,0,6415,6410,
        1,0,0,0,6416,6419,1,0,0,0,6417,6415,1,0,0,0,6417,6418,1,0,0,0,6418,
        759,1,0,0,0,6419,6417,1,0,0,0,6420,6422,7,79,0,0,6421,6423,3,774,
        387,0,6422,6421,1,0,0,0,6422,6423,1,0,0,0,6423,761,1,0,0,0,6424,
        6426,5,105,0,0,6425,6427,5,303,0,0,6426,6425,1,0,0,0,6426,6427,1,
        0,0,0,6427,6428,1,0,0,0,6428,6433,3,764,382,0,6429,6430,5,6,0,0,
        6430,6432,3,764,382,0,6431,6429,1,0,0,0,6432,6435,1,0,0,0,6433,6431,
        1,0,0,0,6433,6434,1,0,0,0,6434,763,1,0,0,0,6435,6433,1,0,0,0,6436,
        6438,3,1068,534,0,6437,6439,3,184,92,0,6438,6437,1,0,0,0,6438,6439,
        1,0,0,0,6439,6440,1,0,0,0,6440,6445,5,36,0,0,6441,6443,5,77,0,0,
        6442,6441,1,0,0,0,6442,6443,1,0,0,0,6443,6444,1,0,0,0,6444,6446,
        5,259,0,0,6445,6442,1,0,0,0,6445,6446,1,0,0,0,6446,6447,1,0,0,0,
        6447,6448,5,2,0,0,6448,6449,3,710,355,0,6449,6451,5,3,0,0,6450,6452,
        3,766,383,0,6451,6450,1,0,0,0,6451,6452,1,0,0,0,6452,6454,1,0,0,
        0,6453,6455,3,768,384,0,6454,6453,1,0,0,0,6454,6455,1,0,0,0,6455,
        765,1,0,0,0,6456,6457,5,325,0,0,6457,6458,7,80,0,0,6458,6459,5,207,
        0,0,6459,6460,5,147,0,0,6460,6461,3,188,94,0,6461,6462,5,333,0,0,
        6462,6463,3,1048,524,0,6463,767,1,0,0,0,6464,6465,5,173,0,0,6465,
        6466,3,188,94,0,6466,6467,5,333,0,0,6467,6473,3,1048,524,0,6468,
        6469,5,94,0,0,6469,6470,3,1068,534,0,6470,6471,5,53,0,0,6471,6472,
        3,1068,534,0,6472,6474,1,0,0,0,6473,6468,1,0,0,0,6473,6474,1,0,0,
        0,6474,6475,1,0,0,0,6475,6476,5,100,0,0,6476,6477,3,1048,524,0,6477,
        769,1,0,0,0,6478,6484,5,71,0,0,6479,6481,5,346,0,0,6480,6479,1,0,
        0,0,6480,6481,1,0,0,0,6481,6482,1,0,0,0,6482,6485,3,772,386,0,6483,
        6485,3,964,482,0,6484,6480,1,0,0,0,6484,6483,1,0,0,0,6485,771,1,
        0,0,0,6486,6488,7,20,0,0,6487,6486,1,0,0,0,6487,6488,1,0,0,0,6488,
        6489,1,0,0,0,6489,6491,7,21,0,0,6490,6492,5,92,0,0,6491,6490,1,0,
        0,0,6491,6492,1,0,0,0,6492,6493,1,0,0,0,6493,6502,3,1020,510,0,6494,
        6496,5,367,0,0,6495,6494,1,0,0,0,6495,6496,1,0,0,0,6496,6498,1,0,
        0,0,6497,6499,5,92,0,0,6498,6497,1,0,0,0,6498,6499,1,0,0,0,6499,
        6500,1,0,0,0,6500,6502,3,1020,510,0,6501,6487,1,0,0,0,6501,6495,
        1,0,0,0,6502,773,1,0,0,0,6503,6504,7,81,0,0,6504,775,1,0,0,0,6505,
        6508,5,56,0,0,6506,6507,5,80,0,0,6507,6509,3,714,357,0,6508,6506,
        1,0,0,0,6508,6509,1,0,0,0,6509,777,1,0,0,0,6510,6511,5,83,0,0,6511,
        6512,5,147,0,0,6512,6517,3,780,390,0,6513,6514,5,6,0,0,6514,6516,
        3,780,390,0,6515,6513,1,0,0,0,6516,6519,1,0,0,0,6517,6515,1,0,0,
        0,6517,6518,1,0,0,0,6518,779,1,0,0,0,6519,6517,1,0,0,0,6520,6524,
        3,972,486,0,6521,6522,5,100,0,0,6522,6525,3,960,480,0,6523,6525,
        7,55,0,0,6524,6521,1,0,0,0,6524,6523,1,0,0,0,6524,6525,1,0,0,0,6525,
        6527,1,0,0,0,6526,6528,3,486,243,0,6527,6526,1,0,0,0,6527,6528,1,
        0,0,0,6528,781,1,0,0,0,6529,6531,3,788,394,0,6530,6532,3,786,393,
        0,6531,6530,1,0,0,0,6531,6532,1,0,0,0,6532,6541,1,0,0,0,6533,6536,
        3,784,392,0,6534,6536,3,786,393,0,6535,6533,1,0,0,0,6535,6534,1,
        0,0,0,6536,6538,1,0,0,0,6537,6539,3,788,394,0,6538,6537,1,0,0,0,
        6538,6539,1,0,0,0,6539,6541,1,0,0,0,6540,6529,1,0,0,0,6540,6535,
        1,0,0,0,6541,783,1,0,0,0,6542,6545,5,74,0,0,6543,6546,3,898,449,
        0,6544,6546,5,30,0,0,6545,6543,1,0,0,0,6545,6544,1,0,0,0,6546,6549,
        1,0,0,0,6547,6548,5,6,0,0,6548,6550,3,898,449,0,6549,6547,1,0,0,
        0,6549,6550,1,0,0,0,6550,785,1,0,0,0,6551,6552,5,61,0,0,6552,6566,
        7,82,0,0,6553,6554,3,790,395,0,6554,6558,3,792,396,0,6555,6559,5,
        81,0,0,6556,6557,5,105,0,0,6557,6559,5,467,0,0,6558,6555,1,0,0,0,
        6558,6556,1,0,0,0,6559,6567,1,0,0,0,6560,6564,3,792,396,0,6561,6565,
        5,81,0,0,6562,6563,5,105,0,0,6563,6565,5,467,0,0,6564,6561,1,0,0,
        0,6564,6562,1,0,0,0,6565,6567,1,0,0,0,6566,6553,1,0,0,0,6566,6560,
        1,0,0,0,6567,787,1,0,0,0,6568,6573,5,79,0,0,6569,6570,3,790,395,
        0,6570,6571,3,792,396,0,6571,6574,1,0,0,0,6572,6574,3,898,449,0,
        6573,6569,1,0,0,0,6573,6572,1,0,0,0,6574,789,1,0,0,0,6575,6576,7,
        29,0,0,6576,6579,7,83,0,0,6577,6579,3,906,453,0,6578,6575,1,0,0,
        0,6578,6577,1,0,0,0,6579,791,1,0,0,0,6580,6581,7,84,0,0,6581,793,
        1,0,0,0,6582,6583,5,66,0,0,6583,6585,5,147,0,0,6584,6586,3,774,387,
        0,6585,6584,1,0,0,0,6585,6586,1,0,0,0,6586,6587,1,0,0,0,6587,6588,
        3,796,398,0,6588,795,1,0,0,0,6589,6594,3,798,399,0,6590,6591,5,6,
        0,0,6591,6593,3,798,399,0,6592,6590,1,0,0,0,6593,6596,1,0,0,0,6594,
        6592,1,0,0,0,6594,6595,1,0,0,0,6595,797,1,0,0,0,6596,6594,1,0,0,
        0,6597,6613,3,972,486,0,6598,6613,3,800,400,0,6599,6601,7,85,0,0,
        6600,6599,1,0,0,0,6600,6601,1,0,0,0,6601,6602,1,0,0,0,6602,6603,
        5,2,0,0,6603,6604,3,966,483,0,6604,6605,5,3,0,0,6605,6613,1,0,0,
        0,6606,6607,5,470,0,0,6607,6608,5,471,0,0,6608,6609,5,2,0,0,6609,
        6610,3,796,398,0,6610,6611,5,3,0,0,6611,6613,1,0,0,0,6612,6597,1,
        0,0,0,6612,6598,1,0,0,0,6612,6600,1,0,0,0,6612,6606,1,0,0,0,6613,
        799,1,0,0,0,6614,6615,5,2,0,0,6615,6616,5,3,0,0,6616,801,1,0,0,0,
        6617,6618,5,67,0,0,6618,6619,3,898,449,0,6619,803,1,0,0,0,6620,6622,
        3,806,403,0,6621,6620,1,0,0,0,6622,6623,1,0,0,0,6623,6621,1,0,0,
        0,6623,6624,1,0,0,0,6624,6629,1,0,0,0,6625,6626,5,62,0,0,6626,6627,
        5,300,0,0,6627,6629,5,81,0,0,6628,6621,1,0,0,0,6628,6625,1,0,0,0,
        6629,805,1,0,0,0,6630,6633,3,808,404,0,6631,6632,5,275,0,0,6632,
        6634,3,1006,503,0,6633,6631,1,0,0,0,6633,6634,1,0,0,0,6634,6636,
        1,0,0,0,6635,6637,3,738,369,0,6636,6635,1,0,0,0,6636,6637,1,0,0,
        0,6637,807,1,0,0,0,6638,6648,5,62,0,0,6639,6640,5,269,0,0,6640,6642,
        5,245,0,0,6641,6639,1,0,0,0,6641,6642,1,0,0,0,6642,6643,1,0,0,0,
        6643,6649,5,369,0,0,6644,6646,5,245,0,0,6645,6644,1,0,0,0,6645,6646,
        1,0,0,0,6646,6647,1,0,0,0,6647,6649,5,334,0,0,6648,6641,1,0,0,0,
        6648,6645,1,0,0,0,6649,809,1,0,0,0,6650,6651,5,422,0,0,6651,6656,
        3,714,357,0,6652,6653,5,6,0,0,6653,6655,3,714,357,0,6654,6652,1,
        0,0,0,6655,6658,1,0,0,0,6656,6654,1,0,0,0,6656,6657,1,0,0,0,6657,
        811,1,0,0,0,6658,6656,1,0,0,0,6659,6660,5,64,0,0,6660,6661,3,814,
        407,0,6661,813,1,0,0,0,6662,6667,3,816,408,0,6663,6664,5,6,0,0,6664,
        6666,3,816,408,0,6665,6663,1,0,0,0,6666,6669,1,0,0,0,6667,6665,1,
        0,0,0,6667,6668,1,0,0,0,6668,815,1,0,0,0,6669,6667,1,0,0,0,6670,
        6673,3,826,413,0,6671,6673,3,828,414,0,6672,6670,1,0,0,0,6672,6671,
        1,0,0,0,6673,6675,1,0,0,0,6674,6676,3,818,409,0,6675,6674,1,0,0,
        0,6675,6676,1,0,0,0,6676,6678,1,0,0,0,6677,6679,3,838,419,0,6678,
        6677,1,0,0,0,6678,6679,1,0,0,0,6679,6722,1,0,0,0,6680,6682,5,72,
        0,0,6681,6680,1,0,0,0,6681,6682,1,0,0,0,6682,6695,1,0,0,0,6683,6685,
        3,856,428,0,6684,6686,3,818,409,0,6685,6684,1,0,0,0,6685,6686,1,
        0,0,0,6686,6696,1,0,0,0,6687,6689,3,842,421,0,6688,6690,3,820,410,
        0,6689,6688,1,0,0,0,6689,6690,1,0,0,0,6690,6696,1,0,0,0,6691,6693,
        3,752,376,0,6692,6694,3,818,409,0,6693,6692,1,0,0,0,6693,6694,1,
        0,0,0,6694,6696,1,0,0,0,6695,6683,1,0,0,0,6695,6687,1,0,0,0,6695,
        6691,1,0,0,0,6696,6722,1,0,0,0,6697,6698,5,2,0,0,6698,6715,3,816,
        408,0,6699,6700,5,110,0,0,6700,6701,5,118,0,0,6701,6716,3,816,408,
        0,6702,6704,5,121,0,0,6703,6705,3,822,411,0,6704,6703,1,0,0,0,6704,
        6705,1,0,0,0,6705,6706,1,0,0,0,6706,6707,5,118,0,0,6707,6716,3,816,
        408,0,6708,6710,3,822,411,0,6709,6708,1,0,0,0,6709,6710,1,0,0,0,
        6710,6711,1,0,0,0,6711,6712,5,118,0,0,6712,6713,3,816,408,0,6713,
        6714,3,824,412,0,6714,6716,1,0,0,0,6715,6699,1,0,0,0,6715,6702,1,
        0,0,0,6715,6709,1,0,0,0,6715,6716,1,0,0,0,6716,6717,1,0,0,0,6717,
        6719,5,3,0,0,6718,6720,3,818,409,0,6719,6718,1,0,0,0,6719,6720,1,
        0,0,0,6720,6722,1,0,0,0,6721,6672,1,0,0,0,6721,6681,1,0,0,0,6721,
        6697,1,0,0,0,6722,6741,1,0,0,0,6723,6724,5,110,0,0,6724,6725,5,118,
        0,0,6725,6740,3,816,408,0,6726,6728,5,121,0,0,6727,6729,3,822,411,
        0,6728,6727,1,0,0,0,6728,6729,1,0,0,0,6729,6730,1,0,0,0,6730,6731,
        5,118,0,0,6731,6740,3,816,408,0,6732,6734,3,822,411,0,6733,6732,
        1,0,0,0,6733,6734,1,0,0,0,6734,6735,1,0,0,0,6735,6736,5,118,0,0,
        6736,6737,3,816,408,0,6737,6738,3,824,412,0,6738,6740,1,0,0,0,6739,
        6723,1,0,0,0,6739,6726,1,0,0,0,6739,6733,1,0,0,0,6740,6743,1,0,0,
        0,6741,6739,1,0,0,0,6741,6742,1,0,0,0,6742,817,1,0,0,0,6743,6741,
        1,0,0,0,6744,6746,5,36,0,0,6745,6744,1,0,0,0,6745,6746,1,0,0,0,6746,
        6747,1,0,0,0,6747,6752,3,1068,534,0,6748,6749,5,2,0,0,6749,6750,
        3,1032,516,0,6750,6751,5,3,0,0,6751,6753,1,0,0,0,6752,6748,1,0,0,
        0,6752,6753,1,0,0,0,6753,819,1,0,0,0,6754,6767,3,818,409,0,6755,
        6757,5,36,0,0,6756,6758,3,1068,534,0,6757,6756,1,0,0,0,6757,6758,
        1,0,0,0,6758,6761,1,0,0,0,6759,6761,3,1068,534,0,6760,6755,1,0,0,
        0,6760,6759,1,0,0,0,6761,6762,1,0,0,0,6762,6763,5,2,0,0,6763,6764,
        3,852,426,0,6764,6765,5,3,0,0,6765,6767,1,0,0,0,6766,6754,1,0,0,
        0,6766,6760,1,0,0,0,6767,821,1,0,0,0,6768,6770,7,86,0,0,6769,6771,
        5,123,0,0,6770,6769,1,0,0,0,6770,6771,1,0,0,0,6771,823,1,0,0,0,6772,
        6773,5,100,0,0,6773,6777,3,184,92,0,6774,6775,5,80,0,0,6775,6777,
        3,898,449,0,6776,6772,1,0,0,0,6776,6774,1,0,0,0,6777,825,1,0,0,0,
        6778,6794,3,430,215,0,6779,6785,5,81,0,0,6780,6786,3,1022,511,0,
        6781,6782,5,2,0,0,6782,6783,3,1022,511,0,6783,6784,5,3,0,0,6784,
        6786,1,0,0,0,6785,6780,1,0,0,0,6785,6781,1,0,0,0,6786,6794,1,0,0,
        0,6787,6788,5,68,0,0,6788,6791,5,323,0,0,6789,6792,3,1038,519,0,
        6790,6792,5,111,0,0,6791,6789,1,0,0,0,6791,6790,1,0,0,0,6792,6794,
        1,0,0,0,6793,6778,1,0,0,0,6793,6779,1,0,0,0,6793,6787,1,0,0,0,6794,
        827,1,0,0,0,6795,6797,5,81,0,0,6796,6795,1,0,0,0,6796,6797,1,0,0,
        0,6797,6798,1,0,0,0,6798,6800,3,1026,513,0,6799,6801,5,9,0,0,6800,
        6799,1,0,0,0,6800,6801,1,0,0,0,6801,6803,1,0,0,0,6802,6804,3,188,
        94,0,6803,6802,1,0,0,0,6803,6804,1,0,0,0,6804,6806,1,0,0,0,6805,
        6807,3,848,424,0,6806,6805,1,0,0,0,6806,6807,1,0,0,0,6807,829,1,
        0,0,0,6808,6809,5,92,0,0,6809,6811,3,430,215,0,6810,6812,3,184,92,
        0,6811,6810,1,0,0,0,6811,6812,1,0,0,0,6812,6814,1,0,0,0,6813,6815,
        3,848,424,0,6814,6813,1,0,0,0,6814,6815,1,0,0,0,6815,6833,1,0,0,
        0,6816,6817,5,92,0,0,6817,6823,5,81,0,0,6818,6824,3,1022,511,0,6819,
        6820,5,2,0,0,6820,6821,3,1022,511,0,6821,6822,5,3,0,0,6822,6824,
        1,0,0,0,6823,6818,1,0,0,0,6823,6819,1,0,0,0,6824,6833,1,0,0,0,6825,
        6826,5,350,0,0,6826,6827,5,68,0,0,6827,6830,5,323,0,0,6828,6831,
        3,1038,519,0,6829,6831,5,111,0,0,6830,6828,1,0,0,0,6830,6829,1,0,
        0,0,6831,6833,1,0,0,0,6832,6808,1,0,0,0,6832,6816,1,0,0,0,6832,6825,
        1,0,0,0,6833,831,1,0,0,0,6834,6839,3,826,413,0,6835,6836,5,6,0,0,
        6836,6838,3,826,413,0,6837,6835,1,0,0,0,6838,6841,1,0,0,0,6839,6837,
        1,0,0,0,6839,6840,1,0,0,0,6840,833,1,0,0,0,6841,6839,1,0,0,0,6842,
        6847,3,830,415,0,6843,6844,5,6,0,0,6844,6846,3,830,415,0,6845,6843,
        1,0,0,0,6846,6849,1,0,0,0,6847,6845,1,0,0,0,6847,6848,1,0,0,0,6848,
        835,1,0,0,0,6849,6847,1,0,0,0,6850,6855,3,826,413,0,6851,6853,5,
        36,0,0,6852,6851,1,0,0,0,6852,6853,1,0,0,0,6853,6854,1,0,0,0,6854,
        6856,3,1068,534,0,6855,6852,1,0,0,0,6855,6856,1,0,0,0,6856,837,1,
        0,0,0,6857,6858,5,472,0,0,6858,6859,3,1054,527,0,6859,6861,3,714,
        357,0,6860,6862,3,840,420,0,6861,6860,1,0,0,0,6861,6862,1,0,0,0,
        6862,839,1,0,0,0,6863,6864,5,310,0,0,6864,6865,5,2,0,0,6865,6866,
        3,898,449,0,6866,6867,5,3,0,0,6867,841,1,0,0,0,6868,6876,3,912,456,
        0,6869,6870,5,320,0,0,6870,6871,5,64,0,0,6871,6872,5,2,0,0,6872,
        6873,3,846,423,0,6873,6874,5,3,0,0,6874,6876,1,0,0,0,6875,6868,1,
        0,0,0,6875,6869,1,0,0,0,6876,6879,1,0,0,0,6877,6878,5,105,0,0,6878,
        6880,5,473,0,0,6879,6877,1,0,0,0,6879,6880,1,0,0,0,6880,843,1,0,
        0,0,6881,6887,3,912,456,0,6882,6883,5,36,0,0,6883,6884,5,2,0,0,6884,
        6885,3,852,426,0,6885,6886,5,3,0,0,6886,6888,1,0,0,0,6887,6882,1,
        0,0,0,6887,6888,1,0,0,0,6888,845,1,0,0,0,6889,6894,3,844,422,0,6890,
        6891,5,6,0,0,6891,6893,3,844,422,0,6892,6890,1,0,0,0,6893,6896,1,
        0,0,0,6894,6892,1,0,0,0,6894,6895,1,0,0,0,6895,847,1,0,0,0,6896,
        6894,1,0,0,0,6897,6898,5,103,0,0,6898,6899,3,972,486,0,6899,849,
        1,0,0,0,6900,6905,5,103,0,0,6901,6902,5,434,0,0,6902,6903,5,275,
        0,0,6903,6906,3,1068,534,0,6904,6906,3,898,449,0,6905,6901,1,0,0,
        0,6905,6904,1,0,0,0,6906,851,1,0,0,0,6907,6912,3,854,427,0,6908,
        6909,5,6,0,0,6909,6911,3,854,427,0,6910,6908,1,0,0,0,6911,6914,1,
        0,0,0,6912,6910,1,0,0,0,6912,6913,1,0,0,0,6913,853,1,0,0,0,6914,
        6912,1,0,0,0,6915,6916,3,1068,534,0,6916,6918,3,870,435,0,6917,6919,
        3,102,51,0,6918,6917,1,0,0,0,6918,6919,1,0,0,0,6919,855,1,0,0,0,
        6920,6921,5,474,0,0,6921,6928,5,2,0,0,6922,6923,5,476,0,0,6923,6924,
        5,2,0,0,6924,6925,3,866,433,0,6925,6926,5,3,0,0,6926,6927,5,6,0,
        0,6927,6929,1,0,0,0,6928,6922,1,0,0,0,6928,6929,1,0,0,0,6929,6930,
        1,0,0,0,6930,6931,3,906,453,0,6931,6932,3,930,465,0,6932,6933,5,
        475,0,0,6933,6934,3,858,429,0,6934,6935,1,0,0,0,6935,6936,5,3,0,
        0,6936,857,1,0,0,0,6937,6942,3,860,430,0,6938,6939,5,6,0,0,6939,
        6941,3,860,430,0,6940,6938,1,0,0,0,6941,6944,1,0,0,0,6942,6940,1,
        0,0,0,6942,6943,1,0,0,0,6943,859,1,0,0,0,6944,6942,1,0,0,0,6945,
        6952,3,1068,534,0,6946,6948,3,870,435,0,6947,6949,3,862,431,0,6948,
        6947,1,0,0,0,6948,6949,1,0,0,0,6949,6953,1,0,0,0,6950,6951,5,62,
        0,0,6951,6953,5,473,0,0,6952,6946,1,0,0,0,6952,6950,1,0,0,0,6953,
        861,1,0,0,0,6954,6956,3,864,432,0,6955,6954,1,0,0,0,6956,6957,1,
        0,0,0,6957,6955,1,0,0,0,6957,6958,1,0,0,0,6958,863,1,0,0,0,6959,
        6962,5,53,0,0,6960,6962,3,1076,538,0,6961,6959,1,0,0,0,6961,6960,
        1,0,0,0,6962,6963,1,0,0,0,6963,6969,3,898,449,0,6964,6966,5,77,0,
        0,6965,6964,1,0,0,0,6965,6966,1,0,0,0,6966,6967,1,0,0,0,6967,6969,
        5,78,0,0,6968,6961,1,0,0,0,6968,6965,1,0,0,0,6969,865,1,0,0,0,6970,
        6975,3,868,434,0,6971,6972,5,6,0,0,6972,6974,3,868,434,0,6973,6971,
        1,0,0,0,6974,6977,1,0,0,0,6975,6973,1,0,0,0,6975,6976,1,0,0,0,6976,
        867,1,0,0,0,6977,6975,1,0,0,0,6978,6979,3,906,453,0,6979,6980,5,
        36,0,0,6980,6981,3,1074,537,0,6981,6985,1,0,0,0,6982,6983,5,53,0,
        0,6983,6985,3,906,453,0,6984,6978,1,0,0,0,6984,6982,1,0,0,0,6985,
        869,1,0,0,0,6986,6988,5,415,0,0,6987,6986,1,0,0,0,6987,6988,1,0,
        0,0,6988,6989,1,0,0,0,6989,6997,3,874,437,0,6990,6998,3,872,436,
        0,6991,6995,5,35,0,0,6992,6993,5,4,0,0,6993,6994,5,571,0,0,6994,
        6996,5,5,0,0,6995,6992,1,0,0,0,6995,6996,1,0,0,0,6996,6998,1,0,0,
        0,6997,6990,1,0,0,0,6997,6991,1,0,0,0,6998,7004,1,0,0,0,6999,7000,
        3,1028,514,0,7000,7001,5,27,0,0,7001,7002,7,87,0,0,7002,7004,1,0,
        0,0,7003,6987,1,0,0,0,7003,6999,1,0,0,0,7004,871,1,0,0,0,7005,7007,
        5,4,0,0,7006,7008,5,571,0,0,7007,7006,1,0,0,0,7007,7008,1,0,0,0,
        7008,7009,1,0,0,0,7009,7011,5,5,0,0,7010,7005,1,0,0,0,7011,7014,
        1,0,0,0,7012,7010,1,0,0,0,7012,7013,1,0,0,0,7013,873,1,0,0,0,7014,
        7012,1,0,0,0,7015,7025,3,878,439,0,7016,7025,3,876,438,0,7017,7022,
        5,403,0,0,7018,7020,3,892,446,0,7019,7018,1,0,0,0,7019,7020,1,0,
        0,0,7020,7023,1,0,0,0,7021,7023,3,882,441,0,7022,7019,1,0,0,0,7022,
        7021,1,0,0,0,7023,7025,1,0,0,0,7024,7015,1,0,0,0,7024,7016,1,0,0,
        0,7024,7017,1,0,0,0,7025,875,1,0,0,0,7026,7031,3,880,440,0,7027,
        7031,3,884,442,0,7028,7031,3,886,443,0,7029,7031,3,890,445,0,7030,
        7026,1,0,0,0,7030,7027,1,0,0,0,7030,7028,1,0,0,0,7030,7029,1,0,0,
        0,7031,877,1,0,0,0,7032,7034,3,1070,535,0,7033,7035,3,424,212,0,
        7034,7033,1,0,0,0,7034,7035,1,0,0,0,7035,7037,1,0,0,0,7036,7038,
        3,714,357,0,7037,7036,1,0,0,0,7037,7038,1,0,0,0,7038,879,1,0,0,0,
        7039,7056,5,401,0,0,7040,7056,5,402,0,0,7041,7056,5,416,0,0,7042,
        7056,5,388,0,0,7043,7056,5,413,0,0,7044,7046,5,398,0,0,7045,7047,
        3,882,441,0,7046,7045,1,0,0,0,7046,7047,1,0,0,0,7047,7056,1,0,0,
        0,7048,7049,5,190,0,0,7049,7056,5,412,0,0,7050,7052,7,88,0,0,7051,
        7053,3,714,357,0,7052,7051,1,0,0,0,7052,7053,1,0,0,0,7053,7056,1,
        0,0,0,7054,7056,5,390,0,0,7055,7039,1,0,0,0,7055,7040,1,0,0,0,7055,
        7041,1,0,0,0,7055,7042,1,0,0,0,7055,7043,1,0,0,0,7055,7044,1,0,0,
        0,7055,7048,1,0,0,0,7055,7050,1,0,0,0,7055,7054,1,0,0,0,7056,881,
        1,0,0,0,7057,7058,5,2,0,0,7058,7059,5,571,0,0,7059,7060,5,3,0,0,
        7060,883,1,0,0,0,7061,7063,5,389,0,0,7062,7064,5,374,0,0,7063,7062,
        1,0,0,0,7063,7064,1,0,0,0,7064,7066,1,0,0,0,7065,7067,3,714,357,
        0,7066,7065,1,0,0,0,7066,7067,1,0,0,0,7067,885,1,0,0,0,7068,7070,
        3,888,444,0,7069,7071,3,882,441,0,7070,7069,1,0,0,0,7070,7071,1,
        0,0,0,7071,887,1,0,0,0,7072,7074,7,89,0,0,7073,7075,5,374,0,0,7074,
        7073,1,0,0,0,7074,7075,1,0,0,0,7075,7083,1,0,0,0,7076,7083,5,423,
        0,0,7077,7078,5,405,0,0,7078,7080,7,90,0,0,7079,7081,5,374,0,0,7080,
        7079,1,0,0,0,7080,7081,1,0,0,0,7081,7083,1,0,0,0,7082,7072,1,0,0,
        0,7082,7076,1,0,0,0,7082,7077,1,0,0,0,7083,889,1,0,0,0,7084,7086,
        7,91,0,0,7085,7087,3,882,441,0,7086,7085,1,0,0,0,7086,7087,1,0,0,
        0,7087,7091,1,0,0,0,7088,7089,7,26,0,0,7089,7090,5,418,0,0,7090,
        7092,5,386,0,0,7091,7088,1,0,0,0,7091,7092,1,0,0,0,7092,891,1,0,
        0,0,7093,7123,5,264,0,0,7094,7123,3,894,447,0,7095,7098,5,384,0,
        0,7096,7097,5,94,0,0,7097,7099,5,264,0,0,7098,7096,1,0,0,0,7098,
        7099,1,0,0,0,7099,7123,1,0,0,0,7100,7107,5,176,0,0,7101,7105,5,94,
        0,0,7102,7106,5,218,0,0,7103,7106,5,261,0,0,7104,7106,3,894,447,
        0,7105,7102,1,0,0,0,7105,7103,1,0,0,0,7105,7104,1,0,0,0,7106,7108,
        1,0,0,0,7107,7101,1,0,0,0,7107,7108,1,0,0,0,7108,7123,1,0,0,0,7109,
        7115,5,218,0,0,7110,7113,5,94,0,0,7111,7114,5,261,0,0,7112,7114,
        3,894,447,0,7113,7111,1,0,0,0,7113,7112,1,0,0,0,7114,7116,1,0,0,
        0,7115,7110,1,0,0,0,7115,7116,1,0,0,0,7116,7123,1,0,0,0,7117,7120,
        5,261,0,0,7118,7119,5,94,0,0,7119,7121,3,894,447,0,7120,7118,1,0,
        0,0,7120,7121,1,0,0,0,7121,7123,1,0,0,0,7122,7093,1,0,0,0,7122,7094,
        1,0,0,0,7122,7095,1,0,0,0,7122,7100,1,0,0,0,7122,7109,1,0,0,0,7122,
        7117,1,0,0,0,7123,893,1,0,0,0,7124,7126,5,326,0,0,7125,7127,3,882,
        441,0,7126,7125,1,0,0,0,7126,7127,1,0,0,0,7127,895,1,0,0,0,7128,
        7129,7,92,0,0,7129,897,1,0,0,0,7130,7131,3,900,450,0,7131,899,1,
        0,0,0,7132,7133,6,450,-1,0,7133,7135,3,904,452,0,7134,7136,3,902,
        451,0,7135,7134,1,0,0,0,7135,7136,1,0,0,0,7136,7140,1,0,0,0,7137,
        7138,5,77,0,0,7138,7140,3,900,450,3,7139,7132,1,0,0,0,7139,7137,
        1,0,0,0,7140,7149,1,0,0,0,7141,7142,10,2,0,0,7142,7143,5,33,0,0,
        7143,7148,3,900,450,3,7144,7145,10,1,0,0,7145,7146,5,82,0,0,7146,
        7148,3,900,450,2,7147,7141,1,0,0,0,7147,7144,1,0,0,0,7148,7151,1,
        0,0,0,7149,7147,1,0,0,0,7149,7150,1,0,0,0,7150,901,1,0,0,0,7151,
        7149,1,0,0,0,7152,7153,3,896,448,0,7153,7154,3,904,452,0,7154,7224,
        1,0,0,0,7155,7156,3,896,448,0,7156,7157,3,962,481,0,7157,7163,3,
        952,476,0,7158,7164,3,752,376,0,7159,7160,5,2,0,0,7160,7161,3,898,
        449,0,7161,7162,5,3,0,0,7162,7164,1,0,0,0,7163,7158,1,0,0,0,7163,
        7159,1,0,0,0,7164,7224,1,0,0,0,7165,7167,5,77,0,0,7166,7165,1,0,
        0,0,7166,7167,1,0,0,0,7167,7168,1,0,0,0,7168,7169,5,387,0,0,7169,
        7170,3,904,452,0,7170,7171,5,33,0,0,7171,7172,3,904,452,0,7172,7224,
        1,0,0,0,7173,7175,5,77,0,0,7174,7173,1,0,0,0,7174,7175,1,0,0,0,7175,
        7176,1,0,0,0,7176,7177,5,68,0,0,7177,7178,5,2,0,0,7178,7183,3,898,
        449,0,7179,7180,5,6,0,0,7180,7182,3,898,449,0,7181,7179,1,0,0,0,
        7182,7185,1,0,0,0,7183,7181,1,0,0,0,7183,7184,1,0,0,0,7184,7186,
        1,0,0,0,7185,7183,1,0,0,0,7186,7187,5,3,0,0,7187,7224,1,0,0,0,7188,
        7190,5,77,0,0,7189,7188,1,0,0,0,7189,7190,1,0,0,0,7190,7191,1,0,
        0,0,7191,7192,5,68,0,0,7192,7224,3,752,376,0,7193,7195,5,77,0,0,
        7194,7193,1,0,0,0,7194,7195,1,0,0,0,7195,7204,1,0,0,0,7196,7205,
        5,120,0,0,7197,7205,5,114,0,0,7198,7199,5,127,0,0,7199,7205,5,94,
        0,0,7200,7202,5,387,0,0,7201,7203,5,91,0,0,7202,7201,1,0,0,0,7202,
        7203,1,0,0,0,7203,7205,1,0,0,0,7204,7196,1,0,0,0,7204,7197,1,0,0,
        0,7204,7198,1,0,0,0,7204,7200,1,0,0,0,7205,7206,1,0,0,0,7206,7209,
        3,904,452,0,7207,7208,5,197,0,0,7208,7210,3,904,452,0,7209,7207,
        1,0,0,0,7209,7210,1,0,0,0,7210,7224,1,0,0,0,7211,7213,5,116,0,0,
        7212,7214,5,77,0,0,7213,7212,1,0,0,0,7213,7214,1,0,0,0,7214,7215,
        1,0,0,0,7215,7224,5,78,0,0,7216,7218,5,116,0,0,7217,7219,5,77,0,
        0,7218,7217,1,0,0,0,7218,7219,1,0,0,0,7219,7220,1,0,0,0,7220,7221,
        5,56,0,0,7221,7222,5,64,0,0,7222,7224,3,904,452,0,7223,7152,1,0,
        0,0,7223,7155,1,0,0,0,7223,7166,1,0,0,0,7223,7174,1,0,0,0,7223,7189,
        1,0,0,0,7223,7194,1,0,0,0,7223,7211,1,0,0,0,7223,7216,1,0,0,0,7224,
        903,1,0,0,0,7225,7226,6,452,-1,0,7226,7230,3,906,453,0,7227,7228,
        7,29,0,0,7228,7230,3,904,452,4,7229,7225,1,0,0,0,7229,7227,1,0,0,
        0,7230,7247,1,0,0,0,7231,7232,10,3,0,0,7232,7233,7,93,0,0,7233,7246,
        3,904,452,4,7234,7235,10,2,0,0,7235,7236,7,29,0,0,7236,7246,3,904,
        452,3,7237,7238,10,1,0,0,7238,7239,5,15,0,0,7239,7246,3,904,452,
        2,7240,7241,10,5,0,0,7241,7242,5,142,0,0,7242,7243,5,418,0,0,7243,
        7244,5,386,0,0,7244,7246,3,898,449,0,7245,7231,1,0,0,0,7245,7234,
        1,0,0,0,7245,7237,1,0,0,0,7245,7240,1,0,0,0,7246,7249,1,0,0,0,7247,
        7245,1,0,0,0,7247,7248,1,0,0,0,7248,905,1,0,0,0,7249,7247,1,0,0,
        0,7250,7251,6,453,-1,0,7251,7252,7,94,0,0,7252,7339,3,752,376,0,
        7253,7256,5,35,0,0,7254,7257,3,752,376,0,7255,7257,3,978,489,0,7256,
        7254,1,0,0,0,7256,7255,1,0,0,0,7257,7339,1,0,0,0,7258,7259,5,28,
        0,0,7259,7339,3,1000,500,0,7260,7261,5,470,0,0,7261,7339,3,714,357,
        0,7262,7339,5,571,0,0,7263,7339,5,573,0,0,7264,7339,5,563,0,0,7265,
        7339,5,567,0,0,7266,7276,3,1054,527,0,7267,7277,3,1058,529,0,7268,
        7269,5,2,0,0,7269,7271,3,974,487,0,7270,7272,3,778,389,0,7271,7270,
        1,0,0,0,7271,7272,1,0,0,0,7272,7273,1,0,0,0,7273,7274,5,3,0,0,7274,
        7275,3,1058,529,0,7275,7277,1,0,0,0,7276,7267,1,0,0,0,7276,7268,
        1,0,0,0,7277,7339,1,0,0,0,7278,7280,3,876,438,0,7279,7278,1,0,0,
        0,7279,7280,1,0,0,0,7280,7281,1,0,0,0,7281,7339,3,1058,529,0,7282,
        7290,5,403,0,0,7283,7285,3,1058,529,0,7284,7286,3,892,446,0,7285,
        7284,1,0,0,0,7285,7286,1,0,0,0,7286,7291,1,0,0,0,7287,7288,3,882,
        441,0,7288,7289,3,1058,529,0,7289,7291,1,0,0,0,7290,7283,1,0,0,0,
        7290,7287,1,0,0,0,7291,7339,1,0,0,0,7292,7339,5,96,0,0,7293,7339,
        5,60,0,0,7294,7339,5,78,0,0,7295,7339,5,574,0,0,7296,7297,5,2,0,
        0,7297,7298,3,898,449,0,7298,7299,5,3,0,0,7299,7300,3,1000,500,0,
        7300,7339,1,0,0,0,7301,7303,5,40,0,0,7302,7304,3,898,449,0,7303,
        7302,1,0,0,0,7303,7304,1,0,0,0,7304,7306,1,0,0,0,7305,7307,3,994,
        497,0,7306,7305,1,0,0,0,7307,7308,1,0,0,0,7308,7306,1,0,0,0,7308,
        7309,1,0,0,0,7309,7312,1,0,0,0,7310,7311,5,58,0,0,7311,7313,3,898,
        449,0,7312,7310,1,0,0,0,7312,7313,1,0,0,0,7313,7314,1,0,0,0,7314,
        7315,5,454,0,0,7315,7339,1,0,0,0,7316,7339,3,910,455,0,7317,7319,
        3,752,376,0,7318,7320,3,998,499,0,7319,7318,1,0,0,0,7319,7320,1,
        0,0,0,7320,7339,1,0,0,0,7321,7339,3,950,475,0,7322,7323,5,2,0,0,
        7323,7324,3,898,449,0,7324,7325,5,6,0,0,7325,7326,3,964,482,0,7326,
        7327,5,3,0,0,7327,7339,1,0,0,0,7328,7329,3,948,474,0,7329,7330,5,
        125,0,0,7330,7331,3,948,474,0,7331,7339,1,0,0,0,7332,7339,3,1028,
        514,0,7333,7334,7,29,0,0,7334,7339,3,906,453,5,7335,7336,3,958,479,
        0,7336,7337,3,906,453,2,7337,7339,1,0,0,0,7338,7250,1,0,0,0,7338,
        7253,1,0,0,0,7338,7258,1,0,0,0,7338,7260,1,0,0,0,7338,7262,1,0,0,
        0,7338,7263,1,0,0,0,7338,7264,1,0,0,0,7338,7265,1,0,0,0,7338,7266,
        1,0,0,0,7338,7279,1,0,0,0,7338,7282,1,0,0,0,7338,7292,1,0,0,0,7338,
        7293,1,0,0,0,7338,7294,1,0,0,0,7338,7295,1,0,0,0,7338,7296,1,0,0,
        0,7338,7301,1,0,0,0,7338,7316,1,0,0,0,7338,7317,1,0,0,0,7338,7321,
        1,0,0,0,7338,7322,1,0,0,0,7338,7328,1,0,0,0,7338,7332,1,0,0,0,7338,
        7333,1,0,0,0,7338,7335,1,0,0,0,7339,7367,1,0,0,0,7340,7341,10,3,
        0,0,7341,7342,3,956,478,0,7342,7343,3,906,453,4,7343,7366,1,0,0,
        0,7344,7345,10,6,0,0,7345,7346,5,26,0,0,7346,7366,3,870,435,0,7347,
        7348,10,4,0,0,7348,7350,3,958,479,0,7349,7351,3,906,453,0,7350,7349,
        1,0,0,0,7350,7351,1,0,0,0,7351,7366,1,0,0,0,7352,7353,10,1,0,0,7353,
        7355,5,116,0,0,7354,7356,5,77,0,0,7355,7354,1,0,0,0,7355,7356,1,
        0,0,0,7356,7363,1,0,0,0,7357,7358,5,56,0,0,7358,7359,5,64,0,0,7359,
        7364,3,906,453,0,7360,7361,5,275,0,0,7361,7364,3,708,354,0,7362,
        7364,5,188,0,0,7363,7357,1,0,0,0,7363,7360,1,0,0,0,7363,7362,1,0,
        0,0,7364,7366,1,0,0,0,7365,7340,1,0,0,0,7365,7344,1,0,0,0,7365,7347,
        1,0,0,0,7365,7352,1,0,0,0,7366,7369,1,0,0,0,7367,7365,1,0,0,0,7367,
        7368,1,0,0,0,7368,907,1,0,0,0,7369,7367,1,0,0,0,7370,7396,3,1054,
        527,0,7371,7393,5,2,0,0,7372,7376,3,974,487,0,7373,7374,5,6,0,0,
        7374,7375,5,101,0,0,7375,7377,3,976,488,0,7376,7373,1,0,0,0,7376,
        7377,1,0,0,0,7377,7379,1,0,0,0,7378,7380,3,778,389,0,7379,7378,1,
        0,0,0,7379,7380,1,0,0,0,7380,7394,1,0,0,0,7381,7382,5,101,0,0,7382,
        7384,3,976,488,0,7383,7385,3,778,389,0,7384,7383,1,0,0,0,7384,7385,
        1,0,0,0,7385,7394,1,0,0,0,7386,7387,7,81,0,0,7387,7389,3,974,487,
        0,7388,7390,3,778,389,0,7389,7388,1,0,0,0,7389,7390,1,0,0,0,7390,
        7394,1,0,0,0,7391,7394,5,9,0,0,7392,7394,1,0,0,0,7393,7372,1,0,0,
        0,7393,7381,1,0,0,0,7393,7386,1,0,0,0,7393,7391,1,0,0,0,7393,7392,
        1,0,0,0,7394,7395,1,0,0,0,7395,7397,5,3,0,0,7396,7371,1,0,0,0,7396,
        7397,1,0,0,0,7397,909,1,0,0,0,7398,7405,3,908,454,0,7399,7400,5,
        479,0,0,7400,7401,5,66,0,0,7401,7402,5,2,0,0,7402,7403,3,778,389,
        0,7403,7404,5,3,0,0,7404,7406,1,0,0,0,7405,7399,1,0,0,0,7405,7406,
        1,0,0,0,7406,7413,1,0,0,0,7407,7408,5,480,0,0,7408,7409,5,2,0,0,
        7409,7410,5,103,0,0,7410,7411,3,898,449,0,7411,7412,5,3,0,0,7412,
        7414,1,0,0,0,7413,7407,1,0,0,0,7413,7414,1,0,0,0,7414,7420,1,0,0,
        0,7415,7418,5,124,0,0,7416,7419,3,942,471,0,7417,7419,3,1068,534,
        0,7418,7416,1,0,0,0,7418,7417,1,0,0,0,7419,7421,1,0,0,0,7420,7415,
        1,0,0,0,7420,7421,1,0,0,0,7421,7424,1,0,0,0,7422,7424,3,914,457,
        0,7423,7398,1,0,0,0,7423,7422,1,0,0,0,7424,911,1,0,0,0,7425,7428,
        3,908,454,0,7426,7428,3,914,457,0,7427,7425,1,0,0,0,7427,7426,1,
        0,0,0,7428,913,1,0,0,0,7429,7430,5,108,0,0,7430,7431,5,62,0,0,7431,
        7432,5,2,0,0,7432,7433,3,898,449,0,7433,7434,5,3,0,0,7434,7568,1,
        0,0,0,7435,7568,5,48,0,0,7436,7438,7,95,0,0,7437,7439,3,882,441,
        0,7438,7437,1,0,0,0,7438,7439,1,0,0,0,7439,7568,1,0,0,0,7440,7568,
        5,49,0,0,7441,7568,5,52,0,0,7442,7568,5,89,0,0,7443,7568,5,99,0,
        0,7444,7568,5,47,0,0,7445,7568,5,111,0,0,7446,7447,7,96,0,0,7447,
        7448,5,2,0,0,7448,7449,3,898,449,0,7449,7450,5,36,0,0,7450,7451,
        3,870,435,0,7451,7452,5,3,0,0,7452,7568,1,0,0,0,7453,7454,5,397,
        0,0,7454,7456,5,2,0,0,7455,7457,3,982,491,0,7456,7455,1,0,0,0,7456,
        7457,1,0,0,0,7457,7458,1,0,0,0,7458,7568,5,3,0,0,7459,7460,5,489,
        0,0,7460,7461,5,2,0,0,7461,7464,3,898,449,0,7462,7463,5,6,0,0,7463,
        7465,3,986,493,0,7464,7462,1,0,0,0,7464,7465,1,0,0,0,7465,7466,1,
        0,0,0,7466,7467,5,3,0,0,7467,7568,1,0,0,0,7468,7469,5,410,0,0,7469,
        7470,5,2,0,0,7470,7471,3,988,494,0,7471,7472,5,3,0,0,7472,7568,1,
        0,0,0,7473,7474,5,411,0,0,7474,7479,5,2,0,0,7475,7476,3,906,453,
        0,7476,7477,5,68,0,0,7477,7478,3,906,453,0,7478,7480,1,0,0,0,7479,
        7475,1,0,0,0,7479,7480,1,0,0,0,7480,7481,1,0,0,0,7481,7568,5,3,0,
        0,7482,7483,5,417,0,0,7483,7485,5,2,0,0,7484,7486,3,990,495,0,7485,
        7484,1,0,0,0,7485,7486,1,0,0,0,7486,7487,1,0,0,0,7487,7568,5,3,0,
        0,7488,7489,5,421,0,0,7489,7491,5,2,0,0,7490,7492,7,97,0,0,7491,
        7490,1,0,0,0,7491,7492,1,0,0,0,7492,7493,1,0,0,0,7493,7494,3,992,
        496,0,7494,7495,5,3,0,0,7495,7568,1,0,0,0,7496,7497,5,408,0,0,7497,
        7498,5,2,0,0,7498,7499,3,898,449,0,7499,7500,5,6,0,0,7500,7501,3,
        898,449,0,7501,7502,5,3,0,0,7502,7568,1,0,0,0,7503,7504,7,98,0,0,
        7504,7568,3,714,357,0,7505,7506,5,426,0,0,7506,7507,5,2,0,0,7507,
        7508,5,266,0,0,7508,7514,3,1074,537,0,7509,7512,5,6,0,0,7510,7513,
        3,920,460,0,7511,7513,3,964,482,0,7512,7510,1,0,0,0,7512,7511,1,
        0,0,0,7513,7515,1,0,0,0,7514,7509,1,0,0,0,7514,7515,1,0,0,0,7515,
        7516,1,0,0,0,7516,7517,5,3,0,0,7517,7568,1,0,0,0,7518,7519,5,427,
        0,0,7519,7520,5,2,0,0,7520,7521,3,906,453,0,7521,7522,3,930,465,
        0,7522,7523,5,3,0,0,7523,7568,1,0,0,0,7524,7525,5,428,0,0,7525,7526,
        5,2,0,0,7526,7527,3,922,461,0,7527,7528,5,3,0,0,7528,7568,1,0,0,
        0,7529,7530,5,429,0,0,7530,7531,5,2,0,0,7531,7532,3,926,463,0,7532,
        7534,3,898,449,0,7533,7535,3,928,464,0,7534,7533,1,0,0,0,7534,7535,
        1,0,0,0,7535,7536,1,0,0,0,7536,7537,5,3,0,0,7537,7568,1,0,0,0,7538,
        7539,5,430,0,0,7539,7540,5,2,0,0,7540,7541,5,266,0,0,7541,7544,3,
        1074,537,0,7542,7543,5,6,0,0,7543,7545,3,898,449,0,7544,7542,1,0,
        0,0,7544,7545,1,0,0,0,7545,7546,1,0,0,0,7546,7547,5,3,0,0,7547,7568,
        1,0,0,0,7548,7549,5,431,0,0,7549,7550,5,2,0,0,7550,7551,5,383,0,
        0,7551,7552,3,898,449,0,7552,7553,5,6,0,0,7553,7555,3,916,458,0,
        7554,7556,3,918,459,0,7555,7554,1,0,0,0,7555,7556,1,0,0,0,7556,7557,
        1,0,0,0,7557,7558,5,3,0,0,7558,7568,1,0,0,0,7559,7560,5,432,0,0,
        7560,7561,5,2,0,0,7561,7562,3,926,463,0,7562,7563,3,898,449,0,7563,
        7564,5,36,0,0,7564,7565,3,874,437,0,7565,7566,5,3,0,0,7566,7568,
        1,0,0,0,7567,7429,1,0,0,0,7567,7435,1,0,0,0,7567,7436,1,0,0,0,7567,
        7440,1,0,0,0,7567,7441,1,0,0,0,7567,7442,1,0,0,0,7567,7443,1,0,0,
        0,7567,7444,1,0,0,0,7567,7445,1,0,0,0,7567,7446,1,0,0,0,7567,7453,
        1,0,0,0,7567,7459,1,0,0,0,7567,7468,1,0,0,0,7567,7473,1,0,0,0,7567,
        7482,1,0,0,0,7567,7488,1,0,0,0,7567,7496,1,0,0,0,7567,7503,1,0,0,
        0,7567,7505,1,0,0,0,7567,7518,1,0,0,0,7567,7524,1,0,0,0,7567,7529,
        1,0,0,0,7567,7538,1,0,0,0,7567,7548,1,0,0,0,7567,7559,1,0,0,0,7568,
        915,1,0,0,0,7569,7573,5,375,0,0,7570,7571,5,269,0,0,7571,7574,5,
        450,0,0,7572,7574,3,898,449,0,7573,7570,1,0,0,0,7573,7572,1,0,0,
        0,7574,917,1,0,0,0,7575,7576,5,6,0,0,7576,7582,5,339,0,0,7577,7579,
        5,269,0,0,7578,7577,1,0,0,0,7578,7579,1,0,0,0,7579,7580,1,0,0,0,
        7580,7583,5,450,0,0,7581,7583,5,385,0,0,7582,7578,1,0,0,0,7582,7581,
        1,0,0,0,7583,919,1,0,0,0,7584,7585,5,424,0,0,7585,7586,5,2,0,0,7586,
        7587,3,922,461,0,7587,7588,5,3,0,0,7588,921,1,0,0,0,7589,7594,3,
        924,462,0,7590,7591,5,6,0,0,7591,7593,3,924,462,0,7592,7590,1,0,
        0,0,7593,7596,1,0,0,0,7594,7592,1,0,0,0,7594,7595,1,0,0,0,7595,923,
        1,0,0,0,7596,7594,1,0,0,0,7597,7600,3,898,449,0,7598,7599,5,36,0,
        0,7599,7601,3,1074,537,0,7600,7598,1,0,0,0,7600,7601,1,0,0,0,7601,
        925,1,0,0,0,7602,7603,7,99,0,0,7603,927,1,0,0,0,7604,7605,7,100,
        0,0,7605,7606,5,378,0,0,7606,929,1,0,0,0,7607,7609,5,286,0,0,7608,
        7610,3,932,466,0,7609,7608,1,0,0,0,7609,7610,1,0,0,0,7610,7611,1,
        0,0,0,7611,7613,3,906,453,0,7612,7614,3,932,466,0,7613,7612,1,0,
        0,0,7613,7614,1,0,0,0,7614,931,1,0,0,0,7615,7616,5,147,0,0,7616,
        7617,7,101,0,0,7617,933,1,0,0,0,7618,7619,5,104,0,0,7619,7620,3,
        936,468,0,7620,935,1,0,0,0,7621,7626,3,938,469,0,7622,7623,5,6,0,
        0,7623,7625,3,938,469,0,7624,7622,1,0,0,0,7625,7628,1,0,0,0,7626,
        7624,1,0,0,0,7626,7627,1,0,0,0,7627,937,1,0,0,0,7628,7626,1,0,0,
        0,7629,7630,3,1068,534,0,7630,7631,5,36,0,0,7631,7632,3,942,471,
        0,7632,939,1,0,0,0,7633,7636,5,124,0,0,7634,7637,3,942,471,0,7635,
        7637,3,1068,534,0,7636,7634,1,0,0,0,7636,7635,1,0,0,0,7637,941,1,
        0,0,0,7638,7640,5,2,0,0,7639,7641,3,1068,534,0,7640,7639,1,0,0,0,
        7640,7641,1,0,0,0,7641,7645,1,0,0,0,7642,7643,5,285,0,0,7643,7644,
        5,147,0,0,7644,7646,3,964,482,0,7645,7642,1,0,0,0,7645,7646,1,0,
        0,0,7646,7648,1,0,0,0,7647,7649,3,778,389,0,7648,7647,1,0,0,0,7648,
        7649,1,0,0,0,7649,7651,1,0,0,0,7650,7652,3,944,472,0,7651,7650,1,
        0,0,0,7651,7652,1,0,0,0,7652,7653,1,0,0,0,7653,7654,5,3,0,0,7654,
        943,1,0,0,0,7655,7660,7,102,0,0,7656,7657,5,387,0,0,7657,7658,3,
        946,473,0,7658,7659,5,33,0,0,7659,7661,1,0,0,0,7660,7656,1,0,0,0,
        7660,7661,1,0,0,0,7661,7662,1,0,0,0,7662,7663,3,946,473,0,7663,7673,
        1,0,0,0,7664,7671,5,199,0,0,7665,7666,5,434,0,0,7666,7672,5,414,
        0,0,7667,7672,5,66,0,0,7668,7672,5,467,0,0,7669,7670,5,269,0,0,7670,
        7672,5,482,0,0,7671,7665,1,0,0,0,7671,7667,1,0,0,0,7671,7668,1,0,
        0,0,7671,7669,1,0,0,0,7672,7674,1,0,0,0,7673,7664,1,0,0,0,7673,7674,
        1,0,0,0,7674,945,1,0,0,0,7675,7678,5,362,0,0,7676,7678,3,898,449,
        0,7677,7675,1,0,0,0,7677,7676,1,0,0,0,7678,7679,1,0,0,0,7679,7683,
        7,103,0,0,7680,7681,5,434,0,0,7681,7683,5,414,0,0,7682,7677,1,0,
        0,0,7682,7680,1,0,0,0,7683,947,1,0,0,0,7684,7692,3,950,475,0,7685,
        7686,5,2,0,0,7686,7687,3,964,482,0,7687,7688,5,6,0,0,7688,7689,3,
        898,449,0,7689,7690,5,3,0,0,7690,7692,1,0,0,0,7691,7684,1,0,0,0,
        7691,7685,1,0,0,0,7692,949,1,0,0,0,7693,7694,5,414,0,0,7694,7696,
        5,2,0,0,7695,7697,3,964,482,0,7696,7695,1,0,0,0,7696,7697,1,0,0,
        0,7697,7698,1,0,0,0,7698,7699,5,3,0,0,7699,951,1,0,0,0,7700,7701,
        7,104,0,0,7701,953,1,0,0,0,7702,7705,5,29,0,0,7703,7705,3,956,478,
        0,7704,7702,1,0,0,0,7704,7703,1,0,0,0,7705,955,1,0,0,0,7706,7707,
        7,105,0,0,7707,957,1,0,0,0,7708,7715,5,29,0,0,7709,7710,5,278,0,
        0,7710,7711,5,2,0,0,7711,7712,3,554,277,0,7712,7713,5,3,0,0,7713,
        7715,1,0,0,0,7714,7708,1,0,0,0,7714,7709,1,0,0,0,7715,959,1,0,0,
        0,7716,7723,3,954,477,0,7717,7718,5,278,0,0,7718,7719,5,2,0,0,7719,
        7720,3,554,277,0,7720,7721,5,3,0,0,7721,7723,1,0,0,0,7722,7716,1,
        0,0,0,7722,7717,1,0,0,0,7723,961,1,0,0,0,7724,7734,3,960,480,0,7725,
        7727,5,77,0,0,7726,7725,1,0,0,0,7726,7727,1,0,0,0,7727,7728,1,0,
        0,0,7728,7734,5,120,0,0,7729,7731,5,77,0,0,7730,7729,1,0,0,0,7730,
        7731,1,0,0,0,7731,7732,1,0,0,0,7732,7734,5,114,0,0,7733,7724,1,0,
        0,0,7733,7726,1,0,0,0,7733,7730,1,0,0,0,7734,963,1,0,0,0,7735,7740,
        3,898,449,0,7736,7737,5,6,0,0,7737,7739,3,898,449,0,7738,7736,1,
        0,0,0,7739,7742,1,0,0,0,7740,7738,1,0,0,0,7740,7741,1,0,0,0,7741,
        965,1,0,0,0,7742,7740,1,0,0,0,7743,7748,3,972,486,0,7744,7745,5,
        6,0,0,7745,7747,3,972,486,0,7746,7744,1,0,0,0,7747,7750,1,0,0,0,
        7748,7746,1,0,0,0,7748,7749,1,0,0,0,7749,967,1,0,0,0,7750,7748,1,
        0,0,0,7751,7756,3,970,485,0,7752,7753,5,6,0,0,7753,7755,3,970,485,
        0,7754,7752,1,0,0,0,7755,7758,1,0,0,0,7756,7754,1,0,0,0,7756,7757,
        1,0,0,0,7757,969,1,0,0,0,7758,7756,1,0,0,0,7759,7760,5,2,0,0,7760,
        7761,3,898,449,0,7761,7762,5,3,0,0,7762,7765,1,0,0,0,7763,7765,3,
        1048,524,0,7764,7759,1,0,0,0,7764,7763,1,0,0,0,7765,971,1,0,0,0,
        7766,7769,3,898,449,0,7767,7769,3,1048,524,0,7768,7766,1,0,0,0,7768,
        7767,1,0,0,0,7769,973,1,0,0,0,7770,7775,3,976,488,0,7771,7772,5,
        6,0,0,7772,7774,3,976,488,0,7773,7771,1,0,0,0,7774,7777,1,0,0,0,
        7775,7773,1,0,0,0,7775,7776,1,0,0,0,7776,975,1,0,0,0,7777,7775,1,
        0,0,0,7778,7784,3,898,449,0,7779,7780,3,1070,535,0,7780,7781,7,106,
        0,0,7781,7782,3,898,449,0,7782,7784,1,0,0,0,7783,7778,1,0,0,0,7783,
        7779,1,0,0,0,7784,977,1,0,0,0,7785,7788,5,4,0,0,7786,7789,3,964,
        482,0,7787,7789,3,980,490,0,7788,7786,1,0,0,0,7788,7787,1,0,0,0,
        7788,7789,1,0,0,0,7789,7790,1,0,0,0,7790,7791,5,5,0,0,7791,979,1,
        0,0,0,7792,7797,3,978,489,0,7793,7794,5,6,0,0,7794,7796,3,978,489,
        0,7795,7793,1,0,0,0,7796,7799,1,0,0,0,7797,7795,1,0,0,0,7797,7798,
        1,0,0,0,7798,981,1,0,0,0,7799,7797,1,0,0,0,7800,7801,3,984,492,0,
        7801,7802,5,64,0,0,7802,7803,3,898,449,0,7803,983,1,0,0,0,7804,7813,
        3,1076,538,0,7805,7813,5,384,0,0,7806,7813,5,264,0,0,7807,7813,5,
        176,0,0,7808,7813,5,218,0,0,7809,7813,5,261,0,0,7810,7813,5,326,
        0,0,7811,7813,3,1058,529,0,7812,7804,1,0,0,0,7812,7805,1,0,0,0,7812,
        7806,1,0,0,0,7812,7807,1,0,0,0,7812,7808,1,0,0,0,7812,7809,1,0,0,
        0,7812,7810,1,0,0,0,7812,7811,1,0,0,0,7813,985,1,0,0,0,7814,7815,
        7,107,0,0,7815,987,1,0,0,0,7816,7817,3,898,449,0,7817,7818,5,84,
        0,0,7818,7819,3,898,449,0,7819,7820,5,64,0,0,7820,7823,3,898,449,
        0,7821,7822,5,62,0,0,7822,7824,3,898,449,0,7823,7821,1,0,0,0,7823,
        7824,1,0,0,0,7824,989,1,0,0,0,7825,7826,3,898,449,0,7826,7827,5,
        64,0,0,7827,7830,3,898,449,0,7828,7829,5,62,0,0,7829,7831,3,898,
        449,0,7830,7828,1,0,0,0,7830,7831,1,0,0,0,7831,7847,1,0,0,0,7832,
        7833,3,898,449,0,7833,7834,5,62,0,0,7834,7837,3,898,449,0,7835,7836,
        5,64,0,0,7836,7838,3,898,449,0,7837,7835,1,0,0,0,7837,7838,1,0,0,
        0,7838,7847,1,0,0,0,7839,7840,3,898,449,0,7840,7841,5,127,0,0,7841,
        7842,3,898,449,0,7842,7843,5,197,0,0,7843,7844,3,898,449,0,7844,
        7847,1,0,0,0,7845,7847,3,964,482,0,7846,7825,1,0,0,0,7846,7832,1,
        0,0,0,7846,7839,1,0,0,0,7846,7845,1,0,0,0,7847,991,1,0,0,0,7848,
        7850,3,898,449,0,7849,7848,1,0,0,0,7849,7850,1,0,0,0,7850,7851,1,
        0,0,0,7851,7853,5,64,0,0,7852,7849,1,0,0,0,7852,7853,1,0,0,0,7853,
        7854,1,0,0,0,7854,7855,3,964,482,0,7855,993,1,0,0,0,7856,7857,5,
        102,0,0,7857,7858,3,898,449,0,7858,7859,5,93,0,0,7859,7860,3,898,
        449,0,7860,995,1,0,0,0,7861,7864,5,11,0,0,7862,7865,3,1074,537,0,
        7863,7865,5,9,0,0,7864,7862,1,0,0,0,7864,7863,1,0,0,0,7865,7879,
        1,0,0,0,7866,7875,5,4,0,0,7867,7876,3,898,449,0,7868,7870,3,898,
        449,0,7869,7868,1,0,0,0,7869,7870,1,0,0,0,7870,7871,1,0,0,0,7871,
        7873,5,8,0,0,7872,7874,3,898,449,0,7873,7872,1,0,0,0,7873,7874,1,
        0,0,0,7874,7876,1,0,0,0,7875,7867,1,0,0,0,7875,7869,1,0,0,0,7876,
        7877,1,0,0,0,7877,7879,5,5,0,0,7878,7861,1,0,0,0,7878,7866,1,0,0,
        0,7879,997,1,0,0,0,7880,7882,3,996,498,0,7881,7880,1,0,0,0,7882,
        7883,1,0,0,0,7883,7881,1,0,0,0,7883,7884,1,0,0,0,7884,999,1,0,0,
        0,7885,7887,3,996,498,0,7886,7885,1,0,0,0,7887,7890,1,0,0,0,7888,
        7886,1,0,0,0,7888,7889,1,0,0,0,7889,1001,1,0,0,0,7890,7888,1,0,0,
        0,7891,7896,3,1004,502,0,7892,7893,5,6,0,0,7893,7895,3,1004,502,
        0,7894,7892,1,0,0,0,7895,7898,1,0,0,0,7896,7894,1,0,0,0,7896,7897,
        1,0,0,0,7897,1003,1,0,0,0,7898,7896,1,0,0,0,7899,7904,3,972,486,
        0,7900,7901,5,36,0,0,7901,7905,3,1074,537,0,7902,7905,3,1076,538,
        0,7903,7905,1,0,0,0,7904,7900,1,0,0,0,7904,7902,1,0,0,0,7904,7903,
        1,0,0,0,7905,7908,1,0,0,0,7906,7908,5,9,0,0,7907,7899,1,0,0,0,7907,
        7906,1,0,0,0,7908,1005,1,0,0,0,7909,7914,3,1028,514,0,7910,7911,
        5,6,0,0,7911,7913,3,1028,514,0,7912,7910,1,0,0,0,7913,7916,1,0,0,
        0,7914,7912,1,0,0,0,7914,7915,1,0,0,0,7915,1007,1,0,0,0,7916,7914,
        1,0,0,0,7917,7922,3,1022,511,0,7918,7919,5,6,0,0,7919,7921,3,1022,
        511,0,7920,7918,1,0,0,0,7921,7924,1,0,0,0,7922,7920,1,0,0,0,7922,
        7923,1,0,0,0,7923,1009,1,0,0,0,7924,7922,1,0,0,0,7925,7930,3,1038,
        519,0,7926,7927,5,6,0,0,7927,7929,3,1038,519,0,7928,7926,1,0,0,0,
        7929,7932,1,0,0,0,7930,7928,1,0,0,0,7930,7931,1,0,0,0,7931,1011,
        1,0,0,0,7932,7930,1,0,0,0,7933,7938,3,1036,518,0,7934,7935,5,6,0,
        0,7935,7937,3,1036,518,0,7936,7934,1,0,0,0,7937,7940,1,0,0,0,7938,
        7936,1,0,0,0,7938,7939,1,0,0,0,7939,1013,1,0,0,0,7940,7938,1,0,0,
        0,7941,7946,3,1044,522,0,7942,7943,5,6,0,0,7943,7945,3,1044,522,
        0,7944,7942,1,0,0,0,7945,7948,1,0,0,0,7946,7944,1,0,0,0,7946,7947,
        1,0,0,0,7947,1015,1,0,0,0,7948,7946,1,0,0,0,7949,7950,3,1028,514,
        0,7950,1017,1,0,0,0,7951,7952,3,1028,514,0,7952,1019,1,0,0,0,7953,
        7954,3,1028,514,0,7954,1021,1,0,0,0,7955,7956,3,1028,514,0,7956,
        1023,1,0,0,0,7957,7958,3,1028,514,0,7958,1025,1,0,0,0,7959,7960,
        3,422,211,0,7960,1027,1,0,0,0,7961,7963,3,1068,534,0,7962,7964,3,
        998,499,0,7963,7962,1,0,0,0,7963,7964,1,0,0,0,7964,1029,1,0,0,0,
        7965,7970,3,1018,509,0,7966,7967,5,6,0,0,7967,7969,3,1018,509,0,
        7968,7966,1,0,0,0,7969,7972,1,0,0,0,7970,7968,1,0,0,0,7970,7971,
        1,0,0,0,7971,1031,1,0,0,0,7972,7970,1,0,0,0,7973,7978,3,1068,534,
        0,7974,7975,5,6,0,0,7975,7977,3,1068,534,0,7976,7974,1,0,0,0,7977,
        7980,1,0,0,0,7978,7976,1,0,0,0,7978,7979,1,0,0,0,7979,1033,1,0,0,
        0,7980,7978,1,0,0,0,7981,7982,3,422,211,0,7982,1035,1,0,0,0,7983,
        7984,3,422,211,0,7984,1037,1,0,0,0,7985,7986,3,422,211,0,7986,1039,
        1,0,0,0,7987,7988,3,1068,534,0,7988,1041,1,0,0,0,7989,7990,3,1068,
        534,0,7990,1043,1,0,0,0,7991,7996,3,1070,535,0,7992,7993,3,1068,
        534,0,7993,7994,3,998,499,0,7994,7996,1,0,0,0,7995,7991,1,0,0,0,
        7995,7992,1,0,0,0,7996,1045,1,0,0,0,7997,8002,3,1070,535,0,7998,
        7999,3,1068,534,0,7999,8000,3,998,499,0,8000,8002,1,0,0,0,8001,7997,
        1,0,0,0,8001,7998,1,0,0,0,8002,1047,1,0,0,0,8003,8004,3,1068,534,
        0,8004,8005,3,1000,500,0,8005,8008,1,0,0,0,8006,8008,4,524,10,0,
        8007,8003,1,0,0,0,8007,8006,1,0,0,0,8008,1049,1,0,0,0,8009,8010,
        3,1068,534,0,8010,1051,1,0,0,0,8011,8016,3,1070,535,0,8012,8013,
        3,1068,534,0,8013,8014,3,998,499,0,8014,8016,1,0,0,0,8015,8011,1,
        0,0,0,8015,8012,1,0,0,0,8016,1053,1,0,0,0,8017,8022,3,1070,535,0,
        8018,8019,3,1068,534,0,8019,8020,3,998,499,0,8020,8022,1,0,0,0,8021,
        8017,1,0,0,0,8021,8018,1,0,0,0,8022,1055,1,0,0,0,8023,8028,3,1070,
        535,0,8024,8025,3,1068,534,0,8025,8026,3,998,499,0,8026,8028,1,0,
        0,0,8027,8023,1,0,0,0,8027,8024,1,0,0,0,8028,1057,1,0,0,0,8029,8032,
        3,1060,530,0,8030,8031,5,487,0,0,8031,8033,3,1060,530,0,8032,8030,
        1,0,0,0,8032,8033,1,0,0,0,8033,1059,1,0,0,0,8034,8046,5,558,0,0,
        8035,8046,5,560,0,0,8036,8040,5,562,0,0,8037,8039,5,588,0,0,8038,
        8037,1,0,0,0,8039,8042,1,0,0,0,8040,8038,1,0,0,0,8040,8041,1,0,0,
        0,8041,8043,1,0,0,0,8042,8040,1,0,0,0,8043,8046,5,589,0,0,8044,8046,
        5,584,0,0,8045,8034,1,0,0,0,8045,8035,1,0,0,0,8045,8036,1,0,0,0,
        8045,8044,1,0,0,0,8046,1061,1,0,0,0,8047,8049,7,29,0,0,8048,8047,
        1,0,0,0,8048,8049,1,0,0,0,8049,8050,1,0,0,0,8050,8051,5,571,0,0,
        8051,1063,1,0,0,0,8052,8058,3,1072,536,0,8053,8058,5,52,0,0,8054,
        8058,5,49,0,0,8055,8058,5,89,0,0,8056,8058,5,524,0,0,8057,8052,1,
        0,0,0,8057,8053,1,0,0,0,8057,8054,1,0,0,0,8057,8055,1,0,0,0,8057,
        8056,1,0,0,0,8058,1065,1,0,0,0,8059,8064,3,1064,532,0,8060,8061,
        5,6,0,0,8061,8063,3,1064,532,0,8062,8060,1,0,0,0,8063,8066,1,0,0,
        0,8064,8062,1,0,0,0,8064,8065,1,0,0,0,8065,1067,1,0,0,0,8066,8064,
        1,0,0,0,8067,8072,3,1076,538,0,8068,8072,3,1078,539,0,8069,8072,
        3,1080,540,0,8070,8072,3,1222,611,0,8071,8067,1,0,0,0,8071,8068,
        1,0,0,0,8071,8069,1,0,0,0,8071,8070,1,0,0,0,8072,1069,1,0,0,0,8073,
        8078,3,1076,538,0,8074,8078,3,1078,539,0,8075,8078,3,1222,611,0,
        8076,8078,3,1082,541,0,8077,8073,1,0,0,0,8077,8074,1,0,0,0,8077,
        8075,1,0,0,0,8077,8076,1,0,0,0,8078,1071,1,0,0,0,8079,8084,3,1076,
        538,0,8080,8084,3,1078,539,0,8081,8084,3,1080,540,0,8082,8084,3,
        1082,541,0,8083,8079,1,0,0,0,8083,8080,1,0,0,0,8083,8081,1,0,0,0,
        8083,8082,1,0,0,0,8084,1073,1,0,0,0,8085,8089,3,1072,536,0,8086,
        8089,3,1222,611,0,8087,8089,3,1084,542,0,8088,8085,1,0,0,0,8088,
        8086,1,0,0,0,8088,8087,1,0,0,0,8089,1075,1,0,0,0,8090,8093,5,549,
        0,0,8091,8092,5,487,0,0,8092,8094,3,1060,530,0,8093,8091,1,0,0,0,
        8093,8094,1,0,0,0,8094,8102,1,0,0,0,8095,8102,3,1058,529,0,8096,
        8102,5,550,0,0,8097,8102,5,554,0,0,8098,8102,5,574,0,0,8099,8102,
        5,575,0,0,8100,8102,3,1222,611,0,8101,8090,1,0,0,0,8101,8095,1,0,
        0,0,8101,8096,1,0,0,0,8101,8097,1,0,0,0,8101,8098,1,0,0,0,8101,8099,
        1,0,0,0,8101,8100,1,0,0,0,8102,1077,1,0,0,0,8103,8104,7,108,0,0,
        8104,1079,1,0,0,0,8105,8157,5,387,0,0,8106,8157,5,388,0,0,8107,8157,
        3,884,442,0,8108,8157,5,390,0,0,8109,8157,5,391,0,0,8110,8157,3,
        886,443,0,8111,8157,5,393,0,0,8112,8157,5,394,0,0,8113,8157,5,395,
        0,0,8114,8157,5,396,0,0,8115,8157,5,397,0,0,8116,8157,5,398,0,0,
        8117,8157,5,399,0,0,8118,8157,5,470,0,0,8119,8157,5,400,0,0,8120,
        8157,5,401,0,0,8121,8157,5,402,0,0,8122,8157,5,403,0,0,8123,8157,
        5,404,0,0,8124,8157,5,405,0,0,8125,8157,5,406,0,0,8126,8157,5,407,
        0,0,8127,8157,5,489,0,0,8128,8157,5,408,0,0,8129,8157,3,880,440,
        0,8130,8157,5,453,0,0,8131,8157,5,410,0,0,8132,8157,5,411,0,0,8133,
        8157,5,412,0,0,8134,8157,5,413,0,0,8135,8157,5,414,0,0,8136,8157,
        5,415,0,0,8137,8157,5,416,0,0,8138,8157,5,417,0,0,8139,8157,5,418,
        0,0,8140,8157,5,419,0,0,8141,8157,5,420,0,0,8142,8157,5,421,0,0,
        8143,8157,5,422,0,0,8144,8157,5,423,0,0,8145,8157,5,424,0,0,8146,
        8157,5,425,0,0,8147,8157,5,426,0,0,8148,8157,5,427,0,0,8149,8157,
        5,428,0,0,8150,8157,5,476,0,0,8151,8157,5,429,0,0,8152,8157,5,430,
        0,0,8153,8157,5,431,0,0,8154,8157,5,432,0,0,8155,8157,5,474,0,0,
        8156,8105,1,0,0,0,8156,8106,1,0,0,0,8156,8107,1,0,0,0,8156,8108,
        1,0,0,0,8156,8109,1,0,0,0,8156,8110,1,0,0,0,8156,8111,1,0,0,0,8156,
        8112,1,0,0,0,8156,8113,1,0,0,0,8156,8114,1,0,0,0,8156,8115,1,0,0,
        0,8156,8116,1,0,0,0,8156,8117,1,0,0,0,8156,8118,1,0,0,0,8156,8119,
        1,0,0,0,8156,8120,1,0,0,0,8156,8121,1,0,0,0,8156,8122,1,0,0,0,8156,
        8123,1,0,0,0,8156,8124,1,0,0,0,8156,8125,1,0,0,0,8156,8126,1,0,0,
        0,8156,8127,1,0,0,0,8156,8128,1,0,0,0,8156,8129,1,0,0,0,8156,8130,
        1,0,0,0,8156,8131,1,0,0,0,8156,8132,1,0,0,0,8156,8133,1,0,0,0,8156,
        8134,1,0,0,0,8156,8135,1,0,0,0,8156,8136,1,0,0,0,8156,8137,1,0,0,
        0,8156,8138,1,0,0,0,8156,8139,1,0,0,0,8156,8140,1,0,0,0,8156,8141,
        1,0,0,0,8156,8142,1,0,0,0,8156,8143,1,0,0,0,8156,8144,1,0,0,0,8156,
        8145,1,0,0,0,8156,8146,1,0,0,0,8156,8147,1,0,0,0,8156,8148,1,0,0,
        0,8156,8149,1,0,0,0,8156,8150,1,0,0,0,8156,8151,1,0,0,0,8156,8152,
        1,0,0,0,8156,8153,1,0,0,0,8156,8154,1,0,0,0,8156,8155,1,0,0,0,8157,
        1081,1,0,0,0,8158,8159,7,109,0,0,8159,1083,1,0,0,0,8160,8161,7,110,
        0,0,8161,1085,1,0,0,0,8162,8163,5,29,0,0,8163,8164,5,279,0,0,8164,
        8172,5,490,0,0,8165,8166,5,29,0,0,8166,8167,5,491,0,0,8167,8172,
        3,1088,544,0,8168,8169,5,29,0,0,8169,8170,5,492,0,0,8170,8172,7,
        111,0,0,8171,8162,1,0,0,0,8171,8165,1,0,0,0,8171,8168,1,0,0,0,8172,
        1087,1,0,0,0,8173,8178,3,1058,529,0,8174,8178,3,1084,542,0,8175,
        8178,3,1222,611,0,8176,8178,3,1078,539,0,8177,8173,1,0,0,0,8177,
        8174,1,0,0,0,8177,8175,1,0,0,0,8177,8176,1,0,0,0,8178,1089,1,0,0,
        0,8179,8180,3,1092,546,0,8180,8181,5,146,0,0,8181,8183,3,1114,557,
        0,8182,8184,3,1212,606,0,8183,8182,1,0,0,0,8183,8184,1,0,0,0,8184,
        8185,1,0,0,0,8185,8187,5,454,0,0,8186,8188,3,1220,610,0,8187,8186,
        1,0,0,0,8187,8188,1,0,0,0,8188,1091,1,0,0,0,8189,8191,3,1096,548,
        0,8190,8189,1,0,0,0,8190,8191,1,0,0,0,8191,8196,1,0,0,0,8192,8194,
        5,178,0,0,8193,8195,3,1094,547,0,8194,8193,1,0,0,0,8194,8195,1,0,
        0,0,8195,8197,1,0,0,0,8196,8192,1,0,0,0,8196,8197,1,0,0,0,8197,1093,
        1,0,0,0,8198,8202,3,1098,549,0,8199,8202,5,178,0,0,8200,8202,3,1096,
        548,0,8201,8198,1,0,0,0,8201,8199,1,0,0,0,8201,8200,1,0,0,0,8202,
        8203,1,0,0,0,8203,8201,1,0,0,0,8203,8204,1,0,0,0,8204,1095,1,0,0,
        0,8205,8206,5,18,0,0,8206,8207,3,1220,610,0,8207,8208,5,19,0,0,8208,
        1097,1,0,0,0,8209,8238,3,1220,610,0,8210,8211,5,496,0,0,8211,8212,
        5,62,0,0,8212,8239,3,1108,554,0,8213,8215,5,497,0,0,8214,8213,1,
        0,0,0,8214,8215,1,0,0,0,8215,8216,1,0,0,0,8216,8218,3,870,435,0,
        8217,8219,3,102,51,0,8218,8217,1,0,0,0,8218,8219,1,0,0,0,8219,8222,
        1,0,0,0,8220,8221,5,77,0,0,8221,8223,5,78,0,0,8222,8220,1,0,0,0,
        8222,8223,1,0,0,0,8223,8227,1,0,0,0,8224,8225,3,1110,555,0,8225,
        8226,3,1224,612,0,8226,8228,1,0,0,0,8227,8224,1,0,0,0,8227,8228,
        1,0,0,0,8228,8239,1,0,0,0,8229,8231,3,1100,550,0,8230,8229,1,0,0,
        0,8230,8231,1,0,0,0,8231,8232,1,0,0,0,8232,8234,5,172,0,0,8233,8235,
        3,1102,551,0,8234,8233,1,0,0,0,8234,8235,1,0,0,0,8235,8236,1,0,0,
        0,8236,8237,7,112,0,0,8237,8239,3,750,375,0,8238,8210,1,0,0,0,8238,
        8214,1,0,0,0,8238,8230,1,0,0,0,8239,8240,1,0,0,0,8240,8241,5,7,0,
        0,8241,1099,1,0,0,0,8242,8244,5,269,0,0,8243,8242,1,0,0,0,8243,8244,
        1,0,0,0,8244,8245,1,0,0,0,8245,8246,5,324,0,0,8246,1101,1,0,0,0,
        8247,8248,5,2,0,0,8248,8249,3,1104,552,0,8249,8250,5,3,0,0,8250,
        1103,1,0,0,0,8251,8256,3,1106,553,0,8252,8253,5,6,0,0,8253,8255,
        3,1106,553,0,8254,8252,1,0,0,0,8255,8258,1,0,0,0,8256,8254,1,0,0,
        0,8256,8257,1,0,0,0,8257,1105,1,0,0,0,8258,8256,1,0,0,0,8259,8260,
        3,1220,610,0,8260,8261,3,870,435,0,8261,1107,1,0,0,0,8262,8265,5,
        28,0,0,8263,8265,3,1068,534,0,8264,8262,1,0,0,0,8264,8263,1,0,0,
        0,8265,1109,1,0,0,0,8266,8269,3,1112,556,0,8267,8269,5,53,0,0,8268,
        8266,1,0,0,0,8268,8267,1,0,0,0,8269,1111,1,0,0,0,8270,8271,7,113,
        0,0,8271,1113,1,0,0,0,8272,8274,3,1116,558,0,8273,8272,1,0,0,0,8274,
        8277,1,0,0,0,8275,8273,1,0,0,0,8275,8276,1,0,0,0,8276,1115,1,0,0,
        0,8277,8275,1,0,0,0,8278,8279,3,1090,545,0,8279,8280,5,7,0,0,8280,
        8303,1,0,0,0,8281,8303,3,1152,576,0,8282,8303,3,1154,577,0,8283,
        8303,3,1122,561,0,8284,8303,3,1132,566,0,8285,8303,3,1138,569,0,
        8286,8303,3,1142,571,0,8287,8303,3,1148,574,0,8288,8303,3,1150,575,
        0,8289,8303,3,1164,582,0,8290,8303,3,1168,584,0,8291,8303,3,1170,
        585,0,8292,8303,3,1118,559,0,8293,8303,3,1120,560,0,8294,8303,3,
        1124,562,0,8295,8303,3,1174,587,0,8296,8303,3,1180,590,0,8297,8303,
        3,1184,592,0,8298,8303,3,1202,601,0,8299,8303,3,1204,602,0,8300,
        8303,3,1206,603,0,8301,8303,3,1208,604,0,8302,8278,1,0,0,0,8302,
        8281,1,0,0,0,8302,8282,1,0,0,0,8302,8283,1,0,0,0,8302,8284,1,0,0,
        0,8302,8285,1,0,0,0,8302,8286,1,0,0,0,8302,8287,1,0,0,0,8302,8288,
        1,0,0,0,8302,8289,1,0,0,0,8302,8290,1,0,0,0,8302,8291,1,0,0,0,8302,
        8292,1,0,0,0,8302,8293,1,0,0,0,8302,8294,1,0,0,0,8302,8295,1,0,0,
        0,8302,8296,1,0,0,0,8302,8297,1,0,0,0,8302,8298,1,0,0,0,8302,8299,
        1,0,0,0,8302,8300,1,0,0,0,8302,8301,1,0,0,0,8303,1117,1,0,0,0,8304,
        8305,5,498,0,0,8305,8306,3,1224,612,0,8306,8307,5,7,0,0,8307,1119,
        1,0,0,0,8308,8309,5,433,0,0,8309,8316,3,1220,610,0,8310,8312,5,2,
        0,0,8311,8313,3,964,482,0,8312,8311,1,0,0,0,8312,8313,1,0,0,0,8313,
        8314,1,0,0,0,8314,8315,5,3,0,0,8315,8317,5,7,0,0,8316,8310,1,0,0,
        0,8316,8317,1,0,0,0,8317,8328,1,0,0,0,8318,8319,5,57,0,0,8319,8320,
        3,1220,610,0,8320,8322,5,2,0,0,8321,8323,3,964,482,0,8322,8321,1,
        0,0,0,8322,8323,1,0,0,0,8323,8324,1,0,0,0,8324,8325,5,3,0,0,8325,
        8326,5,7,0,0,8326,8328,1,0,0,0,8327,8308,1,0,0,0,8327,8318,1,0,0,
        0,8328,1121,1,0,0,0,8329,8330,3,1130,565,0,8330,8331,3,1112,556,
        0,8331,8332,3,1224,612,0,8332,8333,5,7,0,0,8333,1123,1,0,0,0,8334,
        8336,5,499,0,0,8335,8337,7,114,0,0,8336,8335,1,0,0,0,8336,8337,1,
        0,0,0,8337,8338,1,0,0,0,8338,8339,5,500,0,0,8339,8340,3,1126,563,
        0,8340,8341,5,7,0,0,8341,1125,1,0,0,0,8342,8347,3,1128,564,0,8343,
        8344,5,6,0,0,8344,8346,3,1128,564,0,8345,8343,1,0,0,0,8346,8349,
        1,0,0,0,8347,8345,1,0,0,0,8347,8348,1,0,0,0,8348,1127,1,0,0,0,8349,
        8347,1,0,0,0,8350,8351,3,1130,565,0,8351,8352,3,1112,556,0,8352,
        8353,3,1068,534,0,8353,1129,1,0,0,0,8354,8357,3,422,211,0,8355,8357,
        5,28,0,0,8356,8354,1,0,0,0,8356,8355,1,0,0,0,8357,8364,1,0,0,0,8358,
        8359,5,4,0,0,8359,8360,3,898,449,0,8360,8361,5,5,0,0,8361,8363,1,
        0,0,0,8362,8358,1,0,0,0,8363,8366,1,0,0,0,8364,8362,1,0,0,0,8364,
        8365,1,0,0,0,8365,1131,1,0,0,0,8366,8364,1,0,0,0,8367,8368,5,220,
        0,0,8368,8369,3,1224,612,0,8369,8370,5,93,0,0,8370,8371,3,1114,557,
        0,8371,8373,3,1134,567,0,8372,8374,3,1136,568,0,8373,8372,1,0,0,
        0,8373,8374,1,0,0,0,8374,8375,1,0,0,0,8375,8376,5,454,0,0,8376,8377,
        5,220,0,0,8377,8378,5,7,0,0,8378,1133,1,0,0,0,8379,8380,5,502,0,
        0,8380,8381,3,898,449,0,8381,8382,5,93,0,0,8382,8383,3,1114,557,
        0,8383,8385,1,0,0,0,8384,8379,1,0,0,0,8385,8388,1,0,0,0,8386,8384,
        1,0,0,0,8386,8387,1,0,0,0,8387,1135,1,0,0,0,8388,8386,1,0,0,0,8389,
        8390,5,58,0,0,8390,8391,3,1114,557,0,8391,1137,1,0,0,0,8392,8394,
        5,40,0,0,8393,8395,3,1224,612,0,8394,8393,1,0,0,0,8394,8395,1,0,
        0,0,8395,8397,1,0,0,0,8396,8398,3,1140,570,0,8397,8396,1,0,0,0,8398,
        8399,1,0,0,0,8399,8397,1,0,0,0,8399,8400,1,0,0,0,8400,8402,1,0,0,
        0,8401,8403,3,1136,568,0,8402,8401,1,0,0,0,8402,8403,1,0,0,0,8403,
        8404,1,0,0,0,8404,8405,5,454,0,0,8405,8406,5,40,0,0,8406,8407,5,
        7,0,0,8407,1139,1,0,0,0,8408,8409,5,102,0,0,8409,8410,3,964,482,
        0,8410,8411,5,93,0,0,8411,8412,3,1114,557,0,8412,1141,1,0,0,0,8413,
        8415,3,1096,548,0,8414,8413,1,0,0,0,8414,8415,1,0,0,0,8415,8420,
        1,0,0,0,8416,8417,5,503,0,0,8417,8421,3,898,449,0,8418,8419,5,62,
        0,0,8419,8421,3,1144,572,0,8420,8416,1,0,0,0,8420,8418,1,0,0,0,8420,
        8421,1,0,0,0,8421,8422,1,0,0,0,8422,8423,3,1166,583,0,8423,1143,
        1,0,0,0,8424,8425,3,418,209,0,8425,8447,5,68,0,0,8426,8428,3,1068,
        534,0,8427,8429,3,714,357,0,8428,8427,1,0,0,0,8428,8429,1,0,0,0,
        8429,8448,1,0,0,0,8430,8448,3,750,375,0,8431,8448,3,700,350,0,8432,
        8433,5,202,0,0,8433,8435,3,898,449,0,8434,8436,3,1146,573,0,8435,
        8434,1,0,0,0,8435,8436,1,0,0,0,8436,8448,1,0,0,0,8437,8439,5,504,
        0,0,8438,8437,1,0,0,0,8438,8439,1,0,0,0,8439,8440,1,0,0,0,8440,8441,
        3,898,449,0,8441,8442,5,24,0,0,8442,8445,3,898,449,0,8443,8444,5,
        147,0,0,8444,8446,3,898,449,0,8445,8443,1,0,0,0,8445,8446,1,0,0,
        0,8446,8448,1,0,0,0,8447,8426,1,0,0,0,8447,8430,1,0,0,0,8447,8431,
        1,0,0,0,8447,8432,1,0,0,0,8447,8438,1,0,0,0,8448,1145,1,0,0,0,8449,
        8450,5,100,0,0,8450,8451,3,964,482,0,8451,1147,1,0,0,0,8452,8454,
        3,1096,548,0,8453,8452,1,0,0,0,8453,8454,1,0,0,0,8454,8455,1,0,0,
        0,8455,8456,5,505,0,0,8456,8459,3,418,209,0,8457,8458,5,506,0,0,
        8458,8460,5,571,0,0,8459,8457,1,0,0,0,8459,8460,1,0,0,0,8460,8461,
        1,0,0,0,8461,8462,5,68,0,0,8462,8463,5,35,0,0,8463,8464,3,898,449,
        0,8464,8465,3,1166,583,0,8465,1149,1,0,0,0,8466,8468,7,115,0,0,8467,
        8469,3,1220,610,0,8468,8467,1,0,0,0,8468,8469,1,0,0,0,8469,8472,
        1,0,0,0,8470,8471,5,102,0,0,8471,8473,3,1224,612,0,8472,8470,1,0,
        0,0,8472,8473,1,0,0,0,8473,8474,1,0,0,0,8474,8475,5,7,0,0,8475,1151,
        1,0,0,0,8476,8490,5,508,0,0,8477,8478,5,268,0,0,8478,8491,3,1224,
        612,0,8479,8485,5,509,0,0,8480,8481,5,202,0,0,8481,8482,3,898,449,
        0,8482,8483,3,1146,573,0,8483,8486,1,0,0,0,8484,8486,3,750,375,0,
        8485,8480,1,0,0,0,8485,8484,1,0,0,0,8486,8491,1,0,0,0,8487,8489,
        3,1224,612,0,8488,8487,1,0,0,0,8488,8489,1,0,0,0,8489,8491,1,0,0,
        0,8490,8477,1,0,0,0,8490,8479,1,0,0,0,8490,8488,1,0,0,0,8491,8492,
        1,0,0,0,8492,8493,5,7,0,0,8493,1153,1,0,0,0,8494,8512,5,510,0,0,
        8495,8497,3,1156,578,0,8496,8495,1,0,0,0,8496,8497,1,0,0,0,8497,
        8505,1,0,0,0,8498,8506,3,1076,538,0,8499,8500,5,511,0,0,8500,8506,
        3,1058,529,0,8501,8503,3,1058,529,0,8502,8504,3,1158,579,0,8503,
        8502,1,0,0,0,8503,8504,1,0,0,0,8504,8506,1,0,0,0,8505,8498,1,0,0,
        0,8505,8499,1,0,0,0,8505,8501,1,0,0,0,8505,8506,1,0,0,0,8506,8509,
        1,0,0,0,8507,8508,5,100,0,0,8508,8510,3,1162,581,0,8509,8507,1,0,
        0,0,8509,8510,1,0,0,0,8510,8511,1,0,0,0,8511,8513,5,7,0,0,8512,8496,
        1,0,0,0,8512,8513,1,0,0,0,8513,1155,1,0,0,0,8514,8515,7,116,0,0,
        8515,1157,1,0,0,0,8516,8517,5,6,0,0,8517,8519,3,898,449,0,8518,8516,
        1,0,0,0,8519,8520,1,0,0,0,8520,8518,1,0,0,0,8520,8521,1,0,0,0,8521,
        1159,1,0,0,0,8522,8523,3,1076,538,0,8523,8524,5,10,0,0,8524,8525,
        3,898,449,0,8525,1161,1,0,0,0,8526,8531,3,1160,580,0,8527,8528,5,
        6,0,0,8528,8530,3,1160,580,0,8529,8527,1,0,0,0,8530,8533,1,0,0,0,
        8531,8529,1,0,0,0,8531,8532,1,0,0,0,8532,1163,1,0,0,0,8533,8531,
        1,0,0,0,8534,8535,5,518,0,0,8535,8538,3,1224,612,0,8536,8537,5,6,
        0,0,8537,8539,3,1224,612,0,8538,8536,1,0,0,0,8538,8539,1,0,0,0,8539,
        8540,1,0,0,0,8540,8541,5,7,0,0,8541,1165,1,0,0,0,8542,8543,5,519,
        0,0,8543,8544,3,1114,557,0,8544,8545,5,454,0,0,8545,8547,5,519,0,
        0,8546,8548,3,1220,610,0,8547,8546,1,0,0,0,8547,8548,1,0,0,0,8548,
        8549,1,0,0,0,8549,8550,5,7,0,0,8550,1167,1,0,0,0,8551,8553,3,4,2,
        0,8552,8554,3,1172,586,0,8553,8552,1,0,0,0,8553,8554,1,0,0,0,8554,
        8555,1,0,0,0,8555,8556,5,7,0,0,8556,1169,1,0,0,0,8557,8558,5,202,
        0,0,8558,8572,3,898,449,0,8559,8561,3,1172,586,0,8560,8559,1,0,0,
        0,8560,8561,1,0,0,0,8561,8563,1,0,0,0,8562,8564,3,1146,573,0,8563,
        8562,1,0,0,0,8563,8564,1,0,0,0,8564,8573,1,0,0,0,8565,8567,3,1146,
        573,0,8566,8565,1,0,0,0,8566,8567,1,0,0,0,8567,8569,1,0,0,0,8568,
        8570,3,1172,586,0,8569,8568,1,0,0,0,8569,8570,1,0,0,0,8570,8573,
        1,0,0,0,8571,8573,1,0,0,0,8572,8560,1,0,0,0,8572,8566,1,0,0,0,8572,
        8571,1,0,0,0,8573,8574,1,0,0,0,8574,8575,5,7,0,0,8575,1171,1,0,0,
        0,8576,8578,5,71,0,0,8577,8579,5,346,0,0,8578,8577,1,0,0,0,8578,
        8579,1,0,0,0,8579,8580,1,0,0,0,8580,8581,3,964,482,0,8581,1173,1,
        0,0,0,8582,8603,5,520,0,0,8583,8585,3,1210,605,0,8584,8586,3,1100,
        550,0,8585,8584,1,0,0,0,8585,8586,1,0,0,0,8586,8587,1,0,0,0,8587,
        8594,5,62,0,0,8588,8595,3,750,375,0,8589,8590,5,202,0,0,8590,8592,
        3,1224,612,0,8591,8593,3,1146,573,0,8592,8591,1,0,0,0,8592,8593,
        1,0,0,0,8593,8595,1,0,0,0,8594,8588,1,0,0,0,8594,8589,1,0,0,0,8595,
        8604,1,0,0,0,8596,8601,3,1068,534,0,8597,8598,5,2,0,0,8598,8599,
        3,1178,589,0,8599,8600,5,3,0,0,8600,8602,1,0,0,0,8601,8597,1,0,0,
        0,8601,8602,1,0,0,0,8602,8604,1,0,0,0,8603,8583,1,0,0,0,8603,8596,
        1,0,0,0,8604,8605,1,0,0,0,8605,8606,5,7,0,0,8606,1175,1,0,0,0,8607,
        8608,3,1068,534,0,8608,8609,5,20,0,0,8609,8611,1,0,0,0,8610,8607,
        1,0,0,0,8610,8611,1,0,0,0,8611,8612,1,0,0,0,8612,8613,3,898,449,
        0,8613,1177,1,0,0,0,8614,8619,3,1176,588,0,8615,8616,5,6,0,0,8616,
        8618,3,1176,588,0,8617,8615,1,0,0,0,8618,8621,1,0,0,0,8619,8617,
        1,0,0,0,8619,8620,1,0,0,0,8620,1179,1,0,0,0,8621,8619,1,0,0,0,8622,
        8624,5,61,0,0,8623,8625,3,1182,591,0,8624,8623,1,0,0,0,8624,8625,
        1,0,0,0,8625,8627,1,0,0,0,8626,8628,3,440,220,0,8627,8626,1,0,0,
        0,8627,8628,1,0,0,0,8628,8629,1,0,0,0,8629,8630,3,1210,605,0,8630,
        8631,5,71,0,0,8631,8632,3,964,482,0,8632,8633,5,7,0,0,8633,1181,
        1,0,0,0,8634,8649,5,268,0,0,8635,8649,5,293,0,0,8636,8649,5,207,
        0,0,8637,8649,5,249,0,0,8638,8640,7,50,0,0,8639,8638,1,0,0,0,8639,
        8640,1,0,0,0,8640,8641,1,0,0,0,8641,8649,3,898,449,0,8642,8649,5,
        30,0,0,8643,8646,7,117,0,0,8644,8647,3,898,449,0,8645,8647,5,30,
        0,0,8646,8644,1,0,0,0,8646,8645,1,0,0,0,8646,8647,1,0,0,0,8647,8649,
        1,0,0,0,8648,8634,1,0,0,0,8648,8635,1,0,0,0,8648,8636,1,0,0,0,8648,
        8637,1,0,0,0,8648,8639,1,0,0,0,8648,8642,1,0,0,0,8648,8643,1,0,0,
        0,8649,1183,1,0,0,0,8650,8652,5,265,0,0,8651,8653,3,1182,591,0,8652,
        8651,1,0,0,0,8652,8653,1,0,0,0,8653,8654,1,0,0,0,8654,8655,3,1210,
        605,0,8655,8656,5,7,0,0,8656,1185,1,0,0,0,8657,8659,3,762,381,0,
        8658,8657,1,0,0,0,8658,8659,1,0,0,0,8659,8660,1,0,0,0,8660,8661,
        5,525,0,0,8661,8663,5,71,0,0,8662,8664,5,81,0,0,8663,8662,1,0,0,
        0,8663,8664,1,0,0,0,8664,8665,1,0,0,0,8665,8667,3,1022,511,0,8666,
        8668,5,9,0,0,8667,8666,1,0,0,0,8667,8668,1,0,0,0,8668,8673,1,0,0,
        0,8669,8671,5,36,0,0,8670,8669,1,0,0,0,8670,8671,1,0,0,0,8671,8672,
        1,0,0,0,8672,8674,3,1068,534,0,8673,8670,1,0,0,0,8673,8674,1,0,0,
        0,8674,8675,1,0,0,0,8675,8676,5,100,0,0,8676,8677,3,1188,594,0,8677,
        8678,5,80,0,0,8678,8680,3,898,449,0,8679,8681,3,1190,595,0,8680,
        8679,1,0,0,0,8681,8682,1,0,0,0,8682,8680,1,0,0,0,8682,8683,1,0,0,
        0,8683,1187,1,0,0,0,8684,8686,5,81,0,0,8685,8684,1,0,0,0,8685,8686,
        1,0,0,0,8686,8687,1,0,0,0,8687,8689,3,1022,511,0,8688,8690,5,9,0,
        0,8689,8688,1,0,0,0,8689,8690,1,0,0,0,8690,8696,1,0,0,0,8691,8694,
        3,754,377,0,8692,8694,3,810,405,0,8693,8691,1,0,0,0,8693,8692,1,
        0,0,0,8694,8696,1,0,0,0,8695,8685,1,0,0,0,8695,8693,1,0,0,0,8696,
        8701,1,0,0,0,8697,8699,5,36,0,0,8698,8697,1,0,0,0,8698,8699,1,0,
        0,0,8699,8700,1,0,0,0,8700,8702,3,1068,534,0,8701,8698,1,0,0,0,8701,
        8702,1,0,0,0,8702,1189,1,0,0,0,8703,8704,5,102,0,0,8704,8707,5,526,
        0,0,8705,8706,5,33,0,0,8706,8708,3,898,449,0,8707,8705,1,0,0,0,8707,
        8708,1,0,0,0,8708,8709,1,0,0,0,8709,8714,5,93,0,0,8710,8715,3,1194,
        597,0,8711,8715,5,182,0,0,8712,8713,5,57,0,0,8713,8715,5,270,0,0,
        8714,8710,1,0,0,0,8714,8711,1,0,0,0,8714,8712,1,0,0,0,8715,8730,
        1,0,0,0,8716,8717,5,102,0,0,8717,8718,5,77,0,0,8718,8721,5,526,0,
        0,8719,8720,5,33,0,0,8720,8722,3,898,449,0,8721,8719,1,0,0,0,8721,
        8722,1,0,0,0,8722,8723,1,0,0,0,8723,8727,5,93,0,0,8724,8728,3,1192,
        596,0,8725,8726,5,57,0,0,8726,8728,5,270,0,0,8727,8724,1,0,0,0,8727,
        8725,1,0,0,0,8728,8730,1,0,0,0,8729,8703,1,0,0,0,8729,8716,1,0,0,
        0,8730,1191,1,0,0,0,8731,8733,5,241,0,0,8732,8734,3,184,92,0,8733,
        8732,1,0,0,0,8733,8734,1,0,0,0,8734,8738,1,0,0,0,8735,8736,5,463,
        0,0,8736,8737,7,76,0,0,8737,8739,5,450,0,0,8738,8735,1,0,0,0,8738,
        8739,1,0,0,0,8739,8740,1,0,0,0,8740,8741,3,1196,598,0,8741,1193,
        1,0,0,0,8742,8743,5,369,0,0,8743,8754,5,333,0,0,8744,8745,3,1048,
        524,0,8745,8746,5,10,0,0,8746,8747,3,1200,600,0,8747,8755,1,0,0,
        0,8748,8749,3,184,92,0,8749,8750,5,10,0,0,8750,8751,5,2,0,0,8751,
        8752,3,1198,599,0,8752,8753,5,3,0,0,8753,8755,1,0,0,0,8754,8744,
        1,0,0,0,8754,8748,1,0,0,0,8755,8756,1,0,0,0,8756,8754,1,0,0,0,8756,
        8757,1,0,0,0,8757,1195,1,0,0,0,8758,8759,5,422,0,0,8759,8763,3,1198,
        599,0,8760,8761,5,53,0,0,8761,8763,5,422,0,0,8762,8758,1,0,0,0,8762,
        8760,1,0,0,0,8763,1197,1,0,0,0,8764,8765,5,2,0,0,8765,8770,3,1200,
        600,0,8766,8767,5,6,0,0,8767,8769,3,1200,600,0,8768,8766,1,0,0,0,
        8769,8772,1,0,0,0,8770,8768,1,0,0,0,8770,8771,1,0,0,0,8771,8773,
        1,0,0,0,8772,8770,1,0,0,0,8773,8774,5,3,0,0,8774,1199,1,0,0,0,8775,
        8778,3,780,390,0,8776,8778,5,53,0,0,8777,8775,1,0,0,0,8777,8776,
        1,0,0,0,8778,1201,1,0,0,0,8779,8780,5,157,0,0,8780,8781,3,1210,605,
        0,8781,8782,5,7,0,0,8782,1203,1,0,0,0,8783,8784,5,78,0,0,8784,8785,
        5,7,0,0,8785,1205,1,0,0,0,8786,8792,7,67,0,0,8787,8789,5,33,0,0,
        8788,8790,5,269,0,0,8789,8788,1,0,0,0,8789,8790,1,0,0,0,8790,8791,
        1,0,0,0,8791,8793,5,153,0,0,8792,8787,1,0,0,0,8792,8793,1,0,0,0,
        8793,8794,1,0,0,0,8794,8795,5,7,0,0,8795,1207,1,0,0,0,8796,8797,
        5,333,0,0,8797,8798,3,422,211,0,8798,8799,5,94,0,0,8799,8800,5,53,
        0,0,8800,8801,5,7,0,0,8801,8809,1,0,0,0,8802,8805,5,313,0,0,8803,
        8806,3,422,211,0,8804,8806,5,30,0,0,8805,8803,1,0,0,0,8805,8804,
        1,0,0,0,8806,8807,1,0,0,0,8807,8809,5,7,0,0,8808,8796,1,0,0,0,8808,
        8802,1,0,0,0,8809,1209,1,0,0,0,8810,8813,3,1068,534,0,8811,8813,
        5,28,0,0,8812,8810,1,0,0,0,8812,8811,1,0,0,0,8813,1211,1,0,0,0,8814,
        8816,5,517,0,0,8815,8817,3,1214,607,0,8816,8815,1,0,0,0,8817,8818,
        1,0,0,0,8818,8816,1,0,0,0,8818,8819,1,0,0,0,8819,1213,1,0,0,0,8820,
        8821,5,102,0,0,8821,8822,3,1216,608,0,8822,8823,5,93,0,0,8823,8824,
        3,1114,557,0,8824,1215,1,0,0,0,8825,8830,3,1218,609,0,8826,8827,
        5,82,0,0,8827,8829,3,1218,609,0,8828,8826,1,0,0,0,8829,8832,1,0,
        0,0,8830,8828,1,0,0,0,8830,8831,1,0,0,0,8831,1217,1,0,0,0,8832,8830,
        1,0,0,0,8833,8837,3,1220,610,0,8834,8835,5,511,0,0,8835,8837,3,1058,
        529,0,8836,8833,1,0,0,0,8836,8834,1,0,0,0,8837,1219,1,0,0,0,8838,
        8841,3,1068,534,0,8839,8841,3,1222,611,0,8840,8838,1,0,0,0,8840,
        8839,1,0,0,0,8841,1221,1,0,0,0,8842,8843,7,118,0,0,8843,1223,1,0,
        0,0,8844,8846,3,1002,501,0,8845,8844,1,0,0,0,8845,8846,1,0,0,0,8846,
        8848,1,0,0,0,8847,8849,3,770,385,0,8848,8847,1,0,0,0,8848,8849,1,
        0,0,0,8849,8851,1,0,0,0,8850,8852,3,812,406,0,8851,8850,1,0,0,0,
        8851,8852,1,0,0,0,8852,8854,1,0,0,0,8853,8855,3,848,424,0,8854,8853,
        1,0,0,0,8854,8855,1,0,0,0,8855,8857,1,0,0,0,8856,8858,3,794,397,
        0,8857,8856,1,0,0,0,8857,8858,1,0,0,0,8858,8860,1,0,0,0,8859,8861,
        3,802,401,0,8860,8859,1,0,0,0,8860,8861,1,0,0,0,8861,8863,1,0,0,
        0,8862,8864,3,934,467,0,8863,8862,1,0,0,0,8863,8864,1,0,0,0,8864,
        1225,1,0,0,0,1164,1229,1236,1356,1358,1367,1374,1380,1386,1421,1431,
        1437,1445,1453,1464,1472,1476,1488,1494,1500,1504,1509,1513,1526,
        1536,1538,1544,1558,1561,1566,1571,1582,1586,1598,1602,1605,1609,
        1621,1639,1646,1654,1659,1666,1674,1680,1688,1696,1700,1714,1719,
        1724,1736,1742,1754,1759,1769,1775,1780,1788,1793,1800,1805,1810,
        1820,1825,1830,1837,1841,1855,1861,1867,1872,1879,1891,1899,1907,
        1923,1932,1946,1950,1962,1970,1980,2000,2003,2010,2013,2017,2021,
        2024,2029,2034,2038,2047,2053,2057,2066,2069,2075,2084,2093,2097,
        2103,2107,2113,2117,2122,2127,2131,2134,2141,2152,2166,2174,2178,
        2181,2187,2189,2207,2218,2231,2238,2243,2247,2254,2259,2262,2264,
        2269,2273,2277,2281,2285,2288,2292,2300,2304,2308,2313,2318,2327,
        2332,2338,2347,2351,2357,2360,2367,2376,2383,2388,2392,2397,2401,
        2404,2407,2410,2413,2416,2421,2424,2427,2430,2433,2436,2442,2446,
        2449,2452,2455,2458,2460,2467,2478,2486,2492,2497,2502,2507,2510,
        2514,2517,2521,2532,2537,2542,2546,2549,2553,2556,2558,2561,2566,
        2569,2573,2579,2582,2590,2599,2606,2611,2614,2617,2620,2624,2631,
        2634,2647,2654,2667,2671,2674,2677,2684,2688,2694,2697,2700,2703,
        2713,2716,2719,2723,2735,2745,2759,2770,2779,2783,2785,2802,2804,
        2822,2833,2836,2839,2848,2857,2863,2866,2869,2882,2885,2888,2893,
        2900,2909,2913,2919,2923,2926,2929,2932,2935,2941,2945,2950,2956,
        2960,2963,2966,2969,2975,2979,2983,2987,2991,2996,3008,3014,3018,
        3033,3038,3041,3043,3046,3050,3057,3062,3065,3068,3076,3082,3084,
        3090,3095,3100,3104,3109,3117,3127,3166,3174,3177,3181,3185,3190,
        3198,3202,3214,3227,3239,3244,3247,3254,3259,3267,3269,3275,3280,
        3284,3289,3295,3302,3308,3310,3317,3325,3330,3340,3347,3351,3368,
        3372,3375,3378,3381,3389,3392,3395,3401,3409,3413,3425,3431,3434,
        3439,3443,3450,3460,3462,3482,3497,3506,3509,3512,3522,3525,3535,
        3539,3542,3550,3556,3560,3569,3577,3580,3586,3591,3597,3610,3614,
        3620,3627,3632,3636,3645,3655,3666,3683,3686,3699,3712,3717,3730,
        3736,3739,3746,3749,3761,3767,3769,3780,3786,3794,3804,3813,3818,
        3829,3840,3847,3857,3864,3867,3870,3875,3880,3891,3910,3913,3940,
        3949,3952,3956,3960,3964,3968,3972,3976,3980,3985,3989,3994,4000,
        4005,4009,4015,4019,4024,4032,4038,4043,4050,4055,4059,4064,4070,
        4077,4082,4089,4099,4103,4106,4108,4115,4119,4124,4134,4149,4152,
        4160,4169,4174,4181,4187,4194,4199,4206,4211,4214,4217,4221,4242,
        4245,4277,4282,4288,4308,4313,4319,4322,4326,4330,4336,4339,4343,
        4347,4352,4355,4358,4361,4372,4378,4386,4391,4394,4401,4404,4413,
        4420,4423,4428,4435,4438,4463,4470,4474,4488,4491,4497,4503,4506,
        4518,4529,4538,4544,4552,4554,4560,4564,4567,4570,4575,4579,4582,
        4585,4588,4591,4599,4605,4608,4613,4616,4619,4627,4639,4645,4652,
        4654,4659,4670,4679,4687,4695,4702,4710,4717,4725,4729,4738,4743,
        4747,4749,4755,4760,4764,4771,4776,4781,4786,4788,4800,4806,4811,
        4821,4837,4856,4863,4874,4889,4899,4902,4910,4915,4920,4925,4928,
        4931,4936,4940,4945,4949,4955,4964,4973,4983,4993,4998,5010,5016,
        5019,5021,5031,5047,5054,5056,5070,5074,5080,5085,5090,5095,5100,
        5103,5115,5168,5177,5181,5190,5194,5203,5207,5212,5215,5219,5224,
        5226,5235,5240,5251,5255,5269,5277,5315,5317,5336,5339,5366,5370,
        5374,5378,5382,5385,5400,5407,5421,5430,5437,5462,5481,5496,5512,
        5519,5525,5528,5536,5551,5561,5568,5589,5598,5620,5624,5634,5638,
        5648,5651,5655,5659,5667,5674,5685,5689,5692,5697,5703,5714,5718,
        5721,5725,5729,5732,5742,5745,5749,5754,5760,5763,5768,5771,5778,
        5780,5785,5789,5801,5804,5809,5813,5818,5828,5836,5839,5842,5844,
        5850,5858,5878,5895,5899,5904,5934,5949,5954,5958,5971,5975,5977,
        5983,5985,5993,6000,6003,6006,6009,6012,6014,6017,6021,6027,6030,
        6037,6044,6048,6052,6059,6064,6069,6071,6075,6079,6086,6092,6096,
        6098,6100,6113,6122,6135,6140,6144,6148,6155,6158,6160,6168,6172,
        6175,6182,6186,6189,6195,6200,6204,6211,6220,6227,6230,6234,6239,
        6245,6252,6255,6258,6262,6269,6272,6281,6284,6289,6292,6299,6302,
        6305,6312,6324,6331,6333,6341,6349,6351,6356,6361,6366,6370,6374,
        6378,6380,6384,6388,6391,6394,6396,6406,6408,6413,6417,6422,6426,
        6433,6438,6442,6445,6451,6454,6473,6480,6484,6487,6491,6495,6498,
        6501,6508,6517,6524,6527,6531,6535,6538,6540,6545,6549,6558,6564,
        6566,6573,6578,6585,6594,6600,6612,6623,6628,6633,6636,6641,6645,
        6648,6656,6667,6672,6675,6678,6681,6685,6689,6693,6695,6704,6709,
        6715,6719,6721,6728,6733,6739,6741,6745,6752,6757,6760,6766,6770,
        6776,6785,6791,6793,6796,6800,6803,6806,6811,6814,6823,6830,6832,
        6839,6847,6852,6855,6861,6875,6879,6887,6894,6905,6912,6918,6928,
        6942,6948,6952,6957,6961,6965,6968,6975,6984,6987,6995,6997,7003,
        7007,7012,7019,7022,7024,7030,7034,7037,7046,7052,7055,7063,7066,
        7070,7074,7080,7082,7086,7091,7098,7105,7107,7113,7115,7120,7122,
        7126,7135,7139,7147,7149,7163,7166,7174,7183,7189,7194,7202,7204,
        7209,7213,7218,7223,7229,7245,7247,7256,7271,7276,7279,7285,7290,
        7303,7308,7312,7319,7338,7350,7355,7363,7365,7367,7376,7379,7384,
        7389,7393,7396,7405,7413,7418,7420,7423,7427,7438,7456,7464,7479,
        7485,7491,7512,7514,7534,7544,7555,7567,7573,7578,7582,7594,7600,
        7609,7613,7626,7636,7640,7645,7648,7651,7660,7671,7673,7677,7682,
        7691,7696,7704,7714,7722,7726,7730,7733,7740,7748,7756,7764,7768,
        7775,7783,7788,7797,7812,7823,7830,7837,7846,7849,7852,7864,7869,
        7873,7875,7878,7883,7888,7896,7904,7907,7914,7922,7930,7938,7946,
        7963,7970,7978,7995,8001,8007,8015,8021,8027,8032,8040,8045,8048,
        8057,8064,8071,8077,8083,8088,8093,8101,8156,8171,8177,8183,8187,
        8190,8194,8196,8201,8203,8214,8218,8222,8227,8230,8234,8238,8243,
        8256,8264,8268,8275,8302,8312,8316,8322,8327,8336,8347,8356,8364,
        8373,8386,8394,8399,8402,8414,8420,8428,8435,8438,8445,8447,8453,
        8459,8468,8472,8485,8488,8490,8496,8503,8505,8509,8512,8520,8531,
        8538,8547,8553,8560,8563,8566,8569,8572,8578,8585,8592,8594,8601,
        8603,8610,8619,8624,8627,8639,8646,8648,8652,8658,8663,8667,8670,
        8673,8682,8685,8689,8693,8695,8698,8701,8707,8714,8721,8727,8729,
        8733,8738,8754,8756,8762,8770,8777,8789,8792,8805,8808,8812,8818,
        8830,8836,8840,8845,8848,8851,8854,8857,8860,8863
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!PostgreSqlParser.__ATN) {
            PostgreSqlParser.__ATN = new antlr.ATNDeserializer().deserialize(PostgreSqlParser._serializedATN);
        }

        return PostgreSqlParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(PostgreSqlParser.literalNames, PostgreSqlParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return PostgreSqlParser.vocabulary;
    }

    private static readonly decisionsToDFA = PostgreSqlParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class ProgramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.EOF, 0)!;
    }
    public singleStmt(): SingleStmtContext[];
    public singleStmt(i: number): SingleStmtContext | null;
    public singleStmt(i?: number): SingleStmtContext[] | SingleStmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SingleStmtContext);
        }

        return this.getRuleContext(i, SingleStmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_program;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProgram) {
             listener.enterProgram(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProgram) {
             listener.exitProgram(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProgram) {
            return visitor.visitProgram(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stmt(): StmtContext {
        return this.getRuleContext(0, StmtContext)!;
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SEMI, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_singleStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSingleStmt) {
             listener.enterSingleStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSingleStmt) {
             listener.exitSingleStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSingleStmt) {
            return visitor.visitSingleStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public altereventtrigstmt(): AltereventtrigstmtContext | null {
        return this.getRuleContext(0, AltereventtrigstmtContext);
    }
    public altercollationstmt(): AltercollationstmtContext | null {
        return this.getRuleContext(0, AltercollationstmtContext);
    }
    public alterdatabasestmt(): AlterdatabasestmtContext | null {
        return this.getRuleContext(0, AlterdatabasestmtContext);
    }
    public alterdatabasesetstmt(): AlterdatabasesetstmtContext | null {
        return this.getRuleContext(0, AlterdatabasesetstmtContext);
    }
    public alterdefaultprivilegesstmt(): AlterdefaultprivilegesstmtContext | null {
        return this.getRuleContext(0, AlterdefaultprivilegesstmtContext);
    }
    public alterdomainstmt(): AlterdomainstmtContext | null {
        return this.getRuleContext(0, AlterdomainstmtContext);
    }
    public alterenumstmt(): AlterenumstmtContext | null {
        return this.getRuleContext(0, AlterenumstmtContext);
    }
    public alterextensionstmt(): AlterextensionstmtContext | null {
        return this.getRuleContext(0, AlterextensionstmtContext);
    }
    public alterextensioncontentsstmt(): AlterextensioncontentsstmtContext | null {
        return this.getRuleContext(0, AlterextensioncontentsstmtContext);
    }
    public alterfdwstmt(): AlterfdwstmtContext | null {
        return this.getRuleContext(0, AlterfdwstmtContext);
    }
    public alterforeignserverstmt(): AlterforeignserverstmtContext | null {
        return this.getRuleContext(0, AlterforeignserverstmtContext);
    }
    public alterfunctionstmt(): AlterfunctionstmtContext | null {
        return this.getRuleContext(0, AlterfunctionstmtContext);
    }
    public altergroupstmt(): AltergroupstmtContext | null {
        return this.getRuleContext(0, AltergroupstmtContext);
    }
    public alterobjectdependsstmt(): AlterobjectdependsstmtContext | null {
        return this.getRuleContext(0, AlterobjectdependsstmtContext);
    }
    public alterobjectschemastmt(): AlterobjectschemastmtContext | null {
        return this.getRuleContext(0, AlterobjectschemastmtContext);
    }
    public alterownerstmt(): AlterownerstmtContext | null {
        return this.getRuleContext(0, AlterownerstmtContext);
    }
    public alteroperatorstmt(): AlteroperatorstmtContext | null {
        return this.getRuleContext(0, AlteroperatorstmtContext);
    }
    public altertypestmt(): AltertypestmtContext | null {
        return this.getRuleContext(0, AltertypestmtContext);
    }
    public alterpolicystmt(): AlterpolicystmtContext | null {
        return this.getRuleContext(0, AlterpolicystmtContext);
    }
    public alterprocedurestmt(): AlterprocedurestmtContext | null {
        return this.getRuleContext(0, AlterprocedurestmtContext);
    }
    public alterseqstmt(): AlterseqstmtContext | null {
        return this.getRuleContext(0, AlterseqstmtContext);
    }
    public altersystemstmt(): AltersystemstmtContext | null {
        return this.getRuleContext(0, AltersystemstmtContext);
    }
    public altertablestmt(): AltertablestmtContext | null {
        return this.getRuleContext(0, AltertablestmtContext);
    }
    public altertblspcstmt(): AltertblspcstmtContext | null {
        return this.getRuleContext(0, AltertblspcstmtContext);
    }
    public altercompositetypestmt(): AltercompositetypestmtContext | null {
        return this.getRuleContext(0, AltercompositetypestmtContext);
    }
    public alterpublicationstmt(): AlterpublicationstmtContext | null {
        return this.getRuleContext(0, AlterpublicationstmtContext);
    }
    public alterrolesetstmt(): AlterrolesetstmtContext | null {
        return this.getRuleContext(0, AlterrolesetstmtContext);
    }
    public alterroutinestmt(): AlterroutinestmtContext | null {
        return this.getRuleContext(0, AlterroutinestmtContext);
    }
    public alterrolestmt(): AlterrolestmtContext | null {
        return this.getRuleContext(0, AlterrolestmtContext);
    }
    public altersubscriptionstmt(): AltersubscriptionstmtContext | null {
        return this.getRuleContext(0, AltersubscriptionstmtContext);
    }
    public alterstatsstmt(): AlterstatsstmtContext | null {
        return this.getRuleContext(0, AlterstatsstmtContext);
    }
    public altertsconfigurationstmt(): AltertsconfigurationstmtContext | null {
        return this.getRuleContext(0, AltertsconfigurationstmtContext);
    }
    public altertsdictionarystmt(): AltertsdictionarystmtContext | null {
        return this.getRuleContext(0, AltertsdictionarystmtContext);
    }
    public alterusermappingstmt(): AlterusermappingstmtContext | null {
        return this.getRuleContext(0, AlterusermappingstmtContext);
    }
    public analyzestmt(): AnalyzestmtContext | null {
        return this.getRuleContext(0, AnalyzestmtContext);
    }
    public callstmt(): CallstmtContext | null {
        return this.getRuleContext(0, CallstmtContext);
    }
    public checkpointstmt(): CheckpointstmtContext | null {
        return this.getRuleContext(0, CheckpointstmtContext);
    }
    public closeportalstmt(): CloseportalstmtContext | null {
        return this.getRuleContext(0, CloseportalstmtContext);
    }
    public clusterstmt(): ClusterstmtContext | null {
        return this.getRuleContext(0, ClusterstmtContext);
    }
    public commentstmt(): CommentstmtContext | null {
        return this.getRuleContext(0, CommentstmtContext);
    }
    public constraintssetstmt(): ConstraintssetstmtContext | null {
        return this.getRuleContext(0, ConstraintssetstmtContext);
    }
    public copystmt(): CopystmtContext | null {
        return this.getRuleContext(0, CopystmtContext);
    }
    public createamstmt(): CreateamstmtContext | null {
        return this.getRuleContext(0, CreateamstmtContext);
    }
    public createasstmt(): CreateasstmtContext | null {
        return this.getRuleContext(0, CreateasstmtContext);
    }
    public createassertionstmt(): CreateassertionstmtContext | null {
        return this.getRuleContext(0, CreateassertionstmtContext);
    }
    public createcaststmt(): CreatecaststmtContext | null {
        return this.getRuleContext(0, CreatecaststmtContext);
    }
    public createconversionstmt(): CreateconversionstmtContext | null {
        return this.getRuleContext(0, CreateconversionstmtContext);
    }
    public createdomainstmt(): CreatedomainstmtContext | null {
        return this.getRuleContext(0, CreatedomainstmtContext);
    }
    public createextensionstmt(): CreateextensionstmtContext | null {
        return this.getRuleContext(0, CreateextensionstmtContext);
    }
    public createfdwstmt(): CreatefdwstmtContext | null {
        return this.getRuleContext(0, CreatefdwstmtContext);
    }
    public createforeignserverstmt(): CreateforeignserverstmtContext | null {
        return this.getRuleContext(0, CreateforeignserverstmtContext);
    }
    public createforeigntablestmt(): CreateforeigntablestmtContext | null {
        return this.getRuleContext(0, CreateforeigntablestmtContext);
    }
    public createfunctionstmt(): CreatefunctionstmtContext | null {
        return this.getRuleContext(0, CreatefunctionstmtContext);
    }
    public creategroupstmt(): CreategroupstmtContext | null {
        return this.getRuleContext(0, CreategroupstmtContext);
    }
    public creatematviewstmt(): CreatematviewstmtContext | null {
        return this.getRuleContext(0, CreatematviewstmtContext);
    }
    public createopclassstmt(): CreateopclassstmtContext | null {
        return this.getRuleContext(0, CreateopclassstmtContext);
    }
    public createopfamilystmt(): CreateopfamilystmtContext | null {
        return this.getRuleContext(0, CreateopfamilystmtContext);
    }
    public createpublicationstmt(): CreatepublicationstmtContext | null {
        return this.getRuleContext(0, CreatepublicationstmtContext);
    }
    public alteropfamilystmt(): AlteropfamilystmtContext | null {
        return this.getRuleContext(0, AlteropfamilystmtContext);
    }
    public createpolicystmt(): CreatepolicystmtContext | null {
        return this.getRuleContext(0, CreatepolicystmtContext);
    }
    public createplangstmt(): CreateplangstmtContext | null {
        return this.getRuleContext(0, CreateplangstmtContext);
    }
    public createschemastmt(): CreateschemastmtContext | null {
        return this.getRuleContext(0, CreateschemastmtContext);
    }
    public createseqstmt(): CreateseqstmtContext | null {
        return this.getRuleContext(0, CreateseqstmtContext);
    }
    public createstmt(): CreatestmtContext | null {
        return this.getRuleContext(0, CreatestmtContext);
    }
    public createsubscriptionstmt(): CreatesubscriptionstmtContext | null {
        return this.getRuleContext(0, CreatesubscriptionstmtContext);
    }
    public createstatsstmt(): CreatestatsstmtContext | null {
        return this.getRuleContext(0, CreatestatsstmtContext);
    }
    public createtablespacestmt(): CreatetablespacestmtContext | null {
        return this.getRuleContext(0, CreatetablespacestmtContext);
    }
    public createtransformstmt(): CreatetransformstmtContext | null {
        return this.getRuleContext(0, CreatetransformstmtContext);
    }
    public createtrigstmt(): CreatetrigstmtContext | null {
        return this.getRuleContext(0, CreatetrigstmtContext);
    }
    public createeventtrigstmt(): CreateeventtrigstmtContext | null {
        return this.getRuleContext(0, CreateeventtrigstmtContext);
    }
    public createrolestmt(): CreaterolestmtContext | null {
        return this.getRuleContext(0, CreaterolestmtContext);
    }
    public createuserstmt(): CreateuserstmtContext | null {
        return this.getRuleContext(0, CreateuserstmtContext);
    }
    public createusermappingstmt(): CreateusermappingstmtContext | null {
        return this.getRuleContext(0, CreateusermappingstmtContext);
    }
    public createdbstmt(): CreatedbstmtContext | null {
        return this.getRuleContext(0, CreatedbstmtContext);
    }
    public deallocatestmt(): DeallocatestmtContext | null {
        return this.getRuleContext(0, DeallocatestmtContext);
    }
    public declarecursorstmt(): DeclarecursorstmtContext | null {
        return this.getRuleContext(0, DeclarecursorstmtContext);
    }
    public definestmt(): DefinestmtContext | null {
        return this.getRuleContext(0, DefinestmtContext);
    }
    public deletestmt(): DeletestmtContext | null {
        return this.getRuleContext(0, DeletestmtContext);
    }
    public discardstmt(): DiscardstmtContext | null {
        return this.getRuleContext(0, DiscardstmtContext);
    }
    public dostmt(): DostmtContext | null {
        return this.getRuleContext(0, DostmtContext);
    }
    public dropstmt(): DropstmtContext | null {
        return this.getRuleContext(0, DropstmtContext);
    }
    public executestmt(): ExecutestmtContext | null {
        return this.getRuleContext(0, ExecutestmtContext);
    }
    public explainstmt(): ExplainstmtContext | null {
        return this.getRuleContext(0, ExplainstmtContext);
    }
    public fetchstmt(): FetchstmtContext | null {
        return this.getRuleContext(0, FetchstmtContext);
    }
    public grantstmt(): GrantstmtContext | null {
        return this.getRuleContext(0, GrantstmtContext);
    }
    public grantrolestmt(): GrantrolestmtContext | null {
        return this.getRuleContext(0, GrantrolestmtContext);
    }
    public mergestmt(): MergestmtContext | null {
        return this.getRuleContext(0, MergestmtContext);
    }
    public importforeignschemastmt(): ImportforeignschemastmtContext | null {
        return this.getRuleContext(0, ImportforeignschemastmtContext);
    }
    public indexstmt(): IndexstmtContext | null {
        return this.getRuleContext(0, IndexstmtContext);
    }
    public insertstmt(): InsertstmtContext | null {
        return this.getRuleContext(0, InsertstmtContext);
    }
    public listenstmt(): ListenstmtContext | null {
        return this.getRuleContext(0, ListenstmtContext);
    }
    public refreshmatviewstmt(): RefreshmatviewstmtContext | null {
        return this.getRuleContext(0, RefreshmatviewstmtContext);
    }
    public loadstmt(): LoadstmtContext | null {
        return this.getRuleContext(0, LoadstmtContext);
    }
    public lockstmt(): LockstmtContext | null {
        return this.getRuleContext(0, LockstmtContext);
    }
    public notifystmt(): NotifystmtContext | null {
        return this.getRuleContext(0, NotifystmtContext);
    }
    public preparestmt(): PreparestmtContext | null {
        return this.getRuleContext(0, PreparestmtContext);
    }
    public reassignownedstmt(): ReassignownedstmtContext | null {
        return this.getRuleContext(0, ReassignownedstmtContext);
    }
    public reindexstmt(): ReindexstmtContext | null {
        return this.getRuleContext(0, ReindexstmtContext);
    }
    public removeaggrstmt(): RemoveaggrstmtContext | null {
        return this.getRuleContext(0, RemoveaggrstmtContext);
    }
    public removefuncstmt(): RemovefuncstmtContext | null {
        return this.getRuleContext(0, RemovefuncstmtContext);
    }
    public removeoperstmt(): RemoveoperstmtContext | null {
        return this.getRuleContext(0, RemoveoperstmtContext);
    }
    public renamestmt(): RenamestmtContext | null {
        return this.getRuleContext(0, RenamestmtContext);
    }
    public revokestmt(): RevokestmtContext | null {
        return this.getRuleContext(0, RevokestmtContext);
    }
    public revokerolestmt(): RevokerolestmtContext | null {
        return this.getRuleContext(0, RevokerolestmtContext);
    }
    public rulestmt(): RulestmtContext | null {
        return this.getRuleContext(0, RulestmtContext);
    }
    public seclabelstmt(): SeclabelstmtContext | null {
        return this.getRuleContext(0, SeclabelstmtContext);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public transactionstmt(): TransactionstmtContext | null {
        return this.getRuleContext(0, TransactionstmtContext);
    }
    public truncatestmt(): TruncatestmtContext | null {
        return this.getRuleContext(0, TruncatestmtContext);
    }
    public unlistenstmt(): UnlistenstmtContext | null {
        return this.getRuleContext(0, UnlistenstmtContext);
    }
    public updatestmt(): UpdatestmtContext | null {
        return this.getRuleContext(0, UpdatestmtContext);
    }
    public vacuumstmt(): VacuumstmtContext | null {
        return this.getRuleContext(0, VacuumstmtContext);
    }
    public variableresetstmt(): VariableresetstmtContext | null {
        return this.getRuleContext(0, VariableresetstmtContext);
    }
    public variablesetstmt(): VariablesetstmtContext | null {
        return this.getRuleContext(0, VariablesetstmtContext);
    }
    public variableshowstmt(): VariableshowstmtContext | null {
        return this.getRuleContext(0, VariableshowstmtContext);
    }
    public viewstmt(): ViewstmtContext | null {
        return this.getRuleContext(0, ViewstmtContext);
    }
    public MetaCommand(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MetaCommand, 0);
    }
    public EndMetaCommand(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EndMetaCommand, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt) {
             listener.enterStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt) {
             listener.exitStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt) {
            return visitor.visitStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CallstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CALL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CALL, 0)!;
    }
    public func_application(): Func_applicationContext {
        return this.getRuleContext(0, Func_applicationContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_callstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCallstmt) {
             listener.enterCallstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCallstmt) {
             listener.exitCallstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCallstmt) {
            return visitor.visitCallstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreaterolestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public optrolelist(): OptrolelistContext {
        return this.getRuleContext(0, OptrolelistContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createrolestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreaterolestmt) {
             listener.enterCreaterolestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreaterolestmt) {
             listener.exitCreaterolestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreaterolestmt) {
            return visitor.visitCreaterolestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptrolelistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createoptroleelem(): CreateoptroleelemContext[];
    public createoptroleelem(i: number): CreateoptroleelemContext | null;
    public createoptroleelem(i?: number): CreateoptroleelemContext[] | CreateoptroleelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateoptroleelemContext);
        }

        return this.getRuleContext(i, CreateoptroleelemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optrolelist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptrolelist) {
             listener.enterOptrolelist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptrolelist) {
             listener.exitOptrolelist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptrolelist) {
            return visitor.visitOptrolelist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlteroptrolelistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alteroptroleelem(): AlteroptroleelemContext[];
    public alteroptroleelem(i: number): AlteroptroleelemContext | null;
    public alteroptroleelem(i?: number): AlteroptroleelemContext[] | AlteroptroleelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlteroptroleelemContext);
        }

        return this.getRuleContext(i, AlteroptroleelemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alteroptrolelist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlteroptrolelist) {
             listener.enterAlteroptrolelist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlteroptrolelist) {
             listener.exitAlteroptrolelist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlteroptrolelist) {
            return visitor.visitAlteroptrolelist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlteroptroleelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PASSWORD, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENCRYPTED, 0);
    }
    public KW_UNENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNENCRYPTED, 0);
    }
    public KW_INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERIT, 0);
    }
    public KW_NOINHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOINHERIT, 0);
    }
    public KW_CREATEUSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATEUSER, 0);
    }
    public KW_NOCREATEUSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOCREATEUSER, 0);
    }
    public KW_CREATEROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATEROLE, 0);
    }
    public KW_NOCREATEROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOCREATEROLE, 0);
    }
    public KW_CREATEDB(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATEDB, 0);
    }
    public KW_NOCREATEDB(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOCREATEDB, 0);
    }
    public KW_SUPERUSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUPERUSER, 0);
    }
    public KW_NOSUPERUSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOSUPERUSER, 0);
    }
    public KW_LOGIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOGIN, 0);
    }
    public KW_NOLOGIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOLOGIN, 0);
    }
    public KW_REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLICATION, 0);
    }
    public KW_NOREPLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOREPLICATION, 0);
    }
    public KW_BYPASSRLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BYPASSRLS, 0);
    }
    public KW_NOBYPASSRLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOBYPASSRLS, 0);
    }
    public KW_CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONNECTION, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIMIT, 0);
    }
    public signediconst(): SignediconstContext | null {
        return this.getRuleContext(0, SignediconstContext);
    }
    public KW_VALID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALID, 0);
    }
    public KW_UNTIL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNTIL, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public role_list(): Role_listContext | null {
        return this.getRuleContext(0, Role_listContext);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADMIN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alteroptroleelem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlteroptroleelem) {
             listener.enterAlteroptroleelem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlteroptroleelem) {
             listener.exitAlteroptroleelem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlteroptroleelem) {
            return visitor.visitAlteroptroleelem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateoptroleelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alteroptroleelem(): AlteroptroleelemContext | null {
        return this.getRuleContext(0, AlteroptroleelemContext);
    }
    public KW_SYSID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSID, 0);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public role_list(): Role_listContext | null {
        return this.getRuleContext(0, Role_listContext);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADMIN, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createoptroleelem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateoptroleelem) {
             listener.enterCreateoptroleelem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateoptroleelem) {
             listener.exitCreateoptroleelem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateoptroleelem) {
            return visitor.visitCreateoptroleelem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateuserstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_USER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USER, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public optrolelist(): OptrolelistContext {
        return this.getRuleContext(0, OptrolelistContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createuserstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateuserstmt) {
             listener.enterCreateuserstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateuserstmt) {
             listener.exitCreateuserstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateuserstmt) {
            return visitor.visitCreateuserstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterrolestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public alteroptrolelist(): AlteroptrolelistContext {
        return this.getRuleContext(0, AlteroptrolelistContext)!;
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterrolestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterrolestmt) {
             listener.enterAlterrolestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterrolestmt) {
             listener.exitAlterrolestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterrolestmt) {
            return visitor.visitAlterrolestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterrolesetstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0)!;
    }
    public database_name(): Database_nameContext {
        return this.getRuleContext(0, Database_nameContext)!;
    }
    public setresetclause(): SetresetclauseContext {
        return this.getRuleContext(0, SetresetclauseContext)!;
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterrolesetstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterrolesetstmt) {
             listener.enterAlterrolesetstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterrolesetstmt) {
             listener.exitAlterrolesetstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterrolesetstmt) {
            return visitor.visitAlterrolesetstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterroutinestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_ROUTINE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0)!;
    }
    public routine_name(): Routine_nameContext {
        return this.getRuleContext(0, Routine_nameContext)!;
    }
    public alter_routine_cluase(): Alter_routine_cluaseContext {
        return this.getRuleContext(0, Alter_routine_cluaseContext)!;
    }
    public func_args(): Func_argsContext | null {
        return this.getRuleContext(0, Func_argsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterroutinestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterroutinestmt) {
             listener.enterAlterroutinestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterroutinestmt) {
             listener.exitAlterroutinestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterroutinestmt) {
            return visitor.visitAlterroutinestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_routine_cluaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public routine_action(): Routine_actionContext[];
    public routine_action(i: number): Routine_actionContext | null;
    public routine_action(i?: number): Routine_actionContext[] | Routine_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Routine_actionContext);
        }

        return this.getRuleContext(i, Routine_actionContext);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public routine_name_create(): Routine_name_createContext | null {
        return this.getRuleContext(0, Routine_name_createContext);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name_create(): Schema_name_createContext | null {
        return this.getRuleContext(0, Schema_name_createContext);
    }
    public KW_DEPENDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEPENDS, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_routine_cluase;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_routine_cluase) {
             listener.enterAlter_routine_cluase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_routine_cluase) {
             listener.exitAlter_routine_cluase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_routine_cluase) {
            return visitor.visitAlter_routine_cluase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Routine_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IMMUTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMUTABLE, 0);
    }
    public KW_STABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STABLE, 0);
    }
    public KW_VOLATILE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VOLATILE, 0);
    }
    public KW_LEAKPROOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEAKPROOF, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INVOKER, 0);
    }
    public KW_DEFINER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFINER, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTERNAL, 0);
    }
    public KW_PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARALLEL, 0);
    }
    public KW_UNSAFE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNSAFE, 0);
    }
    public KW_RESTRICTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICTED, 0);
    }
    public KW_SAFE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SAFE, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COST, 0);
    }
    public collabel(): CollabelContext | null {
        return this.getRuleContext(0, CollabelContext);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_routine_action;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoutine_action) {
             listener.enterRoutine_action(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoutine_action) {
             listener.exitRoutine_action(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutine_action) {
            return visitor.visitRoutine_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreategroupstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public optrolelist(): OptrolelistContext {
        return this.getRuleContext(0, OptrolelistContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_creategroupstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreategroupstmt) {
             listener.enterCreategroupstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreategroupstmt) {
             listener.exitCreategroupstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreategroupstmt) {
            return visitor.visitCreategroupstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltergroupstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public KW_USER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USER, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altergroupstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltergroupstmt) {
             listener.enterAltergroupstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltergroupstmt) {
             listener.exitAltergroupstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltergroupstmt) {
            return visitor.visitAltergroupstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateschemastmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_SCHEMA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0)!;
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AUTHORIZATION, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public schema_name_create(): Schema_name_createContext | null {
        return this.getRuleContext(0, Schema_name_createContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public schema_stmt(): Schema_stmtContext[];
    public schema_stmt(i: number): Schema_stmtContext | null;
    public schema_stmt(i?: number): Schema_stmtContext[] | Schema_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Schema_stmtContext);
        }

        return this.getRuleContext(i, Schema_stmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createschemastmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateschemastmt) {
             listener.enterCreateschemastmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateschemastmt) {
             listener.exitCreateschemastmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateschemastmt) {
            return visitor.visitCreateschemastmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Schema_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_schema_name_create;
    }
    public override copyFrom(ctx: Schema_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class SchemaNameCreateContext extends Schema_name_createContext {
    public constructor(ctx: Schema_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSchemaNameCreate) {
             listener.enterSchemaNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSchemaNameCreate) {
             listener.exitSchemaNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaNameCreate) {
            return visitor.visitSchemaNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Schema_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createstmt(): CreatestmtContext | null {
        return this.getRuleContext(0, CreatestmtContext);
    }
    public indexstmt(): IndexstmtContext | null {
        return this.getRuleContext(0, IndexstmtContext);
    }
    public createseqstmt(): CreateseqstmtContext | null {
        return this.getRuleContext(0, CreateseqstmtContext);
    }
    public createtrigstmt(): CreatetrigstmtContext | null {
        return this.getRuleContext(0, CreatetrigstmtContext);
    }
    public grantstmt(): GrantstmtContext | null {
        return this.getRuleContext(0, GrantstmtContext);
    }
    public viewstmt(): ViewstmtContext | null {
        return this.getRuleContext(0, ViewstmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_schema_stmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSchema_stmt) {
             listener.enterSchema_stmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSchema_stmt) {
             listener.exitSchema_stmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSchema_stmt) {
            return visitor.visitSchema_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariablesetstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public set_rest(): Set_restContext {
        return this.getRuleContext(0, Set_restContext)!;
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_variablesetstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVariablesetstmt) {
             listener.enterVariablesetstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVariablesetstmt) {
             listener.exitVariablesetstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVariablesetstmt) {
            return visitor.visitVariablesetstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_restContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public transaction_mode_list(): Transaction_mode_listContext | null {
        return this.getRuleContext(0, Transaction_mode_listContext);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public KW_CHARACTERISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHARACTERISTICS, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public set_rest_more(): Set_rest_moreContext | null {
        return this.getRuleContext(0, Set_rest_moreContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_set_rest;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSet_rest) {
             listener.enterSet_rest(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSet_rest) {
             listener.exitSet_rest(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSet_rest) {
            return visitor.visitSet_rest(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Generic_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public var_name(): Var_nameContext | null {
        return this.getRuleContext(0, Var_nameContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public var_list(): Var_listContext | null {
        return this.getRuleContext(0, Var_listContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_generic_set;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGeneric_set) {
             listener.enterGeneric_set(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGeneric_set) {
             listener.exitGeneric_set(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGeneric_set) {
            return visitor.visitGeneric_set(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_rest_moreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIME, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0);
    }
    public zone_value(): Zone_valueContext | null {
        return this.getRuleContext(0, Zone_valueContext);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CATALOG, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name(): Schema_nameContext | null {
        return this.getRuleContext(0, Schema_nameContext);
    }
    public KW_NAMES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NAMES, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | null {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_XML(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XML, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public document_or_content(): Document_or_contentContext | null {
        return this.getRuleContext(0, Document_or_contentContext);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public KW_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SNAPSHOT, 0);
    }
    public var_name(): Var_nameContext | null {
        return this.getRuleContext(0, Var_nameContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public generic_set(): Generic_setContext | null {
        return this.getRuleContext(0, Generic_setContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_set_rest_more;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSet_rest_more) {
             listener.enterSet_rest_more(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSet_rest_more) {
             listener.exitSet_rest_more(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSet_rest_more) {
            return visitor.visitSet_rest_more(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Var_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.DOT);
    	} else {
    		return this.getToken(PostgreSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_var_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVar_name) {
             listener.enterVar_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVar_name) {
             listener.exitVar_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVar_name) {
            return visitor.visitVar_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Var_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public var_value(): Var_valueContext[];
    public var_value(i: number): Var_valueContext | null;
    public var_value(i?: number): Var_valueContext[] | Var_valueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Var_valueContext);
        }

        return this.getRuleContext(i, Var_valueContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_var_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVar_list) {
             listener.enterVar_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVar_list) {
             listener.exitVar_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVar_list) {
            return visitor.visitVar_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Var_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_boolean_or_string(): Opt_boolean_or_stringContext | null {
        return this.getRuleContext(0, Opt_boolean_or_stringContext);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_var_value;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVar_value) {
             listener.enterVar_value(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVar_value) {
             listener.exitVar_value(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVar_value) {
            return visitor.visitVar_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Iso_levelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_READ, 0);
    }
    public KW_UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNCOMMITTED, 0);
    }
    public KW_COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMITTED, 0);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPEATABLE, 0);
    }
    public KW_SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERIALIZABLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_iso_level;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIso_level) {
             listener.enterIso_level(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIso_level) {
             listener.exitIso_level(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIso_level) {
            return visitor.visitIso_level(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_boolean_or_string_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_boolean_or_string_column;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_boolean_or_string_column) {
             listener.enterOpt_boolean_or_string_column(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_boolean_or_string_column) {
             listener.exitOpt_boolean_or_string_column(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_boolean_or_string_column) {
            return visitor.visitOpt_boolean_or_string_column(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_boolean_or_stringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | null {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_boolean_or_string;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_boolean_or_string) {
             listener.enterOpt_boolean_or_string(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_boolean_or_string) {
             listener.exitOpt_boolean_or_string(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_boolean_or_string) {
            return visitor.visitOpt_boolean_or_string(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Zone_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERVAL, 0);
    }
    public opt_interval(): Opt_intervalContext | null {
        return this.getRuleContext(0, Opt_intervalContext);
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_zone_value;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterZone_value) {
             listener.enterZone_value(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitZone_value) {
             listener.exitZone_value(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitZone_value) {
            return visitor.visitZone_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Nonreservedword_or_sconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonreservedword(): NonreservedwordContext | null {
        return this.getRuleContext(0, NonreservedwordContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_nonreservedword_or_sconst;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNonreservedword_or_sconst) {
             listener.enterNonreservedword_or_sconst(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNonreservedword_or_sconst) {
             listener.exitNonreservedword_or_sconst(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNonreservedword_or_sconst) {
            return visitor.visitNonreservedword_or_sconst(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableresetstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RESET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_RESET, 0)!;
    }
    public reset_rest(): Reset_restContext {
        return this.getRuleContext(0, Reset_restContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_variableresetstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVariableresetstmt) {
             listener.enterVariableresetstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVariableresetstmt) {
             listener.exitVariableresetstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVariableresetstmt) {
            return visitor.visitVariableresetstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Reset_restContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIME, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ISOLATION, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEVEL, 0);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public var_name(): Var_nameContext | null {
        return this.getRuleContext(0, Var_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reset_rest;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReset_rest) {
             listener.enterReset_rest(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReset_rest) {
             listener.exitReset_rest(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReset_rest) {
            return visitor.visitReset_rest(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetresetclauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public set_rest(): Set_restContext | null {
        return this.getRuleContext(0, Set_restContext);
    }
    public variableresetstmt(): VariableresetstmtContext | null {
        return this.getRuleContext(0, VariableresetstmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_setresetclause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSetresetclause) {
             listener.enterSetresetclause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSetresetclause) {
             listener.exitSetresetclause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetresetclause) {
            return visitor.visitSetresetclause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionsetresetclauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public set_rest_more(): Set_rest_moreContext | null {
        return this.getRuleContext(0, Set_rest_moreContext);
    }
    public variableresetstmt(): VariableresetstmtContext | null {
        return this.getRuleContext(0, VariableresetstmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_functionsetresetclause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunctionsetresetclause) {
             listener.enterFunctionsetresetclause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunctionsetresetclause) {
             listener.exitFunctionsetresetclause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionsetresetclause) {
            return visitor.visitFunctionsetresetclause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableshowstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SHOW, 0)!;
    }
    public var_name(): Var_nameContext | null {
        return this.getRuleContext(0, Var_nameContext);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIME, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ISOLATION, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEVEL, 0);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_variableshowstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVariableshowstmt) {
             listener.enterVariableshowstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVariableshowstmt) {
             listener.exitVariableshowstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVariableshowstmt) {
            return visitor.visitVariableshowstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintssetstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public KW_CONSTRAINTS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINTS, 0)!;
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRED, 0);
    }
    public KW_IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMEDIATE, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public qualified_name_list(): Qualified_name_listContext | null {
        return this.getRuleContext(0, Qualified_name_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_constraintssetstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConstraintssetstmt) {
             listener.enterConstraintssetstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConstraintssetstmt) {
             listener.exitConstraintssetstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintssetstmt) {
            return visitor.visitConstraintssetstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckpointstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CHECKPOINT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CHECKPOINT, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_checkpointstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCheckpointstmt) {
             listener.enterCheckpointstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCheckpointstmt) {
             listener.exitCheckpointstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCheckpointstmt) {
            return visitor.visitCheckpointstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DiscardstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISCARD(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DISCARD, 0)!;
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMP, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPORARY, 0);
    }
    public KW_PLANS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PLANS, 0);
    }
    public KW_SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCES, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_discardstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDiscardstmt) {
             listener.enterDiscardstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDiscardstmt) {
             listener.exitDiscardstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDiscardstmt) {
            return visitor.visitDiscardstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltertablestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public relation_expr(): Relation_exprContext | null {
        return this.getRuleContext(0, Relation_exprContext);
    }
    public alter_table_cmds(): Alter_table_cmdsContext | null {
        return this.getRuleContext(0, Alter_table_cmdsContext);
    }
    public partition_cmd(): Partition_cmdContext | null {
        return this.getRuleContext(0, Partition_cmdContext);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public opttablespace(): OpttablespaceContext[];
    public opttablespace(i: number): OpttablespaceContext | null;
    public opttablespace(i?: number): OpttablespaceContext[] | OpttablespaceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OpttablespaceContext);
        }

        return this.getRuleContext(i, OpttablespaceContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public tablespace_name_create(): Tablespace_name_createContext | null {
        return this.getRuleContext(0, Tablespace_name_createContext);
    }
    public KW_OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public role_list(): Role_listContext | null {
        return this.getRuleContext(0, Role_listContext);
    }
    public KW_NOWAIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOWAIT, 0);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public index_partition_cmd(): Index_partition_cmdContext | null {
        return this.getRuleContext(0, Index_partition_cmdContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUES, 0);
    }
    public partition_bound_spec(): Partition_bound_specContext | null {
        return this.getRuleContext(0, Partition_bound_specContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_DETACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DETACH, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public KW_FINALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FINALIZE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altertablestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltertablestmt) {
             listener.enterAltertablestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltertablestmt) {
             listener.exitAltertablestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltertablestmt) {
            return visitor.visitAltertablestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_cmdsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_cmd(): Alter_table_cmdContext[];
    public alter_table_cmd(i: number): Alter_table_cmdContext | null;
    public alter_table_cmd(i?: number): Alter_table_cmdContext[] | Alter_table_cmdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_table_cmdContext);
        }

        return this.getRuleContext(i, Alter_table_cmdContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_table_cmds;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_table_cmds) {
             listener.enterAlter_table_cmds(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_table_cmds) {
             listener.exitAlter_table_cmds(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_cmds) {
            return visitor.visitAlter_table_cmds(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Partition_bound_specContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public partition_bound_cluase(): Partition_bound_cluaseContext[];
    public partition_bound_cluase(i: number): Partition_bound_cluaseContext | null;
    public partition_bound_cluase(i?: number): Partition_bound_cluaseContext[] | Partition_bound_cluaseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Partition_bound_cluaseContext);
        }

        return this.getRuleContext(i, Partition_bound_cluaseContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public partition_with_cluase(): Partition_with_cluaseContext | null {
        return this.getRuleContext(0, Partition_with_cluaseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partition_bound_spec;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartition_bound_spec) {
             listener.enterPartition_bound_spec(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartition_bound_spec) {
             listener.exitPartition_bound_spec(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartition_bound_spec) {
            return visitor.visitPartition_bound_spec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Partition_bound_cluaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public partition_bound_choose(): Partition_bound_chooseContext[];
    public partition_bound_choose(i: number): Partition_bound_chooseContext | null;
    public partition_bound_choose(i?: number): Partition_bound_chooseContext[] | Partition_bound_chooseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Partition_bound_chooseContext);
        }

        return this.getRuleContext(i, Partition_bound_chooseContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partition_bound_cluase;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartition_bound_cluase) {
             listener.enterPartition_bound_cluase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartition_bound_cluase) {
             listener.exitPartition_bound_cluase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartition_bound_cluase) {
            return visitor.visitPartition_bound_cluase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Partition_bound_chooseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public KW_MINVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINVALUE, 0);
    }
    public KW_MAXVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAXVALUE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partition_bound_choose;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartition_bound_choose) {
             listener.enterPartition_bound_choose(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartition_bound_choose) {
             listener.exitPartition_bound_choose(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartition_bound_choose) {
            return visitor.visitPartition_bound_choose(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Partition_with_cluaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public KW_MODULUS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MODULUS, 0)!;
    }
    public numericonly(): NumericonlyContext[];
    public numericonly(i: number): NumericonlyContext | null;
    public numericonly(i?: number): NumericonlyContext[] | NumericonlyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumericonlyContext);
        }

        return this.getRuleContext(i, NumericonlyContext);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.COMMA, 0)!;
    }
    public KW_REMAINDER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REMAINDER, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partition_with_cluase;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartition_with_cluase) {
             listener.enterPartition_with_cluase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartition_with_cluase) {
             listener.exitPartition_with_cluase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartition_with_cluase) {
            return visitor.visitPartition_with_cluase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Partition_cmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public index_partition_cmd(): Index_partition_cmdContext | null {
        return this.getRuleContext(0, Index_partition_cmdContext);
    }
    public partitionboundspec(): PartitionboundspecContext | null {
        return this.getRuleContext(0, PartitionboundspecContext);
    }
    public KW_DETACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DETACH, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partition_cmd;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartition_cmd) {
             listener.enterPartition_cmd(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartition_cmd) {
             listener.exitPartition_cmd(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartition_cmd) {
            return visitor.visitPartition_cmd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Index_partition_cmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ATTACH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ATTACH, 0)!;
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_index_partition_cmd;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndex_partition_cmd) {
             listener.enterIndex_partition_cmd(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndex_partition_cmd) {
             listener.exitIndex_partition_cmd(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndex_partition_cmd) {
            return visitor.visitIndex_partition_cmd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_cmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public constraintelem(): ConstraintelemContext | null {
        return this.getRuleContext(0, ConstraintelemContext);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0);
    }
    public constraintattributespec(): ConstraintattributespecContext | null {
        return this.getRuleContext(0, ConstraintattributespecContext);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public KW_OIDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OIDS, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLUSTER, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_LOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOGGED, 0);
    }
    public KW_UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLOGGED, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENABLE, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_REPLICA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLICA, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALWAYS, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISABLE, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public KW_INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERIT, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public tablespace_name_create(): Tablespace_name_createContext | null {
        return this.getRuleContext(0, Tablespace_name_createContext);
    }
    public KW_IDENTITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IDENTITY, 0);
    }
    public replica_identity(): Replica_identityContext | null {
        return this.getRuleContext(0, Replica_identityContext);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEVEL, 0);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0);
    }
    public KW_FORCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORCE, 0);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMN, 0);
    }
    public column_def(): Column_defContext | null {
        return this.getRuleContext(0, Column_defContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public alter_column_default(): Alter_column_defaultContext | null {
        return this.getRuleContext(0, Alter_column_defaultContext);
    }
    public alter_generic_options(): Alter_generic_optionsContext | null {
        return this.getRuleContext(0, Alter_generic_optionsContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXPRESSION, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public signediconst(): SignediconstContext | null {
        return this.getRuleContext(0, SignediconstContext);
    }
    public reloptions(): ReloptionsContext | null {
        return this.getRuleContext(0, ReloptionsContext);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORAGE, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GENERATED, 0);
    }
    public generated_when(): Generated_whenContext | null {
        return this.getRuleContext(0, Generated_whenContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public optparenthesizedseqoptlist(): OptparenthesizedseqoptlistContext | null {
        return this.getRuleContext(0, OptparenthesizedseqoptlistContext);
    }
    public alter_identity_column_option(): Alter_identity_column_optionContext[];
    public alter_identity_column_option(i: number): Alter_identity_column_optionContext | null;
    public alter_identity_column_option(i?: number): Alter_identity_column_optionContext[] | Alter_identity_column_optionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_identity_column_optionContext);
        }

        return this.getRuleContext(i, Alter_identity_column_optionContext);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_table_cmd;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_table_cmd) {
             listener.enterAlter_table_cmd(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_table_cmd) {
             listener.exitAlter_table_cmd(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_cmd) {
            return visitor.visitAlter_table_cmd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_column_defaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_column_default;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_column_default) {
             listener.enterAlter_column_default(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_column_default) {
             listener.exitAlter_column_default(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_column_default) {
            return visitor.visitAlter_column_default(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_drop_behaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADE, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_drop_behavior;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_drop_behavior) {
             listener.enterOpt_drop_behavior(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_drop_behavior) {
             listener.exitOpt_drop_behavior(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_drop_behavior) {
            return visitor.visitOpt_drop_behavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_collate_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COLLATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_COLLATE, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_collate_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_collate_clause) {
             listener.enterOpt_collate_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_collate_clause) {
             listener.exitOpt_collate_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_collate_clause) {
            return visitor.visitOpt_collate_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Replica_identityContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTHING, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FULL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public existingindex(): ExistingindexContext | null {
        return this.getRuleContext(0, ExistingindexContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_replica_identity;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReplica_identity) {
             listener.enterReplica_identity(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReplica_identity) {
             listener.exitReplica_identity(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReplica_identity) {
            return visitor.visitReplica_identity(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReloptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public reloption_list(): Reloption_listContext {
        return this.getRuleContext(0, Reloption_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reloptions;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReloptions) {
             listener.enterReloptions(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReloptions) {
             listener.exitReloptions(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReloptions) {
            return visitor.visitReloptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_reloptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public reloptions(): ReloptionsContext {
        return this.getRuleContext(0, ReloptionsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_reloptions;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_reloptions) {
             listener.enterOpt_reloptions(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_reloptions) {
             listener.exitOpt_reloptions(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_reloptions) {
            return visitor.visitOpt_reloptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Reloption_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public reloption_elem(): Reloption_elemContext[];
    public reloption_elem(i: number): Reloption_elemContext | null;
    public reloption_elem(i?: number): Reloption_elemContext[] | Reloption_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Reloption_elemContext);
        }

        return this.getRuleContext(i, Reloption_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reloption_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReloption_list) {
             listener.enterReloption_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReloption_list) {
             listener.exitReloption_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReloption_list) {
            return visitor.visitReloption_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Reloption_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collabel(): CollabelContext {
        return this.getRuleContext(0, CollabelContext)!;
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public def_arg(): Def_argContext | null {
        return this.getRuleContext(0, Def_argContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.DOT, 0);
    }
    public def_elem(): Def_elemContext | null {
        return this.getRuleContext(0, Def_elemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reloption_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReloption_elem) {
             listener.enterReloption_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReloption_elem) {
             listener.exitReloption_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReloption_elem) {
            return visitor.visitReloption_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_identity_column_optionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RESTART(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTART, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public seqoptelem(): SeqoptelemContext | null {
        return this.getRuleContext(0, SeqoptelemContext);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GENERATED, 0);
    }
    public generated_when(): Generated_whenContext | null {
        return this.getRuleContext(0, Generated_whenContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_identity_column_option;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_identity_column_option) {
             listener.enterAlter_identity_column_option(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_identity_column_option) {
             listener.exitAlter_identity_column_option(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_identity_column_option) {
            return visitor.visitAlter_identity_column_option(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionboundspecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUES, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public hash_partbound(): Hash_partboundContext | null {
        return this.getRuleContext(0, Hash_partboundContext);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext[];
    public execute_param_clause(i: number): Execute_param_clauseContext | null;
    public execute_param_clause(i?: number): Execute_param_clauseContext[] | Execute_param_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Execute_param_clauseContext);
        }

        return this.getRuleContext(i, Execute_param_clauseContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partitionboundspec;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartitionboundspec) {
             listener.enterPartitionboundspec(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartitionboundspec) {
             listener.exitPartitionboundspec(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionboundspec) {
            return visitor.visitPartitionboundspec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Hash_partbound_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonreservedword(): NonreservedwordContext {
        return this.getRuleContext(0, NonreservedwordContext)!;
    }
    public Integral(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.Integral, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_hash_partbound_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterHash_partbound_elem) {
             listener.enterHash_partbound_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitHash_partbound_elem) {
             listener.exitHash_partbound_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHash_partbound_elem) {
            return visitor.visitHash_partbound_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Hash_partboundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public hash_partbound_elem(): Hash_partbound_elemContext[];
    public hash_partbound_elem(i: number): Hash_partbound_elemContext | null;
    public hash_partbound_elem(i?: number): Hash_partbound_elemContext[] | Hash_partbound_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Hash_partbound_elemContext);
        }

        return this.getRuleContext(i, Hash_partbound_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_hash_partbound;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterHash_partbound) {
             listener.enterHash_partbound(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitHash_partbound) {
             listener.exitHash_partbound(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHash_partbound) {
            return visitor.visitHash_partbound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltercompositetypestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public alter_type_cmd(): Alter_type_cmdContext[];
    public alter_type_cmd(i: number): Alter_type_cmdContext | null;
    public alter_type_cmd(i?: number): Alter_type_cmdContext[] | Alter_type_cmdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_type_cmdContext);
        }

        return this.getRuleContext(i, Alter_type_cmdContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altercompositetypestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltercompositetypestmt) {
             listener.enterAltercompositetypestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltercompositetypestmt) {
             listener.exitAltercompositetypestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltercompositetypestmt) {
            return visitor.visitAltercompositetypestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_type_cmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_ATTRIBUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ATTRIBUTE, 0)!;
    }
    public tablefuncelement(): TablefuncelementContext | null {
        return this.getRuleContext(0, TablefuncelementContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_type_cmd;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_type_cmd) {
             listener.enterAlter_type_cmd(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_type_cmd) {
             listener.exitAlter_type_cmd(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_type_cmd) {
            return visitor.visitAlter_type_cmd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CloseportalstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLOSE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CLOSE, 0)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_closeportalstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCloseportalstmt) {
             listener.enterCloseportalstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCloseportalstmt) {
             listener.exitCloseportalstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCloseportalstmt) {
            return visitor.visitCloseportalstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CopystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COPY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_COPY, 0)!;
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public copy_file_name(): Copy_file_nameContext {
        return this.getRuleContext(0, Copy_file_nameContext)!;
    }
    public copy_options(): Copy_optionsContext {
        return this.getRuleContext(0, Copy_optionsContext)!;
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BINARY, 0);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public KW_PROGRAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROGRAM, 0);
    }
    public copy_delimiter(): Copy_delimiterContext | null {
        return this.getRuleContext(0, Copy_delimiterContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public preparablestmt(): PreparablestmtContext | null {
        return this.getRuleContext(0, PreparablestmtContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_copystmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCopystmt) {
             listener.enterCopystmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCopystmt) {
             listener.exitCopystmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopystmt) {
            return visitor.visitCopystmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Copy_file_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_STDIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STDIN, 0);
    }
    public KW_STDOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STDOUT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_copy_file_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCopy_file_name) {
             listener.enterCopy_file_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCopy_file_name) {
             listener.exitCopy_file_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopy_file_name) {
            return visitor.visitCopy_file_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Copy_optionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public copy_opt_item(): Copy_opt_itemContext[];
    public copy_opt_item(i: number): Copy_opt_itemContext | null;
    public copy_opt_item(i?: number): Copy_opt_itemContext[] | Copy_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Copy_opt_itemContext);
        }

        return this.getRuleContext(i, Copy_opt_itemContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public copy_generic_opt_elem(): Copy_generic_opt_elemContext[];
    public copy_generic_opt_elem(i: number): Copy_generic_opt_elemContext | null;
    public copy_generic_opt_elem(i?: number): Copy_generic_opt_elemContext[] | Copy_generic_opt_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Copy_generic_opt_elemContext);
        }

        return this.getRuleContext(i, Copy_generic_opt_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_copy_options;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCopy_options) {
             listener.enterCopy_options(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCopy_options) {
             listener.exitCopy_options(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopy_options) {
            return visitor.visitCopy_options(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Copy_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BINARY, 0);
    }
    public KW_FREEZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FREEZE, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_DELIMITER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELIMITER, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ESCAPE, 0);
    }
    public KW_QUOTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_QUOTE, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public KW_CSV(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CSV, 0);
    }
    public KW_HEADER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HEADER, 0);
    }
    public KW_FORCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORCE, 0);
    }
    public column_list(): Column_listContext | null {
        return this.getRuleContext(0, Column_listContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_ENCODING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENCODING, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_copy_opt_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCopy_opt_item) {
             listener.enterCopy_opt_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCopy_opt_item) {
             listener.exitCopy_opt_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopy_opt_item) {
            return visitor.visitCopy_opt_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Copy_delimiterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DELIMITERS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DELIMITERS, 0)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_copy_delimiter;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCopy_delimiter) {
             listener.enterCopy_delimiter(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCopy_delimiter) {
             listener.exitCopy_delimiter(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopy_delimiter) {
            return visitor.visitCopy_delimiter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Copy_generic_opt_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collabel(): CollabelContext {
        return this.getRuleContext(0, CollabelContext)!;
    }
    public copy_generic_opt_arg(): Copy_generic_opt_argContext | null {
        return this.getRuleContext(0, Copy_generic_opt_argContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_copy_generic_opt_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCopy_generic_opt_elem) {
             listener.enterCopy_generic_opt_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCopy_generic_opt_elem) {
             listener.exitCopy_generic_opt_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopy_generic_opt_elem) {
            return visitor.visitCopy_generic_opt_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Copy_generic_opt_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_boolean_or_string(): Opt_boolean_or_stringContext | null {
        return this.getRuleContext(0, Opt_boolean_or_stringContext);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public copy_generic_opt_arg_list(): Copy_generic_opt_arg_listContext | null {
        return this.getRuleContext(0, Copy_generic_opt_arg_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_copy_generic_opt_arg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCopy_generic_opt_arg) {
             listener.enterCopy_generic_opt_arg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCopy_generic_opt_arg) {
             listener.exitCopy_generic_opt_arg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopy_generic_opt_arg) {
            return visitor.visitCopy_generic_opt_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Copy_generic_opt_arg_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_boolean_or_string_column(): Opt_boolean_or_string_columnContext[];
    public opt_boolean_or_string_column(i: number): Opt_boolean_or_string_columnContext | null;
    public opt_boolean_or_string_column(i?: number): Opt_boolean_or_string_columnContext[] | Opt_boolean_or_string_columnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_boolean_or_string_columnContext);
        }

        return this.getRuleContext(i, Opt_boolean_or_string_columnContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_copy_generic_opt_arg_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCopy_generic_opt_arg_list) {
             listener.enterCopy_generic_opt_arg_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCopy_generic_opt_arg_list) {
             listener.exitCopy_generic_opt_arg_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopy_generic_opt_arg_list) {
            return visitor.visitCopy_generic_opt_arg_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createstmt;
    }
    public override copyFrom(ctx: CreatestmtContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnCreateTableContext extends CreatestmtContext {
    public constructor(ctx: CreatestmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0)!;
    }
    public table_name_create(): Table_name_createContext {
        return this.getRuleContext(0, Table_name_createContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public partitionboundspec(): PartitionboundspecContext | null {
        return this.getRuleContext(0, PartitionboundspecContext);
    }
    public opttemp(): OpttempContext | null {
        return this.getRuleContext(0, OpttempContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public tableelementlist(): TableelementlistContext | null {
        return this.getRuleContext(0, TableelementlistContext);
    }
    public optinherit(): OptinheritContext | null {
        return this.getRuleContext(0, OptinheritContext);
    }
    public partitionspec(): PartitionspecContext | null {
        return this.getRuleContext(0, PartitionspecContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public optwith(): OptwithContext | null {
        return this.getRuleContext(0, OptwithContext);
    }
    public oncommitoption(): OncommitoptionContext | null {
        return this.getRuleContext(0, OncommitoptionContext);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public opttypedtableelementlist(): OpttypedtableelementlistContext | null {
        return this.getRuleContext(0, OpttypedtableelementlistContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnCreateTable) {
             listener.enterColumnCreateTable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnCreateTable) {
             listener.exitColumnCreateTable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnCreateTable) {
            return visitor.visitColumnCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OpttempContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMP, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GLOBAL, 0);
    }
    public KW_UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLOGGED, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opttemp;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpttemp) {
             listener.enterOpttemp(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpttemp) {
             listener.exitOpttemp(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpttemp) {
            return visitor.visitOpttemp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OpttypedtableelementlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public typedtableelementlist(): TypedtableelementlistContext {
        return this.getRuleContext(0, TypedtableelementlistContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opttypedtableelementlist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpttypedtableelementlist) {
             listener.enterOpttypedtableelementlist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpttypedtableelementlist) {
             listener.exitOpttypedtableelementlist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpttypedtableelementlist) {
            return visitor.visitOpttypedtableelementlist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableelementlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableelement(): TableelementContext[];
    public tableelement(i: number): TableelementContext | null;
    public tableelement(i?: number): TableelementContext[] | TableelementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableelementContext);
        }

        return this.getRuleContext(i, TableelementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableelementlist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableelementlist) {
             listener.enterTableelementlist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableelementlist) {
             listener.exitTableelementlist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableelementlist) {
            return visitor.visitTableelementlist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypedtableelementlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public typedtableelement(): TypedtableelementContext[];
    public typedtableelement(i: number): TypedtableelementContext | null;
    public typedtableelement(i?: number): TypedtableelementContext[] | TypedtableelementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypedtableelementContext);
        }

        return this.getRuleContext(i, TypedtableelementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_typedtableelementlist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTypedtableelementlist) {
             listener.enterTypedtableelementlist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTypedtableelementlist) {
             listener.exitTypedtableelementlist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTypedtableelementlist) {
            return visitor.visitTypedtableelementlist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableelementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_def(): Column_defContext | null {
        return this.getRuleContext(0, Column_defContext);
    }
    public tablelikeclause(): TablelikeclauseContext | null {
        return this.getRuleContext(0, TablelikeclauseContext);
    }
    public tableconstraint(): TableconstraintContext | null {
        return this.getRuleContext(0, TableconstraintContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableelement;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableelement) {
             listener.enterTableelement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableelement) {
             listener.exitTableelement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableelement) {
            return visitor.visitTableelement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypedtableelementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name_create(): Column_name_createContext | null {
        return this.getRuleContext(0, Column_name_createContext);
    }
    public colquallist(): ColquallistContext | null {
        return this.getRuleContext(0, ColquallistContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTIONS, 0);
    }
    public tableconstraint(): TableconstraintContext | null {
        return this.getRuleContext(0, TableconstraintContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_typedtableelement;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTypedtableelement) {
             listener.enterTypedtableelement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTypedtableelement) {
             listener.exitTypedtableelement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTypedtableelement) {
            return visitor.visitTypedtableelement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_defContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name_create(): Column_name_createContext {
        return this.getRuleContext(0, Column_name_createContext)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public colquallist(): ColquallistContext {
        return this.getRuleContext(0, ColquallistContext)!;
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public storageCluase(): StorageCluaseContext | null {
        return this.getRuleContext(0, StorageCluaseContext);
    }
    public KW_COMPRESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMPRESSION, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTIONS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_column_def;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumn_def) {
             listener.enterColumn_def(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumn_def) {
             listener.exitColumn_def(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumn_def) {
            return visitor.visitColumn_def(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StorageCluaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_STORAGE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_STORAGE, 0)!;
    }
    public KW_PLAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PLAIN, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTERNAL, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENDED, 0);
    }
    public KW_MAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAIN, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_storageCluase;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStorageCluase) {
             listener.enterStorageCluase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStorageCluase) {
             listener.exitStorageCluase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStorageCluase) {
            return visitor.visitStorageCluase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColquallistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colconstraint(): ColconstraintContext[];
    public colconstraint(i: number): ColconstraintContext | null;
    public colconstraint(i?: number): ColconstraintContext[] | ColconstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColconstraintContext);
        }

        return this.getRuleContext(i, ColconstraintContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_colquallist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColquallist) {
             listener.enterColquallist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColquallist) {
             listener.exitColquallist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColquallist) {
            return visitor.visitColquallist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColconstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colconstraintelem(): ColconstraintelemContext {
        return this.getRuleContext(0, ColconstraintelemContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public deferrable_trigger(): Deferrable_triggerContext | null {
        return this.getRuleContext(0, Deferrable_triggerContext);
    }
    public initially_trigger(): Initially_triggerContext | null {
        return this.getRuleContext(0, Initially_triggerContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_colconstraint;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColconstraint) {
             listener.enterColconstraint(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColconstraint) {
             listener.exitColconstraint(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColconstraint) {
            return visitor.visitColconstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColconstraintelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNIQUE, 0);
    }
    public opt_definition(): Opt_definitionContext | null {
        return this.getRuleContext(0, Opt_definitionContext);
    }
    public optconstablespace(): OptconstablespaceContext | null {
        return this.getRuleContext(0, OptconstablespaceContext);
    }
    public index_paramenters_create(): Index_paramenters_createContext | null {
        return this.getRuleContext(0, Index_paramenters_createContext);
    }
    public nulls_distinct(): Nulls_distinctContext | null {
        return this.getRuleContext(0, Nulls_distinctContext);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIMARY, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_KEY, 0);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERIT, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GENERATED, 0);
    }
    public generated_when(): Generated_whenContext | null {
        return this.getRuleContext(0, Generated_whenContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public KW_IDENTITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IDENTITY, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORED, 0);
    }
    public optparenthesizedseqoptlist(): OptparenthesizedseqoptlistContext | null {
        return this.getRuleContext(0, OptparenthesizedseqoptlistContext);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCES, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public key_match(): Key_matchContext | null {
        return this.getRuleContext(0, Key_matchContext);
    }
    public key_actions(): Key_actionsContext | null {
        return this.getRuleContext(0, Key_actionsContext);
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_colconstraintelem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColconstraintelem) {
             listener.enterColconstraintelem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColconstraintelem) {
             listener.exitColconstraintelem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColconstraintelem) {
            return visitor.visitColconstraintelem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Nulls_distinctContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULLS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NULLS, 0)!;
    }
    public KW_DISTINCT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_nulls_distinct;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNulls_distinct) {
             listener.enterNulls_distinct(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNulls_distinct) {
             listener.exitNulls_distinct(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNulls_distinct) {
            return visitor.visitNulls_distinct(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Generated_whenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALWAYS, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_generated_when;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGenerated_when) {
             listener.enterGenerated_when(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGenerated_when) {
             listener.exitGenerated_when(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGenerated_when) {
            return visitor.visitGenerated_when(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Deferrable_triggerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEFERRABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DEFERRABLE, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_deferrable_trigger;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDeferrable_trigger) {
             listener.enterDeferrable_trigger(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDeferrable_trigger) {
             listener.exitDeferrable_trigger(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeferrable_trigger) {
            return visitor.visitDeferrable_trigger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Initially_triggerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INITIALLY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INITIALLY, 0)!;
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRED, 0);
    }
    public KW_IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMEDIATE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_initially_trigger;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInitially_trigger) {
             listener.enterInitially_trigger(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInitially_trigger) {
             listener.exitInitially_trigger(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInitially_trigger) {
            return visitor.visitInitially_trigger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablelikeclauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIKE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LIKE, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public tablelikeoption(): TablelikeoptionContext[];
    public tablelikeoption(i: number): TablelikeoptionContext | null;
    public tablelikeoption(i?: number): TablelikeoptionContext[] | TablelikeoptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablelikeoptionContext);
        }

        return this.getRuleContext(i, TablelikeoptionContext);
    }
    public KW_INCLUDING(): antlr.TerminalNode[];
    public KW_INCLUDING(i: number): antlr.TerminalNode | null;
    public KW_INCLUDING(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_INCLUDING);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_INCLUDING, i);
    	}
    }
    public KW_EXCLUDING(): antlr.TerminalNode[];
    public KW_EXCLUDING(i: number): antlr.TerminalNode | null;
    public KW_EXCLUDING(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_EXCLUDING);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_EXCLUDING, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tablelikeclause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTablelikeclause) {
             listener.enterTablelikeclause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTablelikeclause) {
             listener.exitTablelikeclause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablelikeclause) {
            return visitor.visitTablelikeclause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablelikeoptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMENTS, 0);
    }
    public KW_CONSTRAINTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINTS, 0);
    }
    public KW_DEFAULTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULTS, 0);
    }
    public KW_IDENTITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IDENTITY, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GENERATED, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEXES, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORAGE, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tablelikeoption;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTablelikeoption) {
             listener.enterTablelikeoption(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTablelikeoption) {
             listener.exitTablelikeoption(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablelikeoption) {
            return visitor.visitTablelikeoption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableconstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constraintelem(): ConstraintelemContext {
        return this.getRuleContext(0, ConstraintelemContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableconstraint;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableconstraint) {
             listener.enterTableconstraint(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableconstraint) {
             listener.exitTableconstraint(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableconstraint) {
            return visitor.visitTableconstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public constraintattributespec(): ConstraintattributespecContext | null {
        return this.getRuleContext(0, ConstraintattributespecContext);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNIQUE, 0);
    }
    public opt_column_list(): Opt_column_listContext[];
    public opt_column_list(i: number): Opt_column_listContext | null;
    public opt_column_list(i?: number): Opt_column_listContext[] | Opt_column_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_column_listContext);
        }

        return this.getRuleContext(i, Opt_column_listContext);
    }
    public existingindex(): ExistingindexContext | null {
        return this.getRuleContext(0, ExistingindexContext);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIMARY, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_KEY, 0);
    }
    public opt_c_include(): Opt_c_includeContext | null {
        return this.getRuleContext(0, Opt_c_includeContext);
    }
    public opt_definition(): Opt_definitionContext | null {
        return this.getRuleContext(0, Opt_definitionContext);
    }
    public optconstablespace(): OptconstablespaceContext | null {
        return this.getRuleContext(0, OptconstablespaceContext);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUDE, 0);
    }
    public exclusionconstraintlist(): ExclusionconstraintlistContext | null {
        return this.getRuleContext(0, ExclusionconstraintlistContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public exclusionwhereclause(): ExclusionwhereclauseContext | null {
        return this.getRuleContext(0, ExclusionwhereclauseContext);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCES, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public key_match(): Key_matchContext | null {
        return this.getRuleContext(0, Key_matchContext);
    }
    public key_actions(): Key_actionsContext | null {
        return this.getRuleContext(0, Key_actionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_constraintelem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConstraintelem) {
             listener.enterConstraintelem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConstraintelem) {
             listener.exitConstraintelem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintelem) {
            return visitor.visitConstraintelem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public column_list(): Column_listContext {
        return this.getRuleContext(0, Column_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_column_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_column_list) {
             listener.enterOpt_column_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_column_list) {
             listener.exitOpt_column_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_column_list) {
            return visitor.visitOpt_column_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_column_list_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public column_name_create(): Column_name_createContext[];
    public column_name_create(i: number): Column_name_createContext | null;
    public column_name_create(i?: number): Column_name_createContext[] | Column_name_createContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_name_createContext);
        }

        return this.getRuleContext(i, Column_name_createContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_column_list_create;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_column_list_create) {
             listener.enterOpt_column_list_create(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_column_list_create) {
             listener.exitOpt_column_list_create(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_column_list_create) {
            return visitor.visitOpt_column_list_create(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext[];
    public column_name(i: number): Column_nameContext | null;
    public column_name(i?: number): Column_nameContext[] | Column_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_nameContext);
        }

        return this.getRuleContext(i, Column_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_column_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumn_list) {
             listener.enterColumn_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumn_list) {
             listener.exitColumn_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumn_list) {
            return visitor.visitColumn_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_c_includeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INCLUDE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INCLUDE, 0)!;
    }
    public opt_column_list(): Opt_column_listContext {
        return this.getRuleContext(0, Opt_column_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_c_include;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_c_include) {
             listener.enterOpt_c_include(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_c_include) {
             listener.exitOpt_c_include(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_c_include) {
            return visitor.visitOpt_c_include(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Key_matchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MATCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MATCH, 0)!;
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FULL, 0);
    }
    public KW_PARTIAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTIAL, 0);
    }
    public KW_SIMPLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SIMPLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_key_match;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterKey_match) {
             listener.enterKey_match(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitKey_match) {
             listener.exitKey_match(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKey_match) {
            return visitor.visitKey_match(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExclusionconstraintlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public exclusionconstraintelem(): ExclusionconstraintelemContext[];
    public exclusionconstraintelem(i: number): ExclusionconstraintelemContext | null;
    public exclusionconstraintelem(i?: number): ExclusionconstraintelemContext[] | ExclusionconstraintelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExclusionconstraintelemContext);
        }

        return this.getRuleContext(i, ExclusionconstraintelemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_exclusionconstraintlist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExclusionconstraintlist) {
             listener.enterExclusionconstraintlist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExclusionconstraintlist) {
             listener.exitExclusionconstraintlist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExclusionconstraintlist) {
            return visitor.visitExclusionconstraintlist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExclusionconstraintelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public index_elem(): Index_elemContext {
        return this.getRuleContext(0, Index_elemContext)!;
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_exclusionconstraintelem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExclusionconstraintelem) {
             listener.enterExclusionconstraintelem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExclusionconstraintelem) {
             listener.exitExclusionconstraintelem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExclusionconstraintelem) {
            return visitor.visitExclusionconstraintelem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExclusionwhereclauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHERE, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_exclusionwhereclause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExclusionwhereclause) {
             listener.enterExclusionwhereclause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExclusionwhereclause) {
             listener.exitExclusionwhereclause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExclusionwhereclause) {
            return visitor.visitExclusionwhereclause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Key_actionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public key_update(): Key_updateContext | null {
        return this.getRuleContext(0, Key_updateContext);
    }
    public key_delete(): Key_deleteContext | null {
        return this.getRuleContext(0, Key_deleteContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_key_actions;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterKey_actions) {
             listener.enterKey_actions(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitKey_actions) {
             listener.exitKey_actions(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKey_actions) {
            return visitor.visitKey_actions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Key_updateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0)!;
    }
    public key_action(): Key_actionContext {
        return this.getRuleContext(0, Key_actionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_key_update;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterKey_update) {
             listener.enterKey_update(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitKey_update) {
             listener.exitKey_update(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKey_update) {
            return visitor.visitKey_update(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Key_deleteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public KW_DELETE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0)!;
    }
    public key_action(): Key_actionContext {
        return this.getRuleContext(0, Key_actionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_key_delete;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterKey_delete) {
             listener.enterKey_delete(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitKey_delete) {
             listener.exitKey_delete(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKey_delete) {
            return visitor.visitKey_delete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Key_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_ACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACTION, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public column_list(): Column_listContext | null {
        return this.getRuleContext(0, Column_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_key_action;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterKey_action) {
             listener.enterKey_action(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitKey_action) {
             listener.exitKey_action(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKey_action) {
            return visitor.visitKey_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptinheritContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INHERITS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INHERITS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public qualified_name_list(): Qualified_name_listContext {
        return this.getRuleContext(0, Qualified_name_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optinherit;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptinherit) {
             listener.enterOptinherit(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptinherit) {
             listener.exitOptinherit(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptinherit) {
            return visitor.visitOptinherit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionspecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public part_params(): Part_paramsContext {
        return this.getRuleContext(0, Part_paramsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partitionspec;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartitionspec) {
             listener.enterPartitionspec(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartitionspec) {
             listener.exitPartitionspec(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionspec) {
            return visitor.visitPartitionspec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Part_paramsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public part_elem(): Part_elemContext[];
    public part_elem(i: number): Part_elemContext | null;
    public part_elem(i?: number): Part_elemContext[] | Part_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Part_elemContext);
        }

        return this.getRuleContext(i, Part_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_part_params;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPart_params) {
             listener.enterPart_params(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPart_params) {
             listener.exitPart_params(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPart_params) {
            return visitor.visitPart_params(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Part_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public func_expr_windowless(): Func_expr_windowlessContext | null {
        return this.getRuleContext(0, Func_expr_windowlessContext);
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_part_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPart_elem) {
             listener.enterPart_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPart_elem) {
             listener.exitPart_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPart_elem) {
            return visitor.visitPart_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_access_method_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_table_access_method_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTable_access_method_clause) {
             listener.enterTable_access_method_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTable_access_method_clause) {
             listener.exitTable_access_method_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTable_access_method_clause) {
            return visitor.visitTable_access_method_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptwithContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public reloptions(): ReloptionsContext | null {
        return this.getRuleContext(0, ReloptionsContext);
    }
    public KW_OIDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OIDS, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optwith;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptwith) {
             listener.enterOptwith(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptwith) {
             listener.exitOptwith(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptwith) {
            return visitor.visitOptwith(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OncommitoptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public KW_COMMIT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_COMMIT, 0)!;
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRESERVE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_oncommitoption;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOncommitoption) {
             listener.enterOncommitoption(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOncommitoption) {
             listener.exitOncommitoption(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOncommitoption) {
            return visitor.visitOncommitoption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OpttablespaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLESPACE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0)!;
    }
    public tablespace_name(): Tablespace_nameContext {
        return this.getRuleContext(0, Tablespace_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opttablespace;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpttablespace) {
             listener.enterOpttablespace(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpttablespace) {
             listener.exitOpttablespace(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpttablespace) {
            return visitor.visitOpttablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Index_paramenters_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_include(): Opt_includeContext | null {
        return this.getRuleContext(0, Opt_includeContext);
    }
    public with_clause(): With_clauseContext | null {
        return this.getRuleContext(0, With_clauseContext);
    }
    public optconstablespace(): OptconstablespaceContext | null {
        return this.getRuleContext(0, OptconstablespaceContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_index_paramenters_create;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndex_paramenters_create) {
             listener.enterIndex_paramenters_create(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndex_paramenters_create) {
             listener.exitIndex_paramenters_create(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndex_paramenters_create) {
            return visitor.visitIndex_paramenters_create(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptconstablespaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0)!;
    }
    public opttablespace(): OpttablespaceContext {
        return this.getRuleContext(0, OpttablespaceContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optconstablespace;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptconstablespace) {
             listener.enterOptconstablespace(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptconstablespace) {
             listener.exitOptconstablespace(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptconstablespace) {
            return visitor.visitOptconstablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExistingindexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_existingindex;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExistingindex) {
             listener.enterExistingindex(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExistingindex) {
             listener.exitExistingindex(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExistingindex) {
            return visitor.visitExistingindex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatestatsstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public from_clause(): From_clauseContext {
        return this.getRuleContext(0, From_clauseContext)!;
    }
    public column_expr_list(): Column_expr_listContext | null {
        return this.getRuleContext(0, Column_expr_listContext);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createstatsstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatestatsstmt) {
             listener.enterCreatestatsstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatestatsstmt) {
             listener.exitCreatestatsstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatestatsstmt) {
            return visitor.visitCreatestatsstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterstatsstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode[];
    public KW_STATISTICS(i: number): antlr.TerminalNode | null;
    public KW_STATISTICS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_STATISTICS);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_STATISTICS, i);
    	}
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public signediconst(): SignediconstContext {
        return this.getRuleContext(0, SignediconstContext)!;
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterstatsstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterstatsstmt) {
             listener.enterAlterstatsstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterstatsstmt) {
             listener.exitAlterstatsstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterstatsstmt) {
            return visitor.visitAlterstatsstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateasstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createasstmt;
    }
    public override copyFrom(ctx: CreateasstmtContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryCreateTableContext extends CreateasstmtContext {
    public constructor(ctx: CreateasstmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0)!;
    }
    public create_as_target(): Create_as_targetContext {
        return this.getRuleContext(0, Create_as_targetContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public selectstmt(): SelectstmtContext {
        return this.getRuleContext(0, SelectstmtContext)!;
    }
    public opttemp(): OpttempContext | null {
        return this.getRuleContext(0, OpttempContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public opt_with_data(): Opt_with_dataContext | null {
        return this.getRuleContext(0, Opt_with_dataContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQueryCreateTable) {
             listener.enterQueryCreateTable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQueryCreateTable) {
             listener.exitQueryCreateTable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryCreateTable) {
            return visitor.visitQueryCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_as_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_name_create(): Table_name_createContext {
        return this.getRuleContext(0, Table_name_createContext)!;
    }
    public opt_column_list_create(): Opt_column_list_createContext | null {
        return this.getRuleContext(0, Opt_column_list_createContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public optwith(): OptwithContext | null {
        return this.getRuleContext(0, OptwithContext);
    }
    public oncommitoption(): OncommitoptionContext | null {
        return this.getRuleContext(0, OncommitoptionContext);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_create_as_target;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreate_as_target) {
             listener.enterCreate_as_target(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreate_as_target) {
             listener.exitCreate_as_target(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreate_as_target) {
            return visitor.visitCreate_as_target(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_with_dataContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_with_data;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_with_data) {
             listener.enterOpt_with_data(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_with_data) {
             listener.exitOpt_with_data(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_with_data) {
            return visitor.visitOpt_with_data(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatematviewstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_creatematviewstmt;
    }
    public override copyFrom(ctx: CreatematviewstmtContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateMaterializedViewContext extends CreatematviewstmtContext {
    public constructor(ctx: CreatematviewstmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0)!;
    }
    public create_mv_target(): Create_mv_targetContext {
        return this.getRuleContext(0, Create_mv_targetContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public selectstmt(): SelectstmtContext {
        return this.getRuleContext(0, SelectstmtContext)!;
    }
    public KW_UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLOGGED, 0);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public opt_with_data(): Opt_with_dataContext | null {
        return this.getRuleContext(0, Opt_with_dataContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateMaterializedView) {
             listener.enterCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateMaterializedView) {
             listener.exitCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedView) {
            return visitor.visitCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_mv_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public view_name_create(): View_name_createContext {
        return this.getRuleContext(0, View_name_createContext)!;
    }
    public opt_column_list_create(): Opt_column_list_createContext | null {
        return this.getRuleContext(0, Opt_column_list_createContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public opt_reloptions(): Opt_reloptionsContext | null {
        return this.getRuleContext(0, Opt_reloptionsContext);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_create_mv_target;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreate_mv_target) {
             listener.enterCreate_mv_target(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreate_mv_target) {
             listener.exitCreate_mv_target(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreate_mv_target) {
            return visitor.visitCreate_mv_target(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RefreshmatviewstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REFRESH, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0)!;
    }
    public view_name(): View_nameContext {
        return this.getRuleContext(0, View_nameContext)!;
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public opt_with_data(): Opt_with_dataContext | null {
        return this.getRuleContext(0, Opt_with_dataContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_refreshmatviewstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRefreshmatviewstmt) {
             listener.enterRefreshmatviewstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRefreshmatviewstmt) {
             listener.exitRefreshmatviewstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshmatviewstmt) {
            return visitor.visitRefreshmatviewstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateseqstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_SEQUENCE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public opttemp(): OpttempContext | null {
        return this.getRuleContext(0, OpttempContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public seqoptlist(): SeqoptlistContext | null {
        return this.getRuleContext(0, SeqoptlistContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createseqstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateseqstmt) {
             listener.enterCreateseqstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateseqstmt) {
             listener.exitCreateseqstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateseqstmt) {
            return visitor.visitCreateseqstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterseqstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_SEQUENCE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public seqoptlist(): SeqoptlistContext {
        return this.getRuleContext(0, SeqoptlistContext)!;
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterseqstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterseqstmt) {
             listener.enterAlterseqstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterseqstmt) {
             listener.exitAlterseqstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterseqstmt) {
            return visitor.visitAlterseqstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptparenthesizedseqoptlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public seqoptlist(): SeqoptlistContext {
        return this.getRuleContext(0, SeqoptlistContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optparenthesizedseqoptlist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptparenthesizedseqoptlist) {
             listener.enterOptparenthesizedseqoptlist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptparenthesizedseqoptlist) {
             listener.exitOptparenthesizedseqoptlist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptparenthesizedseqoptlist) {
            return visitor.visitOptparenthesizedseqoptlist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SeqoptlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public seqoptelem(): SeqoptelemContext[];
    public seqoptelem(i: number): SeqoptelemContext | null;
    public seqoptelem(i?: number): SeqoptelemContext[] | SeqoptelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SeqoptelemContext);
        }

        return this.getRuleContext(i, SeqoptelemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_seqoptlist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSeqoptlist) {
             listener.enterSeqoptlist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSeqoptlist) {
             listener.exitSeqoptlist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSeqoptlist) {
            return visitor.visitSeqoptlist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SeqoptelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public simpletypename(): SimpletypenameContext | null {
        return this.getRuleContext(0, SimpletypenameContext);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CACHE, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public KW_INCREMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCREMENT, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public KW_MAXVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAXVALUE, 0);
    }
    public KW_MINVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINVALUE, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_CYCLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CYCLE, 0);
    }
    public KW_OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNED, 0);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NAME, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_START, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_RESTART(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTART, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_seqoptelem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSeqoptelem) {
             listener.enterSeqoptelem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSeqoptelem) {
             listener.exitSeqoptelem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSeqoptelem) {
            return visitor.visitSeqoptelem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumericonlyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Numeric(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Numeric, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public signediconst(): SignediconstContext | null {
        return this.getRuleContext(0, SignediconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_numericonly;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNumericonly) {
             listener.enterNumericonly(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNumericonly) {
             listener.exitNumericonly(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNumericonly) {
            return visitor.visitNumericonly(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Numericonly_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numericonly(): NumericonlyContext[];
    public numericonly(i: number): NumericonlyContext | null;
    public numericonly(i?: number): NumericonlyContext[] | NumericonlyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumericonlyContext);
        }

        return this.getRuleContext(i, NumericonlyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_numericonly_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNumericonly_list) {
             listener.enterNumericonly_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNumericonly_list) {
             listener.exitNumericonly_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNumericonly_list) {
            return visitor.visitNumericonly_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateplangstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_LANGUAGE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public opt_or_replace(): Opt_or_replaceContext | null {
        return this.getRuleContext(0, Opt_or_replaceContext);
    }
    public KW_TRUSTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUSTED, 0);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public KW_HANDLER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HANDLER, 0);
    }
    public any_name(): Any_nameContext[];
    public any_name(i: number): Any_nameContext | null;
    public any_name(i?: number): Any_nameContext[] | Any_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Any_nameContext);
        }

        return this.getRuleContext(i, Any_nameContext);
    }
    public KW_INLINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INLINE, 0);
    }
    public KW_VALIDATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATOR, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createplangstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateplangstmt) {
             listener.enterCreateplangstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateplangstmt) {
             listener.exitCreateplangstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateplangstmt) {
            return visitor.visitCreateplangstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatetablespacestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public opttablespace(): OpttablespaceContext {
        return this.getRuleContext(0, OpttablespaceContext)!;
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LOCATION, 0)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public opt_reloptions(): Opt_reloptionsContext | null {
        return this.getRuleContext(0, Opt_reloptionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createtablespacestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatetablespacestmt) {
             listener.enterCreatetablespacestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatetablespacestmt) {
             listener.exitCreatetablespacestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatetablespacestmt) {
            return visitor.visitCreatetablespacestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateextensionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public create_extension_opt_item(): Create_extension_opt_itemContext[];
    public create_extension_opt_item(i: number): Create_extension_opt_itemContext | null;
    public create_extension_opt_item(i?: number): Create_extension_opt_itemContext[] | Create_extension_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Create_extension_opt_itemContext);
        }

        return this.getRuleContext(i, Create_extension_opt_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createextensionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateextensionstmt) {
             listener.enterCreateextensionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateextensionstmt) {
             listener.exitCreateextensionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateextensionstmt) {
            return visitor.visitCreateextensionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_extension_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name(): Schema_nameContext | null {
        return this.getRuleContext(0, Schema_nameContext);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | null {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VERSION, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_create_extension_opt_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreate_extension_opt_item) {
             listener.enterCreate_extension_opt_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreate_extension_opt_item) {
             listener.exitCreate_extension_opt_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreate_extension_opt_item) {
            return visitor.visitCreate_extension_opt_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterextensionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0)!;
    }
    public KW_TO(): antlr.TerminalNode[];
    public KW_TO(i: number): antlr.TerminalNode | null;
    public KW_TO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_TO);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_TO, i);
    	}
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext[];
    public nonreservedword_or_sconst(i: number): Nonreservedword_or_sconstContext | null;
    public nonreservedword_or_sconst(i?: number): Nonreservedword_or_sconstContext[] | Nonreservedword_or_sconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Nonreservedword_or_sconstContext);
        }

        return this.getRuleContext(i, Nonreservedword_or_sconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterextensionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterextensionstmt) {
             listener.enterAlterextensionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterextensionstmt) {
             listener.exitAlterextensionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterextensionstmt) {
            return visitor.visitAlterextensionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterextensioncontentsstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public operator_with_argtypes(): Operator_with_argtypesContext | null {
        return this.getRuleContext(0, Operator_with_argtypesContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CAST, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public object_type_name(): Object_type_nameContext | null {
        return this.getRuleContext(0, Object_type_nameContext);
    }
    public object_type_any_name(): Object_type_any_nameContext | null {
        return this.getRuleContext(0, Object_type_any_nameContext);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterextensioncontentsstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterextensioncontentsstmt) {
             listener.enterAlterextensioncontentsstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterextensioncontentsstmt) {
             listener.exitAlterextensioncontentsstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterextensioncontentsstmt) {
            return visitor.visitAlterextensioncontentsstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatefdwstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATA, 0)!;
    }
    public KW_WRAPPER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public fdw_options(): Fdw_optionsContext | null {
        return this.getRuleContext(0, Fdw_optionsContext);
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createfdwstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatefdwstmt) {
             listener.enterCreatefdwstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatefdwstmt) {
             listener.exitCreatefdwstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatefdwstmt) {
            return visitor.visitCreatefdwstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Fdw_optionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_HANDLER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HANDLER, 0);
    }
    public KW_VALIDATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATOR, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fdw_option;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFdw_option) {
             listener.enterFdw_option(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFdw_option) {
             listener.exitFdw_option(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFdw_option) {
            return visitor.visitFdw_option(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Fdw_optionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fdw_option(): Fdw_optionContext[];
    public fdw_option(i: number): Fdw_optionContext | null;
    public fdw_option(i?: number): Fdw_optionContext[] | Fdw_optionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Fdw_optionContext);
        }

        return this.getRuleContext(i, Fdw_optionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fdw_options;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFdw_options) {
             listener.enterFdw_options(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFdw_options) {
             listener.exitFdw_options(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFdw_options) {
            return visitor.visitFdw_options(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterfdwstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATA, 0)!;
    }
    public KW_WRAPPER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public alter_generic_options(): Alter_generic_optionsContext | null {
        return this.getRuleContext(0, Alter_generic_optionsContext);
    }
    public fdw_options(): Fdw_optionsContext | null {
        return this.getRuleContext(0, Fdw_optionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterfdwstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterfdwstmt) {
             listener.enterAlterfdwstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterfdwstmt) {
             listener.exitAlterfdwstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterfdwstmt) {
            return visitor.visitAlterfdwstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_generic_optionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OPTIONS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPTIONS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public generic_option_list(): Generic_option_listContext {
        return this.getRuleContext(0, Generic_option_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_create_generic_options;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreate_generic_options) {
             listener.enterCreate_generic_options(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreate_generic_options) {
             listener.exitCreate_generic_options(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreate_generic_options) {
            return visitor.visitCreate_generic_options(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Generic_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public generic_option_elem(): Generic_option_elemContext[];
    public generic_option_elem(i: number): Generic_option_elemContext | null;
    public generic_option_elem(i?: number): Generic_option_elemContext[] | Generic_option_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Generic_option_elemContext);
        }

        return this.getRuleContext(i, Generic_option_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_generic_option_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGeneric_option_list) {
             listener.enterGeneric_option_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGeneric_option_list) {
             listener.exitGeneric_option_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGeneric_option_list) {
            return visitor.visitGeneric_option_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_generic_optionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OPTIONS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPTIONS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public alter_generic_option_list(): Alter_generic_option_listContext {
        return this.getRuleContext(0, Alter_generic_option_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_generic_options;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_generic_options) {
             listener.enterAlter_generic_options(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_generic_options) {
             listener.exitAlter_generic_options(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_generic_options) {
            return visitor.visitAlter_generic_options(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_generic_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_generic_option_elem(): Alter_generic_option_elemContext[];
    public alter_generic_option_elem(i: number): Alter_generic_option_elemContext | null;
    public alter_generic_option_elem(i?: number): Alter_generic_option_elemContext[] | Alter_generic_option_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_generic_option_elemContext);
        }

        return this.getRuleContext(i, Alter_generic_option_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_generic_option_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_generic_option_list) {
             listener.enterAlter_generic_option_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_generic_option_list) {
             listener.exitAlter_generic_option_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_generic_option_list) {
            return visitor.visitAlter_generic_option_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_generic_option_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public generic_option_elem(): Generic_option_elemContext {
        return this.getRuleContext(0, Generic_option_elemContext)!;
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_generic_option_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_generic_option_elem) {
             listener.enterAlter_generic_option_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_generic_option_elem) {
             listener.exitAlter_generic_option_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_generic_option_elem) {
            return visitor.visitAlter_generic_option_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Generic_option_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collabel(): CollabelContext {
        return this.getRuleContext(0, CollabelContext)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_generic_option_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGeneric_option_elem) {
             listener.enterGeneric_option_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGeneric_option_elem) {
             listener.exitGeneric_option_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGeneric_option_elem) {
            return visitor.visitGeneric_option_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateforeignserverstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATA, 0)!;
    }
    public KW_WRAPPER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0)!;
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public foreign_server_version(): Foreign_server_versionContext | null {
        return this.getRuleContext(0, Foreign_server_versionContext);
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createforeignserverstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateforeignserverstmt) {
             listener.enterCreateforeignserverstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateforeignserverstmt) {
             listener.exitCreateforeignserverstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateforeignserverstmt) {
            return visitor.visitCreateforeignserverstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Foreign_server_versionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VERSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VERSION, 0)!;
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_foreign_server_version;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterForeign_server_version) {
             listener.enterForeign_server_version(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitForeign_server_version) {
             listener.exitForeign_server_version(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitForeign_server_version) {
            return visitor.visitForeign_server_version(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterforeignserverstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public alter_generic_options(): Alter_generic_optionsContext | null {
        return this.getRuleContext(0, Alter_generic_optionsContext);
    }
    public foreign_server_version(): Foreign_server_versionContext | null {
        return this.getRuleContext(0, Foreign_server_versionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterforeignserverstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterforeignserverstmt) {
             listener.enterAlterforeignserverstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterforeignserverstmt) {
             listener.exitAlterforeignserverstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterforeignserverstmt) {
            return visitor.visitAlterforeignserverstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateforeigntablestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createforeigntablestmt;
    }
    public override copyFrom(ctx: CreateforeigntablestmtContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateForeignTableContext extends CreateforeigntablestmtContext {
    public constructor(ctx: CreateforeigntablestmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0)!;
    }
    public table_name_create(): Table_name_createContext {
        return this.getRuleContext(0, Table_name_createContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public tableelementlist(): TableelementlistContext | null {
        return this.getRuleContext(0, TableelementlistContext);
    }
    public optinherit(): OptinheritContext | null {
        return this.getRuleContext(0, OptinheritContext);
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateForeignTable) {
             listener.enterCreateForeignTable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateForeignTable) {
             listener.exitCreateForeignTable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateForeignTable) {
            return visitor.visitCreateForeignTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreatePartitionForeignTableContext extends CreateforeigntablestmtContext {
    public constructor(ctx: CreateforeigntablestmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0)!;
    }
    public table_name_create(): Table_name_createContext {
        return this.getRuleContext(0, Table_name_createContext)!;
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0)!;
    }
    public KW_OF(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OF, 0)!;
    }
    public table_name(): Table_nameContext {
        return this.getRuleContext(0, Table_nameContext)!;
    }
    public partitionboundspec(): PartitionboundspecContext {
        return this.getRuleContext(0, PartitionboundspecContext)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public opttypedtableelementlist(): OpttypedtableelementlistContext | null {
        return this.getRuleContext(0, OpttypedtableelementlistContext);
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatePartitionForeignTable) {
             listener.enterCreatePartitionForeignTable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatePartitionForeignTable) {
             listener.exitCreatePartitionForeignTable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatePartitionForeignTable) {
            return visitor.visitCreatePartitionForeignTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ImportforeignschemastmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IMPORT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IMPORT, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_SCHEMA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0)!;
    }
    public schema_name(): Schema_nameContext {
        return this.getRuleContext(0, Schema_nameContext)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public import_qualification(): Import_qualificationContext | null {
        return this.getRuleContext(0, Import_qualificationContext);
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_importforeignschemastmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterImportforeignschemastmt) {
             listener.enterImportforeignschemastmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitImportforeignschemastmt) {
             listener.exitImportforeignschemastmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitImportforeignschemastmt) {
            return visitor.visitImportforeignschemastmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Import_qualificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public relation_expr_list(): Relation_expr_listContext {
        return this.getRuleContext(0, Relation_expr_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIMIT, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCEPT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_import_qualification;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterImport_qualification) {
             listener.enterImport_qualification(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitImport_qualification) {
             listener.exitImport_qualification(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitImport_qualification) {
            return visitor.visitImport_qualification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateusermappingstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_USER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USER, 0)!;
    }
    public KW_MAPPING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MAPPING, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public auth_ident(): Auth_identContext {
        return this.getRuleContext(0, Auth_identContext)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createusermappingstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateusermappingstmt) {
             listener.enterCreateusermappingstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateusermappingstmt) {
             listener.exitCreateusermappingstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateusermappingstmt) {
            return visitor.visitCreateusermappingstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Auth_identContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_auth_ident;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAuth_ident) {
             listener.enterAuth_ident(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAuth_ident) {
             listener.exitAuth_ident(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAuth_ident) {
            return visitor.visitAuth_ident(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterusermappingstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_USER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USER, 0)!;
    }
    public KW_MAPPING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MAPPING, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public auth_ident(): Auth_identContext {
        return this.getRuleContext(0, Auth_identContext)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public alter_generic_options(): Alter_generic_optionsContext {
        return this.getRuleContext(0, Alter_generic_optionsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterusermappingstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterusermappingstmt) {
             listener.enterAlterusermappingstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterusermappingstmt) {
             listener.exitAlterusermappingstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterusermappingstmt) {
            return visitor.visitAlterusermappingstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatepolicystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_POLICY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public rowsecuritydefaultpermissive(): RowsecuritydefaultpermissiveContext | null {
        return this.getRuleContext(0, RowsecuritydefaultpermissiveContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public row_security_cmd(): Row_security_cmdContext | null {
        return this.getRuleContext(0, Row_security_cmdContext);
    }
    public rowsecuritydefaulttorole(): RowsecuritydefaulttoroleContext | null {
        return this.getRuleContext(0, RowsecuritydefaulttoroleContext);
    }
    public rowsecurityoptionalexpr(): RowsecurityoptionalexprContext | null {
        return this.getRuleContext(0, RowsecurityoptionalexprContext);
    }
    public rowsecurityoptionalwithcheck(): RowsecurityoptionalwithcheckContext | null {
        return this.getRuleContext(0, RowsecurityoptionalwithcheckContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createpolicystmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatepolicystmt) {
             listener.enterCreatepolicystmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatepolicystmt) {
             listener.exitCreatepolicystmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatepolicystmt) {
            return visitor.visitCreatepolicystmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterpolicystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_POLICY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public rowsecuritydefaulttorole(): RowsecuritydefaulttoroleContext | null {
        return this.getRuleContext(0, RowsecuritydefaulttoroleContext);
    }
    public rowsecurityoptionalexpr(): RowsecurityoptionalexprContext | null {
        return this.getRuleContext(0, RowsecurityoptionalexprContext);
    }
    public rowsecurityoptionalwithcheck(): RowsecurityoptionalwithcheckContext | null {
        return this.getRuleContext(0, RowsecurityoptionalwithcheckContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterpolicystmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterpolicystmt) {
             listener.enterAlterpolicystmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterpolicystmt) {
             listener.exitAlterpolicystmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterpolicystmt) {
            return visitor.visitAlterpolicystmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterprocedurestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_PROCEDURE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0)!;
    }
    public procedure_name(): Procedure_nameContext {
        return this.getRuleContext(0, Procedure_nameContext)!;
    }
    public procedure_cluase(): Procedure_cluaseContext {
        return this.getRuleContext(0, Procedure_cluaseContext)!;
    }
    public func_args(): Func_argsContext | null {
        return this.getRuleContext(0, Func_argsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterprocedurestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterprocedurestmt) {
             listener.enterAlterprocedurestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterprocedurestmt) {
             listener.exitAlterprocedurestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterprocedurestmt) {
            return visitor.visitAlterprocedurestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Procedure_cluaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public procedure_action(): Procedure_actionContext[];
    public procedure_action(i: number): Procedure_actionContext | null;
    public procedure_action(i?: number): Procedure_actionContext[] | Procedure_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Procedure_actionContext);
        }

        return this.getRuleContext(i, Procedure_actionContext);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public procedure_name_create(): Procedure_name_createContext | null {
        return this.getRuleContext(0, Procedure_name_createContext);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name_create(): Schema_name_createContext | null {
        return this.getRuleContext(0, Schema_name_createContext);
    }
    public KW_DEPENDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEPENDS, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedure_cluase;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedure_cluase) {
             listener.enterProcedure_cluase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedure_cluase) {
             listener.exitProcedure_cluase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedure_cluase) {
            return visitor.visitProcedure_cluase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Procedure_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INVOKER, 0);
    }
    public KW_DEFINER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFINER, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTERNAL, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedure_action;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedure_action) {
             listener.enterProcedure_action(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedure_action) {
             listener.exitProcedure_action(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedure_action) {
            return visitor.visitProcedure_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowsecurityoptionalexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rowsecurityoptionalexpr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRowsecurityoptionalexpr) {
             listener.enterRowsecurityoptionalexpr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRowsecurityoptionalexpr) {
             listener.exitRowsecurityoptionalexpr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowsecurityoptionalexpr) {
            return visitor.visitRowsecurityoptionalexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowsecurityoptionalwithcheckContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public KW_CHECK(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rowsecurityoptionalwithcheck;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRowsecurityoptionalwithcheck) {
             listener.enterRowsecurityoptionalwithcheck(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRowsecurityoptionalwithcheck) {
             listener.exitRowsecurityoptionalwithcheck(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowsecurityoptionalwithcheck) {
            return visitor.visitRowsecurityoptionalwithcheck(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowsecuritydefaulttoroleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rowsecuritydefaulttorole;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRowsecuritydefaulttorole) {
             listener.enterRowsecuritydefaulttorole(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRowsecuritydefaulttorole) {
             listener.exitRowsecuritydefaulttorole(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowsecuritydefaulttorole) {
            return visitor.visitRowsecuritydefaulttorole(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowsecuritydefaultpermissiveContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public KW_PERMISSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PERMISSIVE, 0);
    }
    public KW_RESTRICTIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICTIVE, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rowsecuritydefaultpermissive;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRowsecuritydefaultpermissive) {
             listener.enterRowsecuritydefaultpermissive(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRowsecuritydefaultpermissive) {
             listener.exitRowsecuritydefaultpermissive(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowsecuritydefaultpermissive) {
            return visitor.visitRowsecuritydefaultpermissive(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_security_cmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_row_security_cmd;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRow_security_cmd) {
             listener.enterRow_security_cmd(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRow_security_cmd) {
             listener.exitRow_security_cmd(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRow_security_cmd) {
            return visitor.visitRow_security_cmd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateamstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_ACCESS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ACCESS, 0)!;
    }
    public KW_METHOD(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_METHOD, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0)!;
    }
    public KW_HANDLER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_HANDLER, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createamstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateamstmt) {
             listener.enterCreateamstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateamstmt) {
             listener.exitCreateamstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateamstmt) {
            return visitor.visitCreateamstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatetrigstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_TRIGGER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public triggeractiontime(): TriggeractiontimeContext {
        return this.getRuleContext(0, TriggeractiontimeContext)!;
    }
    public triggerevents(): TriggereventsContext {
        return this.getRuleContext(0, TriggereventsContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public table_name(): Table_nameContext {
        return this.getRuleContext(0, Table_nameContext)!;
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0)!;
    }
    public function_or_procedure(): Function_or_procedureContext {
        return this.getRuleContext(0, Function_or_procedureContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public triggerfuncargs(): TriggerfuncargsContext {
        return this.getRuleContext(0, TriggerfuncargsContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public opt_or_replace(): Opt_or_replaceContext | null {
        return this.getRuleContext(0, Opt_or_replaceContext);
    }
    public triggerreferencing(): TriggerreferencingContext | null {
        return this.getRuleContext(0, TriggerreferencingContext);
    }
    public triggerforspec(): TriggerforspecContext | null {
        return this.getRuleContext(0, TriggerforspecContext);
    }
    public triggerwhen(): TriggerwhenContext | null {
        return this.getRuleContext(0, TriggerwhenContext);
    }
    public constraintattributespec(): ConstraintattributespecContext | null {
        return this.getRuleContext(0, ConstraintattributespecContext);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public foreachrow(): ForeachrowContext | null {
        return this.getRuleContext(0, ForeachrowContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createtrigstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatetrigstmt) {
             listener.enterCreatetrigstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatetrigstmt) {
             listener.exitCreatetrigstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatetrigstmt) {
            return visitor.visitCreatetrigstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggeractiontimeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BEFORE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BEFORE, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AFTER, 0);
    }
    public KW_INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSTEAD, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggeractiontime;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggeractiontime) {
             listener.enterTriggeractiontime(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggeractiontime) {
             listener.exitTriggeractiontime(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggeractiontime) {
            return visitor.visitTriggeractiontime(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ForeachrowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_STATEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATEMENT, 0);
    }
    public KW_EACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EACH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_foreachrow;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterForeachrow) {
             listener.enterForeachrow(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitForeachrow) {
             listener.exitForeachrow(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitForeachrow) {
            return visitor.visitForeachrow(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggereventsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public triggeroneevent(): TriggeroneeventContext[];
    public triggeroneevent(i: number): TriggeroneeventContext | null;
    public triggeroneevent(i?: number): TriggeroneeventContext[] | TriggeroneeventContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TriggeroneeventContext);
        }

        return this.getRuleContext(i, TriggeroneeventContext);
    }
    public KW_OR(): antlr.TerminalNode[];
    public KW_OR(i: number): antlr.TerminalNode | null;
    public KW_OR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_OR);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_OR, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerevents;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerevents) {
             listener.enterTriggerevents(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerevents) {
             listener.exitTriggerevents(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerevents) {
            return visitor.visitTriggerevents(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggeroneeventContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public column_list(): Column_listContext | null {
        return this.getRuleContext(0, Column_listContext);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUNCATE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggeroneevent;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggeroneevent) {
             listener.enterTriggeroneevent(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggeroneevent) {
             listener.exitTriggeroneevent(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggeroneevent) {
            return visitor.visitTriggeroneevent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerreferencingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REFERENCING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REFERENCING, 0)!;
    }
    public triggertransition(): TriggertransitionContext[];
    public triggertransition(i: number): TriggertransitionContext | null;
    public triggertransition(i?: number): TriggertransitionContext[] | TriggertransitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TriggertransitionContext);
        }

        return this.getRuleContext(i, TriggertransitionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerreferencing;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerreferencing) {
             listener.enterTriggerreferencing(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerreferencing) {
             listener.exitTriggerreferencing(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerreferencing) {
            return visitor.visitTriggerreferencing(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggertransitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_NEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEW, 0);
    }
    public KW_OLD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OLD, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggertransition;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggertransition) {
             listener.enterTriggertransition(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggertransition) {
             listener.exitTriggertransition(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggertransition) {
            return visitor.visitTriggertransition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerforspecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_STATEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATEMENT, 0);
    }
    public KW_EACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EACH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerforspec;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerforspec) {
             listener.enterTriggerforspec(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerforspec) {
             listener.exitTriggerforspec(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerforspec) {
            return visitor.visitTriggerforspec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerwhenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerwhen;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerwhen) {
             listener.enterTriggerwhen(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerwhen) {
             listener.exitTriggerwhen(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerwhen) {
            return visitor.visitTriggerwhen(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Function_or_procedureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_name(): Function_nameContext | null {
        return this.getRuleContext(0, Function_nameContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_name(): Procedure_nameContext | null {
        return this.getRuleContext(0, Procedure_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_function_or_procedure;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunction_or_procedure) {
             listener.enterFunction_or_procedure(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunction_or_procedure) {
             listener.exitFunction_or_procedure(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunction_or_procedure) {
            return visitor.visitFunction_or_procedure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerfuncargsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public triggerfuncarg(): TriggerfuncargContext[];
    public triggerfuncarg(i: number): TriggerfuncargContext | null;
    public triggerfuncarg(i?: number): TriggerfuncargContext[] | TriggerfuncargContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TriggerfuncargContext);
        }

        return this.getRuleContext(i, TriggerfuncargContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerfuncargs;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerfuncargs) {
             listener.enterTriggerfuncargs(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerfuncargs) {
             listener.exitTriggerfuncargs(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerfuncargs) {
            return visitor.visitTriggerfuncargs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerfuncargContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public Numeric(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Numeric, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public collabel(): CollabelContext | null {
        return this.getRuleContext(0, CollabelContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerfuncarg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerfuncarg) {
             listener.enterTriggerfuncarg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerfuncarg) {
             listener.exitTriggerfuncarg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerfuncarg) {
            return visitor.visitTriggerfuncarg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintattributespecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constraintattributeElem(): ConstraintattributeElemContext[];
    public constraintattributeElem(i: number): ConstraintattributeElemContext | null;
    public constraintattributeElem(i?: number): ConstraintattributeElemContext[] | ConstraintattributeElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstraintattributeElemContext);
        }

        return this.getRuleContext(i, ConstraintattributeElemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_constraintattributespec;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConstraintattributespec) {
             listener.enterConstraintattributespec(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConstraintattributespec) {
             listener.exitConstraintattributespec(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintattributespec) {
            return visitor.visitConstraintattributespec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintattributeElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRABLE, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INITIALLY, 0);
    }
    public KW_IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMEDIATE, 0);
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRED, 0);
    }
    public KW_VALID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALID, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERIT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_constraintattributeElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConstraintattributeElem) {
             listener.enterConstraintattributeElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConstraintattributeElem) {
             listener.exitConstraintattributeElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintattributeElem) {
            return visitor.visitConstraintattributeElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateeventtrigstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_EVENT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0)!;
    }
    public KW_TRIGGER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public collabel(): CollabelContext {
        return this.getRuleContext(0, CollabelContext)!;
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0)!;
    }
    public function_or_procedure(): Function_or_procedureContext {
        return this.getRuleContext(0, Function_or_procedureContext)!;
    }
    public empty_grouping_set(): Empty_grouping_setContext {
        return this.getRuleContext(0, Empty_grouping_setContext)!;
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0);
    }
    public event_trigger_when_list(): Event_trigger_when_listContext | null {
        return this.getRuleContext(0, Event_trigger_when_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createeventtrigstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateeventtrigstmt) {
             listener.enterCreateeventtrigstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateeventtrigstmt) {
             listener.exitCreateeventtrigstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateeventtrigstmt) {
            return visitor.visitCreateeventtrigstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Event_trigger_when_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public event_trigger_when_item(): Event_trigger_when_itemContext[];
    public event_trigger_when_item(i: number): Event_trigger_when_itemContext | null;
    public event_trigger_when_item(i?: number): Event_trigger_when_itemContext[] | Event_trigger_when_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Event_trigger_when_itemContext);
        }

        return this.getRuleContext(i, Event_trigger_when_itemContext);
    }
    public KW_AND(): antlr.TerminalNode[];
    public KW_AND(i: number): antlr.TerminalNode | null;
    public KW_AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_AND);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_AND, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_event_trigger_when_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterEvent_trigger_when_list) {
             listener.enterEvent_trigger_when_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitEvent_trigger_when_list) {
             listener.exitEvent_trigger_when_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEvent_trigger_when_list) {
            return visitor.visitEvent_trigger_when_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Event_trigger_when_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public event_trigger_value_list(): Event_trigger_value_listContext {
        return this.getRuleContext(0, Event_trigger_value_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_event_trigger_when_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterEvent_trigger_when_item) {
             listener.enterEvent_trigger_when_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitEvent_trigger_when_item) {
             listener.exitEvent_trigger_when_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEvent_trigger_when_item) {
            return visitor.visitEvent_trigger_when_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltereventtrigstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_EVENT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0)!;
    }
    public KW_TRIGGER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public enable_trigger(): Enable_triggerContext {
        return this.getRuleContext(0, Enable_triggerContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altereventtrigstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltereventtrigstmt) {
             listener.enterAltereventtrigstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltereventtrigstmt) {
             listener.exitAltereventtrigstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltereventtrigstmt) {
            return visitor.visitAltereventtrigstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Enable_triggerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENABLE, 0);
    }
    public KW_REPLICA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLICA, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALWAYS, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISABLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_enable_trigger;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterEnable_trigger) {
             listener.enterEnable_trigger(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitEnable_trigger) {
             listener.exitEnable_trigger(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEnable_trigger) {
            return visitor.visitEnable_trigger(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateassertionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_ASSERTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ASSERTION, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public KW_CHECK(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public constraintattributespec(): ConstraintattributespecContext {
        return this.getRuleContext(0, ConstraintattributespecContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createassertionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateassertionstmt) {
             listener.enterCreateassertionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateassertionstmt) {
             listener.exitCreateassertionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateassertionstmt) {
            return visitor.visitCreateassertionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefinestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public function_name(): Function_nameContext | null {
        return this.getRuleContext(0, Function_nameContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public old_aggr_elem(): Old_aggr_elemContext[];
    public old_aggr_elem(i: number): Old_aggr_elemContext | null;
    public old_aggr_elem(i?: number): Old_aggr_elemContext[] | Old_aggr_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Old_aggr_elemContext);
        }

        return this.getRuleContext(i, Old_aggr_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public opt_or_replace(): Opt_or_replaceContext | null {
        return this.getRuleContext(0, Opt_or_replaceContext);
    }
    public aggr_args(): Aggr_argsContext | null {
        return this.getRuleContext(0, Aggr_argsContext);
    }
    public definition(): DefinitionContext | null {
        return this.getRuleContext(0, DefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public any_name(): Any_nameContext[];
    public any_name(i: number): Any_nameContext | null;
    public any_name(i?: number): Any_nameContext[] | Any_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Any_nameContext);
        }

        return this.getRuleContext(i, Any_nameContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public KW_ENUM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENUM, 0);
    }
    public tablefuncelementlist(): TablefuncelementlistContext | null {
        return this.getRuleContext(0, TablefuncelementlistContext);
    }
    public event_trigger_value_list(): Event_trigger_value_listContext | null {
        return this.getRuleContext(0, Event_trigger_value_listContext);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RANGE, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_definestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefinestmt) {
             listener.enterDefinestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefinestmt) {
             listener.exitDefinestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefinestmt) {
            return visitor.visitDefinestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public def_list(): Def_listContext {
        return this.getRuleContext(0, Def_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_definition;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefinition) {
             listener.enterDefinition(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefinition) {
             listener.exitDefinition(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefinition) {
            return visitor.visitDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Def_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public def_elem(): Def_elemContext[];
    public def_elem(i: number): Def_elemContext | null;
    public def_elem(i?: number): Def_elemContext[] | Def_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Def_elemContext);
        }

        return this.getRuleContext(i, Def_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_def_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDef_list) {
             listener.enterDef_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDef_list) {
             listener.exitDef_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDef_list) {
            return visitor.visitDef_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Def_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collabel(): CollabelContext {
        return this.getRuleContext(0, CollabelContext)!;
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public def_arg(): Def_argContext | null {
        return this.getRuleContext(0, Def_argContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_def_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDef_elem) {
             listener.enterDef_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDef_elem) {
             listener.exitDef_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDef_elem) {
            return visitor.visitDef_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Def_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_type(): Func_typeContext | null {
        return this.getRuleContext(0, Func_typeContext);
    }
    public reserved_keyword(): Reserved_keywordContext | null {
        return this.getRuleContext(0, Reserved_keywordContext);
    }
    public qual_all_op(): Qual_all_opContext | null {
        return this.getRuleContext(0, Qual_all_opContext);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NONE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_def_arg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDef_arg) {
             listener.enterDef_arg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDef_arg) {
             listener.exitDef_arg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDef_arg) {
            return visitor.visitDef_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Old_aggr_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.EQUAL, 0)!;
    }
    public def_arg(): Def_argContext {
        return this.getRuleContext(0, Def_argContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_old_aggr_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOld_aggr_elem) {
             listener.enterOld_aggr_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOld_aggr_elem) {
             listener.exitOld_aggr_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOld_aggr_elem) {
            return visitor.visitOld_aggr_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Event_trigger_value_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public notify_payload(): Notify_payloadContext[];
    public notify_payload(i: number): Notify_payloadContext | null;
    public notify_payload(i?: number): Notify_payloadContext[] | Notify_payloadContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Notify_payloadContext);
        }

        return this.getRuleContext(i, Notify_payloadContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_event_trigger_value_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterEvent_trigger_value_list) {
             listener.enterEvent_trigger_value_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitEvent_trigger_value_list) {
             listener.exitEvent_trigger_value_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEvent_trigger_value_list) {
            return visitor.visitEvent_trigger_value_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterenumstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_VALUE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0)!;
    }
    public sconst(): SconstContext[];
    public sconst(i: number): SconstContext | null;
    public sconst(i?: number): SconstContext[] | SconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SconstContext);
        }

        return this.getRuleContext(i, SconstContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public KW_BEFORE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BEFORE, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AFTER, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterenumstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterenumstmt) {
             listener.enterAlterenumstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterenumstmt) {
             listener.exitAlterenumstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterenumstmt) {
            return visitor.visitAlterenumstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_if_not_existsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IF, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NOT, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_if_not_exists;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_if_not_exists) {
             listener.enterOpt_if_not_exists(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_if_not_exists) {
             listener.exitOpt_if_not_exists(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_if_not_exists) {
            return visitor.visitOpt_if_not_exists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateopclassstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0)!;
    }
    public KW_CLASS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public table_access_method_clause(): Table_access_method_clauseContext {
        return this.getRuleContext(0, Table_access_method_clauseContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public opclass_item_list(): Opclass_item_listContext {
        return this.getRuleContext(0, Opclass_item_listContext)!;
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public opt_opfamily(): Opt_opfamilyContext | null {
        return this.getRuleContext(0, Opt_opfamilyContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createopclassstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateopclassstmt) {
             listener.enterCreateopclassstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateopclassstmt) {
             listener.exitCreateopclassstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateopclassstmt) {
            return visitor.visitCreateopclassstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opclass_item_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opclass_item(): Opclass_itemContext[];
    public opclass_item(i: number): Opclass_itemContext | null;
    public opclass_item(i?: number): Opclass_itemContext[] | Opclass_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opclass_itemContext);
        }

        return this.getRuleContext(i, Opclass_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opclass_item_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpclass_item_list) {
             listener.enterOpclass_item_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpclass_item_list) {
             listener.exitOpclass_item_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpclass_item_list) {
            return visitor.visitOpclass_item_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opclass_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public oper_argtypes(): Oper_argtypesContext | null {
        return this.getRuleContext(0, Oper_argtypesContext);
    }
    public opclass_purpose(): Opclass_purposeContext | null {
        return this.getRuleContext(0, Opclass_purposeContext);
    }
    public KW_RECHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RECHECK, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public prep_type_clause(): Prep_type_clauseContext | null {
        return this.getRuleContext(0, Prep_type_clauseContext);
    }
    public KW_STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORAGE, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opclass_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpclass_item) {
             listener.enterOpclass_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpclass_item) {
             listener.exitOpclass_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpclass_item) {
            return visitor.visitOpclass_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_opfamilyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FAMILY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_opfamily;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_opfamily) {
             listener.enterOpt_opfamily(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_opfamily) {
             listener.exitOpt_opfamily(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_opfamily) {
            return visitor.visitOpt_opfamily(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opclass_purposeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opclass_purpose;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpclass_purpose) {
             listener.enterOpclass_purpose(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpclass_purpose) {
             listener.exitOpclass_purpose(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpclass_purpose) {
            return visitor.visitOpclass_purpose(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateopfamilystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0)!;
    }
    public opt_opfamily(): Opt_opfamilyContext {
        return this.getRuleContext(0, Opt_opfamilyContext)!;
    }
    public table_access_method_clause(): Table_access_method_clauseContext {
        return this.getRuleContext(0, Table_access_method_clauseContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createopfamilystmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateopfamilystmt) {
             listener.enterCreateopfamilystmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateopfamilystmt) {
             listener.exitCreateopfamilystmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateopfamilystmt) {
            return visitor.visitCreateopfamilystmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlteropfamilystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0)!;
    }
    public opt_opfamily(): Opt_opfamilyContext {
        return this.getRuleContext(0, Opt_opfamilyContext)!;
    }
    public table_access_method_clause(): Table_access_method_clauseContext {
        return this.getRuleContext(0, Table_access_method_clauseContext)!;
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public opclass_item_list(): Opclass_item_listContext | null {
        return this.getRuleContext(0, Opclass_item_listContext);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public opclass_drop(): Opclass_dropContext[];
    public opclass_drop(i: number): Opclass_dropContext | null;
    public opclass_drop(i?: number): Opclass_dropContext[] | Opclass_dropContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opclass_dropContext);
        }

        return this.getRuleContext(i, Opclass_dropContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alteropfamilystmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlteropfamilystmt) {
             listener.enterAlteropfamilystmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlteropfamilystmt) {
             listener.exitAlteropfamilystmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlteropfamilystmt) {
            return visitor.visitAlteropfamilystmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opclass_dropContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Integral(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.Integral, 0)!;
    }
    public prep_type_clause(): Prep_type_clauseContext {
        return this.getRuleContext(0, Prep_type_clauseContext)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opclass_drop;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpclass_drop) {
             listener.enterOpclass_drop(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpclass_drop) {
             listener.exitOpclass_drop(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpclass_drop) {
            return visitor.visitOpclass_drop(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReassignownedstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REASSIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REASSIGN, 0)!;
    }
    public KW_OWNED(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OWNED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reassignownedstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReassignownedstmt) {
             listener.enterReassignownedstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReassignownedstmt) {
             listener.exitReassignownedstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReassignownedstmt) {
            return visitor.visitReassignownedstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DROP, 0)!;
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACCESS, 0);
    }
    public KW_METHOD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_METHOD, 0);
    }
    public KW_EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public view_nameList(): View_nameListContext | null {
        return this.getRuleContext(0, View_nameListContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public table_name_list(): Table_name_listContext | null {
        return this.getRuleContext(0, Table_name_listContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name_list(): Schema_name_listContext | null {
        return this.getRuleContext(0, Schema_name_listContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public type_name_list(): Type_name_listContext | null {
        return this.getRuleContext(0, Type_name_listContext);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public any_name_list(): Any_name_listContext | null {
        return this.getRuleContext(0, Any_name_listContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CAST, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public KW_OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public role_list(): Role_listContext | null {
        return this.getRuleContext(0, Role_listContext);
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public tablespace_name(): Tablespace_nameContext | null {
        return this.getRuleContext(0, Tablespace_nameContext);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public KW_MAPPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAPPING, 0);
    }
    public auth_ident(): Auth_identContext | null {
        return this.getRuleContext(0, Auth_identContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public database_name(): Database_nameContext | null {
        return this.getRuleContext(0, Database_nameContext);
    }
    public drop_option_list(): Drop_option_listContext | null {
        return this.getRuleContext(0, Drop_option_listContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_dropstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDropstmt) {
             listener.enterDropstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDropstmt) {
             listener.exitDropstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropstmt) {
            return visitor.visitDropstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class View_nameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public view_name(): View_nameContext[];
    public view_name(i: number): View_nameContext | null;
    public view_name(i?: number): View_nameContext[] | View_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(View_nameContext);
        }

        return this.getRuleContext(i, View_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_view_nameList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterView_nameList) {
             listener.enterView_nameList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitView_nameList) {
             listener.exitView_nameList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitView_nameList) {
            return visitor.visitView_nameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_type_any_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_object_type_any_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterObject_type_any_name) {
             listener.enterObject_type_any_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitObject_type_any_name) {
             listener.exitObject_type_any_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitObject_type_any_name) {
            return visitor.visitObject_type_any_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_type_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACCESS, 0);
    }
    public KW_METHOD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_METHOD, 0);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name(): Schema_nameContext | null {
        return this.getRuleContext(0, Schema_nameContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public database_name(): Database_nameContext | null {
        return this.getRuleContext(0, Database_nameContext);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_object_type_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterObject_type_name) {
             listener.enterObject_type_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitObject_type_name) {
             listener.exitObject_type_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitObject_type_name) {
            return visitor.visitObject_type_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_type_name_on_any_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_object_type_name_on_any_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterObject_type_name_on_any_name) {
             listener.enterObject_type_name_on_any_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitObject_type_name_on_any_name) {
             listener.exitObject_type_name_on_any_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitObject_type_name_on_any_name) {
            return visitor.visitObject_type_name_on_any_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Any_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_name(): Any_nameContext[];
    public any_name(i: number): Any_nameContext | null;
    public any_name(i?: number): Any_nameContext[] | Any_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Any_nameContext);
        }

        return this.getRuleContext(i, Any_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_any_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAny_name_list) {
             listener.enterAny_name_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAny_name_list) {
             listener.exitAny_name_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAny_name_list) {
            return visitor.visitAny_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Relation_column_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.DOT, 0)!;
    }
    public column_name(): Column_nameContext {
        return this.getRuleContext(0, Column_nameContext)!;
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_relation_column_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRelation_column_name) {
             listener.enterRelation_column_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRelation_column_name) {
             listener.exitRelation_column_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelation_column_name) {
            return visitor.visitRelation_column_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Any_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_any_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAny_name) {
             listener.enterAny_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAny_name) {
             listener.exitAny_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAny_name) {
            return visitor.visitAny_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AttrsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.DOT);
    	} else {
    		return this.getToken(PostgreSqlParser.DOT, i);
    	}
    }
    public collabel(): CollabelContext[];
    public collabel(i: number): CollabelContext | null;
    public collabel(i?: number): CollabelContext[] | CollabelContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CollabelContext);
        }

        return this.getRuleContext(i, CollabelContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_attrs;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAttrs) {
             listener.enterAttrs(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAttrs) {
             listener.exitAttrs(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAttrs) {
            return visitor.visitAttrs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_type_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterType_name_list) {
             listener.enterType_name_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitType_name_list) {
             listener.exitType_name_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitType_name_list) {
            return visitor.visitType_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruncatestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUNCATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TRUNCATE, 0)!;
    }
    public truncate_table(): Truncate_tableContext[];
    public truncate_table(i: number): Truncate_tableContext | null;
    public truncate_table(i?: number): Truncate_tableContext[] | Truncate_tableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Truncate_tableContext);
        }

        return this.getRuleContext(i, Truncate_tableContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_IDENTITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IDENTITY, 0);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public KW_CONTINUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTINUE, 0);
    }
    public KW_RESTART(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTART, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_truncatestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTruncatestmt) {
             listener.enterTruncatestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTruncatestmt) {
             listener.exitTruncatestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTruncatestmt) {
            return visitor.visitTruncatestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Truncate_tableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_name(): Table_nameContext {
        return this.getRuleContext(0, Table_nameContext)!;
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_truncate_table;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTruncate_table) {
             listener.enterTruncate_table(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTruncate_table) {
             listener.exitTruncate_table(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTruncate_table) {
            return visitor.visitTruncate_table(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommentstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_COMMENT, 0)!;
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ON);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ON, i);
    	}
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IS, 0)!;
    }
    public object_type_any_name(): Object_type_any_nameContext | null {
        return this.getRuleContext(0, Object_type_any_nameContext);
    }
    public object_type_name(): Object_type_nameContext | null {
        return this.getRuleContext(0, Object_type_nameContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMN, 0);
    }
    public relation_column_name(): Relation_column_nameContext | null {
        return this.getRuleContext(0, Relation_column_nameContext);
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public operator_with_argtypes(): Operator_with_argtypesContext | null {
        return this.getRuleContext(0, Operator_with_argtypesContext);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public KW_LARGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LARGE, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OBJECT, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CAST, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_commentstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCommentstmt) {
             listener.enterCommentstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCommentstmt) {
             listener.exitCommentstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommentstmt) {
            return visitor.visitCommentstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SeclabelstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SECURITY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0)!;
    }
    public KW_LABEL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LABEL, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IS, 0)!;
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMN, 0);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_LARGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LARGE, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OBJECT, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public object_type_any_name(): Object_type_any_nameContext | null {
        return this.getRuleContext(0, Object_type_any_nameContext);
    }
    public object_type_name(): Object_type_nameContext | null {
        return this.getRuleContext(0, Object_type_nameContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | null {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_seclabelstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSeclabelstmt) {
             listener.enterSeclabelstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSeclabelstmt) {
             listener.exitSeclabelstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSeclabelstmt) {
            return visitor.visitSeclabelstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FetchstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fetch_args(): Fetch_argsContext {
        return this.getRuleContext(0, Fetch_argsContext)!;
    }
    public KW_FETCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FETCH, 0);
    }
    public KW_MOVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MOVE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fetchstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFetchstmt) {
             listener.enterFetchstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFetchstmt) {
             listener.exitFetchstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFetchstmt) {
            return visitor.visitFetchstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Fetch_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public from_in(): From_inContext | null {
        return this.getRuleContext(0, From_inContext);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public KW_PRIOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIOR, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LAST, 0);
    }
    public signediconst(): SignediconstContext | null {
        return this.getRuleContext(0, SignediconstContext);
    }
    public KW_ABSOLUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABSOLUTE, 0);
    }
    public KW_RELATIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELATIVE, 0);
    }
    public KW_FORWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORWARD, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_BACKWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BACKWARD, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fetch_args;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFetch_args) {
             listener.enterFetch_args(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFetch_args) {
             listener.exitFetch_args(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFetch_args) {
            return visitor.visitFetch_args(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class From_inContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_from_in;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFrom_in) {
             listener.enterFrom_in(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFrom_in) {
             listener.exitFrom_in(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrom_in) {
            return visitor.visitFrom_in(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GRANT, 0)!;
    }
    public privileges(): PrivilegesContext {
        return this.getRuleContext(0, PrivilegesContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public privilege_target(): Privilege_targetContext {
        return this.getRuleContext(0, Privilege_targetContext)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public grantee_list(): Grantee_listContext {
        return this.getRuleContext(0, Grantee_listContext)!;
    }
    public opt_grant_grant_option(): Opt_grant_grant_optionContext | null {
        return this.getRuleContext(0, Opt_grant_grant_optionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_grantstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGrantstmt) {
             listener.enterGrantstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGrantstmt) {
             listener.exitGrantstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantstmt) {
            return visitor.visitGrantstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REVOKE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REVOKE, 0)!;
    }
    public privileges(): PrivilegesContext {
        return this.getRuleContext(0, PrivilegesContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public privilege_target(): Privilege_targetContext {
        return this.getRuleContext(0, Privilege_targetContext)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public grantee_list(): Grantee_listContext {
        return this.getRuleContext(0, Grantee_listContext)!;
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GRANT, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_revokestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRevokestmt) {
             listener.enterRevokestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRevokestmt) {
             listener.exitRevokestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRevokestmt) {
            return visitor.visitRevokestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privilege_list(): Privilege_listContext | null {
        return this.getRuleContext(0, Privilege_listContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIVILEGES, 0);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public beforeprivilegeselect(): BeforeprivilegeselectContext[];
    public beforeprivilegeselect(i: number): BeforeprivilegeselectContext | null;
    public beforeprivilegeselect(i?: number): BeforeprivilegeselectContext[] | BeforeprivilegeselectContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BeforeprivilegeselectContext);
        }

        return this.getRuleContext(i, BeforeprivilegeselectContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_privileges;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrivileges) {
             listener.enterPrivileges(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrivileges) {
             listener.exitPrivileges(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivileges) {
            return visitor.visitPrivileges(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BeforeprivilegeselectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUNCATE, 0);
    }
    public KW_PEFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PEFERENCES, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_USAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USAGE, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0);
    }
    public KW_CONNECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONNECT, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMP, 0);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_beforeprivilegeselect;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterBeforeprivilegeselect) {
             listener.enterBeforeprivilegeselect(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitBeforeprivilegeselect) {
             listener.exitBeforeprivilegeselect(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBeforeprivilegeselect) {
            return visitor.visitBeforeprivilegeselect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Privilege_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_privilege_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrivilege_list) {
             listener.enterPrivilege_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrivilege_list) {
             listener.exitPrivilege_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilege_list) {
            return visitor.visitPrivilege_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCES, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_privilege;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrivilege) {
             listener.enterPrivilege(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrivilege) {
             listener.exitPrivilege(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilege) {
            return visitor.visitPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Privilege_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public table_name_list(): Table_name_listContext | null {
        return this.getRuleContext(0, Table_name_listContext);
    }
    public qualified_name_list(): Qualified_name_listContext | null {
        return this.getRuleContext(0, Qualified_name_listContext);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes_list(): Function_with_argtypes_listContext | null {
        return this.getRuleContext(0, Function_with_argtypes_listContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes_list(): Procedure_with_argtypes_listContext | null {
        return this.getRuleContext(0, Procedure_with_argtypes_listContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes_list(): Routine_with_argtypes_listContext | null {
        return this.getRuleContext(0, Routine_with_argtypes_listContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public database_nameList(): Database_nameListContext | null {
        return this.getRuleContext(0, Database_nameListContext);
    }
    public any_name_list(): Any_name_listContext | null {
        return this.getRuleContext(0, Any_name_listContext);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_LARGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LARGE, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OBJECT, 0);
    }
    public numericonly_list(): Numericonly_listContext | null {
        return this.getRuleContext(0, Numericonly_listContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name_list(): Schema_name_listContext | null {
        return this.getRuleContext(0, Schema_name_listContext);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public tablespace_name_list(): Tablespace_name_listContext | null {
        return this.getRuleContext(0, Tablespace_name_listContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLES, 0);
    }
    public KW_SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCES, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_PROCEDURES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURES, 0);
    }
    public KW_ROUTINES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINES, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_privilege_target;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrivilege_target) {
             listener.enterPrivilege_target(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrivilege_target) {
             listener.exitPrivilege_target(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilege_target) {
            return visitor.visitPrivilege_target(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Grantee_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public grantee(): GranteeContext[];
    public grantee(i: number): GranteeContext | null;
    public grantee(i?: number): GranteeContext[] | GranteeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GranteeContext);
        }

        return this.getRuleContext(i, GranteeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_grantee_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGrantee_list) {
             listener.enterGrantee_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGrantee_list) {
             listener.exitGrantee_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantee_list) {
            return visitor.visitGrantee_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GranteeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_grantee;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGrantee) {
             listener.enterGrantee(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGrantee) {
             listener.exitGrantee(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantee) {
            return visitor.visitGrantee(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_grant_grant_optionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GRANT, 0)!;
    }
    public KW_OPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_grant_grant_option;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_grant_grant_option) {
             listener.enterOpt_grant_grant_option(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_grant_grant_option) {
             listener.exitOpt_grant_grant_option(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_grant_grant_option) {
            return visitor.visitOpt_grant_grant_option(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantrolestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GRANT, 0)!;
    }
    public privilege_list(): Privilege_listContext {
        return this.getRuleContext(0, Privilege_listContext)!;
    }
    public rowsecuritydefaulttorole(): RowsecuritydefaulttoroleContext {
        return this.getRuleContext(0, RowsecuritydefaulttoroleContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADMIN, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public opt_granted_by(): Opt_granted_byContext | null {
        return this.getRuleContext(0, Opt_granted_byContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_grantrolestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGrantrolestmt) {
             listener.enterGrantrolestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGrantrolestmt) {
             listener.exitGrantrolestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantrolestmt) {
            return visitor.visitGrantrolestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokerolestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REVOKE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REVOKE, 0)!;
    }
    public privilege_list(): Privilege_listContext {
        return this.getRuleContext(0, Privilege_listContext)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADMIN, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public opt_granted_by(): Opt_granted_byContext | null {
        return this.getRuleContext(0, Opt_granted_byContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_revokerolestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRevokerolestmt) {
             listener.enterRevokerolestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRevokerolestmt) {
             listener.exitRevokerolestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRevokerolestmt) {
            return visitor.visitRevokerolestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_granted_byContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANTED(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GRANTED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_granted_by;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_granted_by) {
             listener.enterOpt_granted_by(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_granted_by) {
             listener.exitOpt_granted_by(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_granted_by) {
            return visitor.visitOpt_granted_by(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterdefaultprivilegesstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_DEFAULT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0)!;
    }
    public KW_PRIVILEGES(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PRIVILEGES, 0)!;
    }
    public defaclaction(): DefaclactionContext {
        return this.getRuleContext(0, DefaclactionContext)!;
    }
    public defacloption(): DefacloptionContext[];
    public defacloption(i: number): DefacloptionContext | null;
    public defacloption(i?: number): DefacloptionContext[] | DefacloptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DefacloptionContext);
        }

        return this.getRuleContext(i, DefacloptionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterdefaultprivilegesstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterdefaultprivilegesstmt) {
             listener.enterAlterdefaultprivilegesstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterdefaultprivilegesstmt) {
             listener.exitAlterdefaultprivilegesstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterdefaultprivilegesstmt) {
            return visitor.visitAlterdefaultprivilegesstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefacloptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name_list(): Schema_name_listContext | null {
        return this.getRuleContext(0, Schema_name_listContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public role_list(): Role_listContext | null {
        return this.getRuleContext(0, Role_listContext);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_defacloption;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefacloption) {
             listener.enterDefacloption(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefacloption) {
             listener.exitDefacloption(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefacloption) {
            return visitor.visitDefacloption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaclactionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GRANT, 0);
    }
    public privileges(): PrivilegesContext {
        return this.getRuleContext(0, PrivilegesContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public defacl_privilege_target(): Defacl_privilege_targetContext {
        return this.getRuleContext(0, Defacl_privilege_targetContext)!;
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public grantee_list(): Grantee_listContext {
        return this.getRuleContext(0, Grantee_listContext)!;
    }
    public opt_grant_grant_option(): Opt_grant_grant_optionContext | null {
        return this.getRuleContext(0, Opt_grant_grant_optionContext);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REVOKE, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_defaclaction;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefaclaction) {
             listener.enterDefaclaction(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefaclaction) {
             listener.exitDefaclaction(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefaclaction) {
            return visitor.visitDefaclaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Defacl_privilege_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLES, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_ROUTINES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINES, 0);
    }
    public KW_SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCES, 0);
    }
    public KW_TYPES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPES, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMAS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_defacl_privilege_target;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefacl_privilege_target) {
             listener.enterDefacl_privilege_target(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefacl_privilege_target) {
             listener.exitDefacl_privilege_target(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefacl_privilege_target) {
            return visitor.visitDefacl_privilege_target(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public relation_expr(): Relation_exprContext {
        return this.getRuleContext(0, Relation_exprContext)!;
    }
    public index_params(): Index_paramsContext {
        return this.getRuleContext(0, Index_paramsContext)!;
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNIQUE, 0);
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public opt_include(): Opt_includeContext | null {
        return this.getRuleContext(0, Opt_includeContext);
    }
    public nulls_distinct(): Nulls_distinctContext | null {
        return this.getRuleContext(0, Nulls_distinctContext);
    }
    public opt_reloptions(): Opt_reloptionsContext | null {
        return this.getRuleContext(0, Opt_reloptionsContext);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_indexstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndexstmt) {
             listener.enterIndexstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndexstmt) {
             listener.exitIndexstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndexstmt) {
            return visitor.visitIndexstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Index_paramsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public index_elem(): Index_elemContext[];
    public index_elem(i: number): Index_elemContext | null;
    public index_elem(i?: number): Index_elemContext[] | Index_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Index_elemContext);
        }

        return this.getRuleContext(i, Index_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_index_params;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndex_params) {
             listener.enterIndex_params(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndex_params) {
             listener.exitIndex_params(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndex_params) {
            return visitor.visitIndex_params(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Index_elem_optionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public reloptions(): ReloptionsContext | null {
        return this.getRuleContext(0, ReloptionsContext);
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public opt_nulls_order(): Opt_nulls_orderContext | null {
        return this.getRuleContext(0, Opt_nulls_orderContext);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DESC, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_index_elem_options;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndex_elem_options) {
             listener.enterIndex_elem_options(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndex_elem_options) {
             listener.exitIndex_elem_options(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndex_elem_options) {
            return visitor.visitIndex_elem_options(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Index_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public index_elem_options(): Index_elem_optionsContext {
        return this.getRuleContext(0, Index_elem_optionsContext)!;
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public func_expr_windowless(): Func_expr_windowlessContext | null {
        return this.getRuleContext(0, Func_expr_windowlessContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_index_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndex_elem) {
             listener.enterIndex_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndex_elem) {
             listener.exitIndex_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndex_elem) {
            return visitor.visitIndex_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_includeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INCLUDE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INCLUDE, 0)!;
    }
    public index_params(): Index_paramsContext {
        return this.getRuleContext(0, Index_paramsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_include;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_include) {
             listener.enterOpt_include(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_include) {
             listener.exitOpt_include(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_include) {
            return visitor.visitOpt_include(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_nulls_orderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULLS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NULLS, 0)!;
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LAST, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_nulls_order;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_nulls_order) {
             listener.enterOpt_nulls_order(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_nulls_order) {
             listener.exitOpt_nulls_order(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_nulls_order) {
            return visitor.visitOpt_nulls_order(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatefunctionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public func_args_with_defaults(): Func_args_with_defaultsContext {
        return this.getRuleContext(0, Func_args_with_defaultsContext)!;
    }
    public createfunc_opt_list(): Createfunc_opt_listContext {
        return this.getRuleContext(0, Createfunc_opt_listContext)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_name_create(): Function_name_createContext | null {
        return this.getRuleContext(0, Function_name_createContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_name_create(): Procedure_name_createContext | null {
        return this.getRuleContext(0, Procedure_name_createContext);
    }
    public opt_or_replace(): Opt_or_replaceContext | null {
        return this.getRuleContext(0, Opt_or_replaceContext);
    }
    public KW_RETURNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RETURNS, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public attrilist(): AttrilistContext | null {
        return this.getRuleContext(0, AttrilistContext);
    }
    public func_type(): Func_typeContext | null {
        return this.getRuleContext(0, Func_typeContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public table_func_column_list(): Table_func_column_listContext | null {
        return this.getRuleContext(0, Table_func_column_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createfunctionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatefunctionstmt) {
             listener.enterCreatefunctionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatefunctionstmt) {
             listener.exitCreatefunctionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatefunctionstmt) {
            return visitor.visitCreatefunctionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AttrilistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public name_list(): Name_listContext {
        return this.getRuleContext(0, Name_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_attrilist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAttrilist) {
             listener.enterAttrilist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAttrilist) {
             listener.exitAttrilist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAttrilist) {
            return visitor.visitAttrilist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_or_replaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OR, 0)!;
    }
    public KW_REPLACE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REPLACE, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_or_replace;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_or_replace) {
             listener.enterOpt_or_replace(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_or_replace) {
             listener.exitOpt_or_replace(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_or_replace) {
            return visitor.visitOpt_or_replace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public func_args_list(): Func_args_listContext | null {
        return this.getRuleContext(0, Func_args_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_args;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_args) {
             listener.enterFunc_args(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_args) {
             listener.exitFunc_args(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_args) {
            return visitor.visitFunc_args(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_args_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_arg(): Func_argContext[];
    public func_arg(i: number): Func_argContext | null;
    public func_arg(i?: number): Func_argContext[] | Func_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Func_argContext);
        }

        return this.getRuleContext(i, Func_argContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_args_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_args_list) {
             listener.enterFunc_args_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_args_list) {
             listener.exitFunc_args_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_args_list) {
            return visitor.visitFunc_args_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Routine_with_argtypes_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext[];
    public routine_with_argtypes(i: number): Routine_with_argtypesContext | null;
    public routine_with_argtypes(i?: number): Routine_with_argtypesContext[] | Routine_with_argtypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Routine_with_argtypesContext);
        }

        return this.getRuleContext(i, Routine_with_argtypesContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_routine_with_argtypes_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoutine_with_argtypes_list) {
             listener.enterRoutine_with_argtypes_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoutine_with_argtypes_list) {
             listener.exitRoutine_with_argtypes_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutine_with_argtypes_list) {
            return visitor.visitRoutine_with_argtypes_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Routine_with_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public routine_name(): Routine_nameContext | null {
        return this.getRuleContext(0, Routine_nameContext);
    }
    public func_args(): Func_argsContext | null {
        return this.getRuleContext(0, Func_argsContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_routine_with_argtypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoutine_with_argtypes) {
             listener.enterRoutine_with_argtypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoutine_with_argtypes) {
             listener.exitRoutine_with_argtypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutine_with_argtypes) {
            return visitor.visitRoutine_with_argtypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Procedure_with_argtypes_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext[];
    public procedure_with_argtypes(i: number): Procedure_with_argtypesContext | null;
    public procedure_with_argtypes(i?: number): Procedure_with_argtypesContext[] | Procedure_with_argtypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Procedure_with_argtypesContext);
        }

        return this.getRuleContext(i, Procedure_with_argtypesContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedure_with_argtypes_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedure_with_argtypes_list) {
             listener.enterProcedure_with_argtypes_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedure_with_argtypes_list) {
             listener.exitProcedure_with_argtypes_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedure_with_argtypes_list) {
            return visitor.visitProcedure_with_argtypes_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Procedure_with_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public procedure_name(): Procedure_nameContext | null {
        return this.getRuleContext(0, Procedure_nameContext);
    }
    public func_args(): Func_argsContext | null {
        return this.getRuleContext(0, Func_argsContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedure_with_argtypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedure_with_argtypes) {
             listener.enterProcedure_with_argtypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedure_with_argtypes) {
             listener.exitProcedure_with_argtypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedure_with_argtypes) {
            return visitor.visitProcedure_with_argtypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Function_with_argtypes_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public function_with_argtypes(): Function_with_argtypesContext[];
    public function_with_argtypes(i: number): Function_with_argtypesContext | null;
    public function_with_argtypes(i?: number): Function_with_argtypesContext[] | Function_with_argtypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Function_with_argtypesContext);
        }

        return this.getRuleContext(i, Function_with_argtypesContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_function_with_argtypes_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunction_with_argtypes_list) {
             listener.enterFunction_with_argtypes_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunction_with_argtypes_list) {
             listener.exitFunction_with_argtypes_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunction_with_argtypes_list) {
            return visitor.visitFunction_with_argtypes_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Function_with_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public function_name(): Function_nameContext | null {
        return this.getRuleContext(0, Function_nameContext);
    }
    public func_args(): Func_argsContext | null {
        return this.getRuleContext(0, Func_argsContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_function_with_argtypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunction_with_argtypes) {
             listener.enterFunction_with_argtypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunction_with_argtypes) {
             listener.exitFunction_with_argtypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunction_with_argtypes) {
            return visitor.visitFunction_with_argtypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_args_with_defaultsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public func_args_with_defaults_list(): Func_args_with_defaults_listContext | null {
        return this.getRuleContext(0, Func_args_with_defaults_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_args_with_defaults;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_args_with_defaults) {
             listener.enterFunc_args_with_defaults(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_args_with_defaults) {
             listener.exitFunc_args_with_defaults(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_args_with_defaults) {
            return visitor.visitFunc_args_with_defaults(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_args_with_defaults_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_arg_with_default(): Func_arg_with_defaultContext[];
    public func_arg_with_default(i: number): Func_arg_with_defaultContext | null;
    public func_arg_with_default(i?: number): Func_arg_with_defaultContext[] | Func_arg_with_defaultContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Func_arg_with_defaultContext);
        }

        return this.getRuleContext(i, Func_arg_with_defaultContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_args_with_defaults_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_args_with_defaults_list) {
             listener.enterFunc_args_with_defaults_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_args_with_defaults_list) {
             listener.exitFunc_args_with_defaults_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_args_with_defaults_list) {
            return visitor.visitFunc_args_with_defaults_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_type(): Func_typeContext {
        return this.getRuleContext(0, Func_typeContext)!;
    }
    public arg_class(): Arg_classContext | null {
        return this.getRuleContext(0, Arg_classContext);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_arg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_arg) {
             listener.enterFunc_arg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_arg) {
             listener.exitFunc_arg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_arg) {
            return visitor.visitFunc_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Arg_classContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OUT, 0);
    }
    public KW_INOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INOUT, 0);
    }
    public KW_VARIADIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARIADIC, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_arg_class;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterArg_class) {
             listener.enterArg_class(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitArg_class) {
             listener.exitArg_class(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArg_class) {
            return visitor.visitArg_class(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PERCENT, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_SETOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SETOF, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_type;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_type) {
             listener.enterFunc_type(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_type) {
             listener.exitFunc_type(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_type) {
            return visitor.visitFunc_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_arg_with_defaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_arg(): Func_argContext {
        return this.getRuleContext(0, Func_argContext)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_arg_with_default;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_arg_with_default) {
             listener.enterFunc_arg_with_default(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_arg_with_default) {
             listener.exitFunc_arg_with_default(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_arg_with_default) {
            return visitor.visitFunc_arg_with_default(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Aggr_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public func_args_list(): Func_args_listContext[];
    public func_args_list(i: number): Func_args_listContext | null;
    public func_args_list(i?: number): Func_args_listContext[] | Func_args_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Func_args_listContext);
        }

        return this.getRuleContext(i, Func_args_listContext);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_aggr_args;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAggr_args) {
             listener.enterAggr_args(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAggr_args) {
             listener.exitAggr_args(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAggr_args) {
            return visitor.visitAggr_args(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Aggregate_with_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public function_name(): Function_nameContext {
        return this.getRuleContext(0, Function_nameContext)!;
    }
    public aggr_args(): Aggr_argsContext {
        return this.getRuleContext(0, Aggr_argsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_aggregate_with_argtypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAggregate_with_argtypes) {
             listener.enterAggregate_with_argtypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAggregate_with_argtypes) {
             listener.exitAggregate_with_argtypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAggregate_with_argtypes) {
            return visitor.visitAggregate_with_argtypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Aggregate_with_argtypes_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext[];
    public aggregate_with_argtypes(i: number): Aggregate_with_argtypesContext | null;
    public aggregate_with_argtypes(i?: number): Aggregate_with_argtypesContext[] | Aggregate_with_argtypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Aggregate_with_argtypesContext);
        }

        return this.getRuleContext(i, Aggregate_with_argtypesContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_aggregate_with_argtypes_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAggregate_with_argtypes_list) {
             listener.enterAggregate_with_argtypes_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAggregate_with_argtypes_list) {
             listener.exitAggregate_with_argtypes_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAggregate_with_argtypes_list) {
            return visitor.visitAggregate_with_argtypes_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Createfunc_opt_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createfunc_opt_item(): Createfunc_opt_itemContext[];
    public createfunc_opt_item(i: number): Createfunc_opt_itemContext | null;
    public createfunc_opt_item(i?: number): Createfunc_opt_itemContext[] | Createfunc_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Createfunc_opt_itemContext);
        }

        return this.getRuleContext(i, Createfunc_opt_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createfunc_opt_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatefunc_opt_list) {
             listener.enterCreatefunc_opt_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatefunc_opt_list) {
             listener.exitCreatefunc_opt_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatefunc_opt_list) {
            return visitor.visitCreatefunc_opt_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Common_func_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_NULL(): antlr.TerminalNode[];
    public KW_NULL(i: number): antlr.TerminalNode | null;
    public KW_NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NULL);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NULL, i);
    	}
    }
    public KW_INPUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INPUT, 0);
    }
    public KW_RETURNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RETURNS, 0);
    }
    public KW_CALLED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CALLED, 0);
    }
    public KW_STRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRICT, 0);
    }
    public KW_IMMUTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMUTABLE, 0);
    }
    public KW_STABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STABLE, 0);
    }
    public KW_VOLATILE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VOLATILE, 0);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0);
    }
    public KW_DEFINER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFINER, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INVOKER, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTERNAL, 0);
    }
    public KW_LEAKPROOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEAKPROOF, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COST, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_SUPPORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUPPORT, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public set_rest_more(): Set_rest_moreContext | null {
        return this.getRuleContext(0, Set_rest_moreContext);
    }
    public variableresetstmt(): VariableresetstmtContext | null {
        return this.getRuleContext(0, VariableresetstmtContext);
    }
    public KW_PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARALLEL, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_common_func_opt_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCommon_func_opt_item) {
             listener.enterCommon_func_opt_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCommon_func_opt_item) {
             listener.exitCommon_func_opt_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommon_func_opt_item) {
            return visitor.visitCommon_func_opt_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Createfunc_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public notify_payload(): Notify_payloadContext | null {
        return this.getRuleContext(0, Notify_payloadContext);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | null {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0);
    }
    public transform_type_name_list(): Transform_type_name_listContext | null {
        return this.getRuleContext(0, Transform_type_name_listContext);
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WINDOW, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public stmt(): StmtContext | null {
        return this.getRuleContext(0, StmtContext);
    }
    public common_func_opt_item(): Common_func_opt_itemContext | null {
        return this.getRuleContext(0, Common_func_opt_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createfunc_opt_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatefunc_opt_item) {
             listener.enterCreatefunc_opt_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatefunc_opt_item) {
             listener.exitCreatefunc_opt_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatefunc_opt_item) {
            return visitor.visitCreatefunc_opt_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Transform_type_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode[];
    public KW_FOR(i: number): antlr.TerminalNode | null;
    public KW_FOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FOR);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FOR, i);
    	}
    }
    public KW_TYPE(): antlr.TerminalNode[];
    public KW_TYPE(i: number): antlr.TerminalNode | null;
    public KW_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_TYPE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_TYPE, i);
    	}
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_transform_type_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTransform_type_name_list) {
             listener.enterTransform_type_name_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTransform_type_name_list) {
             listener.exitTransform_type_name_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransform_type_name_list) {
            return visitor.visitTransform_type_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_definitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public definition(): DefinitionContext {
        return this.getRuleContext(0, DefinitionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_definition;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_definition) {
             listener.enterOpt_definition(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_definition) {
             listener.exitOpt_definition(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_definition) {
            return visitor.visitOpt_definition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_func_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext {
        return this.getRuleContext(0, Column_nameContext)!;
    }
    public func_type(): Func_typeContext {
        return this.getRuleContext(0, Func_typeContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_table_func_column;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTable_func_column) {
             listener.enterTable_func_column(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTable_func_column) {
             listener.exitTable_func_column(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTable_func_column) {
            return visitor.visitTable_func_column(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_func_column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public table_func_column(): Table_func_columnContext[];
    public table_func_column(i: number): Table_func_columnContext | null;
    public table_func_column(i?: number): Table_func_columnContext[] | Table_func_columnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_func_columnContext);
        }

        return this.getRuleContext(i, Table_func_columnContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_table_func_column_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTable_func_column_list) {
             listener.enterTable_func_column_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTable_func_column_list) {
             listener.exitTable_func_column_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTable_func_column_list) {
            return visitor.visitTable_func_column_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterfunctionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public alterFunctionTypeClause(): AlterFunctionTypeClauseContext {
        return this.getRuleContext(0, AlterFunctionTypeClauseContext)!;
    }
    public common_func_opt_item(): Common_func_opt_itemContext[];
    public common_func_opt_item(i: number): Common_func_opt_itemContext | null;
    public common_func_opt_item(i?: number): Common_func_opt_itemContext[] | Common_func_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Common_func_opt_itemContext);
        }

        return this.getRuleContext(i, Common_func_opt_itemContext);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterfunctionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterfunctionstmt) {
             listener.enterAlterfunctionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterfunctionstmt) {
             listener.exitAlterfunctionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterfunctionstmt) {
            return visitor.visitAlterfunctionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterFunctionTypeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterFunctionTypeClause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterFunctionTypeClause) {
             listener.enterAlterFunctionTypeClause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterFunctionTypeClause) {
             listener.exitAlterFunctionTypeClause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterFunctionTypeClause) {
            return visitor.visitAlterFunctionTypeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemovefuncstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DROP, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes_list(): Function_with_argtypes_listContext | null {
        return this.getRuleContext(0, Function_with_argtypes_listContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes_list(): Procedure_with_argtypes_listContext | null {
        return this.getRuleContext(0, Procedure_with_argtypes_listContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes_list(): Routine_with_argtypes_listContext | null {
        return this.getRuleContext(0, Routine_with_argtypes_listContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_removefuncstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRemovefuncstmt) {
             listener.enterRemovefuncstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRemovefuncstmt) {
             listener.exitRemovefuncstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRemovefuncstmt) {
            return visitor.visitRemovefuncstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemoveaggrstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DROP, 0)!;
    }
    public KW_AGGREGATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0)!;
    }
    public aggregate_with_argtypes_list(): Aggregate_with_argtypes_listContext {
        return this.getRuleContext(0, Aggregate_with_argtypes_listContext)!;
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_removeaggrstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRemoveaggrstmt) {
             listener.enterRemoveaggrstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRemoveaggrstmt) {
             listener.exitRemoveaggrstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRemoveaggrstmt) {
            return visitor.visitRemoveaggrstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemoveoperstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DROP, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0)!;
    }
    public operator_with_argtypes_list(): Operator_with_argtypes_listContext {
        return this.getRuleContext(0, Operator_with_argtypes_listContext)!;
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_removeoperstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRemoveoperstmt) {
             listener.enterRemoveoperstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRemoveoperstmt) {
             listener.exitRemoveoperstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRemoveoperstmt) {
            return visitor.visitRemoveoperstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Oper_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NONE, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_oper_argtypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOper_argtypes) {
             listener.enterOper_argtypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOper_argtypes) {
             listener.exitOper_argtypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOper_argtypes) {
            return visitor.visitOper_argtypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Any_operatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public all_op(): All_opContext {
        return this.getRuleContext(0, All_opContext)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.DOT);
    	} else {
    		return this.getToken(PostgreSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_any_operator;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAny_operator) {
             listener.enterAny_operator(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAny_operator) {
             listener.exitAny_operator(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAny_operator) {
            return visitor.visitAny_operator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Operator_with_argtypes_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public operator_with_argtypes(): Operator_with_argtypesContext[];
    public operator_with_argtypes(i: number): Operator_with_argtypesContext | null;
    public operator_with_argtypes(i?: number): Operator_with_argtypesContext[] | Operator_with_argtypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Operator_with_argtypesContext);
        }

        return this.getRuleContext(i, Operator_with_argtypesContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_operator_with_argtypes_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOperator_with_argtypes_list) {
             listener.enterOperator_with_argtypes_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOperator_with_argtypes_list) {
             listener.exitOperator_with_argtypes_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOperator_with_argtypes_list) {
            return visitor.visitOperator_with_argtypes_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Operator_with_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_operator(): Any_operatorContext {
        return this.getRuleContext(0, Any_operatorContext)!;
    }
    public oper_argtypes(): Oper_argtypesContext {
        return this.getRuleContext(0, Oper_argtypesContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_operator_with_argtypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOperator_with_argtypes) {
             listener.enterOperator_with_argtypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOperator_with_argtypes) {
             listener.exitOperator_with_argtypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOperator_with_argtypes) {
            return visitor.visitOperator_with_argtypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DostmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DO, 0)!;
    }
    public dostmt_opt_item(): Dostmt_opt_itemContext[];
    public dostmt_opt_item(i: number): Dostmt_opt_itemContext | null;
    public dostmt_opt_item(i?: number): Dostmt_opt_itemContext[] | Dostmt_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Dostmt_opt_itemContext);
        }

        return this.getRuleContext(i, Dostmt_opt_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_dostmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDostmt) {
             listener.enterDostmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDostmt) {
             listener.exitDostmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDostmt) {
            return visitor.visitDostmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Dostmt_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | null {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_dostmt_opt_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDostmt_opt_item) {
             listener.enterDostmt_opt_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDostmt_opt_item) {
             listener.exitDostmt_opt_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDostmt_opt_item) {
            return visitor.visitDostmt_opt_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatecaststmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_CAST(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CAST, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_INOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INOUT, 0);
    }
    public cast_context(): Cast_contextContext | null {
        return this.getRuleContext(0, Cast_contextContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createcaststmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatecaststmt) {
             listener.enterCreatecaststmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatecaststmt) {
             listener.exitCreatecaststmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatecaststmt) {
            return visitor.visitCreatecaststmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Cast_contextContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public KW_ASSIGNMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASSIGNMENT, 0);
    }
    public KW_IMPLICIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMPLICIT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_cast_context;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCast_context) {
             listener.enterCast_context(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCast_context) {
             listener.exitCast_context(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCast_context) {
            return visitor.visitCast_context(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_if_existsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IF, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_if_exists;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_if_exists) {
             listener.enterOpt_if_exists(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_if_exists) {
             listener.exitOpt_if_exists(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_if_exists) {
            return visitor.visitOpt_if_exists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatetransformstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_TRANSFORM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public KW_LANGUAGE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public transform_element_list(): Transform_element_listContext {
        return this.getRuleContext(0, Transform_element_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public opt_or_replace(): Opt_or_replaceContext | null {
        return this.getRuleContext(0, Opt_or_replaceContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createtransformstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatetransformstmt) {
             listener.enterCreatetransformstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatetransformstmt) {
             listener.exitCreatetransformstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatetransformstmt) {
            return visitor.visitCreatetransformstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Transform_element_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public sql_with_function(): Sql_with_functionContext[];
    public sql_with_function(i: number): Sql_with_functionContext | null;
    public sql_with_function(i?: number): Sql_with_functionContext[] | Sql_with_functionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Sql_with_functionContext);
        }

        return this.getRuleContext(i, Sql_with_functionContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_transform_element_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTransform_element_list) {
             listener.enterTransform_element_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTransform_element_list) {
             listener.exitTransform_element_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransform_element_list) {
            return visitor.visitTransform_element_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_with_functionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SQL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SQL, 0)!;
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0)!;
    }
    public function_with_argtypes(): Function_with_argtypesContext {
        return this.getRuleContext(0, Function_with_argtypesContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sql_with_function;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSql_with_function) {
             listener.enterSql_with_function(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSql_with_function) {
             listener.exitSql_with_function(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSql_with_function) {
            return visitor.visitSql_with_function(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReindexstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REINDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REINDEX, 0)!;
    }
    public reindex_target_multitable(): Reindex_target_multitableContext | null {
        return this.getRuleContext(0, Reindex_target_multitableContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public KW_VERBOSE(): antlr.TerminalNode[];
    public KW_VERBOSE(i: number): antlr.TerminalNode | null;
    public KW_VERBOSE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_VERBOSE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_VERBOSE, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reindexstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReindexstmt) {
             listener.enterReindexstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReindexstmt) {
             listener.exitReindexstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReindexstmt) {
            return visitor.visitReindexstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Reindex_target_multitableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name(): Schema_nameContext | null {
        return this.getRuleContext(0, Schema_nameContext);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSTEM, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public database_name(): Database_nameContext | null {
        return this.getRuleContext(0, Database_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reindex_target_multitable;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReindex_target_multitable) {
             listener.enterReindex_target_multitable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReindex_target_multitable) {
             listener.exitReindex_target_multitable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReindex_target_multitable) {
            return visitor.visitReindex_target_multitable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltertblspcstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public opttablespace(): OpttablespaceContext {
        return this.getRuleContext(0, OpttablespaceContext)!;
    }
    public reloptions(): ReloptionsContext {
        return this.getRuleContext(0, ReloptionsContext)!;
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altertblspcstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltertblspcstmt) {
             listener.enterAltertblspcstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltertblspcstmt) {
             listener.exitAltertblspcstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltertblspcstmt) {
            return visitor.visitAltertblspcstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenamestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public database_name(): Database_nameContext | null {
        return this.getRuleContext(0, Database_nameContext);
    }
    public database_name_create(): Database_name_createContext | null {
        return this.getRuleContext(0, Database_name_createContext);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public function_name_create(): Function_name_createContext | null {
        return this.getRuleContext(0, Function_name_createContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public procedure_name_create(): Procedure_name_createContext | null {
        return this.getRuleContext(0, Procedure_name_createContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name(): Schema_nameContext | null {
        return this.getRuleContext(0, Schema_nameContext);
    }
    public schema_name_create(): Schema_name_createContext | null {
        return this.getRuleContext(0, Schema_name_createContext);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public view_name_create(): View_name_createContext | null {
        return this.getRuleContext(0, View_name_createContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public relation_expr(): Relation_exprContext | null {
        return this.getRuleContext(0, Relation_exprContext);
    }
    public table_name_create(): Table_name_createContext | null {
        return this.getRuleContext(0, Table_name_createContext);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public column_name_create(): Column_name_createContext | null {
        return this.getRuleContext(0, Column_name_createContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMN, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0);
    }
    public KW_EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public rolespec(): RolespecContext[];
    public rolespec(i: number): RolespecContext | null;
    public rolespec(i?: number): RolespecContext[] | RolespecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RolespecContext);
        }

        return this.getRuleContext(i, RolespecContext);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public tablespace_name_create(): Tablespace_name_createContext | null {
        return this.getRuleContext(0, Tablespace_name_createContext);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public KW_ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ATTRIBUTE, 0);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_renamestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRenamestmt) {
             listener.enterRenamestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRenamestmt) {
             listener.exitRenamestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRenamestmt) {
            return visitor.visitRenamestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterobjectdependsstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_DEPENDS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DEPENDS, 0)!;
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ON);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ON, i);
    	}
    }
    public KW_EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterobjectdependsstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterobjectdependsstmt) {
             listener.enterAlterobjectdependsstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterobjectdependsstmt) {
             listener.exitAlterobjectdependsstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterobjectdependsstmt) {
            return visitor.visitAlterobjectdependsstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterobjectschemastmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public KW_SCHEMA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0)!;
    }
    public schema_name(): Schema_nameContext {
        return this.getRuleContext(0, Schema_nameContext)!;
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public operator_with_argtypes(): Operator_with_argtypesContext | null {
        return this.getRuleContext(0, Operator_with_argtypesContext);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public relation_expr(): Relation_exprContext | null {
        return this.getRuleContext(0, Relation_exprContext);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterobjectschemastmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterobjectschemastmt) {
             listener.enterAlterobjectschemastmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterobjectschemastmt) {
             listener.exitAlterobjectschemastmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterobjectschemastmt) {
            return visitor.visitAlterobjectschemastmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlteroperatorstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0)!;
    }
    public operator_with_argtypes(): Operator_with_argtypesContext {
        return this.getRuleContext(0, Operator_with_argtypesContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public operator_def_list(): Operator_def_listContext {
        return this.getRuleContext(0, Operator_def_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alteroperatorstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlteroperatorstmt) {
             listener.enterAlteroperatorstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlteroperatorstmt) {
             listener.exitAlteroperatorstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlteroperatorstmt) {
            return visitor.visitAlteroperatorstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Operator_def_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public operator_def_elem(): Operator_def_elemContext[];
    public operator_def_elem(i: number): Operator_def_elemContext | null;
    public operator_def_elem(i?: number): Operator_def_elemContext[] | Operator_def_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Operator_def_elemContext);
        }

        return this.getRuleContext(i, Operator_def_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_operator_def_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOperator_def_list) {
             listener.enterOperator_def_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOperator_def_list) {
             listener.exitOperator_def_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOperator_def_list) {
            return visitor.visitOperator_def_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Operator_def_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collabel(): CollabelContext {
        return this.getRuleContext(0, CollabelContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.EQUAL, 0)!;
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NONE, 0);
    }
    public operator_def_arg(): Operator_def_argContext | null {
        return this.getRuleContext(0, Operator_def_argContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_operator_def_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOperator_def_elem) {
             listener.enterOperator_def_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOperator_def_elem) {
             listener.exitOperator_def_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOperator_def_elem) {
            return visitor.visitOperator_def_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Operator_def_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_type(): Func_typeContext | null {
        return this.getRuleContext(0, Func_typeContext);
    }
    public reserved_keyword(): Reserved_keywordContext | null {
        return this.getRuleContext(0, Reserved_keywordContext);
    }
    public qual_all_op(): Qual_all_opContext | null {
        return this.getRuleContext(0, Qual_all_opContext);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_operator_def_arg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOperator_def_arg) {
             listener.enterOperator_def_arg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOperator_def_arg) {
             listener.exitOperator_def_arg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOperator_def_arg) {
            return visitor.visitOperator_def_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltertypestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public operator_def_list(): Operator_def_listContext {
        return this.getRuleContext(0, Operator_def_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altertypestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltertypestmt) {
             listener.enterAltertypestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltertypestmt) {
             listener.exitAltertypestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltertypestmt) {
            return visitor.visitAltertypestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterownerstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public KW_OWNER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public database_name(): Database_nameContext | null {
        return this.getRuleContext(0, Database_nameContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_LARGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LARGE, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OBJECT, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public operator_with_argtypes(): Operator_with_argtypesContext | null {
        return this.getRuleContext(0, Operator_with_argtypesContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name(): Schema_nameContext | null {
        return this.getRuleContext(0, Schema_nameContext);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterownerstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterownerstmt) {
             listener.enterAlterownerstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterownerstmt) {
             listener.exitAlterownerstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterownerstmt) {
            return visitor.visitAlterownerstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatepublicationstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_PUBLICATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public publication_for_tables(): Publication_for_tablesContext | null {
        return this.getRuleContext(0, Publication_for_tablesContext);
    }
    public opt_definition(): Opt_definitionContext | null {
        return this.getRuleContext(0, Opt_definitionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createpublicationstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatepublicationstmt) {
             listener.enterCreatepublicationstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatepublicationstmt) {
             listener.exitCreatepublicationstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatepublicationstmt) {
            return visitor.visitCreatepublicationstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Publication_for_tablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public relation_expr_list(): Relation_expr_listContext | null {
        return this.getRuleContext(0, Relation_expr_listContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLES, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_publication_for_tables;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPublication_for_tables) {
             listener.enterPublication_for_tables(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPublication_for_tables) {
             listener.exitPublication_for_tables(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPublication_for_tables) {
            return visitor.visitPublication_for_tables(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterpublicationstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_PUBLICATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public publication_relation_expr_list(): Publication_relation_expr_listContext | null {
        return this.getRuleContext(0, Publication_relation_expr_listContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public definition(): DefinitionContext | null {
        return this.getRuleContext(0, DefinitionContext);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterpublicationstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterpublicationstmt) {
             listener.enterAlterpublicationstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterpublicationstmt) {
             listener.exitAlterpublicationstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterpublicationstmt) {
            return visitor.visitAlterpublicationstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatesubscriptionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_CONNECTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CONNECTION, 0)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public KW_PUBLICATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0)!;
    }
    public publication_name_list(): Publication_name_listContext {
        return this.getRuleContext(0, Publication_name_listContext)!;
    }
    public opt_definition(): Opt_definitionContext | null {
        return this.getRuleContext(0, Opt_definitionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createsubscriptionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatesubscriptionstmt) {
             listener.enterCreatesubscriptionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatesubscriptionstmt) {
             listener.exitCreatesubscriptionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatesubscriptionstmt) {
            return visitor.visitCreatesubscriptionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Publication_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collabel(): CollabelContext[];
    public collabel(i: number): CollabelContext | null;
    public collabel(i?: number): CollabelContext[] | CollabelContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CollabelContext);
        }

        return this.getRuleContext(i, CollabelContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_publication_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPublication_name_list) {
             listener.enterPublication_name_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPublication_name_list) {
             listener.exitPublication_name_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPublication_name_list) {
            return visitor.visitPublication_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltersubscriptionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public definition(): DefinitionContext | null {
        return this.getRuleContext(0, DefinitionContext);
    }
    public KW_CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONNECTION, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFRESH, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public opt_definition(): Opt_definitionContext | null {
        return this.getRuleContext(0, Opt_definitionContext);
    }
    public publication_name_list(): Publication_name_listContext | null {
        return this.getRuleContext(0, Publication_name_listContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENABLE, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISABLE, 0);
    }
    public KW_SKIP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SKIP, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public old_aggr_elem(): Old_aggr_elemContext | null {
        return this.getRuleContext(0, Old_aggr_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altersubscriptionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltersubscriptionstmt) {
             listener.enterAltersubscriptionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltersubscriptionstmt) {
             listener.exitAltersubscriptionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltersubscriptionstmt) {
            return visitor.visitAltersubscriptionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RulestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_RULE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_RULE, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public event(): EventContext {
        return this.getRuleContext(0, EventContext)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public KW_DO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DO, 0)!;
    }
    public ruleactionlist(): RuleactionlistContext {
        return this.getRuleContext(0, RuleactionlistContext)!;
    }
    public opt_or_replace(): Opt_or_replaceContext | null {
        return this.getRuleContext(0, Opt_or_replaceContext);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public KW_INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSTEAD, 0);
    }
    public KW_ALSO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALSO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rulestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRulestmt) {
             listener.enterRulestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRulestmt) {
             listener.exitRulestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRulestmt) {
            return visitor.visitRulestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RuleactionlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTHING, 0);
    }
    public ruleactionstmt(): RuleactionstmtContext | null {
        return this.getRuleContext(0, RuleactionstmtContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public ruleactionmulti(): RuleactionmultiContext | null {
        return this.getRuleContext(0, RuleactionmultiContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_ruleactionlist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRuleactionlist) {
             listener.enterRuleactionlist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRuleactionlist) {
             listener.exitRuleactionlist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRuleactionlist) {
            return visitor.visitRuleactionlist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RuleactionmultiContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ruleactionstmt(): RuleactionstmtContext[];
    public ruleactionstmt(i: number): RuleactionstmtContext | null;
    public ruleactionstmt(i?: number): RuleactionstmtContext[] | RuleactionstmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RuleactionstmtContext);
        }

        return this.getRuleContext(i, RuleactionstmtContext);
    }
    public SEMI(): antlr.TerminalNode[];
    public SEMI(i: number): antlr.TerminalNode | null;
    public SEMI(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.SEMI);
    	} else {
    		return this.getToken(PostgreSqlParser.SEMI, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_ruleactionmulti;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRuleactionmulti) {
             listener.enterRuleactionmulti(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRuleactionmulti) {
             listener.exitRuleactionmulti(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRuleactionmulti) {
            return visitor.visitRuleactionmulti(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RuleactionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public insertstmt(): InsertstmtContext | null {
        return this.getRuleContext(0, InsertstmtContext);
    }
    public updatestmt(): UpdatestmtContext | null {
        return this.getRuleContext(0, UpdatestmtContext);
    }
    public deletestmt(): DeletestmtContext | null {
        return this.getRuleContext(0, DeletestmtContext);
    }
    public notifystmt(): NotifystmtContext | null {
        return this.getRuleContext(0, NotifystmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_ruleactionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRuleactionstmt) {
             listener.enterRuleactionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRuleactionstmt) {
             listener.exitRuleactionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRuleactionstmt) {
            return visitor.visitRuleactionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EventContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_event;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterEvent) {
             listener.enterEvent(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitEvent) {
             listener.exitEvent(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEvent) {
            return visitor.visitEvent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotifystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOTIFY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NOTIFY, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public notify_payload(): Notify_payloadContext | null {
        return this.getRuleContext(0, Notify_payloadContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_notifystmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNotifystmt) {
             listener.enterNotifystmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNotifystmt) {
             listener.exitNotifystmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotifystmt) {
            return visitor.visitNotifystmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Notify_payloadContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.COMMA, 0)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_notify_payload;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNotify_payload) {
             listener.enterNotify_payload(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNotify_payload) {
             listener.exitNotify_payload(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotify_payload) {
            return visitor.visitNotify_payload(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListenstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LISTEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LISTEN, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_listenstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterListenstmt) {
             listener.enterListenstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitListenstmt) {
             listener.exitListenstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitListenstmt) {
            return visitor.visitListenstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnlistenstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNLISTEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_UNLISTEN, 0)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_unlistenstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterUnlistenstmt) {
             listener.enterUnlistenstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitUnlistenstmt) {
             listener.exitUnlistenstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnlistenstmt) {
            return visitor.visitUnlistenstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BEGIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BEGIN, 0);
    }
    public opt_transaction(): Opt_transactionContext | null {
        return this.getRuleContext(0, Opt_transactionContext);
    }
    public transaction_mode_list(): Transaction_mode_listContext | null {
        return this.getRuleContext(0, Transaction_mode_listContext);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_START, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public KW_SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SAVEPOINT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_RELEASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELEASE, 0);
    }
    public KW_PREPARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PREPARE, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_PREPARED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PREPARED, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMIT, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLBACK, 0);
    }
    public KW_ABORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABORT, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_END, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_CHAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAIN, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_transactionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTransactionstmt) {
             listener.enterTransactionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTransactionstmt) {
             listener.exitTransactionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionstmt) {
            return visitor.visitTransactionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_transactionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WORK, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_transaction;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_transaction) {
             listener.enterOpt_transaction(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_transaction) {
             listener.exitOpt_transaction(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_transaction) {
            return visitor.visitOpt_transaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Transaction_mode_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ISOLATION, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEVEL, 0);
    }
    public iso_level(): Iso_levelContext | null {
        return this.getRuleContext(0, Iso_levelContext);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_READ, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public KW_WRITE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRITE, 0);
    }
    public KW_DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRABLE, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_transaction_mode_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTransaction_mode_item) {
             listener.enterTransaction_mode_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTransaction_mode_item) {
             listener.exitTransaction_mode_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransaction_mode_item) {
            return visitor.visitTransaction_mode_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Transaction_mode_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transaction_mode_item(): Transaction_mode_itemContext[];
    public transaction_mode_item(i: number): Transaction_mode_itemContext | null;
    public transaction_mode_item(i?: number): Transaction_mode_itemContext[] | Transaction_mode_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Transaction_mode_itemContext);
        }

        return this.getRuleContext(i, Transaction_mode_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_transaction_mode_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTransaction_mode_list) {
             listener.enterTransaction_mode_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTransaction_mode_list) {
             listener.exitTransaction_mode_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransaction_mode_list) {
            return visitor.visitTransaction_mode_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_viewstmt;
    }
    public override copyFrom(ctx: ViewstmtContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateViewContext extends ViewstmtContext {
    public constructor(ctx: ViewstmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public selectstmt(): SelectstmtContext {
        return this.getRuleContext(0, SelectstmtContext)!;
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public view_name_create(): View_name_createContext | null {
        return this.getRuleContext(0, View_name_createContext);
    }
    public KW_RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RECURSIVE, 0);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLACE, 0);
    }
    public opttemp(): OpttempContext | null {
        return this.getRuleContext(0, OpttempContext);
    }
    public opt_check_option(): Opt_check_optionContext | null {
        return this.getRuleContext(0, Opt_check_optionContext);
    }
    public opt_column_list_create(): Opt_column_list_createContext | null {
        return this.getRuleContext(0, Opt_column_list_createContext);
    }
    public opt_reloptions(): Opt_reloptionsContext | null {
        return this.getRuleContext(0, Opt_reloptionsContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateView) {
             listener.enterCreateView(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateView) {
             listener.exitCreateView(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_check_optionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public KW_CHECK(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0)!;
    }
    public KW_OPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0)!;
    }
    public KW_CASCADED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADED, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_check_option;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_check_option) {
             listener.enterOpt_check_option(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_check_option) {
             listener.exitOpt_check_option(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_check_option) {
            return visitor.visitOpt_check_option(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOAD(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LOAD, 0)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_loadstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLoadstmt) {
             listener.enterLoadstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLoadstmt) {
             listener.exitLoadstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoadstmt) {
            return visitor.visitLoadstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatedbstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createdbstmt;
    }
    public override copyFrom(ctx: CreatedbstmtContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateDatabaseContext extends CreatedbstmtContext {
    public constructor(ctx: CreatedbstmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0)!;
    }
    public database_name_create(): Database_name_createContext {
        return this.getRuleContext(0, Database_name_createContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public createdb_opt_items(): Createdb_opt_itemsContext | null {
        return this.getRuleContext(0, Createdb_opt_itemsContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateDatabase) {
             listener.enterCreateDatabase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateDatabase) {
             listener.exitCreateDatabase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDatabase) {
            return visitor.visitCreateDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Createdb_opt_itemsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createdb_opt_item(): Createdb_opt_itemContext[];
    public createdb_opt_item(i: number): Createdb_opt_itemContext | null;
    public createdb_opt_item(i?: number): Createdb_opt_itemContext[] | Createdb_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Createdb_opt_itemContext);
        }

        return this.getRuleContext(i, Createdb_opt_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createdb_opt_items;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatedb_opt_items) {
             listener.enterCreatedb_opt_items(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatedb_opt_items) {
             listener.exitCreatedb_opt_items(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatedb_opt_items) {
            return visitor.visitCreatedb_opt_items(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Createdb_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createdb_opt_name(): Createdb_opt_nameContext {
        return this.getRuleContext(0, Createdb_opt_nameContext)!;
    }
    public signediconst(): SignediconstContext | null {
        return this.getRuleContext(0, SignediconstContext);
    }
    public opt_boolean_or_string(): Opt_boolean_or_stringContext | null {
        return this.getRuleContext(0, Opt_boolean_or_stringContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createdb_opt_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatedb_opt_item) {
             listener.enterCreatedb_opt_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatedb_opt_item) {
             listener.exitCreatedb_opt_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatedb_opt_item) {
            return visitor.visitCreatedb_opt_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Createdb_opt_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONNECTION, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIMIT, 0);
    }
    public KW_ENCODING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENCODING, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCATION, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createdb_opt_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatedb_opt_name) {
             listener.enterCreatedb_opt_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatedb_opt_name) {
             listener.exitCreatedb_opt_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatedb_opt_name) {
            return visitor.visitCreatedb_opt_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterdatabasestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0)!;
    }
    public database_name(): Database_nameContext {
        return this.getRuleContext(0, Database_nameContext)!;
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public tablespace_name_create(): Tablespace_name_createContext | null {
        return this.getRuleContext(0, Tablespace_name_createContext);
    }
    public createdb_opt_items(): Createdb_opt_itemsContext | null {
        return this.getRuleContext(0, Createdb_opt_itemsContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterdatabasestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterdatabasestmt) {
             listener.enterAlterdatabasestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterdatabasestmt) {
             listener.exitAlterdatabasestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterdatabasestmt) {
            return visitor.visitAlterdatabasestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterdatabasesetstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0)!;
    }
    public database_name(): Database_nameContext {
        return this.getRuleContext(0, Database_nameContext)!;
    }
    public setresetclause(): SetresetclauseContext | null {
        return this.getRuleContext(0, SetresetclauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterdatabasesetstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterdatabasesetstmt) {
             listener.enterAlterdatabasesetstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterdatabasesetstmt) {
             listener.exitAlterdatabasesetstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterdatabasesetstmt) {
            return visitor.visitAlterdatabasesetstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Drop_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public KW_FORCE(): antlr.TerminalNode[];
    public KW_FORCE(i: number): antlr.TerminalNode | null;
    public KW_FORCE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FORCE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FORCE, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_drop_option_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDrop_option_list) {
             listener.enterDrop_option_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDrop_option_list) {
             listener.exitDrop_option_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDrop_option_list) {
            return visitor.visitDrop_option_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltercollationstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_COLLATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REFRESH, 0)!;
    }
    public KW_VERSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VERSION, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altercollationstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltercollationstmt) {
             listener.enterAltercollationstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltercollationstmt) {
             listener.exitAltercollationstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltercollationstmt) {
            return visitor.visitAltercollationstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltersystemstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_SYSTEM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SYSTEM, 0)!;
    }
    public generic_set(): Generic_setContext {
        return this.getRuleContext(0, Generic_setContext)!;
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altersystemstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltersystemstmt) {
             listener.enterAltersystemstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltersystemstmt) {
             listener.exitAltersystemstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltersystemstmt) {
            return visitor.visitAltersystemstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatedomainstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_DOMAIN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public colquallist(): ColquallistContext {
        return this.getRuleContext(0, ColquallistContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createdomainstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatedomainstmt) {
             listener.enterCreatedomainstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatedomainstmt) {
             listener.exitCreatedomainstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatedomainstmt) {
            return visitor.visitCreatedomainstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterdomainstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_DOMAIN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public alter_column_default(): Alter_column_defaultContext | null {
        return this.getRuleContext(0, Alter_column_defaultContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public tableconstraint(): TableconstraintContext | null {
        return this.getRuleContext(0, TableconstraintContext);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterdomainstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterdomainstmt) {
             listener.enterAlterdomainstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterdomainstmt) {
             listener.exitAlterdomainstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterdomainstmt) {
            return visitor.visitAlterdomainstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltertsdictionarystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_TEXT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0)!;
    }
    public KW_SEARCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0)!;
    }
    public KW_DICTIONARY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public definition(): DefinitionContext {
        return this.getRuleContext(0, DefinitionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altertsdictionarystmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltertsdictionarystmt) {
             listener.enterAltertsdictionarystmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltertsdictionarystmt) {
             listener.exitAltertsdictionarystmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltertsdictionarystmt) {
            return visitor.visitAltertsdictionarystmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltertsconfigurationstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode[];
    public KW_ALTER(i: number): antlr.TerminalNode | null;
    public KW_ALTER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ALTER);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ALTER, i);
    	}
    }
    public KW_TEXT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0)!;
    }
    public KW_SEARCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0)!;
    }
    public KW_CONFIGURATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0)!;
    }
    public any_name(): Any_nameContext[];
    public any_name(i: number): Any_nameContext | null;
    public any_name(i?: number): Any_nameContext[] | Any_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Any_nameContext);
        }

        return this.getRuleContext(i, Any_nameContext);
    }
    public KW_MAPPING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MAPPING, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public any_name_list(): Any_name_listContext | null {
        return this.getRuleContext(0, Any_name_listContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLACE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altertsconfigurationstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltertsconfigurationstmt) {
             listener.enterAltertsconfigurationstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltertsconfigurationstmt) {
             listener.exitAltertsconfigurationstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltertsconfigurationstmt) {
            return visitor.visitAltertsconfigurationstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateconversionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_CONVERSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0)!;
    }
    public any_name(): Any_nameContext[];
    public any_name(i: number): Any_nameContext | null;
    public any_name(i?: number): Any_nameContext[] | Any_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Any_nameContext);
        }

        return this.getRuleContext(i, Any_nameContext);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public sconst(): SconstContext[];
    public sconst(i: number): SconstContext | null;
    public sconst(i?: number): SconstContext[] | SconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SconstContext);
        }

        return this.getRuleContext(i, SconstContext);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createconversionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateconversionstmt) {
             listener.enterCreateconversionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateconversionstmt) {
             listener.exitCreateconversionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateconversionstmt) {
            return visitor.visitCreateconversionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClusterstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CLUSTER, 0)!;
    }
    public opt_verbose(): Opt_verboseContext | null {
        return this.getRuleContext(0, Opt_verboseContext);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public opt_verbose_list(): Opt_verbose_listContext | null {
        return this.getRuleContext(0, Opt_verbose_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_clusterstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterClusterstmt) {
             listener.enterClusterstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitClusterstmt) {
             listener.exitClusterstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitClusterstmt) {
            return visitor.visitClusterstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_verbose_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public opt_verbose(): Opt_verboseContext[];
    public opt_verbose(i: number): Opt_verboseContext | null;
    public opt_verbose(i?: number): Opt_verboseContext[] | Opt_verboseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_verboseContext);
        }

        return this.getRuleContext(i, Opt_verboseContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_verbose_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_verbose_list) {
             listener.enterOpt_verbose_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_verbose_list) {
             listener.exitOpt_verbose_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_verbose_list) {
            return visitor.visitOpt_verbose_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VacuumstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VACUUM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VACUUM, 0)!;
    }
    public vacuum_relation_list(): Vacuum_relation_listContext | null {
        return this.getRuleContext(0, Vacuum_relation_listContext);
    }
    public explain_option_list(): Explain_option_listContext | null {
        return this.getRuleContext(0, Explain_option_listContext);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FULL, 0);
    }
    public KW_FREEZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FREEZE, 0);
    }
    public opt_verbose(): Opt_verboseContext | null {
        return this.getRuleContext(0, Opt_verboseContext);
    }
    public analyze_keyword(): Analyze_keywordContext | null {
        return this.getRuleContext(0, Analyze_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_vacuumstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVacuumstmt) {
             listener.enterVacuumstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVacuumstmt) {
             listener.exitVacuumstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVacuumstmt) {
            return visitor.visitVacuumstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnalyzestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public analyze_keyword(): Analyze_keywordContext {
        return this.getRuleContext(0, Analyze_keywordContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public analyze_options_list(): Analyze_options_listContext | null {
        return this.getRuleContext(0, Analyze_options_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public vacuum_relation_list(): Vacuum_relation_listContext | null {
        return this.getRuleContext(0, Vacuum_relation_listContext);
    }
    public opt_verbose(): Opt_verboseContext | null {
        return this.getRuleContext(0, Opt_verboseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_analyzestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnalyzestmt) {
             listener.enterAnalyzestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnalyzestmt) {
             listener.exitAnalyzestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyzestmt) {
            return visitor.visitAnalyzestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Vac_analyze_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public vac_analyze_option_elem(): Vac_analyze_option_elemContext[];
    public vac_analyze_option_elem(i: number): Vac_analyze_option_elemContext | null;
    public vac_analyze_option_elem(i?: number): Vac_analyze_option_elemContext[] | Vac_analyze_option_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Vac_analyze_option_elemContext);
        }

        return this.getRuleContext(i, Vac_analyze_option_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_vac_analyze_option_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVac_analyze_option_list) {
             listener.enterVac_analyze_option_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVac_analyze_option_list) {
             listener.exitVac_analyze_option_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVac_analyze_option_list) {
            return visitor.visitVac_analyze_option_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Analyze_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANALYZE, 0);
    }
    public KW_ANALYSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANALYSE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_analyze_keyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnalyze_keyword) {
             listener.enterAnalyze_keyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnalyze_keyword) {
             listener.exitAnalyze_keyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyze_keyword) {
            return visitor.visitAnalyze_keyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Vac_analyze_option_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public vac_analyze_option_name(): Vac_analyze_option_nameContext {
        return this.getRuleContext(0, Vac_analyze_option_nameContext)!;
    }
    public vac_analyze_option_arg(): Vac_analyze_option_argContext | null {
        return this.getRuleContext(0, Vac_analyze_option_argContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_vac_analyze_option_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVac_analyze_option_elem) {
             listener.enterVac_analyze_option_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVac_analyze_option_elem) {
             listener.exitVac_analyze_option_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVac_analyze_option_elem) {
            return visitor.visitVac_analyze_option_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Vac_analyze_option_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonreservedword(): NonreservedwordContext | null {
        return this.getRuleContext(0, NonreservedwordContext);
    }
    public analyze_keyword(): Analyze_keywordContext | null {
        return this.getRuleContext(0, Analyze_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_vac_analyze_option_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVac_analyze_option_name) {
             listener.enterVac_analyze_option_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVac_analyze_option_name) {
             listener.exitVac_analyze_option_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVac_analyze_option_name) {
            return visitor.visitVac_analyze_option_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Vac_analyze_option_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_boolean_or_string(): Opt_boolean_or_stringContext | null {
        return this.getRuleContext(0, Opt_boolean_or_stringContext);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_vac_analyze_option_arg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVac_analyze_option_arg) {
             listener.enterVac_analyze_option_arg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVac_analyze_option_arg) {
             listener.exitVac_analyze_option_arg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVac_analyze_option_arg) {
            return visitor.visitVac_analyze_option_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Analyze_options_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public analyze_option_elem(): Analyze_option_elemContext[];
    public analyze_option_elem(i: number): Analyze_option_elemContext | null;
    public analyze_option_elem(i?: number): Analyze_option_elemContext[] | Analyze_option_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Analyze_option_elemContext);
        }

        return this.getRuleContext(i, Analyze_option_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_analyze_options_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnalyze_options_list) {
             listener.enterAnalyze_options_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnalyze_options_list) {
             listener.exitAnalyze_options_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyze_options_list) {
            return visitor.visitAnalyze_options_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Analyze_option_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SKIP_LOCKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SKIP_LOCKED, 0);
    }
    public KW_VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VERBOSE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public KW_BUFFER_USAGE_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BUFFER_USAGE_LIMIT, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_analyze_option_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnalyze_option_elem) {
             listener.enterAnalyze_option_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnalyze_option_elem) {
             listener.exitAnalyze_option_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyze_option_elem) {
            return visitor.visitAnalyze_option_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_verboseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VERBOSE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VERBOSE, 0)!;
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_verbose;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_verbose) {
             listener.enterOpt_verbose(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_verbose) {
             listener.exitOpt_verbose(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_verbose) {
            return visitor.visitOpt_verbose(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Vacuum_relationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_name(): Table_nameContext {
        return this.getRuleContext(0, Table_nameContext)!;
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_vacuum_relation;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVacuum_relation) {
             listener.enterVacuum_relation(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVacuum_relation) {
             listener.exitVacuum_relation(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVacuum_relation) {
            return visitor.visitVacuum_relation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Vacuum_relation_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public vacuum_relation(): Vacuum_relationContext[];
    public vacuum_relation(i: number): Vacuum_relationContext | null;
    public vacuum_relation(i?: number): Vacuum_relationContext[] | Vacuum_relationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Vacuum_relationContext);
        }

        return this.getRuleContext(i, Vacuum_relationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_vacuum_relation_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVacuum_relation_list) {
             listener.enterVacuum_relation_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVacuum_relation_list) {
             listener.exitVacuum_relation_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVacuum_relation_list) {
            return visitor.visitVacuum_relation_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXPLAIN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXPLAIN, 0)!;
    }
    public explainablestmt(): ExplainablestmtContext {
        return this.getRuleContext(0, ExplainablestmtContext)!;
    }
    public explain_option_list(): Explain_option_listContext | null {
        return this.getRuleContext(0, Explain_option_listContext);
    }
    public KW_VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VERBOSE, 0);
    }
    public analyze_keyword(): Analyze_keywordContext | null {
        return this.getRuleContext(0, Analyze_keywordContext);
    }
    public opt_verbose(): Opt_verboseContext | null {
        return this.getRuleContext(0, Opt_verboseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_explainstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExplainstmt) {
             listener.enterExplainstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExplainstmt) {
             listener.exitExplainstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplainstmt) {
            return visitor.visitExplainstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainablestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public insertstmt(): InsertstmtContext | null {
        return this.getRuleContext(0, InsertstmtContext);
    }
    public updatestmt(): UpdatestmtContext | null {
        return this.getRuleContext(0, UpdatestmtContext);
    }
    public deletestmt(): DeletestmtContext | null {
        return this.getRuleContext(0, DeletestmtContext);
    }
    public declarecursorstmt(): DeclarecursorstmtContext | null {
        return this.getRuleContext(0, DeclarecursorstmtContext);
    }
    public createasstmt(): CreateasstmtContext | null {
        return this.getRuleContext(0, CreateasstmtContext);
    }
    public creatematviewstmt(): CreatematviewstmtContext | null {
        return this.getRuleContext(0, CreatematviewstmtContext);
    }
    public refreshmatviewstmt(): RefreshmatviewstmtContext | null {
        return this.getRuleContext(0, RefreshmatviewstmtContext);
    }
    public executestmt(): ExecutestmtContext | null {
        return this.getRuleContext(0, ExecutestmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_explainablestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExplainablestmt) {
             listener.enterExplainablestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExplainablestmt) {
             listener.exitExplainablestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplainablestmt) {
            return visitor.visitExplainablestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Explain_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public vac_analyze_option_list(): Vac_analyze_option_listContext {
        return this.getRuleContext(0, Vac_analyze_option_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_explain_option_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExplain_option_list) {
             listener.enterExplain_option_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExplain_option_list) {
             listener.exitExplain_option_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplain_option_list) {
            return visitor.visitExplain_option_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PreparestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PREPARE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PREPARE, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public preparablestmt(): PreparablestmtContext {
        return this.getRuleContext(0, PreparablestmtContext)!;
    }
    public prep_type_clause(): Prep_type_clauseContext | null {
        return this.getRuleContext(0, Prep_type_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_preparestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPreparestmt) {
             listener.enterPreparestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPreparestmt) {
             listener.exitPreparestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPreparestmt) {
            return visitor.visitPreparestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Prep_type_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public type_name_list(): Type_name_listContext {
        return this.getRuleContext(0, Type_name_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_prep_type_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrep_type_clause) {
             listener.enterPrep_type_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrep_type_clause) {
             listener.exitPrep_type_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrep_type_clause) {
            return visitor.visitPrep_type_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PreparablestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public insertstmt(): InsertstmtContext | null {
        return this.getRuleContext(0, InsertstmtContext);
    }
    public updatestmt(): UpdatestmtContext | null {
        return this.getRuleContext(0, UpdatestmtContext);
    }
    public deletestmt(): DeletestmtContext | null {
        return this.getRuleContext(0, DeletestmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_preparablestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPreparablestmt) {
             listener.enterPreparablestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPreparablestmt) {
             listener.exitPreparablestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPreparablestmt) {
            return visitor.visitPreparablestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecutestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public create_as_target(): Create_as_targetContext | null {
        return this.getRuleContext(0, Create_as_targetContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public opttemp(): OpttempContext | null {
        return this.getRuleContext(0, OpttempContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public opt_with_data(): Opt_with_dataContext | null {
        return this.getRuleContext(0, Opt_with_dataContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_executestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExecutestmt) {
             listener.enterExecutestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExecutestmt) {
             listener.exitExecutestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExecutestmt) {
            return visitor.visitExecutestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Execute_param_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_execute_param_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExecute_param_clause) {
             listener.enterExecute_param_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExecute_param_clause) {
             listener.exitExecute_param_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExecute_param_clause) {
            return visitor.visitExecute_param_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeallocatestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEALLOCATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DEALLOCATE, 0)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_PREPARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PREPARE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_deallocatestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDeallocatestmt) {
             listener.enterDeallocatestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDeallocatestmt) {
             listener.exitDeallocatestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeallocatestmt) {
            return visitor.visitDeallocatestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_insertstmt;
    }
    public override copyFrom(ctx: InsertstmtContext): void {
        super.copyFrom(ctx);
    }
}
export class InsertStatementContext extends InsertstmtContext {
    public constructor(ctx: InsertstmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public table_name(): Table_nameContext {
        return this.getRuleContext(0, Table_nameContext)!;
    }
    public insert_rest(): Insert_restContext {
        return this.getRuleContext(0, Insert_restContext)!;
    }
    public with_clause(): With_clauseContext | null {
        return this.getRuleContext(0, With_clauseContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public opt_on_conflict(): Opt_on_conflictContext | null {
        return this.getRuleContext(0, Opt_on_conflictContext);
    }
    public returning_clause(): Returning_clauseContext | null {
        return this.getRuleContext(0, Returning_clauseContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInsertStatement) {
             listener.enterInsertStatement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInsertStatement) {
             listener.exitInsertStatement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertStatement) {
            return visitor.visitInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Insert_restContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public default_values_or_values(): Default_values_or_valuesContext | null {
        return this.getRuleContext(0, Default_values_or_valuesContext);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public insert_column_list(): Insert_column_listContext | null {
        return this.getRuleContext(0, Insert_column_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_OVERRIDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERRIDING, 0);
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSTEM, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_insert_rest;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInsert_rest) {
             listener.enterInsert_rest(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInsert_rest) {
             listener.exitInsert_rest(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsert_rest) {
            return visitor.visitInsert_rest(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Insert_column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insert_column_item(): Insert_column_itemContext[];
    public insert_column_item(i: number): Insert_column_itemContext | null;
    public insert_column_item(i?: number): Insert_column_itemContext[] | Insert_column_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Insert_column_itemContext);
        }

        return this.getRuleContext(i, Insert_column_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_insert_column_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInsert_column_list) {
             listener.enterInsert_column_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInsert_column_list) {
             listener.exitInsert_column_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsert_column_list) {
            return visitor.visitInsert_column_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Insert_column_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext {
        return this.getRuleContext(0, Column_nameContext)!;
    }
    public opt_indirection(): Opt_indirectionContext {
        return this.getRuleContext(0, Opt_indirectionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_insert_column_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInsert_column_item) {
             listener.enterInsert_column_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInsert_column_item) {
             listener.exitInsert_column_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsert_column_item) {
            return visitor.visitInsert_column_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_on_conflictContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public KW_CONFLICT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CONFLICT, 0)!;
    }
    public KW_DO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DO, 0)!;
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public set_clause_list(): Set_clause_listContext | null {
        return this.getRuleContext(0, Set_clause_listContext);
    }
    public KW_NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTHING, 0);
    }
    public opt_conf_expr(): Opt_conf_exprContext | null {
        return this.getRuleContext(0, Opt_conf_exprContext);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_on_conflict;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_on_conflict) {
             listener.enterOpt_on_conflict(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_on_conflict) {
             listener.exitOpt_on_conflict(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_on_conflict) {
            return visitor.visitOpt_on_conflict(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_conf_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public index_params(): Index_paramsContext | null {
        return this.getRuleContext(0, Index_paramsContext);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_conf_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_conf_expr) {
             listener.enterOpt_conf_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_conf_expr) {
             listener.exitOpt_conf_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_conf_expr) {
            return visitor.visitOpt_conf_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Returning_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RETURNING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_RETURNING, 0)!;
    }
    public target_list(): Target_listContext {
        return this.getRuleContext(0, Target_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_returning_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReturning_clause) {
             listener.enterReturning_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReturning_clause) {
             listener.exitReturning_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReturning_clause) {
            return visitor.visitReturning_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeletestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DELETE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public relation_expr_opt_alias(): Relation_expr_opt_aliasContext {
        return this.getRuleContext(0, Relation_expr_opt_aliasContext)!;
    }
    public with_clause(): With_clauseContext | null {
        return this.getRuleContext(0, With_clauseContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public from_list(): From_listContext | null {
        return this.getRuleContext(0, From_listContext);
    }
    public where_or_current_clause(): Where_or_current_clauseContext | null {
        return this.getRuleContext(0, Where_or_current_clauseContext);
    }
    public returning_clause(): Returning_clauseContext | null {
        return this.getRuleContext(0, Returning_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_deletestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDeletestmt) {
             listener.enterDeletestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDeletestmt) {
             listener.exitDeletestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeletestmt) {
            return visitor.visitDeletestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCK(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LOCK, 0)!;
    }
    public relation_expr_list(): Relation_expr_listContext {
        return this.getRuleContext(0, Relation_expr_listContext)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public lock_type(): Lock_typeContext | null {
        return this.getRuleContext(0, Lock_typeContext);
    }
    public KW_MODE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MODE, 0);
    }
    public KW_NOWAIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOWAIT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_lockstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLockstmt) {
             listener.enterLockstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLockstmt) {
             listener.exitLockstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLockstmt) {
            return visitor.visitLockstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Lock_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACCESS, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_SHARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SHARE, 0);
    }
    public KW_EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUSIVE, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_lock_type;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLock_type) {
             listener.enterLock_type(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLock_type) {
             listener.exitLock_type(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLock_type) {
            return visitor.visitLock_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_nowait_or_skipContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOWAIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOWAIT, 0);
    }
    public KW_SKIP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SKIP, 0);
    }
    public KW_LOCKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCKED, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_nowait_or_skip;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_nowait_or_skip) {
             listener.enterOpt_nowait_or_skip(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_nowait_or_skip) {
             listener.exitOpt_nowait_or_skip(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_nowait_or_skip) {
            return visitor.visitOpt_nowait_or_skip(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdatestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0)!;
    }
    public relation_expr_opt_alias(): Relation_expr_opt_aliasContext {
        return this.getRuleContext(0, Relation_expr_opt_aliasContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public set_clause_list(): Set_clause_listContext {
        return this.getRuleContext(0, Set_clause_listContext)!;
    }
    public with_clause(): With_clauseContext | null {
        return this.getRuleContext(0, With_clauseContext);
    }
    public from_clause(): From_clauseContext | null {
        return this.getRuleContext(0, From_clauseContext);
    }
    public where_or_current_clause(): Where_or_current_clauseContext | null {
        return this.getRuleContext(0, Where_or_current_clauseContext);
    }
    public returning_clause(): Returning_clauseContext | null {
        return this.getRuleContext(0, Returning_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_updatestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterUpdatestmt) {
             listener.enterUpdatestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitUpdatestmt) {
             listener.exitUpdatestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUpdatestmt) {
            return visitor.visitUpdatestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_clause_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_clause(): Set_clauseContext[];
    public set_clause(i: number): Set_clauseContext | null;
    public set_clause(i?: number): Set_clauseContext[] | Set_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Set_clauseContext);
        }

        return this.getRuleContext(i, Set_clauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_set_clause_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSet_clause_list) {
             listener.enterSet_clause_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSet_clause_list) {
             listener.exitSet_clause_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSet_clause_list) {
            return visitor.visitSet_clause_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insert_column_item(): Insert_column_itemContext | null {
        return this.getRuleContext(0, Insert_column_itemContext);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.EQUAL, 0)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public insert_column_list(): Insert_column_listContext | null {
        return this.getRuleContext(0, Insert_column_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public select_clause(): Select_clauseContext | null {
        return this.getRuleContext(0, Select_clauseContext);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_set_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSet_clause) {
             listener.enterSet_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSet_clause) {
             listener.exitSet_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSet_clause) {
            return visitor.visitSet_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeclarecursorstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DECLARE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DECLARE, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public cursor_options(): Cursor_optionsContext {
        return this.getRuleContext(0, Cursor_optionsContext)!;
    }
    public KW_CURSOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CURSOR, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public selectstmt(): SelectstmtContext {
        return this.getRuleContext(0, SelectstmtContext)!;
    }
    public KW_HOLD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HOLD, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_declarecursorstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDeclarecursorstmt) {
             listener.enterDeclarecursorstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDeclarecursorstmt) {
             listener.exitDeclarecursorstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeclarecursorstmt) {
            return visitor.visitDeclarecursorstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Cursor_optionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_scrollable(): Opt_scrollableContext[];
    public opt_scrollable(i: number): Opt_scrollableContext | null;
    public opt_scrollable(i?: number): Opt_scrollableContext[] | Opt_scrollableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_scrollableContext);
        }

        return this.getRuleContext(i, Opt_scrollableContext);
    }
    public KW_BINARY(): antlr.TerminalNode[];
    public KW_BINARY(i: number): antlr.TerminalNode | null;
    public KW_BINARY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_BINARY);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_BINARY, i);
    	}
    }
    public KW_INSENSITIVE(): antlr.TerminalNode[];
    public KW_INSENSITIVE(i: number): antlr.TerminalNode | null;
    public KW_INSENSITIVE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_INSENSITIVE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_INSENSITIVE, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_cursor_options;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCursor_options) {
             listener.enterCursor_options(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCursor_options) {
             listener.exitCursor_options(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCursor_options) {
            return visitor.visitCursor_options(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_selectstmt;
    }
    public override copyFrom(ctx: SelectstmtContext): void {
        super.copyFrom(ctx);
    }
}
export class SelectStatementContext extends SelectstmtContext {
    public constructor(ctx: SelectstmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public select_no_parens(): Select_no_parensContext | null {
        return this.getRuleContext(0, Select_no_parensContext);
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelectStatement) {
             listener.enterSelectStatement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelectStatement) {
             listener.exitSelectStatement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStatement) {
            return visitor.visitSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_with_parensContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public select_no_parens(): Select_no_parensContext | null {
        return this.getRuleContext(0, Select_no_parensContext);
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_select_with_parens;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelect_with_parens) {
             listener.enterSelect_with_parens(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelect_with_parens) {
             listener.exitSelect_with_parens(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelect_with_parens) {
            return visitor.visitSelect_with_parens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_no_parensContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_clause(): Select_clauseContext {
        return this.getRuleContext(0, Select_clauseContext)!;
    }
    public with_clause(): With_clauseContext | null {
        return this.getRuleContext(0, With_clauseContext);
    }
    public sort_clause(): Sort_clauseContext | null {
        return this.getRuleContext(0, Sort_clauseContext);
    }
    public for_locking_clause(): For_locking_clauseContext | null {
        return this.getRuleContext(0, For_locking_clauseContext);
    }
    public select_limit(): Select_limitContext | null {
        return this.getRuleContext(0, Select_limitContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_select_no_parens;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelect_no_parens) {
             listener.enterSelect_no_parens(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelect_no_parens) {
             listener.exitSelect_no_parens(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelect_no_parens) {
            return visitor.visitSelect_no_parens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simple_select(): Simple_selectContext | null {
        return this.getRuleContext(0, Simple_selectContext);
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_select_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelect_clause) {
             listener.enterSelect_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelect_clause) {
             listener.exitSelect_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelect_clause) {
            return visitor.visitSelect_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Simple_selectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public sql_expression(): Sql_expressionContext | null {
        return this.getRuleContext(0, Sql_expressionContext);
    }
    public values_clause(): Values_clauseContext | null {
        return this.getRuleContext(0, Values_clauseContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public relation_expr(): Relation_exprContext | null {
        return this.getRuleContext(0, Relation_exprContext);
    }
    public select_with_parens(): Select_with_parensContext[];
    public select_with_parens(i: number): Select_with_parensContext | null;
    public select_with_parens(i?: number): Select_with_parensContext[] | Select_with_parensContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Select_with_parensContext);
        }

        return this.getRuleContext(i, Select_with_parensContext);
    }
    public set_operator_with_all_or_distinct(): Set_operator_with_all_or_distinctContext[];
    public set_operator_with_all_or_distinct(i: number): Set_operator_with_all_or_distinctContext | null;
    public set_operator_with_all_or_distinct(i?: number): Set_operator_with_all_or_distinctContext[] | Set_operator_with_all_or_distinctContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Set_operator_with_all_or_distinctContext);
        }

        return this.getRuleContext(i, Set_operator_with_all_or_distinctContext);
    }
    public simple_select(): Simple_selectContext[];
    public simple_select(i: number): Simple_selectContext | null;
    public simple_select(i?: number): Simple_selectContext[] | Simple_selectContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Simple_selectContext);
        }

        return this.getRuleContext(i, Simple_selectContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public into_clause(): Into_clauseContext | null {
        return this.getRuleContext(0, Into_clauseContext);
    }
    public distinct_clause(): Distinct_clauseContext | null {
        return this.getRuleContext(0, Distinct_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_simple_select;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSimple_select) {
             listener.enterSimple_select(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSimple_select) {
             listener.exitSimple_select(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimple_select) {
            return visitor.visitSimple_select(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_operator_with_all_or_distinctContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNION, 0);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERSECT, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCEPT, 0);
    }
    public all_or_distinct(): All_or_distinctContext | null {
        return this.getRuleContext(0, All_or_distinctContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_set_operator_with_all_or_distinct;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSet_operator_with_all_or_distinct) {
             listener.enterSet_operator_with_all_or_distinct(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSet_operator_with_all_or_distinct) {
             listener.exitSet_operator_with_all_or_distinct(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSet_operator_with_all_or_distinct) {
            return visitor.visitSet_operator_with_all_or_distinct(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class With_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public common_table_expr(): Common_table_exprContext[];
    public common_table_expr(i: number): Common_table_exprContext | null;
    public common_table_expr(i?: number): Common_table_exprContext[] | Common_table_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Common_table_exprContext);
        }

        return this.getRuleContext(i, Common_table_exprContext);
    }
    public KW_RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RECURSIVE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_with_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWith_clause) {
             listener.enterWith_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWith_clause) {
             listener.exitWith_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWith_clause) {
            return visitor.visitWith_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Common_table_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public preparablestmt(): PreparablestmtContext {
        return this.getRuleContext(0, PreparablestmtContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public search_cluase(): Search_cluaseContext | null {
        return this.getRuleContext(0, Search_cluaseContext);
    }
    public cycle_cluase(): Cycle_cluaseContext | null {
        return this.getRuleContext(0, Cycle_cluaseContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_common_table_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCommon_table_expr) {
             listener.enterCommon_table_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCommon_table_expr) {
             listener.exitCommon_table_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommon_table_expr) {
            return visitor.visitCommon_table_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Search_cluaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SEARCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0)!;
    }
    public KW_FIRST(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public column_list(): Column_listContext {
        return this.getRuleContext(0, Column_listContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public column_name(): Column_nameContext {
        return this.getRuleContext(0, Column_nameContext)!;
    }
    public KW_BREADTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BREADTH, 0);
    }
    public KW_DEPTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEPTH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_search_cluase;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSearch_cluase) {
             listener.enterSearch_cluase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSearch_cluase) {
             listener.exitSearch_cluase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSearch_cluase) {
            return visitor.visitSearch_cluase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Cycle_cluaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CYCLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CYCLE, 0)!;
    }
    public column_list(): Column_listContext {
        return this.getRuleContext(0, Column_listContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public column_name(): Column_nameContext[];
    public column_name(i: number): Column_nameContext | null;
    public column_name(i?: number): Column_nameContext[] | Column_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_nameContext);
        }

        return this.getRuleContext(i, Column_nameContext);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_cycle_cluase;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCycle_cluase) {
             listener.enterCycle_cluase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCycle_cluase) {
             listener.exitCycle_cluase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCycle_cluase) {
            return visitor.visitCycle_cluase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Into_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public opttempTableName(): OpttempTableNameContext | null {
        return this.getRuleContext(0, OpttempTableNameContext);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public KW_STRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRICT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_into_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInto_clause) {
             listener.enterInto_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInto_clause) {
             listener.exitInto_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInto_clause) {
            return visitor.visitInto_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OpttempTableNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_name_create(): Table_name_createContext {
        return this.getRuleContext(0, Table_name_createContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMP, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GLOBAL, 0);
    }
    public KW_UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLOGGED, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opttempTableName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpttempTableName) {
             listener.enterOpttempTableName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpttempTableName) {
             listener.exitOpttempTableName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpttempTableName) {
            return visitor.visitOpttempTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class All_or_distinctContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_all_or_distinct;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAll_or_distinct) {
             listener.enterAll_or_distinct(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAll_or_distinct) {
             listener.exitAll_or_distinct(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAll_or_distinct) {
            return visitor.visitAll_or_distinct(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Distinct_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTINCT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0)!;
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_distinct_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDistinct_clause) {
             listener.enterDistinct_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDistinct_clause) {
             listener.exitDistinct_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDistinct_clause) {
            return visitor.visitDistinct_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sort_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ORDER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ORDER, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public sortby(): SortbyContext[];
    public sortby(i: number): SortbyContext | null;
    public sortby(i?: number): SortbyContext[] | SortbyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortbyContext);
        }

        return this.getRuleContext(i, SortbyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sort_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSort_clause) {
             listener.enterSort_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSort_clause) {
             listener.exitSort_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSort_clause) {
            return visitor.visitSort_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortbyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_expr_noparen(): Column_expr_noparenContext {
        return this.getRuleContext(0, Column_expr_noparenContext)!;
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public qual_all_op(): Qual_all_opContext | null {
        return this.getRuleContext(0, Qual_all_opContext);
    }
    public opt_nulls_order(): Opt_nulls_orderContext | null {
        return this.getRuleContext(0, Opt_nulls_orderContext);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DESC, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sortby;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSortby) {
             listener.enterSortby(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSortby) {
             listener.exitSortby(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSortby) {
            return visitor.visitSortby(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_limitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public offset_clause(): Offset_clauseContext | null {
        return this.getRuleContext(0, Offset_clauseContext);
    }
    public fetch_clause(): Fetch_clauseContext | null {
        return this.getRuleContext(0, Fetch_clauseContext);
    }
    public limit_clause(): Limit_clauseContext | null {
        return this.getRuleContext(0, Limit_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_select_limit;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelect_limit) {
             listener.enterSelect_limit(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelect_limit) {
             listener.exitSelect_limit(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelect_limit) {
            return visitor.visitSelect_limit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Limit_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIMIT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LIMIT, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_limit_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLimit_clause) {
             listener.enterLimit_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLimit_clause) {
             listener.exitLimit_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLimit_clause) {
            return visitor.visitLimit_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Fetch_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FETCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FETCH, 0)!;
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public select_fetch_first_value(): Select_fetch_first_valueContext | null {
        return this.getRuleContext(0, Select_fetch_first_valueContext);
    }
    public row_or_rows(): Row_or_rowsContext | null {
        return this.getRuleContext(0, Row_or_rowsContext);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_TIES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIES, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fetch_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFetch_clause) {
             listener.enterFetch_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFetch_clause) {
             listener.exitFetch_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFetch_clause) {
            return visitor.visitFetch_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Offset_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OFFSET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OFFSET, 0)!;
    }
    public select_fetch_first_value(): Select_fetch_first_valueContext | null {
        return this.getRuleContext(0, Select_fetch_first_valueContext);
    }
    public row_or_rows(): Row_or_rowsContext | null {
        return this.getRuleContext(0, Row_or_rowsContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_offset_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOffset_clause) {
             listener.enterOffset_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOffset_clause) {
             listener.exitOffset_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOffset_clause) {
            return visitor.visitOffset_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_fetch_first_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public Numeric(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Numeric, 0);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_select_fetch_first_value;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelect_fetch_first_value) {
             listener.enterSelect_fetch_first_value(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelect_fetch_first_value) {
             listener.exitSelect_fetch_first_value(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelect_fetch_first_value) {
            return visitor.visitSelect_fetch_first_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Row_or_rowsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_row_or_rows;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRow_or_rows) {
             listener.enterRow_or_rows(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRow_or_rows) {
             listener.exitRow_or_rows(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRow_or_rows) {
            return visitor.visitRow_or_rows(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Group_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public group_by_list(): Group_by_listContext {
        return this.getRuleContext(0, Group_by_listContext)!;
    }
    public all_or_distinct(): All_or_distinctContext | null {
        return this.getRuleContext(0, All_or_distinctContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_group_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGroup_clause) {
             listener.enterGroup_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGroup_clause) {
             listener.exitGroup_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroup_clause) {
            return visitor.visitGroup_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Group_by_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public group_by_item(): Group_by_itemContext[];
    public group_by_item(i: number): Group_by_itemContext | null;
    public group_by_item(i?: number): Group_by_itemContext[] | Group_by_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Group_by_itemContext);
        }

        return this.getRuleContext(i, Group_by_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_group_by_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGroup_by_list) {
             listener.enterGroup_by_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGroup_by_list) {
             listener.exitGroup_by_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroup_by_list) {
            return visitor.visitGroup_by_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Group_by_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_expr_noparen(): Column_expr_noparenContext | null {
        return this.getRuleContext(0, Column_expr_noparenContext);
    }
    public empty_grouping_set(): Empty_grouping_setContext | null {
        return this.getRuleContext(0, Empty_grouping_setContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public column_expr_list_noparen(): Column_expr_list_noparenContext | null {
        return this.getRuleContext(0, Column_expr_list_noparenContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CUBE, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLUP, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUPING, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SETS, 0);
    }
    public group_by_list(): Group_by_listContext | null {
        return this.getRuleContext(0, Group_by_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_group_by_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGroup_by_item) {
             listener.enterGroup_by_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGroup_by_item) {
             listener.exitGroup_by_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroup_by_item) {
            return visitor.visitGroup_by_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Empty_grouping_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_empty_grouping_set;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterEmpty_grouping_set) {
             listener.enterEmpty_grouping_set(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitEmpty_grouping_set) {
             listener.exitEmpty_grouping_set(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEmpty_grouping_set) {
            return visitor.visitEmpty_grouping_set(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Having_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_HAVING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_HAVING, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_having_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterHaving_clause) {
             listener.enterHaving_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitHaving_clause) {
             listener.exitHaving_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitHaving_clause) {
            return visitor.visitHaving_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class For_locking_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public for_locking_item(): For_locking_itemContext[];
    public for_locking_item(i: number): For_locking_itemContext | null;
    public for_locking_item(i?: number): For_locking_itemContext[] | For_locking_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(For_locking_itemContext);
        }

        return this.getRuleContext(i, For_locking_itemContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_READ, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_for_locking_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFor_locking_clause) {
             listener.enterFor_locking_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFor_locking_clause) {
             listener.exitFor_locking_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFor_locking_clause) {
            return visitor.visitFor_locking_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class For_locking_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public for_locking_strength(): For_locking_strengthContext {
        return this.getRuleContext(0, For_locking_strengthContext)!;
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public qualified_name_list(): Qualified_name_listContext | null {
        return this.getRuleContext(0, Qualified_name_listContext);
    }
    public opt_nowait_or_skip(): Opt_nowait_or_skipContext | null {
        return this.getRuleContext(0, Opt_nowait_or_skipContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_for_locking_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFor_locking_item) {
             listener.enterFor_locking_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFor_locking_item) {
             listener.exitFor_locking_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFor_locking_item) {
            return visitor.visitFor_locking_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class For_locking_strengthContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_SHARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SHARE, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_KEY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_for_locking_strength;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFor_locking_strength) {
             listener.enterFor_locking_strength(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFor_locking_strength) {
             listener.exitFor_locking_strength(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFor_locking_strength) {
            return visitor.visitFor_locking_strength(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Values_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VALUES, 0)!;
    }
    public execute_param_clause(): Execute_param_clauseContext[];
    public execute_param_clause(i: number): Execute_param_clauseContext | null;
    public execute_param_clause(i?: number): Execute_param_clauseContext[] | Execute_param_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Execute_param_clauseContext);
        }

        return this.getRuleContext(i, Execute_param_clauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_values_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterValues_clause) {
             listener.enterValues_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitValues_clause) {
             listener.exitValues_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitValues_clause) {
            return visitor.visitValues_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class From_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public from_list(): From_listContext {
        return this.getRuleContext(0, From_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_from_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFrom_clause) {
             listener.enterFrom_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFrom_clause) {
             listener.exitFrom_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrom_clause) {
            return visitor.visitFrom_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class From_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_ref(): Table_refContext[];
    public table_ref(i: number): Table_refContext | null;
    public table_ref(i?: number): Table_refContext[] | Table_refContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_refContext);
        }

        return this.getRuleContext(i, Table_refContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_from_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFrom_list) {
             listener.enterFrom_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFrom_list) {
             listener.exitFrom_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrom_list) {
            return visitor.visitFrom_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public table_ref(): Table_refContext[];
    public table_ref(i: number): Table_refContext | null;
    public table_ref(i?: number): Table_refContext[] | Table_refContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_refContext);
        }

        return this.getRuleContext(i, Table_refContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_CROSS(): antlr.TerminalNode[];
    public KW_CROSS(i: number): antlr.TerminalNode | null;
    public KW_CROSS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_CROSS);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_CROSS, i);
    	}
    }
    public KW_JOIN(): antlr.TerminalNode[];
    public KW_JOIN(i: number): antlr.TerminalNode | null;
    public KW_JOIN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_JOIN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_JOIN, i);
    	}
    }
    public KW_NATURAL(): antlr.TerminalNode[];
    public KW_NATURAL(i: number): antlr.TerminalNode | null;
    public KW_NATURAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NATURAL);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NATURAL, i);
    	}
    }
    public join_qual(): Join_qualContext[];
    public join_qual(i: number): Join_qualContext | null;
    public join_qual(i?: number): Join_qualContext[] | Join_qualContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Join_qualContext);
        }

        return this.getRuleContext(i, Join_qualContext);
    }
    public relation_expr(): Relation_exprContext | null {
        return this.getRuleContext(0, Relation_exprContext);
    }
    public view_relation_expr(): View_relation_exprContext | null {
        return this.getRuleContext(0, View_relation_exprContext);
    }
    public xmltable(): XmltableContext | null {
        return this.getRuleContext(0, XmltableContext);
    }
    public func_table(): Func_tableContext | null {
        return this.getRuleContext(0, Func_tableContext);
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public alias_clause(): Alias_clauseContext | null {
        return this.getRuleContext(0, Alias_clauseContext);
    }
    public tablesample_clause(): Tablesample_clauseContext | null {
        return this.getRuleContext(0, Tablesample_clauseContext);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LATERAL, 0);
    }
    public join_type(): Join_typeContext[];
    public join_type(i: number): Join_typeContext | null;
    public join_type(i?: number): Join_typeContext[] | Join_typeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Join_typeContext);
        }

        return this.getRuleContext(i, Join_typeContext);
    }
    public func_alias_clause(): Func_alias_clauseContext | null {
        return this.getRuleContext(0, Func_alias_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_table_ref;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTable_ref) {
             listener.enterTable_ref(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTable_ref) {
             listener.exitTable_ref(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTable_ref) {
            return visitor.visitTable_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alias_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alias_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlias_clause) {
             listener.enterAlias_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlias_clause) {
             listener.exitAlias_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlias_clause) {
            return visitor.visitAlias_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_alias_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alias_clause(): Alias_clauseContext | null {
        return this.getRuleContext(0, Alias_clauseContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public tablefuncelementlist(): TablefuncelementlistContext | null {
        return this.getRuleContext(0, TablefuncelementlistContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_alias_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_alias_clause) {
             listener.enterFunc_alias_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_alias_clause) {
             listener.exitFunc_alias_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_alias_clause) {
            return visitor.visitFunc_alias_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Join_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FULL, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEFT, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RIGHT, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INNER, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OUTER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_join_type;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterJoin_type) {
             listener.enterJoin_type(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitJoin_type) {
             listener.exitJoin_type(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoin_type) {
            return visitor.visitJoin_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Join_qualContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_join_qual;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterJoin_qual) {
             listener.enterJoin_qual(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitJoin_qual) {
             listener.exitJoin_qual(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoin_qual) {
            return visitor.visitJoin_qual(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Relation_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public truncate_table(): Truncate_tableContext | null {
        return this.getRuleContext(0, Truncate_tableContext);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name(): Schema_nameContext | null {
        return this.getRuleContext(0, Schema_nameContext);
    }
    public KW_CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_SCHEMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_relation_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRelation_expr) {
             listener.enterRelation_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRelation_expr) {
             listener.exitRelation_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelation_expr) {
            return visitor.visitRelation_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class View_relation_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public view_name(): View_nameContext {
        return this.getRuleContext(0, View_nameContext)!;
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public column_list(): Column_listContext | null {
        return this.getRuleContext(0, Column_listContext);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_view_relation_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterView_relation_expr) {
             listener.enterView_relation_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitView_relation_expr) {
             listener.exitView_relation_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitView_relation_expr) {
            return visitor.visitView_relation_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Publication_relation_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public truncate_table(): Truncate_tableContext | null {
        return this.getRuleContext(0, Truncate_tableContext);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLES, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name(): Schema_nameContext | null {
        return this.getRuleContext(0, Schema_nameContext);
    }
    public KW_CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_SCHEMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_publication_relation_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPublication_relation_expr) {
             listener.enterPublication_relation_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPublication_relation_expr) {
             listener.exitPublication_relation_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPublication_relation_expr) {
            return visitor.visitPublication_relation_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Relation_expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relation_expr(): Relation_exprContext[];
    public relation_expr(i: number): Relation_exprContext | null;
    public relation_expr(i?: number): Relation_exprContext[] | Relation_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Relation_exprContext);
        }

        return this.getRuleContext(i, Relation_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_relation_expr_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRelation_expr_list) {
             listener.enterRelation_expr_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRelation_expr_list) {
             listener.exitRelation_expr_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelation_expr_list) {
            return visitor.visitRelation_expr_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Publication_relation_expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public publication_relation_expr(): Publication_relation_exprContext[];
    public publication_relation_expr(i: number): Publication_relation_exprContext | null;
    public publication_relation_expr(i?: number): Publication_relation_exprContext[] | Publication_relation_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Publication_relation_exprContext);
        }

        return this.getRuleContext(i, Publication_relation_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_publication_relation_expr_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPublication_relation_expr_list) {
             listener.enterPublication_relation_expr_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPublication_relation_expr_list) {
             listener.exitPublication_relation_expr_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPublication_relation_expr_list) {
            return visitor.visitPublication_relation_expr_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Relation_expr_opt_aliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relation_expr(): Relation_exprContext {
        return this.getRuleContext(0, Relation_exprContext)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_relation_expr_opt_alias;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRelation_expr_opt_alias) {
             listener.enterRelation_expr_opt_alias(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRelation_expr_opt_alias) {
             listener.exitRelation_expr_opt_alias(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelation_expr_opt_alias) {
            return visitor.visitRelation_expr_opt_alias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Tablesample_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLESAMPLE, 0)!;
    }
    public function_name(): Function_nameContext {
        return this.getRuleContext(0, Function_nameContext)!;
    }
    public execute_param_clause(): Execute_param_clauseContext {
        return this.getRuleContext(0, Execute_param_clauseContext)!;
    }
    public opt_repeatable_clause(): Opt_repeatable_clauseContext | null {
        return this.getRuleContext(0, Opt_repeatable_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tablesample_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTablesample_clause) {
             listener.enterTablesample_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTablesample_clause) {
             listener.exitTablesample_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablesample_clause) {
            return visitor.visitTablesample_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_repeatable_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REPEATABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REPEATABLE, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_repeatable_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_repeatable_clause) {
             listener.enterOpt_repeatable_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_repeatable_clause) {
             listener.exitOpt_repeatable_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_repeatable_clause) {
            return visitor.visitOpt_repeatable_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_tableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_expr_windowless(): Func_expr_windowlessContext | null {
        return this.getRuleContext(0, Func_expr_windowlessContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDINALITY, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public rowsfrom_list(): Rowsfrom_listContext | null {
        return this.getRuleContext(0, Rowsfrom_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_table;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_table) {
             listener.enterFunc_table(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_table) {
             listener.exitFunc_table(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_table) {
            return visitor.visitFunc_table(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Rowsfrom_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_expr_windowless(): Func_expr_windowlessContext {
        return this.getRuleContext(0, Func_expr_windowlessContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public tablefuncelementlist(): TablefuncelementlistContext | null {
        return this.getRuleContext(0, TablefuncelementlistContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rowsfrom_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRowsfrom_item) {
             listener.enterRowsfrom_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRowsfrom_item) {
             listener.exitRowsfrom_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowsfrom_item) {
            return visitor.visitRowsfrom_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Rowsfrom_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rowsfrom_item(): Rowsfrom_itemContext[];
    public rowsfrom_item(i: number): Rowsfrom_itemContext | null;
    public rowsfrom_item(i?: number): Rowsfrom_itemContext[] | Rowsfrom_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Rowsfrom_itemContext);
        }

        return this.getRuleContext(i, Rowsfrom_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rowsfrom_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRowsfrom_list) {
             listener.enterRowsfrom_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRowsfrom_list) {
             listener.exitRowsfrom_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowsfrom_list) {
            return visitor.visitRowsfrom_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Where_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHERE, 0)!;
    }
    public column_expr_noparen(): Column_expr_noparenContext {
        return this.getRuleContext(0, Column_expr_noparenContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_where_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWhere_clause) {
             listener.enterWhere_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWhere_clause) {
             listener.exitWhere_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhere_clause) {
            return visitor.visitWhere_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Where_or_current_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHERE, 0)!;
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_where_or_current_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWhere_or_current_clause) {
             listener.enterWhere_or_current_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWhere_or_current_clause) {
             listener.exitWhere_or_current_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhere_or_current_clause) {
            return visitor.visitWhere_or_current_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablefuncelementlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tablefuncelement(): TablefuncelementContext[];
    public tablefuncelement(i: number): TablefuncelementContext | null;
    public tablefuncelement(i?: number): TablefuncelementContext[] | TablefuncelementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablefuncelementContext);
        }

        return this.getRuleContext(i, TablefuncelementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tablefuncelementlist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTablefuncelementlist) {
             listener.enterTablefuncelementlist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTablefuncelementlist) {
             listener.exitTablefuncelementlist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablefuncelementlist) {
            return visitor.visitTablefuncelementlist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablefuncelementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tablefuncelement;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTablefuncelement) {
             listener.enterTablefuncelement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTablefuncelement) {
             listener.exitTablefuncelement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablefuncelement) {
            return visitor.visitTablefuncelement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XmltableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_XMLTABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_XMLTABLE, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public xmlexists_argument(): Xmlexists_argumentContext | null {
        return this.getRuleContext(0, Xmlexists_argumentContext);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMNS, 0);
    }
    public xmltable_column_list(): Xmltable_column_listContext | null {
        return this.getRuleContext(0, Xmltable_column_listContext);
    }
    public KW_XMLNAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLNAMESPACES, 0);
    }
    public xml_namespace_list(): Xml_namespace_listContext | null {
        return this.getRuleContext(0, Xml_namespace_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmltable;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmltable) {
             listener.enterXmltable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmltable) {
             listener.exitXmltable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmltable) {
            return visitor.visitXmltable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xmltable_column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public xmltable_column_el(): Xmltable_column_elContext[];
    public xmltable_column_el(i: number): Xmltable_column_elContext | null;
    public xmltable_column_el(i?: number): Xmltable_column_elContext[] | Xmltable_column_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xmltable_column_elContext);
        }

        return this.getRuleContext(i, Xmltable_column_elContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmltable_column_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmltable_column_list) {
             listener.enterXmltable_column_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmltable_column_list) {
             listener.exitXmltable_column_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmltable_column_list) {
            return visitor.visitXmltable_column_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xmltable_column_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDINALITY, 0);
    }
    public xmltable_column_option_list(): Xmltable_column_option_listContext | null {
        return this.getRuleContext(0, Xmltable_column_option_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmltable_column_el;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmltable_column_el) {
             listener.enterXmltable_column_el(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmltable_column_el) {
             listener.exitXmltable_column_el(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmltable_column_el) {
            return visitor.visitXmltable_column_el(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xmltable_column_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public xmltable_column_option_el(): Xmltable_column_option_elContext[];
    public xmltable_column_option_el(i: number): Xmltable_column_option_elContext | null;
    public xmltable_column_option_el(i?: number): Xmltable_column_option_elContext[] | Xmltable_column_option_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xmltable_column_option_elContext);
        }

        return this.getRuleContext(i, Xmltable_column_option_elContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmltable_column_option_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmltable_column_option_list) {
             listener.enterXmltable_column_option_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmltable_column_option_list) {
             listener.exitXmltable_column_option_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmltable_column_option_list) {
            return visitor.visitXmltable_column_option_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xmltable_column_option_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmltable_column_option_el;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmltable_column_option_el) {
             listener.enterXmltable_column_option_el(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmltable_column_option_el) {
             listener.exitXmltable_column_option_el(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmltable_column_option_el) {
            return visitor.visitXmltable_column_option_el(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xml_namespace_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public xml_namespace_el(): Xml_namespace_elContext[];
    public xml_namespace_el(i: number): Xml_namespace_elContext | null;
    public xml_namespace_el(i?: number): Xml_namespace_elContext[] | Xml_namespace_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xml_namespace_elContext);
        }

        return this.getRuleContext(i, Xml_namespace_elContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xml_namespace_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXml_namespace_list) {
             listener.enterXml_namespace_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXml_namespace_list) {
             listener.exitXml_namespace_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXml_namespace_list) {
            return visitor.visitXml_namespace_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xml_namespace_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public collabel(): CollabelContext | null {
        return this.getRuleContext(0, CollabelContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xml_namespace_el;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXml_namespace_el) {
             listener.enterXml_namespace_el(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXml_namespace_el) {
             listener.exitXml_namespace_el(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXml_namespace_el) {
            return visitor.visitXml_namespace_el(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypenameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpletypename(): SimpletypenameContext | null {
        return this.getRuleContext(0, SimpletypenameContext);
    }
    public opt_array_bounds(): Opt_array_boundsContext | null {
        return this.getRuleContext(0, Opt_array_boundsContext);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ARRAY, 0);
    }
    public KW_SETOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SETOF, 0);
    }
    public OPEN_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_BRACKET, 0);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public CLOSE_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_BRACKET, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PERCENT, 0);
    }
    public KW_ROWTYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWTYPE, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_typename;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTypename) {
             listener.enterTypename(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTypename) {
             listener.exitTypename(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTypename) {
            return visitor.visitTypename(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_array_boundsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_BRACKET(): antlr.TerminalNode[];
    public OPEN_BRACKET(i: number): antlr.TerminalNode | null;
    public OPEN_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_BRACKET);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_BRACKET, i);
    	}
    }
    public CLOSE_BRACKET(): antlr.TerminalNode[];
    public CLOSE_BRACKET(i: number): antlr.TerminalNode | null;
    public CLOSE_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_BRACKET);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_BRACKET, i);
    	}
    }
    public Integral(): antlr.TerminalNode[];
    public Integral(i: number): antlr.TerminalNode | null;
    public Integral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.Integral);
    	} else {
    		return this.getToken(PostgreSqlParser.Integral, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_array_bounds;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_array_bounds) {
             listener.enterOpt_array_bounds(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_array_bounds) {
             listener.exitOpt_array_bounds(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_array_bounds) {
            return visitor.visitOpt_array_bounds(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpletypenameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public generictype(): GenerictypeContext | null {
        return this.getRuleContext(0, GenerictypeContext);
    }
    public consttypename(): ConsttypenameContext | null {
        return this.getRuleContext(0, ConsttypenameContext);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERVAL, 0);
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public opt_interval(): Opt_intervalContext | null {
        return this.getRuleContext(0, Opt_intervalContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_simpletypename;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSimpletypename) {
             listener.enterSimpletypename(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSimpletypename) {
             listener.exitSimpletypename(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimpletypename) {
            return visitor.visitSimpletypename(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConsttypenameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numeric(): NumericContext | null {
        return this.getRuleContext(0, NumericContext);
    }
    public bit(): BitContext | null {
        return this.getRuleContext(0, BitContext);
    }
    public character(): CharacterContext | null {
        return this.getRuleContext(0, CharacterContext);
    }
    public constdatetime(): ConstdatetimeContext | null {
        return this.getRuleContext(0, ConstdatetimeContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_consttypename;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConsttypename) {
             listener.enterConsttypename(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConsttypename) {
             listener.exitConsttypename(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConsttypename) {
            return visitor.visitConsttypename(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GenerictypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_function_name(): Type_function_nameContext {
        return this.getRuleContext(0, Type_function_nameContext)!;
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_generictype;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGenerictype) {
             listener.enterGenerictype(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGenerictype) {
             listener.exitGenerictype(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGenerictype) {
            return visitor.visitGenerictype(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumericContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTEGER, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SMALLINT, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BIGINT, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REAL, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FLOAT, 0);
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOUBLE, 0);
    }
    public KW_PRECISION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRECISION, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DECIMAL, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEC, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NUMERIC, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BOOLEAN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_numeric;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNumeric) {
             listener.enterNumeric(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNumeric) {
             listener.exitNumeric(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNumeric) {
            return visitor.visitNumeric(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_floatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public Integral(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.Integral, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_float;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_float) {
             listener.enterOpt_float(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_float) {
             listener.exitOpt_float(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_float) {
            return visitor.visitOpt_float(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BIT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BIT, 0)!;
    }
    public KW_VARYING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARYING, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_bit;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterBit) {
             listener.enterBit(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitBit) {
             listener.exitBit(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBit) {
            return visitor.visitBit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharacterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public character_c(): Character_cContext {
        return this.getRuleContext(0, Character_cContext)!;
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_character;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCharacter) {
             listener.enterCharacter(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCharacter) {
             listener.exitCharacter(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCharacter) {
            return visitor.visitCharacter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Character_cContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHARACTER, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAR, 0);
    }
    public KW_NCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NCHAR, 0);
    }
    public KW_VARYING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARYING, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARCHAR, 0);
    }
    public KW_NATIONAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NATIONAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_character_c;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCharacter_c) {
             listener.enterCharacter_c(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCharacter_c) {
             listener.exitCharacter_c(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCharacter_c) {
            return visitor.visitCharacter_c(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstdatetimeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIME(): antlr.TerminalNode[];
    public KW_TIME(i: number): antlr.TerminalNode | null;
    public KW_TIME(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_TIME);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_TIME, i);
    	}
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_constdatetime;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConstdatetime) {
             listener.enterConstdatetime(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConstdatetime) {
             listener.exitConstdatetime(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstdatetime) {
            return visitor.visitConstdatetime(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_intervalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MONTH, 0);
    }
    public interval_second(): Interval_secondContext | null {
        return this.getRuleContext(0, Interval_secondContext);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_YEAR, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DAY, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HOUR, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINUTE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_interval;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_interval) {
             listener.enterOpt_interval(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_interval) {
             listener.exitOpt_interval(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_interval) {
            return visitor.visitOpt_interval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Interval_secondContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SECOND(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SECOND, 0)!;
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_interval_second;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInterval_second) {
             listener.enterInterval_second(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInterval_second) {
             listener.exitInterval_second(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInterval_second) {
            return visitor.visitInterval_second(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.LT, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.GT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public LESS_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.LESS_EQUALS, 0);
    }
    public GREATER_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.GREATER_EQUALS, 0);
    }
    public NOT_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.NOT_EQUALS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_comparisonOperator;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterComparisonOperator) {
             listener.enterComparisonOperator(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitComparisonOperator) {
             listener.exitComparisonOperator(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_expression;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_booleanExpression;
    }
    public override copyFrom(ctx: BooleanExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class LogicalNotContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NOT, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLogicalNot) {
             listener.enterLogicalNot(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLogicalNot) {
             listener.exitLogicalNot(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalNot) {
            return visitor.visitLogicalNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicatedContext extends BooleanExpressionContext {
    public _valueExpression?: ValueExpressionContext;
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(0, PredicateContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPredicated) {
             listener.enterPredicated(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPredicated) {
             listener.exitPredicated(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPredicated) {
            return visitor.visitPredicated(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LogicalBinaryContext extends BooleanExpressionContext {
    public _left?: BooleanExpressionContext;
    public _operator?: Token | null;
    public _right?: BooleanExpressionContext;
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OR, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLogicalBinary) {
             listener.enterLogicalBinary(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLogicalBinary) {
             listener.exitLogicalBinary(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalBinary) {
            return visitor.visitLogicalBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends antlr.ParserRuleContext {
    public value: antlr.ParserRuleContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number, value: antlr.ParserRuleContext) {
        super(parent, invokingState);
        this.value = value;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_predicate;
    }
    public override copyFrom(ctx: PredicateContext): void {
        super.copyFrom(ctx);
        this.value = ctx.value;
    }
}
export class ComparisonContext extends PredicateContext {
    public _right?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterComparison) {
             listener.enterComparison(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitComparison) {
             listener.exitComparison(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComparison) {
            return visitor.visitComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LikeContext extends PredicateContext {
    public _pattern?: ValueExpressionContext;
    public _escape?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIKE, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ILIKE, 0);
    }
    public KW_SIMILAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SIMILAR, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BETWEEN, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ESCAPE, 0);
    }
    public KW_SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYMMETRIC, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLike) {
             listener.enterLike(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLike) {
             listener.exitLike(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLike) {
            return visitor.visitLike(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InSubqueryContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public select_with_parens(): Select_with_parensContext {
        return this.getRuleContext(0, Select_with_parensContext)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInSubquery) {
             listener.enterInSubquery(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInSubquery) {
             listener.exitInSubquery(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInSubquery) {
            return visitor.visitInSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DistinctFromContext extends PredicateContext {
    public _right?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IS, 0)!;
    }
    public KW_DISTINCT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDistinctFrom) {
             listener.enterDistinctFrom(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDistinctFrom) {
             listener.exitDistinctFrom(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDistinctFrom) {
            return visitor.visitDistinctFrom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InListContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInList) {
             listener.enterInList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInList) {
             listener.exitInList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInList) {
            return visitor.visitInList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullPredicateContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IS, 0)!;
    }
    public KW_NULL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NULL, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNullPredicate) {
             listener.enterNullPredicate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNullPredicate) {
             listener.exitNullPredicate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNullPredicate) {
            return visitor.visitNullPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BetweenContext extends PredicateContext {
    public _lower?: ValueExpressionContext;
    public _upper?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_BETWEEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BETWEEN, 0)!;
    }
    public KW_AND(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AND, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterBetween) {
             listener.enterBetween(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitBetween) {
             listener.exitBetween(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBetween) {
            return visitor.visitBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QuantifiedComparisonContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public subquery_Op(): Subquery_OpContext {
        return this.getRuleContext(0, Subquery_OpContext)!;
    }
    public sub_type(): Sub_typeContext {
        return this.getRuleContext(0, Sub_typeContext)!;
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQuantifiedComparison) {
             listener.enterQuantifiedComparison(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQuantifiedComparison) {
             listener.exitQuantifiedComparison(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQuantifiedComparison) {
            return visitor.visitQuantifiedComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_valueExpression;
    }
    public override copyFrom(ctx: ValueExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ValueExpressionDefaultContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterValueExpressionDefault) {
             listener.enterValueExpressionDefault(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitValueExpressionDefault) {
             listener.exitValueExpressionDefault(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitValueExpressionDefault) {
            return visitor.visitValueExpressionDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConcatenationContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CARET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CARET, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConcatenation) {
             listener.enterConcatenation(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConcatenation) {
             listener.exitConcatenation(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConcatenation) {
            return visitor.visitConcatenation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticBinaryContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _operator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PERCENT, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterArithmeticBinary) {
             listener.enterArithmeticBinary(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitArithmeticBinary) {
             listener.exitArithmeticBinary(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticBinary) {
            return visitor.visitArithmeticBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticUnaryContext extends ValueExpressionContext {
    public _operator?: Token | null;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterArithmeticUnary) {
             listener.enterArithmeticUnary(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitArithmeticUnary) {
             listener.exitArithmeticUnary(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticUnary) {
            return visitor.visitArithmeticUnary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AtTimeZoneContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public KW_AT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AT, 0)!;
    }
    public KW_TIME(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TIME, 0)!;
    }
    public KW_ZONE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAtTimeZone) {
             listener.enterAtTimeZone(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAtTimeZone) {
             listener.exitAtTimeZone(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAtTimeZone) {
            return visitor.visitAtTimeZone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryExpressionContext extends antlr.ParserRuleContext {
    public _a_expr_in_parens?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXISTS, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNIQUE, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ARRAY, 0);
    }
    public array_expr(): Array_exprContext | null {
        return this.getRuleContext(0, Array_exprContext);
    }
    public PARAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PARAM, 0);
    }
    public opt_indirection(): Opt_indirectionContext | null {
        return this.getRuleContext(0, Opt_indirectionContext);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUPING, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public Numeric(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Numeric, 0);
    }
    public BinaryStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.BinaryStringConstant, 0);
    }
    public HexadecimalStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.HexadecimalStringConstant, 0);
    }
    public function_name(): Function_nameContext | null {
        return this.getRuleContext(0, Function_nameContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public func_arg_list(): Func_arg_listContext | null {
        return this.getRuleContext(0, Func_arg_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public sort_clause(): Sort_clauseContext | null {
        return this.getRuleContext(0, Sort_clauseContext);
    }
    public consttypename(): ConsttypenameContext | null {
        return this.getRuleContext(0, ConsttypenameContext);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERVAL, 0);
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public opt_interval(): Opt_intervalContext | null {
        return this.getRuleContext(0, Opt_intervalContext);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public PLSQLVARIABLENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLSQLVARIABLENAME, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASE, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_END, 0);
    }
    public when_clause(): When_clauseContext[];
    public when_clause(i: number): When_clauseContext | null;
    public when_clause(i?: number): When_clauseContext[] | When_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(When_clauseContext);
        }

        return this.getRuleContext(i, When_clauseContext);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ELSE, 0);
    }
    public func_expr(): Func_exprContext | null {
        return this.getRuleContext(0, Func_exprContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public explicit_row(): Explicit_rowContext | null {
        return this.getRuleContext(0, Explicit_rowContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public row(): RowContext[];
    public row(i: number): RowContext | null;
    public row(i?: number): RowContext[] | RowContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowContext);
        }

        return this.getRuleContext(i, RowContext);
    }
    public KW_OVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERLAPS, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public primaryExpression(): PrimaryExpressionContext[];
    public primaryExpression(i: number): PrimaryExpressionContext | null;
    public primaryExpression(i?: number): PrimaryExpressionContext[] | PrimaryExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryExpressionContext);
        }

        return this.getRuleContext(i, PrimaryExpressionContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public qual_op(): Qual_opContext | null {
        return this.getRuleContext(0, Qual_opContext);
    }
    public mathop(): MathopContext | null {
        return this.getRuleContext(0, MathopContext);
    }
    public TYPECAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.TYPECAST, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IS, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public prep_type_clause(): Prep_type_clauseContext | null {
        return this.getRuleContext(0, Prep_type_clauseContext);
    }
    public KW_DOCUMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOCUMENT, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_primaryExpression;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrimaryExpression) {
             listener.enterPrimaryExpression(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrimaryExpression) {
             listener.exitPrimaryExpression(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrimaryExpression) {
            return visitor.visitPrimaryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_applicationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public function_name(): Function_nameContext {
        return this.getRuleContext(0, Function_nameContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public func_arg_list(): Func_arg_listContext | null {
        return this.getRuleContext(0, Func_arg_listContext);
    }
    public KW_VARIADIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARIADIC, 0);
    }
    public func_arg_expr(): Func_arg_exprContext | null {
        return this.getRuleContext(0, Func_arg_exprContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public sort_clause(): Sort_clauseContext | null {
        return this.getRuleContext(0, Sort_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_application;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_application) {
             listener.enterFunc_application(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_application) {
             listener.exitFunc_application(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_application) {
            return visitor.visitFunc_application(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_application(): Func_applicationContext | null {
        return this.getRuleContext(0, Func_applicationContext);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHIN, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public sort_clause(): Sort_clauseContext | null {
        return this.getRuleContext(0, Sort_clauseContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FILTER, 0);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHERE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVER, 0);
    }
    public window_specification(): Window_specificationContext | null {
        return this.getRuleContext(0, Window_specificationContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public func_expr_common_subexpr(): Func_expr_common_subexprContext | null {
        return this.getRuleContext(0, Func_expr_common_subexprContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_expr) {
             listener.enterFunc_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_expr) {
             listener.exitFunc_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_expr) {
            return visitor.visitFunc_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_expr_windowlessContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_application(): Func_applicationContext | null {
        return this.getRuleContext(0, Func_applicationContext);
    }
    public func_expr_common_subexpr(): Func_expr_common_subexprContext | null {
        return this.getRuleContext(0, Func_expr_common_subexprContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_expr_windowless;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_expr_windowless) {
             listener.enterFunc_expr_windowless(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_expr_windowless) {
             listener.exitFunc_expr_windowless(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_expr_windowless) {
            return visitor.visitFunc_expr_windowless(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_expr_common_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_TIME, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_LOCALTIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCALTIME, 0);
    }
    public KW_LOCALTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCALTIMESTAMP, 0);
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public KW_CURRENT_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_ROLE, 0);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_USER, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION_USER, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_CURRENT_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_CATALOG, 0);
    }
    public KW_CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_SCHEMA, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CAST, 0);
    }
    public KW_TREAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TREAT, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTRACT, 0);
    }
    public extract_list(): Extract_listContext | null {
        return this.getRuleContext(0, Extract_listContext);
    }
    public KW_NORMALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NORMALIZE, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public unicode_normal_form(): Unicode_normal_formContext | null {
        return this.getRuleContext(0, Unicode_normal_formContext);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERLAY, 0);
    }
    public overlay_list(): Overlay_listContext | null {
        return this.getRuleContext(0, Overlay_listContext);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POSITION, 0);
    }
    public primaryExpression(): PrimaryExpressionContext[];
    public primaryExpression(i: number): PrimaryExpressionContext | null;
    public primaryExpression(i?: number): PrimaryExpressionContext[] | PrimaryExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryExpressionContext);
        }

        return this.getRuleContext(i, PrimaryExpressionContext);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSTRING, 0);
    }
    public substr_list(): Substr_listContext | null {
        return this.getRuleContext(0, Substr_listContext);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIM, 0);
    }
    public trim_list(): Trim_listContext | null {
        return this.getRuleContext(0, Trim_listContext);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BOTH, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEADING, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRAILING, 0);
    }
    public KW_NULLIF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLIF, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public KW_COALESCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COALESCE, 0);
    }
    public KW_GREATEST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GREATEST, 0);
    }
    public KW_LEAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEAST, 0);
    }
    public KW_XMLCONCAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLCONCAT, 0);
    }
    public KW_XMLELEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLELEMENT, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NAME, 0);
    }
    public collabel(): CollabelContext | null {
        return this.getRuleContext(0, CollabelContext);
    }
    public xml_attributes(): Xml_attributesContext | null {
        return this.getRuleContext(0, Xml_attributesContext);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public KW_XMLEXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLEXISTS, 0);
    }
    public xmlexists_argument(): Xmlexists_argumentContext | null {
        return this.getRuleContext(0, Xmlexists_argumentContext);
    }
    public KW_XMLFOREST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLFOREST, 0);
    }
    public xml_attribute_list(): Xml_attribute_listContext | null {
        return this.getRuleContext(0, Xml_attribute_listContext);
    }
    public KW_XMLPARSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLPARSE, 0);
    }
    public document_or_content(): Document_or_contentContext | null {
        return this.getRuleContext(0, Document_or_contentContext);
    }
    public xml_whitespace_option(): Xml_whitespace_optionContext | null {
        return this.getRuleContext(0, Xml_whitespace_optionContext);
    }
    public KW_XMLPI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLPI, 0);
    }
    public KW_XMLROOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLROOT, 0);
    }
    public KW_XML(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XML, 0);
    }
    public xml_root_version(): Xml_root_versionContext | null {
        return this.getRuleContext(0, Xml_root_versionContext);
    }
    public opt_xml_root_standalone(): Opt_xml_root_standaloneContext | null {
        return this.getRuleContext(0, Opt_xml_root_standaloneContext);
    }
    public KW_XMLSERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLSERIALIZE, 0);
    }
    public simpletypename(): SimpletypenameContext | null {
        return this.getRuleContext(0, SimpletypenameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_expr_common_subexpr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_expr_common_subexpr) {
             listener.enterFunc_expr_common_subexpr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_expr_common_subexpr) {
             listener.exitFunc_expr_common_subexpr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_expr_common_subexpr) {
            return visitor.visitFunc_expr_common_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xml_root_versionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VERSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VERSION, 0)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xml_root_version;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXml_root_version) {
             listener.enterXml_root_version(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXml_root_version) {
             listener.exitXml_root_version(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXml_root_version) {
            return visitor.visitXml_root_version(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_xml_root_standaloneContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.COMMA, 0)!;
    }
    public KW_STANDALONE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_STANDALONE, 0)!;
    }
    public KW_YES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_YES, 0);
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_xml_root_standalone;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_xml_root_standalone) {
             listener.enterOpt_xml_root_standalone(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_xml_root_standalone) {
             listener.exitOpt_xml_root_standalone(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_xml_root_standalone) {
            return visitor.visitOpt_xml_root_standalone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xml_attributesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_XMLATTRIBUTES(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_XMLATTRIBUTES, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public xml_attribute_list(): Xml_attribute_listContext {
        return this.getRuleContext(0, Xml_attribute_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xml_attributes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXml_attributes) {
             listener.enterXml_attributes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXml_attributes) {
             listener.exitXml_attributes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXml_attributes) {
            return visitor.visitXml_attributes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xml_attribute_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public xml_attribute_el(): Xml_attribute_elContext[];
    public xml_attribute_el(i: number): Xml_attribute_elContext | null;
    public xml_attribute_el(i?: number): Xml_attribute_elContext[] | Xml_attribute_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xml_attribute_elContext);
        }

        return this.getRuleContext(i, Xml_attribute_elContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xml_attribute_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXml_attribute_list) {
             listener.enterXml_attribute_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXml_attribute_list) {
             listener.exitXml_attribute_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXml_attribute_list) {
            return visitor.visitXml_attribute_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xml_attribute_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public collabel(): CollabelContext | null {
        return this.getRuleContext(0, CollabelContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xml_attribute_el;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXml_attribute_el) {
             listener.enterXml_attribute_el(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXml_attribute_el) {
             listener.exitXml_attribute_el(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXml_attribute_el) {
            return visitor.visitXml_attribute_el(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Document_or_contentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DOCUMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOCUMENT, 0);
    }
    public KW_CONTENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTENT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_document_or_content;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDocument_or_content) {
             listener.enterDocument_or_content(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDocument_or_content) {
             listener.exitDocument_or_content(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDocument_or_content) {
            return visitor.visitDocument_or_content(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xml_whitespace_optionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHITESPACE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHITESPACE, 0)!;
    }
    public KW_PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRESERVE, 0);
    }
    public KW_STRIP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRIP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xml_whitespace_option;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXml_whitespace_option) {
             listener.enterXml_whitespace_option(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXml_whitespace_option) {
             listener.exitXml_whitespace_option(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXml_whitespace_option) {
            return visitor.visitXml_whitespace_option(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xmlexists_argumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PASSING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PASSING, 0)!;
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public xml_passing_mech(): Xml_passing_mechContext[];
    public xml_passing_mech(i: number): Xml_passing_mechContext | null;
    public xml_passing_mech(i?: number): Xml_passing_mechContext[] | Xml_passing_mechContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xml_passing_mechContext);
        }

        return this.getRuleContext(i, Xml_passing_mechContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmlexists_argument;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmlexists_argument) {
             listener.enterXmlexists_argument(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmlexists_argument) {
             listener.exitXmlexists_argument(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmlexists_argument) {
            return visitor.visitXmlexists_argument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xml_passing_mechContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public KW_REF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REF, 0);
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xml_passing_mech;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXml_passing_mech) {
             listener.enterXml_passing_mech(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXml_passing_mech) {
             listener.exitXml_passing_mech(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXml_passing_mech) {
            return visitor.visitXml_passing_mech(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WINDOW(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WINDOW, 0)!;
    }
    public window_definition_list(): Window_definition_listContext {
        return this.getRuleContext(0, Window_definition_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_window_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWindow_clause) {
             listener.enterWindow_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWindow_clause) {
             listener.exitWindow_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindow_clause) {
            return visitor.visitWindow_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_definition_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_definition(): Window_definitionContext[];
    public window_definition(i: number): Window_definitionContext | null;
    public window_definition(i?: number): Window_definitionContext[] | Window_definitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_definitionContext);
        }

        return this.getRuleContext(i, Window_definitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_window_definition_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWindow_definition_list) {
             listener.enterWindow_definition_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWindow_definition_list) {
             listener.exitWindow_definition_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindow_definition_list) {
            return visitor.visitWindow_definition_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_definitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public window_specification(): Window_specificationContext {
        return this.getRuleContext(0, Window_specificationContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_window_definition;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWindow_definition) {
             listener.enterWindow_definition(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWindow_definition) {
             listener.exitWindow_definition(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindow_definition) {
            return visitor.visitWindow_definition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Over_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OVER, 0)!;
    }
    public window_specification(): Window_specificationContext | null {
        return this.getRuleContext(0, Window_specificationContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_over_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOver_clause) {
             listener.enterOver_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOver_clause) {
             listener.exitOver_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOver_clause) {
            return visitor.visitOver_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public sort_clause(): Sort_clauseContext | null {
        return this.getRuleContext(0, Sort_clauseContext);
    }
    public opt_frame_clause(): Opt_frame_clauseContext | null {
        return this.getRuleContext(0, Opt_frame_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_window_specification;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWindow_specification) {
             listener.enterWindow_specification(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWindow_specification) {
             listener.exitWindow_specification(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindow_specification) {
            return visitor.visitWindow_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_frame_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RANGE, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_GROUPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUPS, 0);
    }
    public frame_bound(): Frame_boundContext[];
    public frame_bound(i: number): Frame_boundContext | null;
    public frame_bound(i?: number): Frame_boundContext[] | Frame_boundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Frame_boundContext);
        }

        return this.getRuleContext(i, Frame_boundContext);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUDE, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BETWEEN, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public KW_TIES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIES, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_OTHERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OTHERS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_frame_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_frame_clause) {
             listener.enterOpt_frame_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_frame_clause) {
             listener.exitOpt_frame_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_frame_clause) {
            return visitor.visitOpt_frame_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Frame_boundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRECEDING, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOLLOWING, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNBOUNDED, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_frame_bound;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFrame_bound) {
             listener.enterFrame_bound(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFrame_bound) {
             listener.exitFrame_bound(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrame_bound) {
            return visitor.visitFrame_bound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public explicit_row(): Explicit_rowContext | null {
        return this.getRuleContext(0, Explicit_rowContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_row;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRow) {
             listener.enterRow(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRow) {
             listener.exitRow(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRow) {
            return visitor.visitRow(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Explicit_rowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ROW, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_explicit_row;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExplicit_row) {
             listener.enterExplicit_row(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExplicit_row) {
             listener.exitExplicit_row(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplicit_row) {
            return visitor.visitExplicit_row(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sub_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANY, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SOME, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sub_type;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSub_type) {
             listener.enterSub_type(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSub_type) {
             listener.exitSub_type(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSub_type) {
            return visitor.visitSub_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class All_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Operator(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Operator, 0);
    }
    public mathop(): MathopContext | null {
        return this.getRuleContext(0, MathopContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_all_op;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAll_op) {
             listener.enterAll_op(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAll_op) {
             listener.exitAll_op(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAll_op) {
            return visitor.visitAll_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MathopContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PERCENT, 0);
    }
    public CARET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CARET, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.LT, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.GT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public LESS_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.LESS_EQUALS, 0);
    }
    public GREATER_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.GREATER_EQUALS, 0);
    }
    public NOT_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.NOT_EQUALS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_mathop;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterMathop) {
             listener.enterMathop(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitMathop) {
             listener.exitMathop(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMathop) {
            return visitor.visitMathop(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Qual_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Operator(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Operator, 0);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_qual_op;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQual_op) {
             listener.enterQual_op(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQual_op) {
             listener.exitQual_op(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQual_op) {
            return visitor.visitQual_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Qual_all_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public all_op(): All_opContext | null {
        return this.getRuleContext(0, All_opContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_qual_all_op;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQual_all_op) {
             listener.enterQual_all_op(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQual_all_op) {
             listener.exitQual_all_op(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQual_all_op) {
            return visitor.visitQual_all_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Subquery_OpContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qual_all_op(): Qual_all_opContext | null {
        return this.getRuleContext(0, Qual_all_opContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIKE, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ILIKE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_subquery_Op;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSubquery_Op) {
             listener.enterSubquery_Op(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSubquery_Op) {
             listener.exitSubquery_Op(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubquery_Op) {
            return visitor.visitSubquery_Op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_expr_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExpr_list) {
             listener.enterExpr_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExpr_list) {
             listener.exitExpr_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpr_list) {
            return visitor.visitExpr_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_expr_list_noparenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_expr_noparen(): Column_expr_noparenContext[];
    public column_expr_noparen(i: number): Column_expr_noparenContext | null;
    public column_expr_noparen(i?: number): Column_expr_noparenContext[] | Column_expr_noparenContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_expr_noparenContext);
        }

        return this.getRuleContext(i, Column_expr_noparenContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_column_expr_list_noparen;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumn_expr_list_noparen) {
             listener.enterColumn_expr_list_noparen(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumn_expr_list_noparen) {
             listener.exitColumn_expr_list_noparen(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumn_expr_list_noparen) {
            return visitor.visitColumn_expr_list_noparen(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_expr(): Column_exprContext[];
    public column_expr(i: number): Column_exprContext | null;
    public column_expr(i?: number): Column_exprContext[] | Column_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_exprContext);
        }

        return this.getRuleContext(i, Column_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_column_expr_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumn_expr_list) {
             listener.enterColumn_expr_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumn_expr_list) {
             listener.exitColumn_expr_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumn_expr_list) {
            return visitor.visitColumn_expr_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_column_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumn_expr) {
             listener.enterColumn_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumn_expr) {
             listener.exitColumn_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumn_expr) {
            return visitor.visitColumn_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_expr_noparenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_column_expr_noparen;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumn_expr_noparen) {
             listener.enterColumn_expr_noparen(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumn_expr_noparen) {
             listener.exitColumn_expr_noparen(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumn_expr_noparen) {
            return visitor.visitColumn_expr_noparen(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_arg_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_arg_expr(): Func_arg_exprContext[];
    public func_arg_expr(i: number): Func_arg_exprContext | null;
    public func_arg_expr(i?: number): Func_arg_exprContext[] | Func_arg_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Func_arg_exprContext);
        }

        return this.getRuleContext(i, Func_arg_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_arg_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_arg_list) {
             listener.enterFunc_arg_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_arg_list) {
             listener.exitFunc_arg_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_arg_list) {
            return visitor.visitFunc_arg_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_arg_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public COLON_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COLON_EQUALS, 0);
    }
    public EQUALS_GREATER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUALS_GREATER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_arg_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_arg_expr) {
             listener.enterFunc_arg_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_arg_expr) {
             listener.exitFunc_arg_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_arg_expr) {
            return visitor.visitFunc_arg_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Array_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_BRACKET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_BRACKET, 0)!;
    }
    public CLOSE_BRACKET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_BRACKET, 0)!;
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public array_expr_list(): Array_expr_listContext | null {
        return this.getRuleContext(0, Array_expr_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_array_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterArray_expr) {
             listener.enterArray_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitArray_expr) {
             listener.exitArray_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArray_expr) {
            return visitor.visitArray_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Array_expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public array_expr(): Array_exprContext[];
    public array_expr(i: number): Array_exprContext | null;
    public array_expr(i?: number): Array_exprContext[] | Array_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Array_exprContext);
        }

        return this.getRuleContext(i, Array_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_array_expr_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterArray_expr_list) {
             listener.enterArray_expr_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitArray_expr_list) {
             listener.exitArray_expr_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArray_expr_list) {
            return visitor.visitArray_expr_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Extract_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public extract_arg(): Extract_argContext {
        return this.getRuleContext(0, Extract_argContext)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_extract_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExtract_list) {
             listener.enterExtract_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExtract_list) {
             listener.exitExtract_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExtract_list) {
            return visitor.visitExtract_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Extract_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_YEAR, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MONTH, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DAY, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HOUR, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINUTE, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECOND, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_extract_arg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExtract_arg) {
             listener.enterExtract_arg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExtract_arg) {
             listener.exitExtract_arg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExtract_arg) {
            return visitor.visitExtract_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Unicode_normal_formContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NFC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFC, 0);
    }
    public KW_NFD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFD, 0);
    }
    public KW_NFKC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFKC, 0);
    }
    public KW_NFKD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFKD, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_unicode_normal_form;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterUnicode_normal_form) {
             listener.enterUnicode_normal_form(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitUnicode_normal_form) {
             listener.exitUnicode_normal_form(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnicode_normal_form) {
            return visitor.visitUnicode_normal_form(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Overlay_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_PLACING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PLACING, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_overlay_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOverlay_list) {
             listener.enterOverlay_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOverlay_list) {
             listener.exitOverlay_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOverlay_list) {
            return visitor.visitOverlay_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Substr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_SIMILAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SIMILAR, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ESCAPE, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_substr_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSubstr_list) {
             listener.enterSubstr_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSubstr_list) {
             listener.exitSubstr_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubstr_list) {
            return visitor.visitSubstr_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Trim_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_trim_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTrim_list) {
             listener.enterTrim_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTrim_list) {
             listener.exitTrim_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTrim_list) {
            return visitor.visitTrim_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class When_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_THEN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_when_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWhen_clause) {
             listener.enterWhen_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWhen_clause) {
             listener.exitWhen_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhen_clause) {
            return visitor.visitWhen_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Indirection_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.DOT, 0);
    }
    public collabel(): CollabelContext | null {
        return this.getRuleContext(0, CollabelContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public OPEN_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_BRACKET, 0);
    }
    public CLOSE_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_BRACKET, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COLON, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_indirection_el;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndirection_el) {
             listener.enterIndirection_el(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndirection_el) {
             listener.exitIndirection_el(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndirection_el) {
            return visitor.visitIndirection_el(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndirectionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indirection_el(): Indirection_elContext[];
    public indirection_el(i: number): Indirection_elContext | null;
    public indirection_el(i?: number): Indirection_elContext[] | Indirection_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Indirection_elContext);
        }

        return this.getRuleContext(i, Indirection_elContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_indirection;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndirection) {
             listener.enterIndirection(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndirection) {
             listener.exitIndirection(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndirection) {
            return visitor.visitIndirection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_indirectionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indirection_el(): Indirection_elContext[];
    public indirection_el(i: number): Indirection_elContext | null;
    public indirection_el(i?: number): Indirection_elContext[] | Indirection_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Indirection_elContext);
        }

        return this.getRuleContext(i, Indirection_elContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_indirection;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_indirection) {
             listener.enterOpt_indirection(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_indirection) {
             listener.exitOpt_indirection(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_indirection) {
            return visitor.visitOpt_indirection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Target_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public target_el(): Target_elContext[];
    public target_el(i: number): Target_elContext | null;
    public target_el(i?: number): Target_elContext[] | Target_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Target_elContext);
        }

        return this.getRuleContext(i, Target_elContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_target_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTarget_list) {
             listener.enterTarget_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTarget_list) {
             listener.exitTarget_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTarget_list) {
            return visitor.visitTarget_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Target_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_target_el;
    }
    public override copyFrom(ctx: Target_elContext): void {
        super.copyFrom(ctx);
    }
}
export class Target_labelContext extends Target_elContext {
    public constructor(ctx: Target_elContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public column_expr_noparen(): Column_expr_noparenContext {
        return this.getRuleContext(0, Column_expr_noparenContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public collabel(): CollabelContext | null {
        return this.getRuleContext(0, CollabelContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTarget_label) {
             listener.enterTarget_label(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTarget_label) {
             listener.exitTarget_label(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTarget_label) {
            return visitor.visitTarget_label(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class Target_starContext extends Target_elContext {
    public constructor(ctx: Target_elContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STAR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.STAR, 0)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTarget_star) {
             listener.enterTarget_star(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTarget_star) {
             listener.exitTarget_star(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTarget_star) {
            return visitor.visitTarget_star(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Qualified_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualified_name(): Qualified_nameContext[];
    public qualified_name(i: number): Qualified_nameContext | null;
    public qualified_name(i?: number): Qualified_nameContext[] | Qualified_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Qualified_nameContext);
        }

        return this.getRuleContext(i, Qualified_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_qualified_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQualified_name_list) {
             listener.enterQualified_name_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQualified_name_list) {
             listener.exitQualified_name_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualified_name_list) {
            return visitor.visitQualified_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_name(): Table_nameContext[];
    public table_name(i: number): Table_nameContext | null;
    public table_name(i?: number): Table_nameContext[] | Table_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_nameContext);
        }

        return this.getRuleContext(i, Table_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_table_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTable_name_list) {
             listener.enterTable_name_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTable_name_list) {
             listener.exitTable_name_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTable_name_list) {
            return visitor.visitTable_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Schema_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public schema_name(): Schema_nameContext[];
    public schema_name(i: number): Schema_nameContext | null;
    public schema_name(i?: number): Schema_nameContext[] | Schema_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Schema_nameContext);
        }

        return this.getRuleContext(i, Schema_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_schema_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSchema_name_list) {
             listener.enterSchema_name_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSchema_name_list) {
             listener.exitSchema_name_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSchema_name_list) {
            return visitor.visitSchema_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Database_nameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public database_name(): Database_nameContext[];
    public database_name(i: number): Database_nameContext | null;
    public database_name(i?: number): Database_nameContext[] | Database_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Database_nameContext);
        }

        return this.getRuleContext(i, Database_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_database_nameList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDatabase_nameList) {
             listener.enterDatabase_nameList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDatabase_nameList) {
             listener.exitDatabase_nameList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDatabase_nameList) {
            return visitor.visitDatabase_nameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Procedure_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public procedure_name(): Procedure_nameContext[];
    public procedure_name(i: number): Procedure_nameContext | null;
    public procedure_name(i?: number): Procedure_nameContext[] | Procedure_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Procedure_nameContext);
        }

        return this.getRuleContext(i, Procedure_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedure_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedure_name_list) {
             listener.enterProcedure_name_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedure_name_list) {
             listener.exitProcedure_name_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedure_name_list) {
            return visitor.visitProcedure_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Tablespace_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tablespace_name_create;
    }
    public override copyFrom(ctx: Tablespace_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class TablespaceNameCreateContext extends Tablespace_name_createContext {
    public constructor(ctx: Tablespace_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTablespaceNameCreate) {
             listener.enterTablespaceNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTablespaceNameCreate) {
             listener.exitTablespaceNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablespaceNameCreate) {
            return visitor.visitTablespaceNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Tablespace_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tablespace_name;
    }
    public override copyFrom(ctx: Tablespace_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class TablespaceNameContext extends Tablespace_nameContext {
    public constructor(ctx: Tablespace_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTablespaceName) {
             listener.enterTablespaceName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTablespaceName) {
             listener.exitTablespaceName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablespaceName) {
            return visitor.visitTablespaceName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_table_name_create;
    }
    public override copyFrom(ctx: Table_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class TableNameCreateContext extends Table_name_createContext {
    public constructor(ctx: Table_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableNameCreate) {
             listener.enterTableNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableNameCreate) {
             listener.exitTableNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableNameCreate) {
            return visitor.visitTableNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_table_name;
    }
    public override copyFrom(ctx: Table_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class TableNameContext extends Table_nameContext {
    public constructor(ctx: Table_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class View_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_view_name_create;
    }
    public override copyFrom(ctx: View_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class ViewNameCreateContext extends View_name_createContext {
    public constructor(ctx: View_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterViewNameCreate) {
             listener.enterViewNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitViewNameCreate) {
             listener.exitViewNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewNameCreate) {
            return visitor.visitViewNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class View_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_view_name;
    }
    public override copyFrom(ctx: View_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class ViewNameContext extends View_nameContext {
    public constructor(ctx: View_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterViewName) {
             listener.enterViewName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitViewName) {
             listener.exitViewName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewName) {
            return visitor.visitViewName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Qualified_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_qualified_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQualified_name) {
             listener.enterQualified_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQualified_name) {
             listener.exitQualified_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualified_name) {
            return visitor.visitQualified_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Tablespace_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tablespace_name(): Tablespace_nameContext[];
    public tablespace_name(i: number): Tablespace_nameContext | null;
    public tablespace_name(i?: number): Tablespace_nameContext[] | Tablespace_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Tablespace_nameContext);
        }

        return this.getRuleContext(i, Tablespace_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tablespace_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTablespace_name_list) {
             listener.enterTablespace_name_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTablespace_name_list) {
             listener.exitTablespace_name_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablespace_name_list) {
            return visitor.visitTablespace_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterName_list) {
             listener.enterName_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitName_list) {
             listener.exitName_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitName_list) {
            return visitor.visitName_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Database_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_database_name_create;
    }
    public override copyFrom(ctx: Database_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class DatabaseNameCreateContext extends Database_name_createContext {
    public constructor(ctx: Database_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDatabaseNameCreate) {
             listener.enterDatabaseNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDatabaseNameCreate) {
             listener.exitDatabaseNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseNameCreate) {
            return visitor.visitDatabaseNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Database_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_database_name;
    }
    public override copyFrom(ctx: Database_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class DatabaseNameContext extends Database_nameContext {
    public constructor(ctx: Database_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDatabaseName) {
             listener.enterDatabaseName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDatabaseName) {
             listener.exitDatabaseName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseName) {
            return visitor.visitDatabaseName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Schema_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_schema_name;
    }
    public override copyFrom(ctx: Schema_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class SchemaNameContext extends Schema_nameContext {
    public constructor(ctx: Schema_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSchemaName) {
             listener.enterSchemaName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSchemaName) {
             listener.exitSchemaName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaName) {
            return visitor.visitSchemaName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Routine_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_routine_name_create;
    }
    public override copyFrom(ctx: Routine_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class RoutineNameCreateContext extends Routine_name_createContext {
    public constructor(ctx: Routine_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoutineNameCreate) {
             listener.enterRoutineNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoutineNameCreate) {
             listener.exitRoutineNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutineNameCreate) {
            return visitor.visitRoutineNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Routine_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_routine_name;
    }
    public override copyFrom(ctx: Routine_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class RoutineNameContext extends Routine_nameContext {
    public constructor(ctx: Routine_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoutineName) {
             listener.enterRoutineName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoutineName) {
             listener.exitRoutineName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutineName) {
            return visitor.visitRoutineName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Procedure_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedure_name;
    }
    public override copyFrom(ctx: Procedure_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class ProcedureNameContext extends Procedure_nameContext {
    public constructor(ctx: Procedure_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedureName) {
             listener.enterProcedureName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedureName) {
             listener.exitProcedureName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedureName) {
            return visitor.visitProcedureName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Procedure_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedure_name_create;
    }
    public override copyFrom(ctx: Procedure_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class ProcedureNameCreateContext extends Procedure_name_createContext {
    public constructor(ctx: Procedure_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedureNameCreate) {
             listener.enterProcedureNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedureNameCreate) {
             listener.exitProcedureNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedureNameCreate) {
            return visitor.visitProcedureNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_column_name;
    }
    public override copyFrom(ctx: Column_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnNameMatchContext extends Column_nameContext {
    public constructor(ctx: Column_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnNameMatch) {
             listener.enterColumnNameMatch(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnNameMatch) {
             listener.exitColumnNameMatch(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameMatch) {
            return visitor.visitColumnNameMatch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnNameContext extends Column_nameContext {
    public constructor(ctx: Column_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public opt_indirection(): Opt_indirectionContext {
        return this.getRuleContext(0, Opt_indirectionContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnName) {
             listener.enterColumnName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnName) {
             listener.exitColumnName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnName) {
            return visitor.visitColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_column_name_create;
    }
    public override copyFrom(ctx: Column_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnNameCreateContext extends Column_name_createContext {
    public constructor(ctx: Column_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnNameCreate) {
             listener.enterColumnNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnNameCreate) {
             listener.exitColumnNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameCreate) {
            return visitor.visitColumnNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Function_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_function_name_create;
    }
    public override copyFrom(ctx: Function_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class FunctionNameCreateContext extends Function_name_createContext {
    public constructor(ctx: Function_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunctionNameCreate) {
             listener.enterFunctionNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunctionNameCreate) {
             listener.exitFunctionNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameCreate) {
            return visitor.visitFunctionNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Function_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_function_name;
    }
    public override copyFrom(ctx: Function_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class FunctionNameContext extends Function_nameContext {
    public constructor(ctx: Function_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunctionName) {
             listener.enterFunctionName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunctionName) {
             listener.exitFunctionName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionName) {
            return visitor.visitFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Usual_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_usual_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterUsual_name) {
             listener.enterUsual_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitUsual_name) {
             listener.exitUsual_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUsual_name) {
            return visitor.visitUsual_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anysconst(): AnysconstContext[];
    public anysconst(i: number): AnysconstContext | null;
    public anysconst(i?: number): AnysconstContext[] | AnysconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AnysconstContext);
        }

        return this.getRuleContext(i, AnysconstContext);
    }
    public KW_UESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UESCAPE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sconst;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSconst) {
             listener.enterSconst(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSconst) {
             listener.exitSconst(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSconst) {
            return visitor.visitSconst(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnysconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public StringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.StringConstant, 0);
    }
    public UnicodeEscapeStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.UnicodeEscapeStringConstant, 0);
    }
    public BeginDollarStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.BeginDollarStringConstant, 0);
    }
    public EndDollarStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EndDollarStringConstant, 0);
    }
    public DollarText(): antlr.TerminalNode[];
    public DollarText(i: number): antlr.TerminalNode | null;
    public DollarText(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.DollarText);
    	} else {
    		return this.getToken(PostgreSqlParser.DollarText, i);
    	}
    }
    public EscapeStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EscapeStringConstant, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_anysconst;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnysconst) {
             listener.enterAnysconst(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnysconst) {
             listener.exitAnysconst(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnysconst) {
            return visitor.visitAnysconst(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignediconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Integral(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.Integral, 0)!;
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_signediconst;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSignediconst) {
             listener.enterSignediconst(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSignediconst) {
             listener.exitSignediconst(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSignediconst) {
            return visitor.visitSignediconst(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RolespecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonreservedword(): NonreservedwordContext | null {
        return this.getRuleContext(0, NonreservedwordContext);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_USER, 0);
    }
    public KW_CURRENT_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_ROLE, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION_USER, 0);
    }
    public KW_PUBLIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLIC, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rolespec;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRolespec) {
             listener.enterRolespec(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRolespec) {
             listener.exitRolespec(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRolespec) {
            return visitor.visitRolespec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Role_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rolespec(): RolespecContext[];
    public rolespec(i: number): RolespecContext | null;
    public rolespec(i?: number): RolespecContext[] | RolespecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RolespecContext);
        }

        return this.getRuleContext(i, RolespecContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_role_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRole_list) {
             listener.enterRole_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRole_list) {
             listener.exitRole_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRole_list) {
            return visitor.visitRole_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColidContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public unreserved_keyword(): Unreserved_keywordContext | null {
        return this.getRuleContext(0, Unreserved_keywordContext);
    }
    public col_name_keyword(): Col_name_keywordContext | null {
        return this.getRuleContext(0, Col_name_keywordContext);
    }
    public plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | null {
        return this.getRuleContext(0, Plsql_unreserved_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_colid;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColid) {
             listener.enterColid(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColid) {
             listener.exitColid(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColid) {
            return visitor.visitColid(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_function_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public unreserved_keyword(): Unreserved_keywordContext | null {
        return this.getRuleContext(0, Unreserved_keywordContext);
    }
    public plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | null {
        return this.getRuleContext(0, Plsql_unreserved_keywordContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_type_function_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterType_function_name) {
             listener.enterType_function_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitType_function_name) {
             listener.exitType_function_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitType_function_name) {
            return visitor.visitType_function_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonreservedwordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public unreserved_keyword(): Unreserved_keywordContext | null {
        return this.getRuleContext(0, Unreserved_keywordContext);
    }
    public col_name_keyword(): Col_name_keywordContext | null {
        return this.getRuleContext(0, Col_name_keywordContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_nonreservedword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNonreservedword) {
             listener.enterNonreservedword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNonreservedword) {
             listener.exitNonreservedword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNonreservedword) {
            return visitor.visitNonreservedword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollabelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonreservedword(): NonreservedwordContext | null {
        return this.getRuleContext(0, NonreservedwordContext);
    }
    public plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | null {
        return this.getRuleContext(0, Plsql_unreserved_keywordContext);
    }
    public reserved_keyword(): Reserved_keywordContext | null {
        return this.getRuleContext(0, Reserved_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_collabel;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCollabel) {
             listener.enterCollabel(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCollabel) {
             listener.exitCollabel(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCollabel) {
            return visitor.visitCollabel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Identifier(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Identifier, 0);
    }
    public KW_UESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UESCAPE, 0);
    }
    public anysconst(): AnysconstContext | null {
        return this.getRuleContext(0, AnysconstContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public QuotedIdentifier(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.QuotedIdentifier, 0);
    }
    public UnicodeQuotedIdentifier(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.UnicodeQuotedIdentifier, 0);
    }
    public PLSQLVARIABLENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLSQLVARIABLENAME, 0);
    }
    public PLSQLIDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLSQLIDENTIFIER, 0);
    }
    public plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | null {
        return this.getRuleContext(0, Plsql_unreserved_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_identifier;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIdentifier) {
             listener.enterIdentifier(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIdentifier) {
             listener.exitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Unreserved_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ABORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABORT, 0);
    }
    public KW_ABSOLUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABSOLUTE, 0);
    }
    public KW_ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACCESS, 0);
    }
    public KW_ACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACTION, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADMIN, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AFTER, 0);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public KW_ALSO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALSO, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALWAYS, 0);
    }
    public KW_ASSERTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASSERTION, 0);
    }
    public KW_ASSIGNMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASSIGNMENT, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AT, 0);
    }
    public KW_ATTACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ATTACH, 0);
    }
    public KW_ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ATTRIBUTE, 0);
    }
    public KW_BACKWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BACKWARD, 0);
    }
    public KW_BEFORE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BEFORE, 0);
    }
    public KW_BEGIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BEGIN, 0);
    }
    public KW_BUFFER_USAGE_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BUFFER_USAGE_LIMIT, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CACHE, 0);
    }
    public KW_CALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CALL, 0);
    }
    public KW_CALLED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CALLED, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADE, 0);
    }
    public KW_CASCADED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADED, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CATALOG, 0);
    }
    public KW_CHAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAIN, 0);
    }
    public KW_CHARACTERISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHARACTERISTICS, 0);
    }
    public KW_CHECKPOINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHECKPOINT, 0);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_CLOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLOSE, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLUSTER, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMNS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMENT, 0);
    }
    public KW_COMMENTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMENTS, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMIT, 0);
    }
    public KW_COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMITTED, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public KW_CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFLICT, 0);
    }
    public KW_CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONNECTION, 0);
    }
    public KW_CONSTRAINTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINTS, 0);
    }
    public KW_CONTENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTENT, 0);
    }
    public KW_CONTINUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTINUE, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_COPY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COPY, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COST, 0);
    }
    public KW_CSV(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CSV, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CUBE, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_CURSOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURSOR, 0);
    }
    public KW_CYCLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CYCLE, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DAY, 0);
    }
    public KW_DEALLOCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEALLOCATE, 0);
    }
    public KW_DECLARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DECLARE, 0);
    }
    public KW_DEFAULTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULTS, 0);
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRED, 0);
    }
    public KW_DEFINER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFINER, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_DELIMITER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELIMITER, 0);
    }
    public KW_DELIMITERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELIMITERS, 0);
    }
    public KW_DEPENDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEPENDS, 0);
    }
    public KW_DETACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DETACH, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISABLE, 0);
    }
    public KW_DISCARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISCARD, 0);
    }
    public KW_DOCUMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOCUMENT, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOUBLE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_EACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EACH, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENABLE, 0);
    }
    public KW_ENCODING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENCODING, 0);
    }
    public KW_ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENCRYPTED, 0);
    }
    public KW_ENUM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENUM, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ESCAPE, 0);
    }
    public KW_EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUDE, 0);
    }
    public KW_EXCLUDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUDING, 0);
    }
    public KW_EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUSIVE, 0);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXPLAIN, 0);
    }
    public KW_EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXPRESSION, 0);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTERNAL, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FILTER, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOLLOWING, 0);
    }
    public KW_FORCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORCE, 0);
    }
    public KW_FORWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORWARD, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GENERATED, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GLOBAL, 0);
    }
    public KW_GRANTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GRANTED, 0);
    }
    public KW_GROUPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUPS, 0);
    }
    public KW_HANDLER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HANDLER, 0);
    }
    public KW_HEADER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HEADER, 0);
    }
    public KW_HOLD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HOLD, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HOUR, 0);
    }
    public KW_IDENTITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IDENTITY, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IF, 0);
    }
    public KW_IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMEDIATE, 0);
    }
    public KW_IMMUTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMUTABLE, 0);
    }
    public KW_IMPLICIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMPLICIT, 0);
    }
    public KW_IMPORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMPORT, 0);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCLUDE, 0);
    }
    public KW_INCLUDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCLUDING, 0);
    }
    public KW_INCREMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCREMENT, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEXES, 0);
    }
    public KW_INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERIT, 0);
    }
    public KW_INHERITS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERITS, 0);
    }
    public KW_INLINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INLINE, 0);
    }
    public KW_INPUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INPUT, 0);
    }
    public KW_INSENSITIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSENSITIVE, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public KW_INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSTEAD, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INVOKER, 0);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ISOLATION, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_KEY, 0);
    }
    public KW_LABEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LABEL, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_LARGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LARGE, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LAST, 0);
    }
    public KW_LEAKPROOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEAKPROOF, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEVEL, 0);
    }
    public KW_LISTEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LISTEN, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOAD, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCATION, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCK, 0);
    }
    public KW_LOCKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCKED, 0);
    }
    public KW_LOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOGGED, 0);
    }
    public KW_MAPPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAPPING, 0);
    }
    public KW_MATCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATCH, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_MAXVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAXVALUE, 0);
    }
    public KW_METHOD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_METHOD, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINUTE, 0);
    }
    public KW_MINVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINVALUE, 0);
    }
    public KW_MODE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MODE, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MONTH, 0);
    }
    public KW_MOVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MOVE, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NAME, 0);
    }
    public KW_NAMES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NAMES, 0);
    }
    public KW_NEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEW, 0);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public KW_NFC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFC, 0);
    }
    public KW_NFD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFD, 0);
    }
    public KW_NFKC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFKC, 0);
    }
    public KW_NFKD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFKD, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_NORMALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NORMALIZED, 0);
    }
    public KW_NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTHING, 0);
    }
    public KW_NOTIFY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTIFY, 0);
    }
    public KW_NOWAIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOWAIT, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLS, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OBJECT, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public KW_OFF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OFF, 0);
    }
    public KW_OIDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OIDS, 0);
    }
    public KW_OLD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OLD, 0);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTIONS, 0);
    }
    public KW_ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDINALITY, 0);
    }
    public KW_OTHERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OTHERS, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVER, 0);
    }
    public KW_OVERRIDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERRIDING, 0);
    }
    public KW_OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNED, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public KW_PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARALLEL, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_PARTIAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTIAL, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0);
    }
    public KW_PASSING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PASSING, 0);
    }
    public KW_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PASSWORD, 0);
    }
    public KW_PLANS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PLANS, 0);
    }
    public KW_POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRECEDING, 0);
    }
    public KW_PREPARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PREPARE, 0);
    }
    public KW_PREPARED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PREPARED, 0);
    }
    public KW_PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRESERVE, 0);
    }
    public KW_PRIOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIOR, 0);
    }
    public KW_PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIVILEGES, 0);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public KW_PROCEDURES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURES, 0);
    }
    public KW_PROGRAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROGRAM, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public KW_QUOTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_QUOTE, 0);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RANGE, 0);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_READ, 0);
    }
    public KW_REASSIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REASSIGN, 0);
    }
    public KW_RECHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RECHECK, 0);
    }
    public KW_RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RECURSIVE, 0);
    }
    public KW_REF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REF, 0);
    }
    public KW_REFERENCING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCING, 0);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFRESH, 0);
    }
    public KW_REINDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REINDEX, 0);
    }
    public KW_RELATIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELATIVE, 0);
    }
    public KW_RELEASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELEASE, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPEATABLE, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLACE, 0);
    }
    public KW_REPLICA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLICA, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_RESTART(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTART, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public KW_RETURNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RETURNS, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REVOKE, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLBACK, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLUP, 0);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public KW_ROUTINES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINES, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public KW_SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SAVEPOINT, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMAS, 0);
    }
    public KW_SCROLL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCROLL, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECOND, 0);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCES, 0);
    }
    public KW_SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERIALIZABLE, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SETS, 0);
    }
    public KW_SHARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SHARE, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SHOW, 0);
    }
    public KW_SIMPLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SIMPLE, 0);
    }
    public KW_SKIP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SKIP, 0);
    }
    public KW_SKIP_LOCKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SKIP_LOCKED, 0);
    }
    public KW_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SNAPSHOT, 0);
    }
    public KW_SQL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SQL, 0);
    }
    public KW_STABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STABLE, 0);
    }
    public KW_STANDALONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STANDALONE, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_START, 0);
    }
    public KW_STATEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATEMENT, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_STDIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STDIN, 0);
    }
    public KW_STDOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STDOUT, 0);
    }
    public KW_STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORAGE, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORED, 0);
    }
    public KW_STRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRICT, 0);
    }
    public KW_STRIP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRIP, 0);
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0);
    }
    public KW_SUPPORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUPPORT, 0);
    }
    public KW_SYSID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSID, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSTEM, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLES, 0);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public KW_TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMP, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_TIES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIES, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUNCATE, 0);
    }
    public KW_TRUSTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUSTED, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_TYPES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPES, 0);
    }
    public KW_UESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UESCAPE, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNBOUNDED, 0);
    }
    public KW_UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNCOMMITTED, 0);
    }
    public KW_UNENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNENCRYPTED, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNKNOWN, 0);
    }
    public KW_UNLISTEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLISTEN, 0);
    }
    public KW_UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLOGGED, 0);
    }
    public KW_UNTIL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNTIL, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_VACUUM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VACUUM, 0);
    }
    public KW_VALID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALID, 0);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATE, 0);
    }
    public KW_VALIDATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATOR, 0);
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0);
    }
    public KW_VARYING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARYING, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VERSION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEWS, 0);
    }
    public KW_VOLATILE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VOLATILE, 0);
    }
    public KW_WHITESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHITESPACE, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHIN, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WORK, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_WRITE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRITE, 0);
    }
    public KW_XML(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XML, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_YEAR, 0);
    }
    public KW_YES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_YES, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_unreserved_keyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterUnreserved_keyword) {
             listener.enterUnreserved_keyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitUnreserved_keyword) {
             listener.exitUnreserved_keyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnreserved_keyword) {
            return visitor.visitUnreserved_keyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Col_name_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BETWEEN, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BIGINT, 0);
    }
    public bit(): BitContext | null {
        return this.getRuleContext(0, BitContext);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BOOLEAN, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAR, 0);
    }
    public character(): CharacterContext | null {
        return this.getRuleContext(0, CharacterContext);
    }
    public KW_COALESCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COALESCE, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEC, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DECIMAL, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXISTS, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTRACT, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FLOAT, 0);
    }
    public KW_GREATEST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GREATEST, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUPING, 0);
    }
    public KW_INOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INOUT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTEGER, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERVAL, 0);
    }
    public KW_LEAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEAST, 0);
    }
    public KW_NATIONAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NATIONAL, 0);
    }
    public KW_NCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NCHAR, 0);
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NONE, 0);
    }
    public KW_NORMALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NORMALIZE, 0);
    }
    public KW_NULLIF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLIF, 0);
    }
    public numeric(): NumericContext | null {
        return this.getRuleContext(0, NumericContext);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OUT, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERLAY, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POSITION, 0);
    }
    public KW_PRECISION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRECISION, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REAL, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_SETOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SETOF, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SMALLINT, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSTRING, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIME, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TREAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TREAT, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIM, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUES, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARCHAR, 0);
    }
    public KW_XMLATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLATTRIBUTES, 0);
    }
    public KW_XMLCONCAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLCONCAT, 0);
    }
    public KW_XMLELEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLELEMENT, 0);
    }
    public KW_XMLEXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLEXISTS, 0);
    }
    public KW_XMLFOREST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLFOREST, 0);
    }
    public KW_XMLNAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLNAMESPACES, 0);
    }
    public KW_XMLPARSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLPARSE, 0);
    }
    public KW_XMLPI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLPI, 0);
    }
    public KW_XMLROOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLROOT, 0);
    }
    public KW_XMLSERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLSERIALIZE, 0);
    }
    public KW_XMLTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLTABLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_col_name_keyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCol_name_keyword) {
             listener.enterCol_name_keyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCol_name_keyword) {
             listener.exitCol_name_keyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCol_name_keyword) {
            return visitor.visitCol_name_keyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_func_name_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BINARY, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CROSS, 0);
    }
    public KW_CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_SCHEMA, 0);
    }
    public KW_FREEZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FREEZE, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FULL, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ILIKE, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INNER, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IS, 0);
    }
    public KW_ISNULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ISNULL, 0);
    }
    public KW_JOIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_JOIN, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEFT, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIKE, 0);
    }
    public KW_NATURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NATURAL, 0);
    }
    public KW_NOTNULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTNULL, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OUTER, 0);
    }
    public KW_OVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERLAPS, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RIGHT, 0);
    }
    public KW_SIMILAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SIMILAR, 0);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESAMPLE, 0);
    }
    public KW_VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VERBOSE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_type_func_name_keyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterType_func_name_keyword) {
             listener.enterType_func_name_keyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitType_func_name_keyword) {
             listener.exitType_func_name_keyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitType_func_name_keyword) {
            return visitor.visitType_func_name_keyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Reserved_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_ANALYSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANALYSE, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANALYZE, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANY, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ARRAY, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASC, 0);
    }
    public KW_ASYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASYMMETRIC, 0);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BOTH, 0);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASE, 0);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CAST, 0);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0);
    }
    public KW_COLLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATE, 0);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMN, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0);
    }
    public KW_CURRENT_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_CATALOG, 0);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_ROLE, 0);
    }
    public KW_CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_TIME, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_USER, 0);
    }
    public KW_DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRABLE, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DESC, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DO, 0);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ELSE, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_END, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCEPT, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_FETCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FETCH, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GRANT, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public KW_HAVING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HAVING, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INITIALLY, 0);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERSECT, 0);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LATERAL, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEADING, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIMIT, 0);
    }
    public KW_LOCALTIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCALTIME, 0);
    }
    public KW_LOCALTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCALTIMESTAMP, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OFFSET, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OR, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDER, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PLACING, 0);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIMARY, 0);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCES, 0);
    }
    public KW_RETURNING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RETURNING, 0);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION_USER, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SOME, 0);
    }
    public KW_SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYMMETRIC, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public KW_THEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_THEN, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRAILING, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNION, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNIQUE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public KW_VARIADIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARIADIC, 0);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHERE, 0);
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WINDOW, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reserved_keyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReserved_keyword) {
             listener.enterReserved_keyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReserved_keyword) {
             listener.exitReserved_keyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReserved_keyword) {
            return visitor.visitReserved_keyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Comp_optionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Operator(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.Operator, 0)!;
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_DUMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DUMP, 0);
    }
    public KW_PRINT_STRICT_PARAMS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRINT_STRICT_PARAMS, 0);
    }
    public option_value(): Option_valueContext | null {
        return this.getRuleContext(0, Option_valueContext);
    }
    public KW_VARIABLE_CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARIABLE_CONFLICT, 0);
    }
    public KW_ERROR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ERROR, 0);
    }
    public KW_USE_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USE_VARIABLE, 0);
    }
    public KW_USE_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USE_COLUMN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_comp_option;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterComp_option) {
             listener.enterComp_option(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitComp_option) {
             listener.exitComp_option(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComp_option) {
            return visitor.visitComp_option(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Option_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public reserved_keyword(): Reserved_keywordContext | null {
        return this.getRuleContext(0, Reserved_keywordContext);
    }
    public plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | null {
        return this.getRuleContext(0, Plsql_unreserved_keywordContext);
    }
    public unreserved_keyword(): Unreserved_keywordContext | null {
        return this.getRuleContext(0, Unreserved_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_option_value;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOption_value) {
             listener.enterOption_value(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOption_value) {
             listener.exitOption_value(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOption_value) {
            return visitor.visitOption_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Pl_blockContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public decl_sect(): Decl_sectContext {
        return this.getRuleContext(0, Decl_sectContext)!;
    }
    public KW_BEGIN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BEGIN, 0)!;
    }
    public proc_sect(): Proc_sectContext {
        return this.getRuleContext(0, Proc_sectContext)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_END, 0)!;
    }
    public exception_sect(): Exception_sectContext | null {
        return this.getRuleContext(0, Exception_sectContext);
    }
    public any_identifier(): Any_identifierContext | null {
        return this.getRuleContext(0, Any_identifierContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_pl_block;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPl_block) {
             listener.enterPl_block(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPl_block) {
             listener.exitPl_block(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPl_block) {
            return visitor.visitPl_block(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Decl_sectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public label_decl(): Label_declContext | null {
        return this.getRuleContext(0, Label_declContext);
    }
    public KW_DECLARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DECLARE, 0);
    }
    public decl_stmts(): Decl_stmtsContext | null {
        return this.getRuleContext(0, Decl_stmtsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_decl_sect;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDecl_sect) {
             listener.enterDecl_sect(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDecl_sect) {
             listener.exitDecl_sect(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDecl_sect) {
            return visitor.visitDecl_sect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Decl_stmtsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public decl_statement(): Decl_statementContext[];
    public decl_statement(i: number): Decl_statementContext | null;
    public decl_statement(i?: number): Decl_statementContext[] | Decl_statementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Decl_statementContext);
        }

        return this.getRuleContext(i, Decl_statementContext);
    }
    public KW_DECLARE(): antlr.TerminalNode[];
    public KW_DECLARE(i: number): antlr.TerminalNode | null;
    public KW_DECLARE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_DECLARE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_DECLARE, i);
    	}
    }
    public label_decl(): Label_declContext[];
    public label_decl(i: number): Label_declContext | null;
    public label_decl(i?: number): Label_declContext[] | Label_declContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Label_declContext);
        }

        return this.getRuleContext(i, Label_declContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_decl_stmts;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDecl_stmts) {
             listener.enterDecl_stmts(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDecl_stmts) {
             listener.exitDecl_stmts(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDecl_stmts) {
            return visitor.visitDecl_stmts(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Label_declContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LESS_LESS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.LESS_LESS, 0)!;
    }
    public any_identifier(): Any_identifierContext {
        return this.getRuleContext(0, Any_identifierContext)!;
    }
    public GREATER_GREATER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.GREATER_GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_label_decl;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLabel_decl) {
             listener.enterLabel_decl(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLabel_decl) {
             listener.exitLabel_decl(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLabel_decl) {
            return visitor.visitLabel_decl(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Decl_statementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_identifier(): Any_identifierContext {
        return this.getRuleContext(0, Any_identifierContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_ALIAS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALIAS, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public decl_aliasitem(): Decl_aliasitemContext | null {
        return this.getRuleContext(0, Decl_aliasitemContext);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_CURSOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURSOR, 0);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IS, 0);
    }
    public KW_CONSTANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTANT, 0);
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public decl_defkey(): Decl_defkeyContext | null {
        return this.getRuleContext(0, Decl_defkeyContext);
    }
    public sql_expression(): Sql_expressionContext | null {
        return this.getRuleContext(0, Sql_expressionContext);
    }
    public opt_scrollable(): Opt_scrollableContext | null {
        return this.getRuleContext(0, Opt_scrollableContext);
    }
    public decl_cursor_args(): Decl_cursor_argsContext | null {
        return this.getRuleContext(0, Decl_cursor_argsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_decl_statement;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDecl_statement) {
             listener.enterDecl_statement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDecl_statement) {
             listener.exitDecl_statement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDecl_statement) {
            return visitor.visitDecl_statement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_scrollableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SCROLL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SCROLL, 0)!;
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_scrollable;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_scrollable) {
             listener.enterOpt_scrollable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_scrollable) {
             listener.exitOpt_scrollable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_scrollable) {
            return visitor.visitOpt_scrollable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Decl_cursor_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public decl_cursor_arglist(): Decl_cursor_arglistContext {
        return this.getRuleContext(0, Decl_cursor_arglistContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_decl_cursor_args;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDecl_cursor_args) {
             listener.enterDecl_cursor_args(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDecl_cursor_args) {
             listener.exitDecl_cursor_args(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDecl_cursor_args) {
            return visitor.visitDecl_cursor_args(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Decl_cursor_arglistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public decl_cursor_arg(): Decl_cursor_argContext[];
    public decl_cursor_arg(i: number): Decl_cursor_argContext | null;
    public decl_cursor_arg(i?: number): Decl_cursor_argContext[] | Decl_cursor_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Decl_cursor_argContext);
        }

        return this.getRuleContext(i, Decl_cursor_argContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_decl_cursor_arglist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDecl_cursor_arglist) {
             listener.enterDecl_cursor_arglist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDecl_cursor_arglist) {
             listener.exitDecl_cursor_arglist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDecl_cursor_arglist) {
            return visitor.visitDecl_cursor_arglist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Decl_cursor_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_identifier(): Any_identifierContext {
        return this.getRuleContext(0, Any_identifierContext)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_decl_cursor_arg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDecl_cursor_arg) {
             listener.enterDecl_cursor_arg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDecl_cursor_arg) {
             listener.exitDecl_cursor_arg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDecl_cursor_arg) {
            return visitor.visitDecl_cursor_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Decl_aliasitemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PARAM, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_decl_aliasitem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDecl_aliasitem) {
             listener.enterDecl_aliasitem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDecl_aliasitem) {
             listener.exitDecl_aliasitem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDecl_aliasitem) {
            return visitor.visitDecl_aliasitem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Decl_defkeyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assign_operator(): Assign_operatorContext | null {
        return this.getRuleContext(0, Assign_operatorContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_decl_defkey;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDecl_defkey) {
             listener.enterDecl_defkey(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDecl_defkey) {
             listener.exitDecl_defkey(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDecl_defkey) {
            return visitor.visitDecl_defkey(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Assign_operatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public COLON_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COLON_EQUALS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_assign_operator;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAssign_operator) {
             listener.enterAssign_operator(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAssign_operator) {
             listener.exitAssign_operator(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAssign_operator) {
            return visitor.visitAssign_operator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Proc_sectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public proc_stmt(): Proc_stmtContext[];
    public proc_stmt(i: number): Proc_stmtContext | null;
    public proc_stmt(i?: number): Proc_stmtContext[] | Proc_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Proc_stmtContext);
        }

        return this.getRuleContext(i, Proc_stmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_proc_sect;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProc_sect) {
             listener.enterProc_sect(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProc_sect) {
             listener.exitProc_sect(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProc_sect) {
            return visitor.visitProc_sect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Proc_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pl_block(): Pl_blockContext | null {
        return this.getRuleContext(0, Pl_blockContext);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SEMI, 0);
    }
    public stmt_return(): Stmt_returnContext | null {
        return this.getRuleContext(0, Stmt_returnContext);
    }
    public stmt_raise(): Stmt_raiseContext | null {
        return this.getRuleContext(0, Stmt_raiseContext);
    }
    public stmt_assign(): Stmt_assignContext | null {
        return this.getRuleContext(0, Stmt_assignContext);
    }
    public stmt_if(): Stmt_ifContext | null {
        return this.getRuleContext(0, Stmt_ifContext);
    }
    public stmt_case(): Stmt_caseContext | null {
        return this.getRuleContext(0, Stmt_caseContext);
    }
    public stmt_loop_while_for(): Stmt_loop_while_forContext | null {
        return this.getRuleContext(0, Stmt_loop_while_forContext);
    }
    public stmt_foreach_a(): Stmt_foreach_aContext | null {
        return this.getRuleContext(0, Stmt_foreach_aContext);
    }
    public stmt_exit(): Stmt_exitContext | null {
        return this.getRuleContext(0, Stmt_exitContext);
    }
    public stmt_assert(): Stmt_assertContext | null {
        return this.getRuleContext(0, Stmt_assertContext);
    }
    public stmt_execsql(): Stmt_execsqlContext | null {
        return this.getRuleContext(0, Stmt_execsqlContext);
    }
    public stmt_dynexecute(): Stmt_dynexecuteContext | null {
        return this.getRuleContext(0, Stmt_dynexecuteContext);
    }
    public stmt_perform(): Stmt_performContext | null {
        return this.getRuleContext(0, Stmt_performContext);
    }
    public stmt_call(): Stmt_callContext | null {
        return this.getRuleContext(0, Stmt_callContext);
    }
    public stmt_getdiag(): Stmt_getdiagContext | null {
        return this.getRuleContext(0, Stmt_getdiagContext);
    }
    public stmt_open(): Stmt_openContext | null {
        return this.getRuleContext(0, Stmt_openContext);
    }
    public stmt_fetch(): Stmt_fetchContext | null {
        return this.getRuleContext(0, Stmt_fetchContext);
    }
    public stmt_move(): Stmt_moveContext | null {
        return this.getRuleContext(0, Stmt_moveContext);
    }
    public stmt_close(): Stmt_closeContext | null {
        return this.getRuleContext(0, Stmt_closeContext);
    }
    public stmt_null(): Stmt_nullContext | null {
        return this.getRuleContext(0, Stmt_nullContext);
    }
    public stmt_commit_or_rollback(): Stmt_commit_or_rollbackContext | null {
        return this.getRuleContext(0, Stmt_commit_or_rollbackContext);
    }
    public stmt_set(): Stmt_setContext | null {
        return this.getRuleContext(0, Stmt_setContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_proc_stmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProc_stmt) {
             listener.enterProc_stmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProc_stmt) {
             listener.exitProc_stmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProc_stmt) {
            return visitor.visitProc_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_performContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PERFORM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PERFORM, 0)!;
    }
    public sql_expression(): Sql_expressionContext {
        return this.getRuleContext(0, Sql_expressionContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_perform;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_perform) {
             listener.enterStmt_perform(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_perform) {
             listener.exitStmt_perform(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_perform) {
            return visitor.visitStmt_perform(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_callContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CALL, 0);
    }
    public any_identifier(): Any_identifierContext {
        return this.getRuleContext(0, Any_identifierContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SEMI, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_call;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_call) {
             listener.enterStmt_call(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_call) {
             listener.exitStmt_call(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_call) {
            return visitor.visitStmt_call(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_assignContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assign_var(): Assign_varContext {
        return this.getRuleContext(0, Assign_varContext)!;
    }
    public assign_operator(): Assign_operatorContext {
        return this.getRuleContext(0, Assign_operatorContext)!;
    }
    public sql_expression(): Sql_expressionContext {
        return this.getRuleContext(0, Sql_expressionContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_assign;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_assign) {
             listener.enterStmt_assign(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_assign) {
             listener.exitStmt_assign(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_assign) {
            return visitor.visitStmt_assign(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_getdiagContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GET, 0)!;
    }
    public KW_DIAGNOSTICS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DIAGNOSTICS, 0)!;
    }
    public getdiag_list(): Getdiag_listContext {
        return this.getRuleContext(0, Getdiag_listContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_STACKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STACKED, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_getdiag;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_getdiag) {
             listener.enterStmt_getdiag(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_getdiag) {
             listener.exitStmt_getdiag(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_getdiag) {
            return visitor.visitStmt_getdiag(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Getdiag_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public getdiag_list_item(): Getdiag_list_itemContext[];
    public getdiag_list_item(i: number): Getdiag_list_itemContext | null;
    public getdiag_list_item(i?: number): Getdiag_list_itemContext[] | Getdiag_list_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Getdiag_list_itemContext);
        }

        return this.getRuleContext(i, Getdiag_list_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_getdiag_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGetdiag_list) {
             listener.enterGetdiag_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGetdiag_list) {
             listener.exitGetdiag_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGetdiag_list) {
            return visitor.visitGetdiag_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Getdiag_list_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assign_var(): Assign_varContext {
        return this.getRuleContext(0, Assign_varContext)!;
    }
    public assign_operator(): Assign_operatorContext {
        return this.getRuleContext(0, Assign_operatorContext)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_getdiag_list_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGetdiag_list_item) {
             listener.enterGetdiag_list_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGetdiag_list_item) {
             listener.exitGetdiag_list_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGetdiag_list_item) {
            return visitor.visitGetdiag_list_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Assign_varContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public PARAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PARAM, 0);
    }
    public OPEN_BRACKET(): antlr.TerminalNode[];
    public OPEN_BRACKET(i: number): antlr.TerminalNode | null;
    public OPEN_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_BRACKET);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_BRACKET, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public CLOSE_BRACKET(): antlr.TerminalNode[];
    public CLOSE_BRACKET(i: number): antlr.TerminalNode | null;
    public CLOSE_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_BRACKET);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_BRACKET, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_assign_var;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAssign_var) {
             listener.enterAssign_var(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAssign_var) {
             listener.exitAssign_var(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAssign_var) {
            return visitor.visitAssign_var(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_ifContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode[];
    public KW_IF(i: number): antlr.TerminalNode | null;
    public KW_IF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_IF);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_IF, i);
    	}
    }
    public sql_expression(): Sql_expressionContext {
        return this.getRuleContext(0, Sql_expressionContext)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_THEN, 0)!;
    }
    public proc_sect(): Proc_sectContext {
        return this.getRuleContext(0, Proc_sectContext)!;
    }
    public stmt_elsifs(): Stmt_elsifsContext {
        return this.getRuleContext(0, Stmt_elsifsContext)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_END, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public stmt_else(): Stmt_elseContext | null {
        return this.getRuleContext(0, Stmt_elseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_if;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_if) {
             listener.enterStmt_if(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_if) {
             listener.exitStmt_if(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_if) {
            return visitor.visitStmt_if(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_elsifsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ELSIF(): antlr.TerminalNode[];
    public KW_ELSIF(i: number): antlr.TerminalNode | null;
    public KW_ELSIF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ELSIF);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ELSIF, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_THEN(): antlr.TerminalNode[];
    public KW_THEN(i: number): antlr.TerminalNode | null;
    public KW_THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_THEN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_THEN, i);
    	}
    }
    public proc_sect(): Proc_sectContext[];
    public proc_sect(i: number): Proc_sectContext | null;
    public proc_sect(i?: number): Proc_sectContext[] | Proc_sectContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Proc_sectContext);
        }

        return this.getRuleContext(i, Proc_sectContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_elsifs;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_elsifs) {
             listener.enterStmt_elsifs(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_elsifs) {
             listener.exitStmt_elsifs(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_elsifs) {
            return visitor.visitStmt_elsifs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_elseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ELSE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ELSE, 0)!;
    }
    public proc_sect(): Proc_sectContext {
        return this.getRuleContext(0, Proc_sectContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_else;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_else) {
             listener.enterStmt_else(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_else) {
             listener.exitStmt_else(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_else) {
            return visitor.visitStmt_else(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_caseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CASE(): antlr.TerminalNode[];
    public KW_CASE(i: number): antlr.TerminalNode | null;
    public KW_CASE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_CASE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_CASE, i);
    	}
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_END, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public sql_expression(): Sql_expressionContext | null {
        return this.getRuleContext(0, Sql_expressionContext);
    }
    public case_when(): Case_whenContext[];
    public case_when(i: number): Case_whenContext | null;
    public case_when(i?: number): Case_whenContext[] | Case_whenContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Case_whenContext);
        }

        return this.getRuleContext(i, Case_whenContext);
    }
    public stmt_else(): Stmt_elseContext | null {
        return this.getRuleContext(0, Stmt_elseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_case;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_case) {
             listener.enterStmt_case(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_case) {
             listener.exitStmt_case(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_case) {
            return visitor.visitStmt_case(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Case_whenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_THEN, 0)!;
    }
    public proc_sect(): Proc_sectContext {
        return this.getRuleContext(0, Proc_sectContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_case_when;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCase_when) {
             listener.enterCase_when(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCase_when) {
             listener.exitCase_when(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCase_when) {
            return visitor.visitCase_when(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_loop_while_forContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public loop_body(): Loop_bodyContext {
        return this.getRuleContext(0, Loop_bodyContext)!;
    }
    public label_decl(): Label_declContext | null {
        return this.getRuleContext(0, Label_declContext);
    }
    public KW_WHILE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHILE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public for_control(): For_controlContext | null {
        return this.getRuleContext(0, For_controlContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_loop_while_for;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_loop_while_for) {
             listener.enterStmt_loop_while_for(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_loop_while_for) {
             listener.exitStmt_loop_while_for(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_loop_while_for) {
            return visitor.visitStmt_loop_while_for(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class For_controlContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_name_list(): Any_name_listContext {
        return this.getRuleContext(0, Any_name_listContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public explainstmt(): ExplainstmtContext | null {
        return this.getRuleContext(0, ExplainstmtContext);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public DOT_DOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.DOT_DOT, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public opt_for_using_expression(): Opt_for_using_expressionContext | null {
        return this.getRuleContext(0, Opt_for_using_expressionContext);
    }
    public KW_REVERSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REVERSE, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_for_control;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFor_control) {
             listener.enterFor_control(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFor_control) {
             listener.exitFor_control(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFor_control) {
            return visitor.visitFor_control(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_for_using_expressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_for_using_expression;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_for_using_expression) {
             listener.enterOpt_for_using_expression(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_for_using_expression) {
             listener.exitOpt_for_using_expression(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_for_using_expression) {
            return visitor.visitOpt_for_using_expression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_foreach_aContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOREACH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREACH, 0)!;
    }
    public any_name_list(): Any_name_listContext {
        return this.getRuleContext(0, Any_name_listContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public KW_ARRAY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ARRAY, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public loop_body(): Loop_bodyContext {
        return this.getRuleContext(0, Loop_bodyContext)!;
    }
    public label_decl(): Label_declContext | null {
        return this.getRuleContext(0, Label_declContext);
    }
    public KW_SLICE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SLICE, 0);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_foreach_a;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_foreach_a) {
             listener.enterStmt_foreach_a(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_foreach_a) {
             listener.exitStmt_foreach_a(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_foreach_a) {
            return visitor.visitStmt_foreach_a(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_exitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_EXIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXIT, 0);
    }
    public KW_CONTINUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTINUE, 0);
    }
    public any_identifier(): Any_identifierContext | null {
        return this.getRuleContext(0, Any_identifierContext);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0);
    }
    public sql_expression(): Sql_expressionContext | null {
        return this.getRuleContext(0, Sql_expressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_exit;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_exit) {
             listener.enterStmt_exit(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_exit) {
             listener.exitStmt_exit(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_exit) {
            return visitor.visitStmt_exit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_returnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RETURN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_RETURN, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public sql_expression(): Sql_expressionContext | null {
        return this.getRuleContext(0, Sql_expressionContext);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_QUERY, 0);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public opt_for_using_expression(): Opt_for_using_expressionContext | null {
        return this.getRuleContext(0, Opt_for_using_expressionContext);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_return;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_return) {
             listener.enterStmt_return(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_return) {
             listener.exitStmt_return(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_return) {
            return visitor.visitStmt_return(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_raiseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RAISE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_RAISE, 0)!;
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SEMI, 0);
    }
    public opt_stmt_raise_level(): Opt_stmt_raise_levelContext | null {
        return this.getRuleContext(0, Opt_stmt_raise_levelContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public opt_raise_using_elem_list(): Opt_raise_using_elem_listContext | null {
        return this.getRuleContext(0, Opt_raise_using_elem_listContext);
    }
    public KW_SQLSTATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SQLSTATE, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public opt_raise_list(): Opt_raise_listContext | null {
        return this.getRuleContext(0, Opt_raise_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_raise;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_raise) {
             listener.enterStmt_raise(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_raise) {
             listener.exitStmt_raise(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_raise) {
            return visitor.visitStmt_raise(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_stmt_raise_levelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEBUG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEBUG, 0);
    }
    public KW_LOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOG, 0);
    }
    public KW_INFO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INFO, 0);
    }
    public KW_NOTICE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTICE, 0);
    }
    public KW_WARNING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WARNING, 0);
    }
    public KW_EXCEPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCEPTION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_stmt_raise_level;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_stmt_raise_level) {
             listener.enterOpt_stmt_raise_level(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_stmt_raise_level) {
             listener.exitOpt_stmt_raise_level(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_stmt_raise_level) {
            return visitor.visitOpt_stmt_raise_level(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_raise_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_raise_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_raise_list) {
             listener.enterOpt_raise_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_raise_list) {
             listener.exitOpt_raise_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_raise_list) {
            return visitor.visitOpt_raise_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_raise_using_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.EQUAL, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_raise_using_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_raise_using_elem) {
             listener.enterOpt_raise_using_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_raise_using_elem) {
             listener.exitOpt_raise_using_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_raise_using_elem) {
            return visitor.visitOpt_raise_using_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_raise_using_elem_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_raise_using_elem(): Opt_raise_using_elemContext[];
    public opt_raise_using_elem(i: number): Opt_raise_using_elemContext | null;
    public opt_raise_using_elem(i?: number): Opt_raise_using_elemContext[] | Opt_raise_using_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_raise_using_elemContext);
        }

        return this.getRuleContext(i, Opt_raise_using_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_raise_using_elem_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_raise_using_elem_list) {
             listener.enterOpt_raise_using_elem_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_raise_using_elem_list) {
             listener.exitOpt_raise_using_elem_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_raise_using_elem_list) {
            return visitor.visitOpt_raise_using_elem_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_assertContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ASSERT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ASSERT, 0)!;
    }
    public sql_expression(): Sql_expressionContext[];
    public sql_expression(i: number): Sql_expressionContext | null;
    public sql_expression(i?: number): Sql_expressionContext[] | Sql_expressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Sql_expressionContext);
        }

        return this.getRuleContext(i, Sql_expressionContext);
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_assert;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_assert) {
             listener.enterStmt_assert(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_assert) {
             listener.exitStmt_assert(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_assert) {
            return visitor.visitStmt_assert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Loop_bodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOOP(): antlr.TerminalNode[];
    public KW_LOOP(i: number): antlr.TerminalNode | null;
    public KW_LOOP(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_LOOP);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_LOOP, i);
    	}
    }
    public proc_sect(): Proc_sectContext {
        return this.getRuleContext(0, Proc_sectContext)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_END, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public any_identifier(): Any_identifierContext | null {
        return this.getRuleContext(0, Any_identifierContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_loop_body;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLoop_body) {
             listener.enterLoop_body(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLoop_body) {
             listener.exitLoop_body(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoop_body) {
            return visitor.visitLoop_body(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_execsqlContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stmt(): StmtContext {
        return this.getRuleContext(0, StmtContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public opt_execute_into(): Opt_execute_intoContext | null {
        return this.getRuleContext(0, Opt_execute_intoContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_execsql;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_execsql) {
             listener.enterStmt_execsql(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_execsql) {
             listener.exitStmt_execsql(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_execsql) {
            return visitor.visitStmt_execsql(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_dynexecuteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public opt_execute_into(): Opt_execute_intoContext | null {
        return this.getRuleContext(0, Opt_execute_intoContext);
    }
    public opt_for_using_expression(): Opt_for_using_expressionContext | null {
        return this.getRuleContext(0, Opt_for_using_expressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_dynexecute;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_dynexecute) {
             listener.enterStmt_dynexecute(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_dynexecute) {
             listener.exitStmt_dynexecute(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_dynexecute) {
            return visitor.visitStmt_dynexecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_execute_intoContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public KW_STRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRICT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_execute_into;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_execute_into) {
             listener.enterOpt_execute_into(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_execute_into) {
             listener.exitOpt_execute_into(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_execute_into) {
            return visitor.visitOpt_execute_into(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_openContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OPEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPEN, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public cursor_variable(): Cursor_variableContext | null {
        return this.getRuleContext(0, Cursor_variableContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0);
    }
    public sql_expression(): Sql_expressionContext | null {
        return this.getRuleContext(0, Sql_expressionContext);
    }
    public opt_scrollable(): Opt_scrollableContext | null {
        return this.getRuleContext(0, Opt_scrollableContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public opt_open_bound_list(): Opt_open_bound_listContext | null {
        return this.getRuleContext(0, Opt_open_bound_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public opt_for_using_expression(): Opt_for_using_expressionContext | null {
        return this.getRuleContext(0, Opt_for_using_expressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_open;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_open) {
             listener.enterStmt_open(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_open) {
             listener.exitStmt_open(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_open) {
            return visitor.visitStmt_open(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_open_bound_list_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public COLON_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COLON_EQUALS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_open_bound_list_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_open_bound_list_item) {
             listener.enterOpt_open_bound_list_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_open_bound_list_item) {
             listener.exitOpt_open_bound_list_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_open_bound_list_item) {
            return visitor.visitOpt_open_bound_list_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_open_bound_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_open_bound_list_item(): Opt_open_bound_list_itemContext[];
    public opt_open_bound_list_item(i: number): Opt_open_bound_list_itemContext | null;
    public opt_open_bound_list_item(i?: number): Opt_open_bound_list_itemContext[] | Opt_open_bound_list_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_open_bound_list_itemContext);
        }

        return this.getRuleContext(i, Opt_open_bound_list_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_open_bound_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_open_bound_list) {
             listener.enterOpt_open_bound_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_open_bound_list) {
             listener.exitOpt_open_bound_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_open_bound_list) {
            return visitor.visitOpt_open_bound_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_fetchContext extends antlr.ParserRuleContext {
    public _direction?: Opt_fetch_directionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FETCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FETCH, 0)!;
    }
    public cursor_variable(): Cursor_variableContext {
        return this.getRuleContext(0, Cursor_variableContext)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public from_in(): From_inContext | null {
        return this.getRuleContext(0, From_inContext);
    }
    public opt_fetch_direction(): Opt_fetch_directionContext | null {
        return this.getRuleContext(0, Opt_fetch_directionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_fetch;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_fetch) {
             listener.enterStmt_fetch(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_fetch) {
             listener.exitStmt_fetch(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_fetch) {
            return visitor.visitStmt_fetch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_fetch_directionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public KW_PRIOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIOR, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LAST, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_ABSOLUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABSOLUTE, 0);
    }
    public KW_RELATIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELATIVE, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_FORWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORWARD, 0);
    }
    public KW_BACKWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BACKWARD, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_fetch_direction;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_fetch_direction) {
             listener.enterOpt_fetch_direction(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_fetch_direction) {
             listener.exitOpt_fetch_direction(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_fetch_direction) {
            return visitor.visitOpt_fetch_direction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_moveContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MOVE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MOVE, 0)!;
    }
    public cursor_variable(): Cursor_variableContext {
        return this.getRuleContext(0, Cursor_variableContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public opt_fetch_direction(): Opt_fetch_directionContext | null {
        return this.getRuleContext(0, Opt_fetch_directionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_move;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_move) {
             listener.enterStmt_move(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_move) {
             listener.exitStmt_move(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_move) {
            return visitor.visitStmt_move(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MergestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MERGE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MERGE, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public table_name(): Table_nameContext {
        return this.getRuleContext(0, Table_nameContext)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public data_source(): Data_sourceContext {
        return this.getRuleContext(0, Data_sourceContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public with_clause(): With_clauseContext | null {
        return this.getRuleContext(0, With_clauseContext);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public merge_when_clause(): Merge_when_clauseContext[];
    public merge_when_clause(i: number): Merge_when_clauseContext | null;
    public merge_when_clause(i?: number): Merge_when_clauseContext[] | Merge_when_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Merge_when_clauseContext);
        }

        return this.getRuleContext(i, Merge_when_clauseContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_mergestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterMergestmt) {
             listener.enterMergestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitMergestmt) {
             listener.exitMergestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMergestmt) {
            return visitor.visitMergestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Data_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public select_no_parens(): Select_no_parensContext | null {
        return this.getRuleContext(0, Select_no_parensContext);
    }
    public values_clause(): Values_clauseContext | null {
        return this.getRuleContext(0, Values_clauseContext);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_data_source;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterData_source) {
             listener.enterData_source(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitData_source) {
             listener.exitData_source(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitData_source) {
            return visitor.visitData_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Merge_when_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_THEN, 0)!;
    }
    public merge_update(): Merge_updateContext | null {
        return this.getRuleContext(0, Merge_updateContext);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DO, 0);
    }
    public KW_NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTHING, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public merge_insert(): Merge_insertContext | null {
        return this.getRuleContext(0, Merge_insertContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_merge_when_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterMerge_when_clause) {
             listener.enterMerge_when_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitMerge_when_clause) {
             listener.exitMerge_when_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMerge_when_clause) {
            return visitor.visitMerge_when_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Merge_insertContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0)!;
    }
    public default_values_or_values(): Default_values_or_valuesContext {
        return this.getRuleContext(0, Default_values_or_valuesContext)!;
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public KW_OVERRIDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERRIDING, 0);
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSTEM, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_merge_insert;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterMerge_insert) {
             listener.enterMerge_insert(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitMerge_insert) {
             listener.exitMerge_insert(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMerge_insert) {
            return visitor.visitMerge_insert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Merge_updateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public column_name(): Column_nameContext[];
    public column_name(i: number): Column_nameContext | null;
    public column_name(i?: number): Column_nameContext[] | Column_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_nameContext);
        }

        return this.getRuleContext(i, Column_nameContext);
    }
    public EQUAL(): antlr.TerminalNode[];
    public EQUAL(i: number): antlr.TerminalNode | null;
    public EQUAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.EQUAL);
    	} else {
    		return this.getToken(PostgreSqlParser.EQUAL, i);
    	}
    }
    public exprofdefault(): ExprofdefaultContext[];
    public exprofdefault(i: number): ExprofdefaultContext | null;
    public exprofdefault(i?: number): ExprofdefaultContext[] | ExprofdefaultContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprofdefaultContext);
        }

        return this.getRuleContext(i, ExprofdefaultContext);
    }
    public opt_column_list(): Opt_column_listContext[];
    public opt_column_list(i: number): Opt_column_listContext | null;
    public opt_column_list(i?: number): Opt_column_listContext[] | Opt_column_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_column_listContext);
        }

        return this.getRuleContext(i, Opt_column_listContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public exprofdefaultlist(): ExprofdefaultlistContext[];
    public exprofdefaultlist(i: number): ExprofdefaultlistContext | null;
    public exprofdefaultlist(i?: number): ExprofdefaultlistContext[] | ExprofdefaultlistContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprofdefaultlistContext);
        }

        return this.getRuleContext(i, ExprofdefaultlistContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_merge_update;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterMerge_update) {
             listener.enterMerge_update(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitMerge_update) {
             listener.exitMerge_update(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMerge_update) {
            return visitor.visitMerge_update(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Default_values_or_valuesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VALUES, 0)!;
    }
    public exprofdefaultlist(): ExprofdefaultlistContext | null {
        return this.getRuleContext(0, ExprofdefaultlistContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_default_values_or_values;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefault_values_or_values) {
             listener.enterDefault_values_or_values(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefault_values_or_values) {
             listener.exitDefault_values_or_values(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefault_values_or_values) {
            return visitor.visitDefault_values_or_values(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExprofdefaultlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public exprofdefault(): ExprofdefaultContext[];
    public exprofdefault(i: number): ExprofdefaultContext | null;
    public exprofdefault(i?: number): ExprofdefaultContext[] | ExprofdefaultContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprofdefaultContext);
        }

        return this.getRuleContext(i, ExprofdefaultContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_exprofdefaultlist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExprofdefaultlist) {
             listener.enterExprofdefaultlist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExprofdefaultlist) {
             listener.exitExprofdefaultlist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExprofdefaultlist) {
            return visitor.visitExprofdefaultlist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExprofdefaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sortby(): SortbyContext | null {
        return this.getRuleContext(0, SortbyContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_exprofdefault;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExprofdefault) {
             listener.enterExprofdefault(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExprofdefault) {
             listener.exitExprofdefault(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExprofdefault) {
            return visitor.visitExprofdefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_closeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLOSE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CLOSE, 0)!;
    }
    public cursor_variable(): Cursor_variableContext {
        return this.getRuleContext(0, Cursor_variableContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_close;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_close) {
             listener.enterStmt_close(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_close) {
             listener.exitStmt_close(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_close) {
            return visitor.visitStmt_close(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_nullContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NULL, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_null;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_null) {
             listener.enterStmt_null(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_null) {
             listener.exitStmt_null(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_null) {
            return visitor.visitStmt_null(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_commit_or_rollbackContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMIT, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLBACK, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_CHAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAIN, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_commit_or_rollback;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_commit_or_rollback) {
             listener.enterStmt_commit_or_rollback(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_commit_or_rollback) {
             listener.exitStmt_commit_or_rollback(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_commit_or_rollback) {
            return visitor.visitStmt_commit_or_rollback(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_set;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_set) {
             listener.enterStmt_set(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_set) {
             listener.exitStmt_set(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_set) {
            return visitor.visitStmt_set(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Cursor_variableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public PARAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PARAM, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_cursor_variable;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCursor_variable) {
             listener.enterCursor_variable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCursor_variable) {
             listener.exitCursor_variable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCursor_variable) {
            return visitor.visitCursor_variable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Exception_sectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXCEPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXCEPTION, 0)!;
    }
    public proc_exception(): Proc_exceptionContext[];
    public proc_exception(i: number): Proc_exceptionContext | null;
    public proc_exception(i?: number): Proc_exceptionContext[] | Proc_exceptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Proc_exceptionContext);
        }

        return this.getRuleContext(i, Proc_exceptionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_exception_sect;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterException_sect) {
             listener.enterException_sect(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitException_sect) {
             listener.exitException_sect(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitException_sect) {
            return visitor.visitException_sect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Proc_exceptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0)!;
    }
    public proc_conditions(): Proc_conditionsContext {
        return this.getRuleContext(0, Proc_conditionsContext)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_THEN, 0)!;
    }
    public proc_sect(): Proc_sectContext {
        return this.getRuleContext(0, Proc_sectContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_proc_exception;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProc_exception) {
             listener.enterProc_exception(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProc_exception) {
             listener.exitProc_exception(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProc_exception) {
            return visitor.visitProc_exception(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Proc_conditionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public proc_condition(): Proc_conditionContext[];
    public proc_condition(i: number): Proc_conditionContext | null;
    public proc_condition(i?: number): Proc_conditionContext[] | Proc_conditionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Proc_conditionContext);
        }

        return this.getRuleContext(i, Proc_conditionContext);
    }
    public KW_OR(): antlr.TerminalNode[];
    public KW_OR(i: number): antlr.TerminalNode | null;
    public KW_OR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_OR);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_OR, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_proc_conditions;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProc_conditions) {
             listener.enterProc_conditions(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProc_conditions) {
             listener.exitProc_conditions(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProc_conditions) {
            return visitor.visitProc_conditions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Proc_conditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_identifier(): Any_identifierContext | null {
        return this.getRuleContext(0, Any_identifierContext);
    }
    public KW_SQLSTATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SQLSTATE, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_proc_condition;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProc_condition) {
             listener.enterProc_condition(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProc_condition) {
             listener.exitProc_condition(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProc_condition) {
            return visitor.visitProc_condition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Any_identifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | null {
        return this.getRuleContext(0, Plsql_unreserved_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_any_identifier;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAny_identifier) {
             listener.enterAny_identifier(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAny_identifier) {
             listener.exitAny_identifier(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAny_identifier) {
            return visitor.visitAny_identifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Plsql_unreserved_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ABSOLUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABSOLUTE, 0);
    }
    public KW_ALIAS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALIAS, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ARRAY, 0);
    }
    public KW_ASSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASSERT, 0);
    }
    public KW_BACKWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BACKWARD, 0);
    }
    public KW_CALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CALL, 0);
    }
    public KW_CHAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAIN, 0);
    }
    public KW_CLOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLOSE, 0);
    }
    public KW_COLLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATE, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMIT, 0);
    }
    public KW_CONSTANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTANT, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public KW_CONTINUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTINUE, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_CURSOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURSOR, 0);
    }
    public KW_DEBUG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEBUG, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_DIAGNOSTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DIAGNOSTICS, 0);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DO, 0);
    }
    public KW_DUMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DUMP, 0);
    }
    public KW_ELSIF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ELSIF, 0);
    }
    public KW_ERROR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ERROR, 0);
    }
    public KW_EXCEPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCEPTION, 0);
    }
    public KW_EXIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXIT, 0);
    }
    public KW_FETCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FETCH, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_FORWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORWARD, 0);
    }
    public KW_GET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GET, 0);
    }
    public KW_INFO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INFO, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IS, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LAST, 0);
    }
    public KW_LOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOG, 0);
    }
    public KW_MOVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MOVE, 0);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_NOTICE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTICE, 0);
    }
    public KW_OPEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPEN, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_PERFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PERFORM, 0);
    }
    public KW_PRINT_STRICT_PARAMS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRINT_STRICT_PARAMS, 0);
    }
    public KW_PRIOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIOR, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_QUERY, 0);
    }
    public KW_RAISE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RAISE, 0);
    }
    public KW_RELATIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELATIVE, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_RETURN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RETURN, 0);
    }
    public KW_REVERSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REVERSE, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLBACK, 0);
    }
    public KW_ROWTYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWTYPE, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public KW_SCROLL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCROLL, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_SLICE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SLICE, 0);
    }
    public KW_SQLSTATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SQLSTATE, 0);
    }
    public KW_STACKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STACKED, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_USE_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USE_COLUMN, 0);
    }
    public KW_USE_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USE_VARIABLE, 0);
    }
    public KW_VARIABLE_CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARIABLE_CONFLICT, 0);
    }
    public KW_WARNING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WARNING, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OUTER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_plsql_unreserved_keyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPlsql_unreserved_keyword) {
             listener.enterPlsql_unreserved_keyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPlsql_unreserved_keyword) {
             listener.exitPlsql_unreserved_keyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPlsql_unreserved_keyword) {
            return visitor.visitPlsql_unreserved_keyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_expressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public target_list(): Target_listContext | null {
        return this.getRuleContext(0, Target_listContext);
    }
    public into_clause(): Into_clauseContext | null {
        return this.getRuleContext(0, Into_clauseContext);
    }
    public from_clause(): From_clauseContext | null {
        return this.getRuleContext(0, From_clauseContext);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public group_clause(): Group_clauseContext | null {
        return this.getRuleContext(0, Group_clauseContext);
    }
    public having_clause(): Having_clauseContext | null {
        return this.getRuleContext(0, Having_clauseContext);
    }
    public window_clause(): Window_clauseContext | null {
        return this.getRuleContext(0, Window_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sql_expression;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSql_expression) {
             listener.enterSql_expression(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSql_expression) {
             listener.exitSql_expression(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSql_expression) {
            return visitor.visitSql_expression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
