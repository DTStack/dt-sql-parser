// Generated from dt-sql-parser/src/grammar/postgresql/PostgreSqlParser.g4 by ANTLR 4.13.1

// @ts-nocheck

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { PostgreSqlParserListener } from "./PostgreSqlParserListener.js";
import { PostgreSqlParserVisitor } from "./PostgreSqlParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


import { SQLParserBase } from '../SQLParserBase';


export class PostgreSqlParser extends SQLParserBase {
    public static readonly Dollar = 1;
    public static readonly OPEN_PAREN = 2;
    public static readonly CLOSE_PAREN = 3;
    public static readonly OPEN_BRACKET = 4;
    public static readonly CLOSE_BRACKET = 5;
    public static readonly COMMA = 6;
    public static readonly SEMI = 7;
    public static readonly COLON = 8;
    public static readonly STAR = 9;
    public static readonly EQUAL = 10;
    public static readonly DOT = 11;
    public static readonly PLUS = 12;
    public static readonly MINUS = 13;
    public static readonly SLASH = 14;
    public static readonly CARET = 15;
    public static readonly LT = 16;
    public static readonly GT = 17;
    public static readonly LESS_LESS = 18;
    public static readonly GREATER_GREATER = 19;
    public static readonly COLON_EQUALS = 20;
    public static readonly LESS_EQUALS = 21;
    public static readonly EQUALS_GREATER = 22;
    public static readonly GREATER_EQUALS = 23;
    public static readonly DOT_DOT = 24;
    public static readonly NOT_EQUALS = 25;
    public static readonly TYPECAST = 26;
    public static readonly PERCENT = 27;
    public static readonly PARAM = 28;
    public static readonly Operator = 29;
    public static readonly KW_ALL = 30;
    public static readonly KW_ANALYSE = 31;
    public static readonly KW_ANALYZE = 32;
    public static readonly KW_AND = 33;
    public static readonly KW_ANY = 34;
    public static readonly KW_ARRAY = 35;
    public static readonly KW_AS = 36;
    public static readonly KW_ASC = 37;
    public static readonly KW_ASYMMETRIC = 38;
    public static readonly KW_BOTH = 39;
    public static readonly KW_CASE = 40;
    public static readonly KW_CAST = 41;
    public static readonly KW_CHECK = 42;
    public static readonly KW_COLLATE = 43;
    public static readonly KW_COLUMN = 44;
    public static readonly KW_CONSTRAINT = 45;
    public static readonly KW_CREATE = 46;
    public static readonly KW_CURRENT_CATALOG = 47;
    public static readonly KW_CURRENT_DATE = 48;
    public static readonly KW_CURRENT_ROLE = 49;
    public static readonly KW_CURRENT_TIME = 50;
    public static readonly KW_CURRENT_TIMESTAMP = 51;
    public static readonly KW_CURRENT_USER = 52;
    public static readonly KW_DEFAULT = 53;
    public static readonly KW_DEFERRABLE = 54;
    public static readonly KW_DESC = 55;
    public static readonly KW_DISTINCT = 56;
    public static readonly KW_DO = 57;
    public static readonly KW_ELSE = 58;
    public static readonly KW_EXCEPT = 59;
    public static readonly KW_FALSE = 60;
    public static readonly KW_FETCH = 61;
    public static readonly KW_FOR = 62;
    public static readonly KW_FOREIGN = 63;
    public static readonly KW_FROM = 64;
    public static readonly KW_GRANT = 65;
    public static readonly KW_GROUP = 66;
    public static readonly KW_HAVING = 67;
    public static readonly KW_IN = 68;
    public static readonly KW_INITIALLY = 69;
    public static readonly KW_INTERSECT = 70;
    public static readonly KW_INTO = 71;
    public static readonly KW_LATERAL = 72;
    public static readonly KW_LEADING = 73;
    public static readonly KW_LIMIT = 74;
    public static readonly KW_LOCALTIME = 75;
    public static readonly KW_LOCALTIMESTAMP = 76;
    public static readonly KW_NOT = 77;
    public static readonly KW_NULL = 78;
    public static readonly KW_OFFSET = 79;
    public static readonly KW_ON = 80;
    public static readonly KW_ONLY = 81;
    public static readonly KW_OR = 82;
    public static readonly KW_ORDER = 83;
    public static readonly KW_PLACING = 84;
    public static readonly KW_PRIMARY = 85;
    public static readonly KW_REFERENCES = 86;
    public static readonly KW_RETURNING = 87;
    public static readonly KW_SELECT = 88;
    public static readonly KW_SESSION_USER = 89;
    public static readonly KW_SOME = 90;
    public static readonly KW_SYMMETRIC = 91;
    public static readonly KW_TABLE = 92;
    public static readonly KW_THEN = 93;
    public static readonly KW_TO = 94;
    public static readonly KW_TRAILING = 95;
    public static readonly KW_TRUE = 96;
    public static readonly KW_UNION = 97;
    public static readonly KW_UNIQUE = 98;
    public static readonly KW_USER = 99;
    public static readonly KW_USING = 100;
    public static readonly KW_VARIADIC = 101;
    public static readonly KW_WHEN = 102;
    public static readonly KW_WHERE = 103;
    public static readonly KW_WINDOW = 104;
    public static readonly KW_WITH = 105;
    public static readonly KW_AUTHORIZATION = 106;
    public static readonly KW_BINARY = 107;
    public static readonly KW_COLLATION = 108;
    public static readonly KW_CONCURRENTLY = 109;
    public static readonly KW_CROSS = 110;
    public static readonly KW_CURRENT_SCHEMA = 111;
    public static readonly KW_FREEZE = 112;
    public static readonly KW_FULL = 113;
    public static readonly KW_ILIKE = 114;
    public static readonly KW_INNER = 115;
    public static readonly KW_IS = 116;
    public static readonly KW_ISNULL = 117;
    public static readonly KW_JOIN = 118;
    public static readonly KW_LEFT = 119;
    public static readonly KW_LIKE = 120;
    public static readonly KW_NATURAL = 121;
    public static readonly KW_NOTNULL = 122;
    public static readonly KW_OUTER = 123;
    public static readonly KW_OVER = 124;
    public static readonly KW_OVERLAPS = 125;
    public static readonly KW_RIGHT = 126;
    public static readonly KW_SIMILAR = 127;
    public static readonly KW_VERBOSE = 128;
    public static readonly KW_ABORT = 129;
    public static readonly KW_ABSOLUTE = 130;
    public static readonly KW_ACCESS = 131;
    public static readonly KW_ACTION = 132;
    public static readonly KW_ADD = 133;
    public static readonly KW_ADMIN = 134;
    public static readonly KW_AFTER = 135;
    public static readonly KW_AGGREGATE = 136;
    public static readonly KW_ALSO = 137;
    public static readonly KW_ALTER = 138;
    public static readonly KW_ALWAYS = 139;
    public static readonly KW_ASSERTION = 140;
    public static readonly KW_ASSIGNMENT = 141;
    public static readonly KW_AT = 142;
    public static readonly KW_ATTRIBUTE = 143;
    public static readonly KW_BACKWARD = 144;
    public static readonly KW_BEFORE = 145;
    public static readonly KW_BEGIN = 146;
    public static readonly KW_BY = 147;
    public static readonly KW_CACHE = 148;
    public static readonly KW_CALLED = 149;
    public static readonly KW_CASCADE = 150;
    public static readonly KW_CASCADED = 151;
    public static readonly KW_CATALOG = 152;
    public static readonly KW_CHAIN = 153;
    public static readonly KW_CHARACTERISTICS = 154;
    public static readonly KW_CHECKPOINT = 155;
    public static readonly KW_CLASS = 156;
    public static readonly KW_CLOSE = 157;
    public static readonly KW_CLUSTER = 158;
    public static readonly KW_COMMENT = 159;
    public static readonly KW_COMMENTS = 160;
    public static readonly KW_COMMIT = 161;
    public static readonly KW_COMMITTED = 162;
    public static readonly KW_CONFIGURATION = 163;
    public static readonly KW_CONNECTION = 164;
    public static readonly KW_CONSTRAINTS = 165;
    public static readonly KW_CONTENT = 166;
    public static readonly KW_CONTINUE = 167;
    public static readonly KW_CONVERSION = 168;
    public static readonly KW_COPY = 169;
    public static readonly KW_COST = 170;
    public static readonly KW_CSV = 171;
    public static readonly KW_CURSOR = 172;
    public static readonly KW_CYCLE = 173;
    public static readonly KW_DATA = 174;
    public static readonly KW_DATABASE = 175;
    public static readonly KW_DAY = 176;
    public static readonly KW_DEALLOCATE = 177;
    public static readonly KW_DECLARE = 178;
    public static readonly KW_DEFAULTS = 179;
    public static readonly KW_DEFERRED = 180;
    public static readonly KW_DEFINER = 181;
    public static readonly KW_DELETE = 182;
    public static readonly KW_DELIMITER = 183;
    public static readonly KW_DELIMITERS = 184;
    public static readonly KW_DICTIONARY = 185;
    public static readonly KW_DISABLE = 186;
    public static readonly KW_DISCARD = 187;
    public static readonly KW_DOCUMENT = 188;
    public static readonly KW_DOMAIN = 189;
    public static readonly KW_DOUBLE = 190;
    public static readonly KW_DROP = 191;
    public static readonly KW_EACH = 192;
    public static readonly KW_ENABLE = 193;
    public static readonly KW_ENCODING = 194;
    public static readonly KW_ENCRYPTED = 195;
    public static readonly KW_ENUM = 196;
    public static readonly KW_ESCAPE = 197;
    public static readonly KW_EVENT = 198;
    public static readonly KW_EXCLUDE = 199;
    public static readonly KW_EXCLUDING = 200;
    public static readonly KW_EXCLUSIVE = 201;
    public static readonly KW_EXECUTE = 202;
    public static readonly KW_EXPLAIN = 203;
    public static readonly KW_EXTENSION = 204;
    public static readonly KW_EXTERNAL = 205;
    public static readonly KW_FAMILY = 206;
    public static readonly KW_FIRST = 207;
    public static readonly KW_FOLLOWING = 208;
    public static readonly KW_FORCE = 209;
    public static readonly KW_FORWARD = 210;
    public static readonly KW_FUNCTION = 211;
    public static readonly KW_FUNCTIONS = 212;
    public static readonly KW_GLOBAL = 213;
    public static readonly KW_GRANTED = 214;
    public static readonly KW_HANDLER = 215;
    public static readonly KW_HEADER = 216;
    public static readonly KW_HOLD = 217;
    public static readonly KW_HOUR = 218;
    public static readonly KW_IDENTITY = 219;
    public static readonly KW_IF = 220;
    public static readonly KW_IMMEDIATE = 221;
    public static readonly KW_IMMUTABLE = 222;
    public static readonly KW_IMPLICIT = 223;
    public static readonly KW_INCLUDING = 224;
    public static readonly KW_INCREMENT = 225;
    public static readonly KW_INDEX = 226;
    public static readonly KW_INDEXES = 227;
    public static readonly KW_INHERIT = 228;
    public static readonly KW_NOINHERIT = 229;
    public static readonly KW_SUPERUSER = 230;
    public static readonly KW_NOSUPERUSER = 231;
    public static readonly KW_CREATEDB = 232;
    public static readonly KW_NOCREATEDB = 233;
    public static readonly KW_CREATEROLE = 234;
    public static readonly KW_NOCREATEROLE = 235;
    public static readonly KW_CREATEUSER = 236;
    public static readonly KW_NOCREATEUSER = 237;
    public static readonly KW_INHERITS = 238;
    public static readonly KW_INLINE = 239;
    public static readonly KW_INSENSITIVE = 240;
    public static readonly KW_INSERT = 241;
    public static readonly KW_INSTEAD = 242;
    public static readonly KW_INVOKER = 243;
    public static readonly KW_ISOLATION = 244;
    public static readonly KW_KEY = 245;
    public static readonly KW_LABEL = 246;
    public static readonly KW_LANGUAGE = 247;
    public static readonly KW_LARGE = 248;
    public static readonly KW_LAST = 249;
    public static readonly KW_LEAKPROOF = 250;
    public static readonly KW_LEVEL = 251;
    public static readonly KW_LISTEN = 252;
    public static readonly KW_LOAD = 253;
    public static readonly KW_LOCAL = 254;
    public static readonly KW_LOCATION = 255;
    public static readonly KW_LOCK = 256;
    public static readonly KW_MAPPING = 257;
    public static readonly KW_MATCH = 258;
    public static readonly KW_MATERIALIZED = 259;
    public static readonly KW_MAXVALUE = 260;
    public static readonly KW_MINUTE = 261;
    public static readonly KW_MINVALUE = 262;
    public static readonly KW_MODE = 263;
    public static readonly KW_MONTH = 264;
    public static readonly KW_MOVE = 265;
    public static readonly KW_NAME = 266;
    public static readonly KW_NAMES = 267;
    public static readonly KW_NEXT = 268;
    public static readonly KW_NO = 269;
    public static readonly KW_NOTHING = 270;
    public static readonly KW_NOTIFY = 271;
    public static readonly KW_NOWAIT = 272;
    public static readonly KW_NULLS = 273;
    public static readonly KW_OBJECT = 274;
    public static readonly KW_OF = 275;
    public static readonly KW_OFF = 276;
    public static readonly KW_OIDS = 277;
    public static readonly KW_OPERATOR = 278;
    public static readonly KW_OPTION = 279;
    public static readonly KW_OPTIONS = 280;
    public static readonly KW_OWNED = 281;
    public static readonly KW_OWNER = 282;
    public static readonly KW_PARSER = 283;
    public static readonly KW_PARTIAL = 284;
    public static readonly KW_PARTITION = 285;
    public static readonly KW_PASSING = 286;
    public static readonly KW_PASSWORD = 287;
    public static readonly KW_PLANS = 288;
    public static readonly KW_PRECEDING = 289;
    public static readonly KW_PREPARE = 290;
    public static readonly KW_PREPARED = 291;
    public static readonly KW_PRESERVE = 292;
    public static readonly KW_PRIOR = 293;
    public static readonly KW_PRIVILEGES = 294;
    public static readonly KW_PROCEDURAL = 295;
    public static readonly KW_PROCEDURE = 296;
    public static readonly KW_PROGRAM = 297;
    public static readonly KW_QUOTE = 298;
    public static readonly KW_RANGE = 299;
    public static readonly KW_READ = 300;
    public static readonly KW_REASSIGN = 301;
    public static readonly KW_RECHECK = 302;
    public static readonly KW_RECURSIVE = 303;
    public static readonly KW_REF = 304;
    public static readonly KW_REFRESH = 305;
    public static readonly KW_REINDEX = 306;
    public static readonly KW_RELATIVE = 307;
    public static readonly KW_RELEASE = 308;
    public static readonly KW_RENAME = 309;
    public static readonly KW_REPEATABLE = 310;
    public static readonly KW_REPLACE = 311;
    public static readonly KW_REPLICA = 312;
    public static readonly KW_RESET = 313;
    public static readonly KW_RESTART = 314;
    public static readonly KW_RESTRICT = 315;
    public static readonly KW_RETURNS = 316;
    public static readonly KW_REVOKE = 317;
    public static readonly KW_ROLE = 318;
    public static readonly KW_ROLLBACK = 319;
    public static readonly KW_ROWS = 320;
    public static readonly KW_RULE = 321;
    public static readonly KW_SAVEPOINT = 322;
    public static readonly KW_SCHEMA = 323;
    public static readonly KW_SCROLL = 324;
    public static readonly KW_SEARCH = 325;
    public static readonly KW_SECOND = 326;
    public static readonly KW_SECURITY = 327;
    public static readonly KW_SEQUENCE = 328;
    public static readonly KW_SEQUENCES = 329;
    public static readonly KW_SERIALIZABLE = 330;
    public static readonly KW_SERVER = 331;
    public static readonly KW_SESSION = 332;
    public static readonly KW_SET = 333;
    public static readonly KW_SHARE = 334;
    public static readonly KW_SHOW = 335;
    public static readonly KW_SIMPLE = 336;
    public static readonly KW_SNAPSHOT = 337;
    public static readonly KW_STABLE = 338;
    public static readonly KW_STANDALONE = 339;
    public static readonly KW_START = 340;
    public static readonly KW_STATEMENT = 341;
    public static readonly KW_STATISTICS = 342;
    public static readonly KW_STDIN = 343;
    public static readonly KW_STDOUT = 344;
    public static readonly KW_STORAGE = 345;
    public static readonly KW_STRICT = 346;
    public static readonly KW_STRIP = 347;
    public static readonly KW_SYSID = 348;
    public static readonly KW_SYSTEM = 349;
    public static readonly KW_TABLES = 350;
    public static readonly KW_TABLESPACE = 351;
    public static readonly KW_TEMP = 352;
    public static readonly KW_TEMPLATE = 353;
    public static readonly KW_TEMPORARY = 354;
    public static readonly KW_TEXT = 355;
    public static readonly KW_TRANSACTION = 356;
    public static readonly KW_TRIGGER = 357;
    public static readonly KW_TRUNCATE = 358;
    public static readonly KW_TRUSTED = 359;
    public static readonly KW_TYPE = 360;
    public static readonly KW_TYPES = 361;
    public static readonly KW_UNBOUNDED = 362;
    public static readonly KW_UNCOMMITTED = 363;
    public static readonly KW_UNENCRYPTED = 364;
    public static readonly KW_UNKNOWN = 365;
    public static readonly KW_UNLISTEN = 366;
    public static readonly KW_UNLOGGED = 367;
    public static readonly KW_UNTIL = 368;
    public static readonly KW_UPDATE = 369;
    public static readonly KW_VACUUM = 370;
    public static readonly KW_VALID = 371;
    public static readonly KW_VALIDATE = 372;
    public static readonly KW_VALIDATOR = 373;
    public static readonly KW_VARYING = 374;
    public static readonly KW_VERSION = 375;
    public static readonly KW_VIEW = 376;
    public static readonly KW_VOLATILE = 377;
    public static readonly KW_WHITESPACE = 378;
    public static readonly KW_WITHOUT = 379;
    public static readonly KW_WORK = 380;
    public static readonly KW_WRAPPER = 381;
    public static readonly KW_WRITE = 382;
    public static readonly KW_XML = 383;
    public static readonly KW_YEAR = 384;
    public static readonly KW_YES = 385;
    public static readonly KW_ZONE = 386;
    public static readonly KW_BETWEEN = 387;
    public static readonly KW_BIGINT = 388;
    public static readonly KW_BIT = 389;
    public static readonly KW_BOOLEAN = 390;
    public static readonly KW_CHAR = 391;
    public static readonly KW_CHARACTER = 392;
    public static readonly KW_COALESCE = 393;
    public static readonly KW_DEC = 394;
    public static readonly KW_DECIMAL = 395;
    public static readonly KW_EXISTS = 396;
    public static readonly KW_EXTRACT = 397;
    public static readonly KW_FLOAT = 398;
    public static readonly KW_GREATEST = 399;
    public static readonly KW_INOUT = 400;
    public static readonly KW_INT = 401;
    public static readonly KW_INTEGER = 402;
    public static readonly KW_INTERVAL = 403;
    public static readonly KW_LEAST = 404;
    public static readonly KW_NATIONAL = 405;
    public static readonly KW_NCHAR = 406;
    public static readonly KW_NONE = 407;
    public static readonly KW_NULLIF = 408;
    public static readonly KW_NUMERIC = 409;
    public static readonly KW_OVERLAY = 410;
    public static readonly KW_POSITION = 411;
    public static readonly KW_PRECISION = 412;
    public static readonly KW_REAL = 413;
    public static readonly KW_ROW = 414;
    public static readonly KW_SETOF = 415;
    public static readonly KW_SMALLINT = 416;
    public static readonly KW_SUBSTRING = 417;
    public static readonly KW_TIME = 418;
    public static readonly KW_TIMESTAMP = 419;
    public static readonly KW_TREAT = 420;
    public static readonly KW_TRIM = 421;
    public static readonly KW_VALUES = 422;
    public static readonly KW_VARCHAR = 423;
    public static readonly KW_XMLATTRIBUTES = 424;
    public static readonly KW_XMLCONCAT = 425;
    public static readonly KW_XMLELEMENT = 426;
    public static readonly KW_XMLEXISTS = 427;
    public static readonly KW_XMLFOREST = 428;
    public static readonly KW_XMLPARSE = 429;
    public static readonly KW_XMLPI = 430;
    public static readonly KW_XMLROOT = 431;
    public static readonly KW_XMLSERIALIZE = 432;
    public static readonly KW_CALL = 433;
    public static readonly KW_CURRENT = 434;
    public static readonly KW_ATTACH = 435;
    public static readonly KW_DETACH = 436;
    public static readonly KW_EXPRESSION = 437;
    public static readonly KW_GENERATED = 438;
    public static readonly KW_LOGGED = 439;
    public static readonly KW_STORED = 440;
    public static readonly KW_INCLUDE = 441;
    public static readonly KW_ROUTINE = 442;
    public static readonly KW_TRANSFORM = 443;
    public static readonly KW_IMPORT = 444;
    public static readonly KW_POLICY = 445;
    public static readonly KW_METHOD = 446;
    public static readonly KW_REFERENCING = 447;
    public static readonly KW_NEW = 448;
    public static readonly KW_OLD = 449;
    public static readonly KW_VALUE = 450;
    public static readonly KW_SUBSCRIPTION = 451;
    public static readonly KW_PUBLICATION = 452;
    public static readonly KW_OUT = 453;
    public static readonly KW_END = 454;
    public static readonly KW_ROUTINES = 455;
    public static readonly KW_SCHEMAS = 456;
    public static readonly KW_PROCEDURES = 457;
    public static readonly KW_INPUT = 458;
    public static readonly KW_SUPPORT = 459;
    public static readonly KW_PARALLEL = 460;
    public static readonly KW_SQL = 461;
    public static readonly KW_DEPENDS = 462;
    public static readonly KW_OVERRIDING = 463;
    public static readonly KW_CONFLICT = 464;
    public static readonly KW_SKIP = 465;
    public static readonly KW_LOCKED = 466;
    public static readonly KW_TIES = 467;
    public static readonly KW_ROLLUP = 468;
    public static readonly KW_CUBE = 469;
    public static readonly KW_GROUPING = 470;
    public static readonly KW_SETS = 471;
    public static readonly KW_TABLESAMPLE = 472;
    public static readonly KW_ORDINALITY = 473;
    public static readonly KW_XMLTABLE = 474;
    public static readonly KW_COLUMNS = 475;
    public static readonly KW_XMLNAMESPACES = 476;
    public static readonly KW_ROWTYPE = 477;
    public static readonly KW_NORMALIZED = 478;
    public static readonly KW_WITHIN = 479;
    public static readonly KW_FILTER = 480;
    public static readonly KW_GROUPS = 481;
    public static readonly KW_OTHERS = 482;
    public static readonly KW_NFC = 483;
    public static readonly KW_NFD = 484;
    public static readonly KW_NFKC = 485;
    public static readonly KW_NFKD = 486;
    public static readonly KW_UESCAPE = 487;
    public static readonly KW_VIEWS = 488;
    public static readonly KW_NORMALIZE = 489;
    public static readonly KW_DUMP = 490;
    public static readonly KW_PRINT_STRICT_PARAMS = 491;
    public static readonly KW_VARIABLE_CONFLICT = 492;
    public static readonly KW_ERROR = 493;
    public static readonly KW_USE_VARIABLE = 494;
    public static readonly KW_USE_COLUMN = 495;
    public static readonly KW_ALIAS = 496;
    public static readonly KW_CONSTANT = 497;
    public static readonly KW_PERFORM = 498;
    public static readonly KW_GET = 499;
    public static readonly KW_DIAGNOSTICS = 500;
    public static readonly KW_STACKED = 501;
    public static readonly KW_ELSIF = 502;
    public static readonly KW_WHILE = 503;
    public static readonly KW_REVERSE = 504;
    public static readonly KW_FOREACH = 505;
    public static readonly KW_SLICE = 506;
    public static readonly KW_EXIT = 507;
    public static readonly KW_RETURN = 508;
    public static readonly KW_QUERY = 509;
    public static readonly KW_RAISE = 510;
    public static readonly KW_SQLSTATE = 511;
    public static readonly KW_DEBUG = 512;
    public static readonly KW_LOG = 513;
    public static readonly KW_INFO = 514;
    public static readonly KW_NOTICE = 515;
    public static readonly KW_WARNING = 516;
    public static readonly KW_EXCEPTION = 517;
    public static readonly KW_ASSERT = 518;
    public static readonly KW_LOOP = 519;
    public static readonly KW_OPEN = 520;
    public static readonly KW_PEFERENCES = 521;
    public static readonly KW_USAGE = 522;
    public static readonly KW_CONNECT = 523;
    public static readonly KW_PUBLIC = 524;
    public static readonly KW_MERGE = 525;
    public static readonly KW_MATCHED = 526;
    public static readonly KW_BREADTH = 527;
    public static readonly KW_DEPTH = 528;
    public static readonly KW_UNSAFE = 529;
    public static readonly KW_RESTRICTED = 530;
    public static readonly KW_SAFE = 531;
    public static readonly KW_FINALIZE = 532;
    public static readonly KW_MODULUS = 533;
    public static readonly KW_REMAINDER = 534;
    public static readonly KW_LOGIN = 535;
    public static readonly KW_NOLOGIN = 536;
    public static readonly KW_REPLICATION = 537;
    public static readonly KW_NOREPLICATION = 538;
    public static readonly KW_BYPASSRLS = 539;
    public static readonly KW_NOBYPASSRLS = 540;
    public static readonly KW_PERMISSIVE = 541;
    public static readonly KW_RESTRICTIVE = 542;
    public static readonly KW_COMPRESSION = 543;
    public static readonly KW_PLAIN = 544;
    public static readonly KW_EXTENDED = 545;
    public static readonly KW_MAIN = 546;
    public static readonly KW_SKIP_LOCKED = 547;
    public static readonly KW_BUFFER_USAGE_LIMIT = 548;
    public static readonly Identifier = 549;
    public static readonly QuotedIdentifier = 550;
    public static readonly UnterminatedQuotedIdentifier = 551;
    public static readonly InvalidQuotedIdentifier = 552;
    public static readonly InvalidUnterminatedQuotedIdentifier = 553;
    public static readonly UnicodeQuotedIdentifier = 554;
    public static readonly UnterminatedUnicodeQuotedIdentifier = 555;
    public static readonly InvalidUnicodeQuotedIdentifier = 556;
    public static readonly InvalidUnterminatedUnicodeQuotedIdentifier = 557;
    public static readonly StringConstant = 558;
    public static readonly UnterminatedStringConstant = 559;
    public static readonly UnicodeEscapeStringConstant = 560;
    public static readonly UnterminatedUnicodeEscapeStringConstant = 561;
    public static readonly BeginDollarStringConstant = 562;
    public static readonly BinaryStringConstant = 563;
    public static readonly UnterminatedBinaryStringConstant = 564;
    public static readonly InvalidBinaryStringConstant = 565;
    public static readonly InvalidUnterminatedBinaryStringConstant = 566;
    public static readonly HexadecimalStringConstant = 567;
    public static readonly UnterminatedHexadecimalStringConstant = 568;
    public static readonly InvalidHexadecimalStringConstant = 569;
    public static readonly InvalidUnterminatedHexadecimalStringConstant = 570;
    public static readonly Integral = 571;
    public static readonly NumericFail = 572;
    public static readonly Numeric = 573;
    public static readonly PLSQLVARIABLENAME = 574;
    public static readonly PLSQLIDENTIFIER = 575;
    public static readonly Whitespace = 576;
    public static readonly Newline = 577;
    public static readonly LineComment = 578;
    public static readonly BlockComment = 579;
    public static readonly UnterminatedBlockComment = 580;
    public static readonly MetaCommand = 581;
    public static readonly EndMetaCommand = 582;
    public static readonly ErrorCharacter = 583;
    public static readonly EscapeStringConstant = 584;
    public static readonly UnterminatedEscapeStringConstant = 585;
    public static readonly InvalidEscapeStringConstant = 586;
    public static readonly InvalidUnterminatedEscapeStringConstant = 587;
    public static readonly DollarText = 588;
    public static readonly EndDollarStringConstant = 589;
    public static readonly AfterEscapeStringConstantWithNewlineMode_Continued = 590;
    public static readonly RULE_program = 0;
    public static readonly RULE_singleStmt = 1;
    public static readonly RULE_stmt = 2;
    public static readonly RULE_callstmt = 3;
    public static readonly RULE_createrolestmt = 4;
    public static readonly RULE_alteroptroleelem = 5;
    public static readonly RULE_createoptroleelem = 6;
    public static readonly RULE_createuserstmt = 7;
    public static readonly RULE_alterrolestmt = 8;
    public static readonly RULE_alterrolesetstmt = 9;
    public static readonly RULE_alterroutinestmt = 10;
    public static readonly RULE_alter_routine_cluase = 11;
    public static readonly RULE_routine_action = 12;
    public static readonly RULE_creategroupstmt = 13;
    public static readonly RULE_altergroupstmt = 14;
    public static readonly RULE_createschemastmt = 15;
    public static readonly RULE_schema_name_create = 16;
    public static readonly RULE_schema_stmt = 17;
    public static readonly RULE_variablesetstmt = 18;
    public static readonly RULE_set_rest = 19;
    public static readonly RULE_generic_set = 20;
    public static readonly RULE_set_rest_more = 21;
    public static readonly RULE_var_name = 22;
    public static readonly RULE_var_list = 23;
    public static readonly RULE_var_value = 24;
    public static readonly RULE_iso_level = 25;
    public static readonly RULE_opt_boolean_or_string_column = 26;
    public static readonly RULE_opt_boolean_or_string = 27;
    public static readonly RULE_zone_value = 28;
    public static readonly RULE_nonreservedword_or_sconst = 29;
    public static readonly RULE_variableresetstmt = 30;
    public static readonly RULE_reset_rest = 31;
    public static readonly RULE_setresetclause = 32;
    public static readonly RULE_functionsetresetclause = 33;
    public static readonly RULE_variableshowstmt = 34;
    public static readonly RULE_constraintssetstmt = 35;
    public static readonly RULE_checkpointstmt = 36;
    public static readonly RULE_discardstmt = 37;
    public static readonly RULE_altertablestmt = 38;
    public static readonly RULE_alter_table_cmds = 39;
    public static readonly RULE_partition_bound_spec = 40;
    public static readonly RULE_partition_bound_cluase = 41;
    public static readonly RULE_partition_bound_choose = 42;
    public static readonly RULE_partition_with_cluase = 43;
    public static readonly RULE_partition_cmd = 44;
    public static readonly RULE_index_partition_cmd = 45;
    public static readonly RULE_alter_table_cmd = 46;
    public static readonly RULE_alter_column_default = 47;
    public static readonly RULE_opt_drop_behavior = 48;
    public static readonly RULE_opt_collate_clause = 49;
    public static readonly RULE_reloptions = 50;
    public static readonly RULE_opt_reloptions = 51;
    public static readonly RULE_reloption_elem = 52;
    public static readonly RULE_partitionboundspec = 53;
    public static readonly RULE_altercompositetypestmt = 54;
    public static readonly RULE_alter_type_cmd = 55;
    public static readonly RULE_closeportalstmt = 56;
    public static readonly RULE_copystmt = 57;
    public static readonly RULE_copy_options = 58;
    public static readonly RULE_copy_generic_opt_elem = 59;
    public static readonly RULE_createstmt = 60;
    public static readonly RULE_opttemp = 61;
    public static readonly RULE_opttypedtableelementlist = 62;
    public static readonly RULE_tableelementlist = 63;
    public static readonly RULE_tableelement = 64;
    public static readonly RULE_typedtableelement = 65;
    public static readonly RULE_column_def = 66;
    public static readonly RULE_colconstraint = 67;
    public static readonly RULE_colconstraintelem = 68;
    public static readonly RULE_generated_when = 69;
    public static readonly RULE_tablelikeoption = 70;
    public static readonly RULE_constraintelem = 71;
    public static readonly RULE_opt_column_list = 72;
    public static readonly RULE_opt_column_list_create = 73;
    public static readonly RULE_column_list = 74;
    public static readonly RULE_opt_c_include = 75;
    public static readonly RULE_key_match = 76;
    public static readonly RULE_exclusionconstraintelem = 77;
    public static readonly RULE_key_actions = 78;
    public static readonly RULE_key_update = 79;
    public static readonly RULE_key_delete = 80;
    public static readonly RULE_key_action = 81;
    public static readonly RULE_optinherit = 82;
    public static readonly RULE_partitionspec = 83;
    public static readonly RULE_part_elem = 84;
    public static readonly RULE_table_access_method_clause = 85;
    public static readonly RULE_optwith = 86;
    public static readonly RULE_oncommitoption = 87;
    public static readonly RULE_opttablespace = 88;
    public static readonly RULE_optconstablespace = 89;
    public static readonly RULE_existingindex = 90;
    public static readonly RULE_createstatsstmt = 91;
    public static readonly RULE_alterstatsstmt = 92;
    public static readonly RULE_createasstmt = 93;
    public static readonly RULE_create_as_target = 94;
    public static readonly RULE_opt_with_data = 95;
    public static readonly RULE_creatematviewstmt = 96;
    public static readonly RULE_refreshmatviewstmt = 97;
    public static readonly RULE_createseqstmt = 98;
    public static readonly RULE_alterseqstmt = 99;
    public static readonly RULE_seqoptelem = 100;
    public static readonly RULE_numericonly = 101;
    public static readonly RULE_createplangstmt = 102;
    public static readonly RULE_createtablespacestmt = 103;
    public static readonly RULE_createextensionstmt = 104;
    public static readonly RULE_alterextensionstmt = 105;
    public static readonly RULE_alterextensioncontentsstmt = 106;
    public static readonly RULE_createfdwstmt = 107;
    public static readonly RULE_fdw_option = 108;
    public static readonly RULE_alterfdwstmt = 109;
    public static readonly RULE_create_generic_options = 110;
    public static readonly RULE_alter_generic_options = 111;
    public static readonly RULE_alter_generic_option_elem = 112;
    public static readonly RULE_generic_option_elem = 113;
    public static readonly RULE_createforeignserverstmt = 114;
    public static readonly RULE_foreign_server_version = 115;
    public static readonly RULE_alterforeignserverstmt = 116;
    public static readonly RULE_createforeigntablestmt = 117;
    public static readonly RULE_importforeignschemastmt = 118;
    public static readonly RULE_createusermappingstmt = 119;
    public static readonly RULE_alterusermappingstmt = 120;
    public static readonly RULE_createpolicystmt = 121;
    public static readonly RULE_alterpolicystmt = 122;
    public static readonly RULE_alterprocedurestmt = 123;
    public static readonly RULE_procedure_action = 124;
    public static readonly RULE_rowsecurityoptionalexpr = 125;
    public static readonly RULE_rowsecurityoptionalwithcheck = 126;
    public static readonly RULE_createamstmt = 127;
    public static readonly RULE_createtrigstmt = 128;
    public static readonly RULE_triggeractiontime = 129;
    public static readonly RULE_triggerevents = 130;
    public static readonly RULE_triggeroneevent = 131;
    public static readonly RULE_triggerwhen = 132;
    public static readonly RULE_function_or_procedure = 133;
    public static readonly RULE_triggerfuncargs = 134;
    public static readonly RULE_triggerfuncarg = 135;
    public static readonly RULE_constraintattributeElem = 136;
    public static readonly RULE_createeventtrigstmt = 137;
    public static readonly RULE_event_trigger_when_item = 138;
    public static readonly RULE_altereventtrigstmt = 139;
    public static readonly RULE_createassertionstmt = 140;
    public static readonly RULE_definestmt = 141;
    public static readonly RULE_definition = 142;
    public static readonly RULE_def_elem = 143;
    public static readonly RULE_def_arg = 144;
    public static readonly RULE_old_aggr_elem = 145;
    public static readonly RULE_alterenumstmt = 146;
    public static readonly RULE_opt_if_not_exists = 147;
    public static readonly RULE_createopclassstmt = 148;
    public static readonly RULE_opclass_item = 149;
    public static readonly RULE_createopfamilystmt = 150;
    public static readonly RULE_alteropfamilystmt = 151;
    public static readonly RULE_opclass_drop = 152;
    public static readonly RULE_reassignownedstmt = 153;
    public static readonly RULE_dropstmt = 154;
    public static readonly RULE_object_type_any_name = 155;
    public static readonly RULE_object_type_name = 156;
    public static readonly RULE_any_name_list = 157;
    public static readonly RULE_any_name = 158;
    public static readonly RULE_attrs = 159;
    public static readonly RULE_truncatestmt = 160;
    public static readonly RULE_truncate_table = 161;
    public static readonly RULE_commentstmt = 162;
    public static readonly RULE_seclabelstmt = 163;
    public static readonly RULE_fetchstmt = 164;
    public static readonly RULE_fetch_args = 165;
    public static readonly RULE_from_in = 166;
    public static readonly RULE_grantstmt = 167;
    public static readonly RULE_revokestmt = 168;
    public static readonly RULE_privileges = 169;
    public static readonly RULE_beforeprivilegeselect = 170;
    public static readonly RULE_privilege = 171;
    public static readonly RULE_privilege_target = 172;
    public static readonly RULE_grantee_list = 173;
    public static readonly RULE_grantrolestmt = 174;
    public static readonly RULE_revokerolestmt = 175;
    public static readonly RULE_alterdefaultprivilegesstmt = 176;
    public static readonly RULE_defaclaction = 177;
    public static readonly RULE_defacl_privilege_target = 178;
    public static readonly RULE_indexstmt = 179;
    public static readonly RULE_index_params = 180;
    public static readonly RULE_index_elem = 181;
    public static readonly RULE_createfunctionstmt = 182;
    public static readonly RULE_opt_or_replace = 183;
    public static readonly RULE_func_args = 184;
    public static readonly RULE_func_args_list = 185;
    public static readonly RULE_routine_with_argtypes_list = 186;
    public static readonly RULE_routine_with_argtypes = 187;
    public static readonly RULE_procedure_with_argtypes_list = 188;
    public static readonly RULE_procedure_with_argtypes = 189;
    public static readonly RULE_function_with_argtypes_list = 190;
    public static readonly RULE_function_with_argtypes = 191;
    public static readonly RULE_func_arg = 192;
    public static readonly RULE_arg_class = 193;
    public static readonly RULE_func_type = 194;
    public static readonly RULE_func_arg_with_default = 195;
    public static readonly RULE_aggr_args = 196;
    public static readonly RULE_aggregate_with_argtypes = 197;
    public static readonly RULE_common_func_opt_item = 198;
    public static readonly RULE_createfunc_opt_item = 199;
    public static readonly RULE_opt_definition = 200;
    public static readonly RULE_table_func_column = 201;
    public static readonly RULE_alterfunctionstmt = 202;
    public static readonly RULE_removefuncstmt = 203;
    public static readonly RULE_removeaggrstmt = 204;
    public static readonly RULE_removeoperstmt = 205;
    public static readonly RULE_oper_argtypes = 206;
    public static readonly RULE_any_operator = 207;
    public static readonly RULE_operator_with_argtypes = 208;
    public static readonly RULE_dostmt = 209;
    public static readonly RULE_createcaststmt = 210;
    public static readonly RULE_opt_if_exists = 211;
    public static readonly RULE_createtransformstmt = 212;
    public static readonly RULE_sql_with_function = 213;
    public static readonly RULE_reindexstmt = 214;
    public static readonly RULE_altertblspcstmt = 215;
    public static readonly RULE_renamestmt = 216;
    public static readonly RULE_alterobjectdependsstmt = 217;
    public static readonly RULE_alterobjectschemastmt = 218;
    public static readonly RULE_alteroperatorstmt = 219;
    public static readonly RULE_operator_def_list = 220;
    public static readonly RULE_operator_def_elem = 221;
    public static readonly RULE_altertypestmt = 222;
    public static readonly RULE_alterownerstmt = 223;
    public static readonly RULE_createpublicationstmt = 224;
    public static readonly RULE_alterpublicationstmt = 225;
    public static readonly RULE_createsubscriptionstmt = 226;
    public static readonly RULE_altersubscriptionstmt = 227;
    public static readonly RULE_rulestmt = 228;
    public static readonly RULE_ruleactionstmt = 229;
    public static readonly RULE_notifystmt = 230;
    public static readonly RULE_notify_payload = 231;
    public static readonly RULE_listenstmt = 232;
    public static readonly RULE_unlistenstmt = 233;
    public static readonly RULE_transactionstmt = 234;
    public static readonly RULE_opt_transaction = 235;
    public static readonly RULE_transaction_mode_item = 236;
    public static readonly RULE_transaction_mode_list = 237;
    public static readonly RULE_viewstmt = 238;
    public static readonly RULE_loadstmt = 239;
    public static readonly RULE_createdbstmt = 240;
    public static readonly RULE_createdb_opt_item = 241;
    public static readonly RULE_alterdatabasestmt = 242;
    public static readonly RULE_alterdatabasesetstmt = 243;
    public static readonly RULE_altercollationstmt = 244;
    public static readonly RULE_altersystemstmt = 245;
    public static readonly RULE_createdomainstmt = 246;
    public static readonly RULE_alterdomainstmt = 247;
    public static readonly RULE_altertsdictionarystmt = 248;
    public static readonly RULE_altertsconfigurationstmt = 249;
    public static readonly RULE_createconversionstmt = 250;
    public static readonly RULE_clusterstmt = 251;
    public static readonly RULE_vacuumstmt = 252;
    public static readonly RULE_analyzestmt = 253;
    public static readonly RULE_analyze_keyword = 254;
    public static readonly RULE_vac_analyze_option_elem = 255;
    public static readonly RULE_analyze_option_elem = 256;
    public static readonly RULE_opt_verbose = 257;
    public static readonly RULE_vacuum_relation = 258;
    public static readonly RULE_vacuum_relation_list = 259;
    public static readonly RULE_explainstmt = 260;
    public static readonly RULE_explainablestmt = 261;
    public static readonly RULE_explain_option_list = 262;
    public static readonly RULE_preparestmt = 263;
    public static readonly RULE_prep_type_clause = 264;
    public static readonly RULE_preparablestmt = 265;
    public static readonly RULE_executestmt = 266;
    public static readonly RULE_execute_param_clause = 267;
    public static readonly RULE_deallocatestmt = 268;
    public static readonly RULE_insertstmt = 269;
    public static readonly RULE_insert_rest = 270;
    public static readonly RULE_insert_column_list = 271;
    public static readonly RULE_insert_column_item = 272;
    public static readonly RULE_returning_clause = 273;
    public static readonly RULE_deletestmt = 274;
    public static readonly RULE_lockstmt = 275;
    public static readonly RULE_updatestmt = 276;
    public static readonly RULE_set_clause_list = 277;
    public static readonly RULE_set_clause = 278;
    public static readonly RULE_declarecursorstmt = 279;
    public static readonly RULE_selectstmt = 280;
    public static readonly RULE_select_with_parens = 281;
    public static readonly RULE_select_no_parens = 282;
    public static readonly RULE_select_clause = 283;
    public static readonly RULE_simple_select = 284;
    public static readonly RULE_set_operator_with_all_or_distinct = 285;
    public static readonly RULE_with_clause = 286;
    public static readonly RULE_common_table_expr = 287;
    public static readonly RULE_search_cluase = 288;
    public static readonly RULE_cycle_cluase = 289;
    public static readonly RULE_into_clause = 290;
    public static readonly RULE_opttempTableName = 291;
    public static readonly RULE_distinct_clause = 292;
    public static readonly RULE_sort_clause = 293;
    public static readonly RULE_sortby = 294;
    public static readonly RULE_select_limit = 295;
    public static readonly RULE_limit_clause = 296;
    public static readonly RULE_fetch_clause = 297;
    public static readonly RULE_offset_clause = 298;
    public static readonly RULE_select_fetch_first_value = 299;
    public static readonly RULE_group_clause = 300;
    public static readonly RULE_group_by_list = 301;
    public static readonly RULE_group_by_item = 302;
    public static readonly RULE_for_locking_clause = 303;
    public static readonly RULE_values_clause = 304;
    public static readonly RULE_from_clause = 305;
    public static readonly RULE_from_list = 306;
    public static readonly RULE_table_ref = 307;
    public static readonly RULE_alias_clause = 308;
    public static readonly RULE_func_alias_clause = 309;
    public static readonly RULE_join_type = 310;
    public static readonly RULE_join_qual = 311;
    public static readonly RULE_relation_expr = 312;
    public static readonly RULE_publication_relation_expr = 313;
    public static readonly RULE_relation_expr_list = 314;
    public static readonly RULE_relation_expr_opt_alias = 315;
    public static readonly RULE_tablesample_clause = 316;
    public static readonly RULE_func_table = 317;
    public static readonly RULE_rowsfrom_item = 318;
    public static readonly RULE_where_clause = 319;
    public static readonly RULE_where_or_current_clause = 320;
    public static readonly RULE_tablefuncelementlist = 321;
    public static readonly RULE_tablefuncelement = 322;
    public static readonly RULE_xmltable = 323;
    public static readonly RULE_xmltable_column_el = 324;
    public static readonly RULE_xml_namespace_el = 325;
    public static readonly RULE_typename = 326;
    public static readonly RULE_simpletypename = 327;
    public static readonly RULE_consttypename = 328;
    public static readonly RULE_numeric = 329;
    public static readonly RULE_opt_float = 330;
    public static readonly RULE_bit = 331;
    public static readonly RULE_character = 332;
    public static readonly RULE_constdatetime = 333;
    public static readonly RULE_opt_interval = 334;
    public static readonly RULE_interval_second = 335;
    public static readonly RULE_comparisonOperator = 336;
    public static readonly RULE_expression = 337;
    public static readonly RULE_booleanExpression = 338;
    public static readonly RULE_predicate = 339;
    public static readonly RULE_valueExpression = 340;
    public static readonly RULE_primaryExpression = 341;
    public static readonly RULE_func_application = 342;
    public static readonly RULE_func_expr = 343;
    public static readonly RULE_func_expr_windowless = 344;
    public static readonly RULE_func_expr_common_subexpr = 345;
    public static readonly RULE_xml_attribute_list = 346;
    public static readonly RULE_xml_attribute_el = 347;
    public static readonly RULE_document_or_content = 348;
    public static readonly RULE_xmlexists_argument = 349;
    public static readonly RULE_xml_passing_mech = 350;
    public static readonly RULE_window_clause = 351;
    public static readonly RULE_window_definition = 352;
    public static readonly RULE_over_clause = 353;
    public static readonly RULE_window_specification = 354;
    public static readonly RULE_opt_frame_clause = 355;
    public static readonly RULE_frame_bound = 356;
    public static readonly RULE_row = 357;
    public static readonly RULE_explicit_row = 358;
    public static readonly RULE_sub_type = 359;
    public static readonly RULE_all_op = 360;
    public static readonly RULE_mathop = 361;
    public static readonly RULE_qual_op = 362;
    public static readonly RULE_qual_all_op = 363;
    public static readonly RULE_subquery_Op = 364;
    public static readonly RULE_expr_list = 365;
    public static readonly RULE_column_expr = 366;
    public static readonly RULE_column_expr_noparen = 367;
    public static readonly RULE_func_arg_list = 368;
    public static readonly RULE_func_arg_expr = 369;
    public static readonly RULE_array_expr = 370;
    public static readonly RULE_extract_arg = 371;
    public static readonly RULE_unicode_normal_form = 372;
    public static readonly RULE_substr_list = 373;
    public static readonly RULE_when_clause = 374;
    public static readonly RULE_indirection_el = 375;
    public static readonly RULE_indirection = 376;
    public static readonly RULE_opt_indirection = 377;
    public static readonly RULE_target_list = 378;
    public static readonly RULE_target_el = 379;
    public static readonly RULE_qualified_name_list = 380;
    public static readonly RULE_table_name_list = 381;
    public static readonly RULE_schema_name_list = 382;
    public static readonly RULE_database_nameList = 383;
    public static readonly RULE_tablespace_name_create = 384;
    public static readonly RULE_tablespace_name = 385;
    public static readonly RULE_table_name_create = 386;
    public static readonly RULE_table_name = 387;
    public static readonly RULE_view_name_create = 388;
    public static readonly RULE_view_name = 389;
    public static readonly RULE_qualified_name = 390;
    public static readonly RULE_tablespace_name_list = 391;
    public static readonly RULE_name_list = 392;
    public static readonly RULE_database_name_create = 393;
    public static readonly RULE_database_name = 394;
    public static readonly RULE_schema_name = 395;
    public static readonly RULE_routine_name_create = 396;
    public static readonly RULE_routine_name = 397;
    public static readonly RULE_procedure_name = 398;
    public static readonly RULE_procedure_name_create = 399;
    public static readonly RULE_column_name = 400;
    public static readonly RULE_column_name_create = 401;
    public static readonly RULE_function_name_create = 402;
    public static readonly RULE_function_name = 403;
    public static readonly RULE_sconst = 404;
    public static readonly RULE_anysconst = 405;
    public static readonly RULE_signediconst = 406;
    public static readonly RULE_rolespec = 407;
    public static readonly RULE_role_list = 408;
    public static readonly RULE_colid = 409;
    public static readonly RULE_type_function_name = 410;
    public static readonly RULE_nonreservedword = 411;
    public static readonly RULE_collabel = 412;
    public static readonly RULE_identifier = 413;
    public static readonly RULE_unreserved_keyword = 414;
    public static readonly RULE_col_name_keyword = 415;
    public static readonly RULE_type_func_name_keyword = 416;
    public static readonly RULE_reserved_keyword = 417;
    public static readonly RULE_pl_block = 418;
    public static readonly RULE_label_decl = 419;
    public static readonly RULE_decl_statement = 420;
    public static readonly RULE_decl_cursor_arg = 421;
    public static readonly RULE_assign_operator = 422;
    public static readonly RULE_proc_stmt = 423;
    public static readonly RULE_stmt_perform = 424;
    public static readonly RULE_stmt_call = 425;
    public static readonly RULE_stmt_assign = 426;
    public static readonly RULE_stmt_getdiag = 427;
    public static readonly RULE_getdiag_list_item = 428;
    public static readonly RULE_assign_var = 429;
    public static readonly RULE_stmt_if = 430;
    public static readonly RULE_stmt_else = 431;
    public static readonly RULE_stmt_case = 432;
    public static readonly RULE_stmt_loop_while_for = 433;
    public static readonly RULE_for_control = 434;
    public static readonly RULE_stmt_foreach_a = 435;
    public static readonly RULE_stmt_exit = 436;
    public static readonly RULE_stmt_return = 437;
    public static readonly RULE_stmt_raise = 438;
    public static readonly RULE_opt_raise_using_elem = 439;
    public static readonly RULE_stmt_assert = 440;
    public static readonly RULE_loop_body = 441;
    public static readonly RULE_stmt_execsql = 442;
    public static readonly RULE_stmt_dynexecute = 443;
    public static readonly RULE_opt_execute_into = 444;
    public static readonly RULE_stmt_open = 445;
    public static readonly RULE_opt_open_bound_list_item = 446;
    public static readonly RULE_stmt_fetch = 447;
    public static readonly RULE_opt_fetch_direction = 448;
    public static readonly RULE_stmt_move = 449;
    public static readonly RULE_mergestmt = 450;
    public static readonly RULE_data_source = 451;
    public static readonly RULE_merge_when_clause = 452;
    public static readonly RULE_merge_insert = 453;
    public static readonly RULE_merge_update = 454;
    public static readonly RULE_default_values_or_values = 455;
    public static readonly RULE_exprofdefault = 456;
    public static readonly RULE_stmt_close = 457;
    public static readonly RULE_stmt_null = 458;
    public static readonly RULE_stmt_commit_or_rollback = 459;
    public static readonly RULE_stmt_set = 460;
    public static readonly RULE_cursor_variable = 461;
    public static readonly RULE_exception_sect = 462;
    public static readonly RULE_proc_condition = 463;
    public static readonly RULE_any_identifier = 464;
    public static readonly RULE_sql_expression = 465;

    public static readonly literalNames = [
        null, "'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'*'", 
        "'='", "'.'", "'+'", "'-'", "'/'", "'^'", "'<'", "'>'", "'<<'", 
        "'>>'", "':='", "'<='", "'=>'", "'>='", "'..'", "'<>'", "'::'", 
        "'%'", null, null, "'ALL'", "'ANALYSE'", "'ANALYZE'", "'AND'", "'ANY'", 
        "'ARRAY'", "'AS'", "'ASC'", "'ASYMMETRIC'", "'BOTH'", "'CASE'", 
        "'CAST'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONSTRAINT'", "'CREATE'", 
        "'CURRENT_CATALOG'", "'CURRENT_DATE'", "'CURRENT_ROLE'", "'CURRENT_TIME'", 
        "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DEFAULT'", "'DEFERRABLE'", 
        "'DESC'", "'DISTINCT'", "'DO'", "'ELSE'", "'EXCEPT'", "'FALSE'", 
        "'FETCH'", "'FOR'", "'FOREIGN'", "'FROM'", "'GRANT'", "'GROUP'", 
        "'HAVING'", "'IN'", "'INITIALLY'", "'INTERSECT'", "'INTO'", "'LATERAL'", 
        "'LEADING'", "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'", "'NOT'", 
        "'NULL'", "'OFFSET'", "'ON'", "'ONLY'", "'OR'", "'ORDER'", "'PLACING'", 
        "'PRIMARY'", "'REFERENCES'", "'RETURNING'", "'SELECT'", "'SESSION_USER'", 
        "'SOME'", "'SYMMETRIC'", "'TABLE'", "'THEN'", "'TO'", "'TRAILING'", 
        "'TRUE'", "'UNION'", "'UNIQUE'", "'USER'", "'USING'", "'VARIADIC'", 
        "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'AUTHORIZATION'", "'BINARY'", 
        "'COLLATION'", "'CONCURRENTLY'", "'CROSS'", "'CURRENT_SCHEMA'", 
        "'FREEZE'", "'FULL'", "'ILIKE'", "'INNER'", "'IS'", "'ISNULL'", 
        "'JOIN'", "'LEFT'", "'LIKE'", "'NATURAL'", "'NOTNULL'", "'OUTER'", 
        "'OVER'", "'OVERLAPS'", "'RIGHT'", "'SIMILAR'", "'VERBOSE'", "'ABORT'", 
        "'ABSOLUTE'", "'ACCESS'", "'ACTION'", "'ADD'", "'ADMIN'", "'AFTER'", 
        "'AGGREGATE'", "'ALSO'", "'ALTER'", "'ALWAYS'", "'ASSERTION'", "'ASSIGNMENT'", 
        "'AT'", "'ATTRIBUTE'", "'BACKWARD'", "'BEFORE'", "'BEGIN'", "'BY'", 
        "'CACHE'", "'CALLED'", "'CASCADE'", "'CASCADED'", "'CATALOG'", "'CHAIN'", 
        "'CHARACTERISTICS'", "'CHECKPOINT'", "'CLASS'", "'CLOSE'", "'CLUSTER'", 
        "'COMMENT'", "'COMMENTS'", "'COMMIT'", "'COMMITTED'", "'CONFIGURATION'", 
        "'CONNECTION'", "'CONSTRAINTS'", "'CONTENT'", "'CONTINUE'", "'CONVERSION'", 
        "'COPY'", "'COST'", "'CSV'", "'CURSOR'", "'CYCLE'", "'DATA'", "'DATABASE'", 
        "'DAY'", "'DEALLOCATE'", "'DECLARE'", "'DEFAULTS'", "'DEFERRED'", 
        "'DEFINER'", "'DELETE'", "'DELIMITER'", "'DELIMITERS'", "'DICTIONARY'", 
        "'DISABLE'", "'DISCARD'", "'DOCUMENT'", "'DOMAIN'", "'DOUBLE'", 
        "'DROP'", "'EACH'", "'ENABLE'", "'ENCODING'", "'ENCRYPTED'", "'ENUM'", 
        "'ESCAPE'", "'EVENT'", "'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", 
        "'EXECUTE'", "'EXPLAIN'", "'EXTENSION'", "'EXTERNAL'", "'FAMILY'", 
        "'FIRST'", "'FOLLOWING'", "'FORCE'", "'FORWARD'", "'FUNCTION'", 
        "'FUNCTIONS'", "'GLOBAL'", "'GRANTED'", "'HANDLER'", "'HEADER'", 
        "'HOLD'", "'HOUR'", "'IDENTITY'", "'IF'", "'IMMEDIATE'", "'IMMUTABLE'", 
        "'IMPLICIT'", "'INCLUDING'", "'INCREMENT'", "'INDEX'", "'INDEXES'", 
        "'INHERIT'", "'NOINHERIT'", "'SUPERUSER'", "'NOSUPERUSER'", "'CREATEDB'", 
        "'NOCREATEDB'", "'CREATEROLE'", "'NOCREATEROLE'", "'CREATEUSER'", 
        "'NOCREATEUSER'", "'INHERITS'", "'INLINE'", "'INSENSITIVE'", "'INSERT'", 
        "'INSTEAD'", "'INVOKER'", "'ISOLATION'", "'KEY'", "'LABEL'", "'LANGUAGE'", 
        "'LARGE'", "'LAST'", "'LEAKPROOF'", "'LEVEL'", "'LISTEN'", "'LOAD'", 
        "'LOCAL'", "'LOCATION'", "'LOCK'", "'MAPPING'", "'MATCH'", "'MATERIALIZED'", 
        "'MAXVALUE'", "'MINUTE'", "'MINVALUE'", "'MODE'", "'MONTH'", "'MOVE'", 
        "'NAME'", "'NAMES'", "'NEXT'", "'NO'", "'NOTHING'", "'NOTIFY'", 
        "'NOWAIT'", "'NULLS'", "'OBJECT'", "'OF'", "'OFF'", "'OIDS'", "'OPERATOR'", 
        "'OPTION'", "'OPTIONS'", "'OWNED'", "'OWNER'", "'PARSER'", "'PARTIAL'", 
        "'PARTITION'", "'PASSING'", "'PASSWORD'", "'PLANS'", "'PRECEDING'", 
        "'PREPARE'", "'PREPARED'", "'PRESERVE'", "'PRIOR'", "'PRIVILEGES'", 
        "'PROCEDURAL'", "'PROCEDURE'", "'PROGRAM'", "'QUOTE'", "'RANGE'", 
        "'READ'", "'REASSIGN'", "'RECHECK'", "'RECURSIVE'", "'REF'", "'REFRESH'", 
        "'REINDEX'", "'RELATIVE'", "'RELEASE'", "'RENAME'", "'REPEATABLE'", 
        "'REPLACE'", "'REPLICA'", "'RESET'", "'RESTART'", "'RESTRICT'", 
        "'RETURNS'", "'REVOKE'", "'ROLE'", "'ROLLBACK'", "'ROWS'", "'RULE'", 
        "'SAVEPOINT'", "'SCHEMA'", "'SCROLL'", "'SEARCH'", "'SECOND'", "'SECURITY'", 
        "'SEQUENCE'", "'SEQUENCES'", "'SERIALIZABLE'", "'SERVER'", "'SESSION'", 
        "'SET'", "'SHARE'", "'SHOW'", "'SIMPLE'", "'SNAPSHOT'", "'STABLE'", 
        "'STANDALONE'", "'START'", "'STATEMENT'", "'STATISTICS'", "'STDIN'", 
        "'STDOUT'", "'STORAGE'", "'STRICT'", "'STRIP'", "'SYSID'", "'SYSTEM'", 
        "'TABLES'", "'TABLESPACE'", "'TEMP'", "'TEMPLATE'", "'TEMPORARY'", 
        "'TEXT'", "'TRANSACTION'", "'TRIGGER'", "'TRUNCATE'", "'TRUSTED'", 
        "'TYPE'", "'TYPES'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNENCRYPTED'", 
        "'UNKNOWN'", "'UNLISTEN'", "'UNLOGGED'", "'UNTIL'", "'UPDATE'", 
        "'VACUUM'", "'VALID'", "'VALIDATE'", "'VALIDATOR'", "'VARYING'", 
        "'VERSION'", "'VIEW'", "'VOLATILE'", "'WHITESPACE'", "'WITHOUT'", 
        "'WORK'", "'WRAPPER'", "'WRITE'", "'XML'", "'YEAR'", "'YES'", "'ZONE'", 
        "'BETWEEN'", "'BIGINT'", "'BIT'", "'BOOLEAN'", "'CHAR'", "'CHARACTER'", 
        "'COALESCE'", "'DEC'", "'DECIMAL'", "'EXISTS'", "'EXTRACT'", "'FLOAT'", 
        "'GREATEST'", "'INOUT'", "'INT'", "'INTEGER'", "'INTERVAL'", "'LEAST'", 
        "'NATIONAL'", "'NCHAR'", "'NONE'", "'NULLIF'", "'NUMERIC'", "'OVERLAY'", 
        "'POSITION'", "'PRECISION'", "'REAL'", "'ROW'", "'SETOF'", "'SMALLINT'", 
        "'SUBSTRING'", "'TIME'", "'TIMESTAMP'", "'TREAT'", "'TRIM'", "'VALUES'", 
        "'VARCHAR'", "'XMLATTRIBUTES'", "'XMLCONCAT'", "'XMLELEMENT'", "'XMLEXISTS'", 
        "'XMLFOREST'", "'XMLPARSE'", "'XMLPI'", "'XMLROOT'", "'XMLSERIALIZE'", 
        "'CALL'", "'CURRENT'", "'ATTACH'", "'DETACH'", "'EXPRESSION'", "'GENERATED'", 
        "'LOGGED'", "'STORED'", "'INCLUDE'", "'ROUTINE'", "'TRANSFORM'", 
        "'IMPORT'", "'POLICY'", "'METHOD'", "'REFERENCING'", "'NEW'", "'OLD'", 
        "'VALUE'", "'SUBSCRIPTION'", "'PUBLICATION'", "'OUT'", "'END'", 
        "'ROUTINES'", "'SCHEMAS'", "'PROCEDURES'", "'INPUT'", "'SUPPORT'", 
        "'PARALLEL'", "'SQL'", "'DEPENDS'", "'OVERRIDING'", "'CONFLICT'", 
        "'SKIP'", "'LOCKED'", "'TIES'", "'ROLLUP'", "'CUBE'", "'GROUPING'", 
        "'SETS'", "'TABLESAMPLE'", "'ORDINALITY'", "'XMLTABLE'", "'COLUMNS'", 
        "'XMLNAMESPACES'", "'ROWTYPE'", "'NORMALIZED'", "'WITHIN'", "'FILTER'", 
        "'GROUPS'", "'OTHERS'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", "'UESCAPE'", 
        "'VIEWS'", "'NORMALIZE'", "'DUMP'", "'PRINT_STRICT_PARAMS'", "'VARIABLE_CONFLICT'", 
        "'ERROR'", "'USE_VARIABLE'", "'USE_COLUMN'", "'ALIAS'", "'CONSTANT'", 
        "'PERFORM'", "'GET'", "'DIAGNOSTICS'", "'STACKED'", "'ELSIF'", "'WHILE'", 
        "'REVERSE'", "'FOREACH'", "'SLICE'", "'EXIT'", "'RETURN'", "'QUERY'", 
        "'RAISE'", "'SQLSTATE'", "'DEBUG'", "'LOG'", "'INFO'", "'NOTICE'", 
        "'WARNING'", "'EXCEPTION'", "'ASSERT'", "'LOOP'", "'OPEN'", "'PEFERENCES'", 
        "'USAGE'", "'CONNECT'", "'PUBLIC'", "'MERGE'", "'MATCHED'", "'BREADTH'", 
        "'DEPTH'", "'UNSAFE'", "'RESTRICTED'", "'SAFE'", "'FINALIZE'", "'MODULUS'", 
        "'REMAINDER'", "'LOGIN'", "'NOLOGIN'", "'REPLICATION'", "'NOREPLICATION'", 
        "'BYPASSRLS'", "'NOBYPASSRLS'", "'PERMISSIVE'", "'RESTRICTIVE'", 
        "'COMPRESSION'", "'PLAIN'", "'EXTENDED'", "'MAIN'", "'SKIP_LOCKED'", 
        "'BUFFER_USAGE_LIMIT'", null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, "'\\\\'", null, null, null, null, null, 
        null, null, "'''"
    ];

    public static readonly symbolicNames = [
        null, "Dollar", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
        "COMMA", "SEMI", "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", 
        "SLASH", "CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", "COLON_EQUALS", 
        "LESS_EQUALS", "EQUALS_GREATER", "GREATER_EQUALS", "DOT_DOT", "NOT_EQUALS", 
        "TYPECAST", "PERCENT", "PARAM", "Operator", "KW_ALL", "KW_ANALYSE", 
        "KW_ANALYZE", "KW_AND", "KW_ANY", "KW_ARRAY", "KW_AS", "KW_ASC", 
        "KW_ASYMMETRIC", "KW_BOTH", "KW_CASE", "KW_CAST", "KW_CHECK", "KW_COLLATE", 
        "KW_COLUMN", "KW_CONSTRAINT", "KW_CREATE", "KW_CURRENT_CATALOG", 
        "KW_CURRENT_DATE", "KW_CURRENT_ROLE", "KW_CURRENT_TIME", "KW_CURRENT_TIMESTAMP", 
        "KW_CURRENT_USER", "KW_DEFAULT", "KW_DEFERRABLE", "KW_DESC", "KW_DISTINCT", 
        "KW_DO", "KW_ELSE", "KW_EXCEPT", "KW_FALSE", "KW_FETCH", "KW_FOR", 
        "KW_FOREIGN", "KW_FROM", "KW_GRANT", "KW_GROUP", "KW_HAVING", "KW_IN", 
        "KW_INITIALLY", "KW_INTERSECT", "KW_INTO", "KW_LATERAL", "KW_LEADING", 
        "KW_LIMIT", "KW_LOCALTIME", "KW_LOCALTIMESTAMP", "KW_NOT", "KW_NULL", 
        "KW_OFFSET", "KW_ON", "KW_ONLY", "KW_OR", "KW_ORDER", "KW_PLACING", 
        "KW_PRIMARY", "KW_REFERENCES", "KW_RETURNING", "KW_SELECT", "KW_SESSION_USER", 
        "KW_SOME", "KW_SYMMETRIC", "KW_TABLE", "KW_THEN", "KW_TO", "KW_TRAILING", 
        "KW_TRUE", "KW_UNION", "KW_UNIQUE", "KW_USER", "KW_USING", "KW_VARIADIC", 
        "KW_WHEN", "KW_WHERE", "KW_WINDOW", "KW_WITH", "KW_AUTHORIZATION", 
        "KW_BINARY", "KW_COLLATION", "KW_CONCURRENTLY", "KW_CROSS", "KW_CURRENT_SCHEMA", 
        "KW_FREEZE", "KW_FULL", "KW_ILIKE", "KW_INNER", "KW_IS", "KW_ISNULL", 
        "KW_JOIN", "KW_LEFT", "KW_LIKE", "KW_NATURAL", "KW_NOTNULL", "KW_OUTER", 
        "KW_OVER", "KW_OVERLAPS", "KW_RIGHT", "KW_SIMILAR", "KW_VERBOSE", 
        "KW_ABORT", "KW_ABSOLUTE", "KW_ACCESS", "KW_ACTION", "KW_ADD", "KW_ADMIN", 
        "KW_AFTER", "KW_AGGREGATE", "KW_ALSO", "KW_ALTER", "KW_ALWAYS", 
        "KW_ASSERTION", "KW_ASSIGNMENT", "KW_AT", "KW_ATTRIBUTE", "KW_BACKWARD", 
        "KW_BEFORE", "KW_BEGIN", "KW_BY", "KW_CACHE", "KW_CALLED", "KW_CASCADE", 
        "KW_CASCADED", "KW_CATALOG", "KW_CHAIN", "KW_CHARACTERISTICS", "KW_CHECKPOINT", 
        "KW_CLASS", "KW_CLOSE", "KW_CLUSTER", "KW_COMMENT", "KW_COMMENTS", 
        "KW_COMMIT", "KW_COMMITTED", "KW_CONFIGURATION", "KW_CONNECTION", 
        "KW_CONSTRAINTS", "KW_CONTENT", "KW_CONTINUE", "KW_CONVERSION", 
        "KW_COPY", "KW_COST", "KW_CSV", "KW_CURSOR", "KW_CYCLE", "KW_DATA", 
        "KW_DATABASE", "KW_DAY", "KW_DEALLOCATE", "KW_DECLARE", "KW_DEFAULTS", 
        "KW_DEFERRED", "KW_DEFINER", "KW_DELETE", "KW_DELIMITER", "KW_DELIMITERS", 
        "KW_DICTIONARY", "KW_DISABLE", "KW_DISCARD", "KW_DOCUMENT", "KW_DOMAIN", 
        "KW_DOUBLE", "KW_DROP", "KW_EACH", "KW_ENABLE", "KW_ENCODING", "KW_ENCRYPTED", 
        "KW_ENUM", "KW_ESCAPE", "KW_EVENT", "KW_EXCLUDE", "KW_EXCLUDING", 
        "KW_EXCLUSIVE", "KW_EXECUTE", "KW_EXPLAIN", "KW_EXTENSION", "KW_EXTERNAL", 
        "KW_FAMILY", "KW_FIRST", "KW_FOLLOWING", "KW_FORCE", "KW_FORWARD", 
        "KW_FUNCTION", "KW_FUNCTIONS", "KW_GLOBAL", "KW_GRANTED", "KW_HANDLER", 
        "KW_HEADER", "KW_HOLD", "KW_HOUR", "KW_IDENTITY", "KW_IF", "KW_IMMEDIATE", 
        "KW_IMMUTABLE", "KW_IMPLICIT", "KW_INCLUDING", "KW_INCREMENT", "KW_INDEX", 
        "KW_INDEXES", "KW_INHERIT", "KW_NOINHERIT", "KW_SUPERUSER", "KW_NOSUPERUSER", 
        "KW_CREATEDB", "KW_NOCREATEDB", "KW_CREATEROLE", "KW_NOCREATEROLE", 
        "KW_CREATEUSER", "KW_NOCREATEUSER", "KW_INHERITS", "KW_INLINE", 
        "KW_INSENSITIVE", "KW_INSERT", "KW_INSTEAD", "KW_INVOKER", "KW_ISOLATION", 
        "KW_KEY", "KW_LABEL", "KW_LANGUAGE", "KW_LARGE", "KW_LAST", "KW_LEAKPROOF", 
        "KW_LEVEL", "KW_LISTEN", "KW_LOAD", "KW_LOCAL", "KW_LOCATION", "KW_LOCK", 
        "KW_MAPPING", "KW_MATCH", "KW_MATERIALIZED", "KW_MAXVALUE", "KW_MINUTE", 
        "KW_MINVALUE", "KW_MODE", "KW_MONTH", "KW_MOVE", "KW_NAME", "KW_NAMES", 
        "KW_NEXT", "KW_NO", "KW_NOTHING", "KW_NOTIFY", "KW_NOWAIT", "KW_NULLS", 
        "KW_OBJECT", "KW_OF", "KW_OFF", "KW_OIDS", "KW_OPERATOR", "KW_OPTION", 
        "KW_OPTIONS", "KW_OWNED", "KW_OWNER", "KW_PARSER", "KW_PARTIAL", 
        "KW_PARTITION", "KW_PASSING", "KW_PASSWORD", "KW_PLANS", "KW_PRECEDING", 
        "KW_PREPARE", "KW_PREPARED", "KW_PRESERVE", "KW_PRIOR", "KW_PRIVILEGES", 
        "KW_PROCEDURAL", "KW_PROCEDURE", "KW_PROGRAM", "KW_QUOTE", "KW_RANGE", 
        "KW_READ", "KW_REASSIGN", "KW_RECHECK", "KW_RECURSIVE", "KW_REF", 
        "KW_REFRESH", "KW_REINDEX", "KW_RELATIVE", "KW_RELEASE", "KW_RENAME", 
        "KW_REPEATABLE", "KW_REPLACE", "KW_REPLICA", "KW_RESET", "KW_RESTART", 
        "KW_RESTRICT", "KW_RETURNS", "KW_REVOKE", "KW_ROLE", "KW_ROLLBACK", 
        "KW_ROWS", "KW_RULE", "KW_SAVEPOINT", "KW_SCHEMA", "KW_SCROLL", 
        "KW_SEARCH", "KW_SECOND", "KW_SECURITY", "KW_SEQUENCE", "KW_SEQUENCES", 
        "KW_SERIALIZABLE", "KW_SERVER", "KW_SESSION", "KW_SET", "KW_SHARE", 
        "KW_SHOW", "KW_SIMPLE", "KW_SNAPSHOT", "KW_STABLE", "KW_STANDALONE", 
        "KW_START", "KW_STATEMENT", "KW_STATISTICS", "KW_STDIN", "KW_STDOUT", 
        "KW_STORAGE", "KW_STRICT", "KW_STRIP", "KW_SYSID", "KW_SYSTEM", 
        "KW_TABLES", "KW_TABLESPACE", "KW_TEMP", "KW_TEMPLATE", "KW_TEMPORARY", 
        "KW_TEXT", "KW_TRANSACTION", "KW_TRIGGER", "KW_TRUNCATE", "KW_TRUSTED", 
        "KW_TYPE", "KW_TYPES", "KW_UNBOUNDED", "KW_UNCOMMITTED", "KW_UNENCRYPTED", 
        "KW_UNKNOWN", "KW_UNLISTEN", "KW_UNLOGGED", "KW_UNTIL", "KW_UPDATE", 
        "KW_VACUUM", "KW_VALID", "KW_VALIDATE", "KW_VALIDATOR", "KW_VARYING", 
        "KW_VERSION", "KW_VIEW", "KW_VOLATILE", "KW_WHITESPACE", "KW_WITHOUT", 
        "KW_WORK", "KW_WRAPPER", "KW_WRITE", "KW_XML", "KW_YEAR", "KW_YES", 
        "KW_ZONE", "KW_BETWEEN", "KW_BIGINT", "KW_BIT", "KW_BOOLEAN", "KW_CHAR", 
        "KW_CHARACTER", "KW_COALESCE", "KW_DEC", "KW_DECIMAL", "KW_EXISTS", 
        "KW_EXTRACT", "KW_FLOAT", "KW_GREATEST", "KW_INOUT", "KW_INT", "KW_INTEGER", 
        "KW_INTERVAL", "KW_LEAST", "KW_NATIONAL", "KW_NCHAR", "KW_NONE", 
        "KW_NULLIF", "KW_NUMERIC", "KW_OVERLAY", "KW_POSITION", "KW_PRECISION", 
        "KW_REAL", "KW_ROW", "KW_SETOF", "KW_SMALLINT", "KW_SUBSTRING", 
        "KW_TIME", "KW_TIMESTAMP", "KW_TREAT", "KW_TRIM", "KW_VALUES", "KW_VARCHAR", 
        "KW_XMLATTRIBUTES", "KW_XMLCONCAT", "KW_XMLELEMENT", "KW_XMLEXISTS", 
        "KW_XMLFOREST", "KW_XMLPARSE", "KW_XMLPI", "KW_XMLROOT", "KW_XMLSERIALIZE", 
        "KW_CALL", "KW_CURRENT", "KW_ATTACH", "KW_DETACH", "KW_EXPRESSION", 
        "KW_GENERATED", "KW_LOGGED", "KW_STORED", "KW_INCLUDE", "KW_ROUTINE", 
        "KW_TRANSFORM", "KW_IMPORT", "KW_POLICY", "KW_METHOD", "KW_REFERENCING", 
        "KW_NEW", "KW_OLD", "KW_VALUE", "KW_SUBSCRIPTION", "KW_PUBLICATION", 
        "KW_OUT", "KW_END", "KW_ROUTINES", "KW_SCHEMAS", "KW_PROCEDURES", 
        "KW_INPUT", "KW_SUPPORT", "KW_PARALLEL", "KW_SQL", "KW_DEPENDS", 
        "KW_OVERRIDING", "KW_CONFLICT", "KW_SKIP", "KW_LOCKED", "KW_TIES", 
        "KW_ROLLUP", "KW_CUBE", "KW_GROUPING", "KW_SETS", "KW_TABLESAMPLE", 
        "KW_ORDINALITY", "KW_XMLTABLE", "KW_COLUMNS", "KW_XMLNAMESPACES", 
        "KW_ROWTYPE", "KW_NORMALIZED", "KW_WITHIN", "KW_FILTER", "KW_GROUPS", 
        "KW_OTHERS", "KW_NFC", "KW_NFD", "KW_NFKC", "KW_NFKD", "KW_UESCAPE", 
        "KW_VIEWS", "KW_NORMALIZE", "KW_DUMP", "KW_PRINT_STRICT_PARAMS", 
        "KW_VARIABLE_CONFLICT", "KW_ERROR", "KW_USE_VARIABLE", "KW_USE_COLUMN", 
        "KW_ALIAS", "KW_CONSTANT", "KW_PERFORM", "KW_GET", "KW_DIAGNOSTICS", 
        "KW_STACKED", "KW_ELSIF", "KW_WHILE", "KW_REVERSE", "KW_FOREACH", 
        "KW_SLICE", "KW_EXIT", "KW_RETURN", "KW_QUERY", "KW_RAISE", "KW_SQLSTATE", 
        "KW_DEBUG", "KW_LOG", "KW_INFO", "KW_NOTICE", "KW_WARNING", "KW_EXCEPTION", 
        "KW_ASSERT", "KW_LOOP", "KW_OPEN", "KW_PEFERENCES", "KW_USAGE", 
        "KW_CONNECT", "KW_PUBLIC", "KW_MERGE", "KW_MATCHED", "KW_BREADTH", 
        "KW_DEPTH", "KW_UNSAFE", "KW_RESTRICTED", "KW_SAFE", "KW_FINALIZE", 
        "KW_MODULUS", "KW_REMAINDER", "KW_LOGIN", "KW_NOLOGIN", "KW_REPLICATION", 
        "KW_NOREPLICATION", "KW_BYPASSRLS", "KW_NOBYPASSRLS", "KW_PERMISSIVE", 
        "KW_RESTRICTIVE", "KW_COMPRESSION", "KW_PLAIN", "KW_EXTENDED", "KW_MAIN", 
        "KW_SKIP_LOCKED", "KW_BUFFER_USAGE_LIMIT", "Identifier", "QuotedIdentifier", 
        "UnterminatedQuotedIdentifier", "InvalidQuotedIdentifier", "InvalidUnterminatedQuotedIdentifier", 
        "UnicodeQuotedIdentifier", "UnterminatedUnicodeQuotedIdentifier", 
        "InvalidUnicodeQuotedIdentifier", "InvalidUnterminatedUnicodeQuotedIdentifier", 
        "StringConstant", "UnterminatedStringConstant", "UnicodeEscapeStringConstant", 
        "UnterminatedUnicodeEscapeStringConstant", "BeginDollarStringConstant", 
        "BinaryStringConstant", "UnterminatedBinaryStringConstant", "InvalidBinaryStringConstant", 
        "InvalidUnterminatedBinaryStringConstant", "HexadecimalStringConstant", 
        "UnterminatedHexadecimalStringConstant", "InvalidHexadecimalStringConstant", 
        "InvalidUnterminatedHexadecimalStringConstant", "Integral", "NumericFail", 
        "Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", "Whitespace", 
        "Newline", "LineComment", "BlockComment", "UnterminatedBlockComment", 
        "MetaCommand", "EndMetaCommand", "ErrorCharacter", "EscapeStringConstant", 
        "UnterminatedEscapeStringConstant", "InvalidEscapeStringConstant", 
        "InvalidUnterminatedEscapeStringConstant", "DollarText", "EndDollarStringConstant", 
        "AfterEscapeStringConstantWithNewlineMode_Continued"
    ];
    public static readonly ruleNames = [
        "program", "singleStmt", "stmt", "callstmt", "createrolestmt", "alteroptroleelem", 
        "createoptroleelem", "createuserstmt", "alterrolestmt", "alterrolesetstmt", 
        "alterroutinestmt", "alter_routine_cluase", "routine_action", "creategroupstmt", 
        "altergroupstmt", "createschemastmt", "schema_name_create", "schema_stmt", 
        "variablesetstmt", "set_rest", "generic_set", "set_rest_more", "var_name", 
        "var_list", "var_value", "iso_level", "opt_boolean_or_string_column", 
        "opt_boolean_or_string", "zone_value", "nonreservedword_or_sconst", 
        "variableresetstmt", "reset_rest", "setresetclause", "functionsetresetclause", 
        "variableshowstmt", "constraintssetstmt", "checkpointstmt", "discardstmt", 
        "altertablestmt", "alter_table_cmds", "partition_bound_spec", "partition_bound_cluase", 
        "partition_bound_choose", "partition_with_cluase", "partition_cmd", 
        "index_partition_cmd", "alter_table_cmd", "alter_column_default", 
        "opt_drop_behavior", "opt_collate_clause", "reloptions", "opt_reloptions", 
        "reloption_elem", "partitionboundspec", "altercompositetypestmt", 
        "alter_type_cmd", "closeportalstmt", "copystmt", "copy_options", 
        "copy_generic_opt_elem", "createstmt", "opttemp", "opttypedtableelementlist", 
        "tableelementlist", "tableelement", "typedtableelement", "column_def", 
        "colconstraint", "colconstraintelem", "generated_when", "tablelikeoption", 
        "constraintelem", "opt_column_list", "opt_column_list_create", "column_list", 
        "opt_c_include", "key_match", "exclusionconstraintelem", "key_actions", 
        "key_update", "key_delete", "key_action", "optinherit", "partitionspec", 
        "part_elem", "table_access_method_clause", "optwith", "oncommitoption", 
        "opttablespace", "optconstablespace", "existingindex", "createstatsstmt", 
        "alterstatsstmt", "createasstmt", "create_as_target", "opt_with_data", 
        "creatematviewstmt", "refreshmatviewstmt", "createseqstmt", "alterseqstmt", 
        "seqoptelem", "numericonly", "createplangstmt", "createtablespacestmt", 
        "createextensionstmt", "alterextensionstmt", "alterextensioncontentsstmt", 
        "createfdwstmt", "fdw_option", "alterfdwstmt", "create_generic_options", 
        "alter_generic_options", "alter_generic_option_elem", "generic_option_elem", 
        "createforeignserverstmt", "foreign_server_version", "alterforeignserverstmt", 
        "createforeigntablestmt", "importforeignschemastmt", "createusermappingstmt", 
        "alterusermappingstmt", "createpolicystmt", "alterpolicystmt", "alterprocedurestmt", 
        "procedure_action", "rowsecurityoptionalexpr", "rowsecurityoptionalwithcheck", 
        "createamstmt", "createtrigstmt", "triggeractiontime", "triggerevents", 
        "triggeroneevent", "triggerwhen", "function_or_procedure", "triggerfuncargs", 
        "triggerfuncarg", "constraintattributeElem", "createeventtrigstmt", 
        "event_trigger_when_item", "altereventtrigstmt", "createassertionstmt", 
        "definestmt", "definition", "def_elem", "def_arg", "old_aggr_elem", 
        "alterenumstmt", "opt_if_not_exists", "createopclassstmt", "opclass_item", 
        "createopfamilystmt", "alteropfamilystmt", "opclass_drop", "reassignownedstmt", 
        "dropstmt", "object_type_any_name", "object_type_name", "any_name_list", 
        "any_name", "attrs", "truncatestmt", "truncate_table", "commentstmt", 
        "seclabelstmt", "fetchstmt", "fetch_args", "from_in", "grantstmt", 
        "revokestmt", "privileges", "beforeprivilegeselect", "privilege", 
        "privilege_target", "grantee_list", "grantrolestmt", "revokerolestmt", 
        "alterdefaultprivilegesstmt", "defaclaction", "defacl_privilege_target", 
        "indexstmt", "index_params", "index_elem", "createfunctionstmt", 
        "opt_or_replace", "func_args", "func_args_list", "routine_with_argtypes_list", 
        "routine_with_argtypes", "procedure_with_argtypes_list", "procedure_with_argtypes", 
        "function_with_argtypes_list", "function_with_argtypes", "func_arg", 
        "arg_class", "func_type", "func_arg_with_default", "aggr_args", 
        "aggregate_with_argtypes", "common_func_opt_item", "createfunc_opt_item", 
        "opt_definition", "table_func_column", "alterfunctionstmt", "removefuncstmt", 
        "removeaggrstmt", "removeoperstmt", "oper_argtypes", "any_operator", 
        "operator_with_argtypes", "dostmt", "createcaststmt", "opt_if_exists", 
        "createtransformstmt", "sql_with_function", "reindexstmt", "altertblspcstmt", 
        "renamestmt", "alterobjectdependsstmt", "alterobjectschemastmt", 
        "alteroperatorstmt", "operator_def_list", "operator_def_elem", "altertypestmt", 
        "alterownerstmt", "createpublicationstmt", "alterpublicationstmt", 
        "createsubscriptionstmt", "altersubscriptionstmt", "rulestmt", "ruleactionstmt", 
        "notifystmt", "notify_payload", "listenstmt", "unlistenstmt", "transactionstmt", 
        "opt_transaction", "transaction_mode_item", "transaction_mode_list", 
        "viewstmt", "loadstmt", "createdbstmt", "createdb_opt_item", "alterdatabasestmt", 
        "alterdatabasesetstmt", "altercollationstmt", "altersystemstmt", 
        "createdomainstmt", "alterdomainstmt", "altertsdictionarystmt", 
        "altertsconfigurationstmt", "createconversionstmt", "clusterstmt", 
        "vacuumstmt", "analyzestmt", "analyze_keyword", "vac_analyze_option_elem", 
        "analyze_option_elem", "opt_verbose", "vacuum_relation", "vacuum_relation_list", 
        "explainstmt", "explainablestmt", "explain_option_list", "preparestmt", 
        "prep_type_clause", "preparablestmt", "executestmt", "execute_param_clause", 
        "deallocatestmt", "insertstmt", "insert_rest", "insert_column_list", 
        "insert_column_item", "returning_clause", "deletestmt", "lockstmt", 
        "updatestmt", "set_clause_list", "set_clause", "declarecursorstmt", 
        "selectstmt", "select_with_parens", "select_no_parens", "select_clause", 
        "simple_select", "set_operator_with_all_or_distinct", "with_clause", 
        "common_table_expr", "search_cluase", "cycle_cluase", "into_clause", 
        "opttempTableName", "distinct_clause", "sort_clause", "sortby", 
        "select_limit", "limit_clause", "fetch_clause", "offset_clause", 
        "select_fetch_first_value", "group_clause", "group_by_list", "group_by_item", 
        "for_locking_clause", "values_clause", "from_clause", "from_list", 
        "table_ref", "alias_clause", "func_alias_clause", "join_type", "join_qual", 
        "relation_expr", "publication_relation_expr", "relation_expr_list", 
        "relation_expr_opt_alias", "tablesample_clause", "func_table", "rowsfrom_item", 
        "where_clause", "where_or_current_clause", "tablefuncelementlist", 
        "tablefuncelement", "xmltable", "xmltable_column_el", "xml_namespace_el", 
        "typename", "simpletypename", "consttypename", "numeric", "opt_float", 
        "bit", "character", "constdatetime", "opt_interval", "interval_second", 
        "comparisonOperator", "expression", "booleanExpression", "predicate", 
        "valueExpression", "primaryExpression", "func_application", "func_expr", 
        "func_expr_windowless", "func_expr_common_subexpr", "xml_attribute_list", 
        "xml_attribute_el", "document_or_content", "xmlexists_argument", 
        "xml_passing_mech", "window_clause", "window_definition", "over_clause", 
        "window_specification", "opt_frame_clause", "frame_bound", "row", 
        "explicit_row", "sub_type", "all_op", "mathop", "qual_op", "qual_all_op", 
        "subquery_Op", "expr_list", "column_expr", "column_expr_noparen", 
        "func_arg_list", "func_arg_expr", "array_expr", "extract_arg", "unicode_normal_form", 
        "substr_list", "when_clause", "indirection_el", "indirection", "opt_indirection", 
        "target_list", "target_el", "qualified_name_list", "table_name_list", 
        "schema_name_list", "database_nameList", "tablespace_name_create", 
        "tablespace_name", "table_name_create", "table_name", "view_name_create", 
        "view_name", "qualified_name", "tablespace_name_list", "name_list", 
        "database_name_create", "database_name", "schema_name", "routine_name_create", 
        "routine_name", "procedure_name", "procedure_name_create", "column_name", 
        "column_name_create", "function_name_create", "function_name", "sconst", 
        "anysconst", "signediconst", "rolespec", "role_list", "colid", "type_function_name", 
        "nonreservedword", "collabel", "identifier", "unreserved_keyword", 
        "col_name_keyword", "type_func_name_keyword", "reserved_keyword", 
        "pl_block", "label_decl", "decl_statement", "decl_cursor_arg", "assign_operator", 
        "proc_stmt", "stmt_perform", "stmt_call", "stmt_assign", "stmt_getdiag", 
        "getdiag_list_item", "assign_var", "stmt_if", "stmt_else", "stmt_case", 
        "stmt_loop_while_for", "for_control", "stmt_foreach_a", "stmt_exit", 
        "stmt_return", "stmt_raise", "opt_raise_using_elem", "stmt_assert", 
        "loop_body", "stmt_execsql", "stmt_dynexecute", "opt_execute_into", 
        "stmt_open", "opt_open_bound_list_item", "stmt_fetch", "opt_fetch_direction", 
        "stmt_move", "mergestmt", "data_source", "merge_when_clause", "merge_insert", 
        "merge_update", "default_values_or_values", "exprofdefault", "stmt_close", 
        "stmt_null", "stmt_commit_or_rollback", "stmt_set", "cursor_variable", 
        "exception_sect", "proc_condition", "any_identifier", "sql_expression",
    ];

    public get grammarFileName(): string { return "PostgreSqlParser.g4"; }
    public get literalNames(): (string | null)[] { return PostgreSqlParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return PostgreSqlParser.symbolicNames; }
    public get ruleNames(): string[] { return PostgreSqlParser.ruleNames; }
    public get serializedATN(): number[] { return PostgreSqlParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, PostgreSqlParser._ATN, PostgreSqlParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public program(): ProgramContext {
        let localContext = new ProgramContext(this.context, this.state);
        this.enterRule(localContext, 0, PostgreSqlParser.RULE_program);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 935;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 2 || _la === 31 || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 570441729) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 142606337) !== 0) || _la === 105 || _la === 129 || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & 2159673601) !== 0) || ((((_la - 177)) & ~0x1F) === 0 && ((1 << (_la - 177)) & 100680739) !== 0) || ((((_la - 241)) & ~0x1F) === 0 && ((1 << (_la - 241)) & 1090557953) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 679839745) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 272417) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 6401) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4196353) !== 0) || _la === 454 || _la === 525 || _la === 581) {
                {
                {
                this.state = 932;
                this.singleStmt();
                }
                }
                this.state = 937;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 938;
            this.match(PostgreSqlParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleStmt(): SingleStmtContext {
        let localContext = new SingleStmtContext(this.context, this.state);
        this.enterRule(localContext, 2, PostgreSqlParser.RULE_singleStmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 940;
            this.stmt();
            this.state = 942;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 7) {
                {
                this.state = 941;
                this.match(PostgreSqlParser.SEMI);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt(): StmtContext {
        let localContext = new StmtContext(this.context, this.state);
        this.enterRule(localContext, 4, PostgreSqlParser.RULE_stmt);
        let _la: number;
        try {
            this.state = 1064;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 944;
                this.altereventtrigstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 945;
                this.altercollationstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 946;
                this.alterdatabasestmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 947;
                this.alterdatabasesetstmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 948;
                this.alterdefaultprivilegesstmt();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 949;
                this.alterdomainstmt();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 950;
                this.alterenumstmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 951;
                this.alterextensionstmt();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 952;
                this.alterextensioncontentsstmt();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 953;
                this.alterfdwstmt();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 954;
                this.alterforeignserverstmt();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 955;
                this.alterfunctionstmt();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 956;
                this.altergroupstmt();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 957;
                this.alterobjectdependsstmt();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 958;
                this.alterobjectschemastmt();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 959;
                this.alterownerstmt();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 960;
                this.alteroperatorstmt();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 961;
                this.altertypestmt();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 962;
                this.alterpolicystmt();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 963;
                this.alterprocedurestmt();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 964;
                this.alterseqstmt();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 965;
                this.altersystemstmt();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 966;
                this.altertablestmt();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 967;
                this.altertblspcstmt();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 968;
                this.altercompositetypestmt();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 969;
                this.alterpublicationstmt();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 970;
                this.alterrolesetstmt();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 971;
                this.alterroutinestmt();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 972;
                this.alterrolestmt();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 973;
                this.altersubscriptionstmt();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 974;
                this.alterstatsstmt();
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 975;
                this.altertsconfigurationstmt();
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 976;
                this.altertsdictionarystmt();
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 977;
                this.alterusermappingstmt();
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 978;
                this.analyzestmt();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 979;
                this.callstmt();
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 980;
                this.checkpointstmt();
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 981;
                this.closeportalstmt();
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 982;
                this.clusterstmt();
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 983;
                this.commentstmt();
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 984;
                this.constraintssetstmt();
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 985;
                this.copystmt();
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 986;
                this.createamstmt();
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 987;
                this.createasstmt();
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 988;
                this.createassertionstmt();
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 989;
                this.createcaststmt();
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 990;
                this.createconversionstmt();
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 991;
                this.createdomainstmt();
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 992;
                this.createextensionstmt();
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 993;
                this.createfdwstmt();
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 994;
                this.createforeignserverstmt();
                }
                break;
            case 52:
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 995;
                this.createforeigntablestmt();
                }
                break;
            case 53:
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 996;
                this.createfunctionstmt();
                }
                break;
            case 54:
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 997;
                this.creategroupstmt();
                }
                break;
            case 55:
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 998;
                this.creatematviewstmt();
                }
                break;
            case 56:
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 999;
                this.createopclassstmt();
                }
                break;
            case 57:
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 1000;
                this.createopfamilystmt();
                }
                break;
            case 58:
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 1001;
                this.createpublicationstmt();
                }
                break;
            case 59:
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 1002;
                this.alteropfamilystmt();
                }
                break;
            case 60:
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 1003;
                this.createpolicystmt();
                }
                break;
            case 61:
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 1004;
                this.createplangstmt();
                }
                break;
            case 62:
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 1005;
                this.createschemastmt();
                }
                break;
            case 63:
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 1006;
                this.createseqstmt();
                }
                break;
            case 64:
                this.enterOuterAlt(localContext, 64);
                {
                this.state = 1007;
                this.createstmt();
                }
                break;
            case 65:
                this.enterOuterAlt(localContext, 65);
                {
                this.state = 1008;
                this.createsubscriptionstmt();
                }
                break;
            case 66:
                this.enterOuterAlt(localContext, 66);
                {
                this.state = 1009;
                this.createstatsstmt();
                }
                break;
            case 67:
                this.enterOuterAlt(localContext, 67);
                {
                this.state = 1010;
                this.createtablespacestmt();
                }
                break;
            case 68:
                this.enterOuterAlt(localContext, 68);
                {
                this.state = 1011;
                this.createtransformstmt();
                }
                break;
            case 69:
                this.enterOuterAlt(localContext, 69);
                {
                this.state = 1012;
                this.createtrigstmt();
                }
                break;
            case 70:
                this.enterOuterAlt(localContext, 70);
                {
                this.state = 1013;
                this.createeventtrigstmt();
                }
                break;
            case 71:
                this.enterOuterAlt(localContext, 71);
                {
                this.state = 1014;
                this.createrolestmt();
                }
                break;
            case 72:
                this.enterOuterAlt(localContext, 72);
                {
                this.state = 1015;
                this.createuserstmt();
                }
                break;
            case 73:
                this.enterOuterAlt(localContext, 73);
                {
                this.state = 1016;
                this.createusermappingstmt();
                }
                break;
            case 74:
                this.enterOuterAlt(localContext, 74);
                {
                this.state = 1017;
                this.createdbstmt();
                }
                break;
            case 75:
                this.enterOuterAlt(localContext, 75);
                {
                this.state = 1018;
                this.deallocatestmt();
                }
                break;
            case 76:
                this.enterOuterAlt(localContext, 76);
                {
                this.state = 1019;
                this.declarecursorstmt();
                }
                break;
            case 77:
                this.enterOuterAlt(localContext, 77);
                {
                this.state = 1020;
                this.definestmt();
                }
                break;
            case 78:
                this.enterOuterAlt(localContext, 78);
                {
                this.state = 1021;
                this.deletestmt();
                }
                break;
            case 79:
                this.enterOuterAlt(localContext, 79);
                {
                this.state = 1022;
                this.discardstmt();
                }
                break;
            case 80:
                this.enterOuterAlt(localContext, 80);
                {
                this.state = 1023;
                this.dostmt();
                }
                break;
            case 81:
                this.enterOuterAlt(localContext, 81);
                {
                this.state = 1024;
                this.dropstmt();
                }
                break;
            case 82:
                this.enterOuterAlt(localContext, 82);
                {
                this.state = 1025;
                this.executestmt();
                }
                break;
            case 83:
                this.enterOuterAlt(localContext, 83);
                {
                this.state = 1026;
                this.explainstmt();
                }
                break;
            case 84:
                this.enterOuterAlt(localContext, 84);
                {
                this.state = 1027;
                this.fetchstmt();
                }
                break;
            case 85:
                this.enterOuterAlt(localContext, 85);
                {
                this.state = 1028;
                this.grantstmt();
                }
                break;
            case 86:
                this.enterOuterAlt(localContext, 86);
                {
                this.state = 1029;
                this.grantrolestmt();
                }
                break;
            case 87:
                this.enterOuterAlt(localContext, 87);
                {
                this.state = 1030;
                this.mergestmt();
                }
                break;
            case 88:
                this.enterOuterAlt(localContext, 88);
                {
                this.state = 1031;
                this.importforeignschemastmt();
                }
                break;
            case 89:
                this.enterOuterAlt(localContext, 89);
                {
                this.state = 1032;
                this.indexstmt();
                }
                break;
            case 90:
                this.enterOuterAlt(localContext, 90);
                {
                this.state = 1033;
                this.insertstmt();
                }
                break;
            case 91:
                this.enterOuterAlt(localContext, 91);
                {
                this.state = 1034;
                this.listenstmt();
                }
                break;
            case 92:
                this.enterOuterAlt(localContext, 92);
                {
                this.state = 1035;
                this.refreshmatviewstmt();
                }
                break;
            case 93:
                this.enterOuterAlt(localContext, 93);
                {
                this.state = 1036;
                this.loadstmt();
                }
                break;
            case 94:
                this.enterOuterAlt(localContext, 94);
                {
                this.state = 1037;
                this.lockstmt();
                }
                break;
            case 95:
                this.enterOuterAlt(localContext, 95);
                {
                this.state = 1038;
                this.notifystmt();
                }
                break;
            case 96:
                this.enterOuterAlt(localContext, 96);
                {
                this.state = 1039;
                this.preparestmt();
                }
                break;
            case 97:
                this.enterOuterAlt(localContext, 97);
                {
                this.state = 1040;
                this.reassignownedstmt();
                }
                break;
            case 98:
                this.enterOuterAlt(localContext, 98);
                {
                this.state = 1041;
                this.reindexstmt();
                }
                break;
            case 99:
                this.enterOuterAlt(localContext, 99);
                {
                this.state = 1042;
                this.removeaggrstmt();
                }
                break;
            case 100:
                this.enterOuterAlt(localContext, 100);
                {
                this.state = 1043;
                this.removefuncstmt();
                }
                break;
            case 101:
                this.enterOuterAlt(localContext, 101);
                {
                this.state = 1044;
                this.removeoperstmt();
                }
                break;
            case 102:
                this.enterOuterAlt(localContext, 102);
                {
                this.state = 1045;
                this.renamestmt();
                }
                break;
            case 103:
                this.enterOuterAlt(localContext, 103);
                {
                this.state = 1046;
                this.revokestmt();
                }
                break;
            case 104:
                this.enterOuterAlt(localContext, 104);
                {
                this.state = 1047;
                this.revokerolestmt();
                }
                break;
            case 105:
                this.enterOuterAlt(localContext, 105);
                {
                this.state = 1048;
                this.rulestmt();
                }
                break;
            case 106:
                this.enterOuterAlt(localContext, 106);
                {
                this.state = 1049;
                this.seclabelstmt();
                }
                break;
            case 107:
                this.enterOuterAlt(localContext, 107);
                {
                this.state = 1050;
                this.selectstmt();
                }
                break;
            case 108:
                this.enterOuterAlt(localContext, 108);
                {
                this.state = 1051;
                this.transactionstmt();
                }
                break;
            case 109:
                this.enterOuterAlt(localContext, 109);
                {
                this.state = 1052;
                this.truncatestmt();
                }
                break;
            case 110:
                this.enterOuterAlt(localContext, 110);
                {
                this.state = 1053;
                this.unlistenstmt();
                }
                break;
            case 111:
                this.enterOuterAlt(localContext, 111);
                {
                this.state = 1054;
                this.updatestmt();
                }
                break;
            case 112:
                this.enterOuterAlt(localContext, 112);
                {
                this.state = 1055;
                this.vacuumstmt();
                }
                break;
            case 113:
                this.enterOuterAlt(localContext, 113);
                {
                this.state = 1056;
                this.variableresetstmt();
                }
                break;
            case 114:
                this.enterOuterAlt(localContext, 114);
                {
                this.state = 1057;
                this.variablesetstmt();
                }
                break;
            case 115:
                this.enterOuterAlt(localContext, 115);
                {
                this.state = 1058;
                this.variableshowstmt();
                }
                break;
            case 116:
                this.enterOuterAlt(localContext, 116);
                {
                this.state = 1059;
                this.viewstmt();
                }
                break;
            case 117:
                this.enterOuterAlt(localContext, 117);
                {
                this.state = 1060;
                this.match(PostgreSqlParser.MetaCommand);
                this.state = 1062;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 582) {
                    {
                    this.state = 1061;
                    this.match(PostgreSqlParser.EndMetaCommand);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callstmt(): CallstmtContext {
        let localContext = new CallstmtContext(this.context, this.state);
        this.enterRule(localContext, 6, PostgreSqlParser.RULE_callstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1066;
            this.match(PostgreSqlParser.KW_CALL);
            this.state = 1067;
            this.func_application();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createrolestmt(): CreaterolestmtContext {
        let localContext = new CreaterolestmtContext(this.context, this.state);
        this.enterRule(localContext, 8, PostgreSqlParser.RULE_createrolestmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1069;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 1070;
            this.match(PostgreSqlParser.KW_ROLE);
            this.state = 1071;
            this.rolespec();
            this.state = 1073;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 4, this.context) ) {
            case 1:
                {
                this.state = 1072;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 1078;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 5, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1075;
                    this.createoptroleelem();
                    }
                    }
                }
                this.state = 1080;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 5, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alteroptroleelem(): AlteroptroleelemContext {
        let localContext = new AlteroptroleelemContext(this.context, this.state);
        this.enterRule(localContext, 10, PostgreSqlParser.RULE_alteroptroleelem);
        let _la: number;
        try {
            this.state = 1119;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 7, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1081;
                this.match(PostgreSqlParser.KW_PASSWORD);
                this.state = 1084;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 1082;
                    this.sconst();
                    }
                    break;
                case PostgreSqlParser.KW_NULL:
                    {
                    this.state = 1083;
                    this.match(PostgreSqlParser.KW_NULL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1086;
                _la = this.tokenStream.LA(1);
                if(!(_la === 195 || _la === 364)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1087;
                this.match(PostgreSqlParser.KW_PASSWORD);
                this.state = 1088;
                this.sconst();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1089;
                this.match(PostgreSqlParser.KW_INHERIT);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1090;
                this.match(PostgreSqlParser.KW_NOINHERIT);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1091;
                this.match(PostgreSqlParser.KW_CREATEUSER);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1092;
                this.match(PostgreSqlParser.KW_NOCREATEUSER);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1093;
                this.match(PostgreSqlParser.KW_CREATEROLE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1094;
                this.match(PostgreSqlParser.KW_NOCREATEROLE);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1095;
                this.match(PostgreSqlParser.KW_CREATEDB);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1096;
                this.match(PostgreSqlParser.KW_NOCREATEDB);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1097;
                this.match(PostgreSqlParser.KW_SUPERUSER);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1098;
                this.match(PostgreSqlParser.KW_NOSUPERUSER);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1099;
                this.match(PostgreSqlParser.KW_LOGIN);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1100;
                this.match(PostgreSqlParser.KW_NOLOGIN);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1101;
                this.match(PostgreSqlParser.KW_REPLICATION);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1102;
                this.match(PostgreSqlParser.KW_NOREPLICATION);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1103;
                this.match(PostgreSqlParser.KW_BYPASSRLS);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1104;
                this.match(PostgreSqlParser.KW_NOBYPASSRLS);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1105;
                this.match(PostgreSqlParser.KW_CONNECTION);
                this.state = 1106;
                this.match(PostgreSqlParser.KW_LIMIT);
                this.state = 1107;
                this.signediconst();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1108;
                this.match(PostgreSqlParser.KW_VALID);
                this.state = 1109;
                this.match(PostgreSqlParser.KW_UNTIL);
                this.state = 1110;
                this.sconst();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1111;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1112;
                _la = this.tokenStream.LA(1);
                if(!(_la === 66 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1113;
                this.name_list();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1114;
                _la = this.tokenStream.LA(1);
                if(!(_la === 99 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1115;
                this.role_list();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 1116;
                this.match(PostgreSqlParser.KW_ADMIN);
                this.state = 1117;
                this.name_list();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 1118;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createoptroleelem(): CreateoptroleelemContext {
        let localContext = new CreateoptroleelemContext(this.context, this.state);
        this.enterRule(localContext, 12, PostgreSqlParser.RULE_createoptroleelem);
        let _la: number;
        try {
            this.state = 1129;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 8, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1121;
                this.alteroptroleelem();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1122;
                this.match(PostgreSqlParser.KW_SYSID);
                this.state = 1123;
                this.match(PostgreSqlParser.Integral);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1124;
                _la = this.tokenStream.LA(1);
                if(!(_la === 134 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1125;
                this.role_list();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1126;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1127;
                _la = this.tokenStream.LA(1);
                if(!(_la === 66 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1128;
                this.role_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createuserstmt(): CreateuserstmtContext {
        let localContext = new CreateuserstmtContext(this.context, this.state);
        this.enterRule(localContext, 14, PostgreSqlParser.RULE_createuserstmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1131;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 1132;
            this.match(PostgreSqlParser.KW_USER);
            this.state = 1133;
            this.rolespec();
            this.state = 1135;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 9, this.context) ) {
            case 1:
                {
                this.state = 1134;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 1140;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 10, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1137;
                    this.createoptroleelem();
                    }
                    }
                }
                this.state = 1142;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 10, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterrolestmt(): AlterrolestmtContext {
        let localContext = new AlterrolestmtContext(this.context, this.state);
        this.enterRule(localContext, 16, PostgreSqlParser.RULE_alterrolestmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1143;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 1144;
            _la = this.tokenStream.LA(1);
            if(!(_la === 99 || _la === 318)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1145;
            this.rolespec();
            this.state = 1147;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 11, this.context) ) {
            case 1:
                {
                this.state = 1146;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 1152;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 12, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1149;
                    this.alteroptroleelem();
                    }
                    }
                }
                this.state = 1154;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 12, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterrolesetstmt(): AlterrolesetstmtContext {
        let localContext = new AlterrolesetstmtContext(this.context, this.state);
        this.enterRule(localContext, 18, PostgreSqlParser.RULE_alterrolesetstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1155;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 1156;
            _la = this.tokenStream.LA(1);
            if(!(_la === 99 || _la === 318)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1159;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 1157;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 1158;
                this.rolespec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1161;
            this.match(PostgreSqlParser.KW_IN);
            this.state = 1162;
            this.match(PostgreSqlParser.KW_DATABASE);
            this.state = 1163;
            this.database_name();
            this.state = 1164;
            this.setresetclause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterroutinestmt(): AlterroutinestmtContext {
        let localContext = new AlterroutinestmtContext(this.context, this.state);
        this.enterRule(localContext, 20, PostgreSqlParser.RULE_alterroutinestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1166;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 1167;
            this.match(PostgreSqlParser.KW_ROUTINE);
            this.state = 1168;
            this.routine_name();
            this.state = 1170;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 1169;
                this.func_args();
                }
            }

            this.state = 1172;
            this.alter_routine_cluase();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_routine_cluase(): Alter_routine_cluaseContext {
        let localContext = new Alter_routine_cluaseContext(this.context, this.state);
        this.enterRule(localContext, 22, PostgreSqlParser.RULE_alter_routine_cluase);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1200;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 18, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1174;
                this.routine_action();
                this.state = 1178;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 15, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1175;
                        this.routine_action();
                        }
                        }
                    }
                    this.state = 1180;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 15, this.context);
                }
                this.state = 1182;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 16, this.context) ) {
                case 1:
                    {
                    this.state = 1181;
                    this.match(PostgreSqlParser.KW_RESTRICT);
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1184;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 1185;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 1186;
                this.routine_name_create();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1187;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 1188;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 1189;
                this.rolespec();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1190;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1191;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 1192;
                this.schema_name_create();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1194;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 1193;
                    this.match(PostgreSqlParser.KW_NO);
                    }
                }

                this.state = 1196;
                this.match(PostgreSqlParser.KW_DEPENDS);
                this.state = 1197;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 1198;
                this.match(PostgreSqlParser.KW_EXTENSION);
                this.state = 1199;
                this.colid();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routine_action(): Routine_actionContext {
        let localContext = new Routine_actionContext(this.context, this.state);
        this.enterRule(localContext, 24, PostgreSqlParser.RULE_routine_action);
        let _la: number;
        try {
            this.state = 1244;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1202;
                this.match(PostgreSqlParser.KW_IMMUTABLE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1203;
                this.match(PostgreSqlParser.KW_STABLE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1204;
                this.match(PostgreSqlParser.KW_VOLATILE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1206;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 1205;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 1208;
                this.match(PostgreSqlParser.KW_LEAKPROOF);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1219;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 22, this.context) ) {
                case 1:
                    {
                    this.state = 1210;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 205) {
                        {
                        this.state = 1209;
                        this.match(PostgreSqlParser.KW_EXTERNAL);
                        }
                    }

                    this.state = 1212;
                    this.match(PostgreSqlParser.KW_SECURITY);
                    this.state = 1213;
                    this.match(PostgreSqlParser.KW_INVOKER);
                    }
                    break;
                case 2:
                    {
                    this.state = 1215;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 205) {
                        {
                        this.state = 1214;
                        this.match(PostgreSqlParser.KW_EXTERNAL);
                        }
                    }

                    this.state = 1217;
                    this.match(PostgreSqlParser.KW_SECURITY);
                    this.state = 1218;
                    this.match(PostgreSqlParser.KW_DEFINER);
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1221;
                this.match(PostgreSqlParser.KW_PARALLEL);
                this.state = 1222;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 529)) & ~0x1F) === 0 && ((1 << (_la - 529)) & 7) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1223;
                this.match(PostgreSqlParser.KW_COST);
                this.state = 1224;
                this.collabel();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1225;
                this.match(PostgreSqlParser.KW_ROWS);
                this.state = 1226;
                this.colid();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1227;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1228;
                this.colid();
                this.state = 1229;
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 94)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1232;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 23, this.context) ) {
                case 1:
                    {
                    this.state = 1230;
                    this.colid();
                    }
                    break;
                case 2:
                    {
                    this.state = 1231;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1234;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1235;
                this.colid();
                this.state = 1236;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 1237;
                this.match(PostgreSqlParser.KW_CURRENT);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1239;
                this.match(PostgreSqlParser.KW_RESET);
                this.state = 1242;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 1240;
                    this.colid();
                    }
                    break;
                case PostgreSqlParser.KW_ALL:
                    {
                    this.state = 1241;
                    this.match(PostgreSqlParser.KW_ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public creategroupstmt(): CreategroupstmtContext {
        let localContext = new CreategroupstmtContext(this.context, this.state);
        this.enterRule(localContext, 26, PostgreSqlParser.RULE_creategroupstmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1246;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 1247;
            this.match(PostgreSqlParser.KW_GROUP);
            this.state = 1248;
            this.rolespec();
            this.state = 1250;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 26, this.context) ) {
            case 1:
                {
                this.state = 1249;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 1255;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 27, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1252;
                    this.createoptroleelem();
                    }
                    }
                }
                this.state = 1257;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 27, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altergroupstmt(): AltergroupstmtContext {
        let localContext = new AltergroupstmtContext(this.context, this.state);
        this.enterRule(localContext, 28, PostgreSqlParser.RULE_altergroupstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1258;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 1259;
            this.match(PostgreSqlParser.KW_GROUP);
            this.state = 1260;
            this.rolespec();
            this.state = 1261;
            _la = this.tokenStream.LA(1);
            if(!(_la === 133 || _la === 191)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1262;
            this.match(PostgreSqlParser.KW_USER);
            this.state = 1263;
            this.role_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createschemastmt(): CreateschemastmtContext {
        let localContext = new CreateschemastmtContext(this.context, this.state);
        this.enterRule(localContext, 30, PostgreSqlParser.RULE_createschemastmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1265;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 1266;
            this.match(PostgreSqlParser.KW_SCHEMA);
            this.state = 1268;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 28, this.context) ) {
            case 1:
                {
                this.state = 1267;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 1276;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 30, this.context) ) {
            case 1:
                {
                this.state = 1271;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                    {
                    this.state = 1270;
                    this.schema_name_create();
                    }
                }

                this.state = 1273;
                this.match(PostgreSqlParser.KW_AUTHORIZATION);
                this.state = 1274;
                this.rolespec();
                }
                break;
            case 2:
                {
                this.state = 1275;
                this.schema_name_create();
                }
                break;
            }
            this.state = 1281;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 31, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1278;
                    this.schema_stmt();
                    }
                    }
                }
                this.state = 1283;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 31, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schema_name_create(): Schema_name_createContext {
        let localContext = new Schema_name_createContext(this.context, this.state);
        this.enterRule(localContext, 32, PostgreSqlParser.RULE_schema_name_create);
        try {
            localContext = new SchemaNameCreateContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1284;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schema_stmt(): Schema_stmtContext {
        let localContext = new Schema_stmtContext(this.context, this.state);
        this.enterRule(localContext, 34, PostgreSqlParser.RULE_schema_stmt);
        try {
            this.state = 1292;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 32, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1286;
                this.createstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1287;
                this.indexstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1288;
                this.createseqstmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1289;
                this.createtrigstmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1290;
                this.grantstmt();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1291;
                this.viewstmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variablesetstmt(): VariablesetstmtContext {
        let localContext = new VariablesetstmtContext(this.context, this.state);
        this.enterRule(localContext, 36, PostgreSqlParser.RULE_variablesetstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1294;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 1296;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 33, this.context) ) {
            case 1:
                {
                this.state = 1295;
                _la = this.tokenStream.LA(1);
                if(!(_la === 254 || _la === 332)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 1298;
            this.set_rest();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_rest(): Set_restContext {
        let localContext = new Set_restContext(this.context, this.state);
        this.enterRule(localContext, 38, PostgreSqlParser.RULE_set_rest);
        try {
            this.state = 1308;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 34, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1300;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 1301;
                this.transaction_mode_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1302;
                this.match(PostgreSqlParser.KW_SESSION);
                this.state = 1303;
                this.match(PostgreSqlParser.KW_CHARACTERISTICS);
                this.state = 1304;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 1305;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 1306;
                this.transaction_mode_list();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1307;
                this.set_rest_more();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generic_set(): Generic_setContext {
        let localContext = new Generic_setContext(this.context, this.state);
        this.enterRule(localContext, 40, PostgreSqlParser.RULE_generic_set);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1312;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 1310;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 1311;
                this.var_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1315;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10 || _la === 94) {
                {
                this.state = 1314;
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 94)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1319;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 37, this.context) ) {
            case 1:
                {
                this.state = 1317;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            case 2:
                {
                this.state = 1318;
                this.var_list();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_rest_more(): Set_rest_moreContext {
        let localContext = new Set_rest_moreContext(this.context, this.state);
        this.enterRule(localContext, 42, PostgreSqlParser.RULE_set_rest_more);
        try {
            this.state = 1349;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 39, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1321;
                this.match(PostgreSqlParser.KW_TIME);
                this.state = 1322;
                this.match(PostgreSqlParser.KW_ZONE);
                this.state = 1323;
                this.zone_value();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1324;
                this.match(PostgreSqlParser.KW_CATALOG);
                this.state = 1325;
                this.sconst();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1326;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 1327;
                this.schema_name();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1328;
                this.match(PostgreSqlParser.KW_NAMES);
                this.state = 1331;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 38, this.context) ) {
                case 1:
                    {
                    this.state = 1329;
                    this.sconst();
                    }
                    break;
                case 2:
                    {
                    this.state = 1330;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1333;
                this.match(PostgreSqlParser.KW_ROLE);
                this.state = 1334;
                this.nonreservedword_or_sconst();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1335;
                this.match(PostgreSqlParser.KW_SESSION);
                this.state = 1336;
                this.match(PostgreSqlParser.KW_AUTHORIZATION);
                this.state = 1337;
                this.nonreservedword_or_sconst();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1338;
                this.match(PostgreSqlParser.KW_XML);
                this.state = 1339;
                this.match(PostgreSqlParser.KW_OPTION);
                this.state = 1340;
                this.document_or_content();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1341;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 1342;
                this.match(PostgreSqlParser.KW_SNAPSHOT);
                this.state = 1343;
                this.sconst();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1344;
                this.var_name();
                this.state = 1345;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 1346;
                this.match(PostgreSqlParser.KW_CURRENT);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1348;
                this.generic_set();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public var_name(): Var_nameContext {
        let localContext = new Var_nameContext(this.context, this.state);
        this.enterRule(localContext, 44, PostgreSqlParser.RULE_var_name);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1351;
            this.colid();
            this.state = 1356;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 11) {
                {
                {
                this.state = 1352;
                this.match(PostgreSqlParser.DOT);
                this.state = 1353;
                this.colid();
                }
                }
                this.state = 1358;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public var_list(): Var_listContext {
        let localContext = new Var_listContext(this.context, this.state);
        this.enterRule(localContext, 46, PostgreSqlParser.RULE_var_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1359;
            this.var_value();
            this.state = 1364;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 1360;
                this.match(PostgreSqlParser.COMMA);
                this.state = 1361;
                this.var_value();
                }
                }
                this.state = 1366;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public var_value(): Var_valueContext {
        let localContext = new Var_valueContext(this.context, this.state);
        this.enterRule(localContext, 48, PostgreSqlParser.RULE_var_value);
        try {
            this.state = 1369;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_ON:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1367;
                this.opt_boolean_or_string();
                }
                break;
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1368;
                this.numericonly();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public iso_level(): Iso_levelContext {
        let localContext = new Iso_levelContext(this.context, this.state);
        this.enterRule(localContext, 50, PostgreSqlParser.RULE_iso_level);
        let _la: number;
        try {
            this.state = 1376;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_READ:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1371;
                this.match(PostgreSqlParser.KW_READ);
                this.state = 1372;
                _la = this.tokenStream.LA(1);
                if(!(_la === 162 || _la === 363)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_REPEATABLE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1373;
                this.match(PostgreSqlParser.KW_REPEATABLE);
                this.state = 1374;
                this.match(PostgreSqlParser.KW_READ);
                }
                break;
            case PostgreSqlParser.KW_SERIALIZABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1375;
                this.match(PostgreSqlParser.KW_SERIALIZABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_boolean_or_string_column(): Opt_boolean_or_string_columnContext {
        let localContext = new Opt_boolean_or_string_columnContext(this.context, this.state);
        this.enterRule(localContext, 52, PostgreSqlParser.RULE_opt_boolean_or_string_column);
        try {
            this.state = 1384;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 44, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1378;
                this.match(PostgreSqlParser.KW_TRUE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1379;
                this.match(PostgreSqlParser.KW_FALSE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1380;
                this.match(PostgreSqlParser.KW_ON);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1381;
                this.column_name();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1382;
                this.type_func_name_keyword();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1383;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_boolean_or_string(): Opt_boolean_or_stringContext {
        let localContext = new Opt_boolean_or_stringContext(this.context, this.state);
        this.enterRule(localContext, 54, PostgreSqlParser.RULE_opt_boolean_or_string);
        try {
            this.state = 1390;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_TRUE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1386;
                this.match(PostgreSqlParser.KW_TRUE);
                }
                break;
            case PostgreSqlParser.KW_FALSE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1387;
                this.match(PostgreSqlParser.KW_FALSE);
                }
                break;
            case PostgreSqlParser.KW_ON:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1388;
                this.match(PostgreSqlParser.KW_ON);
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1389;
                this.nonreservedword_or_sconst();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zone_value(): Zone_valueContext {
        let localContext = new Zone_valueContext(this.context, this.state);
        this.enterRule(localContext, 56, PostgreSqlParser.RULE_zone_value);
        try {
            this.state = 1406;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 47, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1392;
                this.sconst();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1393;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1394;
                this.identifier();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1395;
                this.match(PostgreSqlParser.KW_INTERVAL);
                this.state = 1396;
                this.sconst();
                this.state = 1398;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 46, this.context) ) {
                case 1:
                    {
                    this.state = 1397;
                    this.opt_interval();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1400;
                this.match(PostgreSqlParser.KW_INTERVAL);
                this.state = 1401;
                this.opt_float();
                this.state = 1402;
                this.sconst();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1404;
                this.numericonly();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1405;
                this.match(PostgreSqlParser.KW_LOCAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext {
        let localContext = new Nonreservedword_or_sconstContext(this.context, this.state);
        this.enterRule(localContext, 58, PostgreSqlParser.RULE_nonreservedword_or_sconst);
        try {
            this.state = 1410;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 48, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1408;
                this.nonreservedword();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1409;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableresetstmt(): VariableresetstmtContext {
        let localContext = new VariableresetstmtContext(this.context, this.state);
        this.enterRule(localContext, 60, PostgreSqlParser.RULE_variableresetstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1412;
            this.match(PostgreSqlParser.KW_RESET);
            this.state = 1413;
            this.reset_rest();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reset_rest(): Reset_restContext {
        let localContext = new Reset_restContext(this.context, this.state);
        this.enterRule(localContext, 62, PostgreSqlParser.RULE_reset_rest);
        try {
            this.state = 1424;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 49, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1415;
                this.match(PostgreSqlParser.KW_TIME);
                this.state = 1416;
                this.match(PostgreSqlParser.KW_ZONE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1417;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 1418;
                this.match(PostgreSqlParser.KW_ISOLATION);
                this.state = 1419;
                this.match(PostgreSqlParser.KW_LEVEL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1420;
                this.match(PostgreSqlParser.KW_SESSION);
                this.state = 1421;
                this.match(PostgreSqlParser.KW_AUTHORIZATION);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1422;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1423;
                this.var_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setresetclause(): SetresetclauseContext {
        let localContext = new SetresetclauseContext(this.context, this.state);
        this.enterRule(localContext, 64, PostgreSqlParser.RULE_setresetclause);
        try {
            this.state = 1429;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1426;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1427;
                this.set_rest();
                }
                break;
            case PostgreSqlParser.KW_RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1428;
                this.variableresetstmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionsetresetclause(): FunctionsetresetclauseContext {
        let localContext = new FunctionsetresetclauseContext(this.context, this.state);
        this.enterRule(localContext, 66, PostgreSqlParser.RULE_functionsetresetclause);
        try {
            this.state = 1434;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1431;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1432;
                this.set_rest_more();
                }
                break;
            case PostgreSqlParser.KW_RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1433;
                this.variableresetstmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableshowstmt(): VariableshowstmtContext {
        let localContext = new VariableshowstmtContext(this.context, this.state);
        this.enterRule(localContext, 68, PostgreSqlParser.RULE_variableshowstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1436;
            this.match(PostgreSqlParser.KW_SHOW);
            this.state = 1446;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 52, this.context) ) {
            case 1:
                {
                this.state = 1437;
                this.var_name();
                }
                break;
            case 2:
                {
                this.state = 1438;
                this.match(PostgreSqlParser.KW_TIME);
                this.state = 1439;
                this.match(PostgreSqlParser.KW_ZONE);
                }
                break;
            case 3:
                {
                this.state = 1440;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 1441;
                this.match(PostgreSqlParser.KW_ISOLATION);
                this.state = 1442;
                this.match(PostgreSqlParser.KW_LEVEL);
                }
                break;
            case 4:
                {
                this.state = 1443;
                this.match(PostgreSqlParser.KW_SESSION);
                this.state = 1444;
                this.match(PostgreSqlParser.KW_AUTHORIZATION);
                }
                break;
            case 5:
                {
                this.state = 1445;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintssetstmt(): ConstraintssetstmtContext {
        let localContext = new ConstraintssetstmtContext(this.context, this.state);
        this.enterRule(localContext, 70, PostgreSqlParser.RULE_constraintssetstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1448;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 1449;
            this.match(PostgreSqlParser.KW_CONSTRAINTS);
            this.state = 1452;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 1450;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 1451;
                this.qualified_name_list();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1454;
            _la = this.tokenStream.LA(1);
            if(!(_la === 180 || _la === 221)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkpointstmt(): CheckpointstmtContext {
        let localContext = new CheckpointstmtContext(this.context, this.state);
        this.enterRule(localContext, 72, PostgreSqlParser.RULE_checkpointstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1456;
            this.match(PostgreSqlParser.KW_CHECKPOINT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public discardstmt(): DiscardstmtContext {
        let localContext = new DiscardstmtContext(this.context, this.state);
        this.enterRule(localContext, 74, PostgreSqlParser.RULE_discardstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1458;
            this.match(PostgreSqlParser.KW_DISCARD);
            this.state = 1459;
            _la = this.tokenStream.LA(1);
            if(!(_la === 30 || _la === 288 || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & 41943041) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altertablestmt(): AltertablestmtContext {
        let localContext = new AltertablestmtContext(this.context, this.state);
        this.enterRule(localContext, 76, PostgreSqlParser.RULE_altertablestmt);
        let _la: number;
        try {
            this.state = 1582;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 72, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1461;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1462;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 1464;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 54, this.context) ) {
                case 1:
                    {
                    this.state = 1463;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1466;
                this.relation_expr();
                this.state = 1469;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_NOT:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_VALIDATE:
                    {
                    this.state = 1467;
                    this.alter_table_cmds();
                    }
                    break;
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                    {
                    this.state = 1468;
                    this.partition_cmd();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1471;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1472;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 1473;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 1474;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1475;
                this.opttablespace();
                this.state = 1479;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 281) {
                    {
                    this.state = 1476;
                    this.match(PostgreSqlParser.KW_OWNED);
                    this.state = 1477;
                    this.match(PostgreSqlParser.KW_BY);
                    this.state = 1478;
                    this.role_list();
                    }
                }

                this.state = 1481;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1482;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                this.state = 1483;
                this.tablespace_name_create();
                this.state = 1485;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 57, this.context) ) {
                case 1:
                    {
                    this.state = 1484;
                    this.match(PostgreSqlParser.KW_NOWAIT);
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1487;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1488;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 1490;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 58, this.context) ) {
                case 1:
                    {
                    this.state = 1489;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1492;
                this.table_name();
                this.state = 1493;
                this.index_partition_cmd();
                this.state = 1498;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_FOR:
                    {
                    this.state = 1494;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 1495;
                    this.match(PostgreSqlParser.KW_VALUES);
                    this.state = 1496;
                    this.partition_bound_spec();
                    }
                    break;
                case PostgreSqlParser.KW_DEFAULT:
                    {
                    this.state = 1497;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1500;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1501;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 1503;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 60, this.context) ) {
                case 1:
                    {
                    this.state = 1502;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1505;
                this.table_name();
                this.state = 1506;
                this.match(PostgreSqlParser.KW_DETACH);
                this.state = 1507;
                this.match(PostgreSqlParser.KW_PARTITION);
                this.state = 1508;
                this.qualified_name();
                this.state = 1510;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109 || _la === 532) {
                    {
                    this.state = 1509;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 109 || _la === 532)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1512;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1513;
                this.match(PostgreSqlParser.KW_INDEX);
                this.state = 1515;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 62, this.context) ) {
                case 1:
                    {
                    this.state = 1514;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1517;
                this.qualified_name();
                this.state = 1520;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_NOT:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_VALIDATE:
                    {
                    this.state = 1518;
                    this.alter_table_cmds();
                    }
                    break;
                case PostgreSqlParser.KW_ATTACH:
                    {
                    this.state = 1519;
                    this.index_partition_cmd();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1522;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1523;
                this.match(PostgreSqlParser.KW_INDEX);
                this.state = 1524;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 1525;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1526;
                this.opttablespace();
                this.state = 1530;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 281) {
                    {
                    this.state = 1527;
                    this.match(PostgreSqlParser.KW_OWNED);
                    this.state = 1528;
                    this.match(PostgreSqlParser.KW_BY);
                    this.state = 1529;
                    this.role_list();
                    }
                }

                this.state = 1532;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1533;
                this.opttablespace();
                this.state = 1535;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 65, this.context) ) {
                case 1:
                    {
                    this.state = 1534;
                    this.match(PostgreSqlParser.KW_NOWAIT);
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1537;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1538;
                this.match(PostgreSqlParser.KW_SEQUENCE);
                this.state = 1540;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 66, this.context) ) {
                case 1:
                    {
                    this.state = 1539;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1542;
                this.qualified_name();
                this.state = 1543;
                this.alter_table_cmds();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1545;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1547;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 259) {
                    {
                    this.state = 1546;
                    this.match(PostgreSqlParser.KW_MATERIALIZED);
                    }
                }

                this.state = 1549;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 1551;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 68, this.context) ) {
                case 1:
                    {
                    this.state = 1550;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1553;
                this.view_name();
                this.state = 1554;
                this.alter_table_cmds();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1556;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1557;
                this.match(PostgreSqlParser.KW_MATERIALIZED);
                this.state = 1558;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 1559;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 1560;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1561;
                this.opttablespace();
                this.state = 1565;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 281) {
                    {
                    this.state = 1562;
                    this.match(PostgreSqlParser.KW_OWNED);
                    this.state = 1563;
                    this.match(PostgreSqlParser.KW_BY);
                    this.state = 1564;
                    this.role_list();
                    }
                }

                this.state = 1567;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1568;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                this.state = 1569;
                this.tablespace_name_create();
                this.state = 1571;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 70, this.context) ) {
                case 1:
                    {
                    this.state = 1570;
                    this.match(PostgreSqlParser.KW_NOWAIT);
                    }
                    break;
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1573;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1574;
                this.match(PostgreSqlParser.KW_FOREIGN);
                this.state = 1575;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 1577;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 71, this.context) ) {
                case 1:
                    {
                    this.state = 1576;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1579;
                this.relation_expr();
                this.state = 1580;
                this.alter_table_cmds();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_cmds(): Alter_table_cmdsContext {
        let localContext = new Alter_table_cmdsContext(this.context, this.state);
        this.enterRule(localContext, 78, PostgreSqlParser.RULE_alter_table_cmds);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1584;
            this.alter_table_cmd();
            this.state = 1589;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 1585;
                this.match(PostgreSqlParser.COMMA);
                this.state = 1586;
                this.alter_table_cmd();
                }
                }
                this.state = 1591;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partition_bound_spec(): Partition_bound_specContext {
        let localContext = new Partition_bound_specContext(this.context, this.state);
        this.enterRule(localContext, 80, PostgreSqlParser.RULE_partition_bound_spec);
        try {
            this.state = 1601;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_IN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1592;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1593;
                this.execute_param_clause();
                }
                break;
            case PostgreSqlParser.KW_FROM:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1594;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 1595;
                this.partition_bound_cluase();
                this.state = 1596;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 1597;
                this.partition_bound_cluase();
                }
                break;
            case PostgreSqlParser.KW_WITH:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1599;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 1600;
                this.partition_with_cluase();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partition_bound_cluase(): Partition_bound_cluaseContext {
        let localContext = new Partition_bound_cluaseContext(this.context, this.state);
        this.enterRule(localContext, 82, PostgreSqlParser.RULE_partition_bound_cluase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1603;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 1604;
            this.partition_bound_choose();
            this.state = 1609;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 1605;
                this.match(PostgreSqlParser.COMMA);
                this.state = 1606;
                this.partition_bound_choose();
                }
                }
                this.state = 1611;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1612;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partition_bound_choose(): Partition_bound_chooseContext {
        let localContext = new Partition_bound_chooseContext(this.context, this.state);
        this.enterRule(localContext, 84, PostgreSqlParser.RULE_partition_bound_choose);
        try {
            this.state = 1617;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1614;
                this.execute_param_clause();
                }
                break;
            case PostgreSqlParser.KW_MINVALUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1615;
                this.match(PostgreSqlParser.KW_MINVALUE);
                }
                break;
            case PostgreSqlParser.KW_MAXVALUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1616;
                this.match(PostgreSqlParser.KW_MAXVALUE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partition_with_cluase(): Partition_with_cluaseContext {
        let localContext = new Partition_with_cluaseContext(this.context, this.state);
        this.enterRule(localContext, 86, PostgreSqlParser.RULE_partition_with_cluase);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1619;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 1620;
            this.match(PostgreSqlParser.KW_MODULUS);
            this.state = 1621;
            this.numericonly();
            this.state = 1622;
            this.match(PostgreSqlParser.COMMA);
            this.state = 1623;
            this.match(PostgreSqlParser.KW_REMAINDER);
            this.state = 1624;
            this.numericonly();
            this.state = 1625;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partition_cmd(): Partition_cmdContext {
        let localContext = new Partition_cmdContext(this.context, this.state);
        this.enterRule(localContext, 88, PostgreSqlParser.RULE_partition_cmd);
        try {
            this.state = 1633;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ATTACH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1627;
                this.index_partition_cmd();
                this.state = 1628;
                this.partitionboundspec();
                }
                break;
            case PostgreSqlParser.KW_DETACH:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1630;
                this.match(PostgreSqlParser.KW_DETACH);
                this.state = 1631;
                this.match(PostgreSqlParser.KW_PARTITION);
                this.state = 1632;
                this.qualified_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_partition_cmd(): Index_partition_cmdContext {
        let localContext = new Index_partition_cmdContext(this.context, this.state);
        this.enterRule(localContext, 90, PostgreSqlParser.RULE_index_partition_cmd);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1635;
            this.match(PostgreSqlParser.KW_ATTACH);
            this.state = 1636;
            this.match(PostgreSqlParser.KW_PARTITION);
            this.state = 1637;
            this.qualified_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_cmd(): Alter_table_cmdContext {
        let localContext = new Alter_table_cmdContext(this.context, this.state);
        this.enterRule(localContext, 92, PostgreSqlParser.RULE_alter_table_cmd);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1872;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 117, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1639;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 1642;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 1640;
                    this.match(PostgreSqlParser.KW_CONSTRAINT);
                    this.state = 1641;
                    this.colid();
                    }
                }

                this.state = 1644;
                this.constraintelem();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1645;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1646;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 1647;
                this.colid();
                this.state = 1651;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 79, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1648;
                        this.constraintattributeElem();
                        }
                        }
                    }
                    this.state = 1653;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 79, this.context);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1654;
                this.match(PostgreSqlParser.KW_VALIDATE);
                this.state = 1655;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 1656;
                this.colid();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1657;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 1658;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 1660;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 80, this.context) ) {
                case 1:
                    {
                    this.state = 1659;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1662;
                this.colid();
                this.state = 1664;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 81, this.context) ) {
                case 1:
                    {
                    this.state = 1663;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1666;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1667;
                this.match(PostgreSqlParser.KW_WITHOUT);
                this.state = 1668;
                _la = this.tokenStream.LA(1);
                if(!(_la === 158 || _la === 277)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1669;
                this.match(PostgreSqlParser.KW_CLUSTER);
                this.state = 1670;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 1671;
                this.colid();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1672;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1673;
                _la = this.tokenStream.LA(1);
                if(!(_la === 367 || _la === 439)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1674;
                this.match(PostgreSqlParser.KW_ENABLE);
                this.state = 1676;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 139 || _la === 312) {
                    {
                    this.state = 1675;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 139 || _la === 312)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1678;
                this.match(PostgreSqlParser.KW_TRIGGER);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1679;
                this.match(PostgreSqlParser.KW_DISABLE);
                this.state = 1680;
                this.match(PostgreSqlParser.KW_TRIGGER);
                this.state = 1684;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ALL:
                    {
                    this.state = 1681;
                    this.match(PostgreSqlParser.KW_ALL);
                    }
                    break;
                case PostgreSqlParser.KW_USER:
                    {
                    this.state = 1682;
                    this.match(PostgreSqlParser.KW_USER);
                    }
                    break;
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 1683;
                    this.colid();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1686;
                this.match(PostgreSqlParser.KW_ENABLE);
                this.state = 1687;
                _la = this.tokenStream.LA(1);
                if(!(_la === 139 || _la === 312)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1688;
                this.match(PostgreSqlParser.KW_RULE);
                this.state = 1689;
                this.colid();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1690;
                this.match(PostgreSqlParser.KW_DISABLE);
                this.state = 1691;
                this.match(PostgreSqlParser.KW_RULE);
                this.state = 1692;
                this.colid();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1694;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 1693;
                    this.match(PostgreSqlParser.KW_NO);
                    }
                }

                this.state = 1696;
                this.match(PostgreSqlParser.KW_INHERIT);
                this.state = 1697;
                this.qualified_name();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1698;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 1699;
                this.any_name();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1700;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 1701;
                this.match(PostgreSqlParser.KW_OF);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1702;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 1703;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 1704;
                this.rolespec();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1705;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1706;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                this.state = 1707;
                this.tablespace_name_create();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1708;
                this.match(PostgreSqlParser.KW_REPLICA);
                this.state = 1709;
                this.match(PostgreSqlParser.KW_IDENTITY);
                this.state = 1714;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_NOTHING:
                    {
                    this.state = 1710;
                    this.match(PostgreSqlParser.KW_NOTHING);
                    }
                    break;
                case PostgreSqlParser.KW_FULL:
                    {
                    this.state = 1711;
                    this.match(PostgreSqlParser.KW_FULL);
                    }
                    break;
                case PostgreSqlParser.KW_DEFAULT:
                    {
                    this.state = 1712;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                case PostgreSqlParser.KW_USING:
                    {
                    this.state = 1713;
                    this.existingindex();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1722;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ENABLE:
                    {
                    this.state = 1716;
                    this.match(PostgreSqlParser.KW_ENABLE);
                    }
                    break;
                case PostgreSqlParser.KW_DISABLE:
                    {
                    this.state = 1717;
                    this.match(PostgreSqlParser.KW_DISABLE);
                    }
                    break;
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_NO:
                    {
                    {
                    this.state = 1719;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 269) {
                        {
                        this.state = 1718;
                        this.match(PostgreSqlParser.KW_NO);
                        }
                    }

                    this.state = 1721;
                    this.match(PostgreSqlParser.KW_FORCE);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1724;
                this.match(PostgreSqlParser.KW_ROW);
                this.state = 1725;
                this.match(PostgreSqlParser.KW_LEVEL);
                this.state = 1726;
                this.match(PostgreSqlParser.KW_SECURITY);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1727;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 1729;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 88, this.context) ) {
                case 1:
                    {
                    this.state = 1728;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1732;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 89, this.context) ) {
                case 1:
                    {
                    this.state = 1731;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1734;
                this.column_name();
                this.state = 1736;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 90, this.context) ) {
                case 1:
                    {
                    this.state = 1735;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1738;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 1740;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 44) {
                    {
                    this.state = 1739;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                }

                this.state = 1743;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 92, this.context) ) {
                case 1:
                    {
                    this.state = 1742;
                    this.opt_if_not_exists();
                    }
                    break;
                }
                this.state = 1745;
                this.column_def();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1746;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1748;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 93, this.context) ) {
                case 1:
                    {
                    this.state = 1747;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1750;
                this.column_name();
                this.state = 1753;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_SET:
                    {
                    this.state = 1751;
                    this.alter_column_default();
                    }
                    break;
                case PostgreSqlParser.KW_OPTIONS:
                    {
                    this.state = 1752;
                    this.alter_generic_options();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1755;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1757;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 95, this.context) ) {
                case 1:
                    {
                    this.state = 1756;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1759;
                this.column_name();
                this.state = 1760;
                _la = this.tokenStream.LA(1);
                if(!(_la === 191 || _la === 333)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1761;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 1762;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 1764;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1766;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 96, this.context) ) {
                case 1:
                    {
                    this.state = 1765;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1768;
                this.column_name();
                this.state = 1769;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 1770;
                this.match(PostgreSqlParser.KW_EXPRESSION);
                this.state = 1772;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 97, this.context) ) {
                case 1:
                    {
                    this.state = 1771;
                    this.opt_if_exists();
                    }
                    break;
                }
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 1774;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1776;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 98, this.context) ) {
                case 1:
                    {
                    this.state = 1775;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1778;
                this.column_name();
                this.state = 1779;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1780;
                this.match(PostgreSqlParser.KW_STATISTICS);
                this.state = 1781;
                this.signediconst();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 1788;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 1783;
                    this.match(PostgreSqlParser.KW_ALTER);
                    this.state = 1785;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 99, this.context) ) {
                    case 1:
                        {
                        this.state = 1784;
                        this.match(PostgreSqlParser.KW_COLUMN);
                        }
                        break;
                    }
                    this.state = 1787;
                    this.column_name();
                    }
                }

                this.state = 1790;
                _la = this.tokenStream.LA(1);
                if(!(_la === 313 || _la === 333)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1791;
                this.reloptions();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 1792;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1794;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 101, this.context) ) {
                case 1:
                    {
                    this.state = 1793;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1796;
                this.column_name();
                this.state = 1797;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1798;
                this.match(PostgreSqlParser.KW_STORAGE);
                this.state = 1799;
                this.colid();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 1801;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1803;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 102, this.context) ) {
                case 1:
                    {
                    this.state = 1802;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1805;
                this.column_name();
                this.state = 1806;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 1807;
                this.match(PostgreSqlParser.KW_GENERATED);
                this.state = 1808;
                this.generated_when();
                this.state = 1809;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 1810;
                this.match(PostgreSqlParser.KW_IDENTITY);
                this.state = 1819;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 104, this.context) ) {
                case 1:
                    {
                    this.state = 1811;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 1813;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 1812;
                        this.seqoptelem();
                        }
                        }
                        this.state = 1815;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (_la === 36 || _la === 148 || _la === 225 || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 2097669) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & 67125249) !== 0));
                    this.state = 1817;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 1821;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1823;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 105, this.context) ) {
                case 1:
                    {
                    this.state = 1822;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1825;
                this.column_name();
                this.state = 1839;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        this.state = 1839;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case PostgreSqlParser.KW_RESTART:
                            {
                            this.state = 1826;
                            this.match(PostgreSqlParser.KW_RESTART);
                            this.state = 1831;
                            this.errorHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this.tokenStream, 107, this.context) ) {
                            case 1:
                                {
                                this.state = 1828;
                                this.errorHandler.sync(this);
                                _la = this.tokenStream.LA(1);
                                if (_la === 105) {
                                    {
                                    this.state = 1827;
                                    this.match(PostgreSqlParser.KW_WITH);
                                    }
                                }

                                this.state = 1830;
                                this.numericonly();
                                }
                                break;
                            }
                            }
                            break;
                        case PostgreSqlParser.KW_SET:
                            {
                            this.state = 1833;
                            this.match(PostgreSqlParser.KW_SET);
                            this.state = 1837;
                            this.errorHandler.sync(this);
                            switch (this.tokenStream.LA(1)) {
                            case PostgreSqlParser.KW_AS:
                            case PostgreSqlParser.KW_CACHE:
                            case PostgreSqlParser.KW_INCREMENT:
                            case PostgreSqlParser.KW_MAXVALUE:
                            case PostgreSqlParser.KW_MINVALUE:
                            case PostgreSqlParser.KW_NO:
                            case PostgreSqlParser.KW_OWNED:
                            case PostgreSqlParser.KW_RESTART:
                            case PostgreSqlParser.KW_SEQUENCE:
                            case PostgreSqlParser.KW_START:
                                {
                                this.state = 1834;
                                this.seqoptelem();
                                }
                                break;
                            case PostgreSqlParser.KW_GENERATED:
                                {
                                this.state = 1835;
                                this.match(PostgreSqlParser.KW_GENERATED);
                                this.state = 1836;
                                this.generated_when();
                                }
                                break;
                            default:
                                throw new antlr.NoViableAltException(this);
                            }
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1841;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 110, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 1843;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1845;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 111, this.context) ) {
                case 1:
                    {
                    this.state = 1844;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1847;
                this.column_name();
                this.state = 1848;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 1849;
                this.match(PostgreSqlParser.KW_IDENTITY);
                this.state = 1851;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 112, this.context) ) {
                case 1:
                    {
                    this.state = 1850;
                    this.opt_if_exists();
                    }
                    break;
                }
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 1853;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1855;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 113, this.context) ) {
                case 1:
                    {
                    this.state = 1854;
                    this.match(PostgreSqlParser.KW_COLUMN);
                    }
                    break;
                }
                this.state = 1857;
                this.column_name();
                this.state = 1860;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 333) {
                    {
                    this.state = 1858;
                    this.match(PostgreSqlParser.KW_SET);
                    this.state = 1859;
                    this.match(PostgreSqlParser.KW_DATA);
                    }
                }

                this.state = 1862;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 1863;
                this.typename();
                this.state = 1865;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 43) {
                    {
                    this.state = 1864;
                    this.opt_collate_clause();
                    }
                }

                this.state = 1869;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 1867;
                    this.match(PostgreSqlParser.KW_USING);
                    this.state = 1868;
                    this.expression();
                    }
                }

                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 1871;
                this.alter_generic_options();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_column_default(): Alter_column_defaultContext {
        let localContext = new Alter_column_defaultContext(this.context, this.state);
        this.enterRule(localContext, 94, PostgreSqlParser.RULE_alter_column_default);
        try {
            this.state = 1879;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1874;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 1875;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 1876;
                this.expression();
                }
                break;
            case PostgreSqlParser.KW_DROP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1877;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 1878;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext {
        let localContext = new Opt_drop_behaviorContext(this.context, this.state);
        this.enterRule(localContext, 96, PostgreSqlParser.RULE_opt_drop_behavior);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1881;
            _la = this.tokenStream.LA(1);
            if(!(_la === 150 || _la === 315)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_collate_clause(): Opt_collate_clauseContext {
        let localContext = new Opt_collate_clauseContext(this.context, this.state);
        this.enterRule(localContext, 98, PostgreSqlParser.RULE_opt_collate_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1883;
            this.match(PostgreSqlParser.KW_COLLATE);
            this.state = 1884;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reloptions(): ReloptionsContext {
        let localContext = new ReloptionsContext(this.context, this.state);
        this.enterRule(localContext, 100, PostgreSqlParser.RULE_reloptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1886;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 1887;
            this.reloption_elem();
            this.state = 1892;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 1888;
                this.match(PostgreSqlParser.COMMA);
                this.state = 1889;
                this.reloption_elem();
                }
                }
                this.state = 1894;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1895;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_reloptions(): Opt_reloptionsContext {
        let localContext = new Opt_reloptionsContext(this.context, this.state);
        this.enterRule(localContext, 102, PostgreSqlParser.RULE_opt_reloptions);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1897;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 1898;
            this.reloptions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reloption_elem(): Reloption_elemContext {
        let localContext = new Reloption_elemContext(this.context, this.state);
        this.enterRule(localContext, 104, PostgreSqlParser.RULE_reloption_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1900;
            this.collabel();
            this.state = 1905;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.EQUAL:
                {
                this.state = 1901;
                this.match(PostgreSqlParser.EQUAL);
                this.state = 1902;
                this.def_arg();
                }
                break;
            case PostgreSqlParser.DOT:
                {
                this.state = 1903;
                this.match(PostgreSqlParser.DOT);
                this.state = 1904;
                this.def_elem();
                }
                break;
            case PostgreSqlParser.CLOSE_PAREN:
            case PostgreSqlParser.COMMA:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionboundspec(): PartitionboundspecContext {
        let localContext = new PartitionboundspecContext(this.context, this.state);
        this.enterRule(localContext, 106, PostgreSqlParser.RULE_partitionboundspec);
        let _la: number;
        try {
            this.state = 1936;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 122, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1907;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 1908;
                this.match(PostgreSqlParser.KW_VALUES);
                this.state = 1909;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 1910;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 1911;
                this.nonreservedword();
                this.state = 1912;
                this.match(PostgreSqlParser.Integral);
                this.state = 1919;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 1913;
                    this.match(PostgreSqlParser.COMMA);
                    {
                    this.state = 1914;
                    this.nonreservedword();
                    this.state = 1915;
                    this.match(PostgreSqlParser.Integral);
                    }
                    }
                    }
                    this.state = 1921;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1922;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1924;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 1925;
                this.match(PostgreSqlParser.KW_VALUES);
                this.state = 1926;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 1927;
                this.execute_param_clause();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1928;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 1929;
                this.match(PostgreSqlParser.KW_VALUES);
                this.state = 1930;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 1931;
                this.execute_param_clause();
                this.state = 1932;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 1933;
                this.execute_param_clause();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1935;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altercompositetypestmt(): AltercompositetypestmtContext {
        let localContext = new AltercompositetypestmtContext(this.context, this.state);
        this.enterRule(localContext, 108, PostgreSqlParser.RULE_altercompositetypestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1938;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 1939;
            this.match(PostgreSqlParser.KW_TYPE);
            this.state = 1940;
            this.any_name();
            this.state = 1941;
            this.alter_type_cmd();
            this.state = 1946;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 1942;
                this.match(PostgreSqlParser.COMMA);
                this.state = 1943;
                this.alter_type_cmd();
                }
                }
                this.state = 1948;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_type_cmd(): Alter_type_cmdContext {
        let localContext = new Alter_type_cmdContext(this.context, this.state);
        this.enterRule(localContext, 110, PostgreSqlParser.RULE_alter_type_cmd);
        let _la: number;
        try {
            this.state = 1979;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ADD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1949;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 1950;
                this.match(PostgreSqlParser.KW_ATTRIBUTE);
                this.state = 1951;
                this.tablefuncelement();
                this.state = 1953;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 124, this.context) ) {
                case 1:
                    {
                    this.state = 1952;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_DROP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1955;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 1956;
                this.match(PostgreSqlParser.KW_ATTRIBUTE);
                this.state = 1958;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 125, this.context) ) {
                case 1:
                    {
                    this.state = 1957;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 1960;
                this.colid();
                this.state = 1962;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 126, this.context) ) {
                case 1:
                    {
                    this.state = 1961;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_ALTER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1964;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 1965;
                this.match(PostgreSqlParser.KW_ATTRIBUTE);
                this.state = 1966;
                this.colid();
                this.state = 1969;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 333) {
                    {
                    this.state = 1967;
                    this.match(PostgreSqlParser.KW_SET);
                    this.state = 1968;
                    this.match(PostgreSqlParser.KW_DATA);
                    }
                }

                this.state = 1971;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 1972;
                this.typename();
                this.state = 1974;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 43) {
                    {
                    this.state = 1973;
                    this.opt_collate_clause();
                    }
                }

                this.state = 1977;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 129, this.context) ) {
                case 1:
                    {
                    this.state = 1976;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public closeportalstmt(): CloseportalstmtContext {
        let localContext = new CloseportalstmtContext(this.context, this.state);
        this.enterRule(localContext, 112, PostgreSqlParser.RULE_closeportalstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1981;
            this.match(PostgreSqlParser.KW_CLOSE);
            this.state = 1984;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 1982;
                this.colid();
                }
                break;
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 1983;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copystmt(): CopystmtContext {
        let localContext = new CopystmtContext(this.context, this.state);
        this.enterRule(localContext, 114, PostgreSqlParser.RULE_copystmt);
        let _la: number;
        try {
            this.state = 2035;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 143, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1986;
                this.match(PostgreSqlParser.KW_COPY);
                this.state = 1988;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 107) {
                    {
                    this.state = 1987;
                    this.match(PostgreSqlParser.KW_BINARY);
                    }
                }

                this.state = 1990;
                this.table_name();
                this.state = 1992;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 1991;
                    this.opt_column_list();
                    }
                }

                this.state = 1994;
                _la = this.tokenStream.LA(1);
                if(!(_la === 64 || _la === 94)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1996;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 297) {
                    {
                    this.state = 1995;
                    this.match(PostgreSqlParser.KW_PROGRAM);
                    }
                }

                this.state = 2001;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 1998;
                    this.sconst();
                    }
                    break;
                case PostgreSqlParser.KW_STDIN:
                    {
                    this.state = 1999;
                    this.match(PostgreSqlParser.KW_STDIN);
                    }
                    break;
                case PostgreSqlParser.KW_STDOUT:
                    {
                    this.state = 2000;
                    this.match(PostgreSqlParser.KW_STDOUT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2008;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 137, this.context) ) {
                case 1:
                    {
                    this.state = 2004;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 100) {
                        {
                        this.state = 2003;
                        this.match(PostgreSqlParser.KW_USING);
                        }
                    }

                    this.state = 2006;
                    this.match(PostgreSqlParser.KW_DELIMITERS);
                    this.state = 2007;
                    this.sconst();
                    }
                    break;
                }
                this.state = 2011;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 138, this.context) ) {
                case 1:
                    {
                    this.state = 2010;
                    this.match(PostgreSqlParser.KW_WITH);
                    }
                    break;
                }
                this.state = 2013;
                this.copy_options();
                this.state = 2015;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103) {
                    {
                    this.state = 2014;
                    this.where_clause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2017;
                this.match(PostgreSqlParser.KW_COPY);
                this.state = 2018;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2019;
                this.preparablestmt();
                this.state = 2020;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 2021;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 2023;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 297) {
                    {
                    this.state = 2022;
                    this.match(PostgreSqlParser.KW_PROGRAM);
                    }
                }

                this.state = 2028;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 2025;
                    this.sconst();
                    }
                    break;
                case PostgreSqlParser.KW_STDIN:
                    {
                    this.state = 2026;
                    this.match(PostgreSqlParser.KW_STDIN);
                    }
                    break;
                case PostgreSqlParser.KW_STDOUT:
                    {
                    this.state = 2027;
                    this.match(PostgreSqlParser.KW_STDOUT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2031;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 142, this.context) ) {
                case 1:
                    {
                    this.state = 2030;
                    this.match(PostgreSqlParser.KW_WITH);
                    }
                    break;
                }
                this.state = 2033;
                this.copy_options();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_options(): Copy_optionsContext {
        let localContext = new Copy_optionsContext(this.context, this.state);
        this.enterRule(localContext, 116, PostgreSqlParser.RULE_copy_options);
        let _la: number;
        try {
            let alternative: number;
            this.state = 2076;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 150, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2062;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 148, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        this.state = 2060;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 147, this.context) ) {
                        case 1:
                            {
                            this.state = 2037;
                            this.match(PostgreSqlParser.KW_BINARY);
                            }
                            break;
                        case 2:
                            {
                            this.state = 2038;
                            this.match(PostgreSqlParser.KW_FREEZE);
                            }
                            break;
                        case 3:
                            {
                            this.state = 2039;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 78 || _la === 183 || _la === 197 || _la === 298)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 2041;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 36) {
                                {
                                this.state = 2040;
                                this.match(PostgreSqlParser.KW_AS);
                                }
                            }

                            this.state = 2043;
                            this.sconst();
                            }
                            break;
                        case 4:
                            {
                            this.state = 2044;
                            this.match(PostgreSqlParser.KW_CSV);
                            }
                            break;
                        case 5:
                            {
                            this.state = 2045;
                            this.match(PostgreSqlParser.KW_HEADER);
                            }
                            break;
                        case 6:
                            {
                            this.state = 2046;
                            this.match(PostgreSqlParser.KW_FORCE);
                            this.state = 2047;
                            this.match(PostgreSqlParser.KW_QUOTE);
                            this.state = 2050;
                            this.errorHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this.tokenStream, 145, this.context) ) {
                            case 1:
                                {
                                this.state = 2048;
                                this.column_list();
                                }
                                break;
                            case 2:
                                {
                                this.state = 2049;
                                this.match(PostgreSqlParser.STAR);
                                }
                                break;
                            }
                            }
                            break;
                        case 7:
                            {
                            this.state = 2052;
                            this.match(PostgreSqlParser.KW_FORCE);
                            this.state = 2054;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 77) {
                                {
                                this.state = 2053;
                                this.match(PostgreSqlParser.KW_NOT);
                                }
                            }

                            this.state = 2056;
                            this.match(PostgreSqlParser.KW_NULL);
                            this.state = 2057;
                            this.column_list();
                            }
                            break;
                        case 8:
                            {
                            this.state = 2058;
                            this.match(PostgreSqlParser.KW_ENCODING);
                            this.state = 2059;
                            this.sconst();
                            }
                            break;
                        }
                        }
                    }
                    this.state = 2064;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 148, this.context);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2065;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2066;
                this.copy_generic_opt_elem();
                this.state = 2071;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 2067;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 2068;
                    this.copy_generic_opt_elem();
                    }
                    }
                    this.state = 2073;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2074;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_generic_opt_elem(): Copy_generic_opt_elemContext {
        let localContext = new Copy_generic_opt_elemContext(this.context, this.state);
        this.enterRule(localContext, 118, PostgreSqlParser.RULE_copy_generic_opt_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2078;
            this.collabel();
            this.state = 2093;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_ON:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 2079;
                this.opt_boolean_or_string();
                }
                break;
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
                {
                this.state = 2080;
                this.numericonly();
                }
                break;
            case PostgreSqlParser.STAR:
                {
                this.state = 2081;
                this.match(PostgreSqlParser.STAR);
                }
                break;
            case PostgreSqlParser.OPEN_PAREN:
                {
                this.state = 2082;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2083;
                this.opt_boolean_or_string_column();
                this.state = 2088;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 2084;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 2085;
                    this.opt_boolean_or_string_column();
                    }
                    }
                    this.state = 2090;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2091;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.CLOSE_PAREN:
            case PostgreSqlParser.COMMA:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createstmt(): CreatestmtContext {
        let localContext = new CreatestmtContext(this.context, this.state);
        this.enterRule(localContext, 120, PostgreSqlParser.RULE_createstmt);
        let _la: number;
        try {
            localContext = new ColumnCreateTableContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2095;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2097;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 213 || _la === 254 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 32773) !== 0)) {
                {
                this.state = 2096;
                this.opttemp();
                }
            }

            this.state = 2099;
            this.match(PostgreSqlParser.KW_TABLE);
            this.state = 2101;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 154, this.context) ) {
            case 1:
                {
                this.state = 2100;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 2103;
            this.table_name_create();
            this.state = 2169;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
                {
                this.state = 2104;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2106;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & 2099209) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2147491841) !== 0) || ((((_la - 120)) & ~0x1F) === 0 && ((1 << (_la - 120)) & 4294966809) !== 0) || ((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & 4294967295) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 4294967295) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290781183) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & 4294967295) !== 0) || ((((_la - 280)) & ~0x1F) === 0 && ((1 << (_la - 280)) & 4294967295) !== 0) || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 4294967295) !== 0) || ((((_la - 344)) & ~0x1F) === 0 && ((1 << (_la - 344)) & 4294967295) !== 0) || ((((_la - 376)) & ~0x1F) === 0 && ((1 << (_la - 376)) & 4294967295) !== 0) || ((((_la - 408)) & ~0x1F) === 0 && ((1 << (_la - 408)) & 4294967295) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & 4294950911) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & 3221225471) !== 0) || ((((_la - 506)) & ~0x1F) === 0 && ((1 << (_la - 506)) & 286719) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                    {
                    this.state = 2105;
                    this.tableelementlist();
                    }
                }

                this.state = 2108;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 2110;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 156, this.context) ) {
                case 1:
                    {
                    this.state = 2109;
                    this.optinherit();
                    }
                    break;
                }
                this.state = 2113;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 157, this.context) ) {
                case 1:
                    {
                    this.state = 2112;
                    this.partitionspec();
                    }
                    break;
                }
                this.state = 2116;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2115;
                    this.table_access_method_clause();
                    }
                }

                this.state = 2119;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 159, this.context) ) {
                case 1:
                    {
                    this.state = 2118;
                    this.optwith();
                    }
                    break;
                }
                this.state = 2122;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2121;
                    this.oncommitoption();
                    }
                }

                this.state = 2125;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 161, this.context) ) {
                case 1:
                    {
                    this.state = 2124;
                    this.opttablespace();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_OF:
                {
                this.state = 2127;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 2128;
                this.any_name();
                this.state = 2130;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 162, this.context) ) {
                case 1:
                    {
                    this.state = 2129;
                    this.opttypedtableelementlist();
                    }
                    break;
                }
                this.state = 2133;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 163, this.context) ) {
                case 1:
                    {
                    this.state = 2132;
                    this.partitionspec();
                    }
                    break;
                }
                this.state = 2136;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2135;
                    this.table_access_method_clause();
                    }
                }

                this.state = 2139;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 165, this.context) ) {
                case 1:
                    {
                    this.state = 2138;
                    this.optwith();
                    }
                    break;
                }
                this.state = 2142;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2141;
                    this.oncommitoption();
                    }
                }

                this.state = 2145;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 167, this.context) ) {
                case 1:
                    {
                    this.state = 2144;
                    this.opttablespace();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_PARTITION:
                {
                this.state = 2147;
                this.match(PostgreSqlParser.KW_PARTITION);
                this.state = 2148;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 2149;
                this.qualified_name();
                this.state = 2151;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2150;
                    this.opttypedtableelementlist();
                    }
                }

                this.state = 2153;
                this.partitionboundspec();
                this.state = 2155;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 169, this.context) ) {
                case 1:
                    {
                    this.state = 2154;
                    this.partitionspec();
                    }
                    break;
                }
                this.state = 2158;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2157;
                    this.table_access_method_clause();
                    }
                }

                this.state = 2161;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 171, this.context) ) {
                case 1:
                    {
                    this.state = 2160;
                    this.optwith();
                    }
                    break;
                }
                this.state = 2164;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2163;
                    this.oncommitoption();
                    }
                }

                this.state = 2167;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 173, this.context) ) {
                case 1:
                    {
                    this.state = 2166;
                    this.opttablespace();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opttemp(): OpttempContext {
        let localContext = new OpttempContext(this.context, this.state);
        this.enterRule(localContext, 122, PostgreSqlParser.RULE_opttemp);
        let _la: number;
        try {
            this.state = 2176;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_TEMPORARY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2171;
                this.match(PostgreSqlParser.KW_TEMPORARY);
                }
                break;
            case PostgreSqlParser.KW_TEMP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2172;
                this.match(PostgreSqlParser.KW_TEMP);
                }
                break;
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_LOCAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2173;
                _la = this.tokenStream.LA(1);
                if(!(_la === 213 || _la === 254)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2174;
                _la = this.tokenStream.LA(1);
                if(!(_la === 352 || _la === 354)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_UNLOGGED:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2175;
                this.match(PostgreSqlParser.KW_UNLOGGED);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opttypedtableelementlist(): OpttypedtableelementlistContext {
        let localContext = new OpttypedtableelementlistContext(this.context, this.state);
        this.enterRule(localContext, 124, PostgreSqlParser.RULE_opttypedtableelementlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2178;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2179;
            this.typedtableelement();
            this.state = 2184;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2180;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2181;
                this.typedtableelement();
                }
                }
                this.state = 2186;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2187;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableelementlist(): TableelementlistContext {
        let localContext = new TableelementlistContext(this.context, this.state);
        this.enterRule(localContext, 126, PostgreSqlParser.RULE_tableelementlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2189;
            this.tableelement();
            this.state = 2194;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2190;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2191;
                this.tableelement();
                }
                }
                this.state = 2196;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableelement(): TableelementContext {
        let localContext = new TableelementContext(this.context, this.state);
        this.enterRule(localContext, 128, PostgreSqlParser.RULE_tableelement);
        let _la: number;
        try {
            this.state = 2212;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 180, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2199;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 2197;
                    this.match(PostgreSqlParser.KW_CONSTRAINT);
                    this.state = 2198;
                    this.colid();
                    }
                }

                this.state = 2201;
                this.constraintelem();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2202;
                this.column_def();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2203;
                this.match(PostgreSqlParser.KW_LIKE);
                this.state = 2204;
                this.qualified_name();
                this.state = 2209;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 200 || _la === 224) {
                    {
                    {
                    this.state = 2205;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 200 || _la === 224)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2206;
                    this.tablelikeoption();
                    }
                    }
                    this.state = 2211;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typedtableelement(): TypedtableelementContext {
        let localContext = new TypedtableelementContext(this.context, this.state);
        this.enterRule(localContext, 130, PostgreSqlParser.RULE_typedtableelement);
        let _la: number;
        try {
            this.state = 2230;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 184, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2214;
                this.column_name_create();
                this.state = 2217;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 2215;
                    this.match(PostgreSqlParser.KW_WITH);
                    this.state = 2216;
                    this.match(PostgreSqlParser.KW_OPTIONS);
                    }
                }

                this.state = 2222;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & 2059) !== 0) || ((((_la - 77)) & ~0x1F) === 0 && ((1 << (_la - 77)) & 2097923) !== 0) || _la === 438) {
                    {
                    {
                    this.state = 2219;
                    this.colconstraint();
                    }
                    }
                    this.state = 2224;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2227;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 2225;
                    this.match(PostgreSqlParser.KW_CONSTRAINT);
                    this.state = 2226;
                    this.colid();
                    }
                }

                this.state = 2229;
                this.constraintelem();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_def(): Column_defContext {
        let localContext = new Column_defContext(this.context, this.state);
        this.enterRule(localContext, 132, PostgreSqlParser.RULE_column_def);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2232;
            this.column_name_create();
            this.state = 2233;
            localContext._colType = this.typename();
            this.state = 2235;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 185, this.context) ) {
            case 1:
                {
                this.state = 2234;
                this.create_generic_options();
                }
                break;
            }
            this.state = 2246;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 187, this.context) ) {
            case 1:
                {
                this.state = 2237;
                this.match(PostgreSqlParser.KW_STORAGE);
                this.state = 2244;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 186, this.context) ) {
                case 1:
                    {
                    this.state = 2238;
                    this.match(PostgreSqlParser.KW_PLAIN);
                    }
                    break;
                case 2:
                    {
                    this.state = 2239;
                    this.match(PostgreSqlParser.KW_EXTERNAL);
                    }
                    break;
                case 3:
                    {
                    this.state = 2240;
                    this.match(PostgreSqlParser.KW_EXTENDED);
                    }
                    break;
                case 4:
                    {
                    this.state = 2241;
                    this.match(PostgreSqlParser.KW_MAIN);
                    }
                    break;
                case 5:
                    {
                    this.state = 2242;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                case 6:
                    {
                    this.state = 2243;
                    this.colid();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 2250;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 543) {
                {
                this.state = 2248;
                this.match(PostgreSqlParser.KW_COMPRESSION);
                this.state = 2249;
                this.colid();
                }
            }

            this.state = 2253;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 189, this.context) ) {
            case 1:
                {
                this.state = 2252;
                this.opt_collate_clause();
                }
                break;
            }
            this.state = 2257;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 190, this.context) ) {
            case 1:
                {
                this.state = 2255;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 2256;
                this.match(PostgreSqlParser.KW_OPTIONS);
                }
                break;
            }
            this.state = 2262;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 191, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2259;
                    this.colconstraint();
                    }
                    }
                }
                this.state = 2264;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 191, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colconstraint(): ColconstraintContext {
        let localContext = new ColconstraintContext(this.context, this.state);
        this.enterRule(localContext, 134, PostgreSqlParser.RULE_colconstraint);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2267;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 2265;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 2266;
                this.colid();
                }
            }

            this.state = 2269;
            this.colconstraintelem();
            this.state = 2274;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 194, this.context) ) {
            case 1:
                {
                this.state = 2271;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 2270;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 2273;
                this.match(PostgreSqlParser.KW_DEFERRABLE);
                }
                break;
            }
            this.state = 2278;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 69) {
                {
                this.state = 2276;
                this.match(PostgreSqlParser.KW_INITIALLY);
                this.state = 2277;
                _la = this.tokenStream.LA(1);
                if(!(_la === 180 || _la === 221)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colconstraintelem(): ColconstraintelemContext {
        let localContext = new ColconstraintelemContext(this.context, this.state);
        this.enterRule(localContext, 136, PostgreSqlParser.RULE_colconstraintelem);
        let _la: number;
        try {
            this.state = 2360;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 213, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2281;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 2280;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 2283;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2284;
                this.match(PostgreSqlParser.KW_UNIQUE);
                this.state = 2286;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 197, this.context) ) {
                case 1:
                    {
                    this.state = 2285;
                    this.opt_definition();
                    }
                    break;
                }
                this.state = 2289;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2288;
                    this.optconstablespace();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2291;
                this.match(PostgreSqlParser.KW_UNIQUE);
                this.state = 2297;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 200, this.context) ) {
                case 1:
                    {
                    this.state = 2292;
                    this.match(PostgreSqlParser.KW_NULLS);
                    this.state = 2294;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 77) {
                        {
                        this.state = 2293;
                        this.match(PostgreSqlParser.KW_NOT);
                        }
                    }

                    this.state = 2296;
                    this.match(PostgreSqlParser.KW_DISTINCT);
                    }
                    break;
                }
                {
                this.state = 2301;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 201, this.context) ) {
                case 1:
                    {
                    this.state = 2299;
                    this.match(PostgreSqlParser.KW_INCLUDE);
                    this.state = 2300;
                    this.index_params();
                    }
                    break;
                }
                this.state = 2304;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 202, this.context) ) {
                case 1:
                    {
                    this.state = 2303;
                    this.with_clause();
                    }
                    break;
                }
                this.state = 2307;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2306;
                    this.optconstablespace();
                    }
                }

                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2309;
                this.match(PostgreSqlParser.KW_PRIMARY);
                this.state = 2310;
                this.match(PostgreSqlParser.KW_KEY);
                this.state = 2312;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 204, this.context) ) {
                case 1:
                    {
                    this.state = 2311;
                    this.opt_definition();
                    }
                    break;
                }
                this.state = 2315;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2314;
                    this.optconstablespace();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2317;
                this.match(PostgreSqlParser.KW_CHECK);
                this.state = 2318;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2319;
                this.expression();
                this.state = 2320;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 2323;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 206, this.context) ) {
                case 1:
                    {
                    this.state = 2321;
                    this.match(PostgreSqlParser.KW_NO);
                    this.state = 2322;
                    this.match(PostgreSqlParser.KW_INHERIT);
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2325;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 2326;
                this.primaryExpression(0);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2327;
                this.match(PostgreSqlParser.KW_GENERATED);
                this.state = 2328;
                this.generated_when();
                this.state = 2329;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 2346;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_IDENTITY:
                    {
                    this.state = 2330;
                    this.match(PostgreSqlParser.KW_IDENTITY);
                    this.state = 2339;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 208, this.context) ) {
                    case 1:
                        {
                        this.state = 2331;
                        this.match(PostgreSqlParser.OPEN_PAREN);
                        this.state = 2333;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        do {
                            {
                            {
                            this.state = 2332;
                            this.seqoptelem();
                            }
                            }
                            this.state = 2335;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        } while (_la === 36 || _la === 148 || _la === 225 || ((((_la - 260)) & ~0x1F) === 0 && ((1 << (_la - 260)) & 2097669) !== 0) || ((((_la - 314)) & ~0x1F) === 0 && ((1 << (_la - 314)) & 67125249) !== 0));
                        this.state = 2337;
                        this.match(PostgreSqlParser.CLOSE_PAREN);
                        }
                        break;
                    }
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 2341;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 2342;
                    this.expression();
                    this.state = 2343;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    this.state = 2344;
                    this.match(PostgreSqlParser.KW_STORED);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2348;
                this.match(PostgreSqlParser.KW_REFERENCES);
                this.state = 2349;
                this.qualified_name();
                this.state = 2351;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 210, this.context) ) {
                case 1:
                    {
                    this.state = 2350;
                    this.opt_column_list();
                    }
                    break;
                }
                this.state = 2354;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 211, this.context) ) {
                case 1:
                    {
                    this.state = 2353;
                    this.key_match();
                    }
                    break;
                }
                this.state = 2357;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2356;
                    this.key_actions();
                    }
                }

                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2359;
                this.opt_collate_clause();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generated_when(): Generated_whenContext {
        let localContext = new Generated_whenContext(this.context, this.state);
        this.enterRule(localContext, 138, PostgreSqlParser.RULE_generated_when);
        try {
            this.state = 2365;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ALWAYS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2362;
                this.match(PostgreSqlParser.KW_ALWAYS);
                }
                break;
            case PostgreSqlParser.KW_BY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2363;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 2364;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablelikeoption(): TablelikeoptionContext {
        let localContext = new TablelikeoptionContext(this.context, this.state);
        this.enterRule(localContext, 140, PostgreSqlParser.RULE_tablelikeoption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2367;
            _la = this.tokenStream.LA(1);
            if(!(_la === 30 || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 524321) !== 0) || _la === 219 || _la === 227 || _la === 342 || _la === 345 || _la === 438)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintelem(): ConstraintelemContext {
        let localContext = new ConstraintelemContext(this.context, this.state);
        this.enterRule(localContext, 142, PostgreSqlParser.RULE_constraintelem);
        let _la: number;
        try {
            let alternative: number;
            this.state = 2465;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CHECK:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2369;
                this.match(PostgreSqlParser.KW_CHECK);
                this.state = 2370;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2371;
                this.expression();
                this.state = 2372;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 2376;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 215, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2373;
                        this.constraintattributeElem();
                        }
                        }
                    }
                    this.state = 2378;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 215, this.context);
                }
                }
                break;
            case PostgreSqlParser.KW_PRIMARY:
            case PostgreSqlParser.KW_UNIQUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2382;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_UNIQUE:
                    {
                    this.state = 2379;
                    this.match(PostgreSqlParser.KW_UNIQUE);
                    }
                    break;
                case PostgreSqlParser.KW_PRIMARY:
                    {
                    {
                    this.state = 2380;
                    this.match(PostgreSqlParser.KW_PRIMARY);
                    this.state = 2381;
                    this.match(PostgreSqlParser.KW_KEY);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2407;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 2384;
                    this.opt_column_list();
                    this.state = 2386;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 217, this.context) ) {
                    case 1:
                        {
                        this.state = 2385;
                        this.opt_c_include();
                        }
                        break;
                    }
                    this.state = 2389;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 218, this.context) ) {
                    case 1:
                        {
                        this.state = 2388;
                        this.opt_definition();
                        }
                        break;
                    }
                    this.state = 2392;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 100) {
                        {
                        this.state = 2391;
                        this.optconstablespace();
                        }
                    }

                    this.state = 2397;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 220, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 2394;
                            this.constraintattributeElem();
                            }
                            }
                        }
                        this.state = 2399;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 220, this.context);
                    }
                    }
                    break;
                case PostgreSqlParser.KW_USING:
                    {
                    this.state = 2400;
                    this.existingindex();
                    this.state = 2404;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 221, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 2401;
                            this.constraintattributeElem();
                            }
                            }
                        }
                        this.state = 2406;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 221, this.context);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case PostgreSqlParser.KW_EXCLUDE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2409;
                this.match(PostgreSqlParser.KW_EXCLUDE);
                this.state = 2411;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2410;
                    this.table_access_method_clause();
                    }
                }

                this.state = 2413;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2414;
                this.exclusionconstraintelem();
                this.state = 2419;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 2415;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 2416;
                    this.exclusionconstraintelem();
                    }
                    }
                    this.state = 2421;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2422;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 2424;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 225, this.context) ) {
                case 1:
                    {
                    this.state = 2423;
                    this.opt_c_include();
                    }
                    break;
                }
                this.state = 2427;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 226, this.context) ) {
                case 1:
                    {
                    this.state = 2426;
                    this.opt_definition();
                    }
                    break;
                }
                this.state = 2430;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 2429;
                    this.optconstablespace();
                    }
                }

                this.state = 2437;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103) {
                    {
                    this.state = 2432;
                    this.match(PostgreSqlParser.KW_WHERE);
                    this.state = 2433;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 2434;
                    this.expression();
                    this.state = 2435;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                }

                this.state = 2442;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 229, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2439;
                        this.constraintattributeElem();
                        }
                        }
                    }
                    this.state = 2444;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 229, this.context);
                }
                }
                break;
            case PostgreSqlParser.KW_FOREIGN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2445;
                this.match(PostgreSqlParser.KW_FOREIGN);
                this.state = 2446;
                this.match(PostgreSqlParser.KW_KEY);
                this.state = 2447;
                this.opt_column_list();
                this.state = 2448;
                this.match(PostgreSqlParser.KW_REFERENCES);
                this.state = 2449;
                this.qualified_name();
                this.state = 2451;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 230, this.context) ) {
                case 1:
                    {
                    this.state = 2450;
                    this.opt_column_list();
                    }
                    break;
                }
                this.state = 2454;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 231, this.context) ) {
                case 1:
                    {
                    this.state = 2453;
                    this.key_match();
                    }
                    break;
                }
                this.state = 2457;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2456;
                    this.key_actions();
                    }
                }

                this.state = 2462;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 233, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2459;
                        this.constraintattributeElem();
                        }
                        }
                    }
                    this.state = 2464;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 233, this.context);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_column_list(): Opt_column_listContext {
        let localContext = new Opt_column_listContext(this.context, this.state);
        this.enterRule(localContext, 144, PostgreSqlParser.RULE_opt_column_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2467;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2468;
            this.column_list();
            this.state = 2469;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_column_list_create(): Opt_column_list_createContext {
        let localContext = new Opt_column_list_createContext(this.context, this.state);
        this.enterRule(localContext, 146, PostgreSqlParser.RULE_opt_column_list_create);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2471;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2472;
            this.column_name_create();
            this.state = 2477;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2473;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2474;
                this.column_name_create();
                }
                }
                this.state = 2479;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2480;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_list(): Column_listContext {
        let localContext = new Column_listContext(this.context, this.state);
        this.enterRule(localContext, 148, PostgreSqlParser.RULE_column_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2482;
            this.column_name();
            this.state = 2487;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 236, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2483;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 2484;
                    this.column_name();
                    }
                    }
                }
                this.state = 2489;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 236, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_c_include(): Opt_c_includeContext {
        let localContext = new Opt_c_includeContext(this.context, this.state);
        this.enterRule(localContext, 150, PostgreSqlParser.RULE_opt_c_include);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2490;
            this.match(PostgreSqlParser.KW_INCLUDE);
            this.state = 2491;
            this.opt_column_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_match(): Key_matchContext {
        let localContext = new Key_matchContext(this.context, this.state);
        this.enterRule(localContext, 152, PostgreSqlParser.RULE_key_match);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2493;
            this.match(PostgreSqlParser.KW_MATCH);
            this.state = 2494;
            _la = this.tokenStream.LA(1);
            if(!(_la === 113 || _la === 284 || _la === 336)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exclusionconstraintelem(): ExclusionconstraintelemContext {
        let localContext = new ExclusionconstraintelemContext(this.context, this.state);
        this.enterRule(localContext, 154, PostgreSqlParser.RULE_exclusionconstraintelem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2496;
            this.index_elem();
            this.state = 2497;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 2504;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 237, this.context) ) {
            case 1:
                {
                this.state = 2498;
                this.any_operator();
                }
                break;
            case 2:
                {
                this.state = 2499;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 2500;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2501;
                this.any_operator();
                this.state = 2502;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_actions(): Key_actionsContext {
        let localContext = new Key_actionsContext(this.context, this.state);
        this.enterRule(localContext, 156, PostgreSqlParser.RULE_key_actions);
        let _la: number;
        try {
            this.state = 2514;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 240, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2506;
                this.key_update();
                this.state = 2508;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2507;
                    this.key_delete();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2510;
                this.key_delete();
                this.state = 2512;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 2511;
                    this.key_update();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_update(): Key_updateContext {
        let localContext = new Key_updateContext(this.context, this.state);
        this.enterRule(localContext, 158, PostgreSqlParser.RULE_key_update);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2516;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 2517;
            this.match(PostgreSqlParser.KW_UPDATE);
            this.state = 2518;
            this.key_action();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_delete(): Key_deleteContext {
        let localContext = new Key_deleteContext(this.context, this.state);
        this.enterRule(localContext, 160, PostgreSqlParser.RULE_key_delete);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2520;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 2521;
            this.match(PostgreSqlParser.KW_DELETE);
            this.state = 2522;
            this.key_action();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_action(): Key_actionContext {
        let localContext = new Key_actionContext(this.context, this.state);
        this.enterRule(localContext, 162, PostgreSqlParser.RULE_key_action);
        let _la: number;
        try {
            this.state = 2533;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_NO:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2524;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 2525;
                this.match(PostgreSqlParser.KW_ACTION);
                }
                break;
            case PostgreSqlParser.KW_RESTRICT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2526;
                this.match(PostgreSqlParser.KW_RESTRICT);
                }
                break;
            case PostgreSqlParser.KW_CASCADE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2527;
                this.match(PostgreSqlParser.KW_CASCADE);
                }
                break;
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2528;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 2529;
                _la = this.tokenStream.LA(1);
                if(!(_la === 53 || _la === 78)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2531;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 241, this.context) ) {
                case 1:
                    {
                    this.state = 2530;
                    this.column_list();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optinherit(): OptinheritContext {
        let localContext = new OptinheritContext(this.context, this.state);
        this.enterRule(localContext, 164, PostgreSqlParser.RULE_optinherit);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2535;
            this.match(PostgreSqlParser.KW_INHERITS);
            this.state = 2536;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2537;
            this.qualified_name_list();
            this.state = 2538;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionspec(): PartitionspecContext {
        let localContext = new PartitionspecContext(this.context, this.state);
        this.enterRule(localContext, 166, PostgreSqlParser.RULE_partitionspec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2540;
            this.match(PostgreSqlParser.KW_PARTITION);
            this.state = 2541;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 2542;
            this.colid();
            this.state = 2543;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2544;
            this.part_elem();
            this.state = 2549;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2545;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2546;
                this.part_elem();
                }
                }
                this.state = 2551;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2552;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public part_elem(): Part_elemContext {
        let localContext = new Part_elemContext(this.context, this.state);
        this.enterRule(localContext, 168, PostgreSqlParser.RULE_part_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2560;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 244, this.context) ) {
            case 1:
                {
                this.state = 2554;
                this.column_name();
                }
                break;
            case 2:
                {
                this.state = 2555;
                this.func_expr_windowless();
                }
                break;
            case 3:
                {
                {
                this.state = 2556;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2557;
                this.expression();
                this.state = 2558;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                }
                break;
            }
            this.state = 2563;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 43) {
                {
                this.state = 2562;
                this.opt_collate_clause();
                }
            }

            this.state = 2566;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 2565;
                this.any_name();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_access_method_clause(): Table_access_method_clauseContext {
        let localContext = new Table_access_method_clauseContext(this.context, this.state);
        this.enterRule(localContext, 170, PostgreSqlParser.RULE_table_access_method_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2568;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 2569;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optwith(): OptwithContext {
        let localContext = new OptwithContext(this.context, this.state);
        this.enterRule(localContext, 172, PostgreSqlParser.RULE_optwith);
        let _la: number;
        try {
            this.state = 2575;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 247, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2571;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 2572;
                this.reloptions();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2573;
                _la = this.tokenStream.LA(1);
                if(!(_la === 105 || _la === 379)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2574;
                this.match(PostgreSqlParser.KW_OIDS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public oncommitoption(): OncommitoptionContext {
        let localContext = new OncommitoptionContext(this.context, this.state);
        this.enterRule(localContext, 174, PostgreSqlParser.RULE_oncommitoption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2577;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 2578;
            this.match(PostgreSqlParser.KW_COMMIT);
            this.state = 2584;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DROP:
                {
                this.state = 2579;
                this.match(PostgreSqlParser.KW_DROP);
                }
                break;
            case PostgreSqlParser.KW_DELETE:
                {
                this.state = 2580;
                this.match(PostgreSqlParser.KW_DELETE);
                this.state = 2581;
                this.match(PostgreSqlParser.KW_ROWS);
                }
                break;
            case PostgreSqlParser.KW_PRESERVE:
                {
                this.state = 2582;
                this.match(PostgreSqlParser.KW_PRESERVE);
                this.state = 2583;
                this.match(PostgreSqlParser.KW_ROWS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opttablespace(): OpttablespaceContext {
        let localContext = new OpttablespaceContext(this.context, this.state);
        this.enterRule(localContext, 176, PostgreSqlParser.RULE_opttablespace);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2586;
            this.match(PostgreSqlParser.KW_TABLESPACE);
            this.state = 2587;
            this.tablespace_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optconstablespace(): OptconstablespaceContext {
        let localContext = new OptconstablespaceContext(this.context, this.state);
        this.enterRule(localContext, 178, PostgreSqlParser.RULE_optconstablespace);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2589;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 2590;
            this.match(PostgreSqlParser.KW_INDEX);
            this.state = 2591;
            this.opttablespace();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public existingindex(): ExistingindexContext {
        let localContext = new ExistingindexContext(this.context, this.state);
        this.enterRule(localContext, 180, PostgreSqlParser.RULE_existingindex);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2593;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 2594;
            this.match(PostgreSqlParser.KW_INDEX);
            this.state = 2595;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createstatsstmt(): CreatestatsstmtContext {
        let localContext = new CreatestatsstmtContext(this.context, this.state);
        this.enterRule(localContext, 182, PostgreSqlParser.RULE_createstatsstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2597;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2598;
            this.match(PostgreSqlParser.KW_STATISTICS);
            this.state = 2603;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 2600;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 249, this.context) ) {
                case 1:
                    {
                    this.state = 2599;
                    this.opt_if_not_exists();
                    }
                    break;
                }
                this.state = 2602;
                this.any_name();
                }
            }

            this.state = 2606;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 2605;
                this.opt_column_list();
                }
            }

            this.state = 2608;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 2618;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 253, this.context) ) {
            case 1:
                {
                this.state = 2609;
                this.column_expr();
                this.state = 2614;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 2610;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 2611;
                    this.column_expr();
                    }
                    }
                    this.state = 2616;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                {
                this.state = 2617;
                this.expr_list();
                }
                break;
            }
            this.state = 2620;
            this.from_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterstatsstmt(): AlterstatsstmtContext {
        let localContext = new AlterstatsstmtContext(this.context, this.state);
        this.enterRule(localContext, 184, PostgreSqlParser.RULE_alterstatsstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2622;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 2623;
            this.match(PostgreSqlParser.KW_STATISTICS);
            this.state = 2625;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 254, this.context) ) {
            case 1:
                {
                this.state = 2624;
                this.opt_if_exists();
                }
                break;
            }
            this.state = 2627;
            this.any_name();
            this.state = 2628;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 2629;
            this.match(PostgreSqlParser.KW_STATISTICS);
            this.state = 2630;
            this.signediconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createasstmt(): CreateasstmtContext {
        let localContext = new CreateasstmtContext(this.context, this.state);
        this.enterRule(localContext, 186, PostgreSqlParser.RULE_createasstmt);
        let _la: number;
        try {
            localContext = new QueryCreateTableContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2632;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2634;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 213 || _la === 254 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 32773) !== 0)) {
                {
                this.state = 2633;
                this.opttemp();
                }
            }

            this.state = 2636;
            this.match(PostgreSqlParser.KW_TABLE);
            this.state = 2638;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 256, this.context) ) {
            case 1:
                {
                this.state = 2637;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 2640;
            this.create_as_target();
            this.state = 2641;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 2642;
            this.selectstmt();
            this.state = 2644;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 257, this.context) ) {
            case 1:
                {
                this.state = 2643;
                this.opt_with_data();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_as_target(): Create_as_targetContext {
        let localContext = new Create_as_targetContext(this.context, this.state);
        this.enterRule(localContext, 188, PostgreSqlParser.RULE_create_as_target);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2646;
            this.table_name_create();
            this.state = 2648;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 2647;
                this.opt_column_list_create();
                }
            }

            this.state = 2651;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 2650;
                this.table_access_method_clause();
                }
            }

            this.state = 2654;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105 || _la === 379) {
                {
                this.state = 2653;
                this.optwith();
                }
            }

            this.state = 2657;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 2656;
                this.oncommitoption();
                }
            }

            this.state = 2660;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 351) {
                {
                this.state = 2659;
                this.opttablespace();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_with_data(): Opt_with_dataContext {
        let localContext = new Opt_with_dataContext(this.context, this.state);
        this.enterRule(localContext, 190, PostgreSqlParser.RULE_opt_with_data);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2662;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 2666;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DATA:
                {
                this.state = 2663;
                this.match(PostgreSqlParser.KW_DATA);
                }
                break;
            case PostgreSqlParser.KW_NO:
                {
                this.state = 2664;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 2665;
                this.match(PostgreSqlParser.KW_DATA);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public creatematviewstmt(): CreatematviewstmtContext {
        let localContext = new CreatematviewstmtContext(this.context, this.state);
        this.enterRule(localContext, 192, PostgreSqlParser.RULE_creatematviewstmt);
        let _la: number;
        try {
            localContext = new CreateMaterializedViewContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2668;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2670;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 367) {
                {
                this.state = 2669;
                this.match(PostgreSqlParser.KW_UNLOGGED);
                }
            }

            this.state = 2672;
            this.match(PostgreSqlParser.KW_MATERIALIZED);
            this.state = 2673;
            this.match(PostgreSqlParser.KW_VIEW);
            this.state = 2675;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 265, this.context) ) {
            case 1:
                {
                this.state = 2674;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 2677;
            this.view_name_create();
            this.state = 2679;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 2678;
                this.opt_column_list_create();
                }
            }

            this.state = 2682;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 2681;
                this.table_access_method_clause();
                }
            }

            this.state = 2685;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 2684;
                this.opt_reloptions();
                }
            }

            this.state = 2688;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 351) {
                {
                this.state = 2687;
                this.opttablespace();
                }
            }

            this.state = 2690;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 2691;
            this.selectstmt();
            this.state = 2693;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 270, this.context) ) {
            case 1:
                {
                this.state = 2692;
                this.opt_with_data();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public refreshmatviewstmt(): RefreshmatviewstmtContext {
        let localContext = new RefreshmatviewstmtContext(this.context, this.state);
        this.enterRule(localContext, 194, PostgreSqlParser.RULE_refreshmatviewstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2695;
            this.match(PostgreSqlParser.KW_REFRESH);
            this.state = 2696;
            this.match(PostgreSqlParser.KW_MATERIALIZED);
            this.state = 2697;
            this.match(PostgreSqlParser.KW_VIEW);
            this.state = 2699;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 109) {
                {
                this.state = 2698;
                this.match(PostgreSqlParser.KW_CONCURRENTLY);
                }
            }

            this.state = 2701;
            this.view_name();
            this.state = 2703;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 272, this.context) ) {
            case 1:
                {
                this.state = 2702;
                this.opt_with_data();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createseqstmt(): CreateseqstmtContext {
        let localContext = new CreateseqstmtContext(this.context, this.state);
        this.enterRule(localContext, 196, PostgreSqlParser.RULE_createseqstmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2705;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2707;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 213 || _la === 254 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 32773) !== 0)) {
                {
                this.state = 2706;
                this.opttemp();
                }
            }

            this.state = 2709;
            this.match(PostgreSqlParser.KW_SEQUENCE);
            this.state = 2711;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 274, this.context) ) {
            case 1:
                {
                this.state = 2710;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 2713;
            this.qualified_name();
            this.state = 2719;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 276, this.context) ) {
            case 1:
                {
                this.state = 2715;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 2714;
                        this.seqoptelem();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 2717;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 275, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterseqstmt(): AlterseqstmtContext {
        let localContext = new AlterseqstmtContext(this.context, this.state);
        this.enterRule(localContext, 198, PostgreSqlParser.RULE_alterseqstmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2721;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 2722;
            this.match(PostgreSqlParser.KW_SEQUENCE);
            this.state = 2724;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 277, this.context) ) {
            case 1:
                {
                this.state = 2723;
                this.opt_if_exists();
                }
                break;
            }
            this.state = 2726;
            this.qualified_name();
            this.state = 2728;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 2727;
                    this.seqoptelem();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2730;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 278, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public seqoptelem(): SeqoptelemContext {
        let localContext = new SeqoptelemContext(this.context, this.state);
        this.enterRule(localContext, 200, PostgreSqlParser.RULE_seqoptelem);
        let _la: number;
        try {
            this.state = 2765;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_AS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2732;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 2733;
                this.simpletypename();
                }
                break;
            case PostgreSqlParser.KW_CACHE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2734;
                this.match(PostgreSqlParser.KW_CACHE);
                this.state = 2736;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 13 || _la === 571 || _la === 573) {
                    {
                    this.state = 2735;
                    this.numericonly();
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_INCREMENT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2738;
                this.match(PostgreSqlParser.KW_INCREMENT);
                this.state = 2740;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 147) {
                    {
                    this.state = 2739;
                    this.match(PostgreSqlParser.KW_BY);
                    }
                }

                this.state = 2742;
                this.numericonly();
                }
                break;
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINVALUE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2743;
                _la = this.tokenStream.LA(1);
                if(!(_la === 260 || _la === 262)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2744;
                this.numericonly();
                }
                break;
            case PostgreSqlParser.KW_NO:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2745;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 2746;
                _la = this.tokenStream.LA(1);
                if(!(_la === 173 || _la === 260 || _la === 262)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_OWNED:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2747;
                this.match(PostgreSqlParser.KW_OWNED);
                this.state = 2748;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 2749;
                this.column_name();
                }
                break;
            case PostgreSqlParser.KW_SEQUENCE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2750;
                this.match(PostgreSqlParser.KW_SEQUENCE);
                this.state = 2751;
                this.match(PostgreSqlParser.KW_NAME);
                this.state = 2752;
                this.any_name();
                }
                break;
            case PostgreSqlParser.KW_START:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2753;
                this.match(PostgreSqlParser.KW_START);
                this.state = 2755;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 2754;
                    this.match(PostgreSqlParser.KW_WITH);
                    }
                }

                this.state = 2757;
                this.numericonly();
                }
                break;
            case PostgreSqlParser.KW_RESTART:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2758;
                this.match(PostgreSqlParser.KW_RESTART);
                this.state = 2760;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 282, this.context) ) {
                case 1:
                    {
                    this.state = 2759;
                    this.match(PostgreSqlParser.KW_WITH);
                    }
                    break;
                }
                this.state = 2763;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 13 || _la === 571 || _la === 573) {
                    {
                    this.state = 2762;
                    this.numericonly();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numericonly(): NumericonlyContext {
        let localContext = new NumericonlyContext(this.context, this.state);
        this.enterRule(localContext, 202, PostgreSqlParser.RULE_numericonly);
        let _la: number;
        try {
            this.state = 2772;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 286, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2768;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 13) {
                    {
                    this.state = 2767;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 12 || _la === 13)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2770;
                this.match(PostgreSqlParser.Numeric);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2771;
                this.signediconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createplangstmt(): CreateplangstmtContext {
        let localContext = new CreateplangstmtContext(this.context, this.state);
        this.enterRule(localContext, 204, PostgreSqlParser.RULE_createplangstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2774;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2776;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 2775;
                this.opt_or_replace();
                }
            }

            this.state = 2779;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 359) {
                {
                this.state = 2778;
                this.match(PostgreSqlParser.KW_TRUSTED);
                }
            }

            this.state = 2782;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 295) {
                {
                this.state = 2781;
                this.match(PostgreSqlParser.KW_PROCEDURAL);
                }
            }

            this.state = 2784;
            this.match(PostgreSqlParser.KW_LANGUAGE);
            this.state = 2785;
            this.colid();
            this.state = 2798;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 292, this.context) ) {
            case 1:
                {
                this.state = 2786;
                this.match(PostgreSqlParser.KW_HANDLER);
                this.state = 2787;
                this.any_name();
                this.state = 2790;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 290, this.context) ) {
                case 1:
                    {
                    this.state = 2788;
                    this.match(PostgreSqlParser.KW_INLINE);
                    this.state = 2789;
                    this.any_name();
                    }
                    break;
                }
                this.state = 2796;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 291, this.context) ) {
                case 1:
                    {
                    this.state = 2792;
                    this.match(PostgreSqlParser.KW_VALIDATOR);
                    this.state = 2793;
                    this.any_name();
                    }
                    break;
                case 2:
                    {
                    this.state = 2794;
                    this.match(PostgreSqlParser.KW_NO);
                    this.state = 2795;
                    this.match(PostgreSqlParser.KW_VALIDATOR);
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createtablespacestmt(): CreatetablespacestmtContext {
        let localContext = new CreatetablespacestmtContext(this.context, this.state);
        this.enterRule(localContext, 206, PostgreSqlParser.RULE_createtablespacestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2800;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2801;
            this.opttablespace();
            this.state = 2804;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 282) {
                {
                this.state = 2802;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 2803;
                this.rolespec();
                }
            }

            this.state = 2806;
            this.match(PostgreSqlParser.KW_LOCATION);
            this.state = 2807;
            this.sconst();
            this.state = 2809;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 294, this.context) ) {
            case 1:
                {
                this.state = 2808;
                this.opt_reloptions();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createextensionstmt(): CreateextensionstmtContext {
        let localContext = new CreateextensionstmtContext(this.context, this.state);
        this.enterRule(localContext, 208, PostgreSqlParser.RULE_createextensionstmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2811;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2812;
            this.match(PostgreSqlParser.KW_EXTENSION);
            this.state = 2814;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 295, this.context) ) {
            case 1:
                {
                this.state = 2813;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 2816;
            this.colid();
            this.state = 2818;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 296, this.context) ) {
            case 1:
                {
                this.state = 2817;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 2827;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 298, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 2825;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_SCHEMA:
                        {
                        this.state = 2820;
                        this.match(PostgreSqlParser.KW_SCHEMA);
                        this.state = 2821;
                        this.schema_name();
                        }
                        break;
                    case PostgreSqlParser.KW_FROM:
                    case PostgreSqlParser.KW_VERSION:
                        {
                        this.state = 2822;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 64 || _la === 375)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2823;
                        this.nonreservedword_or_sconst();
                        }
                        break;
                    case PostgreSqlParser.KW_CASCADE:
                        {
                        this.state = 2824;
                        this.match(PostgreSqlParser.KW_CASCADE);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }
                this.state = 2829;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 298, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterextensionstmt(): AlterextensionstmtContext {
        let localContext = new AlterextensionstmtContext(this.context, this.state);
        this.enterRule(localContext, 210, PostgreSqlParser.RULE_alterextensionstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2830;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 2831;
            this.match(PostgreSqlParser.KW_EXTENSION);
            this.state = 2832;
            this.colid();
            this.state = 2833;
            this.match(PostgreSqlParser.KW_UPDATE);
            this.state = 2838;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 94) {
                {
                {
                this.state = 2834;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 2835;
                this.nonreservedword_or_sconst();
                }
                }
                this.state = 2840;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterextensioncontentsstmt(): AlterextensioncontentsstmtContext {
        let localContext = new AlterextensioncontentsstmtContext(this.context, this.state);
        this.enterRule(localContext, 212, PostgreSqlParser.RULE_alterextensioncontentsstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2841;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 2842;
            this.match(PostgreSqlParser.KW_EXTENSION);
            this.state = 2843;
            this.colid();
            this.state = 2844;
            _la = this.tokenStream.LA(1);
            if(!(_la === 133 || _la === 191)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2877;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 300, this.context) ) {
            case 1:
                {
                this.state = 2845;
                this.match(PostgreSqlParser.KW_TRANSFORM);
                this.state = 2846;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 2847;
                this.typename();
                this.state = 2848;
                this.match(PostgreSqlParser.KW_LANGUAGE);
                this.state = 2849;
                this.colid();
                }
                break;
            case 2:
                {
                this.state = 2851;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 2852;
                this.routine_with_argtypes();
                }
                break;
            case 3:
                {
                this.state = 2853;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 2854;
                this.procedure_with_argtypes();
                }
                break;
            case 4:
                {
                this.state = 2855;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 2856;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 206)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2857;
                this.any_name();
                this.state = 2858;
                this.table_access_method_clause();
                }
                break;
            case 5:
                {
                this.state = 2860;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 2861;
                this.operator_with_argtypes();
                }
                break;
            case 6:
                {
                this.state = 2862;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 2863;
                this.function_with_argtypes();
                }
                break;
            case 7:
                {
                this.state = 2864;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2865;
                this.typename();
                }
                break;
            case 8:
                {
                this.state = 2866;
                this.match(PostgreSqlParser.KW_CAST);
                this.state = 2867;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2868;
                this.typename();
                this.state = 2869;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 2870;
                this.typename();
                this.state = 2871;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 9:
                {
                this.state = 2873;
                this.match(PostgreSqlParser.KW_AGGREGATE);
                this.state = 2874;
                this.aggregate_with_argtypes();
                }
                break;
            case 10:
                {
                this.state = 2875;
                this.object_type_name();
                }
                break;
            case 11:
                {
                this.state = 2876;
                this.object_type_any_name();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createfdwstmt(): CreatefdwstmtContext {
        let localContext = new CreatefdwstmtContext(this.context, this.state);
        this.enterRule(localContext, 214, PostgreSqlParser.RULE_createfdwstmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2879;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2880;
            this.match(PostgreSqlParser.KW_FOREIGN);
            this.state = 2881;
            this.match(PostgreSqlParser.KW_DATA);
            this.state = 2882;
            this.match(PostgreSqlParser.KW_WRAPPER);
            this.state = 2883;
            this.colid();
            this.state = 2889;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 302, this.context) ) {
            case 1:
                {
                this.state = 2885;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 2884;
                        this.fdw_option();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 2887;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 301, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
            this.state = 2892;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 303, this.context) ) {
            case 1:
                {
                this.state = 2891;
                this.create_generic_options();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fdw_option(): Fdw_optionContext {
        let localContext = new Fdw_optionContext(this.context, this.state);
        this.enterRule(localContext, 216, PostgreSqlParser.RULE_fdw_option);
        let _la: number;
        try {
            this.state = 2900;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_VALIDATOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2894;
                _la = this.tokenStream.LA(1);
                if(!(_la === 215 || _la === 373)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2896;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 304, this.context) ) {
                case 1:
                    {
                    this.state = 2895;
                    this.any_name();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_NO:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2898;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 2899;
                _la = this.tokenStream.LA(1);
                if(!(_la === 215 || _la === 373)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterfdwstmt(): AlterfdwstmtContext {
        let localContext = new AlterfdwstmtContext(this.context, this.state);
        this.enterRule(localContext, 218, PostgreSqlParser.RULE_alterfdwstmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2902;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 2903;
            this.match(PostgreSqlParser.KW_FOREIGN);
            this.state = 2904;
            this.match(PostgreSqlParser.KW_DATA);
            this.state = 2905;
            this.match(PostgreSqlParser.KW_WRAPPER);
            this.state = 2906;
            this.colid();
            this.state = 2920;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 309, this.context) ) {
            case 1:
                {
                this.state = 2912;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 215 || _la === 269 || _la === 373) {
                    {
                    this.state = 2908;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 2907;
                        this.fdw_option();
                        }
                        }
                        this.state = 2910;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (_la === 215 || _la === 269 || _la === 373);
                    }
                }

                this.state = 2914;
                this.alter_generic_options();
                }
                break;
            case 2:
                {
                this.state = 2916;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 2915;
                        this.fdw_option();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 2918;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 308, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_generic_options(): Create_generic_optionsContext {
        let localContext = new Create_generic_optionsContext(this.context, this.state);
        this.enterRule(localContext, 220, PostgreSqlParser.RULE_create_generic_options);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2922;
            this.match(PostgreSqlParser.KW_OPTIONS);
            this.state = 2923;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2924;
            this.generic_option_elem();
            this.state = 2929;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2925;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2926;
                this.generic_option_elem();
                }
                }
                this.state = 2931;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2932;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_generic_options(): Alter_generic_optionsContext {
        let localContext = new Alter_generic_optionsContext(this.context, this.state);
        this.enterRule(localContext, 222, PostgreSqlParser.RULE_alter_generic_options);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2934;
            this.match(PostgreSqlParser.KW_OPTIONS);
            this.state = 2935;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 2936;
            this.alter_generic_option_elem();
            this.state = 2941;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2937;
                this.match(PostgreSqlParser.COMMA);
                this.state = 2938;
                this.alter_generic_option_elem();
                }
                }
                this.state = 2943;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2944;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_generic_option_elem(): Alter_generic_option_elemContext {
        let localContext = new Alter_generic_option_elemContext(this.context, this.state);
        this.enterRule(localContext, 224, PostgreSqlParser.RULE_alter_generic_option_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2946;
            _la = this.tokenStream.LA(1);
            if(!(_la === 133 || _la === 191 || _la === 333)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2947;
            this.generic_option_elem();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generic_option_elem(): Generic_option_elemContext {
        let localContext = new Generic_option_elemContext(this.context, this.state);
        this.enterRule(localContext, 226, PostgreSqlParser.RULE_generic_option_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2949;
            this.collabel();
            this.state = 2950;
            this.sconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createforeignserverstmt(): CreateforeignserverstmtContext {
        let localContext = new CreateforeignserverstmtContext(this.context, this.state);
        this.enterRule(localContext, 228, PostgreSqlParser.RULE_createforeignserverstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2952;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 2953;
            this.match(PostgreSqlParser.KW_SERVER);
            this.state = 2955;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 312, this.context) ) {
            case 1:
                {
                this.state = 2954;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 2957;
            this.colid();
            this.state = 2960;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 360) {
                {
                this.state = 2958;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 2959;
                this.sconst();
                }
            }

            this.state = 2963;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 375) {
                {
                this.state = 2962;
                this.foreign_server_version();
                }
            }

            this.state = 2965;
            this.match(PostgreSqlParser.KW_FOREIGN);
            this.state = 2966;
            this.match(PostgreSqlParser.KW_DATA);
            this.state = 2967;
            this.match(PostgreSqlParser.KW_WRAPPER);
            this.state = 2968;
            this.colid();
            this.state = 2970;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 315, this.context) ) {
            case 1:
                {
                this.state = 2969;
                this.create_generic_options();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public foreign_server_version(): Foreign_server_versionContext {
        let localContext = new Foreign_server_versionContext(this.context, this.state);
        this.enterRule(localContext, 230, PostgreSqlParser.RULE_foreign_server_version);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2972;
            this.match(PostgreSqlParser.KW_VERSION);
            this.state = 2975;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 2973;
                this.sconst();
                }
                break;
            case PostgreSqlParser.KW_NULL:
                {
                this.state = 2974;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterforeignserverstmt(): AlterforeignserverstmtContext {
        let localContext = new AlterforeignserverstmtContext(this.context, this.state);
        this.enterRule(localContext, 232, PostgreSqlParser.RULE_alterforeignserverstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2977;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 2978;
            this.match(PostgreSqlParser.KW_SERVER);
            this.state = 2979;
            this.colid();
            this.state = 2985;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_OPTIONS:
                {
                this.state = 2980;
                this.alter_generic_options();
                }
                break;
            case PostgreSqlParser.KW_VERSION:
                {
                this.state = 2981;
                this.foreign_server_version();
                this.state = 2983;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 317, this.context) ) {
                case 1:
                    {
                    this.state = 2982;
                    this.alter_generic_options();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createforeigntablestmt(): CreateforeigntablestmtContext {
        let localContext = new CreateforeigntablestmtContext(this.context, this.state);
        this.enterRule(localContext, 234, PostgreSqlParser.RULE_createforeigntablestmt);
        let _la: number;
        try {
            this.state = 3026;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 326, this.context) ) {
            case 1:
                localContext = new CreateForeignTableContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2987;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 2988;
                this.match(PostgreSqlParser.KW_FOREIGN);
                this.state = 2989;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 2991;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 319, this.context) ) {
                case 1:
                    {
                    this.state = 2990;
                    this.opt_if_not_exists();
                    }
                    break;
                }
                this.state = 2993;
                this.table_name_create();
                this.state = 2994;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 2996;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & 2099209) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & 2147491841) !== 0) || ((((_la - 120)) & ~0x1F) === 0 && ((1 << (_la - 120)) & 4294966809) !== 0) || ((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & 4294967295) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & 4294967295) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & 4290781183) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & 4294967295) !== 0) || ((((_la - 280)) & ~0x1F) === 0 && ((1 << (_la - 280)) & 4294967295) !== 0) || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & 4294967295) !== 0) || ((((_la - 344)) & ~0x1F) === 0 && ((1 << (_la - 344)) & 4294967295) !== 0) || ((((_la - 376)) & ~0x1F) === 0 && ((1 << (_la - 376)) & 4294967295) !== 0) || ((((_la - 408)) & ~0x1F) === 0 && ((1 << (_la - 408)) & 4294967295) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & 4294950911) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & 3221225471) !== 0) || ((((_la - 506)) & ~0x1F) === 0 && ((1 << (_la - 506)) & 286719) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                    {
                    this.state = 2995;
                    this.tableelementlist();
                    }
                }

                this.state = 2998;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 3000;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 238) {
                    {
                    this.state = 2999;
                    this.optinherit();
                    }
                }

                this.state = 3002;
                this.match(PostgreSqlParser.KW_SERVER);
                this.state = 3003;
                this.colid();
                this.state = 3005;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 322, this.context) ) {
                case 1:
                    {
                    this.state = 3004;
                    this.create_generic_options();
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new CreatePartitionForeignTableContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3007;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3008;
                this.match(PostgreSqlParser.KW_FOREIGN);
                this.state = 3009;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 3011;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 323, this.context) ) {
                case 1:
                    {
                    this.state = 3010;
                    this.opt_if_not_exists();
                    }
                    break;
                }
                this.state = 3013;
                this.table_name_create();
                this.state = 3014;
                this.match(PostgreSqlParser.KW_PARTITION);
                this.state = 3015;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 3016;
                this.table_name();
                this.state = 3018;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 3017;
                    this.opttypedtableelementlist();
                    }
                }

                this.state = 3020;
                this.partitionboundspec();
                this.state = 3021;
                this.match(PostgreSqlParser.KW_SERVER);
                this.state = 3022;
                this.colid();
                this.state = 3024;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 325, this.context) ) {
                case 1:
                    {
                    this.state = 3023;
                    this.create_generic_options();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public importforeignschemastmt(): ImportforeignschemastmtContext {
        let localContext = new ImportforeignschemastmtContext(this.context, this.state);
        this.enterRule(localContext, 236, PostgreSqlParser.RULE_importforeignschemastmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3028;
            this.match(PostgreSqlParser.KW_IMPORT);
            this.state = 3029;
            this.match(PostgreSqlParser.KW_FOREIGN);
            this.state = 3030;
            this.match(PostgreSqlParser.KW_SCHEMA);
            this.state = 3031;
            this.schema_name();
            this.state = 3041;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 59 || _la === 74) {
                {
                this.state = 3035;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_LIMIT:
                    {
                    this.state = 3032;
                    this.match(PostgreSqlParser.KW_LIMIT);
                    this.state = 3033;
                    this.match(PostgreSqlParser.KW_TO);
                    }
                    break;
                case PostgreSqlParser.KW_EXCEPT:
                    {
                    this.state = 3034;
                    this.match(PostgreSqlParser.KW_EXCEPT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3037;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 3038;
                this.relation_expr_list();
                this.state = 3039;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
            }

            this.state = 3043;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 3044;
            this.match(PostgreSqlParser.KW_SERVER);
            this.state = 3045;
            this.colid();
            this.state = 3046;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 3047;
            this.colid();
            this.state = 3049;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 329, this.context) ) {
            case 1:
                {
                this.state = 3048;
                this.create_generic_options();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createusermappingstmt(): CreateusermappingstmtContext {
        let localContext = new CreateusermappingstmtContext(this.context, this.state);
        this.enterRule(localContext, 238, PostgreSqlParser.RULE_createusermappingstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3051;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3052;
            this.match(PostgreSqlParser.KW_USER);
            this.state = 3053;
            this.match(PostgreSqlParser.KW_MAPPING);
            this.state = 3055;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 220) {
                {
                this.state = 3054;
                this.opt_if_not_exists();
                }
            }

            this.state = 3057;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 3060;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 3058;
                this.rolespec();
                }
                break;
            case PostgreSqlParser.KW_USER:
                {
                this.state = 3059;
                this.match(PostgreSqlParser.KW_USER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3062;
            this.match(PostgreSqlParser.KW_SERVER);
            this.state = 3063;
            this.colid();
            this.state = 3065;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 332, this.context) ) {
            case 1:
                {
                this.state = 3064;
                this.create_generic_options();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterusermappingstmt(): AlterusermappingstmtContext {
        let localContext = new AlterusermappingstmtContext(this.context, this.state);
        this.enterRule(localContext, 240, PostgreSqlParser.RULE_alterusermappingstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3067;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3068;
            this.match(PostgreSqlParser.KW_USER);
            this.state = 3069;
            this.match(PostgreSqlParser.KW_MAPPING);
            this.state = 3070;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 3073;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 3071;
                this.rolespec();
                }
                break;
            case PostgreSqlParser.KW_USER:
                {
                this.state = 3072;
                this.match(PostgreSqlParser.KW_USER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3075;
            this.match(PostgreSqlParser.KW_SERVER);
            this.state = 3076;
            this.colid();
            this.state = 3077;
            this.alter_generic_options();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createpolicystmt(): CreatepolicystmtContext {
        let localContext = new CreatepolicystmtContext(this.context, this.state);
        this.enterRule(localContext, 242, PostgreSqlParser.RULE_createpolicystmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3079;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3080;
            this.match(PostgreSqlParser.KW_POLICY);
            this.state = 3081;
            this.colid();
            this.state = 3082;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 3083;
            this.qualified_name();
            this.state = 3090;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 335, this.context) ) {
            case 1:
                {
                this.state = 3084;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 3088;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_PERMISSIVE:
                    {
                    this.state = 3085;
                    this.match(PostgreSqlParser.KW_PERMISSIVE);
                    }
                    break;
                case PostgreSqlParser.KW_RESTRICTIVE:
                    {
                    this.state = 3086;
                    this.match(PostgreSqlParser.KW_RESTRICTIVE);
                    }
                    break;
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 3087;
                    this.identifier();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            this.state = 3094;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 62) {
                {
                this.state = 3092;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 3093;
                _la = this.tokenStream.LA(1);
                if(!(_la === 30 || _la === 88 || _la === 182 || _la === 241 || _la === 369)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3098;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 94) {
                {
                this.state = 3096;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 3097;
                this.role_list();
                }
            }

            this.state = 3101;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 3100;
                this.rowsecurityoptionalexpr();
                }
            }

            this.state = 3104;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 339, this.context) ) {
            case 1:
                {
                this.state = 3103;
                this.rowsecurityoptionalwithcheck();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterpolicystmt(): AlterpolicystmtContext {
        let localContext = new AlterpolicystmtContext(this.context, this.state);
        this.enterRule(localContext, 244, PostgreSqlParser.RULE_alterpolicystmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3106;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3107;
            this.match(PostgreSqlParser.KW_POLICY);
            this.state = 3108;
            this.colid();
            this.state = 3109;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 3110;
            this.qualified_name();
            this.state = 3113;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 94) {
                {
                this.state = 3111;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 3112;
                this.role_list();
                }
            }

            this.state = 3116;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 3115;
                this.rowsecurityoptionalexpr();
                }
            }

            this.state = 3119;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 342, this.context) ) {
            case 1:
                {
                this.state = 3118;
                this.rowsecurityoptionalwithcheck();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterprocedurestmt(): AlterprocedurestmtContext {
        let localContext = new AlterprocedurestmtContext(this.context, this.state);
        this.enterRule(localContext, 246, PostgreSqlParser.RULE_alterprocedurestmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3121;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3122;
            this.match(PostgreSqlParser.KW_PROCEDURE);
            this.state = 3123;
            this.procedure_name();
            this.state = 3125;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 3124;
                this.func_args();
                }
            }

            this.state = 3153;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 347, this.context) ) {
            case 1:
                {
                this.state = 3127;
                this.procedure_action();
                this.state = 3131;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 344, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 3128;
                        this.procedure_action();
                        }
                        }
                    }
                    this.state = 3133;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 344, this.context);
                }
                this.state = 3135;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 345, this.context) ) {
                case 1:
                    {
                    this.state = 3134;
                    this.match(PostgreSqlParser.KW_RESTRICT);
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 3137;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 3138;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 3139;
                this.procedure_name_create();
                }
                break;
            case 3:
                {
                this.state = 3140;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 3141;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 3142;
                this.rolespec();
                }
                break;
            case 4:
                {
                this.state = 3143;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 3144;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 3145;
                this.schema_name_create();
                }
                break;
            case 5:
                {
                this.state = 3147;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 3146;
                    this.match(PostgreSqlParser.KW_NO);
                    }
                }

                this.state = 3149;
                this.match(PostgreSqlParser.KW_DEPENDS);
                this.state = 3150;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3151;
                this.match(PostgreSqlParser.KW_EXTENSION);
                this.state = 3152;
                this.colid();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedure_action(): Procedure_actionContext {
        let localContext = new Procedure_actionContext(this.context, this.state);
        this.enterRule(localContext, 248, PostgreSqlParser.RULE_procedure_action);
        let _la: number;
        try {
            this.state = 3184;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 353, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3165;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 350, this.context) ) {
                case 1:
                    {
                    this.state = 3156;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 205) {
                        {
                        this.state = 3155;
                        this.match(PostgreSqlParser.KW_EXTERNAL);
                        }
                    }

                    this.state = 3158;
                    this.match(PostgreSqlParser.KW_SECURITY);
                    this.state = 3159;
                    this.match(PostgreSqlParser.KW_INVOKER);
                    }
                    break;
                case 2:
                    {
                    this.state = 3161;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 205) {
                        {
                        this.state = 3160;
                        this.match(PostgreSqlParser.KW_EXTERNAL);
                        }
                    }

                    this.state = 3163;
                    this.match(PostgreSqlParser.KW_SECURITY);
                    this.state = 3164;
                    this.match(PostgreSqlParser.KW_DEFINER);
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3167;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 3168;
                this.colid();
                this.state = 3169;
                _la = this.tokenStream.LA(1);
                if(!(_la === 9 || _la === 94)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3172;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 351, this.context) ) {
                case 1:
                    {
                    this.state = 3170;
                    this.colid();
                    }
                    break;
                case 2:
                    {
                    this.state = 3171;
                    this.match(PostgreSqlParser.KW_DEFAULT);
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3174;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 3175;
                this.colid();
                this.state = 3176;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 3177;
                this.match(PostgreSqlParser.KW_CURRENT);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3179;
                this.match(PostgreSqlParser.KW_RESET);
                this.state = 3182;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 3180;
                    this.colid();
                    }
                    break;
                case PostgreSqlParser.KW_ALL:
                    {
                    this.state = 3181;
                    this.match(PostgreSqlParser.KW_ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsecurityoptionalexpr(): RowsecurityoptionalexprContext {
        let localContext = new RowsecurityoptionalexprContext(this.context, this.state);
        this.enterRule(localContext, 250, PostgreSqlParser.RULE_rowsecurityoptionalexpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3186;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 3187;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3188;
            this.expression();
            this.state = 3189;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsecurityoptionalwithcheck(): RowsecurityoptionalwithcheckContext {
        let localContext = new RowsecurityoptionalwithcheckContext(this.context, this.state);
        this.enterRule(localContext, 252, PostgreSqlParser.RULE_rowsecurityoptionalwithcheck);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3191;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 3192;
            this.match(PostgreSqlParser.KW_CHECK);
            this.state = 3193;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3194;
            this.expression();
            this.state = 3195;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createamstmt(): CreateamstmtContext {
        let localContext = new CreateamstmtContext(this.context, this.state);
        this.enterRule(localContext, 254, PostgreSqlParser.RULE_createamstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3197;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3198;
            this.match(PostgreSqlParser.KW_ACCESS);
            this.state = 3199;
            this.match(PostgreSqlParser.KW_METHOD);
            this.state = 3200;
            this.colid();
            this.state = 3201;
            this.match(PostgreSqlParser.KW_TYPE);
            this.state = 3202;
            _la = this.tokenStream.LA(1);
            if(!(_la === 92 || _la === 226)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3203;
            this.match(PostgreSqlParser.KW_HANDLER);
            this.state = 3204;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createtrigstmt(): CreatetrigstmtContext {
        let localContext = new CreatetrigstmtContext(this.context, this.state);
        this.enterRule(localContext, 256, PostgreSqlParser.RULE_createtrigstmt);
        let _la: number;
        try {
            this.state = 3284;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 368, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3206;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3208;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 3207;
                    this.opt_or_replace();
                    }
                }

                this.state = 3210;
                this.match(PostgreSqlParser.KW_TRIGGER);
                this.state = 3211;
                this.colid();
                this.state = 3212;
                this.triggeractiontime();
                this.state = 3213;
                this.triggerevents();
                this.state = 3214;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3215;
                this.table_name();
                this.state = 3227;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 447) {
                    {
                    this.state = 3216;
                    this.match(PostgreSqlParser.KW_REFERENCING);
                    this.state = 3223;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        {
                        this.state = 3217;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 448 || _la === 449)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3218;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 92 || _la === 414)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3220;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 36) {
                            {
                            this.state = 3219;
                            this.match(PostgreSqlParser.KW_AS);
                            }
                        }

                        this.state = 3222;
                        this.colid();
                        }
                        }
                        this.state = 3225;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (_la === 448 || _la === 449);
                    }
                }

                this.state = 3234;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 3229;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 3231;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 192) {
                        {
                        this.state = 3230;
                        this.match(PostgreSqlParser.KW_EACH);
                        }
                    }

                    this.state = 3233;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 341 || _la === 414)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3237;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102) {
                    {
                    this.state = 3236;
                    this.triggerwhen();
                    }
                }

                this.state = 3239;
                this.match(PostgreSqlParser.KW_EXECUTE);
                this.state = 3240;
                this.function_or_procedure();
                this.state = 3241;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 3242;
                this.triggerfuncargs();
                this.state = 3243;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3245;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3247;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 3246;
                    this.opt_or_replace();
                    }
                }

                this.state = 3250;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 3249;
                    this.match(PostgreSqlParser.KW_CONSTRAINT);
                    }
                }

                this.state = 3252;
                this.match(PostgreSqlParser.KW_TRIGGER);
                this.state = 3253;
                this.colid();
                this.state = 3254;
                this.triggeractiontime();
                this.state = 3255;
                this.triggerevents();
                this.state = 3256;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3257;
                this.table_name();
                this.state = 3260;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64) {
                    {
                    this.state = 3258;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 3259;
                    this.qualified_name();
                    }
                }

                this.state = 3265;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (((((_la - 54)) & ~0x1F) === 0 && ((1 << (_la - 54)) & 8421377) !== 0) || _la === 269) {
                    {
                    {
                    this.state = 3262;
                    this.constraintattributeElem();
                    }
                    }
                    this.state = 3267;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3273;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 3268;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 3270;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 192) {
                        {
                        this.state = 3269;
                        this.match(PostgreSqlParser.KW_EACH);
                        }
                    }

                    this.state = 3272;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 341 || _la === 414)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3276;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102) {
                    {
                    this.state = 3275;
                    this.triggerwhen();
                    }
                }

                this.state = 3278;
                this.match(PostgreSqlParser.KW_EXECUTE);
                this.state = 3279;
                this.function_or_procedure();
                this.state = 3280;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 3281;
                this.triggerfuncargs();
                this.state = 3282;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggeractiontime(): TriggeractiontimeContext {
        let localContext = new TriggeractiontimeContext(this.context, this.state);
        this.enterRule(localContext, 258, PostgreSqlParser.RULE_triggeractiontime);
        try {
            this.state = 3290;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_BEFORE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3286;
                this.match(PostgreSqlParser.KW_BEFORE);
                }
                break;
            case PostgreSqlParser.KW_AFTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3287;
                this.match(PostgreSqlParser.KW_AFTER);
                }
                break;
            case PostgreSqlParser.KW_INSTEAD:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3288;
                this.match(PostgreSqlParser.KW_INSTEAD);
                this.state = 3289;
                this.match(PostgreSqlParser.KW_OF);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerevents(): TriggereventsContext {
        let localContext = new TriggereventsContext(this.context, this.state);
        this.enterRule(localContext, 260, PostgreSqlParser.RULE_triggerevents);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3292;
            this.triggeroneevent();
            this.state = 3297;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 82) {
                {
                {
                this.state = 3293;
                this.match(PostgreSqlParser.KW_OR);
                this.state = 3294;
                this.triggeroneevent();
                }
                }
                this.state = 3299;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggeroneevent(): TriggeroneeventContext {
        let localContext = new TriggeroneeventContext(this.context, this.state);
        this.enterRule(localContext, 262, PostgreSqlParser.RULE_triggeroneevent);
        let _la: number;
        try {
            this.state = 3308;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_INSERT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3300;
                this.match(PostgreSqlParser.KW_INSERT);
                }
                break;
            case PostgreSqlParser.KW_DELETE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3301;
                this.match(PostgreSqlParser.KW_DELETE);
                }
                break;
            case PostgreSqlParser.KW_UPDATE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3302;
                this.match(PostgreSqlParser.KW_UPDATE);
                this.state = 3305;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 275) {
                    {
                    this.state = 3303;
                    this.match(PostgreSqlParser.KW_OF);
                    this.state = 3304;
                    this.column_list();
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_TRUNCATE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3307;
                this.match(PostgreSqlParser.KW_TRUNCATE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerwhen(): TriggerwhenContext {
        let localContext = new TriggerwhenContext(this.context, this.state);
        this.enterRule(localContext, 264, PostgreSqlParser.RULE_triggerwhen);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3310;
            this.match(PostgreSqlParser.KW_WHEN);
            this.state = 3311;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3312;
            this.expression();
            this.state = 3313;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_or_procedure(): Function_or_procedureContext {
        let localContext = new Function_or_procedureContext(this.context, this.state);
        this.enterRule(localContext, 266, PostgreSqlParser.RULE_function_or_procedure);
        try {
            this.state = 3319;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FUNCTION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3315;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 3316;
                this.function_name();
                }
                break;
            case PostgreSqlParser.KW_PROCEDURE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3317;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 3318;
                this.procedure_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerfuncargs(): TriggerfuncargsContext {
        let localContext = new TriggerfuncargsContext(this.context, this.state);
        this.enterRule(localContext, 268, PostgreSqlParser.RULE_triggerfuncargs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3323;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ALL:
            case PostgreSqlParser.KW_ANALYSE:
            case PostgreSqlParser.KW_ANALYZE:
            case PostgreSqlParser.KW_AND:
            case PostgreSqlParser.KW_ANY:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_AS:
            case PostgreSqlParser.KW_ASC:
            case PostgreSqlParser.KW_ASYMMETRIC:
            case PostgreSqlParser.KW_BOTH:
            case PostgreSqlParser.KW_CASE:
            case PostgreSqlParser.KW_CAST:
            case PostgreSqlParser.KW_CHECK:
            case PostgreSqlParser.KW_COLLATE:
            case PostgreSqlParser.KW_COLUMN:
            case PostgreSqlParser.KW_CONSTRAINT:
            case PostgreSqlParser.KW_CREATE:
            case PostgreSqlParser.KW_CURRENT_CATALOG:
            case PostgreSqlParser.KW_CURRENT_DATE:
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_TIME:
            case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_DEFERRABLE:
            case PostgreSqlParser.KW_DESC:
            case PostgreSqlParser.KW_DISTINCT:
            case PostgreSqlParser.KW_DO:
            case PostgreSqlParser.KW_ELSE:
            case PostgreSqlParser.KW_EXCEPT:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_FOR:
            case PostgreSqlParser.KW_FOREIGN:
            case PostgreSqlParser.KW_FROM:
            case PostgreSqlParser.KW_GRANT:
            case PostgreSqlParser.KW_GROUP:
            case PostgreSqlParser.KW_HAVING:
            case PostgreSqlParser.KW_IN:
            case PostgreSqlParser.KW_INITIALLY:
            case PostgreSqlParser.KW_INTERSECT:
            case PostgreSqlParser.KW_LATERAL:
            case PostgreSqlParser.KW_LEADING:
            case PostgreSqlParser.KW_LIMIT:
            case PostgreSqlParser.KW_LOCALTIME:
            case PostgreSqlParser.KW_LOCALTIMESTAMP:
            case PostgreSqlParser.KW_NOT:
            case PostgreSqlParser.KW_NULL:
            case PostgreSqlParser.KW_OFFSET:
            case PostgreSqlParser.KW_ON:
            case PostgreSqlParser.KW_ONLY:
            case PostgreSqlParser.KW_OR:
            case PostgreSqlParser.KW_ORDER:
            case PostgreSqlParser.KW_PLACING:
            case PostgreSqlParser.KW_PRIMARY:
            case PostgreSqlParser.KW_REFERENCES:
            case PostgreSqlParser.KW_RETURNING:
            case PostgreSqlParser.KW_SELECT:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_SOME:
            case PostgreSqlParser.KW_SYMMETRIC:
            case PostgreSqlParser.KW_TABLE:
            case PostgreSqlParser.KW_THEN:
            case PostgreSqlParser.KW_TO:
            case PostgreSqlParser.KW_TRAILING:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_UNION:
            case PostgreSqlParser.KW_UNIQUE:
            case PostgreSqlParser.KW_USER:
            case PostgreSqlParser.KW_USING:
            case PostgreSqlParser.KW_VARIADIC:
            case PostgreSqlParser.KW_WHEN:
            case PostgreSqlParser.KW_WHERE:
            case PostgreSqlParser.KW_WINDOW:
            case PostgreSqlParser.KW_WITH:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_END:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 3321;
                this.triggerfuncarg();
                }
                break;
            case PostgreSqlParser.CLOSE_PAREN:
            case PostgreSqlParser.COMMA:
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3329;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3325;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3326;
                this.triggerfuncarg();
                }
                }
                this.state = 3331;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerfuncarg(): TriggerfuncargContext {
        let localContext = new TriggerfuncargContext(this.context, this.state);
        this.enterRule(localContext, 270, PostgreSqlParser.RULE_triggerfuncarg);
        try {
            this.state = 3336;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 376, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3332;
                this.match(PostgreSqlParser.Integral);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3333;
                this.match(PostgreSqlParser.Numeric);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3334;
                this.sconst();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3335;
                this.collabel();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintattributeElem(): ConstraintattributeElemContext {
        let localContext = new ConstraintattributeElemContext(this.context, this.state);
        this.enterRule(localContext, 272, PostgreSqlParser.RULE_constraintattributeElem);
        let _la: number;
        try {
            this.state = 3348;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 378, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3339;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 3338;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 3341;
                this.match(PostgreSqlParser.KW_DEFERRABLE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3342;
                this.match(PostgreSqlParser.KW_INITIALLY);
                this.state = 3343;
                _la = this.tokenStream.LA(1);
                if(!(_la === 180 || _la === 221)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3344;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 3345;
                this.match(PostgreSqlParser.KW_VALID);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3346;
                this.match(PostgreSqlParser.KW_NO);
                this.state = 3347;
                this.match(PostgreSqlParser.KW_INHERIT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createeventtrigstmt(): CreateeventtrigstmtContext {
        let localContext = new CreateeventtrigstmtContext(this.context, this.state);
        this.enterRule(localContext, 274, PostgreSqlParser.RULE_createeventtrigstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3350;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3351;
            this.match(PostgreSqlParser.KW_EVENT);
            this.state = 3352;
            this.match(PostgreSqlParser.KW_TRIGGER);
            this.state = 3353;
            this.colid();
            this.state = 3354;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 3355;
            this.collabel();
            this.state = 3365;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 102) {
                {
                this.state = 3356;
                this.match(PostgreSqlParser.KW_WHEN);
                this.state = 3357;
                this.event_trigger_when_item();
                this.state = 3362;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 33) {
                    {
                    {
                    this.state = 3358;
                    this.match(PostgreSqlParser.KW_AND);
                    this.state = 3359;
                    this.event_trigger_when_item();
                    }
                    }
                    this.state = 3364;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 3367;
            this.match(PostgreSqlParser.KW_EXECUTE);
            this.state = 3368;
            this.function_or_procedure();
            this.state = 3369;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3370;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public event_trigger_when_item(): Event_trigger_when_itemContext {
        let localContext = new Event_trigger_when_itemContext(this.context, this.state);
        this.enterRule(localContext, 276, PostgreSqlParser.RULE_event_trigger_when_item);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3372;
            this.colid();
            this.state = 3373;
            this.match(PostgreSqlParser.KW_IN);
            this.state = 3374;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3375;
            this.sconst();
            this.state = 3379;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3376;
                this.notify_payload();
                }
                }
                this.state = 3381;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3382;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altereventtrigstmt(): AltereventtrigstmtContext {
        let localContext = new AltereventtrigstmtContext(this.context, this.state);
        this.enterRule(localContext, 278, PostgreSqlParser.RULE_altereventtrigstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3384;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3385;
            this.match(PostgreSqlParser.KW_EVENT);
            this.state = 3386;
            this.match(PostgreSqlParser.KW_TRIGGER);
            this.state = 3387;
            this.colid();
            this.state = 3393;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ENABLE:
                {
                this.state = 3388;
                this.match(PostgreSqlParser.KW_ENABLE);
                this.state = 3390;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 382, this.context) ) {
                case 1:
                    {
                    this.state = 3389;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 139 || _la === 312)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_DISABLE:
                {
                this.state = 3392;
                this.match(PostgreSqlParser.KW_DISABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createassertionstmt(): CreateassertionstmtContext {
        let localContext = new CreateassertionstmtContext(this.context, this.state);
        this.enterRule(localContext, 280, PostgreSqlParser.RULE_createassertionstmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3395;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3396;
            this.match(PostgreSqlParser.KW_ASSERTION);
            this.state = 3397;
            this.any_name();
            this.state = 3398;
            this.match(PostgreSqlParser.KW_CHECK);
            this.state = 3399;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3400;
            this.expression();
            this.state = 3401;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            this.state = 3405;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 384, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3402;
                    this.constraintattributeElem();
                    }
                    }
                }
                this.state = 3407;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 384, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public definestmt(): DefinestmtContext {
        let localContext = new DefinestmtContext(this.context, this.state);
        this.enterRule(localContext, 282, PostgreSqlParser.RULE_definestmt);
        let _la: number;
        try {
            this.state = 3486;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 396, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3408;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3410;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 3409;
                    this.opt_or_replace();
                    }
                }

                this.state = 3412;
                this.match(PostgreSqlParser.KW_AGGREGATE);
                this.state = 3413;
                this.function_name();
                this.state = 3428;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 387, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 3414;
                    this.aggr_args();
                    this.state = 3415;
                    this.definition();
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 3417;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 3418;
                    this.old_aggr_elem();
                    this.state = 3423;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 6) {
                        {
                        {
                        this.state = 3419;
                        this.match(PostgreSqlParser.COMMA);
                        this.state = 3420;
                        this.old_aggr_elem();
                        }
                        }
                        this.state = 3425;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 3426;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3430;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3431;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 3432;
                this.any_operator();
                this.state = 3433;
                this.definition();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3435;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3436;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 3437;
                this.any_name();
                this.state = 3438;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 3456;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 3439;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 3441;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                        {
                        this.state = 3440;
                        this.tablefuncelementlist();
                        }
                    }

                    this.state = 3443;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                case PostgreSqlParser.KW_ENUM:
                    {
                    this.state = 3444;
                    this.match(PostgreSqlParser.KW_ENUM);
                    this.state = 3445;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 3453;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 558)) & ~0x1F) === 0 && ((1 << (_la - 558)) & 67108885) !== 0)) {
                        {
                        this.state = 3446;
                        this.sconst();
                        this.state = 3450;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 6) {
                            {
                            {
                            this.state = 3447;
                            this.notify_payload();
                            }
                            }
                            this.state = 3452;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        }
                    }

                    this.state = 3455;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3458;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3459;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 3460;
                this.any_name();
                this.state = 3466;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 393, this.context) ) {
                case 1:
                    {
                    this.state = 3463;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 36) {
                        {
                        this.state = 3461;
                        this.match(PostgreSqlParser.KW_AS);
                        this.state = 3462;
                        this.match(PostgreSqlParser.KW_RANGE);
                        }
                    }

                    this.state = 3465;
                    this.definition();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3468;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3469;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 3470;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 3471;
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 185 || _la === 283 || _la === 353)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3472;
                this.any_name();
                this.state = 3473;
                this.definition();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3475;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 3476;
                this.match(PostgreSqlParser.KW_COLLATION);
                this.state = 3478;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 394, this.context) ) {
                case 1:
                    {
                    this.state = 3477;
                    this.opt_if_not_exists();
                    }
                    break;
                }
                this.state = 3480;
                this.any_name();
                this.state = 3484;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 3481;
                    this.definition();
                    }
                    break;
                case PostgreSqlParser.KW_FROM:
                    {
                    {
                    this.state = 3482;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 3483;
                    this.any_name();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public definition(): DefinitionContext {
        let localContext = new DefinitionContext(this.context, this.state);
        this.enterRule(localContext, 284, PostgreSqlParser.RULE_definition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3488;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 3489;
            this.def_elem();
            this.state = 3494;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3490;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3491;
                this.def_elem();
                }
                }
                this.state = 3496;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3497;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public def_elem(): Def_elemContext {
        let localContext = new Def_elemContext(this.context, this.state);
        this.enterRule(localContext, 286, PostgreSqlParser.RULE_def_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3499;
            this.collabel();
            this.state = 3502;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 3500;
                this.match(PostgreSqlParser.EQUAL);
                this.state = 3501;
                this.def_arg();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public def_arg(): Def_argContext {
        let localContext = new Def_argContext(this.context, this.state);
        this.enterRule(localContext, 288, PostgreSqlParser.RULE_def_arg);
        try {
            this.state = 3510;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 399, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3504;
                this.func_type();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3505;
                this.reserved_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3506;
                this.qual_all_op();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3507;
                this.numericonly();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3508;
                this.sconst();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3509;
                this.match(PostgreSqlParser.KW_NONE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public old_aggr_elem(): Old_aggr_elemContext {
        let localContext = new Old_aggr_elemContext(this.context, this.state);
        this.enterRule(localContext, 290, PostgreSqlParser.RULE_old_aggr_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3512;
            this.identifier();
            this.state = 3513;
            this.match(PostgreSqlParser.EQUAL);
            this.state = 3514;
            this.def_arg();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterenumstmt(): AlterenumstmtContext {
        let localContext = new AlterenumstmtContext(this.context, this.state);
        this.enterRule(localContext, 292, PostgreSqlParser.RULE_alterenumstmt);
        let _la: number;
        try {
            this.state = 3538;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 402, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3516;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 3517;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 3518;
                this.any_name();
                this.state = 3519;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 3520;
                this.match(PostgreSqlParser.KW_VALUE);
                this.state = 3522;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 3521;
                    this.opt_if_not_exists();
                    }
                }

                this.state = 3524;
                this.sconst();
                this.state = 3527;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 401, this.context) ) {
                case 1:
                    {
                    this.state = 3525;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 135 || _la === 145)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3526;
                    this.sconst();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3529;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 3530;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 3531;
                this.any_name();
                this.state = 3532;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 3533;
                this.match(PostgreSqlParser.KW_VALUE);
                this.state = 3534;
                this.sconst();
                this.state = 3535;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 3536;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_if_not_exists(): Opt_if_not_existsContext {
        let localContext = new Opt_if_not_existsContext(this.context, this.state);
        this.enterRule(localContext, 294, PostgreSqlParser.RULE_opt_if_not_exists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3540;
            this.match(PostgreSqlParser.KW_IF);
            this.state = 3541;
            this.match(PostgreSqlParser.KW_NOT);
            this.state = 3542;
            this.match(PostgreSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createopclassstmt(): CreateopclassstmtContext {
        let localContext = new CreateopclassstmtContext(this.context, this.state);
        this.enterRule(localContext, 296, PostgreSqlParser.RULE_createopclassstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3544;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3545;
            this.match(PostgreSqlParser.KW_OPERATOR);
            this.state = 3546;
            this.match(PostgreSqlParser.KW_CLASS);
            this.state = 3547;
            this.any_name();
            this.state = 3549;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 3548;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
            }

            this.state = 3551;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 3552;
            this.match(PostgreSqlParser.KW_TYPE);
            this.state = 3553;
            this.typename();
            this.state = 3554;
            this.table_access_method_clause();
            this.state = 3557;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 206) {
                {
                this.state = 3555;
                this.match(PostgreSqlParser.KW_FAMILY);
                this.state = 3556;
                this.any_name();
                }
            }

            this.state = 3559;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 3560;
            this.opclass_item();
            this.state = 3565;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3561;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3562;
                this.opclass_item();
                }
                }
                this.state = 3567;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opclass_item(): Opclass_itemContext {
        let localContext = new Opclass_itemContext(this.context, this.state);
        this.enterRule(localContext, 298, PostgreSqlParser.RULE_opclass_item);
        let _la: number;
        try {
            this.state = 3594;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_OPERATOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3568;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 3569;
                this.match(PostgreSqlParser.Integral);
                this.state = 3570;
                this.any_operator();
                this.state = 3572;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 406, this.context) ) {
                case 1:
                    {
                    this.state = 3571;
                    this.oper_argtypes();
                    }
                    break;
                }
                this.state = 3581;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 3574;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 3579;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_SEARCH:
                        {
                        this.state = 3575;
                        this.match(PostgreSqlParser.KW_SEARCH);
                        }
                        break;
                    case PostgreSqlParser.KW_ORDER:
                        {
                        {
                        this.state = 3576;
                        this.match(PostgreSqlParser.KW_ORDER);
                        this.state = 3577;
                        this.match(PostgreSqlParser.KW_BY);
                        this.state = 3578;
                        this.any_name();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }

                this.state = 3584;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 409, this.context) ) {
                case 1:
                    {
                    this.state = 3583;
                    this.match(PostgreSqlParser.KW_RECHECK);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_FUNCTION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3586;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 3587;
                this.match(PostgreSqlParser.Integral);
                this.state = 3589;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 3588;
                    this.prep_type_clause();
                    }
                }

                this.state = 3591;
                this.function_with_argtypes();
                }
                break;
            case PostgreSqlParser.KW_STORAGE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3592;
                this.match(PostgreSqlParser.KW_STORAGE);
                this.state = 3593;
                this.typename();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createopfamilystmt(): CreateopfamilystmtContext {
        let localContext = new CreateopfamilystmtContext(this.context, this.state);
        this.enterRule(localContext, 300, PostgreSqlParser.RULE_createopfamilystmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3596;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 3597;
            this.match(PostgreSqlParser.KW_OPERATOR);
            this.state = 3598;
            this.match(PostgreSqlParser.KW_FAMILY);
            this.state = 3599;
            this.any_name();
            this.state = 3600;
            this.table_access_method_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alteropfamilystmt(): AlteropfamilystmtContext {
        let localContext = new AlteropfamilystmtContext(this.context, this.state);
        this.enterRule(localContext, 302, PostgreSqlParser.RULE_alteropfamilystmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3602;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 3603;
            this.match(PostgreSqlParser.KW_OPERATOR);
            this.state = 3604;
            this.match(PostgreSqlParser.KW_FAMILY);
            this.state = 3605;
            this.any_name();
            this.state = 3606;
            this.table_access_method_clause();
            this.state = 3625;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ADD:
                {
                this.state = 3607;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 3608;
                this.opclass_item();
                this.state = 3613;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 3609;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 3610;
                    this.opclass_item();
                    }
                    }
                    this.state = 3615;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case PostgreSqlParser.KW_DROP:
                {
                this.state = 3616;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3617;
                this.opclass_drop();
                this.state = 3622;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 3618;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 3619;
                    this.opclass_drop();
                    }
                    }
                    this.state = 3624;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opclass_drop(): Opclass_dropContext {
        let localContext = new Opclass_dropContext(this.context, this.state);
        this.enterRule(localContext, 304, PostgreSqlParser.RULE_opclass_drop);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3627;
            _la = this.tokenStream.LA(1);
            if(!(_la === 211 || _la === 278)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3628;
            this.match(PostgreSqlParser.Integral);
            this.state = 3629;
            this.prep_type_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reassignownedstmt(): ReassignownedstmtContext {
        let localContext = new ReassignownedstmtContext(this.context, this.state);
        this.enterRule(localContext, 306, PostgreSqlParser.RULE_reassignownedstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3631;
            this.match(PostgreSqlParser.KW_REASSIGN);
            this.state = 3632;
            this.match(PostgreSqlParser.KW_OWNED);
            this.state = 3633;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 3634;
            this.role_list();
            this.state = 3635;
            this.match(PostgreSqlParser.KW_TO);
            this.state = 3636;
            this.rolespec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropstmt(): DropstmtContext {
        let localContext = new DropstmtContext(this.context, this.state);
        this.enterRule(localContext, 308, PostgreSqlParser.RULE_dropstmt);
        let _la: number;
        try {
            this.state = 3845;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 452, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3638;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3661;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_SEQUENCE:
                    {
                    this.state = 3639;
                    this.match(PostgreSqlParser.KW_SEQUENCE);
                    }
                    break;
                case PostgreSqlParser.KW_INDEX:
                    {
                    this.state = 3640;
                    this.match(PostgreSqlParser.KW_INDEX);
                    }
                    break;
                case PostgreSqlParser.KW_COLLATION:
                    {
                    this.state = 3641;
                    this.match(PostgreSqlParser.KW_COLLATION);
                    }
                    break;
                case PostgreSqlParser.KW_CONVERSION:
                    {
                    this.state = 3642;
                    this.match(PostgreSqlParser.KW_CONVERSION);
                    }
                    break;
                case PostgreSqlParser.KW_STATISTICS:
                    {
                    this.state = 3643;
                    this.match(PostgreSqlParser.KW_STATISTICS);
                    }
                    break;
                case PostgreSqlParser.KW_PUBLICATION:
                    {
                    this.state = 3644;
                    this.match(PostgreSqlParser.KW_PUBLICATION);
                    }
                    break;
                case PostgreSqlParser.KW_SERVER:
                    {
                    this.state = 3645;
                    this.match(PostgreSqlParser.KW_SERVER);
                    }
                    break;
                case PostgreSqlParser.KW_ACCESS:
                    {
                    this.state = 3646;
                    this.match(PostgreSqlParser.KW_ACCESS);
                    this.state = 3647;
                    this.match(PostgreSqlParser.KW_METHOD);
                    }
                    break;
                case PostgreSqlParser.KW_EVENT:
                    {
                    this.state = 3648;
                    this.match(PostgreSqlParser.KW_EVENT);
                    this.state = 3649;
                    this.match(PostgreSqlParser.KW_TRIGGER);
                    }
                    break;
                case PostgreSqlParser.KW_EXTENSION:
                    {
                    this.state = 3650;
                    this.match(PostgreSqlParser.KW_EXTENSION);
                    }
                    break;
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_PROCEDURAL:
                    {
                    this.state = 3652;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 295) {
                        {
                        this.state = 3651;
                        this.match(PostgreSqlParser.KW_PROCEDURAL);
                        }
                    }

                    this.state = 3654;
                    this.match(PostgreSqlParser.KW_LANGUAGE);
                    }
                    break;
                case PostgreSqlParser.KW_FOREIGN:
                    {
                    this.state = 3655;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    this.state = 3656;
                    this.match(PostgreSqlParser.KW_DATA);
                    this.state = 3657;
                    this.match(PostgreSqlParser.KW_WRAPPER);
                    }
                    break;
                case PostgreSqlParser.KW_TEXT:
                    {
                    this.state = 3658;
                    this.match(PostgreSqlParser.KW_TEXT);
                    this.state = 3659;
                    this.match(PostgreSqlParser.KW_SEARCH);
                    this.state = 3660;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 163 || _la === 185 || _la === 283 || _la === 353)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3664;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 417, this.context) ) {
                case 1:
                    {
                    this.state = 3663;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3666;
                this.name_list();
                this.state = 3668;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 418, this.context) ) {
                case 1:
                    {
                    this.state = 3667;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3670;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3672;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 259) {
                    {
                    this.state = 3671;
                    this.match(PostgreSqlParser.KW_MATERIALIZED);
                    }
                }

                this.state = 3674;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 3676;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 420, this.context) ) {
                case 1:
                    {
                    this.state = 3675;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3678;
                this.view_name();
                this.state = 3683;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 3679;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 3680;
                    this.view_name();
                    }
                    }
                    this.state = 3685;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3687;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 422, this.context) ) {
                case 1:
                    {
                    this.state = 3686;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3689;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3691;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 63) {
                    {
                    this.state = 3690;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    }
                }

                this.state = 3693;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 3695;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 424, this.context) ) {
                case 1:
                    {
                    this.state = 3694;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3697;
                this.table_name_list();
                this.state = 3699;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 425, this.context) ) {
                case 1:
                    {
                    this.state = 3698;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3701;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3702;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 3704;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 426, this.context) ) {
                case 1:
                    {
                    this.state = 3703;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3706;
                this.schema_name_list();
                this.state = 3708;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 427, this.context) ) {
                case 1:
                    {
                    this.state = 3707;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3710;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3711;
                _la = this.tokenStream.LA(1);
                if(!(_la === 321 || _la === 357 || _la === 445)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3713;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 428, this.context) ) {
                case 1:
                    {
                    this.state = 3712;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3715;
                this.colid();
                this.state = 3716;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3717;
                this.any_name();
                this.state = 3719;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 429, this.context) ) {
                case 1:
                    {
                    this.state = 3718;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3721;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3722;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3724;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 430, this.context) ) {
                case 1:
                    {
                    this.state = 3723;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3726;
                this.typename();
                this.state = 3731;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 3727;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 3728;
                    this.typename();
                    }
                    }
                    this.state = 3733;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3735;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 432, this.context) ) {
                case 1:
                    {
                    this.state = 3734;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3737;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3738;
                this.match(PostgreSqlParser.KW_INDEX);
                this.state = 3739;
                this.match(PostgreSqlParser.KW_CONCURRENTLY);
                this.state = 3741;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 433, this.context) ) {
                case 1:
                    {
                    this.state = 3740;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3743;
                this.any_name_list();
                this.state = 3745;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 434, this.context) ) {
                case 1:
                    {
                    this.state = 3744;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3747;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3748;
                this.match(PostgreSqlParser.KW_CAST);
                this.state = 3750;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 3749;
                    this.opt_if_exists();
                    }
                }

                this.state = 3752;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 3753;
                this.typename();
                this.state = 3754;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 3755;
                this.typename();
                this.state = 3756;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 3758;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 436, this.context) ) {
                case 1:
                    {
                    this.state = 3757;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3760;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3761;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 3762;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 206)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3764;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 437, this.context) ) {
                case 1:
                    {
                    this.state = 3763;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3766;
                this.any_name();
                this.state = 3767;
                this.table_access_method_clause();
                this.state = 3769;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 438, this.context) ) {
                case 1:
                    {
                    this.state = 3768;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3771;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3772;
                this.match(PostgreSqlParser.KW_OWNED);
                this.state = 3773;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 3774;
                this.role_list();
                this.state = 3776;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 439, this.context) ) {
                case 1:
                    {
                    this.state = 3775;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3778;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3779;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 3781;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 440, this.context) ) {
                case 1:
                    {
                    this.state = 3780;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3783;
                this.colid();
                this.state = 3785;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 441, this.context) ) {
                case 1:
                    {
                    this.state = 3784;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3787;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3788;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                this.state = 3790;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 442, this.context) ) {
                case 1:
                    {
                    this.state = 3789;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3792;
                this.tablespace_name();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 3793;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3794;
                this.match(PostgreSqlParser.KW_TRANSFORM);
                this.state = 3796;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 3795;
                    this.opt_if_exists();
                    }
                }

                this.state = 3798;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 3799;
                this.typename();
                this.state = 3800;
                this.match(PostgreSqlParser.KW_LANGUAGE);
                this.state = 3801;
                this.colid();
                this.state = 3803;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 444, this.context) ) {
                case 1:
                    {
                    this.state = 3802;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 3805;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3806;
                _la = this.tokenStream.LA(1);
                if(!(_la === 66 || _la === 99 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3808;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 445, this.context) ) {
                case 1:
                    {
                    this.state = 3807;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3810;
                this.role_list();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 3811;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3812;
                this.match(PostgreSqlParser.KW_USER);
                this.state = 3813;
                this.match(PostgreSqlParser.KW_MAPPING);
                this.state = 3815;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 3814;
                    this.opt_if_exists();
                    }
                }

                this.state = 3817;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 3820;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_CURRENT_ROLE:
                case PostgreSqlParser.KW_CURRENT_USER:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_SESSION_USER:
                case PostgreSqlParser.KW_AUTHORIZATION:
                case PostgreSqlParser.KW_BINARY:
                case PostgreSqlParser.KW_COLLATION:
                case PostgreSqlParser.KW_CONCURRENTLY:
                case PostgreSqlParser.KW_CROSS:
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                case PostgreSqlParser.KW_FREEZE:
                case PostgreSqlParser.KW_FULL:
                case PostgreSqlParser.KW_ILIKE:
                case PostgreSqlParser.KW_INNER:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_ISNULL:
                case PostgreSqlParser.KW_JOIN:
                case PostgreSqlParser.KW_LEFT:
                case PostgreSqlParser.KW_LIKE:
                case PostgreSqlParser.KW_NATURAL:
                case PostgreSqlParser.KW_NOTNULL:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_OVERLAPS:
                case PostgreSqlParser.KW_RIGHT:
                case PostgreSqlParser.KW_SIMILAR:
                case PostgreSqlParser.KW_VERBOSE:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_TABLESAMPLE:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 3818;
                    this.rolespec();
                    }
                    break;
                case PostgreSqlParser.KW_USER:
                    {
                    this.state = 3819;
                    this.match(PostgreSqlParser.KW_USER);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3822;
                this.match(PostgreSqlParser.KW_SERVER);
                this.state = 3823;
                this.colid();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 3824;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 3825;
                this.match(PostgreSqlParser.KW_DATABASE);
                this.state = 3827;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 448, this.context) ) {
                case 1:
                    {
                    this.state = 3826;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 3829;
                this.database_name();
                this.state = 3843;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 451, this.context) ) {
                case 1:
                    {
                    this.state = 3831;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 105) {
                        {
                        this.state = 3830;
                        this.match(PostgreSqlParser.KW_WITH);
                        }
                    }

                    {
                    this.state = 3833;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 3834;
                    this.match(PostgreSqlParser.KW_FORCE);
                    this.state = 3839;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 6) {
                        {
                        {
                        this.state = 3835;
                        this.match(PostgreSqlParser.COMMA);
                        this.state = 3836;
                        this.match(PostgreSqlParser.KW_FORCE);
                        }
                        }
                        this.state = 3841;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 3842;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_type_any_name(): Object_type_any_nameContext {
        let localContext = new Object_type_any_nameContext(this.context, this.state);
        this.enterRule(localContext, 310, PostgreSqlParser.RULE_object_type_any_name);
        let _la: number;
        try {
            this.state = 3863;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FOREIGN:
            case PostgreSqlParser.KW_TABLE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3848;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 63) {
                    {
                    this.state = 3847;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    }
                }

                this.state = 3850;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 3851;
                this.table_name();
                }
                break;
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_VIEW:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3853;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 259) {
                    {
                    this.state = 3852;
                    this.match(PostgreSqlParser.KW_MATERIALIZED);
                    }
                }

                this.state = 3855;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 3856;
                this.view_name();
                }
                break;
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_STATISTICS:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3857;
                _la = this.tokenStream.LA(1);
                if(!(_la === 108 || _la === 168 || _la === 226 || _la === 328 || _la === 342)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3858;
                this.any_name();
                }
                break;
            case PostgreSqlParser.KW_TEXT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3859;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 3860;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 3861;
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 185 || _la === 283 || _la === 353)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3862;
                this.any_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_type_name(): Object_type_nameContext {
        let localContext = new Object_type_nameContext(this.context, this.state);
        this.enterRule(localContext, 312, PostgreSqlParser.RULE_object_type_name);
        let _la: number;
        try {
            this.state = 3889;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FOREIGN:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3881;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_EVENT:
                    {
                    this.state = 3865;
                    this.match(PostgreSqlParser.KW_EVENT);
                    this.state = 3866;
                    this.match(PostgreSqlParser.KW_TRIGGER);
                    }
                    break;
                case PostgreSqlParser.KW_ACCESS:
                    {
                    this.state = 3867;
                    this.match(PostgreSqlParser.KW_ACCESS);
                    this.state = 3868;
                    this.match(PostgreSqlParser.KW_METHOD);
                    }
                    break;
                case PostgreSqlParser.KW_EXTENSION:
                    {
                    this.state = 3869;
                    this.match(PostgreSqlParser.KW_EXTENSION);
                    }
                    break;
                case PostgreSqlParser.KW_PUBLICATION:
                    {
                    this.state = 3870;
                    this.match(PostgreSqlParser.KW_PUBLICATION);
                    }
                    break;
                case PostgreSqlParser.KW_SERVER:
                    {
                    this.state = 3871;
                    this.match(PostgreSqlParser.KW_SERVER);
                    }
                    break;
                case PostgreSqlParser.KW_ROLE:
                    {
                    this.state = 3872;
                    this.match(PostgreSqlParser.KW_ROLE);
                    }
                    break;
                case PostgreSqlParser.KW_SUBSCRIPTION:
                    {
                    this.state = 3873;
                    this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                    }
                    break;
                case PostgreSqlParser.KW_FOREIGN:
                    {
                    this.state = 3874;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    this.state = 3875;
                    this.match(PostgreSqlParser.KW_DATA);
                    this.state = 3876;
                    this.match(PostgreSqlParser.KW_WRAPPER);
                    }
                    break;
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_PROCEDURAL:
                    {
                    this.state = 3878;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 295) {
                        {
                        this.state = 3877;
                        this.match(PostgreSqlParser.KW_PROCEDURAL);
                        }
                    }

                    this.state = 3880;
                    this.match(PostgreSqlParser.KW_LANGUAGE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3883;
                this.colid();
                }
                break;
            case PostgreSqlParser.KW_SCHEMA:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3884;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 3885;
                this.schema_name();
                }
                break;
            case PostgreSqlParser.KW_DATABASE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3886;
                this.match(PostgreSqlParser.KW_DATABASE);
                this.state = 3887;
                this.database_name();
                }
                break;
            case PostgreSqlParser.KW_TABLESPACE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3888;
                this.opttablespace();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public any_name_list(): Any_name_listContext {
        let localContext = new Any_name_listContext(this.context, this.state);
        this.enterRule(localContext, 314, PostgreSqlParser.RULE_any_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3891;
            this.any_name();
            this.state = 3896;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3892;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3893;
                this.any_name();
                }
                }
                this.state = 3898;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public any_name(): Any_nameContext {
        let localContext = new Any_nameContext(this.context, this.state);
        this.enterRule(localContext, 316, PostgreSqlParser.RULE_any_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3899;
            this.colid();
            this.state = 3901;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 460, this.context) ) {
            case 1:
                {
                this.state = 3900;
                this.attrs();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public attrs(): AttrsContext {
        let localContext = new AttrsContext(this.context, this.state);
        this.enterRule(localContext, 318, PostgreSqlParser.RULE_attrs);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3905;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 3903;
                    this.match(PostgreSqlParser.DOT);
                    this.state = 3904;
                    this.collabel();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3907;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 461, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncatestmt(): TruncatestmtContext {
        let localContext = new TruncatestmtContext(this.context, this.state);
        this.enterRule(localContext, 320, PostgreSqlParser.RULE_truncatestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3909;
            this.match(PostgreSqlParser.KW_TRUNCATE);
            this.state = 3911;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 92) {
                {
                this.state = 3910;
                this.match(PostgreSqlParser.KW_TABLE);
                }
            }

            this.state = 3913;
            this.truncate_table();
            this.state = 3918;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3914;
                this.match(PostgreSqlParser.COMMA);
                this.state = 3915;
                this.truncate_table();
                }
                }
                this.state = 3920;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 3923;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 464, this.context) ) {
            case 1:
                {
                this.state = 3921;
                _la = this.tokenStream.LA(1);
                if(!(_la === 167 || _la === 314)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3922;
                this.match(PostgreSqlParser.KW_IDENTITY);
                }
                break;
            }
            this.state = 3926;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 465, this.context) ) {
            case 1:
                {
                this.state = 3925;
                this.opt_drop_behavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncate_table(): Truncate_tableContext {
        let localContext = new Truncate_tableContext(this.context, this.state);
        this.enterRule(localContext, 322, PostgreSqlParser.RULE_truncate_table);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3929;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 3928;
                this.match(PostgreSqlParser.KW_ONLY);
                }
            }

            this.state = 3931;
            this.table_name();
            this.state = 3933;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 9) {
                {
                this.state = 3932;
                this.match(PostgreSqlParser.STAR);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commentstmt(): CommentstmtContext {
        let localContext = new CommentstmtContext(this.context, this.state);
        this.enterRule(localContext, 324, PostgreSqlParser.RULE_commentstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3935;
            this.match(PostgreSqlParser.KW_COMMENT);
            this.state = 3936;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 3995;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 471, this.context) ) {
            case 1:
                {
                this.state = 3937;
                this.object_type_any_name();
                }
                break;
            case 2:
                {
                this.state = 3938;
                this.object_type_name();
                }
                break;
            case 3:
                {
                this.state = 3939;
                this.match(PostgreSqlParser.KW_COLUMN);
                {
                this.state = 3940;
                this.colid();
                this.state = 3942;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 468, this.context) ) {
                case 1:
                    {
                    this.state = 3941;
                    this.attrs();
                    }
                    break;
                }
                }
                this.state = 3944;
                this.match(PostgreSqlParser.DOT);
                this.state = 3945;
                this.column_name();
                }
                break;
            case 4:
                {
                this.state = 3947;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3948;
                this.typename();
                }
                break;
            case 5:
                {
                this.state = 3949;
                this.match(PostgreSqlParser.KW_AGGREGATE);
                this.state = 3950;
                this.aggregate_with_argtypes();
                }
                break;
            case 6:
                {
                this.state = 3951;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 3952;
                this.function_with_argtypes();
                }
                break;
            case 7:
                {
                this.state = 3953;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 3954;
                this.operator_with_argtypes();
                }
                break;
            case 8:
                {
                this.state = 3955;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 3956;
                this.colid();
                this.state = 3957;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3963;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 470, this.context) ) {
                case 1:
                    {
                    this.state = 3958;
                    this.table_name();
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 3960;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 469, this.context) ) {
                    case 1:
                        {
                        this.state = 3959;
                        this.match(PostgreSqlParser.KW_DOMAIN);
                        }
                        break;
                    }
                    this.state = 3962;
                    this.any_name();
                    }
                    }
                    break;
                }
                }
                break;
            case 9:
                {
                this.state = 3965;
                _la = this.tokenStream.LA(1);
                if(!(_la === 321 || _la === 357 || _la === 445)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3966;
                this.colid();
                this.state = 3967;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 3968;
                this.any_name();
                }
                break;
            case 10:
                {
                this.state = 3970;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 3971;
                this.procedure_with_argtypes();
                }
                break;
            case 11:
                {
                this.state = 3972;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 3973;
                this.routine_with_argtypes();
                }
                break;
            case 12:
                {
                this.state = 3974;
                this.match(PostgreSqlParser.KW_TRANSFORM);
                this.state = 3975;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 3976;
                this.typename();
                this.state = 3977;
                this.match(PostgreSqlParser.KW_LANGUAGE);
                this.state = 3978;
                this.colid();
                }
                break;
            case 13:
                {
                this.state = 3980;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 3981;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 206)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3982;
                this.any_name();
                this.state = 3983;
                this.table_access_method_clause();
                }
                break;
            case 14:
                {
                this.state = 3985;
                this.match(PostgreSqlParser.KW_LARGE);
                this.state = 3986;
                this.match(PostgreSqlParser.KW_OBJECT);
                this.state = 3987;
                this.numericonly();
                }
                break;
            case 15:
                {
                this.state = 3988;
                this.match(PostgreSqlParser.KW_CAST);
                this.state = 3989;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 3990;
                this.typename();
                this.state = 3991;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 3992;
                this.typename();
                this.state = 3993;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            this.state = 3997;
            this.match(PostgreSqlParser.KW_IS);
            this.state = 4000;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 3998;
                this.sconst();
                }
                break;
            case PostgreSqlParser.KW_NULL:
                {
                this.state = 3999;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public seclabelstmt(): SeclabelstmtContext {
        let localContext = new SeclabelstmtContext(this.context, this.state);
        this.enterRule(localContext, 326, PostgreSqlParser.RULE_seclabelstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4002;
            this.match(PostgreSqlParser.KW_SECURITY);
            this.state = 4003;
            this.match(PostgreSqlParser.KW_LABEL);
            this.state = 4006;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 62) {
                {
                this.state = 4004;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 4005;
                this.nonreservedword_or_sconst();
                }
            }

            this.state = 4008;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 4026;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 474, this.context) ) {
            case 1:
                {
                this.state = 4009;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4010;
                this.typename();
                }
                break;
            case 2:
                {
                this.state = 4011;
                this.match(PostgreSqlParser.KW_AGGREGATE);
                this.state = 4012;
                this.aggregate_with_argtypes();
                }
                break;
            case 3:
                {
                this.state = 4013;
                this.match(PostgreSqlParser.KW_COLUMN);
                this.state = 4014;
                this.column_name();
                }
                break;
            case 4:
                {
                this.state = 4015;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4016;
                this.function_with_argtypes();
                }
                break;
            case 5:
                {
                this.state = 4017;
                this.match(PostgreSqlParser.KW_LARGE);
                this.state = 4018;
                this.match(PostgreSqlParser.KW_OBJECT);
                this.state = 4019;
                this.numericonly();
                }
                break;
            case 6:
                {
                this.state = 4020;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4021;
                this.procedure_with_argtypes();
                }
                break;
            case 7:
                {
                this.state = 4022;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 4023;
                this.routine_with_argtypes();
                }
                break;
            case 8:
                {
                this.state = 4024;
                this.object_type_any_name();
                }
                break;
            case 9:
                {
                this.state = 4025;
                this.object_type_name();
                }
                break;
            }
            this.state = 4028;
            this.match(PostgreSqlParser.KW_IS);
            this.state = 4031;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 4029;
                this.sconst();
                }
                break;
            case PostgreSqlParser.KW_NULL:
                {
                this.state = 4030;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fetchstmt(): FetchstmtContext {
        let localContext = new FetchstmtContext(this.context, this.state);
        this.enterRule(localContext, 328, PostgreSqlParser.RULE_fetchstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4033;
            _la = this.tokenStream.LA(1);
            if(!(_la === 61 || _la === 265)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4034;
            this.fetch_args();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fetch_args(): Fetch_argsContext {
        let localContext = new Fetch_argsContext(this.context, this.state);
        this.enterRule(localContext, 330, PostgreSqlParser.RULE_fetch_args);
        let _la: number;
        try {
            this.state = 4079;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 487, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4037;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 476, this.context) ) {
                case 1:
                    {
                    this.state = 4036;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 207 || _la === 249 || _la === 268 || _la === 293)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 4040;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 68) {
                    {
                    this.state = 4039;
                    this.from_in();
                    }
                }

                this.state = 4042;
                this.colid();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4044;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 130 || _la === 307) {
                    {
                    this.state = 4043;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 130 || _la === 307)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 4046;
                this.signediconst();
                this.state = 4048;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 68) {
                    {
                    this.state = 4047;
                    this.from_in();
                    }
                }

                this.state = 4050;
                this.colid();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4052;
                this.match(PostgreSqlParser.KW_FORWARD);
                this.state = 4054;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 13 || _la === 571) {
                    {
                    this.state = 4053;
                    this.signediconst();
                    }
                }

                this.state = 4057;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 68) {
                    {
                    this.state = 4056;
                    this.from_in();
                    }
                }

                this.state = 4059;
                this.colid();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4061;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 210) {
                    {
                    this.state = 4060;
                    this.match(PostgreSqlParser.KW_FORWARD);
                    }
                }

                this.state = 4063;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 4065;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 68) {
                    {
                    this.state = 4064;
                    this.from_in();
                    }
                }

                this.state = 4067;
                this.colid();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4068;
                this.match(PostgreSqlParser.KW_BACKWARD);
                this.state = 4073;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ALL:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_FROM:
                case PostgreSqlParser.KW_IN:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 4070;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 30) {
                        {
                        this.state = 4069;
                        this.match(PostgreSqlParser.KW_ALL);
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.PLUS:
                case PostgreSqlParser.MINUS:
                case PostgreSqlParser.Integral:
                    {
                    this.state = 4072;
                    this.signediconst();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4076;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64 || _la === 68) {
                    {
                    this.state = 4075;
                    this.from_in();
                    }
                }

                this.state = 4078;
                this.colid();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public from_in(): From_inContext {
        let localContext = new From_inContext(this.context, this.state);
        this.enterRule(localContext, 332, PostgreSqlParser.RULE_from_in);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4081;
            _la = this.tokenStream.LA(1);
            if(!(_la === 64 || _la === 68)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantstmt(): GrantstmtContext {
        let localContext = new GrantstmtContext(this.context, this.state);
        this.enterRule(localContext, 334, PostgreSqlParser.RULE_grantstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4083;
            this.match(PostgreSqlParser.KW_GRANT);
            this.state = 4084;
            this.privileges();
            this.state = 4085;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 4086;
            this.privilege_target();
            this.state = 4087;
            this.match(PostgreSqlParser.KW_TO);
            this.state = 4088;
            this.grantee_list();
            this.state = 4092;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 488, this.context) ) {
            case 1:
                {
                this.state = 4089;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 4090;
                this.match(PostgreSqlParser.KW_GRANT);
                this.state = 4091;
                this.match(PostgreSqlParser.KW_OPTION);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokestmt(): RevokestmtContext {
        let localContext = new RevokestmtContext(this.context, this.state);
        this.enterRule(localContext, 336, PostgreSqlParser.RULE_revokestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4094;
            this.match(PostgreSqlParser.KW_REVOKE);
            this.state = 4098;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 65) {
                {
                this.state = 4095;
                this.match(PostgreSqlParser.KW_GRANT);
                this.state = 4096;
                this.match(PostgreSqlParser.KW_OPTION);
                this.state = 4097;
                this.match(PostgreSqlParser.KW_FOR);
                }
            }

            this.state = 4100;
            this.privileges();
            this.state = 4101;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 4102;
            this.privilege_target();
            this.state = 4103;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 4104;
            this.grantee_list();
            this.state = 4106;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 490, this.context) ) {
            case 1:
                {
                this.state = 4105;
                this.opt_drop_behavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privileges(): PrivilegesContext {
        let localContext = new PrivilegesContext(this.context, this.state);
        this.enterRule(localContext, 338, PostgreSqlParser.RULE_privileges);
        let _la: number;
        try {
            this.state = 4131;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 495, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4108;
                this.privilege();
                this.state = 4113;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 4109;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4110;
                    this.privilege();
                    }
                    }
                    this.state = 4115;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4116;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 4118;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 294) {
                    {
                    this.state = 4117;
                    this.match(PostgreSqlParser.KW_PRIVILEGES);
                    }
                }

                this.state = 4121;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 4120;
                    this.opt_column_list();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4123;
                this.beforeprivilegeselect();
                this.state = 4128;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 4124;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4125;
                    this.beforeprivilegeselect();
                    }
                    }
                    this.state = 4130;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public beforeprivilegeselect(): BeforeprivilegeselectContext {
        let localContext = new BeforeprivilegeselectContext(this.context, this.state);
        this.enterRule(localContext, 340, PostgreSqlParser.RULE_beforeprivilegeselect);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4133;
            _la = this.tokenStream.LA(1);
            if(!(_la === 46 || _la === 88 || _la === 182 || _la === 202 || _la === 241 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 131173) !== 0) || ((((_la - 521)) & ~0x1F) === 0 && ((1 << (_la - 521)) & 7) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege(): PrivilegeContext {
        let localContext = new PrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 342, PostgreSqlParser.RULE_privilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4139;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SELECT:
                {
                this.state = 4135;
                this.match(PostgreSqlParser.KW_SELECT);
                }
                break;
            case PostgreSqlParser.KW_REFERENCES:
                {
                this.state = 4136;
                this.match(PostgreSqlParser.KW_REFERENCES);
                }
                break;
            case PostgreSqlParser.KW_CREATE:
                {
                this.state = 4137;
                this.match(PostgreSqlParser.KW_CREATE);
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 4138;
                this.colid();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4142;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 4141;
                this.opt_column_list();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege_target(): Privilege_targetContext {
        let localContext = new Privilege_targetContext(this.context, this.state);
        this.enterRule(localContext, 344, PostgreSqlParser.RULE_privilege_target);
        let _la: number;
        try {
            this.state = 4189;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 502, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4144;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 4145;
                this.table_name_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4147;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 498, this.context) ) {
                case 1:
                    {
                    this.state = 4146;
                    this.match(PostgreSqlParser.KW_SEQUENCE);
                    }
                    break;
                }
                this.state = 4149;
                this.qualified_name_list();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4157;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_FOREIGN:
                    {
                    this.state = 4150;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    this.state = 4154;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_DATA:
                        {
                        this.state = 4151;
                        this.match(PostgreSqlParser.KW_DATA);
                        this.state = 4152;
                        this.match(PostgreSqlParser.KW_WRAPPER);
                        }
                        break;
                    case PostgreSqlParser.KW_SERVER:
                        {
                        this.state = 4153;
                        this.match(PostgreSqlParser.KW_SERVER);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                case PostgreSqlParser.KW_LANGUAGE:
                    {
                    this.state = 4156;
                    this.match(PostgreSqlParser.KW_LANGUAGE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4159;
                this.name_list();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4160;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4161;
                this.function_with_argtypes_list();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4162;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4163;
                this.procedure_with_argtypes_list();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4164;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 4165;
                this.routine_with_argtypes_list();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4166;
                this.match(PostgreSqlParser.KW_DATABASE);
                this.state = 4167;
                this.database_nameList();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4168;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4169;
                this.any_name_list();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4170;
                this.match(PostgreSqlParser.KW_LARGE);
                this.state = 4171;
                this.match(PostgreSqlParser.KW_OBJECT);
                this.state = 4172;
                this.numericonly();
                this.state = 4177;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 4173;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4174;
                    this.numericonly();
                    }
                    }
                    this.state = 4179;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4180;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 4181;
                this.schema_name_list();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4182;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                this.state = 4183;
                this.tablespace_name_list();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4184;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 4185;
                _la = this.tokenStream.LA(1);
                if(!(_la === 212 || _la === 329 || _la === 350 || _la === 455 || _la === 457)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4186;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 4187;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 4188;
                this.schema_name_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantee_list(): Grantee_listContext {
        let localContext = new Grantee_listContext(this.context, this.state);
        this.enterRule(localContext, 346, PostgreSqlParser.RULE_grantee_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 4192;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 66) {
                {
                this.state = 4191;
                this.match(PostgreSqlParser.KW_GROUP);
                }
            }

            this.state = 4194;
            this.rolespec();
            }
            this.state = 4203;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4196;
                this.match(PostgreSqlParser.COMMA);
                {
                this.state = 4198;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 66) {
                    {
                    this.state = 4197;
                    this.match(PostgreSqlParser.KW_GROUP);
                    }
                }

                this.state = 4200;
                this.rolespec();
                }
                }
                }
                this.state = 4205;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantrolestmt(): GrantrolestmtContext {
        let localContext = new GrantrolestmtContext(this.context, this.state);
        this.enterRule(localContext, 348, PostgreSqlParser.RULE_grantrolestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4206;
            this.match(PostgreSqlParser.KW_GRANT);
            this.state = 4207;
            this.privilege();
            this.state = 4212;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4208;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4209;
                this.privilege();
                }
                }
                this.state = 4214;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4215;
            this.match(PostgreSqlParser.KW_TO);
            this.state = 4216;
            this.role_list();
            this.state = 4220;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 507, this.context) ) {
            case 1:
                {
                this.state = 4217;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 4218;
                this.match(PostgreSqlParser.KW_ADMIN);
                this.state = 4219;
                this.match(PostgreSqlParser.KW_OPTION);
                }
                break;
            }
            this.state = 4225;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 508, this.context) ) {
            case 1:
                {
                this.state = 4222;
                this.match(PostgreSqlParser.KW_GRANTED);
                this.state = 4223;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 4224;
                this.rolespec();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokerolestmt(): RevokerolestmtContext {
        let localContext = new RevokerolestmtContext(this.context, this.state);
        this.enterRule(localContext, 350, PostgreSqlParser.RULE_revokerolestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4227;
            this.match(PostgreSqlParser.KW_REVOKE);
            this.state = 4231;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 509, this.context) ) {
            case 1:
                {
                this.state = 4228;
                this.match(PostgreSqlParser.KW_ADMIN);
                this.state = 4229;
                this.match(PostgreSqlParser.KW_OPTION);
                this.state = 4230;
                this.match(PostgreSqlParser.KW_FOR);
                }
                break;
            }
            this.state = 4233;
            this.privilege();
            this.state = 4238;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4234;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4235;
                this.privilege();
                }
                }
                this.state = 4240;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4241;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 4242;
            this.role_list();
            this.state = 4246;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 511, this.context) ) {
            case 1:
                {
                this.state = 4243;
                this.match(PostgreSqlParser.KW_GRANTED);
                this.state = 4244;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 4245;
                this.rolespec();
                }
                break;
            }
            this.state = 4249;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 512, this.context) ) {
            case 1:
                {
                this.state = 4248;
                this.opt_drop_behavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterdefaultprivilegesstmt(): AlterdefaultprivilegesstmtContext {
        let localContext = new AlterdefaultprivilegesstmtContext(this.context, this.state);
        this.enterRule(localContext, 352, PostgreSqlParser.RULE_alterdefaultprivilegesstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4251;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 4252;
            this.match(PostgreSqlParser.KW_DEFAULT);
            this.state = 4253;
            this.match(PostgreSqlParser.KW_PRIVILEGES);
            this.state = 4262;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 62 || _la === 68) {
                {
                this.state = 4260;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_IN:
                    {
                    this.state = 4254;
                    this.match(PostgreSqlParser.KW_IN);
                    this.state = 4255;
                    this.match(PostgreSqlParser.KW_SCHEMA);
                    this.state = 4256;
                    this.schema_name_list();
                    }
                    break;
                case PostgreSqlParser.KW_FOR:
                    {
                    this.state = 4257;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 4258;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 99 || _la === 318)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 4259;
                    this.role_list();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                this.state = 4264;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4265;
            this.defaclaction();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaclaction(): DefaclactionContext {
        let localContext = new DefaclactionContext(this.context, this.state);
        this.enterRule(localContext, 354, PostgreSqlParser.RULE_defaclaction);
        let _la: number;
        try {
            this.state = 4292;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_GRANT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4267;
                this.match(PostgreSqlParser.KW_GRANT);
                this.state = 4268;
                this.privileges();
                this.state = 4269;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 4270;
                this.defacl_privilege_target();
                this.state = 4271;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4272;
                this.grantee_list();
                this.state = 4276;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 515, this.context) ) {
                case 1:
                    {
                    this.state = 4273;
                    this.match(PostgreSqlParser.KW_WITH);
                    this.state = 4274;
                    this.match(PostgreSqlParser.KW_GRANT);
                    this.state = 4275;
                    this.match(PostgreSqlParser.KW_OPTION);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_REVOKE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4278;
                this.match(PostgreSqlParser.KW_REVOKE);
                this.state = 4282;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65) {
                    {
                    this.state = 4279;
                    this.match(PostgreSqlParser.KW_GRANT);
                    this.state = 4280;
                    this.match(PostgreSqlParser.KW_OPTION);
                    this.state = 4281;
                    this.match(PostgreSqlParser.KW_FOR);
                    }
                }

                this.state = 4284;
                this.privileges();
                this.state = 4285;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 4286;
                this.defacl_privilege_target();
                this.state = 4287;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 4288;
                this.grantee_list();
                this.state = 4290;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 517, this.context) ) {
                case 1:
                    {
                    this.state = 4289;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defacl_privilege_target(): Defacl_privilege_targetContext {
        let localContext = new Defacl_privilege_targetContext(this.context, this.state);
        this.enterRule(localContext, 356, PostgreSqlParser.RULE_defacl_privilege_target);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4294;
            _la = this.tokenStream.LA(1);
            if(!(_la === 212 || _la === 329 || _la === 350 || _la === 361 || _la === 455 || _la === 456)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexstmt(): IndexstmtContext {
        let localContext = new IndexstmtContext(this.context, this.state);
        this.enterRule(localContext, 358, PostgreSqlParser.RULE_indexstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4296;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 4298;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 98) {
                {
                this.state = 4297;
                this.match(PostgreSqlParser.KW_UNIQUE);
                }
            }

            this.state = 4300;
            this.match(PostgreSqlParser.KW_INDEX);
            this.state = 4302;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 109) {
                {
                this.state = 4301;
                this.match(PostgreSqlParser.KW_CONCURRENTLY);
                }
            }

            this.state = 4305;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 521, this.context) ) {
            case 1:
                {
                this.state = 4304;
                this.opt_if_not_exists();
                }
                break;
            }
            this.state = 4308;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 4307;
                this.colid();
                }
            }

            this.state = 4310;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 4311;
            this.relation_expr();
            this.state = 4313;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 4312;
                this.table_access_method_clause();
                }
            }

            this.state = 4315;
            this.index_params();
            this.state = 4318;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 524, this.context) ) {
            case 1:
                {
                this.state = 4316;
                this.match(PostgreSqlParser.KW_INCLUDE);
                this.state = 4317;
                this.index_params();
                }
                break;
            }
            this.state = 4325;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 526, this.context) ) {
            case 1:
                {
                this.state = 4320;
                this.match(PostgreSqlParser.KW_NULLS);
                this.state = 4322;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 4321;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 4324;
                this.match(PostgreSqlParser.KW_DISTINCT);
                }
                break;
            }
            this.state = 4328;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 527, this.context) ) {
            case 1:
                {
                this.state = 4327;
                this.opt_reloptions();
                }
                break;
            }
            this.state = 4331;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 528, this.context) ) {
            case 1:
                {
                this.state = 4330;
                this.opttablespace();
                }
                break;
            }
            this.state = 4334;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 103) {
                {
                this.state = 4333;
                this.where_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_params(): Index_paramsContext {
        let localContext = new Index_paramsContext(this.context, this.state);
        this.enterRule(localContext, 360, PostgreSqlParser.RULE_index_params);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4336;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4337;
            this.index_elem();
            this.state = 4342;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4338;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4339;
                this.index_elem();
                }
                }
                this.state = 4344;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4345;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_elem(): Index_elemContext {
        let localContext = new Index_elemContext(this.context, this.state);
        this.enterRule(localContext, 362, PostgreSqlParser.RULE_index_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4353;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 531, this.context) ) {
            case 1:
                {
                this.state = 4347;
                this.column_name();
                }
                break;
            case 2:
                {
                this.state = 4348;
                this.func_expr_windowless();
                }
                break;
            case 3:
                {
                this.state = 4349;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 4350;
                this.expression();
                this.state = 4351;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            this.state = 4356;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 43) {
                {
                this.state = 4355;
                this.opt_collate_clause();
                }
            }

            this.state = 4364;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 534, this.context) ) {
            case 1:
                {
                this.state = 4359;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 533, this.context) ) {
                case 1:
                    {
                    this.state = 4358;
                    this.any_name();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 4361;
                this.any_name();
                this.state = 4362;
                this.reloptions();
                }
                break;
            }
            this.state = 4367;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 37 || _la === 55) {
                {
                this.state = 4366;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 55)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 4371;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 273) {
                {
                this.state = 4369;
                this.match(PostgreSqlParser.KW_NULLS);
                this.state = 4370;
                _la = this.tokenStream.LA(1);
                if(!(_la === 207 || _la === 249)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createfunctionstmt(): CreatefunctionstmtContext {
        let localContext = new CreatefunctionstmtContext(this.context, this.state);
        this.enterRule(localContext, 364, PostgreSqlParser.RULE_createfunctionstmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4373;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 4375;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 4374;
                this.opt_or_replace();
                }
            }

            this.state = 4381;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FUNCTION:
                {
                this.state = 4377;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4378;
                this.function_name_create();
                }
                break;
            case PostgreSqlParser.KW_PROCEDURE:
                {
                this.state = 4379;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4380;
                this.procedure_name_create();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            {
            this.state = 4383;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4392;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || _la === 68 || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4294967265) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 4294967295) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 4294967295) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 4384;
                this.func_arg_with_default();
                this.state = 4389;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 4385;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4386;
                    this.func_arg_with_default();
                    }
                    }
                    this.state = 4391;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 4394;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
            this.state = 4412;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 543, this.context) ) {
            case 1:
                {
                this.state = 4396;
                this.match(PostgreSqlParser.KW_RETURNS);
                this.state = 4410;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_AUTHORIZATION:
                case PostgreSqlParser.KW_BINARY:
                case PostgreSqlParser.KW_COLLATION:
                case PostgreSqlParser.KW_CONCURRENTLY:
                case PostgreSqlParser.KW_CROSS:
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                case PostgreSqlParser.KW_FREEZE:
                case PostgreSqlParser.KW_FULL:
                case PostgreSqlParser.KW_ILIKE:
                case PostgreSqlParser.KW_INNER:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_ISNULL:
                case PostgreSqlParser.KW_JOIN:
                case PostgreSqlParser.KW_LEFT:
                case PostgreSqlParser.KW_LIKE:
                case PostgreSqlParser.KW_NATURAL:
                case PostgreSqlParser.KW_NOTNULL:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_OVERLAPS:
                case PostgreSqlParser.KW_RIGHT:
                case PostgreSqlParser.KW_SIMILAR:
                case PostgreSqlParser.KW_VERBOSE:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_TABLESAMPLE:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 4397;
                    this.func_type();
                    }
                    break;
                case PostgreSqlParser.KW_TABLE:
                    {
                    this.state = 4398;
                    this.match(PostgreSqlParser.KW_TABLE);
                    {
                    this.state = 4399;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 4400;
                    this.table_func_column();
                    this.state = 4405;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 6) {
                        {
                        {
                        this.state = 4401;
                        this.match(PostgreSqlParser.COMMA);
                        this.state = 4402;
                        this.table_func_column();
                        }
                        }
                        this.state = 4407;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 4408;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            this.state = 4415;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 4414;
                    this.createfunc_opt_item();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4417;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 544, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            this.state = 4424;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 545, this.context) ) {
            case 1:
                {
                this.state = 4419;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 4420;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 4421;
                this.name_list();
                this.state = 4422;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_or_replace(): Opt_or_replaceContext {
        let localContext = new Opt_or_replaceContext(this.context, this.state);
        this.enterRule(localContext, 366, PostgreSqlParser.RULE_opt_or_replace);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4426;
            this.match(PostgreSqlParser.KW_OR);
            this.state = 4427;
            this.match(PostgreSqlParser.KW_REPLACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_args(): Func_argsContext {
        let localContext = new Func_argsContext(this.context, this.state);
        this.enterRule(localContext, 368, PostgreSqlParser.RULE_func_args);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4429;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4431;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || _la === 68 || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4294967265) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 4294967295) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 4294967295) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 4430;
                this.func_args_list();
                }
            }

            this.state = 4433;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_args_list(): Func_args_listContext {
        let localContext = new Func_args_listContext(this.context, this.state);
        this.enterRule(localContext, 370, PostgreSqlParser.RULE_func_args_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4435;
            this.func_arg();
            this.state = 4440;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4436;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4437;
                this.func_arg();
                }
                }
                this.state = 4442;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routine_with_argtypes_list(): Routine_with_argtypes_listContext {
        let localContext = new Routine_with_argtypes_listContext(this.context, this.state);
        this.enterRule(localContext, 372, PostgreSqlParser.RULE_routine_with_argtypes_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4443;
            this.routine_with_argtypes();
            this.state = 4448;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4444;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4445;
                this.routine_with_argtypes();
                }
                }
                this.state = 4450;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routine_with_argtypes(): Routine_with_argtypesContext {
        let localContext = new Routine_with_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 374, PostgreSqlParser.RULE_routine_with_argtypes);
        try {
            this.state = 4456;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 549, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4451;
                this.routine_name();
                this.state = 4452;
                this.func_args();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4454;
                this.type_func_name_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4455;
                this.qualified_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedure_with_argtypes_list(): Procedure_with_argtypes_listContext {
        let localContext = new Procedure_with_argtypes_listContext(this.context, this.state);
        this.enterRule(localContext, 376, PostgreSqlParser.RULE_procedure_with_argtypes_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4458;
            this.procedure_with_argtypes();
            this.state = 4463;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4459;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4460;
                this.procedure_with_argtypes();
                }
                }
                this.state = 4465;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext {
        let localContext = new Procedure_with_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 378, PostgreSqlParser.RULE_procedure_with_argtypes);
        try {
            this.state = 4471;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 551, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4466;
                this.procedure_name();
                this.state = 4467;
                this.func_args();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4469;
                this.type_func_name_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4470;
                this.qualified_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_with_argtypes_list(): Function_with_argtypes_listContext {
        let localContext = new Function_with_argtypes_listContext(this.context, this.state);
        this.enterRule(localContext, 380, PostgreSqlParser.RULE_function_with_argtypes_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4473;
            this.function_with_argtypes();
            this.state = 4478;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4474;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4475;
                this.function_with_argtypes();
                }
                }
                this.state = 4480;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_with_argtypes(): Function_with_argtypesContext {
        let localContext = new Function_with_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 382, PostgreSqlParser.RULE_function_with_argtypes);
        try {
            this.state = 4486;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 553, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4481;
                this.function_name();
                this.state = 4482;
                this.func_args();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4484;
                this.type_func_name_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4485;
                this.qualified_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_arg(): Func_argContext {
        let localContext = new Func_argContext(this.context, this.state);
        this.enterRule(localContext, 384, PostgreSqlParser.RULE_func_arg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4496;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 556, this.context) ) {
            case 1:
                {
                this.state = 4488;
                this.arg_class();
                this.state = 4490;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 554, this.context) ) {
                case 1:
                    {
                    this.state = 4489;
                    this.type_function_name();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 4492;
                this.type_function_name();
                this.state = 4494;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 555, this.context) ) {
                case 1:
                    {
                    this.state = 4493;
                    this.arg_class();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 4498;
            this.func_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arg_class(): Arg_classContext {
        let localContext = new Arg_classContext(this.context, this.state);
        this.enterRule(localContext, 386, PostgreSqlParser.RULE_arg_class);
        try {
            this.state = 4507;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_IN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4500;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 4502;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 557, this.context) ) {
                case 1:
                    {
                    this.state = 4501;
                    this.match(PostgreSqlParser.KW_OUT);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_OUT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4504;
                this.match(PostgreSqlParser.KW_OUT);
                }
                break;
            case PostgreSqlParser.KW_INOUT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4505;
                this.match(PostgreSqlParser.KW_INOUT);
                }
                break;
            case PostgreSqlParser.KW_VARIADIC:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4506;
                this.match(PostgreSqlParser.KW_VARIADIC);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_type(): Func_typeContext {
        let localContext = new Func_typeContext(this.context, this.state);
        this.enterRule(localContext, 388, PostgreSqlParser.RULE_func_type);
        let _la: number;
        try {
            this.state = 4518;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 560, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4509;
                this.typename();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4511;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 415) {
                    {
                    this.state = 4510;
                    this.match(PostgreSqlParser.KW_SETOF);
                    }
                }

                this.state = 4513;
                this.type_function_name();
                this.state = 4514;
                this.attrs();
                this.state = 4515;
                this.match(PostgreSqlParser.PERCENT);
                this.state = 4516;
                this.match(PostgreSqlParser.KW_TYPE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_arg_with_default(): Func_arg_with_defaultContext {
        let localContext = new Func_arg_with_defaultContext(this.context, this.state);
        this.enterRule(localContext, 390, PostgreSqlParser.RULE_func_arg_with_default);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4520;
            this.func_arg();
            this.state = 4523;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10 || _la === 53) {
                {
                this.state = 4521;
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 53)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4522;
                this.expression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggr_args(): Aggr_argsContext {
        let localContext = new Aggr_argsContext(this.context, this.state);
        this.enterRule(localContext, 392, PostgreSqlParser.RULE_aggr_args);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4525;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4535;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.STAR:
                {
                this.state = 4526;
                this.match(PostgreSqlParser.STAR);
                }
                break;
            case PostgreSqlParser.CLOSE_PAREN:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IN:
            case PostgreSqlParser.KW_ORDER:
            case PostgreSqlParser.KW_VARIADIC:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 4528;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53 || _la === 68 || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & 4294967265) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & 4294967295) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 4294967295) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 4294967295) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                    {
                    this.state = 4527;
                    this.func_args_list();
                    }
                }

                this.state = 4533;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 83) {
                    {
                    this.state = 4530;
                    this.match(PostgreSqlParser.KW_ORDER);
                    this.state = 4531;
                    this.match(PostgreSqlParser.KW_BY);
                    this.state = 4532;
                    this.func_args_list();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4537;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext {
        let localContext = new Aggregate_with_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 394, PostgreSqlParser.RULE_aggregate_with_argtypes);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4539;
            this.function_name();
            this.state = 4540;
            this.aggr_args();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public common_func_opt_item(): Common_func_opt_itemContext {
        let localContext = new Common_func_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 396, PostgreSqlParser.RULE_common_func_opt_item);
        let _la: number;
        try {
            this.state = 4571;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_RETURNS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4545;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_RETURNS:
                    {
                    this.state = 4542;
                    this.match(PostgreSqlParser.KW_RETURNS);
                    this.state = 4543;
                    this.match(PostgreSqlParser.KW_NULL);
                    }
                    break;
                case PostgreSqlParser.KW_CALLED:
                    {
                    this.state = 4544;
                    this.match(PostgreSqlParser.KW_CALLED);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4547;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 4548;
                this.match(PostgreSqlParser.KW_NULL);
                this.state = 4549;
                this.match(PostgreSqlParser.KW_INPUT);
                }
                break;
            case PostgreSqlParser.KW_STRICT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4550;
                this.match(PostgreSqlParser.KW_STRICT);
                }
                break;
            case PostgreSqlParser.KW_IMMUTABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4551;
                this.match(PostgreSqlParser.KW_IMMUTABLE);
                }
                break;
            case PostgreSqlParser.KW_STABLE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4552;
                this.match(PostgreSqlParser.KW_STABLE);
                }
                break;
            case PostgreSqlParser.KW_VOLATILE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4553;
                this.match(PostgreSqlParser.KW_VOLATILE);
                }
                break;
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_SECURITY:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4555;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 205) {
                    {
                    this.state = 4554;
                    this.match(PostgreSqlParser.KW_EXTERNAL);
                    }
                }

                this.state = 4557;
                this.match(PostgreSqlParser.KW_SECURITY);
                this.state = 4558;
                _la = this.tokenStream.LA(1);
                if(!(_la === 181 || _la === 243)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_LEAKPROOF:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4559;
                this.match(PostgreSqlParser.KW_LEAKPROOF);
                }
                break;
            case PostgreSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4560;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 4561;
                this.match(PostgreSqlParser.KW_LEAKPROOF);
                }
                break;
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_ROWS:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4562;
                _la = this.tokenStream.LA(1);
                if(!(_la === 170 || _la === 320)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4563;
                this.numericonly();
                }
                break;
            case PostgreSqlParser.KW_SUPPORT:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4564;
                this.match(PostgreSqlParser.KW_SUPPORT);
                this.state = 4565;
                this.any_name();
                }
                break;
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4566;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 4567;
                this.set_rest_more();
                }
                break;
            case PostgreSqlParser.KW_RESET:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4568;
                this.variableresetstmt();
                }
                break;
            case PostgreSqlParser.KW_PARALLEL:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4569;
                this.match(PostgreSqlParser.KW_PARALLEL);
                this.state = 4570;
                this.colid();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createfunc_opt_item(): Createfunc_opt_itemContext {
        let localContext = new Createfunc_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 398, PostgreSqlParser.RULE_createfunc_opt_item);
        let _la: number;
        try {
            this.state = 4608;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 570, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4573;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 4574;
                this.sconst();
                this.state = 4575;
                this.notify_payload();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4577;
                this.match(PostgreSqlParser.KW_LANGUAGE);
                this.state = 4578;
                this.nonreservedword_or_sconst();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4579;
                this.match(PostgreSqlParser.KW_TRANSFORM);
                this.state = 4580;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 4581;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 4582;
                this.typename();
                this.state = 4589;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 4583;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4584;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 4585;
                    this.match(PostgreSqlParser.KW_TYPE);
                    this.state = 4586;
                    this.typename();
                    }
                    }
                    this.state = 4591;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4592;
                this.match(PostgreSqlParser.KW_WINDOW);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4593;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 4594;
                this.colid();
                this.state = 4601;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_TO:
                    {
                    this.state = 4595;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 4596;
                    this.colid();
                    }
                    break;
                case PostgreSqlParser.EQUAL:
                    {
                    this.state = 4597;
                    this.match(PostgreSqlParser.EQUAL);
                    this.state = 4598;
                    this.colid();
                    }
                    break;
                case PostgreSqlParser.KW_FROM:
                    {
                    this.state = 4599;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 4600;
                    this.match(PostgreSqlParser.KW_CURRENT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4603;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 4604;
                this.colid();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4605;
                this.stmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4606;
                this.common_func_opt_item();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4607;
                this.colid();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_definition(): Opt_definitionContext {
        let localContext = new Opt_definitionContext(this.context, this.state);
        this.enterRule(localContext, 400, PostgreSqlParser.RULE_opt_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4610;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 4611;
            this.definition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_func_column(): Table_func_columnContext {
        let localContext = new Table_func_columnContext(this.context, this.state);
        this.enterRule(localContext, 402, PostgreSqlParser.RULE_table_func_column);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4613;
            this.column_name();
            this.state = 4614;
            this.func_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterfunctionstmt(): AlterfunctionstmtContext {
        let localContext = new AlterfunctionstmtContext(this.context, this.state);
        this.enterRule(localContext, 404, PostgreSqlParser.RULE_alterfunctionstmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4616;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 4623;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FUNCTION:
                {
                this.state = 4617;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4618;
                this.function_with_argtypes();
                }
                break;
            case PostgreSqlParser.KW_PROCEDURE:
                {
                this.state = 4619;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4620;
                this.procedure_with_argtypes();
                }
                break;
            case PostgreSqlParser.KW_ROUTINE:
                {
                this.state = 4621;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 4622;
                this.routine_with_argtypes();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4626;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 4625;
                    this.common_func_opt_item();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4628;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 572, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            this.state = 4631;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 573, this.context) ) {
            case 1:
                {
                this.state = 4630;
                this.match(PostgreSqlParser.KW_RESTRICT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removefuncstmt(): RemovefuncstmtContext {
        let localContext = new RemovefuncstmtContext(this.context, this.state);
        this.enterRule(localContext, 406, PostgreSqlParser.RULE_removefuncstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4633;
            this.match(PostgreSqlParser.KW_DROP);
            this.state = 4649;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FUNCTION:
                {
                this.state = 4634;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4636;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 574, this.context) ) {
                case 1:
                    {
                    this.state = 4635;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4638;
                this.function_with_argtypes_list();
                }
                break;
            case PostgreSqlParser.KW_PROCEDURE:
                {
                this.state = 4639;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4641;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 575, this.context) ) {
                case 1:
                    {
                    this.state = 4640;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4643;
                this.procedure_with_argtypes_list();
                }
                break;
            case PostgreSqlParser.KW_ROUTINE:
                {
                this.state = 4644;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 4646;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 576, this.context) ) {
                case 1:
                    {
                    this.state = 4645;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4648;
                this.routine_with_argtypes_list();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4652;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 578, this.context) ) {
            case 1:
                {
                this.state = 4651;
                this.opt_drop_behavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removeaggrstmt(): RemoveaggrstmtContext {
        let localContext = new RemoveaggrstmtContext(this.context, this.state);
        this.enterRule(localContext, 408, PostgreSqlParser.RULE_removeaggrstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4654;
            this.match(PostgreSqlParser.KW_DROP);
            this.state = 4655;
            this.match(PostgreSqlParser.KW_AGGREGATE);
            this.state = 4657;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 579, this.context) ) {
            case 1:
                {
                this.state = 4656;
                this.opt_if_exists();
                }
                break;
            }
            {
            this.state = 4659;
            this.aggregate_with_argtypes();
            this.state = 4664;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4660;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4661;
                this.aggregate_with_argtypes();
                }
                }
                this.state = 4666;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 4668;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 581, this.context) ) {
            case 1:
                {
                this.state = 4667;
                this.opt_drop_behavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removeoperstmt(): RemoveoperstmtContext {
        let localContext = new RemoveoperstmtContext(this.context, this.state);
        this.enterRule(localContext, 410, PostgreSqlParser.RULE_removeoperstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4670;
            this.match(PostgreSqlParser.KW_DROP);
            this.state = 4671;
            this.match(PostgreSqlParser.KW_OPERATOR);
            this.state = 4673;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 582, this.context) ) {
            case 1:
                {
                this.state = 4672;
                this.opt_if_exists();
                }
                break;
            }
            {
            this.state = 4675;
            this.operator_with_argtypes();
            this.state = 4680;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4676;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4677;
                this.operator_with_argtypes();
                }
                }
                this.state = 4682;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 4684;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 584, this.context) ) {
            case 1:
                {
                this.state = 4683;
                this.opt_drop_behavior();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public oper_argtypes(): Oper_argtypesContext {
        let localContext = new Oper_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 412, PostgreSqlParser.RULE_oper_argtypes);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4686;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4699;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 586, this.context) ) {
            case 1:
                {
                this.state = 4687;
                this.typename();
                this.state = 4690;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 4688;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4689;
                    this.typename();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 4692;
                this.match(PostgreSqlParser.KW_NONE);
                this.state = 4693;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4694;
                this.typename();
                }
                break;
            case 3:
                {
                this.state = 4695;
                this.typename();
                this.state = 4696;
                this.match(PostgreSqlParser.COMMA);
                this.state = 4697;
                this.match(PostgreSqlParser.KW_NONE);
                }
                break;
            }
            this.state = 4701;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public any_operator(): Any_operatorContext {
        let localContext = new Any_operatorContext(this.context, this.state);
        this.enterRule(localContext, 414, PostgreSqlParser.RULE_any_operator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4708;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                {
                this.state = 4703;
                this.colid();
                this.state = 4704;
                this.match(PostgreSqlParser.DOT);
                }
                }
                this.state = 4710;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 4711;
            this.all_op();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operator_with_argtypes(): Operator_with_argtypesContext {
        let localContext = new Operator_with_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 416, PostgreSqlParser.RULE_operator_with_argtypes);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4713;
            this.any_operator();
            this.state = 4714;
            this.oper_argtypes();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dostmt(): DostmtContext {
        let localContext = new DostmtContext(this.context, this.state);
        this.enterRule(localContext, 418, PostgreSqlParser.RULE_dostmt);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4716;
            this.match(PostgreSqlParser.KW_DO);
            this.state = 4720;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    this.state = 4720;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.StringConstant:
                    case PostgreSqlParser.UnicodeEscapeStringConstant:
                    case PostgreSqlParser.BeginDollarStringConstant:
                    case PostgreSqlParser.EscapeStringConstant:
                        {
                        this.state = 4717;
                        this.sconst();
                        }
                        break;
                    case PostgreSqlParser.KW_LANGUAGE:
                        {
                        this.state = 4718;
                        this.match(PostgreSqlParser.KW_LANGUAGE);
                        this.state = 4719;
                        this.nonreservedword_or_sconst();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4722;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 589, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createcaststmt(): CreatecaststmtContext {
        let localContext = new CreatecaststmtContext(this.context, this.state);
        this.enterRule(localContext, 420, PostgreSqlParser.RULE_createcaststmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4724;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 4725;
            this.match(PostgreSqlParser.KW_CAST);
            this.state = 4726;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4727;
            this.typename();
            this.state = 4728;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 4729;
            this.typename();
            this.state = 4730;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            this.state = 4747;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_WITHOUT:
                {
                {
                this.state = 4731;
                this.match(PostgreSqlParser.KW_WITHOUT);
                this.state = 4732;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4735;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 590, this.context) ) {
                case 1:
                    {
                    this.state = 4733;
                    this.match(PostgreSqlParser.KW_AS);
                    this.state = 4734;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 141 || _la === 223)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                }
                break;
            case PostgreSqlParser.KW_WITH:
                {
                {
                this.state = 4737;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 4741;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_FUNCTION:
                    {
                    this.state = 4738;
                    this.match(PostgreSqlParser.KW_FUNCTION);
                    this.state = 4739;
                    this.function_with_argtypes();
                    }
                    break;
                case PostgreSqlParser.KW_INOUT:
                    {
                    this.state = 4740;
                    this.match(PostgreSqlParser.KW_INOUT);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4745;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 592, this.context) ) {
                case 1:
                    {
                    this.state = 4743;
                    this.match(PostgreSqlParser.KW_AS);
                    this.state = 4744;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 141 || _la === 223)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_if_exists(): Opt_if_existsContext {
        let localContext = new Opt_if_existsContext(this.context, this.state);
        this.enterRule(localContext, 422, PostgreSqlParser.RULE_opt_if_exists);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4749;
            this.match(PostgreSqlParser.KW_IF);
            this.state = 4750;
            this.match(PostgreSqlParser.KW_EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createtransformstmt(): CreatetransformstmtContext {
        let localContext = new CreatetransformstmtContext(this.context, this.state);
        this.enterRule(localContext, 424, PostgreSqlParser.RULE_createtransformstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4752;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 4754;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 4753;
                this.opt_or_replace();
                }
            }

            this.state = 4756;
            this.match(PostgreSqlParser.KW_TRANSFORM);
            this.state = 4757;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 4758;
            this.typename();
            this.state = 4759;
            this.match(PostgreSqlParser.KW_LANGUAGE);
            this.state = 4760;
            this.colid();
            this.state = 4761;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 4776;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FROM:
                {
                this.state = 4762;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 4763;
                this.sql_with_function();
                this.state = 4767;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 4764;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4765;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 4766;
                    this.sql_with_function();
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_TO:
                {
                this.state = 4769;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4770;
                this.sql_with_function();
                this.state = 4774;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 4771;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4772;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 4773;
                    this.sql_with_function();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4778;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_with_function(): Sql_with_functionContext {
        let localContext = new Sql_with_functionContext(this.context, this.state);
        this.enterRule(localContext, 426, PostgreSqlParser.RULE_sql_with_function);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4780;
            this.match(PostgreSqlParser.KW_SQL);
            this.state = 4781;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 4782;
            this.match(PostgreSqlParser.KW_FUNCTION);
            this.state = 4783;
            this.function_with_argtypes();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reindexstmt(): ReindexstmtContext {
        let localContext = new ReindexstmtContext(this.context, this.state);
        this.enterRule(localContext, 428, PostgreSqlParser.RULE_reindexstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4785;
            this.match(PostgreSqlParser.KW_REINDEX);
            this.state = 4796;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 4786;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 4787;
                this.match(PostgreSqlParser.KW_VERBOSE);
                this.state = 4792;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 4788;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 4789;
                    this.match(PostgreSqlParser.KW_VERBOSE);
                    }
                    }
                    this.state = 4794;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 4795;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
            }

            {
            this.state = 4823;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_INDEX:
                {
                this.state = 4798;
                this.match(PostgreSqlParser.KW_INDEX);
                this.state = 4800;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 4799;
                    this.match(PostgreSqlParser.KW_CONCURRENTLY);
                    }
                }

                this.state = 4802;
                this.qualified_name();
                }
                break;
            case PostgreSqlParser.KW_TABLE:
                {
                this.state = 4803;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 4805;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 4804;
                    this.match(PostgreSqlParser.KW_CONCURRENTLY);
                    }
                }

                this.state = 4807;
                this.table_name();
                }
                break;
            case PostgreSqlParser.KW_SCHEMA:
                {
                this.state = 4808;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 4810;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 4809;
                    this.match(PostgreSqlParser.KW_CONCURRENTLY);
                    }
                }

                this.state = 4812;
                this.schema_name();
                }
                break;
            case PostgreSqlParser.KW_SYSTEM:
                {
                this.state = 4813;
                this.match(PostgreSqlParser.KW_SYSTEM);
                this.state = 4815;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 4814;
                    this.match(PostgreSqlParser.KW_CONCURRENTLY);
                    }
                }

                this.state = 4817;
                this.colid();
                }
                break;
            case PostgreSqlParser.KW_DATABASE:
                {
                this.state = 4818;
                this.match(PostgreSqlParser.KW_DATABASE);
                this.state = 4820;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 4819;
                    this.match(PostgreSqlParser.KW_CONCURRENTLY);
                    }
                }

                this.state = 4822;
                this.database_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altertblspcstmt(): AltertblspcstmtContext {
        let localContext = new AltertblspcstmtContext(this.context, this.state);
        this.enterRule(localContext, 430, PostgreSqlParser.RULE_altertblspcstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4825;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 4826;
            this.opttablespace();
            this.state = 4827;
            _la = this.tokenStream.LA(1);
            if(!(_la === 313 || _la === 333)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4828;
            this.reloptions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renamestmt(): RenamestmtContext {
        let localContext = new RenamestmtContext(this.context, this.state);
        this.enterRule(localContext, 432, PostgreSqlParser.RULE_renamestmt);
        let _la: number;
        try {
            this.state = 5037;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 626, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4830;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4835;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_AGGREGATE:
                    {
                    this.state = 4831;
                    this.match(PostgreSqlParser.KW_AGGREGATE);
                    this.state = 4832;
                    this.aggregate_with_argtypes();
                    }
                    break;
                case PostgreSqlParser.KW_ROUTINE:
                    {
                    this.state = 4833;
                    this.match(PostgreSqlParser.KW_ROUTINE);
                    this.state = 4834;
                    this.routine_with_argtypes();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4837;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4838;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4839;
                this.colid();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4841;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4842;
                this.match(PostgreSqlParser.KW_DATABASE);
                this.state = 4843;
                this.database_name();
                this.state = 4844;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4845;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4846;
                this.database_name_create();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4848;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4849;
                _la = this.tokenStream.LA(1);
                if(!(_la === 108 || _la === 168 || _la === 189 || _la === 342 || _la === 360)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4850;
                this.any_name();
                this.state = 4851;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4852;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4853;
                this.colid();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4855;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4856;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 4857;
                this.function_with_argtypes();
                this.state = 4858;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4859;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4860;
                this.function_name_create();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4862;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4863;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 4864;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 206)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4865;
                this.any_name();
                this.state = 4866;
                this.table_access_method_clause();
                this.state = 4867;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4868;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4869;
                this.colid();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4871;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4872;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 4873;
                this.procedure_with_argtypes();
                this.state = 4874;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4875;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4876;
                this.procedure_name_create();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4878;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4879;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 4880;
                this.schema_name();
                this.state = 4881;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4882;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4883;
                this.schema_name_create();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4885;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4886;
                _la = this.tokenStream.LA(1);
                if(!(_la === 226 || _la === 328)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4888;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 607, this.context) ) {
                case 1:
                    {
                    this.state = 4887;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4890;
                this.qualified_name();
                this.state = 4891;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4892;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4893;
                this.colid();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4895;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4897;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 259) {
                    {
                    this.state = 4896;
                    this.match(PostgreSqlParser.KW_MATERIALIZED);
                    }
                }

                this.state = 4899;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 4901;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 609, this.context) ) {
                case 1:
                    {
                    this.state = 4900;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4903;
                this.view_name();
                this.state = 4904;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4905;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4906;
                this.view_name_create();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4908;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4910;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 63) {
                    {
                    this.state = 4909;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    }
                }

                this.state = 4912;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 4914;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 611, this.context) ) {
                case 1:
                    {
                    this.state = 4913;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 4916;
                this.relation_expr();
                this.state = 4917;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4918;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4919;
                this.table_name_create();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4921;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4946;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_FOREIGN:
                case PostgreSqlParser.KW_TABLE:
                    {
                    this.state = 4923;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 63) {
                        {
                        this.state = 4922;
                        this.match(PostgreSqlParser.KW_FOREIGN);
                        }
                    }

                    this.state = 4925;
                    this.match(PostgreSqlParser.KW_TABLE);
                    this.state = 4927;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 613, this.context) ) {
                    case 1:
                        {
                        this.state = 4926;
                        this.opt_if_exists();
                        }
                        break;
                    }
                    this.state = 4929;
                    this.relation_expr();
                    this.state = 4930;
                    this.match(PostgreSqlParser.KW_RENAME);
                    this.state = 4932;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 614, this.context) ) {
                    case 1:
                        {
                        this.state = 4931;
                        this.match(PostgreSqlParser.KW_COLUMN);
                        }
                        break;
                    }
                    }
                    break;
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_VIEW:
                    {
                    this.state = 4935;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 259) {
                        {
                        this.state = 4934;
                        this.match(PostgreSqlParser.KW_MATERIALIZED);
                        }
                    }

                    this.state = 4937;
                    this.match(PostgreSqlParser.KW_VIEW);
                    this.state = 4939;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 616, this.context) ) {
                    case 1:
                        {
                        this.state = 4938;
                        this.opt_if_exists();
                        }
                        break;
                    }
                    this.state = 4941;
                    this.view_name();
                    this.state = 4942;
                    this.match(PostgreSqlParser.KW_RENAME);
                    this.state = 4944;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 617, this.context) ) {
                    case 1:
                        {
                        this.state = 4943;
                        this.match(PostgreSqlParser.KW_COLUMN);
                        }
                        break;
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4948;
                this.column_name();
                this.state = 4949;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4950;
                this.column_name_create();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4952;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4960;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_TABLE:
                    {
                    this.state = 4953;
                    this.match(PostgreSqlParser.KW_TABLE);
                    this.state = 4955;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 619, this.context) ) {
                    case 1:
                        {
                        this.state = 4954;
                        this.opt_if_exists();
                        }
                        break;
                    }
                    this.state = 4957;
                    this.relation_expr();
                    }
                    break;
                case PostgreSqlParser.KW_DOMAIN:
                    {
                    this.state = 4958;
                    this.match(PostgreSqlParser.KW_DOMAIN);
                    this.state = 4959;
                    this.any_name();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4962;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4963;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 4964;
                this.colid();
                this.state = 4965;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4966;
                this.colid();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4968;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4975;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_POLICY:
                    {
                    {
                    this.state = 4969;
                    this.match(PostgreSqlParser.KW_POLICY);
                    this.state = 4971;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 621, this.context) ) {
                    case 1:
                        {
                        this.state = 4970;
                        this.opt_if_exists();
                        }
                        break;
                    }
                    }
                    }
                    break;
                case PostgreSqlParser.KW_RULE:
                    {
                    this.state = 4973;
                    this.match(PostgreSqlParser.KW_RULE);
                    }
                    break;
                case PostgreSqlParser.KW_TRIGGER:
                    {
                    this.state = 4974;
                    this.match(PostgreSqlParser.KW_TRIGGER);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4977;
                this.colid();
                this.state = 4978;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 4979;
                this.qualified_name();
                this.state = 4980;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 4981;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 4982;
                this.colid();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 4984;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 4997;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_FOREIGN:
                    {
                    this.state = 4985;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    this.state = 4986;
                    this.match(PostgreSqlParser.KW_DATA);
                    this.state = 4987;
                    this.match(PostgreSqlParser.KW_WRAPPER);
                    }
                    break;
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_PROCEDURAL:
                    {
                    this.state = 4989;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 295) {
                        {
                        this.state = 4988;
                        this.match(PostgreSqlParser.KW_PROCEDURAL);
                        }
                    }

                    this.state = 4991;
                    this.match(PostgreSqlParser.KW_LANGUAGE);
                    }
                    break;
                case PostgreSqlParser.KW_PUBLICATION:
                    {
                    this.state = 4992;
                    this.match(PostgreSqlParser.KW_PUBLICATION);
                    }
                    break;
                case PostgreSqlParser.KW_SERVER:
                    {
                    this.state = 4993;
                    this.match(PostgreSqlParser.KW_SERVER);
                    }
                    break;
                case PostgreSqlParser.KW_SUBSCRIPTION:
                    {
                    this.state = 4994;
                    this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                    }
                    break;
                case PostgreSqlParser.KW_EVENT:
                    {
                    this.state = 4995;
                    this.match(PostgreSqlParser.KW_EVENT);
                    this.state = 4996;
                    this.match(PostgreSqlParser.KW_TRIGGER);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4999;
                this.colid();
                this.state = 5000;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5001;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5002;
                this.colid();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 5004;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5005;
                _la = this.tokenStream.LA(1);
                if(!(_la === 66 || _la === 99 || _la === 318)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5006;
                this.rolespec();
                this.state = 5007;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5008;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5009;
                this.rolespec();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 5011;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5012;
                this.opttablespace();
                this.state = 5013;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5014;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5015;
                this.tablespace_name_create();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 5017;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5018;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 5019;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 5020;
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 185 || _la === 283 || _la === 353)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5021;
                this.any_name();
                this.state = 5022;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5023;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5024;
                this.colid();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 5026;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5027;
                this.match(PostgreSqlParser.KW_TYPE);
                this.state = 5028;
                this.any_name();
                this.state = 5029;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5030;
                this.match(PostgreSqlParser.KW_ATTRIBUTE);
                this.state = 5031;
                this.colid();
                this.state = 5032;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5033;
                this.colid();
                this.state = 5035;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 625, this.context) ) {
                case 1:
                    {
                    this.state = 5034;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterobjectdependsstmt(): AlterobjectdependsstmtContext {
        let localContext = new AlterobjectdependsstmtContext(this.context, this.state);
        this.enterRule(localContext, 434, PostgreSqlParser.RULE_alterobjectdependsstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5039;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5056;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_FUNCTION:
                {
                this.state = 5040;
                this.match(PostgreSqlParser.KW_FUNCTION);
                this.state = 5041;
                this.function_with_argtypes();
                }
                break;
            case PostgreSqlParser.KW_PROCEDURE:
                {
                this.state = 5042;
                this.match(PostgreSqlParser.KW_PROCEDURE);
                this.state = 5043;
                this.procedure_with_argtypes();
                }
                break;
            case PostgreSqlParser.KW_ROUTINE:
                {
                this.state = 5044;
                this.match(PostgreSqlParser.KW_ROUTINE);
                this.state = 5045;
                this.routine_with_argtypes();
                }
                break;
            case PostgreSqlParser.KW_TRIGGER:
                {
                this.state = 5046;
                this.match(PostgreSqlParser.KW_TRIGGER);
                this.state = 5047;
                this.colid();
                this.state = 5048;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 5049;
                this.qualified_name();
                }
                break;
            case PostgreSqlParser.KW_MATERIALIZED:
                {
                this.state = 5051;
                this.match(PostgreSqlParser.KW_MATERIALIZED);
                this.state = 5052;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 5053;
                this.view_name();
                }
                break;
            case PostgreSqlParser.KW_INDEX:
                {
                this.state = 5054;
                this.match(PostgreSqlParser.KW_INDEX);
                this.state = 5055;
                this.qualified_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 5059;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 269) {
                {
                this.state = 5058;
                this.match(PostgreSqlParser.KW_NO);
                }
            }

            this.state = 5061;
            this.match(PostgreSqlParser.KW_DEPENDS);
            this.state = 5062;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 5063;
            this.match(PostgreSqlParser.KW_EXTENSION);
            this.state = 5064;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterobjectschemastmt(): AlterobjectschemastmtContext {
        let localContext = new AlterobjectschemastmtContext(this.context, this.state);
        this.enterRule(localContext, 436, PostgreSqlParser.RULE_alterobjectschemastmt);
        let _la: number;
        try {
            this.state = 5127;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 636, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5066;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5105;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 634, this.context) ) {
                case 1:
                    {
                    this.state = 5067;
                    this.match(PostgreSqlParser.KW_AGGREGATE);
                    this.state = 5068;
                    this.aggregate_with_argtypes();
                    }
                    break;
                case 2:
                    {
                    this.state = 5069;
                    this.match(PostgreSqlParser.KW_EXTENSION);
                    this.state = 5070;
                    this.colid();
                    }
                    break;
                case 3:
                    {
                    this.state = 5071;
                    this.match(PostgreSqlParser.KW_FUNCTION);
                    this.state = 5072;
                    this.function_with_argtypes();
                    }
                    break;
                case 4:
                    {
                    this.state = 5073;
                    this.match(PostgreSqlParser.KW_OPERATOR);
                    this.state = 5074;
                    this.operator_with_argtypes();
                    }
                    break;
                case 5:
                    {
                    this.state = 5075;
                    this.match(PostgreSqlParser.KW_OPERATOR);
                    this.state = 5076;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 156 || _la === 206)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5077;
                    this.any_name();
                    this.state = 5078;
                    this.table_access_method_clause();
                    }
                    break;
                case 6:
                    {
                    this.state = 5080;
                    this.match(PostgreSqlParser.KW_PROCEDURE);
                    this.state = 5081;
                    this.procedure_with_argtypes();
                    }
                    break;
                case 7:
                    {
                    this.state = 5082;
                    this.match(PostgreSqlParser.KW_ROUTINE);
                    this.state = 5083;
                    this.routine_with_argtypes();
                    }
                    break;
                case 8:
                    {
                    this.state = 5084;
                    this.match(PostgreSqlParser.KW_SEQUENCE);
                    this.state = 5086;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 629, this.context) ) {
                    case 1:
                        {
                        this.state = 5085;
                        this.opt_if_exists();
                        }
                        break;
                    }
                    this.state = 5088;
                    this.qualified_name();
                    }
                    break;
                case 9:
                    {
                    this.state = 5090;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 259) {
                        {
                        this.state = 5089;
                        this.match(PostgreSqlParser.KW_MATERIALIZED);
                        }
                    }

                    this.state = 5092;
                    this.match(PostgreSqlParser.KW_VIEW);
                    this.state = 5094;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 631, this.context) ) {
                    case 1:
                        {
                        this.state = 5093;
                        this.opt_if_exists();
                        }
                        break;
                    }
                    this.state = 5096;
                    this.view_name();
                    }
                    break;
                case 10:
                    {
                    this.state = 5098;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 63) {
                        {
                        this.state = 5097;
                        this.match(PostgreSqlParser.KW_FOREIGN);
                        }
                    }

                    this.state = 5100;
                    this.match(PostgreSqlParser.KW_TABLE);
                    this.state = 5102;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 633, this.context) ) {
                    case 1:
                        {
                        this.state = 5101;
                        this.opt_if_exists();
                        }
                        break;
                    }
                    this.state = 5104;
                    this.relation_expr();
                    }
                    break;
                }
                this.state = 5107;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 5108;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 5109;
                this.schema_name();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5111;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5120;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_TEXT:
                    {
                    this.state = 5112;
                    this.match(PostgreSqlParser.KW_TEXT);
                    this.state = 5113;
                    this.match(PostgreSqlParser.KW_SEARCH);
                    this.state = 5114;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 163 || _la === 185 || _la === 283 || _la === 353)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case PostgreSqlParser.KW_COLLATION:
                    {
                    this.state = 5115;
                    this.match(PostgreSqlParser.KW_COLLATION);
                    }
                    break;
                case PostgreSqlParser.KW_CONVERSION:
                    {
                    this.state = 5116;
                    this.match(PostgreSqlParser.KW_CONVERSION);
                    }
                    break;
                case PostgreSqlParser.KW_DOMAIN:
                    {
                    this.state = 5117;
                    this.match(PostgreSqlParser.KW_DOMAIN);
                    }
                    break;
                case PostgreSqlParser.KW_STATISTICS:
                    {
                    this.state = 5118;
                    this.match(PostgreSqlParser.KW_STATISTICS);
                    }
                    break;
                case PostgreSqlParser.KW_TYPE:
                    {
                    this.state = 5119;
                    this.match(PostgreSqlParser.KW_TYPE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5122;
                this.any_name();
                this.state = 5123;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 5124;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 5125;
                this.schema_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alteroperatorstmt(): AlteroperatorstmtContext {
        let localContext = new AlteroperatorstmtContext(this.context, this.state);
        this.enterRule(localContext, 438, PostgreSqlParser.RULE_alteroperatorstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5129;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5130;
            this.match(PostgreSqlParser.KW_OPERATOR);
            this.state = 5131;
            this.operator_with_argtypes();
            this.state = 5132;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 5133;
            this.operator_def_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operator_def_list(): Operator_def_listContext {
        let localContext = new Operator_def_listContext(this.context, this.state);
        this.enterRule(localContext, 440, PostgreSqlParser.RULE_operator_def_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5135;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 5136;
            this.operator_def_elem();
            this.state = 5141;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5137;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5138;
                this.operator_def_elem();
                }
                }
                this.state = 5143;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 5144;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operator_def_elem(): Operator_def_elemContext {
        let localContext = new Operator_def_elemContext(this.context, this.state);
        this.enterRule(localContext, 442, PostgreSqlParser.RULE_operator_def_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5146;
            this.collabel();
            this.state = 5147;
            this.match(PostgreSqlParser.EQUAL);
            this.state = 5154;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 638, this.context) ) {
            case 1:
                {
                this.state = 5148;
                this.match(PostgreSqlParser.KW_NONE);
                }
                break;
            case 2:
                {
                this.state = 5149;
                this.func_type();
                }
                break;
            case 3:
                {
                this.state = 5150;
                this.reserved_keyword();
                }
                break;
            case 4:
                {
                this.state = 5151;
                this.qual_all_op();
                }
                break;
            case 5:
                {
                this.state = 5152;
                this.numericonly();
                }
                break;
            case 6:
                {
                this.state = 5153;
                this.sconst();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altertypestmt(): AltertypestmtContext {
        let localContext = new AltertypestmtContext(this.context, this.state);
        this.enterRule(localContext, 444, PostgreSqlParser.RULE_altertypestmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5156;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5157;
            this.match(PostgreSqlParser.KW_TYPE);
            this.state = 5158;
            this.any_name();
            this.state = 5159;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 5160;
            this.operator_def_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterownerstmt(): AlterownerstmtContext {
        let localContext = new AlterownerstmtContext(this.context, this.state);
        this.enterRule(localContext, 446, PostgreSqlParser.RULE_alterownerstmt);
        let _la: number;
        try {
            this.state = 5236;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 643, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5162;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5163;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 5164;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 206)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5165;
                this.any_name();
                this.state = 5166;
                this.table_access_method_clause();
                this.state = 5167;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5168;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5169;
                this.rolespec();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5171;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5198;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 640, this.context) ) {
                case 1:
                    {
                    this.state = 5172;
                    this.match(PostgreSqlParser.KW_AGGREGATE);
                    this.state = 5173;
                    this.aggregate_with_argtypes();
                    }
                    break;
                case 2:
                    {
                    this.state = 5174;
                    this.match(PostgreSqlParser.KW_DATABASE);
                    this.state = 5175;
                    this.database_name();
                    }
                    break;
                case 3:
                    {
                    this.state = 5176;
                    this.match(PostgreSqlParser.KW_FUNCTION);
                    this.state = 5177;
                    this.function_with_argtypes();
                    }
                    break;
                case 4:
                    {
                    this.state = 5179;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 295) {
                        {
                        this.state = 5178;
                        this.match(PostgreSqlParser.KW_PROCEDURAL);
                        }
                    }

                    this.state = 5181;
                    this.match(PostgreSqlParser.KW_LANGUAGE);
                    this.state = 5182;
                    this.colid();
                    }
                    break;
                case 5:
                    {
                    this.state = 5183;
                    this.match(PostgreSqlParser.KW_LARGE);
                    this.state = 5184;
                    this.match(PostgreSqlParser.KW_OBJECT);
                    this.state = 5185;
                    this.numericonly();
                    }
                    break;
                case 6:
                    {
                    this.state = 5186;
                    this.match(PostgreSqlParser.KW_LARGE);
                    this.state = 5187;
                    this.match(PostgreSqlParser.KW_OBJECT);
                    this.state = 5188;
                    this.numericonly();
                    }
                    break;
                case 7:
                    {
                    this.state = 5189;
                    this.match(PostgreSqlParser.KW_OPERATOR);
                    this.state = 5190;
                    this.operator_with_argtypes();
                    }
                    break;
                case 8:
                    {
                    this.state = 5191;
                    this.match(PostgreSqlParser.KW_PROCEDURE);
                    this.state = 5192;
                    this.procedure_with_argtypes();
                    }
                    break;
                case 9:
                    {
                    this.state = 5193;
                    this.match(PostgreSqlParser.KW_ROUTINE);
                    this.state = 5194;
                    this.routine_with_argtypes();
                    }
                    break;
                case 10:
                    {
                    this.state = 5195;
                    this.match(PostgreSqlParser.KW_SCHEMA);
                    this.state = 5196;
                    this.schema_name();
                    }
                    break;
                case 11:
                    {
                    this.state = 5197;
                    this.opttablespace();
                    }
                    break;
                }
                this.state = 5200;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5201;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5202;
                this.rolespec();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5204;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5213;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_TEXT:
                    {
                    this.state = 5205;
                    this.match(PostgreSqlParser.KW_TEXT);
                    this.state = 5206;
                    this.match(PostgreSqlParser.KW_SEARCH);
                    this.state = 5207;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 163 || _la === 185)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case PostgreSqlParser.KW_COLLATION:
                    {
                    this.state = 5208;
                    this.match(PostgreSqlParser.KW_COLLATION);
                    }
                    break;
                case PostgreSqlParser.KW_CONVERSION:
                    {
                    this.state = 5209;
                    this.match(PostgreSqlParser.KW_CONVERSION);
                    }
                    break;
                case PostgreSqlParser.KW_DOMAIN:
                    {
                    this.state = 5210;
                    this.match(PostgreSqlParser.KW_DOMAIN);
                    }
                    break;
                case PostgreSqlParser.KW_TYPE:
                    {
                    this.state = 5211;
                    this.match(PostgreSqlParser.KW_TYPE);
                    }
                    break;
                case PostgreSqlParser.KW_STATISTICS:
                    {
                    this.state = 5212;
                    this.match(PostgreSqlParser.KW_STATISTICS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5215;
                this.any_name();
                this.state = 5216;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5217;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5218;
                this.rolespec();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5220;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5229;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_SERVER:
                    {
                    this.state = 5221;
                    this.match(PostgreSqlParser.KW_SERVER);
                    }
                    break;
                case PostgreSqlParser.KW_FOREIGN:
                    {
                    {
                    this.state = 5222;
                    this.match(PostgreSqlParser.KW_FOREIGN);
                    this.state = 5223;
                    this.match(PostgreSqlParser.KW_DATA);
                    this.state = 5224;
                    this.match(PostgreSqlParser.KW_WRAPPER);
                    }
                    }
                    break;
                case PostgreSqlParser.KW_EVENT:
                    {
                    {
                    this.state = 5225;
                    this.match(PostgreSqlParser.KW_EVENT);
                    this.state = 5226;
                    this.match(PostgreSqlParser.KW_TRIGGER);
                    }
                    }
                    break;
                case PostgreSqlParser.KW_PUBLICATION:
                    {
                    this.state = 5227;
                    this.match(PostgreSqlParser.KW_PUBLICATION);
                    }
                    break;
                case PostgreSqlParser.KW_SUBSCRIPTION:
                    {
                    this.state = 5228;
                    this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5231;
                this.colid();
                this.state = 5232;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5233;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5234;
                this.rolespec();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createpublicationstmt(): CreatepublicationstmtContext {
        let localContext = new CreatepublicationstmtContext(this.context, this.state);
        this.enterRule(localContext, 448, PostgreSqlParser.RULE_createpublicationstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5238;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5239;
            this.match(PostgreSqlParser.KW_PUBLICATION);
            this.state = 5240;
            this.colid();
            this.state = 5247;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 644, this.context) ) {
            case 1:
                {
                this.state = 5241;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 5242;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 5243;
                this.relation_expr_list();
                }
                break;
            case 2:
                {
                this.state = 5244;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 5245;
                this.match(PostgreSqlParser.KW_ALL);
                this.state = 5246;
                this.match(PostgreSqlParser.KW_TABLES);
                }
                break;
            }
            this.state = 5250;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 645, this.context) ) {
            case 1:
                {
                this.state = 5249;
                this.opt_definition();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterpublicationstmt(): AlterpublicationstmtContext {
        let localContext = new AlterpublicationstmtContext(this.context, this.state);
        this.enterRule(localContext, 450, PostgreSqlParser.RULE_alterpublicationstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5252;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5253;
            this.match(PostgreSqlParser.KW_PUBLICATION);
            this.state = 5254;
            this.colid();
            this.state = 5272;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 647, this.context) ) {
            case 1:
                {
                {
                this.state = 5255;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5256;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5257;
                this.rolespec();
                }
                }
                break;
            case 2:
                {
                {
                this.state = 5258;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 5259;
                this.definition();
                }
                }
                break;
            case 3:
                {
                {
                this.state = 5260;
                this.match(PostgreSqlParser.KW_RENAME);
                this.state = 5261;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5262;
                this.colid();
                }
                }
                break;
            case 4:
                {
                this.state = 5263;
                _la = this.tokenStream.LA(1);
                if(!(_la === 133 || _la === 191 || _la === 333)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5264;
                this.publication_relation_expr();
                this.state = 5269;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 5265;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 5266;
                    this.publication_relation_expr();
                    }
                    }
                    this.state = 5271;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createsubscriptionstmt(): CreatesubscriptionstmtContext {
        let localContext = new CreatesubscriptionstmtContext(this.context, this.state);
        this.enterRule(localContext, 452, PostgreSqlParser.RULE_createsubscriptionstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5274;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5275;
            this.match(PostgreSqlParser.KW_SUBSCRIPTION);
            this.state = 5276;
            this.colid();
            this.state = 5277;
            this.match(PostgreSqlParser.KW_CONNECTION);
            this.state = 5278;
            this.sconst();
            this.state = 5279;
            this.match(PostgreSqlParser.KW_PUBLICATION);
            {
            this.state = 5280;
            this.collabel();
            this.state = 5285;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5281;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5282;
                this.collabel();
                }
                }
                this.state = 5287;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 5289;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 649, this.context) ) {
            case 1:
                {
                this.state = 5288;
                this.opt_definition();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altersubscriptionstmt(): AltersubscriptionstmtContext {
        let localContext = new AltersubscriptionstmtContext(this.context, this.state);
        this.enterRule(localContext, 454, PostgreSqlParser.RULE_altersubscriptionstmt);
        let _la: number;
        try {
            this.state = 5347;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 653, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5291;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5292;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5293;
                this.colid();
                this.state = 5294;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 5295;
                this.definition();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5297;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5298;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5299;
                this.colid();
                this.state = 5300;
                this.match(PostgreSqlParser.KW_CONNECTION);
                this.state = 5301;
                this.sconst();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5303;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5304;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5305;
                this.colid();
                this.state = 5306;
                this.match(PostgreSqlParser.KW_REFRESH);
                this.state = 5307;
                this.match(PostgreSqlParser.KW_PUBLICATION);
                this.state = 5309;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 650, this.context) ) {
                case 1:
                    {
                    this.state = 5308;
                    this.opt_definition();
                    }
                    break;
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5311;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5312;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5313;
                this.colid();
                this.state = 5314;
                _la = this.tokenStream.LA(1);
                if(!(_la === 133 || _la === 191 || _la === 333)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5315;
                this.match(PostgreSqlParser.KW_PUBLICATION);
                {
                this.state = 5316;
                this.collabel();
                this.state = 5321;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 5317;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 5318;
                    this.collabel();
                    }
                    }
                    this.state = 5323;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                this.state = 5325;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 652, this.context) ) {
                case 1:
                    {
                    this.state = 5324;
                    this.opt_definition();
                    }
                    break;
                }
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5327;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5328;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5329;
                this.colid();
                this.state = 5330;
                _la = this.tokenStream.LA(1);
                if(!(_la === 186 || _la === 193)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5332;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5333;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5334;
                this.colid();
                this.state = 5335;
                this.match(PostgreSqlParser.KW_SKIP);
                this.state = 5336;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 5337;
                this.old_aggr_elem();
                this.state = 5338;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5340;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5341;
                this.match(PostgreSqlParser.KW_SUBSCRIPTION);
                this.state = 5342;
                this.colid();
                this.state = 5343;
                this.match(PostgreSqlParser.KW_OWNER);
                this.state = 5344;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5345;
                this.rolespec();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rulestmt(): RulestmtContext {
        let localContext = new RulestmtContext(this.context, this.state);
        this.enterRule(localContext, 456, PostgreSqlParser.RULE_rulestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5349;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5351;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 5350;
                this.opt_or_replace();
                }
            }

            this.state = 5353;
            this.match(PostgreSqlParser.KW_RULE);
            this.state = 5354;
            this.colid();
            this.state = 5355;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 5356;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 5357;
            _la = this.tokenStream.LA(1);
            if(!(_la === 88 || _la === 182 || _la === 241 || _la === 369)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5358;
            this.match(PostgreSqlParser.KW_TO);
            this.state = 5359;
            this.qualified_name();
            this.state = 5361;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 103) {
                {
                this.state = 5360;
                this.where_clause();
                }
            }

            this.state = 5363;
            this.match(PostgreSqlParser.KW_DO);
            this.state = 5365;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 137 || _la === 242) {
                {
                this.state = 5364;
                _la = this.tokenStream.LA(1);
                if(!(_la === 137 || _la === 242)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 5383;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 660, this.context) ) {
            case 1:
                {
                this.state = 5367;
                this.match(PostgreSqlParser.KW_NOTHING);
                }
                break;
            case 2:
                {
                this.state = 5368;
                this.ruleactionstmt();
                }
                break;
            case 3:
                {
                this.state = 5369;
                this.match(PostgreSqlParser.OPEN_PAREN);
                {
                this.state = 5371;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2 || ((((_la - 88)) & ~0x1F) === 0 && ((1 << (_la - 88)) & 131089) !== 0) || _la === 182 || _la === 241 || _la === 271 || _la === 369 || _la === 422) {
                    {
                    this.state = 5370;
                    this.ruleactionstmt();
                    }
                }

                this.state = 5379;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 7) {
                    {
                    {
                    this.state = 5373;
                    this.match(PostgreSqlParser.SEMI);
                    this.state = 5375;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 2 || ((((_la - 88)) & ~0x1F) === 0 && ((1 << (_la - 88)) & 131089) !== 0) || _la === 182 || _la === 241 || _la === 271 || _la === 369 || _la === 422) {
                        {
                        this.state = 5374;
                        this.ruleactionstmt();
                        }
                    }

                    }
                    }
                    this.state = 5381;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                this.state = 5382;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ruleactionstmt(): RuleactionstmtContext {
        let localContext = new RuleactionstmtContext(this.context, this.state);
        this.enterRule(localContext, 458, PostgreSqlParser.RULE_ruleactionstmt);
        try {
            this.state = 5390;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 661, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5385;
                this.selectstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5386;
                this.insertstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5387;
                this.updatestmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5388;
                this.deletestmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5389;
                this.notifystmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notifystmt(): NotifystmtContext {
        let localContext = new NotifystmtContext(this.context, this.state);
        this.enterRule(localContext, 460, PostgreSqlParser.RULE_notifystmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5392;
            this.match(PostgreSqlParser.KW_NOTIFY);
            this.state = 5393;
            this.colid();
            this.state = 5395;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6) {
                {
                this.state = 5394;
                this.notify_payload();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notify_payload(): Notify_payloadContext {
        let localContext = new Notify_payloadContext(this.context, this.state);
        this.enterRule(localContext, 462, PostgreSqlParser.RULE_notify_payload);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5397;
            this.match(PostgreSqlParser.COMMA);
            this.state = 5398;
            this.sconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listenstmt(): ListenstmtContext {
        let localContext = new ListenstmtContext(this.context, this.state);
        this.enterRule(localContext, 464, PostgreSqlParser.RULE_listenstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5400;
            this.match(PostgreSqlParser.KW_LISTEN);
            this.state = 5401;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unlistenstmt(): UnlistenstmtContext {
        let localContext = new UnlistenstmtContext(this.context, this.state);
        this.enterRule(localContext, 466, PostgreSqlParser.RULE_unlistenstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5403;
            this.match(PostgreSqlParser.KW_UNLISTEN);
            this.state = 5406;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 5404;
                this.colid();
                }
                break;
            case PostgreSqlParser.STAR:
                {
                this.state = 5405;
                this.match(PostgreSqlParser.STAR);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionstmt(): TransactionstmtContext {
        let localContext = new TransactionstmtContext(this.context, this.state);
        this.enterRule(localContext, 468, PostgreSqlParser.RULE_transactionstmt);
        let _la: number;
        try {
            this.state = 5453;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 673, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5408;
                this.match(PostgreSqlParser.KW_BEGIN);
                this.state = 5410;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 664, this.context) ) {
                case 1:
                    {
                    this.state = 5409;
                    this.opt_transaction();
                    }
                    break;
                }
                this.state = 5413;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 665, this.context) ) {
                case 1:
                    {
                    this.state = 5412;
                    this.transaction_mode_list();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5415;
                this.match(PostgreSqlParser.KW_START);
                this.state = 5416;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 5418;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 666, this.context) ) {
                case 1:
                    {
                    this.state = 5417;
                    this.transaction_mode_list();
                    }
                    break;
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5420;
                this.match(PostgreSqlParser.KW_SAVEPOINT);
                this.state = 5421;
                this.colid();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5422;
                this.match(PostgreSqlParser.KW_RELEASE);
                this.state = 5424;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 667, this.context) ) {
                case 1:
                    {
                    this.state = 5423;
                    this.match(PostgreSqlParser.KW_SAVEPOINT);
                    }
                    break;
                }
                this.state = 5426;
                this.colid();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5427;
                this.match(PostgreSqlParser.KW_PREPARE);
                this.state = 5428;
                this.match(PostgreSqlParser.KW_TRANSACTION);
                this.state = 5429;
                this.sconst();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5430;
                _la = this.tokenStream.LA(1);
                if(!(_la === 161 || _la === 319)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5431;
                this.match(PostgreSqlParser.KW_PREPARED);
                this.state = 5432;
                this.sconst();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5433;
                _la = this.tokenStream.LA(1);
                if(!(_la === 129 || _la === 161 || _la === 319 || _la === 454)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5435;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 668, this.context) ) {
                case 1:
                    {
                    this.state = 5434;
                    this.opt_transaction();
                    }
                    break;
                }
                this.state = 5442;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 33) {
                    {
                    this.state = 5437;
                    this.match(PostgreSqlParser.KW_AND);
                    this.state = 5439;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 269) {
                        {
                        this.state = 5438;
                        this.match(PostgreSqlParser.KW_NO);
                        }
                    }

                    this.state = 5441;
                    this.match(PostgreSqlParser.KW_CHAIN);
                    }
                }

                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5444;
                this.match(PostgreSqlParser.KW_ROLLBACK);
                this.state = 5446;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 356 || _la === 380) {
                    {
                    this.state = 5445;
                    this.opt_transaction();
                    }
                }

                this.state = 5448;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 5450;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 672, this.context) ) {
                case 1:
                    {
                    this.state = 5449;
                    this.match(PostgreSqlParser.KW_SAVEPOINT);
                    }
                    break;
                }
                this.state = 5452;
                this.colid();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_transaction(): Opt_transactionContext {
        let localContext = new Opt_transactionContext(this.context, this.state);
        this.enterRule(localContext, 470, PostgreSqlParser.RULE_opt_transaction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5455;
            _la = this.tokenStream.LA(1);
            if(!(_la === 356 || _la === 380)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transaction_mode_item(): Transaction_mode_itemContext {
        let localContext = new Transaction_mode_itemContext(this.context, this.state);
        this.enterRule(localContext, 472, PostgreSqlParser.RULE_transaction_mode_item);
        let _la: number;
        try {
            this.state = 5466;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ISOLATION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5457;
                this.match(PostgreSqlParser.KW_ISOLATION);
                this.state = 5458;
                this.match(PostgreSqlParser.KW_LEVEL);
                this.state = 5459;
                this.iso_level();
                }
                break;
            case PostgreSqlParser.KW_READ:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5460;
                this.match(PostgreSqlParser.KW_READ);
                this.state = 5461;
                _la = this.tokenStream.LA(1);
                if(!(_la === 81 || _la === 382)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSqlParser.KW_DEFERRABLE:
            case PostgreSqlParser.KW_NOT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5463;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 5462;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 5465;
                this.match(PostgreSqlParser.KW_DEFERRABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transaction_mode_list(): Transaction_mode_listContext {
        let localContext = new Transaction_mode_listContext(this.context, this.state);
        this.enterRule(localContext, 474, PostgreSqlParser.RULE_transaction_mode_list);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5468;
            this.transaction_mode_item();
            this.state = 5475;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 677, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 5470;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 6) {
                        {
                        this.state = 5469;
                        this.match(PostgreSqlParser.COMMA);
                        }
                    }

                    this.state = 5472;
                    this.transaction_mode_item();
                    }
                    }
                }
                this.state = 5477;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 677, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewstmt(): ViewstmtContext {
        let localContext = new ViewstmtContext(this.context, this.state);
        this.enterRule(localContext, 476, PostgreSqlParser.RULE_viewstmt);
        let _la: number;
        try {
            localContext = new CreateViewContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5478;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5481;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 82) {
                {
                this.state = 5479;
                this.match(PostgreSqlParser.KW_OR);
                this.state = 5480;
                this.match(PostgreSqlParser.KW_REPLACE);
                }
            }

            this.state = 5484;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 213 || _la === 254 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 32773) !== 0)) {
                {
                this.state = 5483;
                this.opttemp();
                }
            }

            this.state = 5501;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_VIEW:
                {
                this.state = 5486;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 5487;
                this.view_name_create();
                this.state = 5489;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 5488;
                    this.opt_column_list_create();
                    }
                }

                this.state = 5492;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 5491;
                    this.opt_reloptions();
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_RECURSIVE:
                {
                this.state = 5494;
                this.match(PostgreSqlParser.KW_RECURSIVE);
                this.state = 5495;
                this.match(PostgreSqlParser.KW_VIEW);
                this.state = 5496;
                this.view_name_create();
                this.state = 5497;
                this.opt_column_list();
                this.state = 5499;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 5498;
                    this.opt_reloptions();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 5503;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 5504;
            this.selectstmt();
            this.state = 5511;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 685, this.context) ) {
            case 1:
                {
                this.state = 5505;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 5507;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151 || _la === 254) {
                    {
                    this.state = 5506;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 151 || _la === 254)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 5509;
                this.match(PostgreSqlParser.KW_CHECK);
                this.state = 5510;
                this.match(PostgreSqlParser.KW_OPTION);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadstmt(): LoadstmtContext {
        let localContext = new LoadstmtContext(this.context, this.state);
        this.enterRule(localContext, 478, PostgreSqlParser.RULE_loadstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5513;
            this.match(PostgreSqlParser.KW_LOAD);
            this.state = 5514;
            this.sconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createdbstmt(): CreatedbstmtContext {
        let localContext = new CreatedbstmtContext(this.context, this.state);
        this.enterRule(localContext, 480, PostgreSqlParser.RULE_createdbstmt);
        try {
            let alternative: number;
            localContext = new CreateDatabaseContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5516;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5517;
            this.match(PostgreSqlParser.KW_DATABASE);
            this.state = 5518;
            this.database_name_create();
            this.state = 5520;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 686, this.context) ) {
            case 1:
                {
                this.state = 5519;
                this.match(PostgreSqlParser.KW_WITH);
                }
                break;
            }
            this.state = 5527;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 688, this.context) ) {
            case 1:
                {
                this.state = 5523;
                this.errorHandler.sync(this);
                alternative = 1;
                do {
                    switch (alternative) {
                    case 1:
                        {
                        {
                        this.state = 5522;
                        this.createdb_opt_item();
                        }
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 5525;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 687, this.context);
                } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createdb_opt_item(): Createdb_opt_itemContext {
        let localContext = new Createdb_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 482, PostgreSqlParser.RULE_createdb_opt_item);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5537;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 689, this.context) ) {
            case 1:
                {
                this.state = 5529;
                this.match(PostgreSqlParser.KW_CONNECTION);
                this.state = 5530;
                this.match(PostgreSqlParser.KW_LIMIT);
                }
                break;
            case 2:
                {
                this.state = 5531;
                this.match(PostgreSqlParser.KW_ENCODING);
                }
                break;
            case 3:
                {
                this.state = 5532;
                this.match(PostgreSqlParser.KW_LOCATION);
                }
                break;
            case 4:
                {
                this.state = 5533;
                this.match(PostgreSqlParser.KW_OWNER);
                }
                break;
            case 5:
                {
                this.state = 5534;
                this.match(PostgreSqlParser.KW_TABLESPACE);
                }
                break;
            case 6:
                {
                this.state = 5535;
                this.match(PostgreSqlParser.KW_TEMPLATE);
                }
                break;
            case 7:
                {
                this.state = 5536;
                this.identifier();
                }
                break;
            }
            this.state = 5540;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 5539;
                this.match(PostgreSqlParser.EQUAL);
                }
            }

            this.state = 5545;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 691, this.context) ) {
            case 1:
                {
                this.state = 5542;
                this.signediconst();
                }
                break;
            case 2:
                {
                this.state = 5543;
                this.opt_boolean_or_string();
                }
                break;
            case 3:
                {
                this.state = 5544;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterdatabasestmt(): AlterdatabasestmtContext {
        let localContext = new AlterdatabasestmtContext(this.context, this.state);
        this.enterRule(localContext, 484, PostgreSqlParser.RULE_alterdatabasestmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5547;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5548;
            this.match(PostgreSqlParser.KW_DATABASE);
            this.state = 5549;
            this.database_name();
            this.state = 5565;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 696, this.context) ) {
            case 1:
                {
                this.state = 5553;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 692, this.context) ) {
                case 1:
                    {
                    this.state = 5550;
                    this.match(PostgreSqlParser.KW_SET);
                    this.state = 5551;
                    this.match(PostgreSqlParser.KW_TABLESPACE);
                    this.state = 5552;
                    this.tablespace_name_create();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 5563;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 695, this.context) ) {
                case 1:
                    {
                    this.state = 5556;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 105) {
                        {
                        this.state = 5555;
                        this.match(PostgreSqlParser.KW_WITH);
                        }
                    }

                    this.state = 5559;
                    this.errorHandler.sync(this);
                    alternative = 1;
                    do {
                        switch (alternative) {
                        case 1:
                            {
                            {
                            this.state = 5558;
                            this.createdb_opt_item();
                            }
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        this.state = 5561;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 694, this.context);
                    } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterdatabasesetstmt(): AlterdatabasesetstmtContext {
        let localContext = new AlterdatabasesetstmtContext(this.context, this.state);
        this.enterRule(localContext, 486, PostgreSqlParser.RULE_alterdatabasesetstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5567;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5568;
            this.match(PostgreSqlParser.KW_DATABASE);
            this.state = 5569;
            this.database_name();
            this.state = 5571;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 697, this.context) ) {
            case 1:
                {
                this.state = 5570;
                this.setresetclause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altercollationstmt(): AltercollationstmtContext {
        let localContext = new AltercollationstmtContext(this.context, this.state);
        this.enterRule(localContext, 488, PostgreSqlParser.RULE_altercollationstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5573;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5574;
            this.match(PostgreSqlParser.KW_COLLATION);
            this.state = 5575;
            this.any_name();
            this.state = 5576;
            this.match(PostgreSqlParser.KW_REFRESH);
            this.state = 5577;
            this.match(PostgreSqlParser.KW_VERSION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altersystemstmt(): AltersystemstmtContext {
        let localContext = new AltersystemstmtContext(this.context, this.state);
        this.enterRule(localContext, 490, PostgreSqlParser.RULE_altersystemstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5579;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5580;
            this.match(PostgreSqlParser.KW_SYSTEM);
            this.state = 5581;
            _la = this.tokenStream.LA(1);
            if(!(_la === 313 || _la === 333)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5582;
            this.generic_set();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createdomainstmt(): CreatedomainstmtContext {
        let localContext = new CreatedomainstmtContext(this.context, this.state);
        this.enterRule(localContext, 492, PostgreSqlParser.RULE_createdomainstmt);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5584;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5585;
            this.match(PostgreSqlParser.KW_DOMAIN);
            this.state = 5586;
            this.any_name();
            this.state = 5588;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 5587;
                this.match(PostgreSqlParser.KW_AS);
                }
            }

            this.state = 5590;
            this.typename();
            this.state = 5594;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 699, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 5591;
                    this.colconstraint();
                    }
                    }
                }
                this.state = 5596;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 699, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterdomainstmt(): AlterdomainstmtContext {
        let localContext = new AlterdomainstmtContext(this.context, this.state);
        this.enterRule(localContext, 494, PostgreSqlParser.RULE_alterdomainstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5597;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5598;
            this.match(PostgreSqlParser.KW_DOMAIN);
            this.state = 5599;
            this.any_name();
            this.state = 5622;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 703, this.context) ) {
            case 1:
                {
                this.state = 5600;
                this.alter_column_default();
                }
                break;
            case 2:
                {
                this.state = 5601;
                _la = this.tokenStream.LA(1);
                if(!(_la === 191 || _la === 333)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5602;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 5603;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            case 3:
                {
                this.state = 5604;
                this.match(PostgreSqlParser.KW_ADD);
                this.state = 5607;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 45) {
                    {
                    this.state = 5605;
                    this.match(PostgreSqlParser.KW_CONSTRAINT);
                    this.state = 5606;
                    this.colid();
                    }
                }

                this.state = 5609;
                this.constraintelem();
                }
                break;
            case 4:
                {
                this.state = 5610;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 5611;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 5613;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 701, this.context) ) {
                case 1:
                    {
                    this.state = 5612;
                    this.opt_if_exists();
                    }
                    break;
                }
                this.state = 5615;
                this.colid();
                this.state = 5617;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 702, this.context) ) {
                case 1:
                    {
                    this.state = 5616;
                    this.opt_drop_behavior();
                    }
                    break;
                }
                }
                break;
            case 5:
                {
                this.state = 5619;
                this.match(PostgreSqlParser.KW_VALIDATE);
                this.state = 5620;
                this.match(PostgreSqlParser.KW_CONSTRAINT);
                this.state = 5621;
                this.colid();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altertsdictionarystmt(): AltertsdictionarystmtContext {
        let localContext = new AltertsdictionarystmtContext(this.context, this.state);
        this.enterRule(localContext, 496, PostgreSqlParser.RULE_altertsdictionarystmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5624;
            this.match(PostgreSqlParser.KW_ALTER);
            this.state = 5625;
            this.match(PostgreSqlParser.KW_TEXT);
            this.state = 5626;
            this.match(PostgreSqlParser.KW_SEARCH);
            this.state = 5627;
            this.match(PostgreSqlParser.KW_DICTIONARY);
            this.state = 5628;
            this.any_name();
            this.state = 5629;
            this.definition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altertsconfigurationstmt(): AltertsconfigurationstmtContext {
        let localContext = new AltertsconfigurationstmtContext(this.context, this.state);
        this.enterRule(localContext, 498, PostgreSqlParser.RULE_altertsconfigurationstmt);
        let _la: number;
        try {
            this.state = 5672;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 706, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5631;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5632;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 5633;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 5634;
                this.match(PostgreSqlParser.KW_CONFIGURATION);
                this.state = 5635;
                this.any_name();
                this.state = 5636;
                _la = this.tokenStream.LA(1);
                if(!(_la === 133 || _la === 138)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5637;
                this.match(PostgreSqlParser.KW_MAPPING);
                this.state = 5638;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 5639;
                this.name_list();
                this.state = 5640;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 5641;
                this.any_name_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5643;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5644;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 5645;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 5646;
                this.match(PostgreSqlParser.KW_CONFIGURATION);
                this.state = 5647;
                this.any_name();
                this.state = 5648;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5649;
                this.match(PostgreSqlParser.KW_MAPPING);
                this.state = 5652;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 5650;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 5651;
                    this.name_list();
                    }
                }

                this.state = 5654;
                this.match(PostgreSqlParser.KW_REPLACE);
                this.state = 5655;
                this.any_name();
                this.state = 5656;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 5657;
                this.any_name();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5659;
                this.match(PostgreSqlParser.KW_ALTER);
                this.state = 5660;
                this.match(PostgreSqlParser.KW_TEXT);
                this.state = 5661;
                this.match(PostgreSqlParser.KW_SEARCH);
                this.state = 5662;
                this.match(PostgreSqlParser.KW_CONFIGURATION);
                this.state = 5663;
                this.any_name();
                this.state = 5664;
                this.match(PostgreSqlParser.KW_DROP);
                this.state = 5665;
                this.match(PostgreSqlParser.KW_MAPPING);
                this.state = 5667;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 220) {
                    {
                    this.state = 5666;
                    this.opt_if_exists();
                    }
                }

                this.state = 5669;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 5670;
                this.name_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createconversionstmt(): CreateconversionstmtContext {
        let localContext = new CreateconversionstmtContext(this.context, this.state);
        this.enterRule(localContext, 500, PostgreSqlParser.RULE_createconversionstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5674;
            this.match(PostgreSqlParser.KW_CREATE);
            this.state = 5676;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 5675;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
            }

            this.state = 5678;
            this.match(PostgreSqlParser.KW_CONVERSION);
            this.state = 5679;
            this.any_name();
            this.state = 5680;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 5681;
            this.sconst();
            this.state = 5682;
            this.match(PostgreSqlParser.KW_TO);
            this.state = 5683;
            this.sconst();
            this.state = 5684;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 5685;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public clusterstmt(): ClusterstmtContext {
        let localContext = new ClusterstmtContext(this.context, this.state);
        this.enterRule(localContext, 502, PostgreSqlParser.RULE_clusterstmt);
        let _la: number;
        try {
            this.state = 5712;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 713, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5687;
                this.match(PostgreSqlParser.KW_CLUSTER);
                this.state = 5689;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 5688;
                    this.opt_verbose();
                    }
                }

                this.state = 5695;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 710, this.context) ) {
                case 1:
                    {
                    this.state = 5691;
                    this.table_name();
                    this.state = 5693;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 100) {
                        {
                        this.state = 5692;
                        this.table_access_method_clause();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5697;
                this.match(PostgreSqlParser.KW_CLUSTER);
                this.state = 5698;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 5699;
                this.opt_verbose();
                this.state = 5704;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 5700;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 5701;
                    this.opt_verbose();
                    }
                    }
                    this.state = 5706;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5707;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 5708;
                this.table_name();
                this.state = 5710;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 5709;
                    this.table_access_method_clause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vacuumstmt(): VacuumstmtContext {
        let localContext = new VacuumstmtContext(this.context, this.state);
        this.enterRule(localContext, 504, PostgreSqlParser.RULE_vacuumstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5714;
            this.match(PostgreSqlParser.KW_VACUUM);
            this.state = 5730;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 719, this.context) ) {
            case 1:
                {
                {
                this.state = 5716;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 113) {
                    {
                    this.state = 5715;
                    this.match(PostgreSqlParser.KW_FULL);
                    }
                }

                this.state = 5719;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 112) {
                    {
                    this.state = 5718;
                    this.match(PostgreSqlParser.KW_FREEZE);
                    }
                }

                this.state = 5722;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 5721;
                    this.opt_verbose();
                    }
                }

                this.state = 5725;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 717, this.context) ) {
                case 1:
                    {
                    this.state = 5724;
                    this.analyze_keyword();
                    }
                    break;
                }
                }
                }
                break;
            case 2:
                {
                this.state = 5728;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 718, this.context) ) {
                case 1:
                    {
                    this.state = 5727;
                    this.explain_option_list();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 5733;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 720, this.context) ) {
            case 1:
                {
                this.state = 5732;
                this.vacuum_relation_list();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyzestmt(): AnalyzestmtContext {
        let localContext = new AnalyzestmtContext(this.context, this.state);
        this.enterRule(localContext, 506, PostgreSqlParser.RULE_analyzestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5735;
            this.analyze_keyword();
            this.state = 5750;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 723, this.context) ) {
            case 1:
                {
                this.state = 5737;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 5736;
                    this.opt_verbose();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 5739;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 5740;
                this.analyze_option_elem();
                this.state = 5745;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 5741;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 5742;
                    this.analyze_option_elem();
                    }
                    }
                    this.state = 5747;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 5748;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            this.state = 5753;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 724, this.context) ) {
            case 1:
                {
                this.state = 5752;
                this.vacuum_relation_list();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyze_keyword(): Analyze_keywordContext {
        let localContext = new Analyze_keywordContext(this.context, this.state);
        this.enterRule(localContext, 508, PostgreSqlParser.RULE_analyze_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5755;
            _la = this.tokenStream.LA(1);
            if(!(_la === 31 || _la === 32)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vac_analyze_option_elem(): Vac_analyze_option_elemContext {
        let localContext = new Vac_analyze_option_elemContext(this.context, this.state);
        this.enterRule(localContext, 510, PostgreSqlParser.RULE_vac_analyze_option_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5759;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 5757;
                this.nonreservedword();
                }
                break;
            case PostgreSqlParser.KW_ANALYSE:
            case PostgreSqlParser.KW_ANALYZE:
                {
                this.state = 5758;
                this.analyze_keyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 5763;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_ON:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 5761;
                this.opt_boolean_or_string();
                }
                break;
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
                {
                this.state = 5762;
                this.numericonly();
                }
                break;
            case PostgreSqlParser.CLOSE_PAREN:
            case PostgreSqlParser.COMMA:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyze_option_elem(): Analyze_option_elemContext {
        let localContext = new Analyze_option_elemContext(this.context, this.state);
        this.enterRule(localContext, 512, PostgreSqlParser.RULE_analyze_option_elem);
        let _la: number;
        try {
            this.state = 5774;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_SKIP_LOCKED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5765;
                _la = this.tokenStream.LA(1);
                if(!(_la === 128 || _la === 547)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5767;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 60 || _la === 96) {
                    {
                    this.state = 5766;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 60 || _la === 96)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5769;
                this.match(PostgreSqlParser.KW_BUFFER_USAGE_LIMIT);
                this.state = 5772;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.PLUS:
                case PostgreSqlParser.MINUS:
                case PostgreSqlParser.Integral:
                case PostgreSqlParser.Numeric:
                    {
                    this.state = 5770;
                    this.numericonly();
                    }
                    break;
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 5771;
                    this.sconst();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_verbose(): Opt_verboseContext {
        let localContext = new Opt_verboseContext(this.context, this.state);
        this.enterRule(localContext, 514, PostgreSqlParser.RULE_opt_verbose);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5776;
            this.match(PostgreSqlParser.KW_VERBOSE);
            this.state = 5778;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 60 || _la === 96) {
                {
                this.state = 5777;
                _la = this.tokenStream.LA(1);
                if(!(_la === 60 || _la === 96)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vacuum_relation(): Vacuum_relationContext {
        let localContext = new Vacuum_relationContext(this.context, this.state);
        this.enterRule(localContext, 516, PostgreSqlParser.RULE_vacuum_relation);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5780;
            this.table_name();
            this.state = 5782;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 731, this.context) ) {
            case 1:
                {
                this.state = 5781;
                this.opt_column_list();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vacuum_relation_list(): Vacuum_relation_listContext {
        let localContext = new Vacuum_relation_listContext(this.context, this.state);
        this.enterRule(localContext, 518, PostgreSqlParser.RULE_vacuum_relation_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5784;
            this.vacuum_relation();
            this.state = 5789;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5785;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5786;
                this.vacuum_relation();
                }
                }
                this.state = 5791;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainstmt(): ExplainstmtContext {
        let localContext = new ExplainstmtContext(this.context, this.state);
        this.enterRule(localContext, 520, PostgreSqlParser.RULE_explainstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5792;
            this.match(PostgreSqlParser.KW_EXPLAIN);
            this.state = 5803;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 736, this.context) ) {
            case 1:
                {
                this.state = 5793;
                this.explain_option_list();
                }
                break;
            case 2:
                {
                this.state = 5795;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 128) {
                    {
                    this.state = 5794;
                    this.match(PostgreSqlParser.KW_VERBOSE);
                    }
                }

                }
                break;
            case 3:
                {
                this.state = 5801;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 31 || _la === 32) {
                    {
                    this.state = 5797;
                    this.analyze_keyword();
                    this.state = 5799;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 128) {
                        {
                        this.state = 5798;
                        this.opt_verbose();
                        }
                    }

                    }
                }

                }
                break;
            }
            this.state = 5805;
            this.explainablestmt();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainablestmt(): ExplainablestmtContext {
        let localContext = new ExplainablestmtContext(this.context, this.state);
        this.enterRule(localContext, 522, PostgreSqlParser.RULE_explainablestmt);
        try {
            this.state = 5816;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 737, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5807;
                this.selectstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5808;
                this.insertstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5809;
                this.updatestmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5810;
                this.deletestmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5811;
                this.declarecursorstmt();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5812;
                this.createasstmt();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5813;
                this.creatematviewstmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5814;
                this.refreshmatviewstmt();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 5815;
                this.executestmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explain_option_list(): Explain_option_listContext {
        let localContext = new Explain_option_listContext(this.context, this.state);
        this.enterRule(localContext, 524, PostgreSqlParser.RULE_explain_option_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5818;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 5819;
            this.vac_analyze_option_elem();
            this.state = 5824;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5820;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5821;
                this.vac_analyze_option_elem();
                }
                }
                this.state = 5826;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 5827;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public preparestmt(): PreparestmtContext {
        let localContext = new PreparestmtContext(this.context, this.state);
        this.enterRule(localContext, 526, PostgreSqlParser.RULE_preparestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5829;
            this.match(PostgreSqlParser.KW_PREPARE);
            this.state = 5830;
            this.colid();
            this.state = 5832;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 5831;
                this.prep_type_clause();
                }
            }

            this.state = 5834;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 5835;
            this.preparablestmt();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public prep_type_clause(): Prep_type_clauseContext {
        let localContext = new Prep_type_clauseContext(this.context, this.state);
        this.enterRule(localContext, 528, PostgreSqlParser.RULE_prep_type_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5837;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 5838;
            this.typename();
            this.state = 5843;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5839;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5840;
                this.typename();
                }
                }
                this.state = 5845;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 5846;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public preparablestmt(): PreparablestmtContext {
        let localContext = new PreparablestmtContext(this.context, this.state);
        this.enterRule(localContext, 530, PostgreSqlParser.RULE_preparablestmt);
        try {
            this.state = 5852;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 741, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5848;
                this.selectstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5849;
                this.insertstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5850;
                this.updatestmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5851;
                this.deletestmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public executestmt(): ExecutestmtContext {
        let localContext = new ExecutestmtContext(this.context, this.state);
        this.enterRule(localContext, 532, PostgreSqlParser.RULE_executestmt);
        let _la: number;
        try {
            this.state = 5877;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_EXECUTE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5854;
                this.match(PostgreSqlParser.KW_EXECUTE);
                this.state = 5855;
                this.colid();
                this.state = 5857;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 742, this.context) ) {
                case 1:
                    {
                    this.state = 5856;
                    this.execute_param_clause();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_CREATE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5859;
                this.match(PostgreSqlParser.KW_CREATE);
                this.state = 5861;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 213 || _la === 254 || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 32773) !== 0)) {
                    {
                    this.state = 5860;
                    this.opttemp();
                    }
                }

                this.state = 5863;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 5865;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 744, this.context) ) {
                case 1:
                    {
                    this.state = 5864;
                    this.opt_if_not_exists();
                    }
                    break;
                }
                this.state = 5867;
                this.create_as_target();
                this.state = 5868;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 5869;
                this.match(PostgreSqlParser.KW_EXECUTE);
                this.state = 5870;
                this.colid();
                this.state = 5872;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 745, this.context) ) {
                case 1:
                    {
                    this.state = 5871;
                    this.execute_param_clause();
                    }
                    break;
                }
                this.state = 5875;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 746, this.context) ) {
                case 1:
                    {
                    this.state = 5874;
                    this.opt_with_data();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public execute_param_clause(): Execute_param_clauseContext {
        let localContext = new Execute_param_clauseContext(this.context, this.state);
        this.enterRule(localContext, 534, PostgreSqlParser.RULE_execute_param_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5879;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 5880;
            this.expr_list();
            this.state = 5881;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deallocatestmt(): DeallocatestmtContext {
        let localContext = new DeallocatestmtContext(this.context, this.state);
        this.enterRule(localContext, 536, PostgreSqlParser.RULE_deallocatestmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5883;
            this.match(PostgreSqlParser.KW_DEALLOCATE);
            this.state = 5885;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 748, this.context) ) {
            case 1:
                {
                this.state = 5884;
                this.match(PostgreSqlParser.KW_PREPARE);
                }
                break;
            }
            this.state = 5889;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 5887;
                this.colid();
                }
                break;
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 5888;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertstmt(): InsertstmtContext {
        let localContext = new InsertstmtContext(this.context, this.state);
        this.enterRule(localContext, 538, PostgreSqlParser.RULE_insertstmt);
        let _la: number;
        try {
            localContext = new InsertStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5892;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 5891;
                this.with_clause();
                }
            }

            this.state = 5894;
            this.match(PostgreSqlParser.KW_INSERT);
            this.state = 5895;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 5896;
            this.table_name();
            this.state = 5899;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 5897;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 5898;
                this.colid();
                }
            }

            this.state = 5901;
            this.insert_rest();
            this.state = 5923;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 5902;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 5903;
                this.match(PostgreSqlParser.KW_CONFLICT);
                this.state = 5911;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 5904;
                    this.index_params();
                    this.state = 5906;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 103) {
                        {
                        this.state = 5905;
                        this.where_clause();
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.KW_ON:
                    {
                    this.state = 5908;
                    this.match(PostgreSqlParser.KW_ON);
                    this.state = 5909;
                    this.match(PostgreSqlParser.KW_CONSTRAINT);
                    this.state = 5910;
                    this.colid();
                    }
                    break;
                case PostgreSqlParser.KW_DO:
                    break;
                default:
                    break;
                }
                this.state = 5913;
                this.match(PostgreSqlParser.KW_DO);
                this.state = 5921;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_UPDATE:
                    {
                    this.state = 5914;
                    this.match(PostgreSqlParser.KW_UPDATE);
                    this.state = 5915;
                    this.match(PostgreSqlParser.KW_SET);
                    this.state = 5916;
                    this.set_clause_list();
                    this.state = 5918;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 103) {
                        {
                        this.state = 5917;
                        this.where_clause();
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.KW_NOTHING:
                    {
                    this.state = 5920;
                    this.match(PostgreSqlParser.KW_NOTHING);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            this.state = 5926;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 5925;
                this.returning_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insert_rest(): Insert_restContext {
        let localContext = new Insert_restContext(this.context, this.state);
        this.enterRule(localContext, 540, PostgreSqlParser.RULE_insert_rest);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5932;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 758, this.context) ) {
            case 1:
                {
                this.state = 5928;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 5929;
                this.insert_column_list();
                this.state = 5930;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            this.state = 5937;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 463) {
                {
                this.state = 5934;
                this.match(PostgreSqlParser.KW_OVERRIDING);
                this.state = 5935;
                _la = this.tokenStream.LA(1);
                if(!(_la === 99 || _la === 349)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5936;
                this.match(PostgreSqlParser.KW_VALUE);
                }
            }

            this.state = 5941;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 760, this.context) ) {
            case 1:
                {
                this.state = 5939;
                this.default_values_or_values();
                }
                break;
            case 2:
                {
                this.state = 5940;
                this.selectstmt();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insert_column_list(): Insert_column_listContext {
        let localContext = new Insert_column_listContext(this.context, this.state);
        this.enterRule(localContext, 542, PostgreSqlParser.RULE_insert_column_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5943;
            this.insert_column_item();
            this.state = 5948;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5944;
                this.match(PostgreSqlParser.COMMA);
                this.state = 5945;
                this.insert_column_item();
                }
                }
                this.state = 5950;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insert_column_item(): Insert_column_itemContext {
        let localContext = new Insert_column_itemContext(this.context, this.state);
        this.enterRule(localContext, 544, PostgreSqlParser.RULE_insert_column_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5951;
            this.column_name();
            this.state = 5952;
            this.opt_indirection();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returning_clause(): Returning_clauseContext {
        let localContext = new Returning_clauseContext(this.context, this.state);
        this.enterRule(localContext, 546, PostgreSqlParser.RULE_returning_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5954;
            this.match(PostgreSqlParser.KW_RETURNING);
            this.state = 5955;
            this.target_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deletestmt(): DeletestmtContext {
        let localContext = new DeletestmtContext(this.context, this.state);
        this.enterRule(localContext, 548, PostgreSqlParser.RULE_deletestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5958;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 5957;
                this.with_clause();
                }
            }

            this.state = 5960;
            this.match(PostgreSqlParser.KW_DELETE);
            this.state = 5961;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 5962;
            this.relation_expr_opt_alias();
            this.state = 5965;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 5963;
                this.match(PostgreSqlParser.KW_USING);
                this.state = 5964;
                this.from_list();
                }
            }

            this.state = 5968;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 103) {
                {
                this.state = 5967;
                this.where_or_current_clause();
                }
            }

            this.state = 5971;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 5970;
                this.returning_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockstmt(): LockstmtContext {
        let localContext = new LockstmtContext(this.context, this.state);
        this.enterRule(localContext, 550, PostgreSqlParser.RULE_lockstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5973;
            this.match(PostgreSqlParser.KW_LOCK);
            this.state = 5975;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 92) {
                {
                this.state = 5974;
                this.match(PostgreSqlParser.KW_TABLE);
                }
            }

            this.state = 5977;
            this.relation_expr_list();
            this.state = 5992;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 68) {
                {
                this.state = 5978;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 5989;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ROW:
                    {
                    this.state = 5979;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 131 || _la === 414)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5980;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 201 || _la === 334)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                case PostgreSqlParser.KW_SHARE:
                    {
                    this.state = 5981;
                    this.match(PostgreSqlParser.KW_SHARE);
                    this.state = 5986;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_UPDATE:
                        {
                        this.state = 5982;
                        this.match(PostgreSqlParser.KW_UPDATE);
                        this.state = 5983;
                        this.match(PostgreSqlParser.KW_EXCLUSIVE);
                        }
                        break;
                    case PostgreSqlParser.KW_ROW:
                        {
                        this.state = 5984;
                        this.match(PostgreSqlParser.KW_ROW);
                        this.state = 5985;
                        this.match(PostgreSqlParser.KW_EXCLUSIVE);
                        }
                        break;
                    case PostgreSqlParser.KW_MODE:
                        break;
                    default:
                        break;
                    }
                    }
                    break;
                case PostgreSqlParser.KW_EXCLUSIVE:
                    {
                    this.state = 5988;
                    this.match(PostgreSqlParser.KW_EXCLUSIVE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 5991;
                this.match(PostgreSqlParser.KW_MODE);
                }
            }

            this.state = 5995;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 770, this.context) ) {
            case 1:
                {
                this.state = 5994;
                this.match(PostgreSqlParser.KW_NOWAIT);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updatestmt(): UpdatestmtContext {
        let localContext = new UpdatestmtContext(this.context, this.state);
        this.enterRule(localContext, 552, PostgreSqlParser.RULE_updatestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5998;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 5997;
                this.with_clause();
                }
            }

            this.state = 6000;
            this.match(PostgreSqlParser.KW_UPDATE);
            this.state = 6001;
            this.relation_expr_opt_alias();
            this.state = 6002;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 6003;
            this.set_clause_list();
            this.state = 6005;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 64) {
                {
                this.state = 6004;
                this.from_clause();
                }
            }

            this.state = 6008;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 103) {
                {
                this.state = 6007;
                this.where_or_current_clause();
                }
            }

            this.state = 6011;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 87) {
                {
                this.state = 6010;
                this.returning_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_clause_list(): Set_clause_listContext {
        let localContext = new Set_clause_listContext(this.context, this.state);
        this.enterRule(localContext, 554, PostgreSqlParser.RULE_set_clause_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6013;
            this.set_clause();
            this.state = 6018;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6014;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6015;
                this.set_clause();
                }
                }
                this.state = 6020;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_clause(): Set_clauseContext {
        let localContext = new Set_clauseContext(this.context, this.state);
        this.enterRule(localContext, 556, PostgreSqlParser.RULE_set_clause);
        try {
            this.state = 6039;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 778, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6021;
                this.insert_column_item();
                this.state = 6022;
                this.match(PostgreSqlParser.EQUAL);
                this.state = 6023;
                this.expression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6025;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6026;
                this.insert_column_list();
                this.state = 6027;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 6028;
                this.match(PostgreSqlParser.EQUAL);
                this.state = 6037;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 777, this.context) ) {
                case 1:
                    {
                    this.state = 6030;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 776, this.context) ) {
                    case 1:
                        {
                        this.state = 6029;
                        this.match(PostgreSqlParser.KW_ROW);
                        }
                        break;
                    }
                    this.state = 6032;
                    this.expression();
                    }
                    break;
                case 2:
                    {
                    this.state = 6033;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 6034;
                    this.select_clause();
                    this.state = 6035;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public declarecursorstmt(): DeclarecursorstmtContext {
        let localContext = new DeclarecursorstmtContext(this.context, this.state);
        this.enterRule(localContext, 558, PostgreSqlParser.RULE_declarecursorstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6041;
            this.match(PostgreSqlParser.KW_DECLARE);
            this.state = 6042;
            this.colid();
            {
            this.state = 6051;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 107 || _la === 240 || _la === 269 || _la === 324) {
                {
                this.state = 6049;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_SCROLL:
                    {
                    {
                    this.state = 6044;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 269) {
                        {
                        this.state = 6043;
                        this.match(PostgreSqlParser.KW_NO);
                        }
                    }

                    this.state = 6046;
                    this.match(PostgreSqlParser.KW_SCROLL);
                    }
                    }
                    break;
                case PostgreSqlParser.KW_BINARY:
                    {
                    this.state = 6047;
                    this.match(PostgreSqlParser.KW_BINARY);
                    }
                    break;
                case PostgreSqlParser.KW_INSENSITIVE:
                    {
                    this.state = 6048;
                    this.match(PostgreSqlParser.KW_INSENSITIVE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                this.state = 6053;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 6054;
            this.match(PostgreSqlParser.KW_CURSOR);
            this.state = 6057;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105 || _la === 379) {
                {
                this.state = 6055;
                _la = this.tokenStream.LA(1);
                if(!(_la === 105 || _la === 379)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6056;
                this.match(PostgreSqlParser.KW_HOLD);
                }
            }

            this.state = 6059;
            this.match(PostgreSqlParser.KW_FOR);
            this.state = 6060;
            this.selectstmt();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectstmt(): SelectstmtContext {
        let localContext = new SelectstmtContext(this.context, this.state);
        this.enterRule(localContext, 560, PostgreSqlParser.RULE_selectstmt);
        try {
            this.state = 6064;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 783, this.context) ) {
            case 1:
                localContext = new SelectStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6062;
                this.select_no_parens();
                }
                break;
            case 2:
                localContext = new SelectStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6063;
                this.select_with_parens();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_with_parens(): Select_with_parensContext {
        let localContext = new Select_with_parensContext(this.context, this.state);
        this.enterRule(localContext, 562, PostgreSqlParser.RULE_select_with_parens);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6066;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 6069;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 784, this.context) ) {
            case 1:
                {
                this.state = 6067;
                this.select_no_parens();
                }
                break;
            case 2:
                {
                this.state = 6068;
                this.select_with_parens();
                }
                break;
            }
            this.state = 6071;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_no_parens(): Select_no_parensContext {
        let localContext = new Select_no_parensContext(this.context, this.state);
        this.enterRule(localContext, 564, PostgreSqlParser.RULE_select_no_parens);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6074;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 6073;
                this.with_clause();
                }
            }

            this.state = 6076;
            this.select_clause();
            this.state = 6078;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 83) {
                {
                this.state = 6077;
                this.sort_clause();
                }
            }

            this.state = 6088;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 789, this.context) ) {
            case 1:
                {
                this.state = 6080;
                this.for_locking_clause();
                this.state = 6082;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 787, this.context) ) {
                case 1:
                    {
                    this.state = 6081;
                    this.select_limit();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 6084;
                this.select_limit();
                this.state = 6086;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 6085;
                    this.for_locking_clause();
                    }
                }

                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_clause(): Select_clauseContext {
        let localContext = new Select_clauseContext(this.context, this.state);
        this.enterRule(localContext, 566, PostgreSqlParser.RULE_select_clause);
        try {
            this.state = 6092;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 790, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6090;
                this.simple_select();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6091;
                this.select_with_parens();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simple_select(): Simple_selectContext {
        let localContext = new Simple_selectContext(this.context, this.state);
        this.enterRule(localContext, 568, PostgreSqlParser.RULE_simple_select);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6116;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SELECT:
                {
                this.state = 6094;
                this.match(PostgreSqlParser.KW_SELECT);
                this.state = 6104;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 794, this.context) ) {
                case 1:
                    {
                    this.state = 6096;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 791, this.context) ) {
                    case 1:
                        {
                        this.state = 6095;
                        this.match(PostgreSqlParser.KW_ALL);
                        }
                        break;
                    }
                    this.state = 6099;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 792, this.context) ) {
                    case 1:
                        {
                        this.state = 6098;
                        this.into_clause();
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 6102;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 793, this.context) ) {
                    case 1:
                        {
                        this.state = 6101;
                        this.distinct_clause();
                        }
                        break;
                    }
                    }
                    break;
                }
                this.state = 6106;
                this.sql_expression();
                }
                break;
            case PostgreSqlParser.KW_VALUES:
                {
                this.state = 6107;
                this.values_clause();
                }
                break;
            case PostgreSqlParser.KW_TABLE:
                {
                this.state = 6108;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 6109;
                this.relation_expr();
                }
                break;
            case PostgreSqlParser.OPEN_PAREN:
                {
                this.state = 6110;
                this.select_with_parens();
                this.state = 6111;
                this.set_operator_with_all_or_distinct();
                this.state = 6114;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 795, this.context) ) {
                case 1:
                    {
                    this.state = 6112;
                    this.simple_select();
                    }
                    break;
                case 2:
                    {
                    this.state = 6113;
                    this.select_with_parens();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 6125;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 798, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 6118;
                    this.set_operator_with_all_or_distinct();
                    this.state = 6121;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 797, this.context) ) {
                    case 1:
                        {
                        this.state = 6119;
                        this.simple_select();
                        }
                        break;
                    case 2:
                        {
                        this.state = 6120;
                        this.select_with_parens();
                        }
                        break;
                    }
                    }
                    }
                }
                this.state = 6127;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 798, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_operator_with_all_or_distinct(): Set_operator_with_all_or_distinctContext {
        let localContext = new Set_operator_with_all_or_distinctContext(this.context, this.state);
        this.enterRule(localContext, 570, PostgreSqlParser.RULE_set_operator_with_all_or_distinct);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6128;
            _la = this.tokenStream.LA(1);
            if(!(_la === 59 || _la === 70 || _la === 97)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6130;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30 || _la === 56) {
                {
                this.state = 6129;
                _la = this.tokenStream.LA(1);
                if(!(_la === 30 || _la === 56)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_clause(): With_clauseContext {
        let localContext = new With_clauseContext(this.context, this.state);
        this.enterRule(localContext, 572, PostgreSqlParser.RULE_with_clause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6132;
            this.match(PostgreSqlParser.KW_WITH);
            this.state = 6134;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 800, this.context) ) {
            case 1:
                {
                this.state = 6133;
                this.match(PostgreSqlParser.KW_RECURSIVE);
                }
                break;
            }
            {
            this.state = 6136;
            this.common_table_expr();
            this.state = 6141;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 801, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 6137;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6138;
                    this.common_table_expr();
                    }
                    }
                }
                this.state = 6143;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 801, this.context);
            }
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public common_table_expr(): Common_table_exprContext {
        let localContext = new Common_table_exprContext(this.context, this.state);
        this.enterRule(localContext, 574, PostgreSqlParser.RULE_common_table_expr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6144;
            this.colid();
            this.state = 6146;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 6145;
                this.opt_column_list();
                }
            }

            this.state = 6148;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 6153;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 77 || _la === 259) {
                {
                this.state = 6150;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6149;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6152;
                this.match(PostgreSqlParser.KW_MATERIALIZED);
                }
            }

            this.state = 6155;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 6156;
            this.preparablestmt();
            this.state = 6157;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            this.state = 6159;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 805, this.context) ) {
            case 1:
                {
                this.state = 6158;
                this.search_cluase();
                }
                break;
            }
            this.state = 6162;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 806, this.context) ) {
            case 1:
                {
                this.state = 6161;
                this.cycle_cluase();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public search_cluase(): Search_cluaseContext {
        let localContext = new Search_cluaseContext(this.context, this.state);
        this.enterRule(localContext, 576, PostgreSqlParser.RULE_search_cluase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6164;
            this.match(PostgreSqlParser.KW_SEARCH);
            this.state = 6165;
            _la = this.tokenStream.LA(1);
            if(!(_la === 527 || _la === 528)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6166;
            this.match(PostgreSqlParser.KW_FIRST);
            this.state = 6167;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 6168;
            this.column_list();
            this.state = 6169;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 6170;
            this.column_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cycle_cluase(): Cycle_cluaseContext {
        let localContext = new Cycle_cluaseContext(this.context, this.state);
        this.enterRule(localContext, 578, PostgreSqlParser.RULE_cycle_cluase);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6172;
            this.match(PostgreSqlParser.KW_CYCLE);
            this.state = 6173;
            this.column_list();
            this.state = 6174;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 6175;
            this.column_name();
            this.state = 6181;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 94) {
                {
                this.state = 6176;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 6177;
                this.colid();
                this.state = 6178;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 6179;
                this.colid();
                }
            }

            this.state = 6183;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 6184;
            this.column_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public into_clause(): Into_clauseContext {
        let localContext = new Into_clauseContext(this.context, this.state);
        this.enterRule(localContext, 580, PostgreSqlParser.RULE_into_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6186;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 6192;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 809, this.context) ) {
            case 1:
                {
                this.state = 6188;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 808, this.context) ) {
                case 1:
                    {
                    this.state = 6187;
                    this.match(PostgreSqlParser.KW_STRICT);
                    }
                    break;
                }
                this.state = 6190;
                this.opttempTableName();
                }
                break;
            case 2:
                {
                this.state = 6191;
                this.expr_list();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opttempTableName(): OpttempTableNameContext {
        let localContext = new OpttempTableNameContext(this.context, this.state);
        this.enterRule(localContext, 582, PostgreSqlParser.RULE_opttempTableName);
        let _la: number;
        try {
            this.state = 6209;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 814, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6195;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 213 || _la === 254) {
                    {
                    this.state = 6194;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 213 || _la === 254)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 6197;
                _la = this.tokenStream.LA(1);
                if(!(_la === 352 || _la === 354)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6199;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 92) {
                    {
                    this.state = 6198;
                    this.match(PostgreSqlParser.KW_TABLE);
                    }
                }

                this.state = 6201;
                this.table_name_create();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6203;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 812, this.context) ) {
                case 1:
                    {
                    this.state = 6202;
                    this.match(PostgreSqlParser.KW_UNLOGGED);
                    }
                    break;
                }
                this.state = 6206;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 92) {
                    {
                    this.state = 6205;
                    this.match(PostgreSqlParser.KW_TABLE);
                    }
                }

                this.state = 6208;
                this.table_name_create();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public distinct_clause(): Distinct_clauseContext {
        let localContext = new Distinct_clauseContext(this.context, this.state);
        this.enterRule(localContext, 584, PostgreSqlParser.RULE_distinct_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6211;
            this.match(PostgreSqlParser.KW_DISTINCT);
            this.state = 6214;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 815, this.context) ) {
            case 1:
                {
                this.state = 6212;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 6213;
                this.execute_param_clause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sort_clause(): Sort_clauseContext {
        let localContext = new Sort_clauseContext(this.context, this.state);
        this.enterRule(localContext, 586, PostgreSqlParser.RULE_sort_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6216;
            this.match(PostgreSqlParser.KW_ORDER);
            this.state = 6217;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 6218;
            this.sortby();
            this.state = 6223;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6219;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6220;
                this.sortby();
                }
                }
                this.state = 6225;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortby(): SortbyContext {
        let localContext = new SortbyContext(this.context, this.state);
        this.enterRule(localContext, 588, PostgreSqlParser.RULE_sortby);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6226;
            this.column_expr_noparen();
            this.state = 6230;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 817, this.context) ) {
            case 1:
                {
                this.state = 6227;
                this.match(PostgreSqlParser.KW_USING);
                this.state = 6228;
                this.qual_all_op();
                }
                break;
            case 2:
                {
                this.state = 6229;
                _la = this.tokenStream.LA(1);
                if(!(_la === 37 || _la === 55)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 6234;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 818, this.context) ) {
            case 1:
                {
                this.state = 6232;
                this.match(PostgreSqlParser.KW_NULLS);
                this.state = 6233;
                _la = this.tokenStream.LA(1);
                if(!(_la === 207 || _la === 249)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_limit(): Select_limitContext {
        let localContext = new Select_limitContext(this.context, this.state);
        this.enterRule(localContext, 590, PostgreSqlParser.RULE_select_limit);
        let _la: number;
        try {
            this.state = 6247;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_OFFSET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6236;
                this.offset_clause();
                this.state = 6238;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 819, this.context) ) {
                case 1:
                    {
                    this.state = 6237;
                    this.fetch_clause();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_FETCH:
            case PostgreSqlParser.KW_LIMIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6242;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_LIMIT:
                    {
                    this.state = 6240;
                    this.limit_clause();
                    }
                    break;
                case PostgreSqlParser.KW_FETCH:
                    {
                    this.state = 6241;
                    this.fetch_clause();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 6245;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 79) {
                    {
                    this.state = 6244;
                    this.offset_clause();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limit_clause(): Limit_clauseContext {
        let localContext = new Limit_clauseContext(this.context, this.state);
        this.enterRule(localContext, 592, PostgreSqlParser.RULE_limit_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6249;
            this.match(PostgreSqlParser.KW_LIMIT);
            this.state = 6252;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.PARAM:
            case PostgreSqlParser.Operator:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_CASE:
            case PostgreSqlParser.KW_CAST:
            case PostgreSqlParser.KW_CURRENT_CATALOG:
            case PostgreSqlParser.KW_CURRENT_DATE:
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_TIME:
            case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_LOCALTIME:
            case PostgreSqlParser.KW_LOCALTIMESTAMP:
            case PostgreSqlParser.KW_NOT:
            case PostgreSqlParser.KW_NULL:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_UNIQUE:
            case PostgreSqlParser.KW_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.BinaryStringConstant:
            case PostgreSqlParser.HexadecimalStringConstant:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 6250;
                this.expression();
                }
                break;
            case PostgreSqlParser.KW_ALL:
                {
                this.state = 6251;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 6256;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6) {
                {
                this.state = 6254;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6255;
                this.expression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fetch_clause(): Fetch_clauseContext {
        let localContext = new Fetch_clauseContext(this.context, this.state);
        this.enterRule(localContext, 594, PostgreSqlParser.RULE_fetch_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6258;
            this.match(PostgreSqlParser.KW_FETCH);
            this.state = 6259;
            _la = this.tokenStream.LA(1);
            if(!(_la === 207 || _la === 268)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            {
            this.state = 6261;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 825, this.context) ) {
            case 1:
                {
                this.state = 6260;
                this.select_fetch_first_value();
                }
                break;
            }
            this.state = 6263;
            _la = this.tokenStream.LA(1);
            if(!(_la === 320 || _la === 414)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6267;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ONLY:
                {
                this.state = 6264;
                this.match(PostgreSqlParser.KW_ONLY);
                }
                break;
            case PostgreSqlParser.KW_WITH:
                {
                this.state = 6265;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 6266;
                this.match(PostgreSqlParser.KW_TIES);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public offset_clause(): Offset_clauseContext {
        let localContext = new Offset_clauseContext(this.context, this.state);
        this.enterRule(localContext, 596, PostgreSqlParser.RULE_offset_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6269;
            this.match(PostgreSqlParser.KW_OFFSET);
            this.state = 6274;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 827, this.context) ) {
            case 1:
                {
                this.state = 6270;
                this.select_fetch_first_value();
                this.state = 6271;
                _la = this.tokenStream.LA(1);
                if(!(_la === 320 || _la === 414)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                {
                this.state = 6273;
                this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_fetch_first_value(): Select_fetch_first_valueContext {
        let localContext = new Select_fetch_first_valueContext(this.context, this.state);
        this.enterRule(localContext, 598, PostgreSqlParser.RULE_select_fetch_first_value);
        let _la: number;
        try {
            this.state = 6279;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 828, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6276;
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 13)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6277;
                _la = this.tokenStream.LA(1);
                if(!(_la === 571 || _la === 573)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6278;
                this.primaryExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public group_clause(): Group_clauseContext {
        let localContext = new Group_clauseContext(this.context, this.state);
        this.enterRule(localContext, 600, PostgreSqlParser.RULE_group_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6281;
            this.match(PostgreSqlParser.KW_GROUP);
            this.state = 6282;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 6284;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 829, this.context) ) {
            case 1:
                {
                this.state = 6283;
                _la = this.tokenStream.LA(1);
                if(!(_la === 30 || _la === 56)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 6286;
            this.group_by_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public group_by_list(): Group_by_listContext {
        let localContext = new Group_by_listContext(this.context, this.state);
        this.enterRule(localContext, 602, PostgreSqlParser.RULE_group_by_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6288;
            this.group_by_item();
            this.state = 6293;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 830, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 6289;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6290;
                    this.group_by_item();
                    }
                    }
                }
                this.state = 6295;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 830, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public group_by_item(): Group_by_itemContext {
        let localContext = new Group_by_itemContext(this.context, this.state);
        this.enterRule(localContext, 604, PostgreSqlParser.RULE_group_by_item);
        let _la: number;
        try {
            this.state = 6319;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 833, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6296;
                this.column_expr_noparen();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6297;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6298;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6300;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 468 || _la === 469) {
                    {
                    this.state = 6299;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 468 || _la === 469)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 6302;
                this.match(PostgreSqlParser.OPEN_PAREN);
                {
                this.state = 6303;
                this.column_expr_noparen();
                this.state = 6308;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 6304;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6305;
                    this.column_expr_noparen();
                    }
                    }
                    this.state = 6310;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                this.state = 6311;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6313;
                this.match(PostgreSqlParser.KW_GROUPING);
                this.state = 6314;
                this.match(PostgreSqlParser.KW_SETS);
                this.state = 6315;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6316;
                this.group_by_list();
                this.state = 6317;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public for_locking_clause(): For_locking_clauseContext {
        let localContext = new For_locking_clauseContext(this.context, this.state);
        this.enterRule(localContext, 606, PostgreSqlParser.RULE_for_locking_clause);
        let _la: number;
        try {
            this.state = 6349;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 840, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6342;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 6321;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 6331;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_NO:
                    case PostgreSqlParser.KW_UPDATE:
                        {
                        this.state = 6324;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 269) {
                            {
                            this.state = 6322;
                            this.match(PostgreSqlParser.KW_NO);
                            this.state = 6323;
                            this.match(PostgreSqlParser.KW_KEY);
                            }
                        }

                        this.state = 6326;
                        this.match(PostgreSqlParser.KW_UPDATE);
                        }
                        break;
                    case PostgreSqlParser.KW_KEY:
                    case PostgreSqlParser.KW_SHARE:
                        {
                        this.state = 6328;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 245) {
                            {
                            this.state = 6327;
                            this.match(PostgreSqlParser.KW_KEY);
                            }
                        }

                        this.state = 6330;
                        this.match(PostgreSqlParser.KW_SHARE);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 6335;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 837, this.context) ) {
                    case 1:
                        {
                        this.state = 6333;
                        this.match(PostgreSqlParser.KW_OF);
                        this.state = 6334;
                        this.qualified_name_list();
                        }
                        break;
                    }
                    this.state = 6340;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 838, this.context) ) {
                    case 1:
                        {
                        this.state = 6337;
                        this.match(PostgreSqlParser.KW_NOWAIT);
                        }
                        break;
                    case 2:
                        {
                        this.state = 6338;
                        this.match(PostgreSqlParser.KW_SKIP);
                        this.state = 6339;
                        this.match(PostgreSqlParser.KW_LOCKED);
                        }
                        break;
                    }
                    }
                    }
                    this.state = 6344;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 62);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6346;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 6347;
                this.match(PostgreSqlParser.KW_READ);
                this.state = 6348;
                this.match(PostgreSqlParser.KW_ONLY);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values_clause(): Values_clauseContext {
        let localContext = new Values_clauseContext(this.context, this.state);
        this.enterRule(localContext, 608, PostgreSqlParser.RULE_values_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6351;
            this.match(PostgreSqlParser.KW_VALUES);
            this.state = 6352;
            this.execute_param_clause();
            this.state = 6357;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6353;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6354;
                this.execute_param_clause();
                }
                }
                this.state = 6359;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public from_clause(): From_clauseContext {
        let localContext = new From_clauseContext(this.context, this.state);
        this.enterRule(localContext, 610, PostgreSqlParser.RULE_from_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6360;
            this.match(PostgreSqlParser.KW_FROM);
            this.state = 6361;
            this.from_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public from_list(): From_listContext {
        let localContext = new From_listContext(this.context, this.state);
        this.enterRule(localContext, 612, PostgreSqlParser.RULE_from_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6363;
            this.table_ref();
            this.state = 6368;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 842, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 6364;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6365;
                    this.table_ref();
                    }
                    }
                }
                this.state = 6370;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 842, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_ref(): Table_refContext {
        let localContext = new Table_refContext(this.context, this.state);
        this.enterRule(localContext, 614, PostgreSqlParser.RULE_table_ref);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6434;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 859, this.context) ) {
            case 1:
                {
                this.state = 6385;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 847, this.context) ) {
                case 1:
                    {
                    this.state = 6371;
                    this.relation_expr();
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 6373;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 81) {
                        {
                        this.state = 6372;
                        this.match(PostgreSqlParser.KW_ONLY);
                        }
                    }

                    this.state = 6375;
                    this.view_name();
                    this.state = 6377;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 844, this.context) ) {
                    case 1:
                        {
                        this.state = 6376;
                        this.match(PostgreSqlParser.STAR);
                        }
                        break;
                    }
                    this.state = 6380;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 845, this.context) ) {
                    case 1:
                        {
                        this.state = 6379;
                        this.column_list();
                        }
                        break;
                    }
                    this.state = 6383;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 846, this.context) ) {
                    case 1:
                        {
                        this.state = 6382;
                        this.where_clause();
                        }
                        break;
                    }
                    }
                    }
                    break;
                }
                this.state = 6388;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 848, this.context) ) {
                case 1:
                    {
                    this.state = 6387;
                    this.alias_clause();
                    }
                    break;
                }
                this.state = 6391;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 472) {
                    {
                    this.state = 6390;
                    this.tablesample_clause();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 6394;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 72) {
                    {
                    this.state = 6393;
                    this.match(PostgreSqlParser.KW_LATERAL);
                    }
                }

                this.state = 6408;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 854, this.context) ) {
                case 1:
                    {
                    this.state = 6396;
                    this.xmltable();
                    this.state = 6398;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 851, this.context) ) {
                    case 1:
                        {
                        this.state = 6397;
                        this.alias_clause();
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 6400;
                    this.func_table();
                    this.state = 6402;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 852, this.context) ) {
                    case 1:
                        {
                        this.state = 6401;
                        this.func_alias_clause();
                        }
                        break;
                    }
                    }
                    break;
                case 3:
                    {
                    this.state = 6404;
                    this.select_with_parens();
                    this.state = 6406;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 853, this.context) ) {
                    case 1:
                        {
                        this.state = 6405;
                        this.alias_clause();
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case 3:
                {
                this.state = 6410;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6411;
                this.table_ref();
                this.state = 6428;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_CROSS:
                    {
                    this.state = 6412;
                    this.match(PostgreSqlParser.KW_CROSS);
                    this.state = 6413;
                    this.match(PostgreSqlParser.KW_JOIN);
                    this.state = 6414;
                    this.table_ref();
                    }
                    break;
                case PostgreSqlParser.KW_NATURAL:
                    {
                    this.state = 6415;
                    this.match(PostgreSqlParser.KW_NATURAL);
                    this.state = 6417;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
                        {
                        this.state = 6416;
                        this.join_type();
                        }
                    }

                    this.state = 6419;
                    this.match(PostgreSqlParser.KW_JOIN);
                    this.state = 6420;
                    this.table_ref();
                    }
                    break;
                case PostgreSqlParser.KW_FULL:
                case PostgreSqlParser.KW_INNER:
                case PostgreSqlParser.KW_JOIN:
                case PostgreSqlParser.KW_LEFT:
                case PostgreSqlParser.KW_RIGHT:
                    {
                    this.state = 6422;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
                        {
                        this.state = 6421;
                        this.join_type();
                        }
                    }

                    this.state = 6424;
                    this.match(PostgreSqlParser.KW_JOIN);
                    this.state = 6425;
                    this.table_ref();
                    this.state = 6426;
                    this.join_qual();
                    }
                    break;
                case PostgreSqlParser.CLOSE_PAREN:
                    break;
                default:
                    break;
                }
                this.state = 6430;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 6432;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 858, this.context) ) {
                case 1:
                    {
                    this.state = 6431;
                    this.alias_clause();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 6454;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 863, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 6452;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_CROSS:
                        {
                        this.state = 6436;
                        this.match(PostgreSqlParser.KW_CROSS);
                        this.state = 6437;
                        this.match(PostgreSqlParser.KW_JOIN);
                        this.state = 6438;
                        this.table_ref();
                        }
                        break;
                    case PostgreSqlParser.KW_NATURAL:
                        {
                        this.state = 6439;
                        this.match(PostgreSqlParser.KW_NATURAL);
                        this.state = 6441;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
                            {
                            this.state = 6440;
                            this.join_type();
                            }
                        }

                        this.state = 6443;
                        this.match(PostgreSqlParser.KW_JOIN);
                        this.state = 6444;
                        this.table_ref();
                        }
                        break;
                    case PostgreSqlParser.KW_FULL:
                    case PostgreSqlParser.KW_INNER:
                    case PostgreSqlParser.KW_JOIN:
                    case PostgreSqlParser.KW_LEFT:
                    case PostgreSqlParser.KW_RIGHT:
                        {
                        this.state = 6446;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 8261) !== 0)) {
                            {
                            this.state = 6445;
                            this.join_type();
                            }
                        }

                        this.state = 6448;
                        this.match(PostgreSqlParser.KW_JOIN);
                        this.state = 6449;
                        this.table_ref();
                        this.state = 6450;
                        this.join_qual();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }
                this.state = 6456;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 863, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alias_clause(): Alias_clauseContext {
        let localContext = new Alias_clauseContext(this.context, this.state);
        this.enterRule(localContext, 616, PostgreSqlParser.RULE_alias_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6458;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 6457;
                this.match(PostgreSqlParser.KW_AS);
                }
            }

            this.state = 6460;
            localContext._alias = this.colid();
            this.state = 6465;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 865, this.context) ) {
            case 1:
                {
                this.state = 6461;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6462;
                this.name_list();
                this.state = 6463;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_alias_clause(): Func_alias_clauseContext {
        let localContext = new Func_alias_clauseContext(this.context, this.state);
        this.enterRule(localContext, 618, PostgreSqlParser.RULE_func_alias_clause);
        let _la: number;
        try {
            this.state = 6479;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 868, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6467;
                this.alias_clause();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6473;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_AS:
                    {
                    this.state = 6468;
                    this.match(PostgreSqlParser.KW_AS);
                    this.state = 6470;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                        {
                        this.state = 6469;
                        localContext._alias = this.colid();
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6472;
                    localContext._alias = this.colid();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 6475;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6476;
                this.tablefuncelementlist();
                this.state = 6477;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public join_type(): Join_typeContext {
        let localContext = new Join_typeContext(this.context, this.state);
        this.enterRule(localContext, 620, PostgreSqlParser.RULE_join_type);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6481;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & 8261) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6483;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 123) {
                {
                this.state = 6482;
                this.match(PostgreSqlParser.KW_OUTER);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public join_qual(): Join_qualContext {
        let localContext = new Join_qualContext(this.context, this.state);
        this.enterRule(localContext, 622, PostgreSqlParser.RULE_join_qual);
        try {
            this.state = 6489;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_USING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6485;
                this.match(PostgreSqlParser.KW_USING);
                this.state = 6486;
                this.opt_column_list();
                }
                break;
            case PostgreSqlParser.KW_ON:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6487;
                this.match(PostgreSqlParser.KW_ON);
                this.state = 6488;
                this.expression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relation_expr(): Relation_exprContext {
        let localContext = new Relation_exprContext(this.context, this.state);
        this.enterRule(localContext, 624, PostgreSqlParser.RULE_relation_expr);
        try {
            this.state = 6506;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 873, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6491;
                this.truncate_table();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6492;
                this.match(PostgreSqlParser.KW_ONLY);
                this.state = 6498;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6493;
                    this.table_name();
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 6494;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 6495;
                    this.table_name();
                    this.state = 6496;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6500;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 6501;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 6504;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6502;
                    this.schema_name();
                    }
                    break;
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                    {
                    this.state = 6503;
                    this.match(PostgreSqlParser.KW_CURRENT_SCHEMA);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public publication_relation_expr(): Publication_relation_exprContext {
        let localContext = new Publication_relation_exprContext(this.context, this.state);
        this.enterRule(localContext, 626, PostgreSqlParser.RULE_publication_relation_expr);
        let _la: number;
        try {
            this.state = 6532;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 878, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6508;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 6509;
                this.truncate_table();
                this.state = 6511;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 874, this.context) ) {
                case 1:
                    {
                    this.state = 6510;
                    this.opt_column_list();
                    }
                    break;
                }
                this.state = 6514;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103) {
                    {
                    this.state = 6513;
                    this.where_clause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6516;
                this.match(PostgreSqlParser.KW_TABLE);
                this.state = 6517;
                this.match(PostgreSqlParser.KW_ONLY);
                this.state = 6523;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6518;
                    this.table_name();
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 6519;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 6520;
                    this.table_name();
                    this.state = 6521;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6525;
                this.match(PostgreSqlParser.KW_TABLES);
                this.state = 6526;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 6527;
                this.match(PostgreSqlParser.KW_SCHEMA);
                this.state = 6530;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6528;
                    this.schema_name();
                    }
                    break;
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                    {
                    this.state = 6529;
                    this.match(PostgreSqlParser.KW_CURRENT_SCHEMA);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relation_expr_list(): Relation_expr_listContext {
        let localContext = new Relation_expr_listContext(this.context, this.state);
        this.enterRule(localContext, 628, PostgreSqlParser.RULE_relation_expr_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6534;
            this.relation_expr();
            this.state = 6539;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6535;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6536;
                this.relation_expr();
                }
                }
                this.state = 6541;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relation_expr_opt_alias(): Relation_expr_opt_aliasContext {
        let localContext = new Relation_expr_opt_aliasContext(this.context, this.state);
        this.enterRule(localContext, 630, PostgreSqlParser.RULE_relation_expr_opt_alias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6542;
            this.relation_expr();
            this.state = 6547;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 881, this.context) ) {
            case 1:
                {
                this.state = 6544;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 36) {
                    {
                    this.state = 6543;
                    this.match(PostgreSqlParser.KW_AS);
                    }
                }

                this.state = 6546;
                this.colid();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablesample_clause(): Tablesample_clauseContext {
        let localContext = new Tablesample_clauseContext(this.context, this.state);
        this.enterRule(localContext, 632, PostgreSqlParser.RULE_tablesample_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6549;
            this.match(PostgreSqlParser.KW_TABLESAMPLE);
            this.state = 6550;
            this.function_name();
            this.state = 6551;
            this.execute_param_clause();
            this.state = 6557;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 882, this.context) ) {
            case 1:
                {
                this.state = 6552;
                this.match(PostgreSqlParser.KW_REPEATABLE);
                this.state = 6553;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6554;
                this.expression();
                this.state = 6555;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_table(): Func_tableContext {
        let localContext = new Func_tableContext(this.context, this.state);
        this.enterRule(localContext, 634, PostgreSqlParser.RULE_func_table);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6573;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 884, this.context) ) {
            case 1:
                {
                this.state = 6559;
                this.func_expr_windowless();
                }
                break;
            case 2:
                {
                {
                this.state = 6560;
                this.match(PostgreSqlParser.KW_ROWS);
                this.state = 6561;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 6562;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6563;
                this.rowsfrom_item();
                this.state = 6568;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 6564;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6565;
                    this.rowsfrom_item();
                    }
                    }
                    this.state = 6570;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 6571;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                }
                break;
            }
            this.state = 6577;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 885, this.context) ) {
            case 1:
                {
                this.state = 6575;
                this.match(PostgreSqlParser.KW_WITH);
                this.state = 6576;
                this.match(PostgreSqlParser.KW_ORDINALITY);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsfrom_item(): Rowsfrom_itemContext {
        let localContext = new Rowsfrom_itemContext(this.context, this.state);
        this.enterRule(localContext, 636, PostgreSqlParser.RULE_rowsfrom_item);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6579;
            this.func_expr_windowless();
            this.state = 6585;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 6580;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 6581;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6582;
                this.tablefuncelementlist();
                this.state = 6583;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public where_clause(): Where_clauseContext {
        let localContext = new Where_clauseContext(this.context, this.state);
        this.enterRule(localContext, 638, PostgreSqlParser.RULE_where_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6587;
            this.match(PostgreSqlParser.KW_WHERE);
            this.state = 6588;
            this.column_expr_noparen();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public where_or_current_clause(): Where_or_current_clauseContext {
        let localContext = new Where_or_current_clauseContext(this.context, this.state);
        this.enterRule(localContext, 640, PostgreSqlParser.RULE_where_or_current_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6590;
            this.match(PostgreSqlParser.KW_WHERE);
            this.state = 6595;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 887, this.context) ) {
            case 1:
                {
                this.state = 6591;
                this.match(PostgreSqlParser.KW_CURRENT);
                this.state = 6592;
                this.match(PostgreSqlParser.KW_OF);
                this.state = 6593;
                this.colid();
                }
                break;
            case 2:
                {
                this.state = 6594;
                this.expression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablefuncelementlist(): TablefuncelementlistContext {
        let localContext = new TablefuncelementlistContext(this.context, this.state);
        this.enterRule(localContext, 642, PostgreSqlParser.RULE_tablefuncelementlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6597;
            this.tablefuncelement();
            this.state = 6602;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6598;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6599;
                this.tablefuncelement();
                }
                }
                this.state = 6604;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablefuncelement(): TablefuncelementContext {
        let localContext = new TablefuncelementContext(this.context, this.state);
        this.enterRule(localContext, 644, PostgreSqlParser.RULE_tablefuncelement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6605;
            this.colid();
            this.state = 6606;
            this.typename();
            this.state = 6608;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 43) {
                {
                this.state = 6607;
                this.opt_collate_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmltable(): XmltableContext {
        let localContext = new XmltableContext(this.context, this.state);
        this.enterRule(localContext, 646, PostgreSqlParser.RULE_xmltable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6610;
            this.match(PostgreSqlParser.KW_XMLTABLE);
            this.state = 6611;
            this.match(PostgreSqlParser.OPEN_PAREN);
            {
            this.state = 6625;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 891, this.context) ) {
            case 1:
                {
                this.state = 6612;
                this.match(PostgreSqlParser.KW_XMLNAMESPACES);
                this.state = 6613;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6614;
                this.xml_namespace_el();
                this.state = 6619;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 6615;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6616;
                    this.xml_namespace_el();
                    }
                    }
                    this.state = 6621;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 6622;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 6623;
                this.match(PostgreSqlParser.COMMA);
                }
                break;
            }
            this.state = 6627;
            this.primaryExpression(0);
            this.state = 6628;
            this.xmlexists_argument();
            this.state = 6629;
            this.match(PostgreSqlParser.KW_COLUMNS);
            this.state = 6630;
            this.xmltable_column_el();
            this.state = 6635;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6631;
                this.match(PostgreSqlParser.COMMA);
                this.state = 6632;
                this.xmltable_column_el();
                }
                }
                this.state = 6637;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 6638;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmltable_column_el(): Xmltable_column_elContext {
        let localContext = new Xmltable_column_elContext(this.context, this.state);
        this.enterRule(localContext, 648, PostgreSqlParser.RULE_xmltable_column_el);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6640;
            this.colid();
            this.state = 6659;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 6641;
                this.typename();
                this.state = 6655;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 53)) & ~0x1F) === 0 && ((1 << (_la - 53)) & 50331649) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 32767) !== 0) || ((((_la - 433)) & ~0x1F) === 0 && ((1 << (_la - 433)) & 4291821567) !== 0) || ((((_la - 465)) & ~0x1F) === 0 && ((1 << (_la - 465)) & 4278187359) !== 0) || ((((_la - 497)) & ~0x1F) === 0 && ((1 << (_la - 497)) & 146800319) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                    {
                    this.state = 6651;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    do {
                        {
                        this.state = 6651;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case PostgreSqlParser.KW_DEFAULT:
                        case PostgreSqlParser.KW_IS:
                        case PostgreSqlParser.KW_OUTER:
                        case PostgreSqlParser.KW_OVER:
                        case PostgreSqlParser.KW_ABORT:
                        case PostgreSqlParser.KW_ABSOLUTE:
                        case PostgreSqlParser.KW_ACCESS:
                        case PostgreSqlParser.KW_ACTION:
                        case PostgreSqlParser.KW_ADD:
                        case PostgreSqlParser.KW_ADMIN:
                        case PostgreSqlParser.KW_AFTER:
                        case PostgreSqlParser.KW_AGGREGATE:
                        case PostgreSqlParser.KW_ALSO:
                        case PostgreSqlParser.KW_ALTER:
                        case PostgreSqlParser.KW_ALWAYS:
                        case PostgreSqlParser.KW_ASSERTION:
                        case PostgreSqlParser.KW_ASSIGNMENT:
                        case PostgreSqlParser.KW_AT:
                        case PostgreSqlParser.KW_ATTRIBUTE:
                        case PostgreSqlParser.KW_BACKWARD:
                        case PostgreSqlParser.KW_BEFORE:
                        case PostgreSqlParser.KW_BEGIN:
                        case PostgreSqlParser.KW_BY:
                        case PostgreSqlParser.KW_CACHE:
                        case PostgreSqlParser.KW_CALLED:
                        case PostgreSqlParser.KW_CASCADE:
                        case PostgreSqlParser.KW_CASCADED:
                        case PostgreSqlParser.KW_CATALOG:
                        case PostgreSqlParser.KW_CHAIN:
                        case PostgreSqlParser.KW_CHARACTERISTICS:
                        case PostgreSqlParser.KW_CHECKPOINT:
                        case PostgreSqlParser.KW_CLASS:
                        case PostgreSqlParser.KW_CLOSE:
                        case PostgreSqlParser.KW_CLUSTER:
                        case PostgreSqlParser.KW_COMMENT:
                        case PostgreSqlParser.KW_COMMENTS:
                        case PostgreSqlParser.KW_COMMIT:
                        case PostgreSqlParser.KW_COMMITTED:
                        case PostgreSqlParser.KW_CONFIGURATION:
                        case PostgreSqlParser.KW_CONNECTION:
                        case PostgreSqlParser.KW_CONSTRAINTS:
                        case PostgreSqlParser.KW_CONTENT:
                        case PostgreSqlParser.KW_CONTINUE:
                        case PostgreSqlParser.KW_CONVERSION:
                        case PostgreSqlParser.KW_COPY:
                        case PostgreSqlParser.KW_COST:
                        case PostgreSqlParser.KW_CSV:
                        case PostgreSqlParser.KW_CURSOR:
                        case PostgreSqlParser.KW_CYCLE:
                        case PostgreSqlParser.KW_DATA:
                        case PostgreSqlParser.KW_DATABASE:
                        case PostgreSqlParser.KW_DAY:
                        case PostgreSqlParser.KW_DEALLOCATE:
                        case PostgreSqlParser.KW_DECLARE:
                        case PostgreSqlParser.KW_DEFAULTS:
                        case PostgreSqlParser.KW_DEFERRED:
                        case PostgreSqlParser.KW_DEFINER:
                        case PostgreSqlParser.KW_DELETE:
                        case PostgreSqlParser.KW_DELIMITER:
                        case PostgreSqlParser.KW_DELIMITERS:
                        case PostgreSqlParser.KW_DICTIONARY:
                        case PostgreSqlParser.KW_DISABLE:
                        case PostgreSqlParser.KW_DISCARD:
                        case PostgreSqlParser.KW_DOCUMENT:
                        case PostgreSqlParser.KW_DOMAIN:
                        case PostgreSqlParser.KW_DOUBLE:
                        case PostgreSqlParser.KW_DROP:
                        case PostgreSqlParser.KW_EACH:
                        case PostgreSqlParser.KW_ENABLE:
                        case PostgreSqlParser.KW_ENCODING:
                        case PostgreSqlParser.KW_ENCRYPTED:
                        case PostgreSqlParser.KW_ENUM:
                        case PostgreSqlParser.KW_ESCAPE:
                        case PostgreSqlParser.KW_EVENT:
                        case PostgreSqlParser.KW_EXCLUDE:
                        case PostgreSqlParser.KW_EXCLUDING:
                        case PostgreSqlParser.KW_EXCLUSIVE:
                        case PostgreSqlParser.KW_EXECUTE:
                        case PostgreSqlParser.KW_EXPLAIN:
                        case PostgreSqlParser.KW_EXTENSION:
                        case PostgreSqlParser.KW_EXTERNAL:
                        case PostgreSqlParser.KW_FAMILY:
                        case PostgreSqlParser.KW_FIRST:
                        case PostgreSqlParser.KW_FOLLOWING:
                        case PostgreSqlParser.KW_FORCE:
                        case PostgreSqlParser.KW_FORWARD:
                        case PostgreSqlParser.KW_FUNCTION:
                        case PostgreSqlParser.KW_FUNCTIONS:
                        case PostgreSqlParser.KW_GLOBAL:
                        case PostgreSqlParser.KW_GRANTED:
                        case PostgreSqlParser.KW_HANDLER:
                        case PostgreSqlParser.KW_HEADER:
                        case PostgreSqlParser.KW_HOLD:
                        case PostgreSqlParser.KW_HOUR:
                        case PostgreSqlParser.KW_IDENTITY:
                        case PostgreSqlParser.KW_IF:
                        case PostgreSqlParser.KW_IMMEDIATE:
                        case PostgreSqlParser.KW_IMMUTABLE:
                        case PostgreSqlParser.KW_IMPLICIT:
                        case PostgreSqlParser.KW_INCLUDING:
                        case PostgreSqlParser.KW_INCREMENT:
                        case PostgreSqlParser.KW_INDEX:
                        case PostgreSqlParser.KW_INDEXES:
                        case PostgreSqlParser.KW_INHERIT:
                        case PostgreSqlParser.KW_INHERITS:
                        case PostgreSqlParser.KW_INLINE:
                        case PostgreSqlParser.KW_INSENSITIVE:
                        case PostgreSqlParser.KW_INSERT:
                        case PostgreSqlParser.KW_INSTEAD:
                        case PostgreSqlParser.KW_INVOKER:
                        case PostgreSqlParser.KW_ISOLATION:
                        case PostgreSqlParser.KW_KEY:
                        case PostgreSqlParser.KW_LABEL:
                        case PostgreSqlParser.KW_LANGUAGE:
                        case PostgreSqlParser.KW_LARGE:
                        case PostgreSqlParser.KW_LAST:
                        case PostgreSqlParser.KW_LEAKPROOF:
                        case PostgreSqlParser.KW_LEVEL:
                        case PostgreSqlParser.KW_LISTEN:
                        case PostgreSqlParser.KW_LOAD:
                        case PostgreSqlParser.KW_LOCAL:
                        case PostgreSqlParser.KW_LOCATION:
                        case PostgreSqlParser.KW_LOCK:
                        case PostgreSqlParser.KW_MAPPING:
                        case PostgreSqlParser.KW_MATCH:
                        case PostgreSqlParser.KW_MATERIALIZED:
                        case PostgreSqlParser.KW_MAXVALUE:
                        case PostgreSqlParser.KW_MINUTE:
                        case PostgreSqlParser.KW_MINVALUE:
                        case PostgreSqlParser.KW_MODE:
                        case PostgreSqlParser.KW_MONTH:
                        case PostgreSqlParser.KW_MOVE:
                        case PostgreSqlParser.KW_NAME:
                        case PostgreSqlParser.KW_NAMES:
                        case PostgreSqlParser.KW_NEXT:
                        case PostgreSqlParser.KW_NO:
                        case PostgreSqlParser.KW_NOTHING:
                        case PostgreSqlParser.KW_NOTIFY:
                        case PostgreSqlParser.KW_NOWAIT:
                        case PostgreSqlParser.KW_NULLS:
                        case PostgreSqlParser.KW_OBJECT:
                        case PostgreSqlParser.KW_OF:
                        case PostgreSqlParser.KW_OFF:
                        case PostgreSqlParser.KW_OIDS:
                        case PostgreSqlParser.KW_OPERATOR:
                        case PostgreSqlParser.KW_OPTION:
                        case PostgreSqlParser.KW_OPTIONS:
                        case PostgreSqlParser.KW_OWNED:
                        case PostgreSqlParser.KW_OWNER:
                        case PostgreSqlParser.KW_PARSER:
                        case PostgreSqlParser.KW_PARTIAL:
                        case PostgreSqlParser.KW_PARTITION:
                        case PostgreSqlParser.KW_PASSING:
                        case PostgreSqlParser.KW_PASSWORD:
                        case PostgreSqlParser.KW_PLANS:
                        case PostgreSqlParser.KW_PRECEDING:
                        case PostgreSqlParser.KW_PREPARE:
                        case PostgreSqlParser.KW_PREPARED:
                        case PostgreSqlParser.KW_PRESERVE:
                        case PostgreSqlParser.KW_PRIOR:
                        case PostgreSqlParser.KW_PRIVILEGES:
                        case PostgreSqlParser.KW_PROCEDURAL:
                        case PostgreSqlParser.KW_PROCEDURE:
                        case PostgreSqlParser.KW_PROGRAM:
                        case PostgreSqlParser.KW_QUOTE:
                        case PostgreSqlParser.KW_RANGE:
                        case PostgreSqlParser.KW_READ:
                        case PostgreSqlParser.KW_REASSIGN:
                        case PostgreSqlParser.KW_RECHECK:
                        case PostgreSqlParser.KW_RECURSIVE:
                        case PostgreSqlParser.KW_REF:
                        case PostgreSqlParser.KW_REFRESH:
                        case PostgreSqlParser.KW_REINDEX:
                        case PostgreSqlParser.KW_RELATIVE:
                        case PostgreSqlParser.KW_RELEASE:
                        case PostgreSqlParser.KW_RENAME:
                        case PostgreSqlParser.KW_REPEATABLE:
                        case PostgreSqlParser.KW_REPLACE:
                        case PostgreSqlParser.KW_REPLICA:
                        case PostgreSqlParser.KW_RESET:
                        case PostgreSqlParser.KW_RESTART:
                        case PostgreSqlParser.KW_RESTRICT:
                        case PostgreSqlParser.KW_RETURNS:
                        case PostgreSqlParser.KW_REVOKE:
                        case PostgreSqlParser.KW_ROLE:
                        case PostgreSqlParser.KW_ROLLBACK:
                        case PostgreSqlParser.KW_ROWS:
                        case PostgreSqlParser.KW_RULE:
                        case PostgreSqlParser.KW_SAVEPOINT:
                        case PostgreSqlParser.KW_SCHEMA:
                        case PostgreSqlParser.KW_SCROLL:
                        case PostgreSqlParser.KW_SEARCH:
                        case PostgreSqlParser.KW_SECOND:
                        case PostgreSqlParser.KW_SECURITY:
                        case PostgreSqlParser.KW_SEQUENCE:
                        case PostgreSqlParser.KW_SEQUENCES:
                        case PostgreSqlParser.KW_SERIALIZABLE:
                        case PostgreSqlParser.KW_SERVER:
                        case PostgreSqlParser.KW_SESSION:
                        case PostgreSqlParser.KW_SET:
                        case PostgreSqlParser.KW_SHARE:
                        case PostgreSqlParser.KW_SHOW:
                        case PostgreSqlParser.KW_SIMPLE:
                        case PostgreSqlParser.KW_SNAPSHOT:
                        case PostgreSqlParser.KW_STABLE:
                        case PostgreSqlParser.KW_STANDALONE:
                        case PostgreSqlParser.KW_START:
                        case PostgreSqlParser.KW_STATEMENT:
                        case PostgreSqlParser.KW_STATISTICS:
                        case PostgreSqlParser.KW_STDIN:
                        case PostgreSqlParser.KW_STDOUT:
                        case PostgreSqlParser.KW_STORAGE:
                        case PostgreSqlParser.KW_STRICT:
                        case PostgreSqlParser.KW_STRIP:
                        case PostgreSqlParser.KW_SYSID:
                        case PostgreSqlParser.KW_SYSTEM:
                        case PostgreSqlParser.KW_TABLES:
                        case PostgreSqlParser.KW_TABLESPACE:
                        case PostgreSqlParser.KW_TEMP:
                        case PostgreSqlParser.KW_TEMPLATE:
                        case PostgreSqlParser.KW_TEMPORARY:
                        case PostgreSqlParser.KW_TEXT:
                        case PostgreSqlParser.KW_TRANSACTION:
                        case PostgreSqlParser.KW_TRIGGER:
                        case PostgreSqlParser.KW_TRUNCATE:
                        case PostgreSqlParser.KW_TRUSTED:
                        case PostgreSqlParser.KW_TYPE:
                        case PostgreSqlParser.KW_TYPES:
                        case PostgreSqlParser.KW_UNBOUNDED:
                        case PostgreSqlParser.KW_UNCOMMITTED:
                        case PostgreSqlParser.KW_UNENCRYPTED:
                        case PostgreSqlParser.KW_UNKNOWN:
                        case PostgreSqlParser.KW_UNLISTEN:
                        case PostgreSqlParser.KW_UNLOGGED:
                        case PostgreSqlParser.KW_UNTIL:
                        case PostgreSqlParser.KW_UPDATE:
                        case PostgreSqlParser.KW_VACUUM:
                        case PostgreSqlParser.KW_VALID:
                        case PostgreSqlParser.KW_VALIDATE:
                        case PostgreSqlParser.KW_VALIDATOR:
                        case PostgreSqlParser.KW_VARYING:
                        case PostgreSqlParser.KW_VERSION:
                        case PostgreSqlParser.KW_VIEW:
                        case PostgreSqlParser.KW_VOLATILE:
                        case PostgreSqlParser.KW_WHITESPACE:
                        case PostgreSqlParser.KW_WITHOUT:
                        case PostgreSqlParser.KW_WORK:
                        case PostgreSqlParser.KW_WRAPPER:
                        case PostgreSqlParser.KW_WRITE:
                        case PostgreSqlParser.KW_XML:
                        case PostgreSqlParser.KW_YEAR:
                        case PostgreSqlParser.KW_YES:
                        case PostgreSqlParser.KW_ZONE:
                        case PostgreSqlParser.KW_CALL:
                        case PostgreSqlParser.KW_CURRENT:
                        case PostgreSqlParser.KW_ATTACH:
                        case PostgreSqlParser.KW_DETACH:
                        case PostgreSqlParser.KW_EXPRESSION:
                        case PostgreSqlParser.KW_GENERATED:
                        case PostgreSqlParser.KW_LOGGED:
                        case PostgreSqlParser.KW_STORED:
                        case PostgreSqlParser.KW_INCLUDE:
                        case PostgreSqlParser.KW_ROUTINE:
                        case PostgreSqlParser.KW_TRANSFORM:
                        case PostgreSqlParser.KW_IMPORT:
                        case PostgreSqlParser.KW_POLICY:
                        case PostgreSqlParser.KW_METHOD:
                        case PostgreSqlParser.KW_REFERENCING:
                        case PostgreSqlParser.KW_NEW:
                        case PostgreSqlParser.KW_OLD:
                        case PostgreSqlParser.KW_VALUE:
                        case PostgreSqlParser.KW_SUBSCRIPTION:
                        case PostgreSqlParser.KW_PUBLICATION:
                        case PostgreSqlParser.KW_ROUTINES:
                        case PostgreSqlParser.KW_SCHEMAS:
                        case PostgreSqlParser.KW_PROCEDURES:
                        case PostgreSqlParser.KW_INPUT:
                        case PostgreSqlParser.KW_SUPPORT:
                        case PostgreSqlParser.KW_PARALLEL:
                        case PostgreSqlParser.KW_SQL:
                        case PostgreSqlParser.KW_DEPENDS:
                        case PostgreSqlParser.KW_OVERRIDING:
                        case PostgreSqlParser.KW_CONFLICT:
                        case PostgreSqlParser.KW_SKIP:
                        case PostgreSqlParser.KW_LOCKED:
                        case PostgreSqlParser.KW_TIES:
                        case PostgreSqlParser.KW_ROLLUP:
                        case PostgreSqlParser.KW_CUBE:
                        case PostgreSqlParser.KW_SETS:
                        case PostgreSqlParser.KW_ORDINALITY:
                        case PostgreSqlParser.KW_COLUMNS:
                        case PostgreSqlParser.KW_ROWTYPE:
                        case PostgreSqlParser.KW_NORMALIZED:
                        case PostgreSqlParser.KW_WITHIN:
                        case PostgreSqlParser.KW_FILTER:
                        case PostgreSqlParser.KW_GROUPS:
                        case PostgreSqlParser.KW_OTHERS:
                        case PostgreSqlParser.KW_NFC:
                        case PostgreSqlParser.KW_NFD:
                        case PostgreSqlParser.KW_NFKC:
                        case PostgreSqlParser.KW_NFKD:
                        case PostgreSqlParser.KW_UESCAPE:
                        case PostgreSqlParser.KW_VIEWS:
                        case PostgreSqlParser.KW_DUMP:
                        case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                        case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                        case PostgreSqlParser.KW_ERROR:
                        case PostgreSqlParser.KW_USE_VARIABLE:
                        case PostgreSqlParser.KW_USE_COLUMN:
                        case PostgreSqlParser.KW_ALIAS:
                        case PostgreSqlParser.KW_CONSTANT:
                        case PostgreSqlParser.KW_PERFORM:
                        case PostgreSqlParser.KW_GET:
                        case PostgreSqlParser.KW_DIAGNOSTICS:
                        case PostgreSqlParser.KW_STACKED:
                        case PostgreSqlParser.KW_ELSIF:
                        case PostgreSqlParser.KW_REVERSE:
                        case PostgreSqlParser.KW_SLICE:
                        case PostgreSqlParser.KW_EXIT:
                        case PostgreSqlParser.KW_RETURN:
                        case PostgreSqlParser.KW_QUERY:
                        case PostgreSqlParser.KW_RAISE:
                        case PostgreSqlParser.KW_SQLSTATE:
                        case PostgreSqlParser.KW_DEBUG:
                        case PostgreSqlParser.KW_LOG:
                        case PostgreSqlParser.KW_INFO:
                        case PostgreSqlParser.KW_NOTICE:
                        case PostgreSqlParser.KW_WARNING:
                        case PostgreSqlParser.KW_EXCEPTION:
                        case PostgreSqlParser.KW_ASSERT:
                        case PostgreSqlParser.KW_OPEN:
                        case PostgreSqlParser.KW_PUBLIC:
                        case PostgreSqlParser.KW_SKIP_LOCKED:
                        case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                        case PostgreSqlParser.Identifier:
                        case PostgreSqlParser.QuotedIdentifier:
                        case PostgreSqlParser.UnicodeQuotedIdentifier:
                        case PostgreSqlParser.StringConstant:
                        case PostgreSqlParser.UnicodeEscapeStringConstant:
                        case PostgreSqlParser.BeginDollarStringConstant:
                        case PostgreSqlParser.PLSQLVARIABLENAME:
                        case PostgreSqlParser.PLSQLIDENTIFIER:
                        case PostgreSqlParser.EscapeStringConstant:
                            {
                            this.state = 6644;
                            this.errorHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this.tokenStream, 893, this.context) ) {
                            case 1:
                                {
                                this.state = 6642;
                                this.match(PostgreSqlParser.KW_DEFAULT);
                                }
                                break;
                            case 2:
                                {
                                this.state = 6643;
                                this.identifier();
                                }
                                break;
                            }
                            this.state = 6646;
                            this.expression();
                            }
                            break;
                        case PostgreSqlParser.KW_NOT:
                        case PostgreSqlParser.KW_NULL:
                            {
                            this.state = 6648;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 77) {
                                {
                                this.state = 6647;
                                this.match(PostgreSqlParser.KW_NOT);
                                }
                            }

                            this.state = 6650;
                            this.match(PostgreSqlParser.KW_NULL);
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                        this.state = 6653;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    } while (((((_la - 53)) & ~0x1F) === 0 && ((1 << (_la - 53)) & 50331649) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 32767) !== 0) || ((((_la - 433)) & ~0x1F) === 0 && ((1 << (_la - 433)) & 4291821567) !== 0) || ((((_la - 465)) & ~0x1F) === 0 && ((1 << (_la - 465)) & 4278187359) !== 0) || ((((_la - 497)) & ~0x1F) === 0 && ((1 << (_la - 497)) & 146800319) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584);
                    }
                }

                }
                break;
            case PostgreSqlParser.KW_FOR:
                {
                this.state = 6657;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 6658;
                this.match(PostgreSqlParser.KW_ORDINALITY);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_namespace_el(): Xml_namespace_elContext {
        let localContext = new Xml_namespace_elContext(this.context, this.state);
        this.enterRule(localContext, 650, PostgreSqlParser.RULE_xml_namespace_el);
        try {
            this.state = 6667;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 899, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6661;
                this.primaryExpression(0);
                this.state = 6662;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 6663;
                this.collabel();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6665;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 6666;
                this.primaryExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typename(): TypenameContext {
        let localContext = new TypenameContext(this.context, this.state);
        this.enterRule(localContext, 652, PostgreSqlParser.RULE_typename);
        let _la: number;
        try {
            let alternative: number;
            this.state = 6695;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 905, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6670;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 415) {
                    {
                    this.state = 6669;
                    this.match(PostgreSqlParser.KW_SETOF);
                    }
                }

                this.state = 6672;
                this.simpletypename();
                this.state = 6689;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 904, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 6680;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 902, this.context);
                    while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                        if (alternative === 1) {
                            {
                            {
                            this.state = 6673;
                            this.match(PostgreSqlParser.OPEN_BRACKET);
                            this.state = 6675;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 571) {
                                {
                                this.state = 6674;
                                this.match(PostgreSqlParser.Integral);
                                }
                            }

                            this.state = 6677;
                            this.match(PostgreSqlParser.CLOSE_BRACKET);
                            }
                            }
                        }
                        this.state = 6682;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 902, this.context);
                    }
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 6683;
                    this.match(PostgreSqlParser.KW_ARRAY);
                    this.state = 6687;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 903, this.context) ) {
                    case 1:
                        {
                        this.state = 6684;
                        this.match(PostgreSqlParser.OPEN_BRACKET);
                        this.state = 6685;
                        this.match(PostgreSqlParser.Integral);
                        this.state = 6686;
                        this.match(PostgreSqlParser.CLOSE_BRACKET);
                        }
                        break;
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6691;
                this.qualified_name();
                this.state = 6692;
                this.match(PostgreSqlParser.PERCENT);
                this.state = 6693;
                _la = this.tokenStream.LA(1);
                if(!(_la === 360 || _la === 477)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpletypename(): SimpletypenameContext {
        let localContext = new SimpletypenameContext(this.context, this.state);
        this.enterRule(localContext, 654, PostgreSqlParser.RULE_simpletypename);
        try {
            this.state = 6712;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 910, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6697;
                this.type_function_name();
                this.state = 6699;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 906, this.context) ) {
                case 1:
                    {
                    this.state = 6698;
                    this.attrs();
                    }
                    break;
                }
                this.state = 6702;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 907, this.context) ) {
                case 1:
                    {
                    this.state = 6701;
                    this.execute_param_clause();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6704;
                this.consttypename();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6705;
                this.match(PostgreSqlParser.KW_INTERVAL);
                this.state = 6710;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 909, this.context) ) {
                case 1:
                    {
                    this.state = 6707;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 908, this.context) ) {
                    case 1:
                        {
                        this.state = 6706;
                        this.opt_interval();
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 6709;
                    this.opt_float();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public consttypename(): ConsttypenameContext {
        let localContext = new ConsttypenameContext(this.context, this.state);
        this.enterRule(localContext, 656, PostgreSqlParser.RULE_consttypename);
        try {
            this.state = 6718;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_SMALLINT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6714;
                this.numeric();
                }
                break;
            case PostgreSqlParser.KW_BIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6715;
                this.bit();
                }
                break;
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_VARCHAR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6716;
                this.character();
                }
                break;
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6717;
                this.constdatetime();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numeric(): NumericContext {
        let localContext = new NumericContext(this.context, this.state);
        this.enterRule(localContext, 658, PostgreSqlParser.RULE_numeric);
        let _la: number;
        try {
            this.state = 6736;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_INT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6720;
                this.match(PostgreSqlParser.KW_INT);
                }
                break;
            case PostgreSqlParser.KW_INTEGER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6721;
                this.match(PostgreSqlParser.KW_INTEGER);
                }
                break;
            case PostgreSqlParser.KW_SMALLINT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6722;
                this.match(PostgreSqlParser.KW_SMALLINT);
                }
                break;
            case PostgreSqlParser.KW_BIGINT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6723;
                this.match(PostgreSqlParser.KW_BIGINT);
                }
                break;
            case PostgreSqlParser.KW_REAL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6724;
                this.match(PostgreSqlParser.KW_REAL);
                }
                break;
            case PostgreSqlParser.KW_FLOAT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6725;
                this.match(PostgreSqlParser.KW_FLOAT);
                this.state = 6727;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 912, this.context) ) {
                case 1:
                    {
                    this.state = 6726;
                    this.opt_float();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_DOUBLE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 6729;
                this.match(PostgreSqlParser.KW_DOUBLE);
                this.state = 6730;
                this.match(PostgreSqlParser.KW_PRECISION);
                }
                break;
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_NUMERIC:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 6731;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 394)) & ~0x1F) === 0 && ((1 << (_la - 394)) & 32771) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6733;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 913, this.context) ) {
                case 1:
                    {
                    this.state = 6732;
                    this.execute_param_clause();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_BOOLEAN:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 6735;
                this.match(PostgreSqlParser.KW_BOOLEAN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_float(): Opt_floatContext {
        let localContext = new Opt_floatContext(this.context, this.state);
        this.enterRule(localContext, 660, PostgreSqlParser.RULE_opt_float);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6738;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 6739;
            this.match(PostgreSqlParser.Integral);
            this.state = 6740;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bit(): BitContext {
        let localContext = new BitContext(this.context, this.state);
        this.enterRule(localContext, 662, PostgreSqlParser.RULE_bit);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6742;
            this.match(PostgreSqlParser.KW_BIT);
            this.state = 6744;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 915, this.context) ) {
            case 1:
                {
                this.state = 6743;
                this.match(PostgreSqlParser.KW_VARYING);
                }
                break;
            }
            this.state = 6747;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 916, this.context) ) {
            case 1:
                {
                this.state = 6746;
                this.execute_param_clause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public character(): CharacterContext {
        let localContext = new CharacterContext(this.context, this.state);
        this.enterRule(localContext, 664, PostgreSqlParser.RULE_character);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6759;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_NCHAR:
                {
                this.state = 6749;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & 32771) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6751;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 917, this.context) ) {
                case 1:
                    {
                    this.state = 6750;
                    this.match(PostgreSqlParser.KW_VARYING);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_VARCHAR:
                {
                this.state = 6753;
                this.match(PostgreSqlParser.KW_VARCHAR);
                }
                break;
            case PostgreSqlParser.KW_NATIONAL:
                {
                this.state = 6754;
                this.match(PostgreSqlParser.KW_NATIONAL);
                this.state = 6755;
                _la = this.tokenStream.LA(1);
                if(!(_la === 391 || _la === 392)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6757;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 918, this.context) ) {
                case 1:
                    {
                    this.state = 6756;
                    this.match(PostgreSqlParser.KW_VARYING);
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 6762;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 920, this.context) ) {
            case 1:
                {
                this.state = 6761;
                this.opt_float();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constdatetime(): ConstdatetimeContext {
        let localContext = new ConstdatetimeContext(this.context, this.state);
        this.enterRule(localContext, 666, PostgreSqlParser.RULE_constdatetime);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6764;
            _la = this.tokenStream.LA(1);
            if(!(_la === 418 || _la === 419)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6766;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 921, this.context) ) {
            case 1:
                {
                this.state = 6765;
                this.opt_float();
                }
                break;
            }
            this.state = 6771;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 922, this.context) ) {
            case 1:
                {
                this.state = 6768;
                _la = this.tokenStream.LA(1);
                if(!(_la === 105 || _la === 379)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6769;
                this.match(PostgreSqlParser.KW_TIME);
                this.state = 6770;
                this.match(PostgreSqlParser.KW_ZONE);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_interval(): Opt_intervalContext {
        let localContext = new Opt_intervalContext(this.context, this.state);
        this.enterRule(localContext, 668, PostgreSqlParser.RULE_opt_interval);
        try {
            this.state = 6802;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_MONTH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6773;
                this.match(PostgreSqlParser.KW_MONTH);
                }
                break;
            case PostgreSqlParser.KW_SECOND:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6774;
                this.interval_second();
                }
                break;
            case PostgreSqlParser.KW_YEAR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6775;
                this.match(PostgreSqlParser.KW_YEAR);
                this.state = 6778;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 923, this.context) ) {
                case 1:
                    {
                    this.state = 6776;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 6777;
                    this.match(PostgreSqlParser.KW_MONTH);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_DAY:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6780;
                this.match(PostgreSqlParser.KW_DAY);
                this.state = 6787;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 925, this.context) ) {
                case 1:
                    {
                    this.state = 6781;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 6785;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_HOUR:
                        {
                        this.state = 6782;
                        this.match(PostgreSqlParser.KW_HOUR);
                        }
                        break;
                    case PostgreSqlParser.KW_MINUTE:
                        {
                        this.state = 6783;
                        this.match(PostgreSqlParser.KW_MINUTE);
                        }
                        break;
                    case PostgreSqlParser.KW_SECOND:
                        {
                        this.state = 6784;
                        this.interval_second();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_HOUR:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6789;
                this.match(PostgreSqlParser.KW_HOUR);
                this.state = 6795;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 927, this.context) ) {
                case 1:
                    {
                    this.state = 6790;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 6793;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_MINUTE:
                        {
                        this.state = 6791;
                        this.match(PostgreSqlParser.KW_MINUTE);
                        }
                        break;
                    case PostgreSqlParser.KW_SECOND:
                        {
                        this.state = 6792;
                        this.interval_second();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_MINUTE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6797;
                this.match(PostgreSqlParser.KW_MINUTE);
                this.state = 6800;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 928, this.context) ) {
                case 1:
                    {
                    this.state = 6798;
                    this.match(PostgreSqlParser.KW_TO);
                    this.state = 6799;
                    this.interval_second();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval_second(): Interval_secondContext {
        let localContext = new Interval_secondContext(this.context, this.state);
        this.enterRule(localContext, 670, PostgreSqlParser.RULE_interval_second);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6804;
            this.match(PostgreSqlParser.KW_SECOND);
            this.state = 6806;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 930, this.context) ) {
            case 1:
                {
                this.state = 6805;
                this.opt_float();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 672, PostgreSqlParser.RULE_comparisonOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6808;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 44237824) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 674, PostgreSqlParser.RULE_expression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6810;
            this.booleanExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public booleanExpression(): BooleanExpressionContext;
    public booleanExpression(_p: number): BooleanExpressionContext;
    public booleanExpression(_p?: number): BooleanExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new BooleanExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 676;
        this.enterRecursionRule(localContext, 676, PostgreSqlParser.RULE_booleanExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6819;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.PARAM:
            case PostgreSqlParser.Operator:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_CASE:
            case PostgreSqlParser.KW_CAST:
            case PostgreSqlParser.KW_CURRENT_CATALOG:
            case PostgreSqlParser.KW_CURRENT_DATE:
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_TIME:
            case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_LOCALTIME:
            case PostgreSqlParser.KW_LOCALTIMESTAMP:
            case PostgreSqlParser.KW_NULL:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_UNIQUE:
            case PostgreSqlParser.KW_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.BinaryStringConstant:
            case PostgreSqlParser.HexadecimalStringConstant:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                localContext = new PredicatedContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 6813;
                (localContext as PredicatedContext)._valueExpression = this.valueExpression(0);
                this.state = 6815;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 931, this.context) ) {
                case 1:
                    {
                    this.state = 6814;
                    this.predicate((localContext as PredicatedContext)._valueExpression);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_NOT:
                {
                localContext = new LogicalNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6817;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 6818;
                this.booleanExpression(3);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 6829;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 934, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 6827;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 933, this.context) ) {
                    case 1:
                        {
                        localContext = new LogicalBinaryContext(new BooleanExpressionContext(parentContext, parentState));
                        (localContext as LogicalBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_booleanExpression);
                        this.state = 6821;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 6822;
                        (localContext as LogicalBinaryContext)._operator = this.match(PostgreSqlParser.KW_AND);
                        this.state = 6823;
                        (localContext as LogicalBinaryContext)._right = this.booleanExpression(3);
                        }
                        break;
                    case 2:
                        {
                        localContext = new LogicalBinaryContext(new BooleanExpressionContext(parentContext, parentState));
                        (localContext as LogicalBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_booleanExpression);
                        this.state = 6824;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 6825;
                        (localContext as LogicalBinaryContext)._operator = this.match(PostgreSqlParser.KW_OR);
                        this.state = 6826;
                        (localContext as LogicalBinaryContext)._right = this.booleanExpression(2);
                        }
                        break;
                    }
                    }
                }
                this.state = 6831;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 934, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public predicate(value: antlr.ParserRuleContext): PredicateContext {
        let localContext = new PredicateContext(this.context, this.state, value);
        this.enterRule(localContext, 678, PostgreSqlParser.RULE_predicate);
        let _la: number;
        try {
            this.state = 6903;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 946, this.context) ) {
            case 1:
                localContext = new ComparisonContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6832;
                this.comparisonOperator();
                this.state = 6833;
                (localContext as ComparisonContext)._right = this.valueExpression(0);
                }
                break;
            case 2:
                localContext = new QuantifiedComparisonContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6835;
                this.comparisonOperator();
                this.state = 6836;
                this.subquery_Op();
                this.state = 6837;
                this.sub_type();
                this.state = 6843;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 935, this.context) ) {
                case 1:
                    {
                    this.state = 6838;
                    this.select_with_parens();
                    }
                    break;
                case 2:
                    {
                    this.state = 6839;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 6840;
                    this.expression();
                    this.state = 6841;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new BetweenContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6846;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6845;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6848;
                this.match(PostgreSqlParser.KW_BETWEEN);
                this.state = 6849;
                (localContext as BetweenContext)._lower = this.valueExpression(0);
                this.state = 6850;
                this.match(PostgreSqlParser.KW_AND);
                this.state = 6851;
                (localContext as BetweenContext)._upper = this.valueExpression(0);
                }
                break;
            case 4:
                localContext = new InListContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6854;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6853;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6856;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 6857;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6858;
                this.expression();
                this.state = 6863;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 6859;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 6860;
                    this.expression();
                    }
                    }
                    this.state = 6865;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 6866;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 5:
                localContext = new InSubqueryContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6869;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6868;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6871;
                this.match(PostgreSqlParser.KW_IN);
                this.state = 6872;
                this.select_with_parens();
                }
                break;
            case 6:
                localContext = new LikeContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6874;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6873;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6884;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_LIKE:
                    {
                    this.state = 6876;
                    this.match(PostgreSqlParser.KW_LIKE);
                    }
                    break;
                case PostgreSqlParser.KW_ILIKE:
                    {
                    this.state = 6877;
                    this.match(PostgreSqlParser.KW_ILIKE);
                    }
                    break;
                case PostgreSqlParser.KW_SIMILAR:
                    {
                    this.state = 6878;
                    this.match(PostgreSqlParser.KW_SIMILAR);
                    this.state = 6879;
                    this.match(PostgreSqlParser.KW_TO);
                    }
                    break;
                case PostgreSqlParser.KW_BETWEEN:
                    {
                    this.state = 6880;
                    this.match(PostgreSqlParser.KW_BETWEEN);
                    this.state = 6882;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 91) {
                        {
                        this.state = 6881;
                        this.match(PostgreSqlParser.KW_SYMMETRIC);
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 6886;
                (localContext as LikeContext)._pattern = this.valueExpression(0);
                this.state = 6889;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 943, this.context) ) {
                case 1:
                    {
                    this.state = 6887;
                    this.match(PostgreSqlParser.KW_ESCAPE);
                    this.state = 6888;
                    (localContext as LikeContext)._escape = this.valueExpression(0);
                    }
                    break;
                }
                }
                break;
            case 7:
                localContext = new NullPredicateContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 6891;
                this.match(PostgreSqlParser.KW_IS);
                this.state = 6893;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6892;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6895;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            case 8:
                localContext = new DistinctFromContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 6896;
                this.match(PostgreSqlParser.KW_IS);
                this.state = 6898;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 6897;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 6900;
                this.match(PostgreSqlParser.KW_DISTINCT);
                this.state = 6901;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 6902;
                (localContext as DistinctFromContext)._right = this.valueExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 680;
        this.enterRecursionRule(localContext, 680, PostgreSqlParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6909;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 947, this.context) ) {
            case 1:
                {
                localContext = new ValueExpressionDefaultContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 6906;
                this.primaryExpression(0);
                }
                break;
            case 2:
                {
                localContext = new ArithmeticUnaryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 6907;
                (localContext as ArithmeticUnaryContext)._operator = this.tokenStream.LT(1);
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 13)) {
                    (localContext as ArithmeticUnaryContext)._operator = this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6908;
                this.valueExpression(4);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 6927;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 949, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 6925;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 948, this.context) ) {
                    case 1:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_valueExpression);
                        this.state = 6911;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 6912;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 134234624) !== 0))) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6913;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ArithmeticBinaryContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ArithmeticBinaryContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_valueExpression);
                        this.state = 6914;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 6915;
                        (localContext as ArithmeticBinaryContext)._operator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 12 || _la === 13)) {
                            (localContext as ArithmeticBinaryContext)._operator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 6916;
                        (localContext as ArithmeticBinaryContext)._right = this.valueExpression(3);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ConcatenationContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as ConcatenationContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_valueExpression);
                        this.state = 6917;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 6918;
                        this.match(PostgreSqlParser.CARET);
                        this.state = 6919;
                        (localContext as ConcatenationContext)._right = this.valueExpression(2);
                        }
                        break;
                    case 4:
                        {
                        localContext = new AtTimeZoneContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_valueExpression);
                        this.state = 6920;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 6921;
                        this.match(PostgreSqlParser.KW_AT);
                        this.state = 6922;
                        this.match(PostgreSqlParser.KW_TIME);
                        this.state = 6923;
                        this.match(PostgreSqlParser.KW_ZONE);
                        this.state = 6924;
                        this.expression();
                        }
                        break;
                    }
                    }
                }
                this.state = 6929;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 949, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public primaryExpression(): PrimaryExpressionContext;
    public primaryExpression(_p: number): PrimaryExpressionContext;
    public primaryExpression(_p?: number): PrimaryExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new PrimaryExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 682;
        this.enterRecursionRule(localContext, 682, PostgreSqlParser.RULE_primaryExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7018;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 960, this.context) ) {
            case 1:
                {
                this.state = 6931;
                _la = this.tokenStream.LA(1);
                if(!(_la === 98 || _la === 396)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6932;
                this.select_with_parens();
                }
                break;
            case 2:
                {
                this.state = 6933;
                this.match(PostgreSqlParser.KW_ARRAY);
                this.state = 6936;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 6934;
                    this.select_with_parens();
                    }
                    break;
                case PostgreSqlParser.OPEN_BRACKET:
                    {
                    this.state = 6935;
                    this.array_expr();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                {
                this.state = 6938;
                this.match(PostgreSqlParser.PARAM);
                this.state = 6939;
                this.opt_indirection();
                }
                break;
            case 4:
                {
                this.state = 6940;
                this.match(PostgreSqlParser.KW_GROUPING);
                this.state = 6941;
                this.execute_param_clause();
                }
                break;
            case 5:
                {
                this.state = 6942;
                this.match(PostgreSqlParser.Integral);
                }
                break;
            case 6:
                {
                this.state = 6943;
                this.match(PostgreSqlParser.Numeric);
                }
                break;
            case 7:
                {
                this.state = 6944;
                this.match(PostgreSqlParser.BinaryStringConstant);
                }
                break;
            case 8:
                {
                this.state = 6945;
                this.match(PostgreSqlParser.HexadecimalStringConstant);
                }
                break;
            case 9:
                {
                this.state = 6946;
                this.function_name();
                this.state = 6956;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6947;
                    this.sconst();
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 6948;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 6949;
                    this.func_arg_list();
                    this.state = 6951;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 83) {
                        {
                        this.state = 6950;
                        this.sort_clause();
                        }
                    }

                    this.state = 6953;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    this.state = 6954;
                    this.sconst();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 10:
                {
                this.state = 6959;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 190 || ((((_la - 388)) & ~0x1F) === 0 && ((1 << (_la - 388)) & 3525731551) !== 0) || _la === 423) {
                    {
                    this.state = 6958;
                    this.consttypename();
                    }
                }

                this.state = 6961;
                this.sconst();
                }
                break;
            case 11:
                {
                this.state = 6962;
                this.match(PostgreSqlParser.KW_INTERVAL);
                this.state = 6970;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 6963;
                    this.sconst();
                    this.state = 6965;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 954, this.context) ) {
                    case 1:
                        {
                        this.state = 6964;
                        this.opt_interval();
                        }
                        break;
                    }
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                    {
                    this.state = 6967;
                    this.opt_float();
                    this.state = 6968;
                    this.sconst();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 12:
                {
                this.state = 6972;
                this.match(PostgreSqlParser.KW_TRUE);
                }
                break;
            case 13:
                {
                this.state = 6973;
                this.match(PostgreSqlParser.KW_FALSE);
                }
                break;
            case 14:
                {
                this.state = 6974;
                this.match(PostgreSqlParser.KW_NULL);
                }
                break;
            case 15:
                {
                this.state = 6975;
                this.match(PostgreSqlParser.PLSQLVARIABLENAME);
                }
                break;
            case 16:
                {
                this.state = 6976;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 6977;
                localContext._a_expr_in_parens = this.expression();
                this.state = 6978;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 6979;
                this.opt_indirection();
                }
                break;
            case 17:
                {
                this.state = 6981;
                this.match(PostgreSqlParser.KW_CASE);
                this.state = 6983;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                    {
                    this.state = 6982;
                    this.expression();
                    }
                }

                this.state = 6986;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 6985;
                    this.when_clause();
                    }
                    }
                    this.state = 6988;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 102);
                this.state = 6992;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 58) {
                    {
                    this.state = 6990;
                    this.match(PostgreSqlParser.KW_ELSE);
                    this.state = 6991;
                    this.expression();
                    }
                }

                this.state = 6994;
                this.match(PostgreSqlParser.KW_END);
                }
                break;
            case 18:
                {
                this.state = 6996;
                this.func_expr();
                }
                break;
            case 19:
                {
                this.state = 6997;
                this.select_with_parens();
                this.state = 6999;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 959, this.context) ) {
                case 1:
                    {
                    this.state = 6998;
                    this.indirection();
                    }
                    break;
                }
                }
                break;
            case 20:
                {
                this.state = 7001;
                this.explicit_row();
                }
                break;
            case 21:
                {
                this.state = 7002;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7003;
                this.expression();
                this.state = 7004;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7005;
                this.expr_list();
                this.state = 7006;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case 22:
                {
                this.state = 7008;
                this.row();
                this.state = 7009;
                this.match(PostgreSqlParser.KW_OVERLAPS);
                this.state = 7010;
                this.row();
                }
                break;
            case 23:
                {
                this.state = 7012;
                this.qualified_name();
                }
                break;
            case 24:
                {
                this.state = 7013;
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 13)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7014;
                this.primaryExpression(5);
                }
                break;
            case 25:
                {
                this.state = 7015;
                this.qual_op();
                this.state = 7016;
                this.primaryExpression(2);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 7047;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 965, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this._parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 7045;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 964, this.context) ) {
                    case 1:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_primaryExpression);
                        this.state = 7020;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 7021;
                        this.mathop();
                        this.state = 7022;
                        this.primaryExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_primaryExpression);
                        this.state = 7024;
                        if (!(this.precpred(this.context, 6))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 6)");
                        }
                        this.state = 7025;
                        this.match(PostgreSqlParser.TYPECAST);
                        this.state = 7026;
                        this.typename();
                        }
                        break;
                    case 3:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_primaryExpression);
                        this.state = 7027;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 7028;
                        this.qual_op();
                        this.state = 7030;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 961, this.context) ) {
                        case 1:
                            {
                            this.state = 7029;
                            this.primaryExpression(0);
                            }
                            break;
                        }
                        }
                        break;
                    case 4:
                        {
                        localContext = new PrimaryExpressionContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSqlParser.RULE_primaryExpression);
                        this.state = 7032;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 7033;
                        this.match(PostgreSqlParser.KW_IS);
                        this.state = 7035;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 77) {
                            {
                            this.state = 7034;
                            this.match(PostgreSqlParser.KW_NOT);
                            }
                        }

                        this.state = 7043;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case PostgreSqlParser.KW_DISTINCT:
                            {
                            this.state = 7037;
                            this.match(PostgreSqlParser.KW_DISTINCT);
                            this.state = 7038;
                            this.match(PostgreSqlParser.KW_FROM);
                            this.state = 7039;
                            this.primaryExpression(0);
                            }
                            break;
                        case PostgreSqlParser.KW_OF:
                            {
                            this.state = 7040;
                            this.match(PostgreSqlParser.KW_OF);
                            this.state = 7041;
                            this.prep_type_clause();
                            }
                            break;
                        case PostgreSqlParser.KW_DOCUMENT:
                            {
                            this.state = 7042;
                            this.match(PostgreSqlParser.KW_DOCUMENT);
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                        break;
                    }
                    }
                }
                this.state = 7049;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 965, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public func_application(): Func_applicationContext {
        let localContext = new Func_applicationContext(this.context, this.state);
        this.enterRule(localContext, 684, PostgreSqlParser.RULE_func_application);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7050;
            this.function_name();
            this.state = 7076;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 971, this.context) ) {
            case 1:
                {
                this.state = 7051;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7073;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                case PostgreSqlParser.PLUS:
                case PostgreSqlParser.MINUS:
                case PostgreSqlParser.PARAM:
                case PostgreSqlParser.Operator:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_CASE:
                case PostgreSqlParser.KW_CAST:
                case PostgreSqlParser.KW_CURRENT_CATALOG:
                case PostgreSqlParser.KW_CURRENT_DATE:
                case PostgreSqlParser.KW_CURRENT_ROLE:
                case PostgreSqlParser.KW_CURRENT_TIME:
                case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
                case PostgreSqlParser.KW_CURRENT_USER:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_FALSE:
                case PostgreSqlParser.KW_LOCALTIME:
                case PostgreSqlParser.KW_LOCALTIMESTAMP:
                case PostgreSqlParser.KW_NOT:
                case PostgreSqlParser.KW_NULL:
                case PostgreSqlParser.KW_SESSION_USER:
                case PostgreSqlParser.KW_TRUE:
                case PostgreSqlParser.KW_UNIQUE:
                case PostgreSqlParser.KW_USER:
                case PostgreSqlParser.KW_AUTHORIZATION:
                case PostgreSqlParser.KW_BINARY:
                case PostgreSqlParser.KW_COLLATION:
                case PostgreSqlParser.KW_CONCURRENTLY:
                case PostgreSqlParser.KW_CROSS:
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                case PostgreSqlParser.KW_FREEZE:
                case PostgreSqlParser.KW_FULL:
                case PostgreSqlParser.KW_ILIKE:
                case PostgreSqlParser.KW_INNER:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_ISNULL:
                case PostgreSqlParser.KW_JOIN:
                case PostgreSqlParser.KW_LEFT:
                case PostgreSqlParser.KW_LIKE:
                case PostgreSqlParser.KW_NATURAL:
                case PostgreSqlParser.KW_NOTNULL:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_OVERLAPS:
                case PostgreSqlParser.KW_RIGHT:
                case PostgreSqlParser.KW_SIMILAR:
                case PostgreSqlParser.KW_VERBOSE:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_TABLESAMPLE:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.BinaryStringConstant:
                case PostgreSqlParser.HexadecimalStringConstant:
                case PostgreSqlParser.Integral:
                case PostgreSqlParser.Numeric:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 7052;
                    this.func_arg_list();
                    this.state = 7056;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 6) {
                        {
                        this.state = 7053;
                        this.match(PostgreSqlParser.COMMA);
                        this.state = 7054;
                        this.match(PostgreSqlParser.KW_VARIADIC);
                        this.state = 7055;
                        this.func_arg_expr();
                        }
                    }

                    this.state = 7059;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 83) {
                        {
                        this.state = 7058;
                        this.sort_clause();
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.KW_VARIADIC:
                    {
                    this.state = 7061;
                    this.match(PostgreSqlParser.KW_VARIADIC);
                    this.state = 7062;
                    this.func_arg_expr();
                    this.state = 7064;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 83) {
                        {
                        this.state = 7063;
                        this.sort_clause();
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.KW_ALL:
                case PostgreSqlParser.KW_DISTINCT:
                    {
                    this.state = 7066;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 30 || _la === 56)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 7067;
                    this.func_arg_list();
                    this.state = 7069;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 83) {
                        {
                        this.state = 7068;
                        this.sort_clause();
                        }
                    }

                    }
                    break;
                case PostgreSqlParser.STAR:
                    {
                    this.state = 7071;
                    this.match(PostgreSqlParser.STAR);
                    }
                    break;
                case PostgreSqlParser.CLOSE_PAREN:
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 7075;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_expr(): Func_exprContext {
        let localContext = new Func_exprContext(this.context, this.state);
        this.enterRule(localContext, 686, PostgreSqlParser.RULE_func_expr);
        try {
            this.state = 7103;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 976, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7078;
                this.func_application();
                this.state = 7085;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 972, this.context) ) {
                case 1:
                    {
                    this.state = 7079;
                    this.match(PostgreSqlParser.KW_WITHIN);
                    this.state = 7080;
                    this.match(PostgreSqlParser.KW_GROUP);
                    this.state = 7081;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 7082;
                    this.sort_clause();
                    this.state = 7083;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                this.state = 7093;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 973, this.context) ) {
                case 1:
                    {
                    this.state = 7087;
                    this.match(PostgreSqlParser.KW_FILTER);
                    this.state = 7088;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 7089;
                    this.match(PostgreSqlParser.KW_WHERE);
                    this.state = 7090;
                    this.expression();
                    this.state = 7091;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                    break;
                }
                this.state = 7100;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 975, this.context) ) {
                case 1:
                    {
                    this.state = 7095;
                    this.match(PostgreSqlParser.KW_OVER);
                    this.state = 7098;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.OPEN_PAREN:
                        {
                        this.state = 7096;
                        this.window_specification();
                        }
                        break;
                    case PostgreSqlParser.KW_DEFAULT:
                    case PostgreSqlParser.KW_IS:
                    case PostgreSqlParser.KW_OUTER:
                    case PostgreSqlParser.KW_OVER:
                    case PostgreSqlParser.KW_ABORT:
                    case PostgreSqlParser.KW_ABSOLUTE:
                    case PostgreSqlParser.KW_ACCESS:
                    case PostgreSqlParser.KW_ACTION:
                    case PostgreSqlParser.KW_ADD:
                    case PostgreSqlParser.KW_ADMIN:
                    case PostgreSqlParser.KW_AFTER:
                    case PostgreSqlParser.KW_AGGREGATE:
                    case PostgreSqlParser.KW_ALSO:
                    case PostgreSqlParser.KW_ALTER:
                    case PostgreSqlParser.KW_ALWAYS:
                    case PostgreSqlParser.KW_ASSERTION:
                    case PostgreSqlParser.KW_ASSIGNMENT:
                    case PostgreSqlParser.KW_AT:
                    case PostgreSqlParser.KW_ATTRIBUTE:
                    case PostgreSqlParser.KW_BACKWARD:
                    case PostgreSqlParser.KW_BEFORE:
                    case PostgreSqlParser.KW_BEGIN:
                    case PostgreSqlParser.KW_BY:
                    case PostgreSqlParser.KW_CACHE:
                    case PostgreSqlParser.KW_CALLED:
                    case PostgreSqlParser.KW_CASCADE:
                    case PostgreSqlParser.KW_CASCADED:
                    case PostgreSqlParser.KW_CATALOG:
                    case PostgreSqlParser.KW_CHAIN:
                    case PostgreSqlParser.KW_CHARACTERISTICS:
                    case PostgreSqlParser.KW_CHECKPOINT:
                    case PostgreSqlParser.KW_CLASS:
                    case PostgreSqlParser.KW_CLOSE:
                    case PostgreSqlParser.KW_CLUSTER:
                    case PostgreSqlParser.KW_COMMENT:
                    case PostgreSqlParser.KW_COMMENTS:
                    case PostgreSqlParser.KW_COMMIT:
                    case PostgreSqlParser.KW_COMMITTED:
                    case PostgreSqlParser.KW_CONFIGURATION:
                    case PostgreSqlParser.KW_CONNECTION:
                    case PostgreSqlParser.KW_CONSTRAINTS:
                    case PostgreSqlParser.KW_CONTENT:
                    case PostgreSqlParser.KW_CONTINUE:
                    case PostgreSqlParser.KW_CONVERSION:
                    case PostgreSqlParser.KW_COPY:
                    case PostgreSqlParser.KW_COST:
                    case PostgreSqlParser.KW_CSV:
                    case PostgreSqlParser.KW_CURSOR:
                    case PostgreSqlParser.KW_CYCLE:
                    case PostgreSqlParser.KW_DATA:
                    case PostgreSqlParser.KW_DATABASE:
                    case PostgreSqlParser.KW_DAY:
                    case PostgreSqlParser.KW_DEALLOCATE:
                    case PostgreSqlParser.KW_DECLARE:
                    case PostgreSqlParser.KW_DEFAULTS:
                    case PostgreSqlParser.KW_DEFERRED:
                    case PostgreSqlParser.KW_DEFINER:
                    case PostgreSqlParser.KW_DELETE:
                    case PostgreSqlParser.KW_DELIMITER:
                    case PostgreSqlParser.KW_DELIMITERS:
                    case PostgreSqlParser.KW_DICTIONARY:
                    case PostgreSqlParser.KW_DISABLE:
                    case PostgreSqlParser.KW_DISCARD:
                    case PostgreSqlParser.KW_DOCUMENT:
                    case PostgreSqlParser.KW_DOMAIN:
                    case PostgreSqlParser.KW_DOUBLE:
                    case PostgreSqlParser.KW_DROP:
                    case PostgreSqlParser.KW_EACH:
                    case PostgreSqlParser.KW_ENABLE:
                    case PostgreSqlParser.KW_ENCODING:
                    case PostgreSqlParser.KW_ENCRYPTED:
                    case PostgreSqlParser.KW_ENUM:
                    case PostgreSqlParser.KW_ESCAPE:
                    case PostgreSqlParser.KW_EVENT:
                    case PostgreSqlParser.KW_EXCLUDE:
                    case PostgreSqlParser.KW_EXCLUDING:
                    case PostgreSqlParser.KW_EXCLUSIVE:
                    case PostgreSqlParser.KW_EXECUTE:
                    case PostgreSqlParser.KW_EXPLAIN:
                    case PostgreSqlParser.KW_EXTENSION:
                    case PostgreSqlParser.KW_EXTERNAL:
                    case PostgreSqlParser.KW_FAMILY:
                    case PostgreSqlParser.KW_FIRST:
                    case PostgreSqlParser.KW_FOLLOWING:
                    case PostgreSqlParser.KW_FORCE:
                    case PostgreSqlParser.KW_FORWARD:
                    case PostgreSqlParser.KW_FUNCTION:
                    case PostgreSqlParser.KW_FUNCTIONS:
                    case PostgreSqlParser.KW_GLOBAL:
                    case PostgreSqlParser.KW_GRANTED:
                    case PostgreSqlParser.KW_HANDLER:
                    case PostgreSqlParser.KW_HEADER:
                    case PostgreSqlParser.KW_HOLD:
                    case PostgreSqlParser.KW_HOUR:
                    case PostgreSqlParser.KW_IDENTITY:
                    case PostgreSqlParser.KW_IF:
                    case PostgreSqlParser.KW_IMMEDIATE:
                    case PostgreSqlParser.KW_IMMUTABLE:
                    case PostgreSqlParser.KW_IMPLICIT:
                    case PostgreSqlParser.KW_INCLUDING:
                    case PostgreSqlParser.KW_INCREMENT:
                    case PostgreSqlParser.KW_INDEX:
                    case PostgreSqlParser.KW_INDEXES:
                    case PostgreSqlParser.KW_INHERIT:
                    case PostgreSqlParser.KW_INHERITS:
                    case PostgreSqlParser.KW_INLINE:
                    case PostgreSqlParser.KW_INSENSITIVE:
                    case PostgreSqlParser.KW_INSERT:
                    case PostgreSqlParser.KW_INSTEAD:
                    case PostgreSqlParser.KW_INVOKER:
                    case PostgreSqlParser.KW_ISOLATION:
                    case PostgreSqlParser.KW_KEY:
                    case PostgreSqlParser.KW_LABEL:
                    case PostgreSqlParser.KW_LANGUAGE:
                    case PostgreSqlParser.KW_LARGE:
                    case PostgreSqlParser.KW_LAST:
                    case PostgreSqlParser.KW_LEAKPROOF:
                    case PostgreSqlParser.KW_LEVEL:
                    case PostgreSqlParser.KW_LISTEN:
                    case PostgreSqlParser.KW_LOAD:
                    case PostgreSqlParser.KW_LOCAL:
                    case PostgreSqlParser.KW_LOCATION:
                    case PostgreSqlParser.KW_LOCK:
                    case PostgreSqlParser.KW_MAPPING:
                    case PostgreSqlParser.KW_MATCH:
                    case PostgreSqlParser.KW_MATERIALIZED:
                    case PostgreSqlParser.KW_MAXVALUE:
                    case PostgreSqlParser.KW_MINUTE:
                    case PostgreSqlParser.KW_MINVALUE:
                    case PostgreSqlParser.KW_MODE:
                    case PostgreSqlParser.KW_MONTH:
                    case PostgreSqlParser.KW_MOVE:
                    case PostgreSqlParser.KW_NAME:
                    case PostgreSqlParser.KW_NAMES:
                    case PostgreSqlParser.KW_NEXT:
                    case PostgreSqlParser.KW_NO:
                    case PostgreSqlParser.KW_NOTHING:
                    case PostgreSqlParser.KW_NOTIFY:
                    case PostgreSqlParser.KW_NOWAIT:
                    case PostgreSqlParser.KW_NULLS:
                    case PostgreSqlParser.KW_OBJECT:
                    case PostgreSqlParser.KW_OF:
                    case PostgreSqlParser.KW_OFF:
                    case PostgreSqlParser.KW_OIDS:
                    case PostgreSqlParser.KW_OPERATOR:
                    case PostgreSqlParser.KW_OPTION:
                    case PostgreSqlParser.KW_OPTIONS:
                    case PostgreSqlParser.KW_OWNED:
                    case PostgreSqlParser.KW_OWNER:
                    case PostgreSqlParser.KW_PARSER:
                    case PostgreSqlParser.KW_PARTIAL:
                    case PostgreSqlParser.KW_PARTITION:
                    case PostgreSqlParser.KW_PASSING:
                    case PostgreSqlParser.KW_PASSWORD:
                    case PostgreSqlParser.KW_PLANS:
                    case PostgreSqlParser.KW_PRECEDING:
                    case PostgreSqlParser.KW_PREPARE:
                    case PostgreSqlParser.KW_PREPARED:
                    case PostgreSqlParser.KW_PRESERVE:
                    case PostgreSqlParser.KW_PRIOR:
                    case PostgreSqlParser.KW_PRIVILEGES:
                    case PostgreSqlParser.KW_PROCEDURAL:
                    case PostgreSqlParser.KW_PROCEDURE:
                    case PostgreSqlParser.KW_PROGRAM:
                    case PostgreSqlParser.KW_QUOTE:
                    case PostgreSqlParser.KW_RANGE:
                    case PostgreSqlParser.KW_READ:
                    case PostgreSqlParser.KW_REASSIGN:
                    case PostgreSqlParser.KW_RECHECK:
                    case PostgreSqlParser.KW_RECURSIVE:
                    case PostgreSqlParser.KW_REF:
                    case PostgreSqlParser.KW_REFRESH:
                    case PostgreSqlParser.KW_REINDEX:
                    case PostgreSqlParser.KW_RELATIVE:
                    case PostgreSqlParser.KW_RELEASE:
                    case PostgreSqlParser.KW_RENAME:
                    case PostgreSqlParser.KW_REPEATABLE:
                    case PostgreSqlParser.KW_REPLACE:
                    case PostgreSqlParser.KW_REPLICA:
                    case PostgreSqlParser.KW_RESET:
                    case PostgreSqlParser.KW_RESTART:
                    case PostgreSqlParser.KW_RESTRICT:
                    case PostgreSqlParser.KW_RETURNS:
                    case PostgreSqlParser.KW_REVOKE:
                    case PostgreSqlParser.KW_ROLE:
                    case PostgreSqlParser.KW_ROLLBACK:
                    case PostgreSqlParser.KW_ROWS:
                    case PostgreSqlParser.KW_RULE:
                    case PostgreSqlParser.KW_SAVEPOINT:
                    case PostgreSqlParser.KW_SCHEMA:
                    case PostgreSqlParser.KW_SCROLL:
                    case PostgreSqlParser.KW_SEARCH:
                    case PostgreSqlParser.KW_SECOND:
                    case PostgreSqlParser.KW_SECURITY:
                    case PostgreSqlParser.KW_SEQUENCE:
                    case PostgreSqlParser.KW_SEQUENCES:
                    case PostgreSqlParser.KW_SERIALIZABLE:
                    case PostgreSqlParser.KW_SERVER:
                    case PostgreSqlParser.KW_SESSION:
                    case PostgreSqlParser.KW_SET:
                    case PostgreSqlParser.KW_SHARE:
                    case PostgreSqlParser.KW_SHOW:
                    case PostgreSqlParser.KW_SIMPLE:
                    case PostgreSqlParser.KW_SNAPSHOT:
                    case PostgreSqlParser.KW_STABLE:
                    case PostgreSqlParser.KW_STANDALONE:
                    case PostgreSqlParser.KW_START:
                    case PostgreSqlParser.KW_STATEMENT:
                    case PostgreSqlParser.KW_STATISTICS:
                    case PostgreSqlParser.KW_STDIN:
                    case PostgreSqlParser.KW_STDOUT:
                    case PostgreSqlParser.KW_STORAGE:
                    case PostgreSqlParser.KW_STRICT:
                    case PostgreSqlParser.KW_STRIP:
                    case PostgreSqlParser.KW_SYSID:
                    case PostgreSqlParser.KW_SYSTEM:
                    case PostgreSqlParser.KW_TABLES:
                    case PostgreSqlParser.KW_TABLESPACE:
                    case PostgreSqlParser.KW_TEMP:
                    case PostgreSqlParser.KW_TEMPLATE:
                    case PostgreSqlParser.KW_TEMPORARY:
                    case PostgreSqlParser.KW_TEXT:
                    case PostgreSqlParser.KW_TRANSACTION:
                    case PostgreSqlParser.KW_TRIGGER:
                    case PostgreSqlParser.KW_TRUNCATE:
                    case PostgreSqlParser.KW_TRUSTED:
                    case PostgreSqlParser.KW_TYPE:
                    case PostgreSqlParser.KW_TYPES:
                    case PostgreSqlParser.KW_UNBOUNDED:
                    case PostgreSqlParser.KW_UNCOMMITTED:
                    case PostgreSqlParser.KW_UNENCRYPTED:
                    case PostgreSqlParser.KW_UNKNOWN:
                    case PostgreSqlParser.KW_UNLISTEN:
                    case PostgreSqlParser.KW_UNLOGGED:
                    case PostgreSqlParser.KW_UNTIL:
                    case PostgreSqlParser.KW_UPDATE:
                    case PostgreSqlParser.KW_VACUUM:
                    case PostgreSqlParser.KW_VALID:
                    case PostgreSqlParser.KW_VALIDATE:
                    case PostgreSqlParser.KW_VALIDATOR:
                    case PostgreSqlParser.KW_VARYING:
                    case PostgreSqlParser.KW_VERSION:
                    case PostgreSqlParser.KW_VIEW:
                    case PostgreSqlParser.KW_VOLATILE:
                    case PostgreSqlParser.KW_WHITESPACE:
                    case PostgreSqlParser.KW_WITHOUT:
                    case PostgreSqlParser.KW_WORK:
                    case PostgreSqlParser.KW_WRAPPER:
                    case PostgreSqlParser.KW_WRITE:
                    case PostgreSqlParser.KW_XML:
                    case PostgreSqlParser.KW_YEAR:
                    case PostgreSqlParser.KW_YES:
                    case PostgreSqlParser.KW_ZONE:
                    case PostgreSqlParser.KW_BETWEEN:
                    case PostgreSqlParser.KW_BIGINT:
                    case PostgreSqlParser.KW_BIT:
                    case PostgreSqlParser.KW_BOOLEAN:
                    case PostgreSqlParser.KW_CHAR:
                    case PostgreSqlParser.KW_CHARACTER:
                    case PostgreSqlParser.KW_COALESCE:
                    case PostgreSqlParser.KW_DEC:
                    case PostgreSqlParser.KW_DECIMAL:
                    case PostgreSqlParser.KW_EXISTS:
                    case PostgreSqlParser.KW_EXTRACT:
                    case PostgreSqlParser.KW_FLOAT:
                    case PostgreSqlParser.KW_GREATEST:
                    case PostgreSqlParser.KW_INOUT:
                    case PostgreSqlParser.KW_INT:
                    case PostgreSqlParser.KW_INTEGER:
                    case PostgreSqlParser.KW_INTERVAL:
                    case PostgreSqlParser.KW_LEAST:
                    case PostgreSqlParser.KW_NATIONAL:
                    case PostgreSqlParser.KW_NCHAR:
                    case PostgreSqlParser.KW_NONE:
                    case PostgreSqlParser.KW_NULLIF:
                    case PostgreSqlParser.KW_NUMERIC:
                    case PostgreSqlParser.KW_OVERLAY:
                    case PostgreSqlParser.KW_POSITION:
                    case PostgreSqlParser.KW_PRECISION:
                    case PostgreSqlParser.KW_REAL:
                    case PostgreSqlParser.KW_ROW:
                    case PostgreSqlParser.KW_SETOF:
                    case PostgreSqlParser.KW_SMALLINT:
                    case PostgreSqlParser.KW_SUBSTRING:
                    case PostgreSqlParser.KW_TIME:
                    case PostgreSqlParser.KW_TIMESTAMP:
                    case PostgreSqlParser.KW_TREAT:
                    case PostgreSqlParser.KW_TRIM:
                    case PostgreSqlParser.KW_VALUES:
                    case PostgreSqlParser.KW_VARCHAR:
                    case PostgreSqlParser.KW_XMLATTRIBUTES:
                    case PostgreSqlParser.KW_XMLCONCAT:
                    case PostgreSqlParser.KW_XMLELEMENT:
                    case PostgreSqlParser.KW_XMLEXISTS:
                    case PostgreSqlParser.KW_XMLFOREST:
                    case PostgreSqlParser.KW_XMLPARSE:
                    case PostgreSqlParser.KW_XMLPI:
                    case PostgreSqlParser.KW_XMLROOT:
                    case PostgreSqlParser.KW_XMLSERIALIZE:
                    case PostgreSqlParser.KW_CALL:
                    case PostgreSqlParser.KW_CURRENT:
                    case PostgreSqlParser.KW_ATTACH:
                    case PostgreSqlParser.KW_DETACH:
                    case PostgreSqlParser.KW_EXPRESSION:
                    case PostgreSqlParser.KW_GENERATED:
                    case PostgreSqlParser.KW_LOGGED:
                    case PostgreSqlParser.KW_STORED:
                    case PostgreSqlParser.KW_INCLUDE:
                    case PostgreSqlParser.KW_ROUTINE:
                    case PostgreSqlParser.KW_TRANSFORM:
                    case PostgreSqlParser.KW_IMPORT:
                    case PostgreSqlParser.KW_POLICY:
                    case PostgreSqlParser.KW_METHOD:
                    case PostgreSqlParser.KW_REFERENCING:
                    case PostgreSqlParser.KW_NEW:
                    case PostgreSqlParser.KW_OLD:
                    case PostgreSqlParser.KW_VALUE:
                    case PostgreSqlParser.KW_SUBSCRIPTION:
                    case PostgreSqlParser.KW_PUBLICATION:
                    case PostgreSqlParser.KW_OUT:
                    case PostgreSqlParser.KW_ROUTINES:
                    case PostgreSqlParser.KW_SCHEMAS:
                    case PostgreSqlParser.KW_PROCEDURES:
                    case PostgreSqlParser.KW_INPUT:
                    case PostgreSqlParser.KW_SUPPORT:
                    case PostgreSqlParser.KW_PARALLEL:
                    case PostgreSqlParser.KW_SQL:
                    case PostgreSqlParser.KW_DEPENDS:
                    case PostgreSqlParser.KW_OVERRIDING:
                    case PostgreSqlParser.KW_CONFLICT:
                    case PostgreSqlParser.KW_SKIP:
                    case PostgreSqlParser.KW_LOCKED:
                    case PostgreSqlParser.KW_TIES:
                    case PostgreSqlParser.KW_ROLLUP:
                    case PostgreSqlParser.KW_CUBE:
                    case PostgreSqlParser.KW_GROUPING:
                    case PostgreSqlParser.KW_SETS:
                    case PostgreSqlParser.KW_ORDINALITY:
                    case PostgreSqlParser.KW_XMLTABLE:
                    case PostgreSqlParser.KW_COLUMNS:
                    case PostgreSqlParser.KW_XMLNAMESPACES:
                    case PostgreSqlParser.KW_ROWTYPE:
                    case PostgreSqlParser.KW_NORMALIZED:
                    case PostgreSqlParser.KW_WITHIN:
                    case PostgreSqlParser.KW_FILTER:
                    case PostgreSqlParser.KW_GROUPS:
                    case PostgreSqlParser.KW_OTHERS:
                    case PostgreSqlParser.KW_NFC:
                    case PostgreSqlParser.KW_NFD:
                    case PostgreSqlParser.KW_NFKC:
                    case PostgreSqlParser.KW_NFKD:
                    case PostgreSqlParser.KW_UESCAPE:
                    case PostgreSqlParser.KW_VIEWS:
                    case PostgreSqlParser.KW_NORMALIZE:
                    case PostgreSqlParser.KW_DUMP:
                    case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                    case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                    case PostgreSqlParser.KW_ERROR:
                    case PostgreSqlParser.KW_USE_VARIABLE:
                    case PostgreSqlParser.KW_USE_COLUMN:
                    case PostgreSqlParser.KW_ALIAS:
                    case PostgreSqlParser.KW_CONSTANT:
                    case PostgreSqlParser.KW_PERFORM:
                    case PostgreSqlParser.KW_GET:
                    case PostgreSqlParser.KW_DIAGNOSTICS:
                    case PostgreSqlParser.KW_STACKED:
                    case PostgreSqlParser.KW_ELSIF:
                    case PostgreSqlParser.KW_REVERSE:
                    case PostgreSqlParser.KW_SLICE:
                    case PostgreSqlParser.KW_EXIT:
                    case PostgreSqlParser.KW_RETURN:
                    case PostgreSqlParser.KW_QUERY:
                    case PostgreSqlParser.KW_RAISE:
                    case PostgreSqlParser.KW_SQLSTATE:
                    case PostgreSqlParser.KW_DEBUG:
                    case PostgreSqlParser.KW_LOG:
                    case PostgreSqlParser.KW_INFO:
                    case PostgreSqlParser.KW_NOTICE:
                    case PostgreSqlParser.KW_WARNING:
                    case PostgreSqlParser.KW_EXCEPTION:
                    case PostgreSqlParser.KW_ASSERT:
                    case PostgreSqlParser.KW_OPEN:
                    case PostgreSqlParser.KW_PUBLIC:
                    case PostgreSqlParser.KW_SKIP_LOCKED:
                    case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                    case PostgreSqlParser.Identifier:
                    case PostgreSqlParser.QuotedIdentifier:
                    case PostgreSqlParser.UnicodeQuotedIdentifier:
                    case PostgreSqlParser.StringConstant:
                    case PostgreSqlParser.UnicodeEscapeStringConstant:
                    case PostgreSqlParser.BeginDollarStringConstant:
                    case PostgreSqlParser.PLSQLVARIABLENAME:
                    case PostgreSqlParser.PLSQLIDENTIFIER:
                    case PostgreSqlParser.EscapeStringConstant:
                        {
                        this.state = 7097;
                        this.colid();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7102;
                this.func_expr_common_subexpr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_expr_windowless(): Func_expr_windowlessContext {
        let localContext = new Func_expr_windowlessContext(this.context, this.state);
        this.enterRule(localContext, 688, PostgreSqlParser.RULE_func_expr_windowless);
        try {
            this.state = 7107;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 977, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7105;
                this.func_application();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7106;
                this.func_expr_common_subexpr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_expr_common_subexpr(): Func_expr_common_subexprContext {
        let localContext = new Func_expr_common_subexprContext(this.context, this.state);
        this.enterRule(localContext, 690, PostgreSqlParser.RULE_func_expr_common_subexpr);
        let _la: number;
        try {
            this.state = 7283;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_COLLATION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7109;
                this.match(PostgreSqlParser.KW_COLLATION);
                this.state = 7110;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 7111;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7112;
                this.expression();
                this.state = 7113;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_DATE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7115;
                this.match(PostgreSqlParser.KW_CURRENT_DATE);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_TIME:
            case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
            case PostgreSqlParser.KW_LOCALTIME:
            case PostgreSqlParser.KW_LOCALTIMESTAMP:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7116;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 50)) & ~0x1F) === 0 && ((1 << (_la - 50)) & 100663299) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7118;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 978, this.context) ) {
                case 1:
                    {
                    this.state = 7117;
                    this.opt_float();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_CURRENT_ROLE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7120;
                this.match(PostgreSqlParser.KW_CURRENT_ROLE);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_USER:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7121;
                this.match(PostgreSqlParser.KW_CURRENT_USER);
                }
                break;
            case PostgreSqlParser.KW_SESSION_USER:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7122;
                this.match(PostgreSqlParser.KW_SESSION_USER);
                }
                break;
            case PostgreSqlParser.KW_USER:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7123;
                this.match(PostgreSqlParser.KW_USER);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_CATALOG:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7124;
                this.match(PostgreSqlParser.KW_CURRENT_CATALOG);
                }
                break;
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 7125;
                this.match(PostgreSqlParser.KW_CURRENT_SCHEMA);
                }
                break;
            case PostgreSqlParser.KW_CAST:
            case PostgreSqlParser.KW_TREAT:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 7126;
                _la = this.tokenStream.LA(1);
                if(!(_la === 41 || _la === 420)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7127;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7128;
                this.expression();
                this.state = 7129;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 7130;
                this.typename();
                this.state = 7131;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_EXTRACT:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 7133;
                this.match(PostgreSqlParser.KW_EXTRACT);
                this.state = 7134;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7139;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 32767) !== 0) || ((((_la - 433)) & ~0x1F) === 0 && ((1 << (_la - 433)) & 4291821567) !== 0) || ((((_la - 465)) & ~0x1F) === 0 && ((1 << (_la - 465)) & 4278187359) !== 0) || ((((_la - 497)) & ~0x1F) === 0 && ((1 << (_la - 497)) & 146800319) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                    {
                    this.state = 7135;
                    this.extract_arg();
                    this.state = 7136;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 7137;
                    this.expression();
                    }
                }

                this.state = 7141;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_NORMALIZE:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 7142;
                this.match(PostgreSqlParser.KW_NORMALIZE);
                this.state = 7143;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7144;
                this.expression();
                this.state = 7147;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 7145;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7146;
                    this.unicode_normal_form();
                    }
                }

                this.state = 7149;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_OVERLAY:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 7151;
                this.match(PostgreSqlParser.KW_OVERLAY);
                this.state = 7152;
                this.match(PostgreSqlParser.OPEN_PAREN);
                {
                this.state = 7153;
                this.expression();
                this.state = 7154;
                this.match(PostgreSqlParser.KW_PLACING);
                this.state = 7155;
                this.expression();
                this.state = 7156;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 7157;
                this.expression();
                this.state = 7160;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 7158;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 7159;
                    this.expression();
                    }
                }

                }
                this.state = 7162;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_POSITION:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 7164;
                this.match(PostgreSqlParser.KW_POSITION);
                this.state = 7165;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7170;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763019) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                    {
                    this.state = 7166;
                    this.primaryExpression(0);
                    this.state = 7167;
                    this.match(PostgreSqlParser.KW_IN);
                    this.state = 7168;
                    this.primaryExpression(0);
                    }
                }

                this.state = 7172;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_SUBSTRING:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 7173;
                this.match(PostgreSqlParser.KW_SUBSTRING);
                this.state = 7174;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7176;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                    {
                    this.state = 7175;
                    this.substr_list();
                    }
                }

                this.state = 7178;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_TRIM:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 7179;
                this.match(PostgreSqlParser.KW_TRIM);
                this.state = 7180;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7182;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 39 || _la === 73 || _la === 95) {
                    {
                    this.state = 7181;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 39 || _la === 73 || _la === 95)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                {
                this.state = 7188;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 986, this.context) ) {
                case 1:
                    {
                    this.state = 7185;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                        {
                        this.state = 7184;
                        this.expression();
                        }
                    }

                    this.state = 7187;
                    this.match(PostgreSqlParser.KW_FROM);
                    }
                    break;
                }
                this.state = 7190;
                this.expr_list();
                }
                this.state = 7192;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_NULLIF:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 7194;
                this.match(PostgreSqlParser.KW_NULLIF);
                this.state = 7195;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7196;
                this.expression();
                this.state = 7197;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7198;
                this.expression();
                this.state = 7199;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_XMLCONCAT:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 7201;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & 2113) !== 0) || _la === 425)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7202;
                this.execute_param_clause();
                }
                break;
            case PostgreSqlParser.KW_XMLELEMENT:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 7203;
                this.match(PostgreSqlParser.KW_XMLELEMENT);
                this.state = 7204;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7205;
                this.match(PostgreSqlParser.KW_NAME);
                this.state = 7206;
                this.collabel();
                this.state = 7216;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 7207;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7214;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 987, this.context) ) {
                    case 1:
                        {
                        {
                        this.state = 7208;
                        this.match(PostgreSqlParser.KW_XMLATTRIBUTES);
                        this.state = 7209;
                        this.match(PostgreSqlParser.OPEN_PAREN);
                        this.state = 7210;
                        this.xml_attribute_list();
                        this.state = 7211;
                        this.match(PostgreSqlParser.CLOSE_PAREN);
                        }
                        }
                        break;
                    case 2:
                        {
                        this.state = 7213;
                        this.expr_list();
                        }
                        break;
                    }
                    }
                }

                this.state = 7218;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLEXISTS:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 7220;
                this.match(PostgreSqlParser.KW_XMLEXISTS);
                this.state = 7221;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7222;
                this.primaryExpression(0);
                this.state = 7223;
                this.xmlexists_argument();
                this.state = 7224;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLFOREST:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 7226;
                this.match(PostgreSqlParser.KW_XMLFOREST);
                this.state = 7227;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7228;
                this.xml_attribute_list();
                this.state = 7229;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLPARSE:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 7231;
                this.match(PostgreSqlParser.KW_XMLPARSE);
                this.state = 7232;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7233;
                this.document_or_content();
                this.state = 7234;
                this.expression();
                this.state = 7237;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 292 || _la === 347) {
                    {
                    this.state = 7235;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 292 || _la === 347)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 7236;
                    this.match(PostgreSqlParser.KW_WHITESPACE);
                    }
                }

                this.state = 7239;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLPI:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 7241;
                this.match(PostgreSqlParser.KW_XMLPI);
                this.state = 7242;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7243;
                this.match(PostgreSqlParser.KW_NAME);
                this.state = 7244;
                this.collabel();
                this.state = 7247;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 7245;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7246;
                    this.expression();
                    }
                }

                this.state = 7249;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLROOT:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 7251;
                this.match(PostgreSqlParser.KW_XMLROOT);
                this.state = 7252;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7253;
                this.match(PostgreSqlParser.KW_XML);
                this.state = 7254;
                this.expression();
                this.state = 7255;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7256;
                this.match(PostgreSqlParser.KW_VERSION);
                this.state = 7260;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 991, this.context) ) {
                case 1:
                    {
                    {
                    this.state = 7257;
                    this.match(PostgreSqlParser.KW_NO);
                    this.state = 7258;
                    this.match(PostgreSqlParser.KW_VALUE);
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 7259;
                    this.expression();
                    }
                    break;
                }
                this.state = 7271;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 7262;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7263;
                    this.match(PostgreSqlParser.KW_STANDALONE);
                    this.state = 7269;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.KW_NO:
                    case PostgreSqlParser.KW_VALUE:
                        {
                        {
                        this.state = 7265;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 269) {
                            {
                            this.state = 7264;
                            this.match(PostgreSqlParser.KW_NO);
                            }
                        }

                        this.state = 7267;
                        this.match(PostgreSqlParser.KW_VALUE);
                        }
                        }
                        break;
                    case PostgreSqlParser.KW_YES:
                        {
                        this.state = 7268;
                        this.match(PostgreSqlParser.KW_YES);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }

                this.state = 7273;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_XMLSERIALIZE:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 7275;
                this.match(PostgreSqlParser.KW_XMLSERIALIZE);
                this.state = 7276;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7277;
                this.document_or_content();
                this.state = 7278;
                this.expression();
                this.state = 7279;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 7280;
                this.simpletypename();
                this.state = 7281;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_attribute_list(): Xml_attribute_listContext {
        let localContext = new Xml_attribute_listContext(this.context, this.state);
        this.enterRule(localContext, 692, PostgreSqlParser.RULE_xml_attribute_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7285;
            this.xml_attribute_el();
            this.state = 7290;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7286;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7287;
                this.xml_attribute_el();
                }
                }
                this.state = 7292;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_attribute_el(): Xml_attribute_elContext {
        let localContext = new Xml_attribute_elContext(this.context, this.state);
        this.enterRule(localContext, 694, PostgreSqlParser.RULE_xml_attribute_el);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7293;
            this.expression();
            this.state = 7296;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36) {
                {
                this.state = 7294;
                this.match(PostgreSqlParser.KW_AS);
                this.state = 7295;
                this.collabel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public document_or_content(): Document_or_contentContext {
        let localContext = new Document_or_contentContext(this.context, this.state);
        this.enterRule(localContext, 696, PostgreSqlParser.RULE_document_or_content);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7298;
            _la = this.tokenStream.LA(1);
            if(!(_la === 166 || _la === 188)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmlexists_argument(): Xmlexists_argumentContext {
        let localContext = new Xmlexists_argumentContext(this.context, this.state);
        this.enterRule(localContext, 698, PostgreSqlParser.RULE_xmlexists_argument);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7300;
            this.match(PostgreSqlParser.KW_PASSING);
            this.state = 7302;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 998, this.context) ) {
            case 1:
                {
                this.state = 7301;
                this.xml_passing_mech();
                }
                break;
            }
            this.state = 7304;
            this.primaryExpression(0);
            this.state = 7306;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 147) {
                {
                this.state = 7305;
                this.xml_passing_mech();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_passing_mech(): Xml_passing_mechContext {
        let localContext = new Xml_passing_mechContext(this.context, this.state);
        this.enterRule(localContext, 700, PostgreSqlParser.RULE_xml_passing_mech);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7308;
            this.match(PostgreSqlParser.KW_BY);
            this.state = 7309;
            _la = this.tokenStream.LA(1);
            if(!(_la === 304 || _la === 450)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_clause(): Window_clauseContext {
        let localContext = new Window_clauseContext(this.context, this.state);
        this.enterRule(localContext, 702, PostgreSqlParser.RULE_window_clause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7311;
            this.match(PostgreSqlParser.KW_WINDOW);
            this.state = 7312;
            this.window_definition();
            this.state = 7317;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1000, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7313;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7314;
                    this.window_definition();
                    }
                    }
                }
                this.state = 7319;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1000, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_definition(): Window_definitionContext {
        let localContext = new Window_definitionContext(this.context, this.state);
        this.enterRule(localContext, 704, PostgreSqlParser.RULE_window_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7320;
            this.colid();
            this.state = 7321;
            this.match(PostgreSqlParser.KW_AS);
            this.state = 7322;
            this.window_specification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public over_clause(): Over_clauseContext {
        let localContext = new Over_clauseContext(this.context, this.state);
        this.enterRule(localContext, 706, PostgreSqlParser.RULE_over_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7324;
            this.match(PostgreSqlParser.KW_OVER);
            this.state = 7327;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
                {
                this.state = 7325;
                this.window_specification();
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 7326;
                this.colid();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_specification(): Window_specificationContext {
        let localContext = new Window_specificationContext(this.context, this.state);
        this.enterRule(localContext, 708, PostgreSqlParser.RULE_window_specification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7329;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 7331;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1002, this.context) ) {
            case 1:
                {
                this.state = 7330;
                this.colid();
                }
                break;
            }
            this.state = 7336;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 285) {
                {
                this.state = 7333;
                this.match(PostgreSqlParser.KW_PARTITION);
                this.state = 7334;
                this.match(PostgreSqlParser.KW_BY);
                this.state = 7335;
                this.expr_list();
                }
            }

            this.state = 7339;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 83) {
                {
                this.state = 7338;
                this.sort_clause();
                }
            }

            this.state = 7342;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 299 || _la === 320 || _la === 481) {
                {
                this.state = 7341;
                this.opt_frame_clause();
                }
            }

            this.state = 7344;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_frame_clause(): Opt_frame_clauseContext {
        let localContext = new Opt_frame_clauseContext(this.context, this.state);
        this.enterRule(localContext, 710, PostgreSqlParser.RULE_opt_frame_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7346;
            _la = this.tokenStream.LA(1);
            if(!(_la === 299 || _la === 320 || _la === 481)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            {
            this.state = 7351;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1006, this.context) ) {
            case 1:
                {
                this.state = 7347;
                this.match(PostgreSqlParser.KW_BETWEEN);
                this.state = 7348;
                this.frame_bound();
                this.state = 7349;
                this.match(PostgreSqlParser.KW_AND);
                }
                break;
            }
            this.state = 7353;
            this.frame_bound();
            }
            this.state = 7364;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 199) {
                {
                this.state = 7355;
                this.match(PostgreSqlParser.KW_EXCLUDE);
                this.state = 7362;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_CURRENT:
                    {
                    this.state = 7356;
                    this.match(PostgreSqlParser.KW_CURRENT);
                    this.state = 7357;
                    this.match(PostgreSqlParser.KW_ROW);
                    }
                    break;
                case PostgreSqlParser.KW_GROUP:
                    {
                    this.state = 7358;
                    this.match(PostgreSqlParser.KW_GROUP);
                    }
                    break;
                case PostgreSqlParser.KW_TIES:
                    {
                    this.state = 7359;
                    this.match(PostgreSqlParser.KW_TIES);
                    }
                    break;
                case PostgreSqlParser.KW_NO:
                    {
                    this.state = 7360;
                    this.match(PostgreSqlParser.KW_NO);
                    this.state = 7361;
                    this.match(PostgreSqlParser.KW_OTHERS);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frame_bound(): Frame_boundContext {
        let localContext = new Frame_boundContext(this.context, this.state);
        this.enterRule(localContext, 712, PostgreSqlParser.RULE_frame_bound);
        let _la: number;
        try {
            this.state = 7373;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1010, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7368;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1009, this.context) ) {
                case 1:
                    {
                    this.state = 7366;
                    this.match(PostgreSqlParser.KW_UNBOUNDED);
                    }
                    break;
                case 2:
                    {
                    this.state = 7367;
                    this.expression();
                    }
                    break;
                }
                this.state = 7370;
                _la = this.tokenStream.LA(1);
                if(!(_la === 208 || _la === 289)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7371;
                this.match(PostgreSqlParser.KW_CURRENT);
                this.state = 7372;
                this.match(PostgreSqlParser.KW_ROW);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row(): RowContext {
        let localContext = new RowContext(this.context, this.state);
        this.enterRule(localContext, 714, PostgreSqlParser.RULE_row);
        try {
            this.state = 7382;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_ROW:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7375;
                this.explicit_row();
                }
                break;
            case PostgreSqlParser.OPEN_PAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7376;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7377;
                this.expr_list();
                this.state = 7378;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7379;
                this.expression();
                this.state = 7380;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explicit_row(): Explicit_rowContext {
        let localContext = new Explicit_rowContext(this.context, this.state);
        this.enterRule(localContext, 716, PostgreSqlParser.RULE_explicit_row);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7384;
            this.match(PostgreSqlParser.KW_ROW);
            this.state = 7385;
            this.match(PostgreSqlParser.OPEN_PAREN);
            this.state = 7387;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                {
                this.state = 7386;
                this.expr_list();
                }
            }

            this.state = 7389;
            this.match(PostgreSqlParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sub_type(): Sub_typeContext {
        let localContext = new Sub_typeContext(this.context, this.state);
        this.enterRule(localContext, 718, PostgreSqlParser.RULE_sub_type);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7391;
            _la = this.tokenStream.LA(1);
            if(!(_la === 30 || _la === 34 || _la === 90)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public all_op(): All_opContext {
        let localContext = new All_opContext(this.context, this.state);
        this.enterRule(localContext, 720, PostgreSqlParser.RULE_all_op);
        try {
            this.state = 7395;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.Operator:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7393;
                this.match(PostgreSqlParser.Operator);
                }
                break;
            case PostgreSqlParser.STAR:
            case PostgreSqlParser.EQUAL:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.SLASH:
            case PostgreSqlParser.CARET:
            case PostgreSqlParser.LT:
            case PostgreSqlParser.GT:
            case PostgreSqlParser.LESS_EQUALS:
            case PostgreSqlParser.GREATER_EQUALS:
            case PostgreSqlParser.NOT_EQUALS:
            case PostgreSqlParser.PERCENT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7394;
                this.mathop();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mathop(): MathopContext {
        let localContext = new MathopContext(this.context, this.state);
        this.enterRule(localContext, 722, PostgreSqlParser.RULE_mathop);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7397;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 178517504) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qual_op(): Qual_opContext {
        let localContext = new Qual_opContext(this.context, this.state);
        this.enterRule(localContext, 724, PostgreSqlParser.RULE_qual_op);
        try {
            this.state = 7405;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.Operator:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7399;
                this.match(PostgreSqlParser.Operator);
                }
                break;
            case PostgreSqlParser.KW_OPERATOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7400;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 7401;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7402;
                this.any_operator();
                this.state = 7403;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qual_all_op(): Qual_all_opContext {
        let localContext = new Qual_all_opContext(this.context, this.state);
        this.enterRule(localContext, 726, PostgreSqlParser.RULE_qual_all_op);
        try {
            this.state = 7413;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.STAR:
            case PostgreSqlParser.EQUAL:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.SLASH:
            case PostgreSqlParser.CARET:
            case PostgreSqlParser.LT:
            case PostgreSqlParser.GT:
            case PostgreSqlParser.LESS_EQUALS:
            case PostgreSqlParser.GREATER_EQUALS:
            case PostgreSqlParser.NOT_EQUALS:
            case PostgreSqlParser.PERCENT:
            case PostgreSqlParser.Operator:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7407;
                this.all_op();
                }
                break;
            case PostgreSqlParser.KW_OPERATOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7408;
                this.match(PostgreSqlParser.KW_OPERATOR);
                this.state = 7409;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7410;
                this.any_operator();
                this.state = 7411;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subquery_Op(): Subquery_OpContext {
        let localContext = new Subquery_OpContext(this.context, this.state);
        this.enterRule(localContext, 728, PostgreSqlParser.RULE_subquery_Op);
        let _la: number;
        try {
            this.state = 7420;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.STAR:
            case PostgreSqlParser.EQUAL:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.SLASH:
            case PostgreSqlParser.CARET:
            case PostgreSqlParser.LT:
            case PostgreSqlParser.GT:
            case PostgreSqlParser.LESS_EQUALS:
            case PostgreSqlParser.GREATER_EQUALS:
            case PostgreSqlParser.NOT_EQUALS:
            case PostgreSqlParser.PERCENT:
            case PostgreSqlParser.Operator:
            case PostgreSqlParser.KW_OPERATOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7415;
                this.qual_all_op();
                }
                break;
            case PostgreSqlParser.KW_NOT:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_LIKE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7417;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 7416;
                    this.match(PostgreSqlParser.KW_NOT);
                    }
                }

                this.state = 7419;
                _la = this.tokenStream.LA(1);
                if(!(_la === 114 || _la === 120)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expr_list(): Expr_listContext {
        let localContext = new Expr_listContext(this.context, this.state);
        this.enterRule(localContext, 730, PostgreSqlParser.RULE_expr_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7422;
            this.expression();
            this.state = 7427;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1018, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7423;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7424;
                    this.expression();
                    }
                    }
                }
                this.state = 7429;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1018, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_expr(): Column_exprContext {
        let localContext = new Column_exprContext(this.context, this.state);
        this.enterRule(localContext, 732, PostgreSqlParser.RULE_column_expr);
        try {
            this.state = 7435;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1019, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 7430;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7431;
                this.expression();
                this.state = 7432;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7434;
                this.column_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_expr_noparen(): Column_expr_noparenContext {
        let localContext = new Column_expr_noparenContext(this.context, this.state);
        this.enterRule(localContext, 734, PostgreSqlParser.RULE_column_expr_noparen);
        try {
            this.state = 7439;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1020, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7437;
                this.expression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7438;
                this.column_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_arg_list(): Func_arg_listContext {
        let localContext = new Func_arg_listContext(this.context, this.state);
        this.enterRule(localContext, 736, PostgreSqlParser.RULE_func_arg_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7441;
            this.func_arg_expr();
            this.state = 7446;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1021, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7442;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7443;
                    this.func_arg_expr();
                    }
                    }
                }
                this.state = 7448;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1021, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_arg_expr(): Func_arg_exprContext {
        let localContext = new Func_arg_exprContext(this.context, this.state);
        this.enterRule(localContext, 738, PostgreSqlParser.RULE_func_arg_expr);
        let _la: number;
        try {
            this.state = 7455;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1023, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7449;
                this.expression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7450;
                this.type_function_name();
                this.state = 7453;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 20 || _la === 22) {
                    {
                    this.state = 7451;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 20 || _la === 22)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 7452;
                    this.expression();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public array_expr(): Array_exprContext {
        let localContext = new Array_exprContext(this.context, this.state);
        this.enterRule(localContext, 740, PostgreSqlParser.RULE_array_expr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7457;
            this.match(PostgreSqlParser.OPEN_BRACKET);
            this.state = 7467;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.OPEN_PAREN:
            case PostgreSqlParser.PLUS:
            case PostgreSqlParser.MINUS:
            case PostgreSqlParser.PARAM:
            case PostgreSqlParser.Operator:
            case PostgreSqlParser.KW_ARRAY:
            case PostgreSqlParser.KW_CASE:
            case PostgreSqlParser.KW_CAST:
            case PostgreSqlParser.KW_CURRENT_CATALOG:
            case PostgreSqlParser.KW_CURRENT_DATE:
            case PostgreSqlParser.KW_CURRENT_ROLE:
            case PostgreSqlParser.KW_CURRENT_TIME:
            case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
            case PostgreSqlParser.KW_CURRENT_USER:
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_FALSE:
            case PostgreSqlParser.KW_LOCALTIME:
            case PostgreSqlParser.KW_LOCALTIMESTAMP:
            case PostgreSqlParser.KW_NOT:
            case PostgreSqlParser.KW_NULL:
            case PostgreSqlParser.KW_SESSION_USER:
            case PostgreSqlParser.KW_TRUE:
            case PostgreSqlParser.KW_UNIQUE:
            case PostgreSqlParser.KW_USER:
            case PostgreSqlParser.KW_AUTHORIZATION:
            case PostgreSqlParser.KW_BINARY:
            case PostgreSqlParser.KW_COLLATION:
            case PostgreSqlParser.KW_CONCURRENTLY:
            case PostgreSqlParser.KW_CROSS:
            case PostgreSqlParser.KW_CURRENT_SCHEMA:
            case PostgreSqlParser.KW_FREEZE:
            case PostgreSqlParser.KW_FULL:
            case PostgreSqlParser.KW_ILIKE:
            case PostgreSqlParser.KW_INNER:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_ISNULL:
            case PostgreSqlParser.KW_JOIN:
            case PostgreSqlParser.KW_LEFT:
            case PostgreSqlParser.KW_LIKE:
            case PostgreSqlParser.KW_NATURAL:
            case PostgreSqlParser.KW_NOTNULL:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_OVERLAPS:
            case PostgreSqlParser.KW_RIGHT:
            case PostgreSqlParser.KW_SIMILAR:
            case PostgreSqlParser.KW_VERBOSE:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_TABLESAMPLE:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.BinaryStringConstant:
            case PostgreSqlParser.HexadecimalStringConstant:
            case PostgreSqlParser.Integral:
            case PostgreSqlParser.Numeric:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 7458;
                this.expr_list();
                }
                break;
            case PostgreSqlParser.OPEN_BRACKET:
                {
                {
                this.state = 7459;
                this.array_expr();
                this.state = 7464;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 7460;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7461;
                    this.array_expr();
                    }
                    }
                    this.state = 7466;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                }
                break;
            case PostgreSqlParser.CLOSE_BRACKET:
                break;
            default:
                break;
            }
            this.state = 7469;
            this.match(PostgreSqlParser.CLOSE_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extract_arg(): Extract_argContext {
        let localContext = new Extract_argContext(this.context, this.state);
        this.enterRule(localContext, 742, PostgreSqlParser.RULE_extract_arg);
        try {
            this.state = 7479;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1026, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7471;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7472;
                this.match(PostgreSqlParser.KW_YEAR);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7473;
                this.match(PostgreSqlParser.KW_MONTH);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7474;
                this.match(PostgreSqlParser.KW_DAY);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7475;
                this.match(PostgreSqlParser.KW_HOUR);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7476;
                this.match(PostgreSqlParser.KW_MINUTE);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7477;
                this.match(PostgreSqlParser.KW_SECOND);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7478;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unicode_normal_form(): Unicode_normal_formContext {
        let localContext = new Unicode_normal_formContext(this.context, this.state);
        this.enterRule(localContext, 744, PostgreSqlParser.RULE_unicode_normal_form);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7481;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 483)) & ~0x1F) === 0 && ((1 << (_la - 483)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public substr_list(): Substr_listContext {
        let localContext = new Substr_listContext(this.context, this.state);
        this.enterRule(localContext, 746, PostgreSqlParser.RULE_substr_list);
        let _la: number;
        try {
            this.state = 7504;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1029, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7483;
                this.expression();
                this.state = 7484;
                this.match(PostgreSqlParser.KW_FROM);
                this.state = 7485;
                this.expression();
                this.state = 7488;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 62) {
                    {
                    this.state = 7486;
                    this.match(PostgreSqlParser.KW_FOR);
                    this.state = 7487;
                    this.expression();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7490;
                this.expression();
                this.state = 7491;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 7492;
                this.expression();
                this.state = 7495;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 64) {
                    {
                    this.state = 7493;
                    this.match(PostgreSqlParser.KW_FROM);
                    this.state = 7494;
                    this.expression();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7497;
                this.expression();
                this.state = 7498;
                this.match(PostgreSqlParser.KW_SIMILAR);
                this.state = 7499;
                this.expression();
                this.state = 7500;
                this.match(PostgreSqlParser.KW_ESCAPE);
                this.state = 7501;
                this.expression();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7503;
                this.expr_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public when_clause(): When_clauseContext {
        let localContext = new When_clauseContext(this.context, this.state);
        this.enterRule(localContext, 748, PostgreSqlParser.RULE_when_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7506;
            this.match(PostgreSqlParser.KW_WHEN);
            this.state = 7507;
            this.expression();
            this.state = 7508;
            this.match(PostgreSqlParser.KW_THEN);
            this.state = 7509;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indirection_el(): Indirection_elContext {
        let localContext = new Indirection_elContext(this.context, this.state);
        this.enterRule(localContext, 750, PostgreSqlParser.RULE_indirection_el);
        let _la: number;
        try {
            this.state = 7528;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.DOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7511;
                this.match(PostgreSqlParser.DOT);
                this.state = 7514;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_ALL:
                case PostgreSqlParser.KW_ANALYSE:
                case PostgreSqlParser.KW_ANALYZE:
                case PostgreSqlParser.KW_AND:
                case PostgreSqlParser.KW_ANY:
                case PostgreSqlParser.KW_ARRAY:
                case PostgreSqlParser.KW_AS:
                case PostgreSqlParser.KW_ASC:
                case PostgreSqlParser.KW_ASYMMETRIC:
                case PostgreSqlParser.KW_BOTH:
                case PostgreSqlParser.KW_CASE:
                case PostgreSqlParser.KW_CAST:
                case PostgreSqlParser.KW_CHECK:
                case PostgreSqlParser.KW_COLLATE:
                case PostgreSqlParser.KW_COLUMN:
                case PostgreSqlParser.KW_CONSTRAINT:
                case PostgreSqlParser.KW_CREATE:
                case PostgreSqlParser.KW_CURRENT_CATALOG:
                case PostgreSqlParser.KW_CURRENT_DATE:
                case PostgreSqlParser.KW_CURRENT_ROLE:
                case PostgreSqlParser.KW_CURRENT_TIME:
                case PostgreSqlParser.KW_CURRENT_TIMESTAMP:
                case PostgreSqlParser.KW_CURRENT_USER:
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_DEFERRABLE:
                case PostgreSqlParser.KW_DESC:
                case PostgreSqlParser.KW_DISTINCT:
                case PostgreSqlParser.KW_DO:
                case PostgreSqlParser.KW_ELSE:
                case PostgreSqlParser.KW_EXCEPT:
                case PostgreSqlParser.KW_FALSE:
                case PostgreSqlParser.KW_FETCH:
                case PostgreSqlParser.KW_FOR:
                case PostgreSqlParser.KW_FOREIGN:
                case PostgreSqlParser.KW_FROM:
                case PostgreSqlParser.KW_GRANT:
                case PostgreSqlParser.KW_GROUP:
                case PostgreSqlParser.KW_HAVING:
                case PostgreSqlParser.KW_IN:
                case PostgreSqlParser.KW_INITIALLY:
                case PostgreSqlParser.KW_INTERSECT:
                case PostgreSqlParser.KW_LATERAL:
                case PostgreSqlParser.KW_LEADING:
                case PostgreSqlParser.KW_LIMIT:
                case PostgreSqlParser.KW_LOCALTIME:
                case PostgreSqlParser.KW_LOCALTIMESTAMP:
                case PostgreSqlParser.KW_NOT:
                case PostgreSqlParser.KW_NULL:
                case PostgreSqlParser.KW_OFFSET:
                case PostgreSqlParser.KW_ON:
                case PostgreSqlParser.KW_ONLY:
                case PostgreSqlParser.KW_OR:
                case PostgreSqlParser.KW_ORDER:
                case PostgreSqlParser.KW_PLACING:
                case PostgreSqlParser.KW_PRIMARY:
                case PostgreSqlParser.KW_REFERENCES:
                case PostgreSqlParser.KW_RETURNING:
                case PostgreSqlParser.KW_SELECT:
                case PostgreSqlParser.KW_SESSION_USER:
                case PostgreSqlParser.KW_SOME:
                case PostgreSqlParser.KW_SYMMETRIC:
                case PostgreSqlParser.KW_TABLE:
                case PostgreSqlParser.KW_THEN:
                case PostgreSqlParser.KW_TO:
                case PostgreSqlParser.KW_TRAILING:
                case PostgreSqlParser.KW_TRUE:
                case PostgreSqlParser.KW_UNION:
                case PostgreSqlParser.KW_UNIQUE:
                case PostgreSqlParser.KW_USER:
                case PostgreSqlParser.KW_USING:
                case PostgreSqlParser.KW_VARIADIC:
                case PostgreSqlParser.KW_WHEN:
                case PostgreSqlParser.KW_WHERE:
                case PostgreSqlParser.KW_WINDOW:
                case PostgreSqlParser.KW_WITH:
                case PostgreSqlParser.KW_AUTHORIZATION:
                case PostgreSqlParser.KW_BINARY:
                case PostgreSqlParser.KW_COLLATION:
                case PostgreSqlParser.KW_CONCURRENTLY:
                case PostgreSqlParser.KW_CROSS:
                case PostgreSqlParser.KW_CURRENT_SCHEMA:
                case PostgreSqlParser.KW_FREEZE:
                case PostgreSqlParser.KW_FULL:
                case PostgreSqlParser.KW_ILIKE:
                case PostgreSqlParser.KW_INNER:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_ISNULL:
                case PostgreSqlParser.KW_JOIN:
                case PostgreSqlParser.KW_LEFT:
                case PostgreSqlParser.KW_LIKE:
                case PostgreSqlParser.KW_NATURAL:
                case PostgreSqlParser.KW_NOTNULL:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_OVERLAPS:
                case PostgreSqlParser.KW_RIGHT:
                case PostgreSqlParser.KW_SIMILAR:
                case PostgreSqlParser.KW_VERBOSE:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_END:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_TABLESAMPLE:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 7512;
                    this.collabel();
                    }
                    break;
                case PostgreSqlParser.STAR:
                    {
                    this.state = 7513;
                    this.match(PostgreSqlParser.STAR);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case PostgreSqlParser.OPEN_BRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7516;
                this.match(PostgreSqlParser.OPEN_BRACKET);
                this.state = 7525;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1033, this.context) ) {
                case 1:
                    {
                    this.state = 7517;
                    this.expression();
                    }
                    break;
                case 2:
                    {
                    this.state = 7519;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                        {
                        this.state = 7518;
                        this.expression();
                        }
                    }

                    this.state = 7521;
                    this.match(PostgreSqlParser.COLON);
                    this.state = 7523;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                        {
                        this.state = 7522;
                        this.expression();
                        }
                    }

                    }
                    break;
                }
                this.state = 7527;
                this.match(PostgreSqlParser.CLOSE_BRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indirection(): IndirectionContext {
        let localContext = new IndirectionContext(this.context, this.state);
        this.enterRule(localContext, 752, PostgreSqlParser.RULE_indirection);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7531;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 7530;
                    this.indirection_el();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 7533;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1035, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_indirection(): Opt_indirectionContext {
        let localContext = new Opt_indirectionContext(this.context, this.state);
        this.enterRule(localContext, 754, PostgreSqlParser.RULE_opt_indirection);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7538;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1036, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7535;
                    this.indirection_el();
                    }
                    }
                }
                this.state = 7540;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1036, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public target_list(): Target_listContext {
        let localContext = new Target_listContext(this.context, this.state);
        this.enterRule(localContext, 756, PostgreSqlParser.RULE_target_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7541;
            this.target_el();
            this.state = 7546;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1037, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7542;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 7543;
                    this.target_el();
                    }
                    }
                }
                this.state = 7548;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1037, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public target_el(): Target_elContext {
        let localContext = new Target_elContext(this.context, this.state);
        this.enterRule(localContext, 758, PostgreSqlParser.RULE_target_el);
        try {
            this.state = 7557;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1039, this.context) ) {
            case 1:
                localContext = new Target_labelContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7549;
                this.column_expr_noparen();
                this.state = 7554;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1038, this.context) ) {
                case 1:
                    {
                    this.state = 7550;
                    this.match(PostgreSqlParser.KW_AS);
                    this.state = 7551;
                    this.collabel();
                    }
                    break;
                case 2:
                    {
                    this.state = 7552;
                    this.identifier();
                    }
                    break;
                case 3:
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new Target_starContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7556;
                this.match(PostgreSqlParser.STAR);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualified_name_list(): Qualified_name_listContext {
        let localContext = new Qualified_name_listContext(this.context, this.state);
        this.enterRule(localContext, 760, PostgreSqlParser.RULE_qualified_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7559;
            this.qualified_name();
            this.state = 7564;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7560;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7561;
                this.qualified_name();
                }
                }
                this.state = 7566;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_name_list(): Table_name_listContext {
        let localContext = new Table_name_listContext(this.context, this.state);
        this.enterRule(localContext, 762, PostgreSqlParser.RULE_table_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7567;
            this.table_name();
            this.state = 7572;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7568;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7569;
                this.table_name();
                }
                }
                this.state = 7574;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schema_name_list(): Schema_name_listContext {
        let localContext = new Schema_name_listContext(this.context, this.state);
        this.enterRule(localContext, 764, PostgreSqlParser.RULE_schema_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7575;
            this.schema_name();
            this.state = 7580;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7576;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7577;
                this.schema_name();
                }
                }
                this.state = 7582;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public database_nameList(): Database_nameListContext {
        let localContext = new Database_nameListContext(this.context, this.state);
        this.enterRule(localContext, 766, PostgreSqlParser.RULE_database_nameList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7583;
            this.database_name();
            this.state = 7588;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7584;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7585;
                this.database_name();
                }
                }
                this.state = 7590;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablespace_name_create(): Tablespace_name_createContext {
        let localContext = new Tablespace_name_createContext(this.context, this.state);
        this.enterRule(localContext, 768, PostgreSqlParser.RULE_tablespace_name_create);
        try {
            localContext = new TablespaceNameCreateContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7591;
            this.qualified_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablespace_name(): Tablespace_nameContext {
        let localContext = new Tablespace_nameContext(this.context, this.state);
        this.enterRule(localContext, 770, PostgreSqlParser.RULE_tablespace_name);
        try {
            localContext = new TablespaceNameContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7593;
            this.qualified_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_name_create(): Table_name_createContext {
        let localContext = new Table_name_createContext(this.context, this.state);
        this.enterRule(localContext, 772, PostgreSqlParser.RULE_table_name_create);
        try {
            localContext = new TableNameCreateContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7595;
            this.qualified_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_name(): Table_nameContext {
        let localContext = new Table_nameContext(this.context, this.state);
        this.enterRule(localContext, 774, PostgreSqlParser.RULE_table_name);
        try {
            localContext = new TableNameContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7597;
            this.qualified_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public view_name_create(): View_name_createContext {
        let localContext = new View_name_createContext(this.context, this.state);
        this.enterRule(localContext, 776, PostgreSqlParser.RULE_view_name_create);
        try {
            localContext = new ViewNameCreateContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7599;
            this.qualified_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public view_name(): View_nameContext {
        let localContext = new View_nameContext(this.context, this.state);
        this.enterRule(localContext, 778, PostgreSqlParser.RULE_view_name);
        try {
            localContext = new ViewNameContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7601;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualified_name(): Qualified_nameContext {
        let localContext = new Qualified_nameContext(this.context, this.state);
        this.enterRule(localContext, 780, PostgreSqlParser.RULE_qualified_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7603;
            this.colid();
            this.state = 7605;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1044, this.context) ) {
            case 1:
                {
                this.state = 7604;
                this.indirection();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablespace_name_list(): Tablespace_name_listContext {
        let localContext = new Tablespace_name_listContext(this.context, this.state);
        this.enterRule(localContext, 782, PostgreSqlParser.RULE_tablespace_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7607;
            this.tablespace_name();
            this.state = 7612;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7608;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7609;
                this.tablespace_name();
                }
                }
                this.state = 7614;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public name_list(): Name_listContext {
        let localContext = new Name_listContext(this.context, this.state);
        this.enterRule(localContext, 784, PostgreSqlParser.RULE_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7615;
            this.colid();
            this.state = 7620;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7616;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7617;
                this.colid();
                }
                }
                this.state = 7622;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public database_name_create(): Database_name_createContext {
        let localContext = new Database_name_createContext(this.context, this.state);
        this.enterRule(localContext, 786, PostgreSqlParser.RULE_database_name_create);
        try {
            localContext = new DatabaseNameCreateContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7623;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public database_name(): Database_nameContext {
        let localContext = new Database_nameContext(this.context, this.state);
        this.enterRule(localContext, 788, PostgreSqlParser.RULE_database_name);
        try {
            localContext = new DatabaseNameContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7625;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schema_name(): Schema_nameContext {
        let localContext = new Schema_nameContext(this.context, this.state);
        this.enterRule(localContext, 790, PostgreSqlParser.RULE_schema_name);
        try {
            localContext = new SchemaNameContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7627;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routine_name_create(): Routine_name_createContext {
        let localContext = new Routine_name_createContext(this.context, this.state);
        this.enterRule(localContext, 792, PostgreSqlParser.RULE_routine_name_create);
        try {
            localContext = new RoutineNameCreateContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7629;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public routine_name(): Routine_nameContext {
        let localContext = new Routine_nameContext(this.context, this.state);
        this.enterRule(localContext, 794, PostgreSqlParser.RULE_routine_name);
        try {
            localContext = new RoutineNameContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7631;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedure_name(): Procedure_nameContext {
        let localContext = new Procedure_nameContext(this.context, this.state);
        this.enterRule(localContext, 796, PostgreSqlParser.RULE_procedure_name);
        try {
            this.state = 7637;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1047, this.context) ) {
            case 1:
                localContext = new ProcedureNameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7633;
                this.type_function_name();
                }
                break;
            case 2:
                localContext = new ProcedureNameContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7634;
                this.colid();
                this.state = 7635;
                this.indirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedure_name_create(): Procedure_name_createContext {
        let localContext = new Procedure_name_createContext(this.context, this.state);
        this.enterRule(localContext, 798, PostgreSqlParser.RULE_procedure_name_create);
        try {
            this.state = 7643;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1048, this.context) ) {
            case 1:
                localContext = new ProcedureNameCreateContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7639;
                this.type_function_name();
                }
                break;
            case 2:
                localContext = new ProcedureNameCreateContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7640;
                this.colid();
                this.state = 7641;
                this.indirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_name(): Column_nameContext {
        let localContext = new Column_nameContext(this.context, this.state);
        this.enterRule(localContext, 800, PostgreSqlParser.RULE_column_name);
        try {
            this.state = 7649;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1049, this.context) ) {
            case 1:
                localContext = new ColumnNameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7645;
                this.colid();
                this.state = 7646;
                this.opt_indirection();
                }
                break;
            case 2:
                localContext = new ColumnNameMatchContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7648;
                if (!(this.shouldMatchEmpty())) {
                    throw this.createFailedPredicateException("this.shouldMatchEmpty()");
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_name_create(): Column_name_createContext {
        let localContext = new Column_name_createContext(this.context, this.state);
        this.enterRule(localContext, 802, PostgreSqlParser.RULE_column_name_create);
        try {
            localContext = new ColumnNameCreateContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7651;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_name_create(): Function_name_createContext {
        let localContext = new Function_name_createContext(this.context, this.state);
        this.enterRule(localContext, 804, PostgreSqlParser.RULE_function_name_create);
        try {
            this.state = 7657;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1050, this.context) ) {
            case 1:
                localContext = new FunctionNameCreateContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7653;
                this.type_function_name();
                }
                break;
            case 2:
                localContext = new FunctionNameCreateContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7654;
                this.colid();
                this.state = 7655;
                this.indirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_name(): Function_nameContext {
        let localContext = new Function_nameContext(this.context, this.state);
        this.enterRule(localContext, 806, PostgreSqlParser.RULE_function_name);
        try {
            this.state = 7663;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1051, this.context) ) {
            case 1:
                localContext = new FunctionNameContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7659;
                this.type_function_name();
                }
                break;
            case 2:
                localContext = new FunctionNameContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7660;
                this.colid();
                this.state = 7661;
                this.indirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sconst(): SconstContext {
        let localContext = new SconstContext(this.context, this.state);
        this.enterRule(localContext, 808, PostgreSqlParser.RULE_sconst);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7665;
            this.anysconst();
            this.state = 7668;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1052, this.context) ) {
            case 1:
                {
                this.state = 7666;
                this.match(PostgreSqlParser.KW_UESCAPE);
                this.state = 7667;
                this.anysconst();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public anysconst(): AnysconstContext {
        let localContext = new AnysconstContext(this.context, this.state);
        this.enterRule(localContext, 810, PostgreSqlParser.RULE_anysconst);
        let _la: number;
        try {
            this.state = 7681;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.StringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7670;
                this.match(PostgreSqlParser.StringConstant);
                }
                break;
            case PostgreSqlParser.UnicodeEscapeStringConstant:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7671;
                this.match(PostgreSqlParser.UnicodeEscapeStringConstant);
                }
                break;
            case PostgreSqlParser.BeginDollarStringConstant:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7672;
                this.match(PostgreSqlParser.BeginDollarStringConstant);
                this.state = 7676;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 588) {
                    {
                    {
                    this.state = 7673;
                    this.match(PostgreSqlParser.DollarText);
                    }
                    }
                    this.state = 7678;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 7679;
                this.match(PostgreSqlParser.EndDollarStringConstant);
                }
                break;
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7680;
                this.match(PostgreSqlParser.EscapeStringConstant);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signediconst(): SignediconstContext {
        let localContext = new SignediconstContext(this.context, this.state);
        this.enterRule(localContext, 812, PostgreSqlParser.RULE_signediconst);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7684;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 12 || _la === 13) {
                {
                this.state = 7683;
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 13)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 7686;
            this.match(PostgreSqlParser.Integral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rolespec(): RolespecContext {
        let localContext = new RolespecContext(this.context, this.state);
        this.enterRule(localContext, 814, PostgreSqlParser.RULE_rolespec);
        try {
            this.state = 7693;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1056, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7688;
                this.nonreservedword();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7689;
                this.match(PostgreSqlParser.KW_CURRENT_USER);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7690;
                this.match(PostgreSqlParser.KW_CURRENT_ROLE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7691;
                this.match(PostgreSqlParser.KW_SESSION_USER);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7692;
                this.match(PostgreSqlParser.KW_PUBLIC);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public role_list(): Role_listContext {
        let localContext = new Role_listContext(this.context, this.state);
        this.enterRule(localContext, 816, PostgreSqlParser.RULE_role_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7695;
            this.rolespec();
            this.state = 7700;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7696;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7697;
                this.rolespec();
                }
                }
                this.state = 7702;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colid(): ColidContext {
        let localContext = new ColidContext(this.context, this.state);
        this.enterRule(localContext, 818, PostgreSqlParser.RULE_colid);
        try {
            this.state = 7705;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1058, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7703;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7704;
                this.col_name_keyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_function_name(): Type_function_nameContext {
        let localContext = new Type_function_nameContext(this.context, this.state);
        this.enterRule(localContext, 820, PostgreSqlParser.RULE_type_function_name);
        try {
            this.state = 7709;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1059, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7707;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7708;
                this.type_func_name_keyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonreservedword(): NonreservedwordContext {
        let localContext = new NonreservedwordContext(this.context, this.state);
        this.enterRule(localContext, 822, PostgreSqlParser.RULE_nonreservedword);
        try {
            this.state = 7714;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1060, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7711;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7712;
                this.col_name_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7713;
                this.type_func_name_keyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collabel(): CollabelContext {
        let localContext = new CollabelContext(this.context, this.state);
        this.enterRule(localContext, 824, PostgreSqlParser.RULE_collabel);
        try {
            this.state = 7720;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1061, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7716;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7717;
                this.col_name_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7718;
                this.type_func_name_keyword();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7719;
                this.reserved_keyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 826, PostgreSqlParser.RULE_identifier);
        try {
            this.state = 7733;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7722;
                this.match(PostgreSqlParser.Identifier);
                this.state = 7725;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1062, this.context) ) {
                case 1:
                    {
                    this.state = 7723;
                    this.match(PostgreSqlParser.KW_UESCAPE);
                    this.state = 7724;
                    this.anysconst();
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7727;
                this.sconst();
                }
                break;
            case PostgreSqlParser.QuotedIdentifier:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7728;
                this.match(PostgreSqlParser.QuotedIdentifier);
                }
                break;
            case PostgreSqlParser.UnicodeQuotedIdentifier:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7729;
                this.match(PostgreSqlParser.UnicodeQuotedIdentifier);
                }
                break;
            case PostgreSqlParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7730;
                this.match(PostgreSqlParser.PLSQLVARIABLENAME);
                }
                break;
            case PostgreSqlParser.PLSQLIDENTIFIER:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7731;
                this.match(PostgreSqlParser.PLSQLIDENTIFIER);
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7732;
                this.unreserved_keyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unreserved_keyword(): Unreserved_keywordContext {
        let localContext = new Unreserved_keywordContext(this.context, this.state);
        this.enterRule(localContext, 828, PostgreSqlParser.RULE_unreserved_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7735;
            _la = this.tokenStream.LA(1);
            if(!(_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 32767) !== 0) || ((((_la - 433)) & ~0x1F) === 0 && ((1 << (_la - 433)) & 4291821567) !== 0) || ((((_la - 465)) & ~0x1F) === 0 && ((1 << (_la - 465)) & 4278187359) !== 0) || ((((_la - 497)) & ~0x1F) === 0 && ((1 << (_la - 497)) & 146800319) !== 0) || _la === 547 || _la === 548)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public col_name_keyword(): Col_name_keywordContext {
        let localContext = new Col_name_keywordContext(this.context, this.state);
        this.enterRule(localContext, 830, PostgreSqlParser.RULE_col_name_keyword);
        try {
            this.state = 7788;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1064, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7737;
                this.match(PostgreSqlParser.KW_BETWEEN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7738;
                this.match(PostgreSqlParser.KW_BIGINT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7739;
                this.bit();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7740;
                this.match(PostgreSqlParser.KW_BOOLEAN);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7741;
                this.match(PostgreSqlParser.KW_CHAR);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7742;
                this.character();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7743;
                this.match(PostgreSqlParser.KW_COALESCE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7744;
                this.match(PostgreSqlParser.KW_DEC);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 7745;
                this.match(PostgreSqlParser.KW_DECIMAL);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 7746;
                this.match(PostgreSqlParser.KW_EXISTS);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 7747;
                this.match(PostgreSqlParser.KW_EXTRACT);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 7748;
                this.match(PostgreSqlParser.KW_FLOAT);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 7749;
                this.match(PostgreSqlParser.KW_GREATEST);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 7750;
                this.match(PostgreSqlParser.KW_GROUPING);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 7751;
                this.match(PostgreSqlParser.KW_INOUT);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 7752;
                this.match(PostgreSqlParser.KW_INT);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 7753;
                this.match(PostgreSqlParser.KW_INTEGER);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 7754;
                this.match(PostgreSqlParser.KW_INTERVAL);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 7755;
                this.match(PostgreSqlParser.KW_LEAST);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 7756;
                this.match(PostgreSqlParser.KW_NATIONAL);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 7757;
                this.match(PostgreSqlParser.KW_NCHAR);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 7758;
                this.match(PostgreSqlParser.KW_NONE);
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 7759;
                this.match(PostgreSqlParser.KW_NORMALIZE);
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 7760;
                this.match(PostgreSqlParser.KW_NULLIF);
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 7761;
                this.numeric();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 7762;
                this.match(PostgreSqlParser.KW_OUT);
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 7763;
                this.match(PostgreSqlParser.KW_OVERLAY);
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 7764;
                this.match(PostgreSqlParser.KW_POSITION);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 7765;
                this.match(PostgreSqlParser.KW_PRECISION);
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 7766;
                this.match(PostgreSqlParser.KW_REAL);
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 7767;
                this.match(PostgreSqlParser.KW_ROW);
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 7768;
                this.match(PostgreSqlParser.KW_SETOF);
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 7769;
                this.match(PostgreSqlParser.KW_SMALLINT);
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 7770;
                this.match(PostgreSqlParser.KW_SUBSTRING);
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 7771;
                this.match(PostgreSqlParser.KW_TIME);
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 7772;
                this.match(PostgreSqlParser.KW_TIMESTAMP);
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 7773;
                this.match(PostgreSqlParser.KW_TREAT);
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 7774;
                this.match(PostgreSqlParser.KW_TRIM);
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 7775;
                this.match(PostgreSqlParser.KW_VALUES);
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 7776;
                this.match(PostgreSqlParser.KW_VARCHAR);
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 7777;
                this.match(PostgreSqlParser.KW_XMLATTRIBUTES);
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 7778;
                this.match(PostgreSqlParser.KW_XMLCONCAT);
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 7779;
                this.match(PostgreSqlParser.KW_XMLELEMENT);
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 7780;
                this.match(PostgreSqlParser.KW_XMLEXISTS);
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 7781;
                this.match(PostgreSqlParser.KW_XMLFOREST);
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 7782;
                this.match(PostgreSqlParser.KW_XMLNAMESPACES);
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 7783;
                this.match(PostgreSqlParser.KW_XMLPARSE);
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 7784;
                this.match(PostgreSqlParser.KW_XMLPI);
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 7785;
                this.match(PostgreSqlParser.KW_XMLROOT);
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 7786;
                this.match(PostgreSqlParser.KW_XMLSERIALIZE);
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 7787;
                this.match(PostgreSqlParser.KW_XMLTABLE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_func_name_keyword(): Type_func_name_keywordContext {
        let localContext = new Type_func_name_keywordContext(this.context, this.state);
        this.enterRule(localContext, 832, PostgreSqlParser.RULE_type_func_name_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7790;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & 8126463) !== 0) || _la === 472)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reserved_keyword(): Reserved_keywordContext {
        let localContext = new Reserved_keywordContext(this.context, this.state);
        this.enterRule(localContext, 834, PostgreSqlParser.RULE_reserved_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7792;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4286578687) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 4294966783) !== 0) || ((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 4095) !== 0) || _la === 454)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pl_block(): Pl_blockContext {
        let localContext = new Pl_blockContext(this.context, this.state);
        this.enterRule(localContext, 836, PostgreSqlParser.RULE_pl_block);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 7795;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 18) {
                {
                this.state = 7794;
                this.label_decl();
                }
            }

            this.state = 7807;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 178) {
                {
                this.state = 7797;
                this.match(PostgreSqlParser.KW_DECLARE);
                this.state = 7805;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1068, this.context) ) {
                case 1:
                    {
                    this.state = 7801;
                    this.errorHandler.sync(this);
                    alternative = 1;
                    do {
                        switch (alternative) {
                        case 1:
                            {
                            this.state = 7801;
                            this.errorHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this.tokenStream, 1066, this.context) ) {
                            case 1:
                                {
                                this.state = 7798;
                                this.decl_statement();
                                }
                                break;
                            case 2:
                                {
                                this.state = 7799;
                                this.match(PostgreSqlParser.KW_DECLARE);
                                }
                                break;
                            case 3:
                                {
                                this.state = 7800;
                                this.label_decl();
                                }
                                break;
                            }
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        this.state = 7803;
                        this.errorHandler.sync(this);
                        alternative = this.interpreter.adaptivePredict(this.tokenStream, 1067, this.context);
                    } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
                    }
                    break;
                }
                }
            }

            }
            this.state = 7809;
            this.match(PostgreSqlParser.KW_BEGIN);
            this.state = 7813;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1070, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7810;
                    this.proc_stmt();
                    }
                    }
                }
                this.state = 7815;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1070, this.context);
            }
            this.state = 7817;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 517) {
                {
                this.state = 7816;
                this.exception_sect();
                }
            }

            this.state = 7819;
            this.match(PostgreSqlParser.KW_END);
            this.state = 7821;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 7820;
                this.any_identifier();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public label_decl(): Label_declContext {
        let localContext = new Label_declContext(this.context, this.state);
        this.enterRule(localContext, 838, PostgreSqlParser.RULE_label_decl);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7823;
            this.match(PostgreSqlParser.LESS_LESS);
            this.state = 7824;
            this.any_identifier();
            this.state = 7825;
            this.match(PostgreSqlParser.GREATER_GREATER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decl_statement(): Decl_statementContext {
        let localContext = new Decl_statementContext(this.context, this.state);
        this.enterRule(localContext, 840, PostgreSqlParser.RULE_decl_statement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7827;
            this.any_identifier();
            this.state = 7874;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1083, this.context) ) {
            case 1:
                {
                this.state = 7828;
                this.match(PostgreSqlParser.KW_ALIAS);
                this.state = 7829;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 7832;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.PARAM:
                    {
                    this.state = 7830;
                    this.match(PostgreSqlParser.PARAM);
                    }
                    break;
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 7831;
                    this.colid();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                {
                this.state = 7835;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1074, this.context) ) {
                case 1:
                    {
                    this.state = 7834;
                    this.match(PostgreSqlParser.KW_CONSTANT);
                    }
                    break;
                }
                this.state = 7837;
                this.typename();
                this.state = 7839;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 43) {
                    {
                    this.state = 7838;
                    this.opt_collate_clause();
                    }
                }

                this.state = 7843;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77) {
                    {
                    this.state = 7841;
                    this.match(PostgreSqlParser.KW_NOT);
                    this.state = 7842;
                    this.match(PostgreSqlParser.KW_NULL);
                    }
                }

                this.state = 7850;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 10 || _la === 20 || _la === 53) {
                    {
                    this.state = 7847;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSqlParser.EQUAL:
                    case PostgreSqlParser.COLON_EQUALS:
                        {
                        this.state = 7845;
                        this.assign_operator();
                        }
                        break;
                    case PostgreSqlParser.KW_DEFAULT:
                        {
                        this.state = 7846;
                        this.match(PostgreSqlParser.KW_DEFAULT);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 7849;
                    this.sql_expression();
                    }
                }

                }
                break;
            case 3:
                {
                this.state = 7856;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269 || _la === 324) {
                    {
                    this.state = 7853;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 269) {
                        {
                        this.state = 7852;
                        this.match(PostgreSqlParser.KW_NO);
                        }
                    }

                    this.state = 7855;
                    this.match(PostgreSqlParser.KW_SCROLL);
                    }
                }

                this.state = 7858;
                this.match(PostgreSqlParser.KW_CURSOR);
                this.state = 7870;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 7859;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 7860;
                    this.decl_cursor_arg();
                    this.state = 7865;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 6) {
                        {
                        {
                        this.state = 7861;
                        this.match(PostgreSqlParser.COMMA);
                        this.state = 7862;
                        this.decl_cursor_arg();
                        }
                        }
                        this.state = 7867;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    this.state = 7868;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                }

                this.state = 7872;
                _la = this.tokenStream.LA(1);
                if(!(_la === 62 || _la === 116)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7873;
                this.selectstmt();
                }
                break;
            }
            this.state = 7876;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decl_cursor_arg(): Decl_cursor_argContext {
        let localContext = new Decl_cursor_argContext(this.context, this.state);
        this.enterRule(localContext, 842, PostgreSqlParser.RULE_decl_cursor_arg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7878;
            this.any_identifier();
            this.state = 7879;
            this.typename();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assign_operator(): Assign_operatorContext {
        let localContext = new Assign_operatorContext(this.context, this.state);
        this.enterRule(localContext, 844, PostgreSqlParser.RULE_assign_operator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7881;
            _la = this.tokenStream.LA(1);
            if(!(_la === 10 || _la === 20)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public proc_stmt(): Proc_stmtContext {
        let localContext = new Proc_stmtContext(this.context, this.state);
        this.enterRule(localContext, 846, PostgreSqlParser.RULE_proc_stmt);
        try {
            this.state = 7907;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1084, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7883;
                this.pl_block();
                this.state = 7884;
                this.match(PostgreSqlParser.SEMI);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7886;
                this.stmt_return();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7887;
                this.stmt_raise();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7888;
                this.stmt_assign();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7889;
                this.stmt_if();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7890;
                this.stmt_case();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7891;
                this.stmt_loop_while_for();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7892;
                this.stmt_foreach_a();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 7893;
                this.stmt_exit();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 7894;
                this.stmt_assert();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 7895;
                this.stmt_execsql();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 7896;
                this.stmt_dynexecute();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 7897;
                this.stmt_perform();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 7898;
                this.stmt_call();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 7899;
                this.stmt_getdiag();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 7900;
                this.stmt_open();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 7901;
                this.stmt_fetch();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 7902;
                this.stmt_move();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 7903;
                this.stmt_close();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 7904;
                this.stmt_null();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 7905;
                this.stmt_commit_or_rollback();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 7906;
                this.stmt_set();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_perform(): Stmt_performContext {
        let localContext = new Stmt_performContext(this.context, this.state);
        this.enterRule(localContext, 848, PostgreSqlParser.RULE_stmt_perform);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7909;
            this.match(PostgreSqlParser.KW_PERFORM);
            this.state = 7910;
            this.sql_expression();
            this.state = 7911;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_call(): Stmt_callContext {
        let localContext = new Stmt_callContext(this.context, this.state);
        this.enterRule(localContext, 850, PostgreSqlParser.RULE_stmt_call);
        let _la: number;
        try {
            this.state = 7932;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_CALL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7913;
                this.match(PostgreSqlParser.KW_CALL);
                this.state = 7914;
                this.any_identifier();
                this.state = 7921;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1086, this.context) ) {
                case 1:
                    {
                    this.state = 7915;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    this.state = 7917;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                        {
                        this.state = 7916;
                        this.expr_list();
                        }
                    }

                    this.state = 7919;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    this.state = 7920;
                    this.match(PostgreSqlParser.SEMI);
                    }
                    break;
                }
                }
                break;
            case PostgreSqlParser.KW_DO:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7923;
                this.match(PostgreSqlParser.KW_DO);
                this.state = 7924;
                this.any_identifier();
                this.state = 7925;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 7927;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 805318660) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & 34074721) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & 2174763023) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & 4294967295) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967295) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 67108863) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & 4294967295) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 4294967295) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 4294967295) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & 4294967295) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 4294967295) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & 4294967295) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & 4278190079) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & 4294967295) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & 1174402559) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 487696527) !== 0) || _la === 584) {
                    {
                    this.state = 7926;
                    this.expr_list();
                    }
                }

                this.state = 7929;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                this.state = 7930;
                this.match(PostgreSqlParser.SEMI);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_assign(): Stmt_assignContext {
        let localContext = new Stmt_assignContext(this.context, this.state);
        this.enterRule(localContext, 852, PostgreSqlParser.RULE_stmt_assign);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7934;
            this.assign_var();
            this.state = 7935;
            this.assign_operator();
            this.state = 7936;
            this.sql_expression();
            this.state = 7937;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_getdiag(): Stmt_getdiagContext {
        let localContext = new Stmt_getdiagContext(this.context, this.state);
        this.enterRule(localContext, 854, PostgreSqlParser.RULE_stmt_getdiag);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7939;
            this.match(PostgreSqlParser.KW_GET);
            this.state = 7941;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 434 || _la === 501) {
                {
                this.state = 7940;
                _la = this.tokenStream.LA(1);
                if(!(_la === 434 || _la === 501)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 7943;
            this.match(PostgreSqlParser.KW_DIAGNOSTICS);
            {
            this.state = 7944;
            this.getdiag_list_item();
            this.state = 7949;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7945;
                this.match(PostgreSqlParser.COMMA);
                this.state = 7946;
                this.getdiag_list_item();
                }
                }
                this.state = 7951;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 7952;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getdiag_list_item(): Getdiag_list_itemContext {
        let localContext = new Getdiag_list_itemContext(this.context, this.state);
        this.enterRule(localContext, 856, PostgreSqlParser.RULE_getdiag_list_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7954;
            this.assign_var();
            this.state = 7955;
            this.assign_operator();
            this.state = 7956;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assign_var(): Assign_varContext {
        let localContext = new Assign_varContext(this.context, this.state);
        this.enterRule(localContext, 858, PostgreSqlParser.RULE_assign_var);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7960;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                {
                this.state = 7958;
                this.any_name();
                }
                break;
            case PostgreSqlParser.PARAM:
                {
                this.state = 7959;
                this.match(PostgreSqlParser.PARAM);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 7968;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 4) {
                {
                {
                this.state = 7962;
                this.match(PostgreSqlParser.OPEN_BRACKET);
                this.state = 7963;
                this.expression();
                this.state = 7964;
                this.match(PostgreSqlParser.CLOSE_BRACKET);
                }
                }
                this.state = 7970;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_if(): Stmt_ifContext {
        let localContext = new Stmt_ifContext(this.context, this.state);
        this.enterRule(localContext, 860, PostgreSqlParser.RULE_stmt_if);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7971;
            this.match(PostgreSqlParser.KW_IF);
            this.state = 7972;
            this.sql_expression();
            this.state = 7973;
            this.match(PostgreSqlParser.KW_THEN);
            this.state = 7977;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1093, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 7974;
                    this.proc_stmt();
                    }
                    }
                }
                this.state = 7979;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1093, this.context);
            }
            {
            this.state = 7991;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 502) {
                {
                {
                this.state = 7980;
                this.match(PostgreSqlParser.KW_ELSIF);
                this.state = 7981;
                this.expression();
                this.state = 7982;
                this.match(PostgreSqlParser.KW_THEN);
                this.state = 7986;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1094, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 7983;
                        this.proc_stmt();
                        }
                        }
                    }
                    this.state = 7988;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 1094, this.context);
                }
                }
                }
                this.state = 7993;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 7995;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 58) {
                {
                this.state = 7994;
                this.stmt_else();
                }
            }

            this.state = 7997;
            this.match(PostgreSqlParser.KW_END);
            this.state = 7998;
            this.match(PostgreSqlParser.KW_IF);
            this.state = 7999;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_else(): Stmt_elseContext {
        let localContext = new Stmt_elseContext(this.context, this.state);
        this.enterRule(localContext, 862, PostgreSqlParser.RULE_stmt_else);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8001;
            this.match(PostgreSqlParser.KW_ELSE);
            this.state = 8005;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1097, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 8002;
                    this.proc_stmt();
                    }
                    }
                }
                this.state = 8007;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1097, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_case(): Stmt_caseContext {
        let localContext = new Stmt_caseContext(this.context, this.state);
        this.enterRule(localContext, 864, PostgreSqlParser.RULE_stmt_case);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8008;
            this.match(PostgreSqlParser.KW_CASE);
            this.state = 8010;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1098, this.context) ) {
            case 1:
                {
                this.state = 8009;
                this.sql_expression();
                }
                break;
            }
            this.state = 8021;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 8012;
                this.match(PostgreSqlParser.KW_WHEN);
                this.state = 8013;
                this.expr_list();
                this.state = 8014;
                this.match(PostgreSqlParser.KW_THEN);
                this.state = 8018;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1099, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 8015;
                        this.proc_stmt();
                        }
                        }
                    }
                    this.state = 8020;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 1099, this.context);
                }
                }
                }
                this.state = 8023;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 102);
            this.state = 8026;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 58) {
                {
                this.state = 8025;
                this.stmt_else();
                }
            }

            this.state = 8028;
            this.match(PostgreSqlParser.KW_END);
            this.state = 8029;
            this.match(PostgreSqlParser.KW_CASE);
            this.state = 8030;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_loop_while_for(): Stmt_loop_while_forContext {
        let localContext = new Stmt_loop_while_forContext(this.context, this.state);
        this.enterRule(localContext, 866, PostgreSqlParser.RULE_stmt_loop_while_for);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8033;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 18) {
                {
                this.state = 8032;
                this.label_decl();
                }
            }

            this.state = 8039;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_WHILE:
                {
                {
                this.state = 8035;
                this.match(PostgreSqlParser.KW_WHILE);
                this.state = 8036;
                this.expression();
                }
                }
                break;
            case PostgreSqlParser.KW_FOR:
                {
                {
                this.state = 8037;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 8038;
                this.for_control();
                }
                }
                break;
            case PostgreSqlParser.KW_LOOP:
                break;
            default:
                break;
            }
            this.state = 8041;
            this.loop_body();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public for_control(): For_controlContext {
        let localContext = new For_controlContext(this.context, this.state);
        this.enterRule(localContext, 868, PostgreSqlParser.RULE_for_control);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8043;
            this.any_name_list();
            this.state = 8044;
            this.match(PostgreSqlParser.KW_IN);
            this.state = 8067;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1108, this.context) ) {
            case 1:
                {
                this.state = 8045;
                this.colid();
                this.state = 8047;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 8046;
                    this.execute_param_clause();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 8049;
                this.selectstmt();
                }
                break;
            case 3:
                {
                this.state = 8050;
                this.explainstmt();
                }
                break;
            case 4:
                {
                this.state = 8051;
                this.match(PostgreSqlParser.KW_EXECUTE);
                this.state = 8052;
                this.expression();
                this.state = 8055;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 8053;
                    this.match(PostgreSqlParser.KW_USING);
                    this.state = 8054;
                    this.expr_list();
                    }
                }

                }
                break;
            case 5:
                {
                this.state = 8058;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1106, this.context) ) {
                case 1:
                    {
                    this.state = 8057;
                    this.match(PostgreSqlParser.KW_REVERSE);
                    }
                    break;
                }
                this.state = 8060;
                this.expression();
                this.state = 8061;
                this.match(PostgreSqlParser.DOT_DOT);
                this.state = 8062;
                this.expression();
                this.state = 8065;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 147) {
                    {
                    this.state = 8063;
                    this.match(PostgreSqlParser.KW_BY);
                    this.state = 8064;
                    this.expression();
                    }
                }

                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_foreach_a(): Stmt_foreach_aContext {
        let localContext = new Stmt_foreach_aContext(this.context, this.state);
        this.enterRule(localContext, 870, PostgreSqlParser.RULE_stmt_foreach_a);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8070;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 18) {
                {
                this.state = 8069;
                this.label_decl();
                }
            }

            this.state = 8072;
            this.match(PostgreSqlParser.KW_FOREACH);
            this.state = 8073;
            this.any_name_list();
            this.state = 8076;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 506) {
                {
                this.state = 8074;
                this.match(PostgreSqlParser.KW_SLICE);
                this.state = 8075;
                this.match(PostgreSqlParser.Integral);
                }
            }

            this.state = 8078;
            this.match(PostgreSqlParser.KW_IN);
            this.state = 8079;
            this.match(PostgreSqlParser.KW_ARRAY);
            this.state = 8080;
            this.expression();
            this.state = 8081;
            this.loop_body();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_exit(): Stmt_exitContext {
        let localContext = new Stmt_exitContext(this.context, this.state);
        this.enterRule(localContext, 872, PostgreSqlParser.RULE_stmt_exit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8083;
            _la = this.tokenStream.LA(1);
            if(!(_la === 167 || _la === 507)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8085;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 8084;
                this.any_identifier();
                }
            }

            this.state = 8089;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 102) {
                {
                this.state = 8087;
                this.match(PostgreSqlParser.KW_WHEN);
                this.state = 8088;
                this.sql_expression();
                }
            }

            this.state = 8091;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_return(): Stmt_returnContext {
        let localContext = new Stmt_returnContext(this.context, this.state);
        this.enterRule(localContext, 874, PostgreSqlParser.RULE_stmt_return);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8093;
            this.match(PostgreSqlParser.KW_RETURN);
            this.state = 8108;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1115, this.context) ) {
            case 1:
                {
                this.state = 8094;
                this.match(PostgreSqlParser.KW_NEXT);
                this.state = 8095;
                this.sql_expression();
                }
                break;
            case 2:
                {
                this.state = 8096;
                this.match(PostgreSqlParser.KW_QUERY);
                this.state = 8103;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_EXECUTE:
                    {
                    this.state = 8097;
                    this.match(PostgreSqlParser.KW_EXECUTE);
                    this.state = 8098;
                    this.expression();
                    this.state = 8099;
                    this.match(PostgreSqlParser.KW_USING);
                    this.state = 8100;
                    this.expr_list();
                    }
                    break;
                case PostgreSqlParser.OPEN_PAREN:
                case PostgreSqlParser.KW_SELECT:
                case PostgreSqlParser.KW_TABLE:
                case PostgreSqlParser.KW_WITH:
                case PostgreSqlParser.KW_VALUES:
                    {
                    this.state = 8102;
                    this.selectstmt();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                {
                this.state = 8106;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1114, this.context) ) {
                case 1:
                    {
                    this.state = 8105;
                    this.sql_expression();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 8110;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_raise(): Stmt_raiseContext {
        let localContext = new Stmt_raiseContext(this.context, this.state);
        this.enterRule(localContext, 876, PostgreSqlParser.RULE_stmt_raise);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8112;
            this.match(PostgreSqlParser.KW_RAISE);
            this.state = 8142;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1122, this.context) ) {
            case 1:
                {
                this.state = 8114;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1116, this.context) ) {
                case 1:
                    {
                    this.state = 8113;
                    _la = this.tokenStream.LA(1);
                    if(!(((((_la - 512)) & ~0x1F) === 0 && ((1 << (_la - 512)) & 63) !== 0))) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 8128;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1119, this.context) ) {
                case 1:
                    {
                    this.state = 8116;
                    this.identifier();
                    }
                    break;
                case 2:
                    {
                    {
                    this.state = 8117;
                    this.match(PostgreSqlParser.KW_SQLSTATE);
                    this.state = 8118;
                    this.sconst();
                    }
                    }
                    break;
                case 3:
                    {
                    {
                    this.state = 8119;
                    this.sconst();
                    this.state = 8126;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 6) {
                        {
                        this.state = 8122;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        do {
                            {
                            {
                            this.state = 8120;
                            this.match(PostgreSqlParser.COMMA);
                            this.state = 8121;
                            this.expression();
                            }
                            }
                            this.state = 8124;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        } while (_la === 6);
                        }
                    }

                    }
                    }
                    break;
                }
                this.state = 8139;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 8130;
                    this.match(PostgreSqlParser.KW_USING);
                    {
                    this.state = 8131;
                    this.opt_raise_using_elem();
                    this.state = 8136;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 6) {
                        {
                        {
                        this.state = 8132;
                        this.match(PostgreSqlParser.COMMA);
                        this.state = 8133;
                        this.opt_raise_using_elem();
                        }
                        }
                        this.state = 8138;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    }
                }

                this.state = 8141;
                this.match(PostgreSqlParser.SEMI);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_raise_using_elem(): Opt_raise_using_elemContext {
        let localContext = new Opt_raise_using_elemContext(this.context, this.state);
        this.enterRule(localContext, 878, PostgreSqlParser.RULE_opt_raise_using_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8144;
            this.identifier();
            this.state = 8145;
            this.match(PostgreSqlParser.EQUAL);
            this.state = 8146;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_assert(): Stmt_assertContext {
        let localContext = new Stmt_assertContext(this.context, this.state);
        this.enterRule(localContext, 880, PostgreSqlParser.RULE_stmt_assert);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8148;
            this.match(PostgreSqlParser.KW_ASSERT);
            this.state = 8149;
            this.sql_expression();
            this.state = 8152;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6) {
                {
                this.state = 8150;
                this.match(PostgreSqlParser.COMMA);
                this.state = 8151;
                this.sql_expression();
                }
            }

            this.state = 8154;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loop_body(): Loop_bodyContext {
        let localContext = new Loop_bodyContext(this.context, this.state);
        this.enterRule(localContext, 882, PostgreSqlParser.RULE_loop_body);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8156;
            this.match(PostgreSqlParser.KW_LOOP);
            this.state = 8160;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1124, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 8157;
                    this.proc_stmt();
                    }
                    }
                }
                this.state = 8162;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1124, this.context);
            }
            this.state = 8163;
            this.match(PostgreSqlParser.KW_END);
            this.state = 8164;
            this.match(PostgreSqlParser.KW_LOOP);
            this.state = 8166;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 8165;
                this.any_identifier();
                }
            }

            this.state = 8168;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_execsql(): Stmt_execsqlContext {
        let localContext = new Stmt_execsqlContext(this.context, this.state);
        this.enterRule(localContext, 884, PostgreSqlParser.RULE_stmt_execsql);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8170;
            this.stmt();
            this.state = 8172;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 71) {
                {
                this.state = 8171;
                this.opt_execute_into();
                }
            }

            this.state = 8174;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_dynexecute(): Stmt_dynexecuteContext {
        let localContext = new Stmt_dynexecuteContext(this.context, this.state);
        this.enterRule(localContext, 886, PostgreSqlParser.RULE_stmt_dynexecute);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8176;
            this.match(PostgreSqlParser.KW_EXECUTE);
            this.state = 8177;
            this.expression();
            this.state = 8193;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1131, this.context) ) {
            case 1:
                {
                this.state = 8179;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 71) {
                    {
                    this.state = 8178;
                    this.opt_execute_into();
                    }
                }

                this.state = 8183;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 8181;
                    this.match(PostgreSqlParser.KW_USING);
                    this.state = 8182;
                    this.expr_list();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 8187;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 8185;
                    this.match(PostgreSqlParser.KW_USING);
                    this.state = 8186;
                    this.expr_list();
                    }
                }

                this.state = 8190;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 71) {
                    {
                    this.state = 8189;
                    this.opt_execute_into();
                    }
                }

                }
                break;
            case 3:
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            }
            this.state = 8195;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_execute_into(): Opt_execute_intoContext {
        let localContext = new Opt_execute_intoContext(this.context, this.state);
        this.enterRule(localContext, 888, PostgreSqlParser.RULE_opt_execute_into);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8197;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 8199;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1132, this.context) ) {
            case 1:
                {
                this.state = 8198;
                this.match(PostgreSqlParser.KW_STRICT);
                }
                break;
            }
            this.state = 8201;
            this.expr_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_open(): Stmt_openContext {
        let localContext = new Stmt_openContext(this.context, this.state);
        this.enterRule(localContext, 890, PostgreSqlParser.RULE_stmt_open);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8203;
            this.match(PostgreSqlParser.KW_OPEN);
            this.state = 8235;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1139, this.context) ) {
            case 1:
                {
                this.state = 8204;
                this.cursor_variable();
                this.state = 8209;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269 || _la === 324) {
                    {
                    this.state = 8206;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 269) {
                        {
                        this.state = 8205;
                        this.match(PostgreSqlParser.KW_NO);
                        }
                    }

                    this.state = 8208;
                    this.match(PostgreSqlParser.KW_SCROLL);
                    }
                }

                this.state = 8211;
                this.match(PostgreSqlParser.KW_FOR);
                this.state = 8219;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.OPEN_PAREN:
                case PostgreSqlParser.KW_SELECT:
                case PostgreSqlParser.KW_TABLE:
                case PostgreSqlParser.KW_WITH:
                case PostgreSqlParser.KW_VALUES:
                    {
                    this.state = 8212;
                    this.selectstmt();
                    }
                    break;
                case PostgreSqlParser.KW_EXECUTE:
                    {
                    this.state = 8213;
                    this.match(PostgreSqlParser.KW_EXECUTE);
                    this.state = 8214;
                    this.sql_expression();
                    this.state = 8217;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 100) {
                        {
                        this.state = 8215;
                        this.match(PostgreSqlParser.KW_USING);
                        this.state = 8216;
                        this.expr_list();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                {
                this.state = 8221;
                this.colid();
                this.state = 8233;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 8222;
                    this.match(PostgreSqlParser.OPEN_PAREN);
                    {
                    this.state = 8223;
                    this.opt_open_bound_list_item();
                    this.state = 8228;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    while (_la === 6) {
                        {
                        {
                        this.state = 8224;
                        this.match(PostgreSqlParser.COMMA);
                        this.state = 8225;
                        this.opt_open_bound_list_item();
                        }
                        }
                        this.state = 8230;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                    }
                    }
                    this.state = 8231;
                    this.match(PostgreSqlParser.CLOSE_PAREN);
                    }
                }

                }
                break;
            }
            this.state = 8237;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_open_bound_list_item(): Opt_open_bound_list_itemContext {
        let localContext = new Opt_open_bound_list_itemContext(this.context, this.state);
        this.enterRule(localContext, 892, PostgreSqlParser.RULE_opt_open_bound_list_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8242;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1140, this.context) ) {
            case 1:
                {
                this.state = 8239;
                this.colid();
                this.state = 8240;
                this.match(PostgreSqlParser.COLON_EQUALS);
                }
                break;
            }
            this.state = 8244;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_fetch(): Stmt_fetchContext {
        let localContext = new Stmt_fetchContext(this.context, this.state);
        this.enterRule(localContext, 894, PostgreSqlParser.RULE_stmt_fetch);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8246;
            this.match(PostgreSqlParser.KW_FETCH);
            this.state = 8248;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1141, this.context) ) {
            case 1:
                {
                this.state = 8247;
                localContext._direction = this.opt_fetch_direction();
                }
                break;
            }
            this.state = 8251;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 64 || _la === 68) {
                {
                this.state = 8250;
                this.from_in();
                }
            }

            this.state = 8253;
            this.cursor_variable();
            this.state = 8254;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 8255;
            this.expr_list();
            this.state = 8256;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_fetch_direction(): Opt_fetch_directionContext {
        let localContext = new Opt_fetch_directionContext(this.context, this.state);
        this.enterRule(localContext, 896, PostgreSqlParser.RULE_opt_fetch_direction);
        let _la: number;
        try {
            this.state = 8272;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1145, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8258;
                this.match(PostgreSqlParser.KW_NEXT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8259;
                this.match(PostgreSqlParser.KW_PRIOR);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8260;
                this.match(PostgreSqlParser.KW_FIRST);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8261;
                this.match(PostgreSqlParser.KW_LAST);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8263;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1143, this.context) ) {
                case 1:
                    {
                    this.state = 8262;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 130 || _la === 307)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                this.state = 8265;
                this.expression();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 8266;
                this.match(PostgreSqlParser.KW_ALL);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 8267;
                _la = this.tokenStream.LA(1);
                if(!(_la === 144 || _la === 210)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8270;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1144, this.context) ) {
                case 1:
                    {
                    this.state = 8268;
                    this.expression();
                    }
                    break;
                case 2:
                    {
                    this.state = 8269;
                    this.match(PostgreSqlParser.KW_ALL);
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_move(): Stmt_moveContext {
        let localContext = new Stmt_moveContext(this.context, this.state);
        this.enterRule(localContext, 898, PostgreSqlParser.RULE_stmt_move);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8274;
            this.match(PostgreSqlParser.KW_MOVE);
            this.state = 8276;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1146, this.context) ) {
            case 1:
                {
                this.state = 8275;
                this.opt_fetch_direction();
                }
                break;
            }
            this.state = 8278;
            this.cursor_variable();
            this.state = 8279;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mergestmt(): MergestmtContext {
        let localContext = new MergestmtContext(this.context, this.state);
        this.enterRule(localContext, 900, PostgreSqlParser.RULE_mergestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8282;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 105) {
                {
                this.state = 8281;
                this.with_clause();
                }
            }

            this.state = 8284;
            this.match(PostgreSqlParser.KW_MERGE);
            this.state = 8285;
            this.match(PostgreSqlParser.KW_INTO);
            this.state = 8287;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 8286;
                this.match(PostgreSqlParser.KW_ONLY);
                }
            }

            this.state = 8289;
            this.table_name();
            this.state = 8291;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 9) {
                {
                this.state = 8290;
                this.match(PostgreSqlParser.STAR);
                }
            }

            this.state = 8297;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36 || _la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 8294;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 36) {
                    {
                    this.state = 8293;
                    this.match(PostgreSqlParser.KW_AS);
                    }
                }

                this.state = 8296;
                this.colid();
                }
            }

            this.state = 8299;
            this.match(PostgreSqlParser.KW_USING);
            this.state = 8300;
            this.data_source();
            this.state = 8301;
            this.match(PostgreSqlParser.KW_ON);
            this.state = 8302;
            this.expression();
            this.state = 8304;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 8303;
                this.merge_when_clause();
                }
                }
                this.state = 8306;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 102);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public data_source(): Data_sourceContext {
        let localContext = new Data_sourceContext(this.context, this.state);
        this.enterRule(localContext, 902, PostgreSqlParser.RULE_data_source);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8319;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1156, this.context) ) {
            case 1:
                {
                this.state = 8309;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 8308;
                    this.match(PostgreSqlParser.KW_ONLY);
                    }
                }

                this.state = 8311;
                this.table_name();
                this.state = 8313;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 9) {
                    {
                    this.state = 8312;
                    this.match(PostgreSqlParser.STAR);
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 8317;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1155, this.context) ) {
                case 1:
                    {
                    this.state = 8315;
                    this.select_no_parens();
                    }
                    break;
                case 2:
                    {
                    this.state = 8316;
                    this.values_clause();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 8325;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 36 || _la === 53 || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & 4294959489) !== 0) || ((((_la - 148)) & ~0x1F) === 0 && ((1 << (_la - 148)) & 4294967295) !== 0) || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & 4294967295) !== 0) || ((((_la - 212)) & ~0x1F) === 0 && ((1 << (_la - 212)) & 4227989503) !== 0) || ((((_la - 244)) & ~0x1F) === 0 && ((1 << (_la - 244)) & 4294967295) !== 0) || ((((_la - 276)) & ~0x1F) === 0 && ((1 << (_la - 276)) & 4294967295) !== 0) || ((((_la - 308)) & ~0x1F) === 0 && ((1 << (_la - 308)) & 4294967295) !== 0) || ((((_la - 340)) & ~0x1F) === 0 && ((1 << (_la - 340)) & 4294967295) !== 0) || ((((_la - 372)) & ~0x1F) === 0 && ((1 << (_la - 372)) & 4294967295) !== 0) || ((((_la - 404)) & ~0x1F) === 0 && ((1 << (_la - 404)) & 4294967295) !== 0) || ((((_la - 436)) & ~0x1F) === 0 && ((1 << (_la - 436)) & 4294705151) !== 0) || ((((_la - 468)) & ~0x1F) === 0 && ((1 << (_la - 468)) & 4294967279) !== 0) || ((((_la - 500)) & ~0x1F) === 0 && ((1 << (_la - 500)) & 18350039) !== 0) || ((((_la - 547)) & ~0x1F) === 0 && ((1 << (_la - 547)) & 402696335) !== 0) || _la === 584) {
                {
                this.state = 8322;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 36) {
                    {
                    this.state = 8321;
                    this.match(PostgreSqlParser.KW_AS);
                    }
                }

                this.state = 8324;
                this.colid();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public merge_when_clause(): Merge_when_clauseContext {
        let localContext = new Merge_when_clauseContext(this.context, this.state);
        this.enterRule(localContext, 904, PostgreSqlParser.RULE_merge_when_clause);
        let _la: number;
        try {
            this.state = 8353;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1163, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8327;
                this.match(PostgreSqlParser.KW_WHEN);
                this.state = 8328;
                this.match(PostgreSqlParser.KW_MATCHED);
                this.state = 8331;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 33) {
                    {
                    this.state = 8329;
                    this.match(PostgreSqlParser.KW_AND);
                    this.state = 8330;
                    this.expression();
                    }
                }

                this.state = 8333;
                this.match(PostgreSqlParser.KW_THEN);
                this.state = 8338;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_UPDATE:
                    {
                    this.state = 8334;
                    this.merge_update();
                    }
                    break;
                case PostgreSqlParser.KW_DELETE:
                    {
                    this.state = 8335;
                    this.match(PostgreSqlParser.KW_DELETE);
                    }
                    break;
                case PostgreSqlParser.KW_DO:
                    {
                    this.state = 8336;
                    this.match(PostgreSqlParser.KW_DO);
                    this.state = 8337;
                    this.match(PostgreSqlParser.KW_NOTHING);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8340;
                this.match(PostgreSqlParser.KW_WHEN);
                this.state = 8341;
                this.match(PostgreSqlParser.KW_NOT);
                this.state = 8342;
                this.match(PostgreSqlParser.KW_MATCHED);
                this.state = 8345;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 33) {
                    {
                    this.state = 8343;
                    this.match(PostgreSqlParser.KW_AND);
                    this.state = 8344;
                    this.expression();
                    }
                }

                this.state = 8347;
                this.match(PostgreSqlParser.KW_THEN);
                this.state = 8351;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_INSERT:
                    {
                    this.state = 8348;
                    this.merge_insert();
                    }
                    break;
                case PostgreSqlParser.KW_DO:
                    {
                    this.state = 8349;
                    this.match(PostgreSqlParser.KW_DO);
                    this.state = 8350;
                    this.match(PostgreSqlParser.KW_NOTHING);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public merge_insert(): Merge_insertContext {
        let localContext = new Merge_insertContext(this.context, this.state);
        this.enterRule(localContext, 906, PostgreSqlParser.RULE_merge_insert);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8355;
            this.match(PostgreSqlParser.KW_INSERT);
            this.state = 8357;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 8356;
                this.opt_column_list();
                }
            }

            this.state = 8362;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 463) {
                {
                this.state = 8359;
                this.match(PostgreSqlParser.KW_OVERRIDING);
                this.state = 8360;
                _la = this.tokenStream.LA(1);
                if(!(_la === 99 || _la === 349)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8361;
                this.match(PostgreSqlParser.KW_VALUE);
                }
            }

            this.state = 8364;
            this.default_values_or_values();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public merge_update(): Merge_updateContext {
        let localContext = new Merge_updateContext(this.context, this.state);
        this.enterRule(localContext, 908, PostgreSqlParser.RULE_merge_update);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8366;
            this.match(PostgreSqlParser.KW_UPDATE);
            this.state = 8367;
            this.match(PostgreSqlParser.KW_SET);
            this.state = 8385;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    this.state = 8385;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 1167, this.context) ) {
                    case 1:
                        {
                        this.state = 8368;
                        this.column_name();
                        this.state = 8369;
                        this.match(PostgreSqlParser.EQUAL);
                        this.state = 8370;
                        this.exprofdefault();
                        }
                        break;
                    case 2:
                        {
                        this.state = 8372;
                        this.opt_column_list();
                        this.state = 8373;
                        this.match(PostgreSqlParser.EQUAL);
                        this.state = 8374;
                        this.match(PostgreSqlParser.OPEN_PAREN);
                        this.state = 8375;
                        this.exprofdefault();
                        this.state = 8380;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        while (_la === 6) {
                            {
                            {
                            this.state = 8376;
                            this.match(PostgreSqlParser.COMMA);
                            this.state = 8377;
                            this.exprofdefault();
                            }
                            }
                            this.state = 8382;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                        }
                        this.state = 8383;
                        this.match(PostgreSqlParser.CLOSE_PAREN);
                        }
                        break;
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 8387;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1168, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public default_values_or_values(): Default_values_or_valuesContext {
        let localContext = new Default_values_or_valuesContext(this.context, this.state);
        this.enterRule(localContext, 910, PostgreSqlParser.RULE_default_values_or_values);
        let _la: number;
        try {
            this.state = 8403;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_VALUES:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8389;
                this.match(PostgreSqlParser.KW_VALUES);
                this.state = 8390;
                this.match(PostgreSqlParser.OPEN_PAREN);
                this.state = 8391;
                this.exprofdefault();
                this.state = 8396;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 6) {
                    {
                    {
                    this.state = 8392;
                    this.match(PostgreSqlParser.COMMA);
                    this.state = 8393;
                    this.exprofdefault();
                    }
                    }
                    this.state = 8398;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 8399;
                this.match(PostgreSqlParser.CLOSE_PAREN);
                }
                break;
            case PostgreSqlParser.KW_DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8401;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 8402;
                this.match(PostgreSqlParser.KW_VALUES);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exprofdefault(): ExprofdefaultContext {
        let localContext = new ExprofdefaultContext(this.context, this.state);
        this.enterRule(localContext, 912, PostgreSqlParser.RULE_exprofdefault);
        try {
            this.state = 8407;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1171, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8405;
                this.sortby();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8406;
                this.match(PostgreSqlParser.KW_DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_close(): Stmt_closeContext {
        let localContext = new Stmt_closeContext(this.context, this.state);
        this.enterRule(localContext, 914, PostgreSqlParser.RULE_stmt_close);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8409;
            this.match(PostgreSqlParser.KW_CLOSE);
            this.state = 8410;
            this.cursor_variable();
            this.state = 8411;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_null(): Stmt_nullContext {
        let localContext = new Stmt_nullContext(this.context, this.state);
        this.enterRule(localContext, 916, PostgreSqlParser.RULE_stmt_null);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8413;
            this.match(PostgreSqlParser.KW_NULL);
            this.state = 8414;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_commit_or_rollback(): Stmt_commit_or_rollbackContext {
        let localContext = new Stmt_commit_or_rollbackContext(this.context, this.state);
        this.enterRule(localContext, 918, PostgreSqlParser.RULE_stmt_commit_or_rollback);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8416;
            _la = this.tokenStream.LA(1);
            if(!(_la === 161 || _la === 319)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8422;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 33) {
                {
                this.state = 8417;
                this.match(PostgreSqlParser.KW_AND);
                this.state = 8419;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 8418;
                    this.match(PostgreSqlParser.KW_NO);
                    }
                }

                this.state = 8421;
                this.match(PostgreSqlParser.KW_CHAIN);
                }
            }

            this.state = 8424;
            this.match(PostgreSqlParser.SEMI);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt_set(): Stmt_setContext {
        let localContext = new Stmt_setContext(this.context, this.state);
        this.enterRule(localContext, 920, PostgreSqlParser.RULE_stmt_set);
        try {
            this.state = 8438;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8426;
                this.match(PostgreSqlParser.KW_SET);
                this.state = 8427;
                this.any_name();
                this.state = 8428;
                this.match(PostgreSqlParser.KW_TO);
                this.state = 8429;
                this.match(PostgreSqlParser.KW_DEFAULT);
                this.state = 8430;
                this.match(PostgreSqlParser.SEMI);
                }
                break;
            case PostgreSqlParser.KW_RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8432;
                this.match(PostgreSqlParser.KW_RESET);
                this.state = 8435;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSqlParser.KW_DEFAULT:
                case PostgreSqlParser.KW_IS:
                case PostgreSqlParser.KW_OUTER:
                case PostgreSqlParser.KW_OVER:
                case PostgreSqlParser.KW_ABORT:
                case PostgreSqlParser.KW_ABSOLUTE:
                case PostgreSqlParser.KW_ACCESS:
                case PostgreSqlParser.KW_ACTION:
                case PostgreSqlParser.KW_ADD:
                case PostgreSqlParser.KW_ADMIN:
                case PostgreSqlParser.KW_AFTER:
                case PostgreSqlParser.KW_AGGREGATE:
                case PostgreSqlParser.KW_ALSO:
                case PostgreSqlParser.KW_ALTER:
                case PostgreSqlParser.KW_ALWAYS:
                case PostgreSqlParser.KW_ASSERTION:
                case PostgreSqlParser.KW_ASSIGNMENT:
                case PostgreSqlParser.KW_AT:
                case PostgreSqlParser.KW_ATTRIBUTE:
                case PostgreSqlParser.KW_BACKWARD:
                case PostgreSqlParser.KW_BEFORE:
                case PostgreSqlParser.KW_BEGIN:
                case PostgreSqlParser.KW_BY:
                case PostgreSqlParser.KW_CACHE:
                case PostgreSqlParser.KW_CALLED:
                case PostgreSqlParser.KW_CASCADE:
                case PostgreSqlParser.KW_CASCADED:
                case PostgreSqlParser.KW_CATALOG:
                case PostgreSqlParser.KW_CHAIN:
                case PostgreSqlParser.KW_CHARACTERISTICS:
                case PostgreSqlParser.KW_CHECKPOINT:
                case PostgreSqlParser.KW_CLASS:
                case PostgreSqlParser.KW_CLOSE:
                case PostgreSqlParser.KW_CLUSTER:
                case PostgreSqlParser.KW_COMMENT:
                case PostgreSqlParser.KW_COMMENTS:
                case PostgreSqlParser.KW_COMMIT:
                case PostgreSqlParser.KW_COMMITTED:
                case PostgreSqlParser.KW_CONFIGURATION:
                case PostgreSqlParser.KW_CONNECTION:
                case PostgreSqlParser.KW_CONSTRAINTS:
                case PostgreSqlParser.KW_CONTENT:
                case PostgreSqlParser.KW_CONTINUE:
                case PostgreSqlParser.KW_CONVERSION:
                case PostgreSqlParser.KW_COPY:
                case PostgreSqlParser.KW_COST:
                case PostgreSqlParser.KW_CSV:
                case PostgreSqlParser.KW_CURSOR:
                case PostgreSqlParser.KW_CYCLE:
                case PostgreSqlParser.KW_DATA:
                case PostgreSqlParser.KW_DATABASE:
                case PostgreSqlParser.KW_DAY:
                case PostgreSqlParser.KW_DEALLOCATE:
                case PostgreSqlParser.KW_DECLARE:
                case PostgreSqlParser.KW_DEFAULTS:
                case PostgreSqlParser.KW_DEFERRED:
                case PostgreSqlParser.KW_DEFINER:
                case PostgreSqlParser.KW_DELETE:
                case PostgreSqlParser.KW_DELIMITER:
                case PostgreSqlParser.KW_DELIMITERS:
                case PostgreSqlParser.KW_DICTIONARY:
                case PostgreSqlParser.KW_DISABLE:
                case PostgreSqlParser.KW_DISCARD:
                case PostgreSqlParser.KW_DOCUMENT:
                case PostgreSqlParser.KW_DOMAIN:
                case PostgreSqlParser.KW_DOUBLE:
                case PostgreSqlParser.KW_DROP:
                case PostgreSqlParser.KW_EACH:
                case PostgreSqlParser.KW_ENABLE:
                case PostgreSqlParser.KW_ENCODING:
                case PostgreSqlParser.KW_ENCRYPTED:
                case PostgreSqlParser.KW_ENUM:
                case PostgreSqlParser.KW_ESCAPE:
                case PostgreSqlParser.KW_EVENT:
                case PostgreSqlParser.KW_EXCLUDE:
                case PostgreSqlParser.KW_EXCLUDING:
                case PostgreSqlParser.KW_EXCLUSIVE:
                case PostgreSqlParser.KW_EXECUTE:
                case PostgreSqlParser.KW_EXPLAIN:
                case PostgreSqlParser.KW_EXTENSION:
                case PostgreSqlParser.KW_EXTERNAL:
                case PostgreSqlParser.KW_FAMILY:
                case PostgreSqlParser.KW_FIRST:
                case PostgreSqlParser.KW_FOLLOWING:
                case PostgreSqlParser.KW_FORCE:
                case PostgreSqlParser.KW_FORWARD:
                case PostgreSqlParser.KW_FUNCTION:
                case PostgreSqlParser.KW_FUNCTIONS:
                case PostgreSqlParser.KW_GLOBAL:
                case PostgreSqlParser.KW_GRANTED:
                case PostgreSqlParser.KW_HANDLER:
                case PostgreSqlParser.KW_HEADER:
                case PostgreSqlParser.KW_HOLD:
                case PostgreSqlParser.KW_HOUR:
                case PostgreSqlParser.KW_IDENTITY:
                case PostgreSqlParser.KW_IF:
                case PostgreSqlParser.KW_IMMEDIATE:
                case PostgreSqlParser.KW_IMMUTABLE:
                case PostgreSqlParser.KW_IMPLICIT:
                case PostgreSqlParser.KW_INCLUDING:
                case PostgreSqlParser.KW_INCREMENT:
                case PostgreSqlParser.KW_INDEX:
                case PostgreSqlParser.KW_INDEXES:
                case PostgreSqlParser.KW_INHERIT:
                case PostgreSqlParser.KW_INHERITS:
                case PostgreSqlParser.KW_INLINE:
                case PostgreSqlParser.KW_INSENSITIVE:
                case PostgreSqlParser.KW_INSERT:
                case PostgreSqlParser.KW_INSTEAD:
                case PostgreSqlParser.KW_INVOKER:
                case PostgreSqlParser.KW_ISOLATION:
                case PostgreSqlParser.KW_KEY:
                case PostgreSqlParser.KW_LABEL:
                case PostgreSqlParser.KW_LANGUAGE:
                case PostgreSqlParser.KW_LARGE:
                case PostgreSqlParser.KW_LAST:
                case PostgreSqlParser.KW_LEAKPROOF:
                case PostgreSqlParser.KW_LEVEL:
                case PostgreSqlParser.KW_LISTEN:
                case PostgreSqlParser.KW_LOAD:
                case PostgreSqlParser.KW_LOCAL:
                case PostgreSqlParser.KW_LOCATION:
                case PostgreSqlParser.KW_LOCK:
                case PostgreSqlParser.KW_MAPPING:
                case PostgreSqlParser.KW_MATCH:
                case PostgreSqlParser.KW_MATERIALIZED:
                case PostgreSqlParser.KW_MAXVALUE:
                case PostgreSqlParser.KW_MINUTE:
                case PostgreSqlParser.KW_MINVALUE:
                case PostgreSqlParser.KW_MODE:
                case PostgreSqlParser.KW_MONTH:
                case PostgreSqlParser.KW_MOVE:
                case PostgreSqlParser.KW_NAME:
                case PostgreSqlParser.KW_NAMES:
                case PostgreSqlParser.KW_NEXT:
                case PostgreSqlParser.KW_NO:
                case PostgreSqlParser.KW_NOTHING:
                case PostgreSqlParser.KW_NOTIFY:
                case PostgreSqlParser.KW_NOWAIT:
                case PostgreSqlParser.KW_NULLS:
                case PostgreSqlParser.KW_OBJECT:
                case PostgreSqlParser.KW_OF:
                case PostgreSqlParser.KW_OFF:
                case PostgreSqlParser.KW_OIDS:
                case PostgreSqlParser.KW_OPERATOR:
                case PostgreSqlParser.KW_OPTION:
                case PostgreSqlParser.KW_OPTIONS:
                case PostgreSqlParser.KW_OWNED:
                case PostgreSqlParser.KW_OWNER:
                case PostgreSqlParser.KW_PARSER:
                case PostgreSqlParser.KW_PARTIAL:
                case PostgreSqlParser.KW_PARTITION:
                case PostgreSqlParser.KW_PASSING:
                case PostgreSqlParser.KW_PASSWORD:
                case PostgreSqlParser.KW_PLANS:
                case PostgreSqlParser.KW_PRECEDING:
                case PostgreSqlParser.KW_PREPARE:
                case PostgreSqlParser.KW_PREPARED:
                case PostgreSqlParser.KW_PRESERVE:
                case PostgreSqlParser.KW_PRIOR:
                case PostgreSqlParser.KW_PRIVILEGES:
                case PostgreSqlParser.KW_PROCEDURAL:
                case PostgreSqlParser.KW_PROCEDURE:
                case PostgreSqlParser.KW_PROGRAM:
                case PostgreSqlParser.KW_QUOTE:
                case PostgreSqlParser.KW_RANGE:
                case PostgreSqlParser.KW_READ:
                case PostgreSqlParser.KW_REASSIGN:
                case PostgreSqlParser.KW_RECHECK:
                case PostgreSqlParser.KW_RECURSIVE:
                case PostgreSqlParser.KW_REF:
                case PostgreSqlParser.KW_REFRESH:
                case PostgreSqlParser.KW_REINDEX:
                case PostgreSqlParser.KW_RELATIVE:
                case PostgreSqlParser.KW_RELEASE:
                case PostgreSqlParser.KW_RENAME:
                case PostgreSqlParser.KW_REPEATABLE:
                case PostgreSqlParser.KW_REPLACE:
                case PostgreSqlParser.KW_REPLICA:
                case PostgreSqlParser.KW_RESET:
                case PostgreSqlParser.KW_RESTART:
                case PostgreSqlParser.KW_RESTRICT:
                case PostgreSqlParser.KW_RETURNS:
                case PostgreSqlParser.KW_REVOKE:
                case PostgreSqlParser.KW_ROLE:
                case PostgreSqlParser.KW_ROLLBACK:
                case PostgreSqlParser.KW_ROWS:
                case PostgreSqlParser.KW_RULE:
                case PostgreSqlParser.KW_SAVEPOINT:
                case PostgreSqlParser.KW_SCHEMA:
                case PostgreSqlParser.KW_SCROLL:
                case PostgreSqlParser.KW_SEARCH:
                case PostgreSqlParser.KW_SECOND:
                case PostgreSqlParser.KW_SECURITY:
                case PostgreSqlParser.KW_SEQUENCE:
                case PostgreSqlParser.KW_SEQUENCES:
                case PostgreSqlParser.KW_SERIALIZABLE:
                case PostgreSqlParser.KW_SERVER:
                case PostgreSqlParser.KW_SESSION:
                case PostgreSqlParser.KW_SET:
                case PostgreSqlParser.KW_SHARE:
                case PostgreSqlParser.KW_SHOW:
                case PostgreSqlParser.KW_SIMPLE:
                case PostgreSqlParser.KW_SNAPSHOT:
                case PostgreSqlParser.KW_STABLE:
                case PostgreSqlParser.KW_STANDALONE:
                case PostgreSqlParser.KW_START:
                case PostgreSqlParser.KW_STATEMENT:
                case PostgreSqlParser.KW_STATISTICS:
                case PostgreSqlParser.KW_STDIN:
                case PostgreSqlParser.KW_STDOUT:
                case PostgreSqlParser.KW_STORAGE:
                case PostgreSqlParser.KW_STRICT:
                case PostgreSqlParser.KW_STRIP:
                case PostgreSqlParser.KW_SYSID:
                case PostgreSqlParser.KW_SYSTEM:
                case PostgreSqlParser.KW_TABLES:
                case PostgreSqlParser.KW_TABLESPACE:
                case PostgreSqlParser.KW_TEMP:
                case PostgreSqlParser.KW_TEMPLATE:
                case PostgreSqlParser.KW_TEMPORARY:
                case PostgreSqlParser.KW_TEXT:
                case PostgreSqlParser.KW_TRANSACTION:
                case PostgreSqlParser.KW_TRIGGER:
                case PostgreSqlParser.KW_TRUNCATE:
                case PostgreSqlParser.KW_TRUSTED:
                case PostgreSqlParser.KW_TYPE:
                case PostgreSqlParser.KW_TYPES:
                case PostgreSqlParser.KW_UNBOUNDED:
                case PostgreSqlParser.KW_UNCOMMITTED:
                case PostgreSqlParser.KW_UNENCRYPTED:
                case PostgreSqlParser.KW_UNKNOWN:
                case PostgreSqlParser.KW_UNLISTEN:
                case PostgreSqlParser.KW_UNLOGGED:
                case PostgreSqlParser.KW_UNTIL:
                case PostgreSqlParser.KW_UPDATE:
                case PostgreSqlParser.KW_VACUUM:
                case PostgreSqlParser.KW_VALID:
                case PostgreSqlParser.KW_VALIDATE:
                case PostgreSqlParser.KW_VALIDATOR:
                case PostgreSqlParser.KW_VARYING:
                case PostgreSqlParser.KW_VERSION:
                case PostgreSqlParser.KW_VIEW:
                case PostgreSqlParser.KW_VOLATILE:
                case PostgreSqlParser.KW_WHITESPACE:
                case PostgreSqlParser.KW_WITHOUT:
                case PostgreSqlParser.KW_WORK:
                case PostgreSqlParser.KW_WRAPPER:
                case PostgreSqlParser.KW_WRITE:
                case PostgreSqlParser.KW_XML:
                case PostgreSqlParser.KW_YEAR:
                case PostgreSqlParser.KW_YES:
                case PostgreSqlParser.KW_ZONE:
                case PostgreSqlParser.KW_BETWEEN:
                case PostgreSqlParser.KW_BIGINT:
                case PostgreSqlParser.KW_BIT:
                case PostgreSqlParser.KW_BOOLEAN:
                case PostgreSqlParser.KW_CHAR:
                case PostgreSqlParser.KW_CHARACTER:
                case PostgreSqlParser.KW_COALESCE:
                case PostgreSqlParser.KW_DEC:
                case PostgreSqlParser.KW_DECIMAL:
                case PostgreSqlParser.KW_EXISTS:
                case PostgreSqlParser.KW_EXTRACT:
                case PostgreSqlParser.KW_FLOAT:
                case PostgreSqlParser.KW_GREATEST:
                case PostgreSqlParser.KW_INOUT:
                case PostgreSqlParser.KW_INT:
                case PostgreSqlParser.KW_INTEGER:
                case PostgreSqlParser.KW_INTERVAL:
                case PostgreSqlParser.KW_LEAST:
                case PostgreSqlParser.KW_NATIONAL:
                case PostgreSqlParser.KW_NCHAR:
                case PostgreSqlParser.KW_NONE:
                case PostgreSqlParser.KW_NULLIF:
                case PostgreSqlParser.KW_NUMERIC:
                case PostgreSqlParser.KW_OVERLAY:
                case PostgreSqlParser.KW_POSITION:
                case PostgreSqlParser.KW_PRECISION:
                case PostgreSqlParser.KW_REAL:
                case PostgreSqlParser.KW_ROW:
                case PostgreSqlParser.KW_SETOF:
                case PostgreSqlParser.KW_SMALLINT:
                case PostgreSqlParser.KW_SUBSTRING:
                case PostgreSqlParser.KW_TIME:
                case PostgreSqlParser.KW_TIMESTAMP:
                case PostgreSqlParser.KW_TREAT:
                case PostgreSqlParser.KW_TRIM:
                case PostgreSqlParser.KW_VALUES:
                case PostgreSqlParser.KW_VARCHAR:
                case PostgreSqlParser.KW_XMLATTRIBUTES:
                case PostgreSqlParser.KW_XMLCONCAT:
                case PostgreSqlParser.KW_XMLELEMENT:
                case PostgreSqlParser.KW_XMLEXISTS:
                case PostgreSqlParser.KW_XMLFOREST:
                case PostgreSqlParser.KW_XMLPARSE:
                case PostgreSqlParser.KW_XMLPI:
                case PostgreSqlParser.KW_XMLROOT:
                case PostgreSqlParser.KW_XMLSERIALIZE:
                case PostgreSqlParser.KW_CALL:
                case PostgreSqlParser.KW_CURRENT:
                case PostgreSqlParser.KW_ATTACH:
                case PostgreSqlParser.KW_DETACH:
                case PostgreSqlParser.KW_EXPRESSION:
                case PostgreSqlParser.KW_GENERATED:
                case PostgreSqlParser.KW_LOGGED:
                case PostgreSqlParser.KW_STORED:
                case PostgreSqlParser.KW_INCLUDE:
                case PostgreSqlParser.KW_ROUTINE:
                case PostgreSqlParser.KW_TRANSFORM:
                case PostgreSqlParser.KW_IMPORT:
                case PostgreSqlParser.KW_POLICY:
                case PostgreSqlParser.KW_METHOD:
                case PostgreSqlParser.KW_REFERENCING:
                case PostgreSqlParser.KW_NEW:
                case PostgreSqlParser.KW_OLD:
                case PostgreSqlParser.KW_VALUE:
                case PostgreSqlParser.KW_SUBSCRIPTION:
                case PostgreSqlParser.KW_PUBLICATION:
                case PostgreSqlParser.KW_OUT:
                case PostgreSqlParser.KW_ROUTINES:
                case PostgreSqlParser.KW_SCHEMAS:
                case PostgreSqlParser.KW_PROCEDURES:
                case PostgreSqlParser.KW_INPUT:
                case PostgreSqlParser.KW_SUPPORT:
                case PostgreSqlParser.KW_PARALLEL:
                case PostgreSqlParser.KW_SQL:
                case PostgreSqlParser.KW_DEPENDS:
                case PostgreSqlParser.KW_OVERRIDING:
                case PostgreSqlParser.KW_CONFLICT:
                case PostgreSqlParser.KW_SKIP:
                case PostgreSqlParser.KW_LOCKED:
                case PostgreSqlParser.KW_TIES:
                case PostgreSqlParser.KW_ROLLUP:
                case PostgreSqlParser.KW_CUBE:
                case PostgreSqlParser.KW_GROUPING:
                case PostgreSqlParser.KW_SETS:
                case PostgreSqlParser.KW_ORDINALITY:
                case PostgreSqlParser.KW_XMLTABLE:
                case PostgreSqlParser.KW_COLUMNS:
                case PostgreSqlParser.KW_XMLNAMESPACES:
                case PostgreSqlParser.KW_ROWTYPE:
                case PostgreSqlParser.KW_NORMALIZED:
                case PostgreSqlParser.KW_WITHIN:
                case PostgreSqlParser.KW_FILTER:
                case PostgreSqlParser.KW_GROUPS:
                case PostgreSqlParser.KW_OTHERS:
                case PostgreSqlParser.KW_NFC:
                case PostgreSqlParser.KW_NFD:
                case PostgreSqlParser.KW_NFKC:
                case PostgreSqlParser.KW_NFKD:
                case PostgreSqlParser.KW_UESCAPE:
                case PostgreSqlParser.KW_VIEWS:
                case PostgreSqlParser.KW_NORMALIZE:
                case PostgreSqlParser.KW_DUMP:
                case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
                case PostgreSqlParser.KW_VARIABLE_CONFLICT:
                case PostgreSqlParser.KW_ERROR:
                case PostgreSqlParser.KW_USE_VARIABLE:
                case PostgreSqlParser.KW_USE_COLUMN:
                case PostgreSqlParser.KW_ALIAS:
                case PostgreSqlParser.KW_CONSTANT:
                case PostgreSqlParser.KW_PERFORM:
                case PostgreSqlParser.KW_GET:
                case PostgreSqlParser.KW_DIAGNOSTICS:
                case PostgreSqlParser.KW_STACKED:
                case PostgreSqlParser.KW_ELSIF:
                case PostgreSqlParser.KW_REVERSE:
                case PostgreSqlParser.KW_SLICE:
                case PostgreSqlParser.KW_EXIT:
                case PostgreSqlParser.KW_RETURN:
                case PostgreSqlParser.KW_QUERY:
                case PostgreSqlParser.KW_RAISE:
                case PostgreSqlParser.KW_SQLSTATE:
                case PostgreSqlParser.KW_DEBUG:
                case PostgreSqlParser.KW_LOG:
                case PostgreSqlParser.KW_INFO:
                case PostgreSqlParser.KW_NOTICE:
                case PostgreSqlParser.KW_WARNING:
                case PostgreSqlParser.KW_EXCEPTION:
                case PostgreSqlParser.KW_ASSERT:
                case PostgreSqlParser.KW_OPEN:
                case PostgreSqlParser.KW_PUBLIC:
                case PostgreSqlParser.KW_SKIP_LOCKED:
                case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
                case PostgreSqlParser.Identifier:
                case PostgreSqlParser.QuotedIdentifier:
                case PostgreSqlParser.UnicodeQuotedIdentifier:
                case PostgreSqlParser.StringConstant:
                case PostgreSqlParser.UnicodeEscapeStringConstant:
                case PostgreSqlParser.BeginDollarStringConstant:
                case PostgreSqlParser.PLSQLVARIABLENAME:
                case PostgreSqlParser.PLSQLIDENTIFIER:
                case PostgreSqlParser.EscapeStringConstant:
                    {
                    this.state = 8433;
                    this.any_name();
                    }
                    break;
                case PostgreSqlParser.KW_ALL:
                    {
                    this.state = 8434;
                    this.match(PostgreSqlParser.KW_ALL);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 8437;
                this.match(PostgreSqlParser.SEMI);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cursor_variable(): Cursor_variableContext {
        let localContext = new Cursor_variableContext(this.context, this.state);
        this.enterRule(localContext, 922, PostgreSqlParser.RULE_cursor_variable);
        try {
            this.state = 8442;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSqlParser.KW_DEFAULT:
            case PostgreSqlParser.KW_IS:
            case PostgreSqlParser.KW_OUTER:
            case PostgreSqlParser.KW_OVER:
            case PostgreSqlParser.KW_ABORT:
            case PostgreSqlParser.KW_ABSOLUTE:
            case PostgreSqlParser.KW_ACCESS:
            case PostgreSqlParser.KW_ACTION:
            case PostgreSqlParser.KW_ADD:
            case PostgreSqlParser.KW_ADMIN:
            case PostgreSqlParser.KW_AFTER:
            case PostgreSqlParser.KW_AGGREGATE:
            case PostgreSqlParser.KW_ALSO:
            case PostgreSqlParser.KW_ALTER:
            case PostgreSqlParser.KW_ALWAYS:
            case PostgreSqlParser.KW_ASSERTION:
            case PostgreSqlParser.KW_ASSIGNMENT:
            case PostgreSqlParser.KW_AT:
            case PostgreSqlParser.KW_ATTRIBUTE:
            case PostgreSqlParser.KW_BACKWARD:
            case PostgreSqlParser.KW_BEFORE:
            case PostgreSqlParser.KW_BEGIN:
            case PostgreSqlParser.KW_BY:
            case PostgreSqlParser.KW_CACHE:
            case PostgreSqlParser.KW_CALLED:
            case PostgreSqlParser.KW_CASCADE:
            case PostgreSqlParser.KW_CASCADED:
            case PostgreSqlParser.KW_CATALOG:
            case PostgreSqlParser.KW_CHAIN:
            case PostgreSqlParser.KW_CHARACTERISTICS:
            case PostgreSqlParser.KW_CHECKPOINT:
            case PostgreSqlParser.KW_CLASS:
            case PostgreSqlParser.KW_CLOSE:
            case PostgreSqlParser.KW_CLUSTER:
            case PostgreSqlParser.KW_COMMENT:
            case PostgreSqlParser.KW_COMMENTS:
            case PostgreSqlParser.KW_COMMIT:
            case PostgreSqlParser.KW_COMMITTED:
            case PostgreSqlParser.KW_CONFIGURATION:
            case PostgreSqlParser.KW_CONNECTION:
            case PostgreSqlParser.KW_CONSTRAINTS:
            case PostgreSqlParser.KW_CONTENT:
            case PostgreSqlParser.KW_CONTINUE:
            case PostgreSqlParser.KW_CONVERSION:
            case PostgreSqlParser.KW_COPY:
            case PostgreSqlParser.KW_COST:
            case PostgreSqlParser.KW_CSV:
            case PostgreSqlParser.KW_CURSOR:
            case PostgreSqlParser.KW_CYCLE:
            case PostgreSqlParser.KW_DATA:
            case PostgreSqlParser.KW_DATABASE:
            case PostgreSqlParser.KW_DAY:
            case PostgreSqlParser.KW_DEALLOCATE:
            case PostgreSqlParser.KW_DECLARE:
            case PostgreSqlParser.KW_DEFAULTS:
            case PostgreSqlParser.KW_DEFERRED:
            case PostgreSqlParser.KW_DEFINER:
            case PostgreSqlParser.KW_DELETE:
            case PostgreSqlParser.KW_DELIMITER:
            case PostgreSqlParser.KW_DELIMITERS:
            case PostgreSqlParser.KW_DICTIONARY:
            case PostgreSqlParser.KW_DISABLE:
            case PostgreSqlParser.KW_DISCARD:
            case PostgreSqlParser.KW_DOCUMENT:
            case PostgreSqlParser.KW_DOMAIN:
            case PostgreSqlParser.KW_DOUBLE:
            case PostgreSqlParser.KW_DROP:
            case PostgreSqlParser.KW_EACH:
            case PostgreSqlParser.KW_ENABLE:
            case PostgreSqlParser.KW_ENCODING:
            case PostgreSqlParser.KW_ENCRYPTED:
            case PostgreSqlParser.KW_ENUM:
            case PostgreSqlParser.KW_ESCAPE:
            case PostgreSqlParser.KW_EVENT:
            case PostgreSqlParser.KW_EXCLUDE:
            case PostgreSqlParser.KW_EXCLUDING:
            case PostgreSqlParser.KW_EXCLUSIVE:
            case PostgreSqlParser.KW_EXECUTE:
            case PostgreSqlParser.KW_EXPLAIN:
            case PostgreSqlParser.KW_EXTENSION:
            case PostgreSqlParser.KW_EXTERNAL:
            case PostgreSqlParser.KW_FAMILY:
            case PostgreSqlParser.KW_FIRST:
            case PostgreSqlParser.KW_FOLLOWING:
            case PostgreSqlParser.KW_FORCE:
            case PostgreSqlParser.KW_FORWARD:
            case PostgreSqlParser.KW_FUNCTION:
            case PostgreSqlParser.KW_FUNCTIONS:
            case PostgreSqlParser.KW_GLOBAL:
            case PostgreSqlParser.KW_GRANTED:
            case PostgreSqlParser.KW_HANDLER:
            case PostgreSqlParser.KW_HEADER:
            case PostgreSqlParser.KW_HOLD:
            case PostgreSqlParser.KW_HOUR:
            case PostgreSqlParser.KW_IDENTITY:
            case PostgreSqlParser.KW_IF:
            case PostgreSqlParser.KW_IMMEDIATE:
            case PostgreSqlParser.KW_IMMUTABLE:
            case PostgreSqlParser.KW_IMPLICIT:
            case PostgreSqlParser.KW_INCLUDING:
            case PostgreSqlParser.KW_INCREMENT:
            case PostgreSqlParser.KW_INDEX:
            case PostgreSqlParser.KW_INDEXES:
            case PostgreSqlParser.KW_INHERIT:
            case PostgreSqlParser.KW_INHERITS:
            case PostgreSqlParser.KW_INLINE:
            case PostgreSqlParser.KW_INSENSITIVE:
            case PostgreSqlParser.KW_INSERT:
            case PostgreSqlParser.KW_INSTEAD:
            case PostgreSqlParser.KW_INVOKER:
            case PostgreSqlParser.KW_ISOLATION:
            case PostgreSqlParser.KW_KEY:
            case PostgreSqlParser.KW_LABEL:
            case PostgreSqlParser.KW_LANGUAGE:
            case PostgreSqlParser.KW_LARGE:
            case PostgreSqlParser.KW_LAST:
            case PostgreSqlParser.KW_LEAKPROOF:
            case PostgreSqlParser.KW_LEVEL:
            case PostgreSqlParser.KW_LISTEN:
            case PostgreSqlParser.KW_LOAD:
            case PostgreSqlParser.KW_LOCAL:
            case PostgreSqlParser.KW_LOCATION:
            case PostgreSqlParser.KW_LOCK:
            case PostgreSqlParser.KW_MAPPING:
            case PostgreSqlParser.KW_MATCH:
            case PostgreSqlParser.KW_MATERIALIZED:
            case PostgreSqlParser.KW_MAXVALUE:
            case PostgreSqlParser.KW_MINUTE:
            case PostgreSqlParser.KW_MINVALUE:
            case PostgreSqlParser.KW_MODE:
            case PostgreSqlParser.KW_MONTH:
            case PostgreSqlParser.KW_MOVE:
            case PostgreSqlParser.KW_NAME:
            case PostgreSqlParser.KW_NAMES:
            case PostgreSqlParser.KW_NEXT:
            case PostgreSqlParser.KW_NO:
            case PostgreSqlParser.KW_NOTHING:
            case PostgreSqlParser.KW_NOTIFY:
            case PostgreSqlParser.KW_NOWAIT:
            case PostgreSqlParser.KW_NULLS:
            case PostgreSqlParser.KW_OBJECT:
            case PostgreSqlParser.KW_OF:
            case PostgreSqlParser.KW_OFF:
            case PostgreSqlParser.KW_OIDS:
            case PostgreSqlParser.KW_OPERATOR:
            case PostgreSqlParser.KW_OPTION:
            case PostgreSqlParser.KW_OPTIONS:
            case PostgreSqlParser.KW_OWNED:
            case PostgreSqlParser.KW_OWNER:
            case PostgreSqlParser.KW_PARSER:
            case PostgreSqlParser.KW_PARTIAL:
            case PostgreSqlParser.KW_PARTITION:
            case PostgreSqlParser.KW_PASSING:
            case PostgreSqlParser.KW_PASSWORD:
            case PostgreSqlParser.KW_PLANS:
            case PostgreSqlParser.KW_PRECEDING:
            case PostgreSqlParser.KW_PREPARE:
            case PostgreSqlParser.KW_PREPARED:
            case PostgreSqlParser.KW_PRESERVE:
            case PostgreSqlParser.KW_PRIOR:
            case PostgreSqlParser.KW_PRIVILEGES:
            case PostgreSqlParser.KW_PROCEDURAL:
            case PostgreSqlParser.KW_PROCEDURE:
            case PostgreSqlParser.KW_PROGRAM:
            case PostgreSqlParser.KW_QUOTE:
            case PostgreSqlParser.KW_RANGE:
            case PostgreSqlParser.KW_READ:
            case PostgreSqlParser.KW_REASSIGN:
            case PostgreSqlParser.KW_RECHECK:
            case PostgreSqlParser.KW_RECURSIVE:
            case PostgreSqlParser.KW_REF:
            case PostgreSqlParser.KW_REFRESH:
            case PostgreSqlParser.KW_REINDEX:
            case PostgreSqlParser.KW_RELATIVE:
            case PostgreSqlParser.KW_RELEASE:
            case PostgreSqlParser.KW_RENAME:
            case PostgreSqlParser.KW_REPEATABLE:
            case PostgreSqlParser.KW_REPLACE:
            case PostgreSqlParser.KW_REPLICA:
            case PostgreSqlParser.KW_RESET:
            case PostgreSqlParser.KW_RESTART:
            case PostgreSqlParser.KW_RESTRICT:
            case PostgreSqlParser.KW_RETURNS:
            case PostgreSqlParser.KW_REVOKE:
            case PostgreSqlParser.KW_ROLE:
            case PostgreSqlParser.KW_ROLLBACK:
            case PostgreSqlParser.KW_ROWS:
            case PostgreSqlParser.KW_RULE:
            case PostgreSqlParser.KW_SAVEPOINT:
            case PostgreSqlParser.KW_SCHEMA:
            case PostgreSqlParser.KW_SCROLL:
            case PostgreSqlParser.KW_SEARCH:
            case PostgreSqlParser.KW_SECOND:
            case PostgreSqlParser.KW_SECURITY:
            case PostgreSqlParser.KW_SEQUENCE:
            case PostgreSqlParser.KW_SEQUENCES:
            case PostgreSqlParser.KW_SERIALIZABLE:
            case PostgreSqlParser.KW_SERVER:
            case PostgreSqlParser.KW_SESSION:
            case PostgreSqlParser.KW_SET:
            case PostgreSqlParser.KW_SHARE:
            case PostgreSqlParser.KW_SHOW:
            case PostgreSqlParser.KW_SIMPLE:
            case PostgreSqlParser.KW_SNAPSHOT:
            case PostgreSqlParser.KW_STABLE:
            case PostgreSqlParser.KW_STANDALONE:
            case PostgreSqlParser.KW_START:
            case PostgreSqlParser.KW_STATEMENT:
            case PostgreSqlParser.KW_STATISTICS:
            case PostgreSqlParser.KW_STDIN:
            case PostgreSqlParser.KW_STDOUT:
            case PostgreSqlParser.KW_STORAGE:
            case PostgreSqlParser.KW_STRICT:
            case PostgreSqlParser.KW_STRIP:
            case PostgreSqlParser.KW_SYSID:
            case PostgreSqlParser.KW_SYSTEM:
            case PostgreSqlParser.KW_TABLES:
            case PostgreSqlParser.KW_TABLESPACE:
            case PostgreSqlParser.KW_TEMP:
            case PostgreSqlParser.KW_TEMPLATE:
            case PostgreSqlParser.KW_TEMPORARY:
            case PostgreSqlParser.KW_TEXT:
            case PostgreSqlParser.KW_TRANSACTION:
            case PostgreSqlParser.KW_TRIGGER:
            case PostgreSqlParser.KW_TRUNCATE:
            case PostgreSqlParser.KW_TRUSTED:
            case PostgreSqlParser.KW_TYPE:
            case PostgreSqlParser.KW_TYPES:
            case PostgreSqlParser.KW_UNBOUNDED:
            case PostgreSqlParser.KW_UNCOMMITTED:
            case PostgreSqlParser.KW_UNENCRYPTED:
            case PostgreSqlParser.KW_UNKNOWN:
            case PostgreSqlParser.KW_UNLISTEN:
            case PostgreSqlParser.KW_UNLOGGED:
            case PostgreSqlParser.KW_UNTIL:
            case PostgreSqlParser.KW_UPDATE:
            case PostgreSqlParser.KW_VACUUM:
            case PostgreSqlParser.KW_VALID:
            case PostgreSqlParser.KW_VALIDATE:
            case PostgreSqlParser.KW_VALIDATOR:
            case PostgreSqlParser.KW_VARYING:
            case PostgreSqlParser.KW_VERSION:
            case PostgreSqlParser.KW_VIEW:
            case PostgreSqlParser.KW_VOLATILE:
            case PostgreSqlParser.KW_WHITESPACE:
            case PostgreSqlParser.KW_WITHOUT:
            case PostgreSqlParser.KW_WORK:
            case PostgreSqlParser.KW_WRAPPER:
            case PostgreSqlParser.KW_WRITE:
            case PostgreSqlParser.KW_XML:
            case PostgreSqlParser.KW_YEAR:
            case PostgreSqlParser.KW_YES:
            case PostgreSqlParser.KW_ZONE:
            case PostgreSqlParser.KW_BETWEEN:
            case PostgreSqlParser.KW_BIGINT:
            case PostgreSqlParser.KW_BIT:
            case PostgreSqlParser.KW_BOOLEAN:
            case PostgreSqlParser.KW_CHAR:
            case PostgreSqlParser.KW_CHARACTER:
            case PostgreSqlParser.KW_COALESCE:
            case PostgreSqlParser.KW_DEC:
            case PostgreSqlParser.KW_DECIMAL:
            case PostgreSqlParser.KW_EXISTS:
            case PostgreSqlParser.KW_EXTRACT:
            case PostgreSqlParser.KW_FLOAT:
            case PostgreSqlParser.KW_GREATEST:
            case PostgreSqlParser.KW_INOUT:
            case PostgreSqlParser.KW_INT:
            case PostgreSqlParser.KW_INTEGER:
            case PostgreSqlParser.KW_INTERVAL:
            case PostgreSqlParser.KW_LEAST:
            case PostgreSqlParser.KW_NATIONAL:
            case PostgreSqlParser.KW_NCHAR:
            case PostgreSqlParser.KW_NONE:
            case PostgreSqlParser.KW_NULLIF:
            case PostgreSqlParser.KW_NUMERIC:
            case PostgreSqlParser.KW_OVERLAY:
            case PostgreSqlParser.KW_POSITION:
            case PostgreSqlParser.KW_PRECISION:
            case PostgreSqlParser.KW_REAL:
            case PostgreSqlParser.KW_ROW:
            case PostgreSqlParser.KW_SETOF:
            case PostgreSqlParser.KW_SMALLINT:
            case PostgreSqlParser.KW_SUBSTRING:
            case PostgreSqlParser.KW_TIME:
            case PostgreSqlParser.KW_TIMESTAMP:
            case PostgreSqlParser.KW_TREAT:
            case PostgreSqlParser.KW_TRIM:
            case PostgreSqlParser.KW_VALUES:
            case PostgreSqlParser.KW_VARCHAR:
            case PostgreSqlParser.KW_XMLATTRIBUTES:
            case PostgreSqlParser.KW_XMLCONCAT:
            case PostgreSqlParser.KW_XMLELEMENT:
            case PostgreSqlParser.KW_XMLEXISTS:
            case PostgreSqlParser.KW_XMLFOREST:
            case PostgreSqlParser.KW_XMLPARSE:
            case PostgreSqlParser.KW_XMLPI:
            case PostgreSqlParser.KW_XMLROOT:
            case PostgreSqlParser.KW_XMLSERIALIZE:
            case PostgreSqlParser.KW_CALL:
            case PostgreSqlParser.KW_CURRENT:
            case PostgreSqlParser.KW_ATTACH:
            case PostgreSqlParser.KW_DETACH:
            case PostgreSqlParser.KW_EXPRESSION:
            case PostgreSqlParser.KW_GENERATED:
            case PostgreSqlParser.KW_LOGGED:
            case PostgreSqlParser.KW_STORED:
            case PostgreSqlParser.KW_INCLUDE:
            case PostgreSqlParser.KW_ROUTINE:
            case PostgreSqlParser.KW_TRANSFORM:
            case PostgreSqlParser.KW_IMPORT:
            case PostgreSqlParser.KW_POLICY:
            case PostgreSqlParser.KW_METHOD:
            case PostgreSqlParser.KW_REFERENCING:
            case PostgreSqlParser.KW_NEW:
            case PostgreSqlParser.KW_OLD:
            case PostgreSqlParser.KW_VALUE:
            case PostgreSqlParser.KW_SUBSCRIPTION:
            case PostgreSqlParser.KW_PUBLICATION:
            case PostgreSqlParser.KW_OUT:
            case PostgreSqlParser.KW_ROUTINES:
            case PostgreSqlParser.KW_SCHEMAS:
            case PostgreSqlParser.KW_PROCEDURES:
            case PostgreSqlParser.KW_INPUT:
            case PostgreSqlParser.KW_SUPPORT:
            case PostgreSqlParser.KW_PARALLEL:
            case PostgreSqlParser.KW_SQL:
            case PostgreSqlParser.KW_DEPENDS:
            case PostgreSqlParser.KW_OVERRIDING:
            case PostgreSqlParser.KW_CONFLICT:
            case PostgreSqlParser.KW_SKIP:
            case PostgreSqlParser.KW_LOCKED:
            case PostgreSqlParser.KW_TIES:
            case PostgreSqlParser.KW_ROLLUP:
            case PostgreSqlParser.KW_CUBE:
            case PostgreSqlParser.KW_GROUPING:
            case PostgreSqlParser.KW_SETS:
            case PostgreSqlParser.KW_ORDINALITY:
            case PostgreSqlParser.KW_XMLTABLE:
            case PostgreSqlParser.KW_COLUMNS:
            case PostgreSqlParser.KW_XMLNAMESPACES:
            case PostgreSqlParser.KW_ROWTYPE:
            case PostgreSqlParser.KW_NORMALIZED:
            case PostgreSqlParser.KW_WITHIN:
            case PostgreSqlParser.KW_FILTER:
            case PostgreSqlParser.KW_GROUPS:
            case PostgreSqlParser.KW_OTHERS:
            case PostgreSqlParser.KW_NFC:
            case PostgreSqlParser.KW_NFD:
            case PostgreSqlParser.KW_NFKC:
            case PostgreSqlParser.KW_NFKD:
            case PostgreSqlParser.KW_UESCAPE:
            case PostgreSqlParser.KW_VIEWS:
            case PostgreSqlParser.KW_NORMALIZE:
            case PostgreSqlParser.KW_DUMP:
            case PostgreSqlParser.KW_PRINT_STRICT_PARAMS:
            case PostgreSqlParser.KW_VARIABLE_CONFLICT:
            case PostgreSqlParser.KW_ERROR:
            case PostgreSqlParser.KW_USE_VARIABLE:
            case PostgreSqlParser.KW_USE_COLUMN:
            case PostgreSqlParser.KW_ALIAS:
            case PostgreSqlParser.KW_CONSTANT:
            case PostgreSqlParser.KW_PERFORM:
            case PostgreSqlParser.KW_GET:
            case PostgreSqlParser.KW_DIAGNOSTICS:
            case PostgreSqlParser.KW_STACKED:
            case PostgreSqlParser.KW_ELSIF:
            case PostgreSqlParser.KW_REVERSE:
            case PostgreSqlParser.KW_SLICE:
            case PostgreSqlParser.KW_EXIT:
            case PostgreSqlParser.KW_RETURN:
            case PostgreSqlParser.KW_QUERY:
            case PostgreSqlParser.KW_RAISE:
            case PostgreSqlParser.KW_SQLSTATE:
            case PostgreSqlParser.KW_DEBUG:
            case PostgreSqlParser.KW_LOG:
            case PostgreSqlParser.KW_INFO:
            case PostgreSqlParser.KW_NOTICE:
            case PostgreSqlParser.KW_WARNING:
            case PostgreSqlParser.KW_EXCEPTION:
            case PostgreSqlParser.KW_ASSERT:
            case PostgreSqlParser.KW_OPEN:
            case PostgreSqlParser.KW_PUBLIC:
            case PostgreSqlParser.KW_SKIP_LOCKED:
            case PostgreSqlParser.KW_BUFFER_USAGE_LIMIT:
            case PostgreSqlParser.Identifier:
            case PostgreSqlParser.QuotedIdentifier:
            case PostgreSqlParser.UnicodeQuotedIdentifier:
            case PostgreSqlParser.StringConstant:
            case PostgreSqlParser.UnicodeEscapeStringConstant:
            case PostgreSqlParser.BeginDollarStringConstant:
            case PostgreSqlParser.PLSQLVARIABLENAME:
            case PostgreSqlParser.PLSQLIDENTIFIER:
            case PostgreSqlParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8440;
                this.colid();
                }
                break;
            case PostgreSqlParser.PARAM:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8441;
                this.match(PostgreSqlParser.PARAM);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exception_sect(): Exception_sectContext {
        let localContext = new Exception_sectContext(this.context, this.state);
        this.enterRule(localContext, 924, PostgreSqlParser.RULE_exception_sect);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8444;
            this.match(PostgreSqlParser.KW_EXCEPTION);
            this.state = 8461;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 8445;
                this.match(PostgreSqlParser.KW_WHEN);
                {
                this.state = 8446;
                this.proc_condition();
                this.state = 8451;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 82) {
                    {
                    {
                    this.state = 8447;
                    this.match(PostgreSqlParser.KW_OR);
                    this.state = 8448;
                    this.proc_condition();
                    }
                    }
                    this.state = 8453;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                this.state = 8454;
                this.match(PostgreSqlParser.KW_THEN);
                this.state = 8458;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1178, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 8455;
                        this.proc_stmt();
                        }
                        }
                    }
                    this.state = 8460;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 1178, this.context);
                }
                }
                }
                this.state = 8463;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 102);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public proc_condition(): Proc_conditionContext {
        let localContext = new Proc_conditionContext(this.context, this.state);
        this.enterRule(localContext, 926, PostgreSqlParser.RULE_proc_condition);
        try {
            this.state = 8468;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1180, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8465;
                this.any_identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8466;
                this.match(PostgreSqlParser.KW_SQLSTATE);
                this.state = 8467;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public any_identifier(): Any_identifierContext {
        let localContext = new Any_identifierContext(this.context, this.state);
        this.enterRule(localContext, 928, PostgreSqlParser.RULE_any_identifier);
        try {
            this.state = 8472;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1181, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8470;
                this.colid();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8471;
                this.unreserved_keyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sql_expression(): Sql_expressionContext {
        let localContext = new Sql_expressionContext(this.context, this.state);
        this.enterRule(localContext, 930, PostgreSqlParser.RULE_sql_expression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8475;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1182, this.context) ) {
            case 1:
                {
                this.state = 8474;
                this.target_list();
                }
                break;
            }
            this.state = 8478;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1183, this.context) ) {
            case 1:
                {
                this.state = 8477;
                this.into_clause();
                }
                break;
            }
            this.state = 8481;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 64) {
                {
                this.state = 8480;
                this.from_clause();
                }
            }

            this.state = 8484;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 103) {
                {
                this.state = 8483;
                this.where_clause();
                }
            }

            this.state = 8487;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 66) {
                {
                this.state = 8486;
                this.group_clause();
                }
            }

            this.state = 8491;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 67) {
                {
                this.state = 8489;
                this.match(PostgreSqlParser.KW_HAVING);
                this.state = 8490;
                this.expression();
                }
            }

            this.state = 8494;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1188, this.context) ) {
            case 1:
                {
                this.state = 8493;
                this.window_clause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                localContext.exception = re;
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.RuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 338:
            return this.booleanExpression_sempred(localContext as BooleanExpressionContext, predIndex);
        case 340:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        case 341:
            return this.primaryExpression_sempred(localContext as PrimaryExpressionContext, predIndex);
        case 400:
            return this.column_name_sempred(localContext as Column_nameContext, predIndex);
        }
        return true;
    }
    private booleanExpression_sempred(localContext: BooleanExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.precpred(this.context, 2);
        case 1:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 2:
            return this.precpred(this.context, 3);
        case 3:
            return this.precpred(this.context, 2);
        case 4:
            return this.precpred(this.context, 1);
        case 5:
            return this.precpred(this.context, 5);
        }
        return true;
    }
    private primaryExpression_sempred(localContext: PrimaryExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 6:
            return this.precpred(this.context, 3);
        case 7:
            return this.precpred(this.context, 6);
        case 8:
            return this.precpred(this.context, 4);
        case 9:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private column_name_sempred(localContext: Column_nameContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 10:
            return this.shouldMatchEmpty();
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,590,8497,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,7,400,
        2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,2,406,
        7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
        2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,
        7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
        2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
        7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,
        2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
        7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,
        2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,
        7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,
        2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,
        7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,1,0,5,0,934,
        8,0,10,0,12,0,937,9,0,1,0,1,0,1,1,1,1,3,1,943,8,1,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,3,2,1063,8,2,3,2,1065,8,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
        3,4,1074,8,4,1,4,5,4,1077,8,4,10,4,12,4,1080,9,4,1,5,1,5,1,5,3,5,
        1085,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,3,5,1120,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,1130,
        8,6,1,7,1,7,1,7,1,7,3,7,1136,8,7,1,7,5,7,1139,8,7,10,7,12,7,1142,
        9,7,1,8,1,8,1,8,1,8,3,8,1148,8,8,1,8,5,8,1151,8,8,10,8,12,8,1154,
        9,8,1,9,1,9,1,9,1,9,3,9,1160,8,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
        10,1,10,3,10,1171,8,10,1,10,1,10,1,11,1,11,5,11,1177,8,11,10,11,
        12,11,1180,9,11,1,11,3,11,1183,8,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,3,11,1195,8,11,1,11,1,11,1,11,1,11,3,11,1201,
        8,11,1,12,1,12,1,12,1,12,3,12,1207,8,12,1,12,1,12,3,12,1211,8,12,
        1,12,1,12,1,12,3,12,1216,8,12,1,12,1,12,3,12,1220,8,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,1233,8,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,1243,8,12,3,12,1245,8,12,
        1,13,1,13,1,13,1,13,3,13,1251,8,13,1,13,5,13,1254,8,13,10,13,12,
        13,1257,9,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,3,
        15,1269,8,15,1,15,3,15,1272,8,15,1,15,1,15,1,15,3,15,1277,8,15,1,
        15,5,15,1280,8,15,10,15,12,15,1283,9,15,1,16,1,16,1,17,1,17,1,17,
        1,17,1,17,1,17,3,17,1293,8,17,1,18,1,18,3,18,1297,8,18,1,18,1,18,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,1309,8,19,1,20,1,20,
        3,20,1313,8,20,1,20,3,20,1316,8,20,1,20,1,20,3,20,1320,8,20,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,1332,8,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,3,21,1350,8,21,1,22,1,22,1,22,5,22,1355,8,22,10,22,12,
        22,1358,9,22,1,23,1,23,1,23,5,23,1363,8,23,10,23,12,23,1366,9,23,
        1,24,1,24,3,24,1370,8,24,1,25,1,25,1,25,1,25,1,25,3,25,1377,8,25,
        1,26,1,26,1,26,1,26,1,26,1,26,3,26,1385,8,26,1,27,1,27,1,27,1,27,
        3,27,1391,8,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,1399,8,28,1,28,
        1,28,1,28,1,28,1,28,1,28,3,28,1407,8,28,1,29,1,29,3,29,1411,8,29,
        1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,
        1425,8,31,1,32,1,32,1,32,3,32,1430,8,32,1,33,1,33,1,33,3,33,1435,
        8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,1447,
        8,34,1,35,1,35,1,35,1,35,3,35,1453,8,35,1,35,1,35,1,36,1,36,1,37,
        1,37,1,37,1,38,1,38,1,38,3,38,1465,8,38,1,38,1,38,1,38,3,38,1470,
        8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1480,8,38,1,38,
        1,38,1,38,1,38,3,38,1486,8,38,1,38,1,38,1,38,3,38,1491,8,38,1,38,
        1,38,1,38,1,38,1,38,1,38,3,38,1499,8,38,1,38,1,38,1,38,3,38,1504,
        8,38,1,38,1,38,1,38,1,38,1,38,3,38,1511,8,38,1,38,1,38,1,38,3,38,
        1516,8,38,1,38,1,38,1,38,3,38,1521,8,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,3,38,1531,8,38,1,38,1,38,1,38,3,38,1536,8,38,1,38,
        1,38,1,38,3,38,1541,8,38,1,38,1,38,1,38,1,38,1,38,3,38,1548,8,38,
        1,38,1,38,3,38,1552,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,3,38,1566,8,38,1,38,1,38,1,38,1,38,3,38,1572,
        8,38,1,38,1,38,1,38,1,38,3,38,1578,8,38,1,38,1,38,1,38,3,38,1583,
        8,38,1,39,1,39,1,39,5,39,1588,8,39,10,39,12,39,1591,9,39,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1602,8,40,1,41,1,41,1,
        41,1,41,5,41,1608,8,41,10,41,12,41,1611,9,41,1,41,1,41,1,42,1,42,
        1,42,3,42,1618,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,
        1,44,1,44,1,44,1,44,1,44,3,44,1634,8,44,1,45,1,45,1,45,1,45,1,46,
        1,46,1,46,3,46,1643,8,46,1,46,1,46,1,46,1,46,1,46,5,46,1650,8,46,
        10,46,12,46,1653,9,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1661,8,
        46,1,46,1,46,3,46,1665,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
        46,1,46,1,46,3,46,1677,8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1685,
        8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1695,8,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,3,46,1715,8,46,1,46,1,46,1,46,3,46,1720,8,46,
        1,46,3,46,1723,8,46,1,46,1,46,1,46,1,46,1,46,3,46,1730,8,46,1,46,
        3,46,1733,8,46,1,46,1,46,3,46,1737,8,46,1,46,1,46,3,46,1741,8,46,
        1,46,3,46,1744,8,46,1,46,1,46,1,46,3,46,1749,8,46,1,46,1,46,1,46,
        3,46,1754,8,46,1,46,1,46,3,46,1758,8,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,3,46,1767,8,46,1,46,1,46,1,46,1,46,3,46,1773,8,46,1,46,
        1,46,3,46,1777,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1786,
        8,46,1,46,3,46,1789,8,46,1,46,1,46,1,46,1,46,3,46,1795,8,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,3,46,1804,8,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,4,46,1814,8,46,11,46,12,46,1815,1,46,1,46,3,
        46,1820,8,46,1,46,1,46,3,46,1824,8,46,1,46,1,46,1,46,3,46,1829,8,
        46,1,46,3,46,1832,8,46,1,46,1,46,1,46,1,46,3,46,1838,8,46,4,46,1840,
        8,46,11,46,12,46,1841,1,46,1,46,3,46,1846,8,46,1,46,1,46,1,46,1,
        46,3,46,1852,8,46,1,46,1,46,3,46,1856,8,46,1,46,1,46,1,46,3,46,1861,
        8,46,1,46,1,46,1,46,3,46,1866,8,46,1,46,1,46,3,46,1870,8,46,1,46,
        3,46,1873,8,46,1,47,1,47,1,47,1,47,1,47,3,47,1880,8,47,1,48,1,48,
        1,49,1,49,1,49,1,50,1,50,1,50,1,50,5,50,1891,8,50,10,50,12,50,1894,
        9,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,3,52,1906,
        8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,5,53,1918,
        8,53,10,53,12,53,1921,9,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,1937,8,53,1,54,1,54,1,54,1,
        54,1,54,1,54,5,54,1945,8,54,10,54,12,54,1948,9,54,1,55,1,55,1,55,
        1,55,3,55,1954,8,55,1,55,1,55,1,55,3,55,1959,8,55,1,55,1,55,3,55,
        1963,8,55,1,55,1,55,1,55,1,55,1,55,3,55,1970,8,55,1,55,1,55,1,55,
        3,55,1975,8,55,1,55,3,55,1978,8,55,3,55,1980,8,55,1,56,1,56,1,56,
        3,56,1985,8,56,1,57,1,57,3,57,1989,8,57,1,57,1,57,3,57,1993,8,57,
        1,57,1,57,3,57,1997,8,57,1,57,1,57,1,57,3,57,2002,8,57,1,57,3,57,
        2005,8,57,1,57,1,57,3,57,2009,8,57,1,57,3,57,2012,8,57,1,57,1,57,
        3,57,2016,8,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,2024,8,57,1,57,
        1,57,1,57,3,57,2029,8,57,1,57,3,57,2032,8,57,1,57,1,57,3,57,2036,
        8,57,1,58,1,58,1,58,1,58,3,58,2042,8,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,3,58,2051,8,58,1,58,1,58,3,58,2055,8,58,1,58,1,58,1,58,
        1,58,5,58,2061,8,58,10,58,12,58,2064,9,58,1,58,1,58,1,58,1,58,5,
        58,2070,8,58,10,58,12,58,2073,9,58,1,58,1,58,3,58,2077,8,58,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,2087,8,59,10,59,12,59,2090,
        9,59,1,59,1,59,3,59,2094,8,59,1,60,1,60,3,60,2098,8,60,1,60,1,60,
        3,60,2102,8,60,1,60,1,60,1,60,3,60,2107,8,60,1,60,1,60,3,60,2111,
        8,60,1,60,3,60,2114,8,60,1,60,3,60,2117,8,60,1,60,3,60,2120,8,60,
        1,60,3,60,2123,8,60,1,60,3,60,2126,8,60,1,60,1,60,1,60,3,60,2131,
        8,60,1,60,3,60,2134,8,60,1,60,3,60,2137,8,60,1,60,3,60,2140,8,60,
        1,60,3,60,2143,8,60,1,60,3,60,2146,8,60,1,60,1,60,1,60,1,60,3,60,
        2152,8,60,1,60,1,60,3,60,2156,8,60,1,60,3,60,2159,8,60,1,60,3,60,
        2162,8,60,1,60,3,60,2165,8,60,1,60,3,60,2168,8,60,3,60,2170,8,60,
        1,61,1,61,1,61,1,61,1,61,3,61,2177,8,61,1,62,1,62,1,62,1,62,5,62,
        2183,8,62,10,62,12,62,2186,9,62,1,62,1,62,1,63,1,63,1,63,5,63,2193,
        8,63,10,63,12,63,2196,9,63,1,64,1,64,3,64,2200,8,64,1,64,1,64,1,
        64,1,64,1,64,1,64,5,64,2208,8,64,10,64,12,64,2211,9,64,3,64,2213,
        8,64,1,65,1,65,1,65,3,65,2218,8,65,1,65,5,65,2221,8,65,10,65,12,
        65,2224,9,65,1,65,1,65,3,65,2228,8,65,1,65,3,65,2231,8,65,1,66,1,
        66,1,66,3,66,2236,8,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,2245,
        8,66,3,66,2247,8,66,1,66,1,66,3,66,2251,8,66,1,66,3,66,2254,8,66,
        1,66,1,66,3,66,2258,8,66,1,66,5,66,2261,8,66,10,66,12,66,2264,9,
        66,1,67,1,67,3,67,2268,8,67,1,67,1,67,3,67,2272,8,67,1,67,3,67,2275,
        8,67,1,67,1,67,3,67,2279,8,67,1,68,3,68,2282,8,68,1,68,1,68,1,68,
        3,68,2287,8,68,1,68,3,68,2290,8,68,1,68,1,68,1,68,3,68,2295,8,68,
        1,68,3,68,2298,8,68,1,68,1,68,3,68,2302,8,68,1,68,3,68,2305,8,68,
        1,68,3,68,2308,8,68,1,68,1,68,1,68,3,68,2313,8,68,1,68,3,68,2316,
        8,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,2324,8,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,4,68,2334,8,68,11,68,12,68,2335,1,68,1,
        68,3,68,2340,8,68,1,68,1,68,1,68,1,68,1,68,3,68,2347,8,68,1,68,1,
        68,1,68,3,68,2352,8,68,1,68,3,68,2355,8,68,1,68,3,68,2358,8,68,1,
        68,3,68,2361,8,68,1,69,1,69,1,69,3,69,2366,8,69,1,70,1,70,1,71,1,
        71,1,71,1,71,1,71,5,71,2375,8,71,10,71,12,71,2378,9,71,1,71,1,71,
        1,71,3,71,2383,8,71,1,71,1,71,3,71,2387,8,71,1,71,3,71,2390,8,71,
        1,71,3,71,2393,8,71,1,71,5,71,2396,8,71,10,71,12,71,2399,9,71,1,
        71,1,71,5,71,2403,8,71,10,71,12,71,2406,9,71,3,71,2408,8,71,1,71,
        1,71,3,71,2412,8,71,1,71,1,71,1,71,1,71,5,71,2418,8,71,10,71,12,
        71,2421,9,71,1,71,1,71,3,71,2425,8,71,1,71,3,71,2428,8,71,1,71,3,
        71,2431,8,71,1,71,1,71,1,71,1,71,1,71,3,71,2438,8,71,1,71,5,71,2441,
        8,71,10,71,12,71,2444,9,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,2452,
        8,71,1,71,3,71,2455,8,71,1,71,3,71,2458,8,71,1,71,5,71,2461,8,71,
        10,71,12,71,2464,9,71,3,71,2466,8,71,1,72,1,72,1,72,1,72,1,73,1,
        73,1,73,1,73,5,73,2476,8,73,10,73,12,73,2479,9,73,1,73,1,73,1,74,
        1,74,1,74,5,74,2486,8,74,10,74,12,74,2489,9,74,1,75,1,75,1,75,1,
        76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,2505,8,
        77,1,78,1,78,3,78,2509,8,78,1,78,1,78,3,78,2513,8,78,3,78,2515,8,
        78,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,
        81,1,81,1,81,3,81,2532,8,81,3,81,2534,8,81,1,82,1,82,1,82,1,82,1,
        82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,5,83,2548,8,83,10,83,12,83,
        2551,9,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,3,84,2561,8,84,
        1,84,3,84,2564,8,84,1,84,3,84,2567,8,84,1,85,1,85,1,85,1,86,1,86,
        1,86,1,86,3,86,2576,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,
        2585,8,87,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,
        1,91,1,91,1,91,3,91,2601,8,91,1,91,3,91,2604,8,91,1,91,3,91,2607,
        8,91,1,91,1,91,1,91,1,91,5,91,2613,8,91,10,91,12,91,2616,9,91,1,
        91,3,91,2619,8,91,1,91,1,91,1,92,1,92,1,92,3,92,2626,8,92,1,92,1,
        92,1,92,1,92,1,92,1,93,1,93,3,93,2635,8,93,1,93,1,93,3,93,2639,8,
        93,1,93,1,93,1,93,1,93,3,93,2645,8,93,1,94,1,94,3,94,2649,8,94,1,
        94,3,94,2652,8,94,1,94,3,94,2655,8,94,1,94,3,94,2658,8,94,1,94,3,
        94,2661,8,94,1,95,1,95,1,95,1,95,3,95,2667,8,95,1,96,1,96,3,96,2671,
        8,96,1,96,1,96,1,96,3,96,2676,8,96,1,96,1,96,3,96,2680,8,96,1,96,
        3,96,2683,8,96,1,96,3,96,2686,8,96,1,96,3,96,2689,8,96,1,96,1,96,
        1,96,3,96,2694,8,96,1,97,1,97,1,97,1,97,3,97,2700,8,97,1,97,1,97,
        3,97,2704,8,97,1,98,1,98,3,98,2708,8,98,1,98,1,98,3,98,2712,8,98,
        1,98,1,98,4,98,2716,8,98,11,98,12,98,2717,3,98,2720,8,98,1,99,1,
        99,1,99,3,99,2725,8,99,1,99,1,99,4,99,2729,8,99,11,99,12,99,2730,
        1,100,1,100,1,100,1,100,3,100,2737,8,100,1,100,1,100,3,100,2741,
        8,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
        1,100,1,100,1,100,3,100,2756,8,100,1,100,1,100,1,100,3,100,2761,
        8,100,1,100,3,100,2764,8,100,3,100,2766,8,100,1,101,3,101,2769,8,
        101,1,101,1,101,3,101,2773,8,101,1,102,1,102,3,102,2777,8,102,1,
        102,3,102,2780,8,102,1,102,3,102,2783,8,102,1,102,1,102,1,102,1,
        102,1,102,1,102,3,102,2791,8,102,1,102,1,102,1,102,1,102,3,102,2797,
        8,102,3,102,2799,8,102,1,103,1,103,1,103,1,103,3,103,2805,8,103,
        1,103,1,103,1,103,3,103,2810,8,103,1,104,1,104,1,104,3,104,2815,
        8,104,1,104,1,104,3,104,2819,8,104,1,104,1,104,1,104,1,104,1,104,
        5,104,2826,8,104,10,104,12,104,2829,9,104,1,105,1,105,1,105,1,105,
        1,105,1,105,5,105,2837,8,105,10,105,12,105,2840,9,105,1,106,1,106,
        1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
        1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
        1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
        1,106,3,106,2878,8,106,1,107,1,107,1,107,1,107,1,107,1,107,4,107,
        2886,8,107,11,107,12,107,2887,3,107,2890,8,107,1,107,3,107,2893,
        8,107,1,108,1,108,3,108,2897,8,108,1,108,1,108,3,108,2901,8,108,
        1,109,1,109,1,109,1,109,1,109,1,109,4,109,2909,8,109,11,109,12,109,
        2910,3,109,2913,8,109,1,109,1,109,4,109,2917,8,109,11,109,12,109,
        2918,3,109,2921,8,109,1,110,1,110,1,110,1,110,1,110,5,110,2928,8,
        110,10,110,12,110,2931,9,110,1,110,1,110,1,111,1,111,1,111,1,111,
        1,111,5,111,2940,8,111,10,111,12,111,2943,9,111,1,111,1,111,1,112,
        1,112,1,112,1,113,1,113,1,113,1,114,1,114,1,114,3,114,2956,8,114,
        1,114,1,114,1,114,3,114,2961,8,114,1,114,3,114,2964,8,114,1,114,
        1,114,1,114,1,114,1,114,3,114,2971,8,114,1,115,1,115,1,115,3,115,
        2976,8,115,1,116,1,116,1,116,1,116,1,116,1,116,3,116,2984,8,116,
        3,116,2986,8,116,1,117,1,117,1,117,1,117,3,117,2992,8,117,1,117,
        1,117,1,117,3,117,2997,8,117,1,117,1,117,3,117,3001,8,117,1,117,
        1,117,1,117,3,117,3006,8,117,1,117,1,117,1,117,1,117,3,117,3012,
        8,117,1,117,1,117,1,117,1,117,1,117,3,117,3019,8,117,1,117,1,117,
        1,117,1,117,3,117,3025,8,117,3,117,3027,8,117,1,118,1,118,1,118,
        1,118,1,118,1,118,1,118,3,118,3036,8,118,1,118,1,118,1,118,1,118,
        3,118,3042,8,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,3050,
        8,118,1,119,1,119,1,119,1,119,3,119,3056,8,119,1,119,1,119,1,119,
        3,119,3061,8,119,1,119,1,119,1,119,3,119,3066,8,119,1,120,1,120,
        1,120,1,120,1,120,1,120,3,120,3074,8,120,1,120,1,120,1,120,1,120,
        1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,3089,
        8,121,3,121,3091,8,121,1,121,1,121,3,121,3095,8,121,1,121,1,121,
        3,121,3099,8,121,1,121,3,121,3102,8,121,1,121,3,121,3105,8,121,1,
        122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,3114,8,122,1,122,3,
        122,3117,8,122,1,122,3,122,3120,8,122,1,123,1,123,1,123,1,123,3,
        123,3126,8,123,1,123,1,123,5,123,3130,8,123,10,123,12,123,3133,9,
        123,1,123,3,123,3136,8,123,1,123,1,123,1,123,1,123,1,123,1,123,1,
        123,1,123,1,123,1,123,3,123,3148,8,123,1,123,1,123,1,123,1,123,3,
        123,3154,8,123,1,124,3,124,3157,8,124,1,124,1,124,1,124,3,124,3162,
        8,124,1,124,1,124,3,124,3166,8,124,1,124,1,124,1,124,1,124,1,124,
        3,124,3173,8,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,
        3,124,3183,8,124,3,124,3185,8,124,1,125,1,125,1,125,1,125,1,125,
        1,126,1,126,1,126,1,126,1,126,1,126,1,127,1,127,1,127,1,127,1,127,
        1,127,1,127,1,127,1,127,1,128,1,128,3,128,3209,8,128,1,128,1,128,
        1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,3221,8,128,
        1,128,4,128,3224,8,128,11,128,12,128,3225,3,128,3228,8,128,1,128,
        1,128,3,128,3232,8,128,1,128,3,128,3235,8,128,1,128,3,128,3238,8,
        128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,3248,8,
        128,1,128,3,128,3251,8,128,1,128,1,128,1,128,1,128,1,128,1,128,1,
        128,1,128,3,128,3261,8,128,1,128,5,128,3264,8,128,10,128,12,128,
        3267,9,128,1,128,1,128,3,128,3271,8,128,1,128,3,128,3274,8,128,1,
        128,3,128,3277,8,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,3285,
        8,128,1,129,1,129,1,129,1,129,3,129,3291,8,129,1,130,1,130,1,130,
        5,130,3296,8,130,10,130,12,130,3299,9,130,1,131,1,131,1,131,1,131,
        1,131,3,131,3306,8,131,1,131,3,131,3309,8,131,1,132,1,132,1,132,
        1,132,1,132,1,133,1,133,1,133,1,133,3,133,3320,8,133,1,134,1,134,
        3,134,3324,8,134,1,134,1,134,5,134,3328,8,134,10,134,12,134,3331,
        9,134,1,135,1,135,1,135,1,135,3,135,3337,8,135,1,136,3,136,3340,
        8,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,3349,8,136,
        1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,5,137,
        3361,8,137,10,137,12,137,3364,9,137,3,137,3366,8,137,1,137,1,137,
        1,137,1,137,1,137,1,138,1,138,1,138,1,138,1,138,5,138,3378,8,138,
        10,138,12,138,3381,9,138,1,138,1,138,1,139,1,139,1,139,1,139,1,139,
        1,139,3,139,3391,8,139,1,139,3,139,3394,8,139,1,140,1,140,1,140,
        1,140,1,140,1,140,1,140,1,140,5,140,3404,8,140,10,140,12,140,3407,
        9,140,1,141,1,141,3,141,3411,8,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,5,141,3422,8,141,10,141,12,141,3425,9,141,
        1,141,1,141,3,141,3429,8,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,3,141,3442,8,141,1,141,1,141,1,141,
        1,141,1,141,5,141,3449,8,141,10,141,12,141,3452,9,141,3,141,3454,
        8,141,1,141,3,141,3457,8,141,1,141,1,141,1,141,1,141,1,141,3,141,
        3464,8,141,1,141,3,141,3467,8,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,3,141,3479,8,141,1,141,1,141,1,141,
        1,141,3,141,3485,8,141,3,141,3487,8,141,1,142,1,142,1,142,1,142,
        5,142,3493,8,142,10,142,12,142,3496,9,142,1,142,1,142,1,143,1,143,
        1,143,3,143,3503,8,143,1,144,1,144,1,144,1,144,1,144,1,144,3,144,
        3511,8,144,1,145,1,145,1,145,1,145,1,146,1,146,1,146,1,146,1,146,
        1,146,3,146,3523,8,146,1,146,1,146,1,146,3,146,3528,8,146,1,146,
        1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,3,146,3539,8,146,
        1,147,1,147,1,147,1,147,1,148,1,148,1,148,1,148,1,148,3,148,3550,
        8,148,1,148,1,148,1,148,1,148,1,148,1,148,3,148,3558,8,148,1,148,
        1,148,1,148,1,148,5,148,3564,8,148,10,148,12,148,3567,9,148,1,149,
        1,149,1,149,1,149,3,149,3573,8,149,1,149,1,149,1,149,1,149,1,149,
        3,149,3580,8,149,3,149,3582,8,149,1,149,3,149,3585,8,149,1,149,1,
        149,1,149,3,149,3590,8,149,1,149,1,149,1,149,3,149,3595,8,149,1,
        150,1,150,1,150,1,150,1,150,1,150,1,151,1,151,1,151,1,151,1,151,
        1,151,1,151,1,151,1,151,5,151,3612,8,151,10,151,12,151,3615,9,151,
        1,151,1,151,1,151,1,151,5,151,3621,8,151,10,151,12,151,3624,9,151,
        3,151,3626,8,151,1,152,1,152,1,152,1,152,1,153,1,153,1,153,1,153,
        1,153,1,153,1,153,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,3,154,3653,8,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,3,154,3662,8,154,1,154,3,154,3665,
        8,154,1,154,1,154,3,154,3669,8,154,1,154,1,154,3,154,3673,8,154,
        1,154,1,154,3,154,3677,8,154,1,154,1,154,1,154,5,154,3682,8,154,
        10,154,12,154,3685,9,154,1,154,3,154,3688,8,154,1,154,1,154,3,154,
        3692,8,154,1,154,1,154,3,154,3696,8,154,1,154,1,154,3,154,3700,8,
        154,1,154,1,154,1,154,3,154,3705,8,154,1,154,1,154,3,154,3709,8,
        154,1,154,1,154,1,154,3,154,3714,8,154,1,154,1,154,1,154,1,154,3,
        154,3720,8,154,1,154,1,154,1,154,3,154,3725,8,154,1,154,1,154,1,
        154,5,154,3730,8,154,10,154,12,154,3733,9,154,1,154,3,154,3736,8,
        154,1,154,1,154,1,154,1,154,3,154,3742,8,154,1,154,1,154,3,154,3746,
        8,154,1,154,1,154,1,154,3,154,3751,8,154,1,154,1,154,1,154,1,154,
        1,154,1,154,3,154,3759,8,154,1,154,1,154,1,154,1,154,3,154,3765,
        8,154,1,154,1,154,1,154,3,154,3770,8,154,1,154,1,154,1,154,1,154,
        1,154,3,154,3777,8,154,1,154,1,154,1,154,3,154,3782,8,154,1,154,
        1,154,3,154,3786,8,154,1,154,1,154,1,154,3,154,3791,8,154,1,154,
        1,154,1,154,1,154,3,154,3797,8,154,1,154,1,154,1,154,1,154,1,154,
        3,154,3804,8,154,1,154,1,154,1,154,3,154,3809,8,154,1,154,1,154,
        1,154,1,154,1,154,3,154,3816,8,154,1,154,1,154,1,154,3,154,3821,
        8,154,1,154,1,154,1,154,1,154,1,154,3,154,3828,8,154,1,154,1,154,
        3,154,3832,8,154,1,154,1,154,1,154,1,154,5,154,3838,8,154,10,154,
        12,154,3841,9,154,1,154,3,154,3844,8,154,3,154,3846,8,154,1,155,
        3,155,3849,8,155,1,155,1,155,1,155,3,155,3854,8,155,1,155,1,155,
        1,155,1,155,1,155,1,155,1,155,1,155,3,155,3864,8,155,1,156,1,156,
        1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,
        3,156,3879,8,156,1,156,3,156,3882,8,156,1,156,1,156,1,156,1,156,
        1,156,1,156,3,156,3890,8,156,1,157,1,157,1,157,5,157,3895,8,157,
        10,157,12,157,3898,9,157,1,158,1,158,3,158,3902,8,158,1,159,1,159,
        4,159,3906,8,159,11,159,12,159,3907,1,160,1,160,3,160,3912,8,160,
        1,160,1,160,1,160,5,160,3917,8,160,10,160,12,160,3920,9,160,1,160,
        1,160,3,160,3924,8,160,1,160,3,160,3927,8,160,1,161,3,161,3930,8,
        161,1,161,1,161,3,161,3934,8,161,1,162,1,162,1,162,1,162,1,162,1,
        162,1,162,3,162,3943,8,162,1,162,1,162,1,162,1,162,1,162,1,162,1,
        162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,3,162,
        3961,8,162,1,162,3,162,3964,8,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,3,162,3996,8,162,1,162,1,162,1,162,3,162,4001,
        8,162,1,163,1,163,1,163,1,163,3,163,4007,8,163,1,163,1,163,1,163,
        1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,
        1,163,1,163,1,163,1,163,3,163,4027,8,163,1,163,1,163,1,163,3,163,
        4032,8,163,1,164,1,164,1,164,1,165,3,165,4038,8,165,1,165,3,165,
        4041,8,165,1,165,1,165,3,165,4045,8,165,1,165,1,165,3,165,4049,8,
        165,1,165,1,165,1,165,1,165,3,165,4055,8,165,1,165,3,165,4058,8,
        165,1,165,1,165,3,165,4062,8,165,1,165,1,165,3,165,4066,8,165,1,
        165,1,165,1,165,3,165,4071,8,165,1,165,3,165,4074,8,165,1,165,3,
        165,4077,8,165,1,165,3,165,4080,8,165,1,166,1,166,1,167,1,167,1,
        167,1,167,1,167,1,167,1,167,1,167,1,167,3,167,4093,8,167,1,168,1,
        168,1,168,1,168,3,168,4099,8,168,1,168,1,168,1,168,1,168,1,168,1,
        168,3,168,4107,8,168,1,169,1,169,1,169,5,169,4112,8,169,10,169,12,
        169,4115,9,169,1,169,1,169,3,169,4119,8,169,1,169,3,169,4122,8,169,
        1,169,1,169,1,169,5,169,4127,8,169,10,169,12,169,4130,9,169,3,169,
        4132,8,169,1,170,1,170,1,171,1,171,1,171,1,171,3,171,4140,8,171,
        1,171,3,171,4143,8,171,1,172,1,172,1,172,3,172,4148,8,172,1,172,
        1,172,1,172,1,172,1,172,3,172,4155,8,172,1,172,3,172,4158,8,172,
        1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,
        1,172,1,172,1,172,1,172,1,172,5,172,4176,8,172,10,172,12,172,4179,
        9,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,3,172,
        4190,8,172,1,173,3,173,4193,8,173,1,173,1,173,1,173,1,173,3,173,
        4199,8,173,1,173,5,173,4202,8,173,10,173,12,173,4205,9,173,1,174,
        1,174,1,174,1,174,5,174,4211,8,174,10,174,12,174,4214,9,174,1,174,
        1,174,1,174,1,174,1,174,3,174,4221,8,174,1,174,1,174,1,174,3,174,
        4226,8,174,1,175,1,175,1,175,1,175,3,175,4232,8,175,1,175,1,175,
        1,175,5,175,4237,8,175,10,175,12,175,4240,9,175,1,175,1,175,1,175,
        1,175,1,175,3,175,4247,8,175,1,175,3,175,4250,8,175,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,1,176,5,176,4261,8,176,10,176,
        12,176,4264,9,176,1,176,1,176,1,177,1,177,1,177,1,177,1,177,1,177,
        1,177,1,177,1,177,3,177,4277,8,177,1,177,1,177,1,177,1,177,3,177,
        4283,8,177,1,177,1,177,1,177,1,177,1,177,1,177,3,177,4291,8,177,
        3,177,4293,8,177,1,178,1,178,1,179,1,179,3,179,4299,8,179,1,179,
        1,179,3,179,4303,8,179,1,179,3,179,4306,8,179,1,179,3,179,4309,8,
        179,1,179,1,179,1,179,3,179,4314,8,179,1,179,1,179,1,179,3,179,4319,
        8,179,1,179,1,179,3,179,4323,8,179,1,179,3,179,4326,8,179,1,179,
        3,179,4329,8,179,1,179,3,179,4332,8,179,1,179,3,179,4335,8,179,1,
        180,1,180,1,180,1,180,5,180,4341,8,180,10,180,12,180,4344,9,180,
        1,180,1,180,1,181,1,181,1,181,1,181,1,181,1,181,3,181,4354,8,181,
        1,181,3,181,4357,8,181,1,181,3,181,4360,8,181,1,181,1,181,1,181,
        3,181,4365,8,181,1,181,3,181,4368,8,181,1,181,1,181,3,181,4372,8,
        181,1,182,1,182,3,182,4376,8,182,1,182,1,182,1,182,1,182,3,182,4382,
        8,182,1,182,1,182,1,182,1,182,5,182,4388,8,182,10,182,12,182,4391,
        9,182,3,182,4393,8,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,5,182,4404,8,182,10,182,12,182,4407,9,182,1,182,1,182,
        3,182,4411,8,182,3,182,4413,8,182,1,182,4,182,4416,8,182,11,182,
        12,182,4417,1,182,1,182,1,182,1,182,1,182,3,182,4425,8,182,1,183,
        1,183,1,183,1,184,1,184,3,184,4432,8,184,1,184,1,184,1,185,1,185,
        1,185,5,185,4439,8,185,10,185,12,185,4442,9,185,1,186,1,186,1,186,
        5,186,4447,8,186,10,186,12,186,4450,9,186,1,187,1,187,1,187,1,187,
        1,187,3,187,4457,8,187,1,188,1,188,1,188,5,188,4462,8,188,10,188,
        12,188,4465,9,188,1,189,1,189,1,189,1,189,1,189,3,189,4472,8,189,
        1,190,1,190,1,190,5,190,4477,8,190,10,190,12,190,4480,9,190,1,191,
        1,191,1,191,1,191,1,191,3,191,4487,8,191,1,192,1,192,3,192,4491,
        8,192,1,192,1,192,3,192,4495,8,192,3,192,4497,8,192,1,192,1,192,
        1,193,1,193,3,193,4503,8,193,1,193,1,193,1,193,3,193,4508,8,193,
        1,194,1,194,3,194,4512,8,194,1,194,1,194,1,194,1,194,1,194,3,194,
        4519,8,194,1,195,1,195,1,195,3,195,4524,8,195,1,196,1,196,1,196,
        3,196,4529,8,196,1,196,1,196,1,196,3,196,4534,8,196,3,196,4536,8,
        196,1,196,1,196,1,197,1,197,1,197,1,198,1,198,1,198,3,198,4546,8,
        198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,3,198,4556,8,
        198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
        1,198,1,198,1,198,1,198,3,198,4572,8,198,1,199,1,199,1,199,1,199,
        1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,5,199,
        4588,8,199,10,199,12,199,4591,9,199,1,199,1,199,1,199,1,199,1,199,
        1,199,1,199,1,199,1,199,3,199,4602,8,199,1,199,1,199,1,199,1,199,
        1,199,3,199,4609,8,199,1,200,1,200,1,200,1,201,1,201,1,201,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,3,202,4624,8,202,1,202,4,202,
        4627,8,202,11,202,12,202,4628,1,202,3,202,4632,8,202,1,203,1,203,
        1,203,3,203,4637,8,203,1,203,1,203,1,203,3,203,4642,8,203,1,203,
        1,203,1,203,3,203,4647,8,203,1,203,3,203,4650,8,203,1,203,3,203,
        4653,8,203,1,204,1,204,1,204,3,204,4658,8,204,1,204,1,204,1,204,
        5,204,4663,8,204,10,204,12,204,4666,9,204,1,204,3,204,4669,8,204,
        1,205,1,205,1,205,3,205,4674,8,205,1,205,1,205,1,205,5,205,4679,
        8,205,10,205,12,205,4682,9,205,1,205,3,205,4685,8,205,1,206,1,206,
        1,206,1,206,3,206,4691,8,206,1,206,1,206,1,206,1,206,1,206,1,206,
        1,206,3,206,4700,8,206,1,206,1,206,1,207,1,207,1,207,5,207,4707,
        8,207,10,207,12,207,4710,9,207,1,207,1,207,1,208,1,208,1,208,1,209,
        1,209,1,209,1,209,4,209,4721,8,209,11,209,12,209,4722,1,210,1,210,
        1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,3,210,4736,
        8,210,1,210,1,210,1,210,1,210,3,210,4742,8,210,1,210,1,210,3,210,
        4746,8,210,3,210,4748,8,210,1,211,1,211,1,211,1,212,1,212,3,212,
        4755,8,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
        1,212,1,212,3,212,4768,8,212,1,212,1,212,1,212,1,212,1,212,3,212,
        4775,8,212,3,212,4777,8,212,1,212,1,212,1,213,1,213,1,213,1,213,
        1,213,1,214,1,214,1,214,1,214,1,214,5,214,4791,8,214,10,214,12,214,
        4794,9,214,1,214,3,214,4797,8,214,1,214,1,214,3,214,4801,8,214,1,
        214,1,214,1,214,3,214,4806,8,214,1,214,1,214,1,214,3,214,4811,8,
        214,1,214,1,214,1,214,3,214,4816,8,214,1,214,1,214,1,214,3,214,4821,
        8,214,1,214,3,214,4824,8,214,1,215,1,215,1,215,1,215,1,215,1,216,
        1,216,1,216,1,216,1,216,3,216,4836,8,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,3,216,4889,8,216,1,216,1,216,1,216,1,216,1,216,
        1,216,1,216,3,216,4898,8,216,1,216,1,216,3,216,4902,8,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,3,216,4911,8,216,1,216,1,216,
        3,216,4915,8,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,
        4924,8,216,1,216,1,216,3,216,4928,8,216,1,216,1,216,1,216,3,216,
        4933,8,216,1,216,3,216,4936,8,216,1,216,1,216,3,216,4940,8,216,1,
        216,1,216,1,216,3,216,4945,8,216,3,216,4947,8,216,1,216,1,216,1,
        216,1,216,1,216,1,216,1,216,3,216,4956,8,216,1,216,1,216,1,216,3,
        216,4961,8,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,
        216,3,216,4972,8,216,1,216,1,216,3,216,4976,8,216,1,216,1,216,1,
        216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,
        4990,8,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,4998,8,216,
        1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,3,216,5036,8,216,3,216,5038,8,216,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,3,217,5057,8,217,1,217,3,217,5060,8,217,
        1,217,1,217,1,217,1,217,1,217,1,218,1,218,1,218,1,218,1,218,1,218,
        1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,
        1,218,1,218,1,218,3,218,5087,8,218,1,218,1,218,3,218,5091,8,218,
        1,218,1,218,3,218,5095,8,218,1,218,1,218,3,218,5099,8,218,1,218,
        1,218,3,218,5103,8,218,1,218,3,218,5106,8,218,1,218,1,218,1,218,
        1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,3,218,
        5121,8,218,1,218,1,218,1,218,1,218,1,218,3,218,5128,8,218,1,219,
        1,219,1,219,1,219,1,219,1,219,1,220,1,220,1,220,1,220,5,220,5140,
        8,220,10,220,12,220,5143,9,220,1,220,1,220,1,221,1,221,1,221,1,221,
        1,221,1,221,1,221,1,221,3,221,5155,8,221,1,222,1,222,1,222,1,222,
        1,222,1,222,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,
        1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,3,223,5180,8,223,
        1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,
        1,223,1,223,1,223,1,223,1,223,1,223,3,223,5199,8,223,1,223,1,223,
        1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,
        3,223,5214,8,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,
        1,223,1,223,1,223,1,223,1,223,1,223,3,223,5230,8,223,1,223,1,223,
        1,223,1,223,1,223,3,223,5237,8,223,1,224,1,224,1,224,1,224,1,224,
        1,224,1,224,1,224,1,224,3,224,5248,8,224,1,224,3,224,5251,8,224,
        1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,
        1,225,1,225,1,225,1,225,5,225,5268,8,225,10,225,12,225,5271,9,225,
        3,225,5273,8,225,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
        1,226,5,226,5284,8,226,10,226,12,226,5287,9,226,1,226,3,226,5290,
        8,226,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,3,227,5310,8,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,5,227,5320,8,227,
        10,227,12,227,5323,9,227,1,227,3,227,5326,8,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,3,227,5348,8,227,1,228,1,228,
        3,228,5352,8,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,
        3,228,5362,8,228,1,228,1,228,3,228,5366,8,228,1,228,1,228,1,228,
        1,228,3,228,5372,8,228,1,228,1,228,3,228,5376,8,228,5,228,5378,8,
        228,10,228,12,228,5381,9,228,1,228,3,228,5384,8,228,1,229,1,229,
        1,229,1,229,1,229,3,229,5391,8,229,1,230,1,230,1,230,3,230,5396,
        8,230,1,231,1,231,1,231,1,232,1,232,1,232,1,233,1,233,1,233,3,233,
        5407,8,233,1,234,1,234,3,234,5411,8,234,1,234,3,234,5414,8,234,1,
        234,1,234,1,234,3,234,5419,8,234,1,234,1,234,1,234,1,234,3,234,5425,
        8,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,3,234,
        5436,8,234,1,234,1,234,3,234,5440,8,234,1,234,3,234,5443,8,234,1,
        234,1,234,3,234,5447,8,234,1,234,1,234,3,234,5451,8,234,1,234,3,
        234,5454,8,234,1,235,1,235,1,236,1,236,1,236,1,236,1,236,1,236,3,
        236,5464,8,236,1,236,3,236,5467,8,236,1,237,1,237,3,237,5471,8,237,
        1,237,5,237,5474,8,237,10,237,12,237,5477,9,237,1,238,1,238,1,238,
        3,238,5482,8,238,1,238,3,238,5485,8,238,1,238,1,238,1,238,3,238,
        5490,8,238,1,238,3,238,5493,8,238,1,238,1,238,1,238,1,238,1,238,
        3,238,5500,8,238,3,238,5502,8,238,1,238,1,238,1,238,1,238,3,238,
        5508,8,238,1,238,1,238,3,238,5512,8,238,1,239,1,239,1,239,1,240,
        1,240,1,240,1,240,3,240,5521,8,240,1,240,4,240,5524,8,240,11,240,
        12,240,5525,3,240,5528,8,240,1,241,1,241,1,241,1,241,1,241,1,241,
        1,241,1,241,3,241,5538,8,241,1,241,3,241,5541,8,241,1,241,1,241,
        1,241,3,241,5546,8,241,1,242,1,242,1,242,1,242,1,242,1,242,3,242,
        5554,8,242,1,242,3,242,5557,8,242,1,242,4,242,5560,8,242,11,242,
        12,242,5561,3,242,5564,8,242,3,242,5566,8,242,1,243,1,243,1,243,
        1,243,3,243,5572,8,243,1,244,1,244,1,244,1,244,1,244,1,244,1,245,
        1,245,1,245,1,245,1,245,1,246,1,246,1,246,1,246,3,246,5589,8,246,
        1,246,1,246,5,246,5593,8,246,10,246,12,246,5596,9,246,1,247,1,247,
        1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,3,247,5608,8,247,
        1,247,1,247,1,247,1,247,3,247,5614,8,247,1,247,1,247,3,247,5618,
        8,247,1,247,1,247,1,247,3,247,5623,8,247,1,248,1,248,1,248,1,248,
        1,248,1,248,1,248,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,
        1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,
        1,249,1,249,3,249,5653,8,249,1,249,1,249,1,249,1,249,1,249,1,249,
        1,249,1,249,1,249,1,249,1,249,1,249,1,249,3,249,5668,8,249,1,249,
        1,249,1,249,3,249,5673,8,249,1,250,1,250,3,250,5677,8,250,1,250,
        1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,251,1,251,3,251,
        5690,8,251,1,251,1,251,3,251,5694,8,251,3,251,5696,8,251,1,251,1,
        251,1,251,1,251,1,251,5,251,5703,8,251,10,251,12,251,5706,9,251,
        1,251,1,251,1,251,3,251,5711,8,251,3,251,5713,8,251,1,252,1,252,
        3,252,5717,8,252,1,252,3,252,5720,8,252,1,252,3,252,5723,8,252,1,
        252,3,252,5726,8,252,1,252,3,252,5729,8,252,3,252,5731,8,252,1,252,
        3,252,5734,8,252,1,253,1,253,3,253,5738,8,253,1,253,1,253,1,253,
        1,253,5,253,5744,8,253,10,253,12,253,5747,9,253,1,253,1,253,3,253,
        5751,8,253,1,253,3,253,5754,8,253,1,254,1,254,1,255,1,255,3,255,
        5760,8,255,1,255,1,255,3,255,5764,8,255,1,256,1,256,3,256,5768,8,
        256,1,256,1,256,1,256,3,256,5773,8,256,3,256,5775,8,256,1,257,1,
        257,3,257,5779,8,257,1,258,1,258,3,258,5783,8,258,1,259,1,259,1,
        259,5,259,5788,8,259,10,259,12,259,5791,9,259,1,260,1,260,1,260,
        3,260,5796,8,260,1,260,1,260,3,260,5800,8,260,3,260,5802,8,260,3,
        260,5804,8,260,1,260,1,260,1,261,1,261,1,261,1,261,1,261,1,261,1,
        261,1,261,1,261,3,261,5817,8,261,1,262,1,262,1,262,1,262,5,262,5823,
        8,262,10,262,12,262,5826,9,262,1,262,1,262,1,263,1,263,1,263,3,263,
        5833,8,263,1,263,1,263,1,263,1,264,1,264,1,264,1,264,5,264,5842,
        8,264,10,264,12,264,5845,9,264,1,264,1,264,1,265,1,265,1,265,1,265,
        3,265,5853,8,265,1,266,1,266,1,266,3,266,5858,8,266,1,266,1,266,
        3,266,5862,8,266,1,266,1,266,3,266,5866,8,266,1,266,1,266,1,266,
        1,266,1,266,3,266,5873,8,266,1,266,3,266,5876,8,266,3,266,5878,8,
        266,1,267,1,267,1,267,1,267,1,268,1,268,3,268,5886,8,268,1,268,1,
        268,3,268,5890,8,268,1,269,3,269,5893,8,269,1,269,1,269,1,269,1,
        269,1,269,3,269,5900,8,269,1,269,1,269,1,269,1,269,1,269,3,269,5907,
        8,269,1,269,1,269,1,269,3,269,5912,8,269,1,269,1,269,1,269,1,269,
        1,269,3,269,5919,8,269,1,269,3,269,5922,8,269,3,269,5924,8,269,1,
        269,3,269,5927,8,269,1,270,1,270,1,270,1,270,3,270,5933,8,270,1,
        270,1,270,1,270,3,270,5938,8,270,1,270,1,270,3,270,5942,8,270,1,
        271,1,271,1,271,5,271,5947,8,271,10,271,12,271,5950,9,271,1,272,
        1,272,1,272,1,273,1,273,1,273,1,274,3,274,5959,8,274,1,274,1,274,
        1,274,1,274,1,274,3,274,5966,8,274,1,274,3,274,5969,8,274,1,274,
        3,274,5972,8,274,1,275,1,275,3,275,5976,8,275,1,275,1,275,1,275,
        1,275,1,275,1,275,1,275,1,275,1,275,3,275,5987,8,275,1,275,3,275,
        5990,8,275,1,275,3,275,5993,8,275,1,275,3,275,5996,8,275,1,276,3,
        276,5999,8,276,1,276,1,276,1,276,1,276,1,276,3,276,6006,8,276,1,
        276,3,276,6009,8,276,1,276,3,276,6012,8,276,1,277,1,277,1,277,5,
        277,6017,8,277,10,277,12,277,6020,9,277,1,278,1,278,1,278,1,278,
        1,278,1,278,1,278,1,278,1,278,3,278,6031,8,278,1,278,1,278,1,278,
        1,278,1,278,3,278,6038,8,278,3,278,6040,8,278,1,279,1,279,1,279,
        3,279,6045,8,279,1,279,1,279,1,279,5,279,6050,8,279,10,279,12,279,
        6053,9,279,1,279,1,279,1,279,3,279,6058,8,279,1,279,1,279,1,279,
        1,280,1,280,3,280,6065,8,280,1,281,1,281,1,281,3,281,6070,8,281,
        1,281,1,281,1,282,3,282,6075,8,282,1,282,1,282,3,282,6079,8,282,
        1,282,1,282,3,282,6083,8,282,1,282,1,282,3,282,6087,8,282,3,282,
        6089,8,282,1,283,1,283,3,283,6093,8,283,1,284,1,284,3,284,6097,8,
        284,1,284,3,284,6100,8,284,1,284,3,284,6103,8,284,3,284,6105,8,284,
        1,284,1,284,1,284,1,284,1,284,1,284,1,284,1,284,3,284,6115,8,284,
        3,284,6117,8,284,1,284,1,284,1,284,3,284,6122,8,284,5,284,6124,8,
        284,10,284,12,284,6127,9,284,1,285,1,285,3,285,6131,8,285,1,286,
        1,286,3,286,6135,8,286,1,286,1,286,1,286,5,286,6140,8,286,10,286,
        12,286,6143,9,286,1,287,1,287,3,287,6147,8,287,1,287,1,287,3,287,
        6151,8,287,1,287,3,287,6154,8,287,1,287,1,287,1,287,1,287,3,287,
        6160,8,287,1,287,3,287,6163,8,287,1,288,1,288,1,288,1,288,1,288,
        1,288,1,288,1,288,1,289,1,289,1,289,1,289,1,289,1,289,1,289,1,289,
        1,289,3,289,6182,8,289,1,289,1,289,1,289,1,290,1,290,3,290,6189,
        8,290,1,290,1,290,3,290,6193,8,290,1,291,3,291,6196,8,291,1,291,
        1,291,3,291,6200,8,291,1,291,1,291,3,291,6204,8,291,1,291,3,291,
        6207,8,291,1,291,3,291,6210,8,291,1,292,1,292,1,292,3,292,6215,8,
        292,1,293,1,293,1,293,1,293,1,293,5,293,6222,8,293,10,293,12,293,
        6225,9,293,1,294,1,294,1,294,1,294,3,294,6231,8,294,1,294,1,294,
        3,294,6235,8,294,1,295,1,295,3,295,6239,8,295,1,295,1,295,3,295,
        6243,8,295,1,295,3,295,6246,8,295,3,295,6248,8,295,1,296,1,296,1,
        296,3,296,6253,8,296,1,296,1,296,3,296,6257,8,296,1,297,1,297,1,
        297,3,297,6262,8,297,1,297,1,297,1,297,1,297,3,297,6268,8,297,1,
        298,1,298,1,298,1,298,1,298,3,298,6275,8,298,1,299,1,299,1,299,3,
        299,6280,8,299,1,300,1,300,1,300,3,300,6285,8,300,1,300,1,300,1,
        301,1,301,1,301,5,301,6292,8,301,10,301,12,301,6295,9,301,1,302,
        1,302,1,302,1,302,3,302,6301,8,302,1,302,1,302,1,302,1,302,5,302,
        6307,8,302,10,302,12,302,6310,9,302,1,302,1,302,1,302,1,302,1,302,
        1,302,1,302,1,302,3,302,6320,8,302,1,303,1,303,1,303,3,303,6325,
        8,303,1,303,1,303,3,303,6329,8,303,1,303,3,303,6332,8,303,1,303,
        1,303,3,303,6336,8,303,1,303,1,303,1,303,3,303,6341,8,303,4,303,
        6343,8,303,11,303,12,303,6344,1,303,1,303,1,303,3,303,6350,8,303,
        1,304,1,304,1,304,1,304,5,304,6356,8,304,10,304,12,304,6359,9,304,
        1,305,1,305,1,305,1,306,1,306,1,306,5,306,6367,8,306,10,306,12,306,
        6370,9,306,1,307,1,307,3,307,6374,8,307,1,307,1,307,3,307,6378,8,
        307,1,307,3,307,6381,8,307,1,307,3,307,6384,8,307,3,307,6386,8,307,
        1,307,3,307,6389,8,307,1,307,3,307,6392,8,307,1,307,3,307,6395,8,
        307,1,307,1,307,3,307,6399,8,307,1,307,1,307,3,307,6403,8,307,1,
        307,1,307,3,307,6407,8,307,3,307,6409,8,307,1,307,1,307,1,307,1,
        307,1,307,1,307,1,307,3,307,6418,8,307,1,307,1,307,1,307,3,307,6423,
        8,307,1,307,1,307,1,307,1,307,3,307,6429,8,307,1,307,1,307,3,307,
        6433,8,307,3,307,6435,8,307,1,307,1,307,1,307,1,307,1,307,3,307,
        6442,8,307,1,307,1,307,1,307,3,307,6447,8,307,1,307,1,307,1,307,
        1,307,5,307,6453,8,307,10,307,12,307,6456,9,307,1,308,3,308,6459,
        8,308,1,308,1,308,1,308,1,308,1,308,3,308,6466,8,308,1,309,1,309,
        1,309,3,309,6471,8,309,1,309,3,309,6474,8,309,1,309,1,309,1,309,
        1,309,3,309,6480,8,309,1,310,1,310,3,310,6484,8,310,1,311,1,311,
        1,311,1,311,3,311,6490,8,311,1,312,1,312,1,312,1,312,1,312,1,312,
        1,312,3,312,6499,8,312,1,312,1,312,1,312,1,312,3,312,6505,8,312,
        3,312,6507,8,312,1,313,1,313,1,313,3,313,6512,8,313,1,313,3,313,
        6515,8,313,1,313,1,313,1,313,1,313,1,313,1,313,1,313,3,313,6524,
        8,313,1,313,1,313,1,313,1,313,1,313,3,313,6531,8,313,3,313,6533,
        8,313,1,314,1,314,1,314,5,314,6538,8,314,10,314,12,314,6541,9,314,
        1,315,1,315,3,315,6545,8,315,1,315,3,315,6548,8,315,1,316,1,316,
        1,316,1,316,1,316,1,316,1,316,1,316,3,316,6558,8,316,1,317,1,317,
        1,317,1,317,1,317,1,317,1,317,5,317,6567,8,317,10,317,12,317,6570,
        9,317,1,317,1,317,3,317,6574,8,317,1,317,1,317,3,317,6578,8,317,
        1,318,1,318,1,318,1,318,1,318,1,318,3,318,6586,8,318,1,319,1,319,
        1,319,1,320,1,320,1,320,1,320,1,320,3,320,6596,8,320,1,321,1,321,
        1,321,5,321,6601,8,321,10,321,12,321,6604,9,321,1,322,1,322,1,322,
        3,322,6609,8,322,1,323,1,323,1,323,1,323,1,323,1,323,1,323,5,323,
        6618,8,323,10,323,12,323,6621,9,323,1,323,1,323,1,323,3,323,6626,
        8,323,1,323,1,323,1,323,1,323,1,323,1,323,5,323,6634,8,323,10,323,
        12,323,6637,9,323,1,323,1,323,1,324,1,324,1,324,1,324,3,324,6645,
        8,324,1,324,1,324,3,324,6649,8,324,1,324,4,324,6652,8,324,11,324,
        12,324,6653,3,324,6656,8,324,1,324,1,324,3,324,6660,8,324,1,325,
        1,325,1,325,1,325,1,325,1,325,3,325,6668,8,325,1,326,3,326,6671,
        8,326,1,326,1,326,1,326,3,326,6676,8,326,1,326,5,326,6679,8,326,
        10,326,12,326,6682,9,326,1,326,1,326,1,326,1,326,3,326,6688,8,326,
        3,326,6690,8,326,1,326,1,326,1,326,1,326,3,326,6696,8,326,1,327,
        1,327,3,327,6700,8,327,1,327,3,327,6703,8,327,1,327,1,327,1,327,
        3,327,6708,8,327,1,327,3,327,6711,8,327,3,327,6713,8,327,1,328,1,
        328,1,328,1,328,3,328,6719,8,328,1,329,1,329,1,329,1,329,1,329,1,
        329,1,329,3,329,6728,8,329,1,329,1,329,1,329,1,329,3,329,6734,8,
        329,1,329,3,329,6737,8,329,1,330,1,330,1,330,1,330,1,331,1,331,3,
        331,6745,8,331,1,331,3,331,6748,8,331,1,332,1,332,3,332,6752,8,332,
        1,332,1,332,1,332,1,332,3,332,6758,8,332,3,332,6760,8,332,1,332,
        3,332,6763,8,332,1,333,1,333,3,333,6767,8,333,1,333,1,333,1,333,
        3,333,6772,8,333,1,334,1,334,1,334,1,334,1,334,3,334,6779,8,334,
        1,334,1,334,1,334,1,334,1,334,3,334,6786,8,334,3,334,6788,8,334,
        1,334,1,334,1,334,1,334,3,334,6794,8,334,3,334,6796,8,334,1,334,
        1,334,1,334,3,334,6801,8,334,3,334,6803,8,334,1,335,1,335,3,335,
        6807,8,335,1,336,1,336,1,337,1,337,1,338,1,338,1,338,3,338,6816,
        8,338,1,338,1,338,3,338,6820,8,338,1,338,1,338,1,338,1,338,1,338,
        1,338,5,338,6828,8,338,10,338,12,338,6831,9,338,1,339,1,339,1,339,
        1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,3,339,6844,8,339,
        1,339,3,339,6847,8,339,1,339,1,339,1,339,1,339,1,339,1,339,3,339,
        6855,8,339,1,339,1,339,1,339,1,339,1,339,5,339,6862,8,339,10,339,
        12,339,6865,9,339,1,339,1,339,1,339,3,339,6870,8,339,1,339,1,339,
        1,339,3,339,6875,8,339,1,339,1,339,1,339,1,339,1,339,1,339,3,339,
        6883,8,339,3,339,6885,8,339,1,339,1,339,1,339,3,339,6890,8,339,1,
        339,1,339,3,339,6894,8,339,1,339,1,339,1,339,3,339,6899,8,339,1,
        339,1,339,1,339,3,339,6904,8,339,1,340,1,340,1,340,1,340,3,340,6910,
        8,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,
        1,340,1,340,1,340,1,340,5,340,6926,8,340,10,340,12,340,6929,9,340,
        1,341,1,341,1,341,1,341,1,341,1,341,3,341,6937,8,341,1,341,1,341,
        1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,
        3,341,6952,8,341,1,341,1,341,1,341,3,341,6957,8,341,1,341,3,341,
        6960,8,341,1,341,1,341,1,341,1,341,3,341,6966,8,341,1,341,1,341,
        1,341,3,341,6971,8,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,
        1,341,1,341,1,341,1,341,3,341,6984,8,341,1,341,4,341,6987,8,341,
        11,341,12,341,6988,1,341,1,341,3,341,6993,8,341,1,341,1,341,1,341,
        1,341,1,341,3,341,7000,8,341,1,341,1,341,1,341,1,341,1,341,1,341,
        1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,
        3,341,7019,8,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,1,341,
        1,341,1,341,3,341,7031,8,341,1,341,1,341,1,341,3,341,7036,8,341,
        1,341,1,341,1,341,1,341,1,341,1,341,3,341,7044,8,341,5,341,7046,
        8,341,10,341,12,341,7049,9,341,1,342,1,342,1,342,1,342,1,342,1,342,
        3,342,7057,8,342,1,342,3,342,7060,8,342,1,342,1,342,1,342,3,342,
        7065,8,342,1,342,1,342,1,342,3,342,7070,8,342,1,342,1,342,3,342,
        7074,8,342,1,342,3,342,7077,8,342,1,343,1,343,1,343,1,343,1,343,
        1,343,1,343,3,343,7086,8,343,1,343,1,343,1,343,1,343,1,343,1,343,
        3,343,7094,8,343,1,343,1,343,1,343,3,343,7099,8,343,3,343,7101,8,
        343,1,343,3,343,7104,8,343,1,344,1,344,3,344,7108,8,344,1,345,1,
        345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,3,345,7119,8,345,1,
        345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,
        1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,3,345,7140,8,345,
        1,345,1,345,1,345,1,345,1,345,1,345,3,345,7148,8,345,1,345,1,345,
        1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,3,345,7161,
        8,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,3,345,7171,
        8,345,1,345,1,345,1,345,1,345,3,345,7177,8,345,1,345,1,345,1,345,
        1,345,3,345,7183,8,345,1,345,3,345,7186,8,345,1,345,3,345,7189,8,
        345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,
        1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,
        1,345,1,345,1,345,3,345,7215,8,345,3,345,7217,8,345,1,345,1,345,
        1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,
        1,345,1,345,1,345,1,345,1,345,1,345,3,345,7238,8,345,1,345,1,345,
        1,345,1,345,1,345,1,345,1,345,1,345,3,345,7248,8,345,1,345,1,345,
        1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,3,345,7261,
        8,345,1,345,1,345,1,345,3,345,7266,8,345,1,345,1,345,3,345,7270,
        8,345,3,345,7272,8,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,
        1,345,1,345,1,345,3,345,7284,8,345,1,346,1,346,1,346,5,346,7289,
        8,346,10,346,12,346,7292,9,346,1,347,1,347,1,347,3,347,7297,8,347,
        1,348,1,348,1,349,1,349,3,349,7303,8,349,1,349,1,349,3,349,7307,
        8,349,1,350,1,350,1,350,1,351,1,351,1,351,1,351,5,351,7316,8,351,
        10,351,12,351,7319,9,351,1,352,1,352,1,352,1,352,1,353,1,353,1,353,
        3,353,7328,8,353,1,354,1,354,3,354,7332,8,354,1,354,1,354,1,354,
        3,354,7337,8,354,1,354,3,354,7340,8,354,1,354,3,354,7343,8,354,1,
        354,1,354,1,355,1,355,1,355,1,355,1,355,3,355,7352,8,355,1,355,1,
        355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,3,355,7363,8,355,3,
        355,7365,8,355,1,356,1,356,3,356,7369,8,356,1,356,1,356,1,356,3,
        356,7374,8,356,1,357,1,357,1,357,1,357,1,357,1,357,1,357,3,357,7383,
        8,357,1,358,1,358,1,358,3,358,7388,8,358,1,358,1,358,1,359,1,359,
        1,360,1,360,3,360,7396,8,360,1,361,1,361,1,362,1,362,1,362,1,362,
        1,362,1,362,3,362,7406,8,362,1,363,1,363,1,363,1,363,1,363,1,363,
        3,363,7414,8,363,1,364,1,364,3,364,7418,8,364,1,364,3,364,7421,8,
        364,1,365,1,365,1,365,5,365,7426,8,365,10,365,12,365,7429,9,365,
        1,366,1,366,1,366,1,366,1,366,3,366,7436,8,366,1,367,1,367,3,367,
        7440,8,367,1,368,1,368,1,368,5,368,7445,8,368,10,368,12,368,7448,
        9,368,1,369,1,369,1,369,1,369,3,369,7454,8,369,3,369,7456,8,369,
        1,370,1,370,1,370,1,370,1,370,5,370,7463,8,370,10,370,12,370,7466,
        9,370,3,370,7468,8,370,1,370,1,370,1,371,1,371,1,371,1,371,1,371,
        1,371,1,371,1,371,3,371,7480,8,371,1,372,1,372,1,373,1,373,1,373,
        1,373,1,373,3,373,7489,8,373,1,373,1,373,1,373,1,373,1,373,3,373,
        7496,8,373,1,373,1,373,1,373,1,373,1,373,1,373,1,373,3,373,7505,
        8,373,1,374,1,374,1,374,1,374,1,374,1,375,1,375,1,375,3,375,7515,
        8,375,1,375,1,375,1,375,3,375,7520,8,375,1,375,1,375,3,375,7524,
        8,375,3,375,7526,8,375,1,375,3,375,7529,8,375,1,376,4,376,7532,8,
        376,11,376,12,376,7533,1,377,5,377,7537,8,377,10,377,12,377,7540,
        9,377,1,378,1,378,1,378,5,378,7545,8,378,10,378,12,378,7548,9,378,
        1,379,1,379,1,379,1,379,1,379,3,379,7555,8,379,1,379,3,379,7558,
        8,379,1,380,1,380,1,380,5,380,7563,8,380,10,380,12,380,7566,9,380,
        1,381,1,381,1,381,5,381,7571,8,381,10,381,12,381,7574,9,381,1,382,
        1,382,1,382,5,382,7579,8,382,10,382,12,382,7582,9,382,1,383,1,383,
        1,383,5,383,7587,8,383,10,383,12,383,7590,9,383,1,384,1,384,1,385,
        1,385,1,386,1,386,1,387,1,387,1,388,1,388,1,389,1,389,1,390,1,390,
        3,390,7606,8,390,1,391,1,391,1,391,5,391,7611,8,391,10,391,12,391,
        7614,9,391,1,392,1,392,1,392,5,392,7619,8,392,10,392,12,392,7622,
        9,392,1,393,1,393,1,394,1,394,1,395,1,395,1,396,1,396,1,397,1,397,
        1,398,1,398,1,398,1,398,3,398,7638,8,398,1,399,1,399,1,399,1,399,
        3,399,7644,8,399,1,400,1,400,1,400,1,400,3,400,7650,8,400,1,401,
        1,401,1,402,1,402,1,402,1,402,3,402,7658,8,402,1,403,1,403,1,403,
        1,403,3,403,7664,8,403,1,404,1,404,1,404,3,404,7669,8,404,1,405,
        1,405,1,405,1,405,5,405,7675,8,405,10,405,12,405,7678,9,405,1,405,
        1,405,3,405,7682,8,405,1,406,3,406,7685,8,406,1,406,1,406,1,407,
        1,407,1,407,1,407,1,407,3,407,7694,8,407,1,408,1,408,1,408,5,408,
        7699,8,408,10,408,12,408,7702,9,408,1,409,1,409,3,409,7706,8,409,
        1,410,1,410,3,410,7710,8,410,1,411,1,411,1,411,3,411,7715,8,411,
        1,412,1,412,1,412,1,412,3,412,7721,8,412,1,413,1,413,1,413,3,413,
        7726,8,413,1,413,1,413,1,413,1,413,1,413,1,413,3,413,7734,8,413,
        1,414,1,414,1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,
        1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,
        1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,
        1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,
        1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,1,415,3,415,7789,
        8,415,1,416,1,416,1,417,1,417,1,418,3,418,7796,8,418,1,418,1,418,
        1,418,1,418,4,418,7802,8,418,11,418,12,418,7803,3,418,7806,8,418,
        3,418,7808,8,418,1,418,1,418,5,418,7812,8,418,10,418,12,418,7815,
        9,418,1,418,3,418,7818,8,418,1,418,1,418,3,418,7822,8,418,1,419,
        1,419,1,419,1,419,1,420,1,420,1,420,1,420,1,420,3,420,7833,8,420,
        1,420,3,420,7836,8,420,1,420,1,420,3,420,7840,8,420,1,420,1,420,
        3,420,7844,8,420,1,420,1,420,3,420,7848,8,420,1,420,3,420,7851,8,
        420,1,420,3,420,7854,8,420,1,420,3,420,7857,8,420,1,420,1,420,1,
        420,1,420,1,420,5,420,7864,8,420,10,420,12,420,7867,9,420,1,420,
        1,420,3,420,7871,8,420,1,420,1,420,3,420,7875,8,420,1,420,1,420,
        1,421,1,421,1,421,1,422,1,422,1,423,1,423,1,423,1,423,1,423,1,423,
        1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,
        1,423,1,423,1,423,1,423,1,423,1,423,1,423,3,423,7908,8,423,1,424,
        1,424,1,424,1,424,1,425,1,425,1,425,1,425,3,425,7918,8,425,1,425,
        1,425,3,425,7922,8,425,1,425,1,425,1,425,1,425,3,425,7928,8,425,
        1,425,1,425,1,425,3,425,7933,8,425,1,426,1,426,1,426,1,426,1,426,
        1,427,1,427,3,427,7942,8,427,1,427,1,427,1,427,1,427,5,427,7948,
        8,427,10,427,12,427,7951,9,427,1,427,1,427,1,428,1,428,1,428,1,428,
        1,429,1,429,3,429,7961,8,429,1,429,1,429,1,429,1,429,5,429,7967,
        8,429,10,429,12,429,7970,9,429,1,430,1,430,1,430,1,430,5,430,7976,
        8,430,10,430,12,430,7979,9,430,1,430,1,430,1,430,1,430,5,430,7985,
        8,430,10,430,12,430,7988,9,430,5,430,7990,8,430,10,430,12,430,7993,
        9,430,1,430,3,430,7996,8,430,1,430,1,430,1,430,1,430,1,431,1,431,
        5,431,8004,8,431,10,431,12,431,8007,9,431,1,432,1,432,3,432,8011,
        8,432,1,432,1,432,1,432,1,432,5,432,8017,8,432,10,432,12,432,8020,
        9,432,4,432,8022,8,432,11,432,12,432,8023,1,432,3,432,8027,8,432,
        1,432,1,432,1,432,1,432,1,433,3,433,8034,8,433,1,433,1,433,1,433,
        1,433,3,433,8040,8,433,1,433,1,433,1,434,1,434,1,434,1,434,3,434,
        8048,8,434,1,434,1,434,1,434,1,434,1,434,1,434,3,434,8056,8,434,
        1,434,3,434,8059,8,434,1,434,1,434,1,434,1,434,1,434,3,434,8066,
        8,434,3,434,8068,8,434,1,435,3,435,8071,8,435,1,435,1,435,1,435,
        1,435,3,435,8077,8,435,1,435,1,435,1,435,1,435,1,435,1,436,1,436,
        3,436,8086,8,436,1,436,1,436,3,436,8090,8,436,1,436,1,436,1,437,
        1,437,1,437,1,437,1,437,1,437,1,437,1,437,1,437,1,437,3,437,8104,
        8,437,1,437,3,437,8107,8,437,3,437,8109,8,437,1,437,1,437,1,438,
        1,438,3,438,8115,8,438,1,438,1,438,1,438,1,438,1,438,1,438,4,438,
        8123,8,438,11,438,12,438,8124,3,438,8127,8,438,3,438,8129,8,438,
        1,438,1,438,1,438,1,438,5,438,8135,8,438,10,438,12,438,8138,9,438,
        3,438,8140,8,438,1,438,3,438,8143,8,438,1,439,1,439,1,439,1,439,
        1,440,1,440,1,440,1,440,3,440,8153,8,440,1,440,1,440,1,441,1,441,
        5,441,8159,8,441,10,441,12,441,8162,9,441,1,441,1,441,1,441,3,441,
        8167,8,441,1,441,1,441,1,442,1,442,3,442,8173,8,442,1,442,1,442,
        1,443,1,443,1,443,3,443,8180,8,443,1,443,1,443,3,443,8184,8,443,
        1,443,1,443,3,443,8188,8,443,1,443,3,443,8191,8,443,1,443,3,443,
        8194,8,443,1,443,1,443,1,444,1,444,3,444,8200,8,444,1,444,1,444,
        1,445,1,445,1,445,3,445,8207,8,445,1,445,3,445,8210,8,445,1,445,
        1,445,1,445,1,445,1,445,1,445,3,445,8218,8,445,3,445,8220,8,445,
        1,445,1,445,1,445,1,445,1,445,5,445,8227,8,445,10,445,12,445,8230,
        9,445,1,445,1,445,3,445,8234,8,445,3,445,8236,8,445,1,445,1,445,
        1,446,1,446,1,446,3,446,8243,8,446,1,446,1,446,1,447,1,447,3,447,
        8249,8,447,1,447,3,447,8252,8,447,1,447,1,447,1,447,1,447,1,447,
        1,448,1,448,1,448,1,448,1,448,3,448,8264,8,448,1,448,1,448,1,448,
        1,448,1,448,3,448,8271,8,448,3,448,8273,8,448,1,449,1,449,3,449,
        8277,8,449,1,449,1,449,1,449,1,450,3,450,8283,8,450,1,450,1,450,
        1,450,3,450,8288,8,450,1,450,1,450,3,450,8292,8,450,1,450,3,450,
        8295,8,450,1,450,3,450,8298,8,450,1,450,1,450,1,450,1,450,1,450,
        4,450,8305,8,450,11,450,12,450,8306,1,451,3,451,8310,8,451,1,451,
        1,451,3,451,8314,8,451,1,451,1,451,3,451,8318,8,451,3,451,8320,8,
        451,1,451,3,451,8323,8,451,1,451,3,451,8326,8,451,1,452,1,452,1,
        452,1,452,3,452,8332,8,452,1,452,1,452,1,452,1,452,1,452,3,452,8339,
        8,452,1,452,1,452,1,452,1,452,1,452,3,452,8346,8,452,1,452,1,452,
        1,452,1,452,3,452,8352,8,452,3,452,8354,8,452,1,453,1,453,3,453,
        8358,8,453,1,453,1,453,1,453,3,453,8363,8,453,1,453,1,453,1,454,
        1,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,1,454,
        5,454,8379,8,454,10,454,12,454,8382,9,454,1,454,1,454,4,454,8386,
        8,454,11,454,12,454,8387,1,455,1,455,1,455,1,455,1,455,5,455,8395,
        8,455,10,455,12,455,8398,9,455,1,455,1,455,1,455,1,455,3,455,8404,
        8,455,1,456,1,456,3,456,8408,8,456,1,457,1,457,1,457,1,457,1,458,
        1,458,1,458,1,459,1,459,1,459,3,459,8420,8,459,1,459,3,459,8423,
        8,459,1,459,1,459,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,
        1,460,3,460,8436,8,460,1,460,3,460,8439,8,460,1,461,1,461,3,461,
        8443,8,461,1,462,1,462,1,462,1,462,1,462,5,462,8450,8,462,10,462,
        12,462,8453,9,462,1,462,1,462,5,462,8457,8,462,10,462,12,462,8460,
        9,462,4,462,8462,8,462,11,462,12,462,8463,1,463,1,463,1,463,3,463,
        8469,8,463,1,464,1,464,3,464,8473,8,464,1,465,3,465,8476,8,465,1,
        465,3,465,8479,8,465,1,465,3,465,8482,8,465,1,465,3,465,8485,8,465,
        1,465,3,465,8488,8,465,1,465,1,465,3,465,8492,8,465,1,465,3,465,
        8495,8,465,1,465,0,3,676,680,682,466,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
        268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
        300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,
        332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,
        364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,
        396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,
        428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,
        460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,
        492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,
        524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,
        556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,
        588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,
        620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,
        652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,
        684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,
        716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,
        748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,778,
        780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,
        812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,
        844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,874,
        876,878,880,882,884,886,888,890,892,894,896,898,900,902,904,906,
        908,910,912,914,916,918,920,922,924,926,928,930,0,118,2,0,195,195,
        364,364,2,0,66,66,318,318,2,0,99,99,318,318,2,0,134,134,318,318,
        1,0,529,531,2,0,10,10,94,94,2,0,133,133,191,191,2,0,254,254,332,
        332,2,0,162,162,363,363,2,0,180,180,221,221,5,0,30,30,288,288,329,
        329,352,352,354,354,2,0,109,109,532,532,2,0,158,158,277,277,2,0,
        367,367,439,439,2,0,139,139,312,312,2,0,191,191,333,333,2,0,313,
        313,333,333,2,0,150,150,315,315,2,0,64,64,94,94,4,0,78,78,183,183,
        197,197,298,298,2,0,213,213,254,254,2,0,352,352,354,354,2,0,200,
        200,224,224,9,0,30,30,160,160,165,165,179,179,219,219,227,227,342,
        342,345,345,438,438,3,0,113,113,284,284,336,336,2,0,53,53,78,78,
        2,0,105,105,379,379,2,0,260,260,262,262,3,0,173,173,260,260,262,
        262,1,0,12,13,2,0,64,64,375,375,2,0,156,156,206,206,2,0,189,189,
        360,360,2,0,215,215,373,373,3,0,133,133,191,191,333,333,5,0,30,30,
        88,88,182,182,241,241,369,369,2,0,9,9,94,94,2,0,92,92,226,226,1,
        0,448,449,2,0,92,92,414,414,2,0,341,341,414,414,4,0,163,163,185,
        185,283,283,353,353,2,0,135,135,145,145,2,0,211,211,278,278,3,0,
        321,321,357,357,445,445,3,0,66,66,99,99,318,318,5,0,108,108,168,
        168,226,226,328,328,342,342,2,0,167,167,314,314,2,0,61,61,265,265,
        4,0,207,207,249,249,268,268,293,293,2,0,130,130,307,307,2,0,64,64,
        68,68,10,0,46,46,88,88,182,182,202,202,241,241,352,352,354,354,357,
        358,369,369,521,523,5,0,212,212,329,329,350,350,455,455,457,457,
        5,0,212,212,329,329,350,350,361,361,455,456,2,0,37,37,55,55,2,0,
        207,207,249,249,2,0,10,10,53,53,2,0,181,181,243,243,2,0,170,170,
        320,320,2,0,141,141,223,223,5,0,108,108,168,168,189,189,342,342,
        360,360,2,0,226,226,328,328,2,0,163,163,185,185,2,0,186,186,193,
        193,4,0,88,88,182,182,241,241,369,369,2,0,137,137,242,242,2,0,161,
        161,319,319,4,0,129,129,161,161,319,319,454,454,2,0,356,356,380,
        380,2,0,81,81,382,382,2,0,151,151,254,254,2,0,133,133,138,138,1,
        0,31,32,2,0,128,128,547,547,2,0,60,60,96,96,2,0,99,99,349,349,2,
        0,131,131,414,414,2,0,201,201,334,334,3,0,59,59,70,70,97,97,2,0,
        30,30,56,56,1,0,527,528,2,0,207,207,268,268,2,0,320,320,414,414,
        2,0,571,571,573,573,1,0,468,469,4,0,113,113,115,115,119,119,126,
        126,2,0,360,360,477,477,2,0,394,395,409,409,2,0,391,392,406,406,
        1,0,391,392,1,0,418,419,5,0,10,10,16,17,21,21,23,23,25,25,3,0,9,
        9,14,14,27,27,2,0,98,98,396,396,2,0,50,51,75,76,2,0,41,41,420,420,
        3,0,39,39,73,73,95,95,4,0,393,393,399,399,404,404,425,425,2,0,292,
        292,347,347,2,0,166,166,188,188,2,0,304,304,450,450,3,0,299,299,
        320,320,481,481,2,0,208,208,289,289,3,0,30,30,34,34,90,90,6,0,9,
        10,12,17,21,21,23,23,25,25,27,27,2,0,114,114,120,120,2,0,20,20,22,
        22,1,0,483,486,17,0,53,53,116,116,123,124,129,228,238,386,433,452,
        455,469,471,471,473,473,475,475,477,488,490,502,504,504,506,518,
        520,520,524,524,547,548,3,0,106,123,125,128,472,472,4,0,30,52,54,
        70,72,105,454,454,2,0,62,62,116,116,2,0,10,10,20,20,2,0,434,434,
        501,501,2,0,167,167,507,507,1,0,512,517,2,0,144,144,210,210,9932,
        0,935,1,0,0,0,2,940,1,0,0,0,4,1064,1,0,0,0,6,1066,1,0,0,0,8,1069,
        1,0,0,0,10,1119,1,0,0,0,12,1129,1,0,0,0,14,1131,1,0,0,0,16,1143,
        1,0,0,0,18,1155,1,0,0,0,20,1166,1,0,0,0,22,1200,1,0,0,0,24,1244,
        1,0,0,0,26,1246,1,0,0,0,28,1258,1,0,0,0,30,1265,1,0,0,0,32,1284,
        1,0,0,0,34,1292,1,0,0,0,36,1294,1,0,0,0,38,1308,1,0,0,0,40,1312,
        1,0,0,0,42,1349,1,0,0,0,44,1351,1,0,0,0,46,1359,1,0,0,0,48,1369,
        1,0,0,0,50,1376,1,0,0,0,52,1384,1,0,0,0,54,1390,1,0,0,0,56,1406,
        1,0,0,0,58,1410,1,0,0,0,60,1412,1,0,0,0,62,1424,1,0,0,0,64,1429,
        1,0,0,0,66,1434,1,0,0,0,68,1436,1,0,0,0,70,1448,1,0,0,0,72,1456,
        1,0,0,0,74,1458,1,0,0,0,76,1582,1,0,0,0,78,1584,1,0,0,0,80,1601,
        1,0,0,0,82,1603,1,0,0,0,84,1617,1,0,0,0,86,1619,1,0,0,0,88,1633,
        1,0,0,0,90,1635,1,0,0,0,92,1872,1,0,0,0,94,1879,1,0,0,0,96,1881,
        1,0,0,0,98,1883,1,0,0,0,100,1886,1,0,0,0,102,1897,1,0,0,0,104,1900,
        1,0,0,0,106,1936,1,0,0,0,108,1938,1,0,0,0,110,1979,1,0,0,0,112,1981,
        1,0,0,0,114,2035,1,0,0,0,116,2076,1,0,0,0,118,2078,1,0,0,0,120,2095,
        1,0,0,0,122,2176,1,0,0,0,124,2178,1,0,0,0,126,2189,1,0,0,0,128,2212,
        1,0,0,0,130,2230,1,0,0,0,132,2232,1,0,0,0,134,2267,1,0,0,0,136,2360,
        1,0,0,0,138,2365,1,0,0,0,140,2367,1,0,0,0,142,2465,1,0,0,0,144,2467,
        1,0,0,0,146,2471,1,0,0,0,148,2482,1,0,0,0,150,2490,1,0,0,0,152,2493,
        1,0,0,0,154,2496,1,0,0,0,156,2514,1,0,0,0,158,2516,1,0,0,0,160,2520,
        1,0,0,0,162,2533,1,0,0,0,164,2535,1,0,0,0,166,2540,1,0,0,0,168,2560,
        1,0,0,0,170,2568,1,0,0,0,172,2575,1,0,0,0,174,2577,1,0,0,0,176,2586,
        1,0,0,0,178,2589,1,0,0,0,180,2593,1,0,0,0,182,2597,1,0,0,0,184,2622,
        1,0,0,0,186,2632,1,0,0,0,188,2646,1,0,0,0,190,2662,1,0,0,0,192,2668,
        1,0,0,0,194,2695,1,0,0,0,196,2705,1,0,0,0,198,2721,1,0,0,0,200,2765,
        1,0,0,0,202,2772,1,0,0,0,204,2774,1,0,0,0,206,2800,1,0,0,0,208,2811,
        1,0,0,0,210,2830,1,0,0,0,212,2841,1,0,0,0,214,2879,1,0,0,0,216,2900,
        1,0,0,0,218,2902,1,0,0,0,220,2922,1,0,0,0,222,2934,1,0,0,0,224,2946,
        1,0,0,0,226,2949,1,0,0,0,228,2952,1,0,0,0,230,2972,1,0,0,0,232,2977,
        1,0,0,0,234,3026,1,0,0,0,236,3028,1,0,0,0,238,3051,1,0,0,0,240,3067,
        1,0,0,0,242,3079,1,0,0,0,244,3106,1,0,0,0,246,3121,1,0,0,0,248,3184,
        1,0,0,0,250,3186,1,0,0,0,252,3191,1,0,0,0,254,3197,1,0,0,0,256,3284,
        1,0,0,0,258,3290,1,0,0,0,260,3292,1,0,0,0,262,3308,1,0,0,0,264,3310,
        1,0,0,0,266,3319,1,0,0,0,268,3323,1,0,0,0,270,3336,1,0,0,0,272,3348,
        1,0,0,0,274,3350,1,0,0,0,276,3372,1,0,0,0,278,3384,1,0,0,0,280,3395,
        1,0,0,0,282,3486,1,0,0,0,284,3488,1,0,0,0,286,3499,1,0,0,0,288,3510,
        1,0,0,0,290,3512,1,0,0,0,292,3538,1,0,0,0,294,3540,1,0,0,0,296,3544,
        1,0,0,0,298,3594,1,0,0,0,300,3596,1,0,0,0,302,3602,1,0,0,0,304,3627,
        1,0,0,0,306,3631,1,0,0,0,308,3845,1,0,0,0,310,3863,1,0,0,0,312,3889,
        1,0,0,0,314,3891,1,0,0,0,316,3899,1,0,0,0,318,3905,1,0,0,0,320,3909,
        1,0,0,0,322,3929,1,0,0,0,324,3935,1,0,0,0,326,4002,1,0,0,0,328,4033,
        1,0,0,0,330,4079,1,0,0,0,332,4081,1,0,0,0,334,4083,1,0,0,0,336,4094,
        1,0,0,0,338,4131,1,0,0,0,340,4133,1,0,0,0,342,4139,1,0,0,0,344,4189,
        1,0,0,0,346,4192,1,0,0,0,348,4206,1,0,0,0,350,4227,1,0,0,0,352,4251,
        1,0,0,0,354,4292,1,0,0,0,356,4294,1,0,0,0,358,4296,1,0,0,0,360,4336,
        1,0,0,0,362,4353,1,0,0,0,364,4373,1,0,0,0,366,4426,1,0,0,0,368,4429,
        1,0,0,0,370,4435,1,0,0,0,372,4443,1,0,0,0,374,4456,1,0,0,0,376,4458,
        1,0,0,0,378,4471,1,0,0,0,380,4473,1,0,0,0,382,4486,1,0,0,0,384,4496,
        1,0,0,0,386,4507,1,0,0,0,388,4518,1,0,0,0,390,4520,1,0,0,0,392,4525,
        1,0,0,0,394,4539,1,0,0,0,396,4571,1,0,0,0,398,4608,1,0,0,0,400,4610,
        1,0,0,0,402,4613,1,0,0,0,404,4616,1,0,0,0,406,4633,1,0,0,0,408,4654,
        1,0,0,0,410,4670,1,0,0,0,412,4686,1,0,0,0,414,4708,1,0,0,0,416,4713,
        1,0,0,0,418,4716,1,0,0,0,420,4724,1,0,0,0,422,4749,1,0,0,0,424,4752,
        1,0,0,0,426,4780,1,0,0,0,428,4785,1,0,0,0,430,4825,1,0,0,0,432,5037,
        1,0,0,0,434,5039,1,0,0,0,436,5127,1,0,0,0,438,5129,1,0,0,0,440,5135,
        1,0,0,0,442,5146,1,0,0,0,444,5156,1,0,0,0,446,5236,1,0,0,0,448,5238,
        1,0,0,0,450,5252,1,0,0,0,452,5274,1,0,0,0,454,5347,1,0,0,0,456,5349,
        1,0,0,0,458,5390,1,0,0,0,460,5392,1,0,0,0,462,5397,1,0,0,0,464,5400,
        1,0,0,0,466,5403,1,0,0,0,468,5453,1,0,0,0,470,5455,1,0,0,0,472,5466,
        1,0,0,0,474,5468,1,0,0,0,476,5478,1,0,0,0,478,5513,1,0,0,0,480,5516,
        1,0,0,0,482,5537,1,0,0,0,484,5547,1,0,0,0,486,5567,1,0,0,0,488,5573,
        1,0,0,0,490,5579,1,0,0,0,492,5584,1,0,0,0,494,5597,1,0,0,0,496,5624,
        1,0,0,0,498,5672,1,0,0,0,500,5674,1,0,0,0,502,5712,1,0,0,0,504,5714,
        1,0,0,0,506,5735,1,0,0,0,508,5755,1,0,0,0,510,5759,1,0,0,0,512,5774,
        1,0,0,0,514,5776,1,0,0,0,516,5780,1,0,0,0,518,5784,1,0,0,0,520,5792,
        1,0,0,0,522,5816,1,0,0,0,524,5818,1,0,0,0,526,5829,1,0,0,0,528,5837,
        1,0,0,0,530,5852,1,0,0,0,532,5877,1,0,0,0,534,5879,1,0,0,0,536,5883,
        1,0,0,0,538,5892,1,0,0,0,540,5932,1,0,0,0,542,5943,1,0,0,0,544,5951,
        1,0,0,0,546,5954,1,0,0,0,548,5958,1,0,0,0,550,5973,1,0,0,0,552,5998,
        1,0,0,0,554,6013,1,0,0,0,556,6039,1,0,0,0,558,6041,1,0,0,0,560,6064,
        1,0,0,0,562,6066,1,0,0,0,564,6074,1,0,0,0,566,6092,1,0,0,0,568,6116,
        1,0,0,0,570,6128,1,0,0,0,572,6132,1,0,0,0,574,6144,1,0,0,0,576,6164,
        1,0,0,0,578,6172,1,0,0,0,580,6186,1,0,0,0,582,6209,1,0,0,0,584,6211,
        1,0,0,0,586,6216,1,0,0,0,588,6226,1,0,0,0,590,6247,1,0,0,0,592,6249,
        1,0,0,0,594,6258,1,0,0,0,596,6269,1,0,0,0,598,6279,1,0,0,0,600,6281,
        1,0,0,0,602,6288,1,0,0,0,604,6319,1,0,0,0,606,6349,1,0,0,0,608,6351,
        1,0,0,0,610,6360,1,0,0,0,612,6363,1,0,0,0,614,6434,1,0,0,0,616,6458,
        1,0,0,0,618,6479,1,0,0,0,620,6481,1,0,0,0,622,6489,1,0,0,0,624,6506,
        1,0,0,0,626,6532,1,0,0,0,628,6534,1,0,0,0,630,6542,1,0,0,0,632,6549,
        1,0,0,0,634,6573,1,0,0,0,636,6579,1,0,0,0,638,6587,1,0,0,0,640,6590,
        1,0,0,0,642,6597,1,0,0,0,644,6605,1,0,0,0,646,6610,1,0,0,0,648,6640,
        1,0,0,0,650,6667,1,0,0,0,652,6695,1,0,0,0,654,6712,1,0,0,0,656,6718,
        1,0,0,0,658,6736,1,0,0,0,660,6738,1,0,0,0,662,6742,1,0,0,0,664,6759,
        1,0,0,0,666,6764,1,0,0,0,668,6802,1,0,0,0,670,6804,1,0,0,0,672,6808,
        1,0,0,0,674,6810,1,0,0,0,676,6819,1,0,0,0,678,6903,1,0,0,0,680,6909,
        1,0,0,0,682,7018,1,0,0,0,684,7050,1,0,0,0,686,7103,1,0,0,0,688,7107,
        1,0,0,0,690,7283,1,0,0,0,692,7285,1,0,0,0,694,7293,1,0,0,0,696,7298,
        1,0,0,0,698,7300,1,0,0,0,700,7308,1,0,0,0,702,7311,1,0,0,0,704,7320,
        1,0,0,0,706,7324,1,0,0,0,708,7329,1,0,0,0,710,7346,1,0,0,0,712,7373,
        1,0,0,0,714,7382,1,0,0,0,716,7384,1,0,0,0,718,7391,1,0,0,0,720,7395,
        1,0,0,0,722,7397,1,0,0,0,724,7405,1,0,0,0,726,7413,1,0,0,0,728,7420,
        1,0,0,0,730,7422,1,0,0,0,732,7435,1,0,0,0,734,7439,1,0,0,0,736,7441,
        1,0,0,0,738,7455,1,0,0,0,740,7457,1,0,0,0,742,7479,1,0,0,0,744,7481,
        1,0,0,0,746,7504,1,0,0,0,748,7506,1,0,0,0,750,7528,1,0,0,0,752,7531,
        1,0,0,0,754,7538,1,0,0,0,756,7541,1,0,0,0,758,7557,1,0,0,0,760,7559,
        1,0,0,0,762,7567,1,0,0,0,764,7575,1,0,0,0,766,7583,1,0,0,0,768,7591,
        1,0,0,0,770,7593,1,0,0,0,772,7595,1,0,0,0,774,7597,1,0,0,0,776,7599,
        1,0,0,0,778,7601,1,0,0,0,780,7603,1,0,0,0,782,7607,1,0,0,0,784,7615,
        1,0,0,0,786,7623,1,0,0,0,788,7625,1,0,0,0,790,7627,1,0,0,0,792,7629,
        1,0,0,0,794,7631,1,0,0,0,796,7637,1,0,0,0,798,7643,1,0,0,0,800,7649,
        1,0,0,0,802,7651,1,0,0,0,804,7657,1,0,0,0,806,7663,1,0,0,0,808,7665,
        1,0,0,0,810,7681,1,0,0,0,812,7684,1,0,0,0,814,7693,1,0,0,0,816,7695,
        1,0,0,0,818,7705,1,0,0,0,820,7709,1,0,0,0,822,7714,1,0,0,0,824,7720,
        1,0,0,0,826,7733,1,0,0,0,828,7735,1,0,0,0,830,7788,1,0,0,0,832,7790,
        1,0,0,0,834,7792,1,0,0,0,836,7795,1,0,0,0,838,7823,1,0,0,0,840,7827,
        1,0,0,0,842,7878,1,0,0,0,844,7881,1,0,0,0,846,7907,1,0,0,0,848,7909,
        1,0,0,0,850,7932,1,0,0,0,852,7934,1,0,0,0,854,7939,1,0,0,0,856,7954,
        1,0,0,0,858,7960,1,0,0,0,860,7971,1,0,0,0,862,8001,1,0,0,0,864,8008,
        1,0,0,0,866,8033,1,0,0,0,868,8043,1,0,0,0,870,8070,1,0,0,0,872,8083,
        1,0,0,0,874,8093,1,0,0,0,876,8112,1,0,0,0,878,8144,1,0,0,0,880,8148,
        1,0,0,0,882,8156,1,0,0,0,884,8170,1,0,0,0,886,8176,1,0,0,0,888,8197,
        1,0,0,0,890,8203,1,0,0,0,892,8242,1,0,0,0,894,8246,1,0,0,0,896,8272,
        1,0,0,0,898,8274,1,0,0,0,900,8282,1,0,0,0,902,8319,1,0,0,0,904,8353,
        1,0,0,0,906,8355,1,0,0,0,908,8366,1,0,0,0,910,8403,1,0,0,0,912,8407,
        1,0,0,0,914,8409,1,0,0,0,916,8413,1,0,0,0,918,8416,1,0,0,0,920,8438,
        1,0,0,0,922,8442,1,0,0,0,924,8444,1,0,0,0,926,8468,1,0,0,0,928,8472,
        1,0,0,0,930,8475,1,0,0,0,932,934,3,2,1,0,933,932,1,0,0,0,934,937,
        1,0,0,0,935,933,1,0,0,0,935,936,1,0,0,0,936,938,1,0,0,0,937,935,
        1,0,0,0,938,939,5,0,0,1,939,1,1,0,0,0,940,942,3,4,2,0,941,943,5,
        7,0,0,942,941,1,0,0,0,942,943,1,0,0,0,943,3,1,0,0,0,944,1065,3,278,
        139,0,945,1065,3,488,244,0,946,1065,3,484,242,0,947,1065,3,486,243,
        0,948,1065,3,352,176,0,949,1065,3,494,247,0,950,1065,3,292,146,0,
        951,1065,3,210,105,0,952,1065,3,212,106,0,953,1065,3,218,109,0,954,
        1065,3,232,116,0,955,1065,3,404,202,0,956,1065,3,28,14,0,957,1065,
        3,434,217,0,958,1065,3,436,218,0,959,1065,3,446,223,0,960,1065,3,
        438,219,0,961,1065,3,444,222,0,962,1065,3,244,122,0,963,1065,3,246,
        123,0,964,1065,3,198,99,0,965,1065,3,490,245,0,966,1065,3,76,38,
        0,967,1065,3,430,215,0,968,1065,3,108,54,0,969,1065,3,450,225,0,
        970,1065,3,18,9,0,971,1065,3,20,10,0,972,1065,3,16,8,0,973,1065,
        3,454,227,0,974,1065,3,184,92,0,975,1065,3,498,249,0,976,1065,3,
        496,248,0,977,1065,3,240,120,0,978,1065,3,506,253,0,979,1065,3,6,
        3,0,980,1065,3,72,36,0,981,1065,3,112,56,0,982,1065,3,502,251,0,
        983,1065,3,324,162,0,984,1065,3,70,35,0,985,1065,3,114,57,0,986,
        1065,3,254,127,0,987,1065,3,186,93,0,988,1065,3,280,140,0,989,1065,
        3,420,210,0,990,1065,3,500,250,0,991,1065,3,492,246,0,992,1065,3,
        208,104,0,993,1065,3,214,107,0,994,1065,3,228,114,0,995,1065,3,234,
        117,0,996,1065,3,364,182,0,997,1065,3,26,13,0,998,1065,3,192,96,
        0,999,1065,3,296,148,0,1000,1065,3,300,150,0,1001,1065,3,448,224,
        0,1002,1065,3,302,151,0,1003,1065,3,242,121,0,1004,1065,3,204,102,
        0,1005,1065,3,30,15,0,1006,1065,3,196,98,0,1007,1065,3,120,60,0,
        1008,1065,3,452,226,0,1009,1065,3,182,91,0,1010,1065,3,206,103,0,
        1011,1065,3,424,212,0,1012,1065,3,256,128,0,1013,1065,3,274,137,
        0,1014,1065,3,8,4,0,1015,1065,3,14,7,0,1016,1065,3,238,119,0,1017,
        1065,3,480,240,0,1018,1065,3,536,268,0,1019,1065,3,558,279,0,1020,
        1065,3,282,141,0,1021,1065,3,548,274,0,1022,1065,3,74,37,0,1023,
        1065,3,418,209,0,1024,1065,3,308,154,0,1025,1065,3,532,266,0,1026,
        1065,3,520,260,0,1027,1065,3,328,164,0,1028,1065,3,334,167,0,1029,
        1065,3,348,174,0,1030,1065,3,900,450,0,1031,1065,3,236,118,0,1032,
        1065,3,358,179,0,1033,1065,3,538,269,0,1034,1065,3,464,232,0,1035,
        1065,3,194,97,0,1036,1065,3,478,239,0,1037,1065,3,550,275,0,1038,
        1065,3,460,230,0,1039,1065,3,526,263,0,1040,1065,3,306,153,0,1041,
        1065,3,428,214,0,1042,1065,3,408,204,0,1043,1065,3,406,203,0,1044,
        1065,3,410,205,0,1045,1065,3,432,216,0,1046,1065,3,336,168,0,1047,
        1065,3,350,175,0,1048,1065,3,456,228,0,1049,1065,3,326,163,0,1050,
        1065,3,560,280,0,1051,1065,3,468,234,0,1052,1065,3,320,160,0,1053,
        1065,3,466,233,0,1054,1065,3,552,276,0,1055,1065,3,504,252,0,1056,
        1065,3,60,30,0,1057,1065,3,36,18,0,1058,1065,3,68,34,0,1059,1065,
        3,476,238,0,1060,1062,5,581,0,0,1061,1063,5,582,0,0,1062,1061,1,
        0,0,0,1062,1063,1,0,0,0,1063,1065,1,0,0,0,1064,944,1,0,0,0,1064,
        945,1,0,0,0,1064,946,1,0,0,0,1064,947,1,0,0,0,1064,948,1,0,0,0,1064,
        949,1,0,0,0,1064,950,1,0,0,0,1064,951,1,0,0,0,1064,952,1,0,0,0,1064,
        953,1,0,0,0,1064,954,1,0,0,0,1064,955,1,0,0,0,1064,956,1,0,0,0,1064,
        957,1,0,0,0,1064,958,1,0,0,0,1064,959,1,0,0,0,1064,960,1,0,0,0,1064,
        961,1,0,0,0,1064,962,1,0,0,0,1064,963,1,0,0,0,1064,964,1,0,0,0,1064,
        965,1,0,0,0,1064,966,1,0,0,0,1064,967,1,0,0,0,1064,968,1,0,0,0,1064,
        969,1,0,0,0,1064,970,1,0,0,0,1064,971,1,0,0,0,1064,972,1,0,0,0,1064,
        973,1,0,0,0,1064,974,1,0,0,0,1064,975,1,0,0,0,1064,976,1,0,0,0,1064,
        977,1,0,0,0,1064,978,1,0,0,0,1064,979,1,0,0,0,1064,980,1,0,0,0,1064,
        981,1,0,0,0,1064,982,1,0,0,0,1064,983,1,0,0,0,1064,984,1,0,0,0,1064,
        985,1,0,0,0,1064,986,1,0,0,0,1064,987,1,0,0,0,1064,988,1,0,0,0,1064,
        989,1,0,0,0,1064,990,1,0,0,0,1064,991,1,0,0,0,1064,992,1,0,0,0,1064,
        993,1,0,0,0,1064,994,1,0,0,0,1064,995,1,0,0,0,1064,996,1,0,0,0,1064,
        997,1,0,0,0,1064,998,1,0,0,0,1064,999,1,0,0,0,1064,1000,1,0,0,0,
        1064,1001,1,0,0,0,1064,1002,1,0,0,0,1064,1003,1,0,0,0,1064,1004,
        1,0,0,0,1064,1005,1,0,0,0,1064,1006,1,0,0,0,1064,1007,1,0,0,0,1064,
        1008,1,0,0,0,1064,1009,1,0,0,0,1064,1010,1,0,0,0,1064,1011,1,0,0,
        0,1064,1012,1,0,0,0,1064,1013,1,0,0,0,1064,1014,1,0,0,0,1064,1015,
        1,0,0,0,1064,1016,1,0,0,0,1064,1017,1,0,0,0,1064,1018,1,0,0,0,1064,
        1019,1,0,0,0,1064,1020,1,0,0,0,1064,1021,1,0,0,0,1064,1022,1,0,0,
        0,1064,1023,1,0,0,0,1064,1024,1,0,0,0,1064,1025,1,0,0,0,1064,1026,
        1,0,0,0,1064,1027,1,0,0,0,1064,1028,1,0,0,0,1064,1029,1,0,0,0,1064,
        1030,1,0,0,0,1064,1031,1,0,0,0,1064,1032,1,0,0,0,1064,1033,1,0,0,
        0,1064,1034,1,0,0,0,1064,1035,1,0,0,0,1064,1036,1,0,0,0,1064,1037,
        1,0,0,0,1064,1038,1,0,0,0,1064,1039,1,0,0,0,1064,1040,1,0,0,0,1064,
        1041,1,0,0,0,1064,1042,1,0,0,0,1064,1043,1,0,0,0,1064,1044,1,0,0,
        0,1064,1045,1,0,0,0,1064,1046,1,0,0,0,1064,1047,1,0,0,0,1064,1048,
        1,0,0,0,1064,1049,1,0,0,0,1064,1050,1,0,0,0,1064,1051,1,0,0,0,1064,
        1052,1,0,0,0,1064,1053,1,0,0,0,1064,1054,1,0,0,0,1064,1055,1,0,0,
        0,1064,1056,1,0,0,0,1064,1057,1,0,0,0,1064,1058,1,0,0,0,1064,1059,
        1,0,0,0,1064,1060,1,0,0,0,1065,5,1,0,0,0,1066,1067,5,433,0,0,1067,
        1068,3,684,342,0,1068,7,1,0,0,0,1069,1070,5,46,0,0,1070,1071,5,318,
        0,0,1071,1073,3,814,407,0,1072,1074,5,105,0,0,1073,1072,1,0,0,0,
        1073,1074,1,0,0,0,1074,1078,1,0,0,0,1075,1077,3,12,6,0,1076,1075,
        1,0,0,0,1077,1080,1,0,0,0,1078,1076,1,0,0,0,1078,1079,1,0,0,0,1079,
        9,1,0,0,0,1080,1078,1,0,0,0,1081,1084,5,287,0,0,1082,1085,3,808,
        404,0,1083,1085,5,78,0,0,1084,1082,1,0,0,0,1084,1083,1,0,0,0,1085,
        1120,1,0,0,0,1086,1087,7,0,0,0,1087,1088,5,287,0,0,1088,1120,3,808,
        404,0,1089,1120,5,228,0,0,1090,1120,5,229,0,0,1091,1120,5,236,0,
        0,1092,1120,5,237,0,0,1093,1120,5,234,0,0,1094,1120,5,235,0,0,1095,
        1120,5,232,0,0,1096,1120,5,233,0,0,1097,1120,5,230,0,0,1098,1120,
        5,231,0,0,1099,1120,5,535,0,0,1100,1120,5,536,0,0,1101,1120,5,537,
        0,0,1102,1120,5,538,0,0,1103,1120,5,539,0,0,1104,1120,5,540,0,0,
        1105,1106,5,164,0,0,1106,1107,5,74,0,0,1107,1120,3,812,406,0,1108,
        1109,5,371,0,0,1109,1110,5,368,0,0,1110,1120,3,808,404,0,1111,1112,
        5,68,0,0,1112,1113,7,1,0,0,1113,1120,3,784,392,0,1114,1115,7,2,0,
        0,1115,1120,3,816,408,0,1116,1117,5,134,0,0,1117,1120,3,784,392,
        0,1118,1120,3,826,413,0,1119,1081,1,0,0,0,1119,1086,1,0,0,0,1119,
        1089,1,0,0,0,1119,1090,1,0,0,0,1119,1091,1,0,0,0,1119,1092,1,0,0,
        0,1119,1093,1,0,0,0,1119,1094,1,0,0,0,1119,1095,1,0,0,0,1119,1096,
        1,0,0,0,1119,1097,1,0,0,0,1119,1098,1,0,0,0,1119,1099,1,0,0,0,1119,
        1100,1,0,0,0,1119,1101,1,0,0,0,1119,1102,1,0,0,0,1119,1103,1,0,0,
        0,1119,1104,1,0,0,0,1119,1105,1,0,0,0,1119,1108,1,0,0,0,1119,1111,
        1,0,0,0,1119,1114,1,0,0,0,1119,1116,1,0,0,0,1119,1118,1,0,0,0,1120,
        11,1,0,0,0,1121,1130,3,10,5,0,1122,1123,5,348,0,0,1123,1130,5,571,
        0,0,1124,1125,7,3,0,0,1125,1130,3,816,408,0,1126,1127,5,68,0,0,1127,
        1128,7,1,0,0,1128,1130,3,816,408,0,1129,1121,1,0,0,0,1129,1122,1,
        0,0,0,1129,1124,1,0,0,0,1129,1126,1,0,0,0,1130,13,1,0,0,0,1131,1132,
        5,46,0,0,1132,1133,5,99,0,0,1133,1135,3,814,407,0,1134,1136,5,105,
        0,0,1135,1134,1,0,0,0,1135,1136,1,0,0,0,1136,1140,1,0,0,0,1137,1139,
        3,12,6,0,1138,1137,1,0,0,0,1139,1142,1,0,0,0,1140,1138,1,0,0,0,1140,
        1141,1,0,0,0,1141,15,1,0,0,0,1142,1140,1,0,0,0,1143,1144,5,138,0,
        0,1144,1145,7,2,0,0,1145,1147,3,814,407,0,1146,1148,5,105,0,0,1147,
        1146,1,0,0,0,1147,1148,1,0,0,0,1148,1152,1,0,0,0,1149,1151,3,10,
        5,0,1150,1149,1,0,0,0,1151,1154,1,0,0,0,1152,1150,1,0,0,0,1152,1153,
        1,0,0,0,1153,17,1,0,0,0,1154,1152,1,0,0,0,1155,1156,5,138,0,0,1156,
        1159,7,2,0,0,1157,1160,5,30,0,0,1158,1160,3,814,407,0,1159,1157,
        1,0,0,0,1159,1158,1,0,0,0,1160,1161,1,0,0,0,1161,1162,5,68,0,0,1162,
        1163,5,175,0,0,1163,1164,3,788,394,0,1164,1165,3,64,32,0,1165,19,
        1,0,0,0,1166,1167,5,138,0,0,1167,1168,5,442,0,0,1168,1170,3,794,
        397,0,1169,1171,3,368,184,0,1170,1169,1,0,0,0,1170,1171,1,0,0,0,
        1171,1172,1,0,0,0,1172,1173,3,22,11,0,1173,21,1,0,0,0,1174,1178,
        3,24,12,0,1175,1177,3,24,12,0,1176,1175,1,0,0,0,1177,1180,1,0,0,
        0,1178,1176,1,0,0,0,1178,1179,1,0,0,0,1179,1182,1,0,0,0,1180,1178,
        1,0,0,0,1181,1183,5,315,0,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,
        1183,1201,1,0,0,0,1184,1185,5,309,0,0,1185,1186,5,94,0,0,1186,1201,
        3,792,396,0,1187,1188,5,282,0,0,1188,1189,5,94,0,0,1189,1201,3,814,
        407,0,1190,1191,5,333,0,0,1191,1192,5,323,0,0,1192,1201,3,32,16,
        0,1193,1195,5,269,0,0,1194,1193,1,0,0,0,1194,1195,1,0,0,0,1195,1196,
        1,0,0,0,1196,1197,5,462,0,0,1197,1198,5,80,0,0,1198,1199,5,204,0,
        0,1199,1201,3,818,409,0,1200,1174,1,0,0,0,1200,1184,1,0,0,0,1200,
        1187,1,0,0,0,1200,1190,1,0,0,0,1200,1194,1,0,0,0,1201,23,1,0,0,0,
        1202,1245,5,222,0,0,1203,1245,5,338,0,0,1204,1245,5,377,0,0,1205,
        1207,5,77,0,0,1206,1205,1,0,0,0,1206,1207,1,0,0,0,1207,1208,1,0,
        0,0,1208,1245,5,250,0,0,1209,1211,5,205,0,0,1210,1209,1,0,0,0,1210,
        1211,1,0,0,0,1211,1212,1,0,0,0,1212,1213,5,327,0,0,1213,1220,5,243,
        0,0,1214,1216,5,205,0,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,
        1217,1,0,0,0,1217,1218,5,327,0,0,1218,1220,5,181,0,0,1219,1210,1,
        0,0,0,1219,1215,1,0,0,0,1220,1245,1,0,0,0,1221,1222,5,460,0,0,1222,
        1245,7,4,0,0,1223,1224,5,170,0,0,1224,1245,3,824,412,0,1225,1226,
        5,320,0,0,1226,1245,3,818,409,0,1227,1228,5,333,0,0,1228,1229,3,
        818,409,0,1229,1232,7,5,0,0,1230,1233,3,818,409,0,1231,1233,5,53,
        0,0,1232,1230,1,0,0,0,1232,1231,1,0,0,0,1233,1245,1,0,0,0,1234,1235,
        5,333,0,0,1235,1236,3,818,409,0,1236,1237,5,64,0,0,1237,1238,5,434,
        0,0,1238,1245,1,0,0,0,1239,1242,5,313,0,0,1240,1243,3,818,409,0,
        1241,1243,5,30,0,0,1242,1240,1,0,0,0,1242,1241,1,0,0,0,1243,1245,
        1,0,0,0,1244,1202,1,0,0,0,1244,1203,1,0,0,0,1244,1204,1,0,0,0,1244,
        1206,1,0,0,0,1244,1219,1,0,0,0,1244,1221,1,0,0,0,1244,1223,1,0,0,
        0,1244,1225,1,0,0,0,1244,1227,1,0,0,0,1244,1234,1,0,0,0,1244,1239,
        1,0,0,0,1245,25,1,0,0,0,1246,1247,5,46,0,0,1247,1248,5,66,0,0,1248,
        1250,3,814,407,0,1249,1251,5,105,0,0,1250,1249,1,0,0,0,1250,1251,
        1,0,0,0,1251,1255,1,0,0,0,1252,1254,3,12,6,0,1253,1252,1,0,0,0,1254,
        1257,1,0,0,0,1255,1253,1,0,0,0,1255,1256,1,0,0,0,1256,27,1,0,0,0,
        1257,1255,1,0,0,0,1258,1259,5,138,0,0,1259,1260,5,66,0,0,1260,1261,
        3,814,407,0,1261,1262,7,6,0,0,1262,1263,5,99,0,0,1263,1264,3,816,
        408,0,1264,29,1,0,0,0,1265,1266,5,46,0,0,1266,1268,5,323,0,0,1267,
        1269,3,294,147,0,1268,1267,1,0,0,0,1268,1269,1,0,0,0,1269,1276,1,
        0,0,0,1270,1272,3,32,16,0,1271,1270,1,0,0,0,1271,1272,1,0,0,0,1272,
        1273,1,0,0,0,1273,1274,5,106,0,0,1274,1277,3,814,407,0,1275,1277,
        3,32,16,0,1276,1271,1,0,0,0,1276,1275,1,0,0,0,1277,1281,1,0,0,0,
        1278,1280,3,34,17,0,1279,1278,1,0,0,0,1280,1283,1,0,0,0,1281,1279,
        1,0,0,0,1281,1282,1,0,0,0,1282,31,1,0,0,0,1283,1281,1,0,0,0,1284,
        1285,3,316,158,0,1285,33,1,0,0,0,1286,1293,3,120,60,0,1287,1293,
        3,358,179,0,1288,1293,3,196,98,0,1289,1293,3,256,128,0,1290,1293,
        3,334,167,0,1291,1293,3,476,238,0,1292,1286,1,0,0,0,1292,1287,1,
        0,0,0,1292,1288,1,0,0,0,1292,1289,1,0,0,0,1292,1290,1,0,0,0,1292,
        1291,1,0,0,0,1293,35,1,0,0,0,1294,1296,5,333,0,0,1295,1297,7,7,0,
        0,1296,1295,1,0,0,0,1296,1297,1,0,0,0,1297,1298,1,0,0,0,1298,1299,
        3,38,19,0,1299,37,1,0,0,0,1300,1301,5,356,0,0,1301,1309,3,474,237,
        0,1302,1303,5,332,0,0,1303,1304,5,154,0,0,1304,1305,5,36,0,0,1305,
        1306,5,356,0,0,1306,1309,3,474,237,0,1307,1309,3,42,21,0,1308,1300,
        1,0,0,0,1308,1302,1,0,0,0,1308,1307,1,0,0,0,1309,39,1,0,0,0,1310,
        1313,5,30,0,0,1311,1313,3,44,22,0,1312,1310,1,0,0,0,1312,1311,1,
        0,0,0,1313,1315,1,0,0,0,1314,1316,7,5,0,0,1315,1314,1,0,0,0,1315,
        1316,1,0,0,0,1316,1319,1,0,0,0,1317,1320,5,53,0,0,1318,1320,3,46,
        23,0,1319,1317,1,0,0,0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,
        41,1,0,0,0,1321,1322,5,418,0,0,1322,1323,5,386,0,0,1323,1350,3,56,
        28,0,1324,1325,5,152,0,0,1325,1350,3,808,404,0,1326,1327,5,323,0,
        0,1327,1350,3,790,395,0,1328,1331,5,267,0,0,1329,1332,3,808,404,
        0,1330,1332,5,53,0,0,1331,1329,1,0,0,0,1331,1330,1,0,0,0,1331,1332,
        1,0,0,0,1332,1350,1,0,0,0,1333,1334,5,318,0,0,1334,1350,3,58,29,
        0,1335,1336,5,332,0,0,1336,1337,5,106,0,0,1337,1350,3,58,29,0,1338,
        1339,5,383,0,0,1339,1340,5,279,0,0,1340,1350,3,696,348,0,1341,1342,
        5,356,0,0,1342,1343,5,337,0,0,1343,1350,3,808,404,0,1344,1345,3,
        44,22,0,1345,1346,5,64,0,0,1346,1347,5,434,0,0,1347,1350,1,0,0,0,
        1348,1350,3,40,20,0,1349,1321,1,0,0,0,1349,1324,1,0,0,0,1349,1326,
        1,0,0,0,1349,1328,1,0,0,0,1349,1333,1,0,0,0,1349,1335,1,0,0,0,1349,
        1338,1,0,0,0,1349,1341,1,0,0,0,1349,1344,1,0,0,0,1349,1348,1,0,0,
        0,1350,43,1,0,0,0,1351,1356,3,818,409,0,1352,1353,5,11,0,0,1353,
        1355,3,818,409,0,1354,1352,1,0,0,0,1355,1358,1,0,0,0,1356,1354,1,
        0,0,0,1356,1357,1,0,0,0,1357,45,1,0,0,0,1358,1356,1,0,0,0,1359,1364,
        3,48,24,0,1360,1361,5,6,0,0,1361,1363,3,48,24,0,1362,1360,1,0,0,
        0,1363,1366,1,0,0,0,1364,1362,1,0,0,0,1364,1365,1,0,0,0,1365,47,
        1,0,0,0,1366,1364,1,0,0,0,1367,1370,3,54,27,0,1368,1370,3,202,101,
        0,1369,1367,1,0,0,0,1369,1368,1,0,0,0,1370,49,1,0,0,0,1371,1372,
        5,300,0,0,1372,1377,7,8,0,0,1373,1374,5,310,0,0,1374,1377,5,300,
        0,0,1375,1377,5,330,0,0,1376,1371,1,0,0,0,1376,1373,1,0,0,0,1376,
        1375,1,0,0,0,1377,51,1,0,0,0,1378,1385,5,96,0,0,1379,1385,5,60,0,
        0,1380,1385,5,80,0,0,1381,1385,3,800,400,0,1382,1385,3,832,416,0,
        1383,1385,3,808,404,0,1384,1378,1,0,0,0,1384,1379,1,0,0,0,1384,1380,
        1,0,0,0,1384,1381,1,0,0,0,1384,1382,1,0,0,0,1384,1383,1,0,0,0,1385,
        53,1,0,0,0,1386,1391,5,96,0,0,1387,1391,5,60,0,0,1388,1391,5,80,
        0,0,1389,1391,3,58,29,0,1390,1386,1,0,0,0,1390,1387,1,0,0,0,1390,
        1388,1,0,0,0,1390,1389,1,0,0,0,1391,55,1,0,0,0,1392,1407,3,808,404,
        0,1393,1407,5,53,0,0,1394,1407,3,826,413,0,1395,1396,5,403,0,0,1396,
        1398,3,808,404,0,1397,1399,3,668,334,0,1398,1397,1,0,0,0,1398,1399,
        1,0,0,0,1399,1407,1,0,0,0,1400,1401,5,403,0,0,1401,1402,3,660,330,
        0,1402,1403,3,808,404,0,1403,1407,1,0,0,0,1404,1407,3,202,101,0,
        1405,1407,5,254,0,0,1406,1392,1,0,0,0,1406,1393,1,0,0,0,1406,1394,
        1,0,0,0,1406,1395,1,0,0,0,1406,1400,1,0,0,0,1406,1404,1,0,0,0,1406,
        1405,1,0,0,0,1407,57,1,0,0,0,1408,1411,3,822,411,0,1409,1411,3,808,
        404,0,1410,1408,1,0,0,0,1410,1409,1,0,0,0,1411,59,1,0,0,0,1412,1413,
        5,313,0,0,1413,1414,3,62,31,0,1414,61,1,0,0,0,1415,1416,5,418,0,
        0,1416,1425,5,386,0,0,1417,1418,5,356,0,0,1418,1419,5,244,0,0,1419,
        1425,5,251,0,0,1420,1421,5,332,0,0,1421,1425,5,106,0,0,1422,1425,
        5,30,0,0,1423,1425,3,44,22,0,1424,1415,1,0,0,0,1424,1417,1,0,0,0,
        1424,1420,1,0,0,0,1424,1422,1,0,0,0,1424,1423,1,0,0,0,1425,63,1,
        0,0,0,1426,1427,5,333,0,0,1427,1430,3,38,19,0,1428,1430,3,60,30,
        0,1429,1426,1,0,0,0,1429,1428,1,0,0,0,1430,65,1,0,0,0,1431,1432,
        5,333,0,0,1432,1435,3,42,21,0,1433,1435,3,60,30,0,1434,1431,1,0,
        0,0,1434,1433,1,0,0,0,1435,67,1,0,0,0,1436,1446,5,335,0,0,1437,1447,
        3,44,22,0,1438,1439,5,418,0,0,1439,1447,5,386,0,0,1440,1441,5,356,
        0,0,1441,1442,5,244,0,0,1442,1447,5,251,0,0,1443,1444,5,332,0,0,
        1444,1447,5,106,0,0,1445,1447,5,30,0,0,1446,1437,1,0,0,0,1446,1438,
        1,0,0,0,1446,1440,1,0,0,0,1446,1443,1,0,0,0,1446,1445,1,0,0,0,1447,
        69,1,0,0,0,1448,1449,5,333,0,0,1449,1452,5,165,0,0,1450,1453,5,30,
        0,0,1451,1453,3,760,380,0,1452,1450,1,0,0,0,1452,1451,1,0,0,0,1453,
        1454,1,0,0,0,1454,1455,7,9,0,0,1455,71,1,0,0,0,1456,1457,5,155,0,
        0,1457,73,1,0,0,0,1458,1459,5,187,0,0,1459,1460,7,10,0,0,1460,75,
        1,0,0,0,1461,1462,5,138,0,0,1462,1464,5,92,0,0,1463,1465,3,422,211,
        0,1464,1463,1,0,0,0,1464,1465,1,0,0,0,1465,1466,1,0,0,0,1466,1469,
        3,624,312,0,1467,1470,3,78,39,0,1468,1470,3,88,44,0,1469,1467,1,
        0,0,0,1469,1468,1,0,0,0,1470,1583,1,0,0,0,1471,1472,5,138,0,0,1472,
        1473,5,92,0,0,1473,1474,5,30,0,0,1474,1475,5,68,0,0,1475,1479,3,
        176,88,0,1476,1477,5,281,0,0,1477,1478,5,147,0,0,1478,1480,3,816,
        408,0,1479,1476,1,0,0,0,1479,1480,1,0,0,0,1480,1481,1,0,0,0,1481,
        1482,5,333,0,0,1482,1483,5,351,0,0,1483,1485,3,768,384,0,1484,1486,
        5,272,0,0,1485,1484,1,0,0,0,1485,1486,1,0,0,0,1486,1583,1,0,0,0,
        1487,1488,5,138,0,0,1488,1490,5,92,0,0,1489,1491,3,422,211,0,1490,
        1489,1,0,0,0,1490,1491,1,0,0,0,1491,1492,1,0,0,0,1492,1493,3,774,
        387,0,1493,1498,3,90,45,0,1494,1495,5,62,0,0,1495,1496,5,422,0,0,
        1496,1499,3,80,40,0,1497,1499,5,53,0,0,1498,1494,1,0,0,0,1498,1497,
        1,0,0,0,1499,1583,1,0,0,0,1500,1501,5,138,0,0,1501,1503,5,92,0,0,
        1502,1504,3,422,211,0,1503,1502,1,0,0,0,1503,1504,1,0,0,0,1504,1505,
        1,0,0,0,1505,1506,3,774,387,0,1506,1507,5,436,0,0,1507,1508,5,285,
        0,0,1508,1510,3,780,390,0,1509,1511,7,11,0,0,1510,1509,1,0,0,0,1510,
        1511,1,0,0,0,1511,1583,1,0,0,0,1512,1513,5,138,0,0,1513,1515,5,226,
        0,0,1514,1516,3,422,211,0,1515,1514,1,0,0,0,1515,1516,1,0,0,0,1516,
        1517,1,0,0,0,1517,1520,3,780,390,0,1518,1521,3,78,39,0,1519,1521,
        3,90,45,0,1520,1518,1,0,0,0,1520,1519,1,0,0,0,1521,1583,1,0,0,0,
        1522,1523,5,138,0,0,1523,1524,5,226,0,0,1524,1525,5,30,0,0,1525,
        1526,5,68,0,0,1526,1530,3,176,88,0,1527,1528,5,281,0,0,1528,1529,
        5,147,0,0,1529,1531,3,816,408,0,1530,1527,1,0,0,0,1530,1531,1,0,
        0,0,1531,1532,1,0,0,0,1532,1533,5,333,0,0,1533,1535,3,176,88,0,1534,
        1536,5,272,0,0,1535,1534,1,0,0,0,1535,1536,1,0,0,0,1536,1583,1,0,
        0,0,1537,1538,5,138,0,0,1538,1540,5,328,0,0,1539,1541,3,422,211,
        0,1540,1539,1,0,0,0,1540,1541,1,0,0,0,1541,1542,1,0,0,0,1542,1543,
        3,780,390,0,1543,1544,3,78,39,0,1544,1583,1,0,0,0,1545,1547,5,138,
        0,0,1546,1548,5,259,0,0,1547,1546,1,0,0,0,1547,1548,1,0,0,0,1548,
        1549,1,0,0,0,1549,1551,5,376,0,0,1550,1552,3,422,211,0,1551,1550,
        1,0,0,0,1551,1552,1,0,0,0,1552,1553,1,0,0,0,1553,1554,3,778,389,
        0,1554,1555,3,78,39,0,1555,1583,1,0,0,0,1556,1557,5,138,0,0,1557,
        1558,5,259,0,0,1558,1559,5,376,0,0,1559,1560,5,30,0,0,1560,1561,
        5,68,0,0,1561,1565,3,176,88,0,1562,1563,5,281,0,0,1563,1564,5,147,
        0,0,1564,1566,3,816,408,0,1565,1562,1,0,0,0,1565,1566,1,0,0,0,1566,
        1567,1,0,0,0,1567,1568,5,333,0,0,1568,1569,5,351,0,0,1569,1571,3,
        768,384,0,1570,1572,5,272,0,0,1571,1570,1,0,0,0,1571,1572,1,0,0,
        0,1572,1583,1,0,0,0,1573,1574,5,138,0,0,1574,1575,5,63,0,0,1575,
        1577,5,92,0,0,1576,1578,3,422,211,0,1577,1576,1,0,0,0,1577,1578,
        1,0,0,0,1578,1579,1,0,0,0,1579,1580,3,624,312,0,1580,1581,3,78,39,
        0,1581,1583,1,0,0,0,1582,1461,1,0,0,0,1582,1471,1,0,0,0,1582,1487,
        1,0,0,0,1582,1500,1,0,0,0,1582,1512,1,0,0,0,1582,1522,1,0,0,0,1582,
        1537,1,0,0,0,1582,1545,1,0,0,0,1582,1556,1,0,0,0,1582,1573,1,0,0,
        0,1583,77,1,0,0,0,1584,1589,3,92,46,0,1585,1586,5,6,0,0,1586,1588,
        3,92,46,0,1587,1585,1,0,0,0,1588,1591,1,0,0,0,1589,1587,1,0,0,0,
        1589,1590,1,0,0,0,1590,79,1,0,0,0,1591,1589,1,0,0,0,1592,1593,5,
        68,0,0,1593,1602,3,534,267,0,1594,1595,5,64,0,0,1595,1596,3,82,41,
        0,1596,1597,5,94,0,0,1597,1598,3,82,41,0,1598,1602,1,0,0,0,1599,
        1600,5,105,0,0,1600,1602,3,86,43,0,1601,1592,1,0,0,0,1601,1594,1,
        0,0,0,1601,1599,1,0,0,0,1602,81,1,0,0,0,1603,1604,5,2,0,0,1604,1609,
        3,84,42,0,1605,1606,5,6,0,0,1606,1608,3,84,42,0,1607,1605,1,0,0,
        0,1608,1611,1,0,0,0,1609,1607,1,0,0,0,1609,1610,1,0,0,0,1610,1612,
        1,0,0,0,1611,1609,1,0,0,0,1612,1613,5,3,0,0,1613,83,1,0,0,0,1614,
        1618,3,534,267,0,1615,1618,5,262,0,0,1616,1618,5,260,0,0,1617,1614,
        1,0,0,0,1617,1615,1,0,0,0,1617,1616,1,0,0,0,1618,85,1,0,0,0,1619,
        1620,5,2,0,0,1620,1621,5,533,0,0,1621,1622,3,202,101,0,1622,1623,
        5,6,0,0,1623,1624,5,534,0,0,1624,1625,3,202,101,0,1625,1626,5,3,
        0,0,1626,87,1,0,0,0,1627,1628,3,90,45,0,1628,1629,3,106,53,0,1629,
        1634,1,0,0,0,1630,1631,5,436,0,0,1631,1632,5,285,0,0,1632,1634,3,
        780,390,0,1633,1627,1,0,0,0,1633,1630,1,0,0,0,1634,89,1,0,0,0,1635,
        1636,5,435,0,0,1636,1637,5,285,0,0,1637,1638,3,780,390,0,1638,91,
        1,0,0,0,1639,1642,5,133,0,0,1640,1641,5,45,0,0,1641,1643,3,818,409,
        0,1642,1640,1,0,0,0,1642,1643,1,0,0,0,1643,1644,1,0,0,0,1644,1873,
        3,142,71,0,1645,1646,5,138,0,0,1646,1647,5,45,0,0,1647,1651,3,818,
        409,0,1648,1650,3,272,136,0,1649,1648,1,0,0,0,1650,1653,1,0,0,0,
        1651,1649,1,0,0,0,1651,1652,1,0,0,0,1652,1873,1,0,0,0,1653,1651,
        1,0,0,0,1654,1655,5,372,0,0,1655,1656,5,45,0,0,1656,1873,3,818,409,
        0,1657,1658,5,191,0,0,1658,1660,5,45,0,0,1659,1661,3,422,211,0,1660,
        1659,1,0,0,0,1660,1661,1,0,0,0,1661,1662,1,0,0,0,1662,1664,3,818,
        409,0,1663,1665,3,96,48,0,1664,1663,1,0,0,0,1664,1665,1,0,0,0,1665,
        1873,1,0,0,0,1666,1667,5,333,0,0,1667,1668,5,379,0,0,1668,1873,7,
        12,0,0,1669,1670,5,158,0,0,1670,1671,5,80,0,0,1671,1873,3,818,409,
        0,1672,1673,5,333,0,0,1673,1873,7,13,0,0,1674,1676,5,193,0,0,1675,
        1677,7,14,0,0,1676,1675,1,0,0,0,1676,1677,1,0,0,0,1677,1678,1,0,
        0,0,1678,1873,5,357,0,0,1679,1680,5,186,0,0,1680,1684,5,357,0,0,
        1681,1685,5,30,0,0,1682,1685,5,99,0,0,1683,1685,3,818,409,0,1684,
        1681,1,0,0,0,1684,1682,1,0,0,0,1684,1683,1,0,0,0,1685,1873,1,0,0,
        0,1686,1687,5,193,0,0,1687,1688,7,14,0,0,1688,1689,5,321,0,0,1689,
        1873,3,818,409,0,1690,1691,5,186,0,0,1691,1692,5,321,0,0,1692,1873,
        3,818,409,0,1693,1695,5,269,0,0,1694,1693,1,0,0,0,1694,1695,1,0,
        0,0,1695,1696,1,0,0,0,1696,1697,5,228,0,0,1697,1873,3,780,390,0,
        1698,1699,5,275,0,0,1699,1873,3,316,158,0,1700,1701,5,77,0,0,1701,
        1873,5,275,0,0,1702,1703,5,282,0,0,1703,1704,5,94,0,0,1704,1873,
        3,814,407,0,1705,1706,5,333,0,0,1706,1707,5,351,0,0,1707,1873,3,
        768,384,0,1708,1709,5,312,0,0,1709,1714,5,219,0,0,1710,1715,5,270,
        0,0,1711,1715,5,113,0,0,1712,1715,5,53,0,0,1713,1715,3,180,90,0,
        1714,1710,1,0,0,0,1714,1711,1,0,0,0,1714,1712,1,0,0,0,1714,1713,
        1,0,0,0,1715,1873,1,0,0,0,1716,1723,5,193,0,0,1717,1723,5,186,0,
        0,1718,1720,5,269,0,0,1719,1718,1,0,0,0,1719,1720,1,0,0,0,1720,1721,
        1,0,0,0,1721,1723,5,209,0,0,1722,1716,1,0,0,0,1722,1717,1,0,0,0,
        1722,1719,1,0,0,0,1723,1724,1,0,0,0,1724,1725,5,414,0,0,1725,1726,
        5,251,0,0,1726,1873,5,327,0,0,1727,1729,5,191,0,0,1728,1730,5,44,
        0,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1732,1,0,0,0,1731,1733,
        3,422,211,0,1732,1731,1,0,0,0,1732,1733,1,0,0,0,1733,1734,1,0,0,
        0,1734,1736,3,800,400,0,1735,1737,3,96,48,0,1736,1735,1,0,0,0,1736,
        1737,1,0,0,0,1737,1873,1,0,0,0,1738,1740,5,133,0,0,1739,1741,5,44,
        0,0,1740,1739,1,0,0,0,1740,1741,1,0,0,0,1741,1743,1,0,0,0,1742,1744,
        3,294,147,0,1743,1742,1,0,0,0,1743,1744,1,0,0,0,1744,1745,1,0,0,
        0,1745,1873,3,132,66,0,1746,1748,5,138,0,0,1747,1749,5,44,0,0,1748,
        1747,1,0,0,0,1748,1749,1,0,0,0,1749,1750,1,0,0,0,1750,1753,3,800,
        400,0,1751,1754,3,94,47,0,1752,1754,3,222,111,0,1753,1751,1,0,0,
        0,1753,1752,1,0,0,0,1754,1873,1,0,0,0,1755,1757,5,138,0,0,1756,1758,
        5,44,0,0,1757,1756,1,0,0,0,1757,1758,1,0,0,0,1758,1759,1,0,0,0,1759,
        1760,3,800,400,0,1760,1761,7,15,0,0,1761,1762,5,77,0,0,1762,1763,
        5,78,0,0,1763,1873,1,0,0,0,1764,1766,5,138,0,0,1765,1767,5,44,0,
        0,1766,1765,1,0,0,0,1766,1767,1,0,0,0,1767,1768,1,0,0,0,1768,1769,
        3,800,400,0,1769,1770,5,191,0,0,1770,1772,5,437,0,0,1771,1773,3,
        422,211,0,1772,1771,1,0,0,0,1772,1773,1,0,0,0,1773,1873,1,0,0,0,
        1774,1776,5,138,0,0,1775,1777,5,44,0,0,1776,1775,1,0,0,0,1776,1777,
        1,0,0,0,1777,1778,1,0,0,0,1778,1779,3,800,400,0,1779,1780,5,333,
        0,0,1780,1781,5,342,0,0,1781,1782,3,812,406,0,1782,1873,1,0,0,0,
        1783,1785,5,138,0,0,1784,1786,5,44,0,0,1785,1784,1,0,0,0,1785,1786,
        1,0,0,0,1786,1787,1,0,0,0,1787,1789,3,800,400,0,1788,1783,1,0,0,
        0,1788,1789,1,0,0,0,1789,1790,1,0,0,0,1790,1791,7,16,0,0,1791,1873,
        3,100,50,0,1792,1794,5,138,0,0,1793,1795,5,44,0,0,1794,1793,1,0,
        0,0,1794,1795,1,0,0,0,1795,1796,1,0,0,0,1796,1797,3,800,400,0,1797,
        1798,5,333,0,0,1798,1799,5,345,0,0,1799,1800,3,818,409,0,1800,1873,
        1,0,0,0,1801,1803,5,138,0,0,1802,1804,5,44,0,0,1803,1802,1,0,0,0,
        1803,1804,1,0,0,0,1804,1805,1,0,0,0,1805,1806,3,800,400,0,1806,1807,
        5,133,0,0,1807,1808,5,438,0,0,1808,1809,3,138,69,0,1809,1810,5,36,
        0,0,1810,1819,5,219,0,0,1811,1813,5,2,0,0,1812,1814,3,200,100,0,
        1813,1812,1,0,0,0,1814,1815,1,0,0,0,1815,1813,1,0,0,0,1815,1816,
        1,0,0,0,1816,1817,1,0,0,0,1817,1818,5,3,0,0,1818,1820,1,0,0,0,1819,
        1811,1,0,0,0,1819,1820,1,0,0,0,1820,1873,1,0,0,0,1821,1823,5,138,
        0,0,1822,1824,5,44,0,0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,
        1825,1,0,0,0,1825,1839,3,800,400,0,1826,1831,5,314,0,0,1827,1829,
        5,105,0,0,1828,1827,1,0,0,0,1828,1829,1,0,0,0,1829,1830,1,0,0,0,
        1830,1832,3,202,101,0,1831,1828,1,0,0,0,1831,1832,1,0,0,0,1832,1840,
        1,0,0,0,1833,1837,5,333,0,0,1834,1838,3,200,100,0,1835,1836,5,438,
        0,0,1836,1838,3,138,69,0,1837,1834,1,0,0,0,1837,1835,1,0,0,0,1838,
        1840,1,0,0,0,1839,1826,1,0,0,0,1839,1833,1,0,0,0,1840,1841,1,0,0,
        0,1841,1839,1,0,0,0,1841,1842,1,0,0,0,1842,1873,1,0,0,0,1843,1845,
        5,138,0,0,1844,1846,5,44,0,0,1845,1844,1,0,0,0,1845,1846,1,0,0,0,
        1846,1847,1,0,0,0,1847,1848,3,800,400,0,1848,1849,5,191,0,0,1849,
        1851,5,219,0,0,1850,1852,3,422,211,0,1851,1850,1,0,0,0,1851,1852,
        1,0,0,0,1852,1873,1,0,0,0,1853,1855,5,138,0,0,1854,1856,5,44,0,0,
        1855,1854,1,0,0,0,1855,1856,1,0,0,0,1856,1857,1,0,0,0,1857,1860,
        3,800,400,0,1858,1859,5,333,0,0,1859,1861,5,174,0,0,1860,1858,1,
        0,0,0,1860,1861,1,0,0,0,1861,1862,1,0,0,0,1862,1863,5,360,0,0,1863,
        1865,3,652,326,0,1864,1866,3,98,49,0,1865,1864,1,0,0,0,1865,1866,
        1,0,0,0,1866,1869,1,0,0,0,1867,1868,5,100,0,0,1868,1870,3,674,337,
        0,1869,1867,1,0,0,0,1869,1870,1,0,0,0,1870,1873,1,0,0,0,1871,1873,
        3,222,111,0,1872,1639,1,0,0,0,1872,1645,1,0,0,0,1872,1654,1,0,0,
        0,1872,1657,1,0,0,0,1872,1666,1,0,0,0,1872,1669,1,0,0,0,1872,1672,
        1,0,0,0,1872,1674,1,0,0,0,1872,1679,1,0,0,0,1872,1686,1,0,0,0,1872,
        1690,1,0,0,0,1872,1694,1,0,0,0,1872,1698,1,0,0,0,1872,1700,1,0,0,
        0,1872,1702,1,0,0,0,1872,1705,1,0,0,0,1872,1708,1,0,0,0,1872,1722,
        1,0,0,0,1872,1727,1,0,0,0,1872,1738,1,0,0,0,1872,1746,1,0,0,0,1872,
        1755,1,0,0,0,1872,1764,1,0,0,0,1872,1774,1,0,0,0,1872,1788,1,0,0,
        0,1872,1792,1,0,0,0,1872,1801,1,0,0,0,1872,1821,1,0,0,0,1872,1843,
        1,0,0,0,1872,1853,1,0,0,0,1872,1871,1,0,0,0,1873,93,1,0,0,0,1874,
        1875,5,333,0,0,1875,1876,5,53,0,0,1876,1880,3,674,337,0,1877,1878,
        5,191,0,0,1878,1880,5,53,0,0,1879,1874,1,0,0,0,1879,1877,1,0,0,0,
        1880,95,1,0,0,0,1881,1882,7,17,0,0,1882,97,1,0,0,0,1883,1884,5,43,
        0,0,1884,1885,3,316,158,0,1885,99,1,0,0,0,1886,1887,5,2,0,0,1887,
        1892,3,104,52,0,1888,1889,5,6,0,0,1889,1891,3,104,52,0,1890,1888,
        1,0,0,0,1891,1894,1,0,0,0,1892,1890,1,0,0,0,1892,1893,1,0,0,0,1893,
        1895,1,0,0,0,1894,1892,1,0,0,0,1895,1896,5,3,0,0,1896,101,1,0,0,
        0,1897,1898,5,105,0,0,1898,1899,3,100,50,0,1899,103,1,0,0,0,1900,
        1905,3,824,412,0,1901,1902,5,10,0,0,1902,1906,3,288,144,0,1903,1904,
        5,11,0,0,1904,1906,3,286,143,0,1905,1901,1,0,0,0,1905,1903,1,0,0,
        0,1905,1906,1,0,0,0,1906,105,1,0,0,0,1907,1908,5,62,0,0,1908,1909,
        5,422,0,0,1909,1910,5,105,0,0,1910,1911,5,2,0,0,1911,1912,3,822,
        411,0,1912,1919,5,571,0,0,1913,1914,5,6,0,0,1914,1915,3,822,411,
        0,1915,1916,5,571,0,0,1916,1918,1,0,0,0,1917,1913,1,0,0,0,1918,1921,
        1,0,0,0,1919,1917,1,0,0,0,1919,1920,1,0,0,0,1920,1922,1,0,0,0,1921,
        1919,1,0,0,0,1922,1923,5,3,0,0,1923,1937,1,0,0,0,1924,1925,5,62,
        0,0,1925,1926,5,422,0,0,1926,1927,5,68,0,0,1927,1937,3,534,267,0,
        1928,1929,5,62,0,0,1929,1930,5,422,0,0,1930,1931,5,64,0,0,1931,1932,
        3,534,267,0,1932,1933,5,94,0,0,1933,1934,3,534,267,0,1934,1937,1,
        0,0,0,1935,1937,5,53,0,0,1936,1907,1,0,0,0,1936,1924,1,0,0,0,1936,
        1928,1,0,0,0,1936,1935,1,0,0,0,1937,107,1,0,0,0,1938,1939,5,138,
        0,0,1939,1940,5,360,0,0,1940,1941,3,316,158,0,1941,1946,3,110,55,
        0,1942,1943,5,6,0,0,1943,1945,3,110,55,0,1944,1942,1,0,0,0,1945,
        1948,1,0,0,0,1946,1944,1,0,0,0,1946,1947,1,0,0,0,1947,109,1,0,0,
        0,1948,1946,1,0,0,0,1949,1950,5,133,0,0,1950,1951,5,143,0,0,1951,
        1953,3,644,322,0,1952,1954,3,96,48,0,1953,1952,1,0,0,0,1953,1954,
        1,0,0,0,1954,1980,1,0,0,0,1955,1956,5,191,0,0,1956,1958,5,143,0,
        0,1957,1959,3,422,211,0,1958,1957,1,0,0,0,1958,1959,1,0,0,0,1959,
        1960,1,0,0,0,1960,1962,3,818,409,0,1961,1963,3,96,48,0,1962,1961,
        1,0,0,0,1962,1963,1,0,0,0,1963,1980,1,0,0,0,1964,1965,5,138,0,0,
        1965,1966,5,143,0,0,1966,1969,3,818,409,0,1967,1968,5,333,0,0,1968,
        1970,5,174,0,0,1969,1967,1,0,0,0,1969,1970,1,0,0,0,1970,1971,1,0,
        0,0,1971,1972,5,360,0,0,1972,1974,3,652,326,0,1973,1975,3,98,49,
        0,1974,1973,1,0,0,0,1974,1975,1,0,0,0,1975,1977,1,0,0,0,1976,1978,
        3,96,48,0,1977,1976,1,0,0,0,1977,1978,1,0,0,0,1978,1980,1,0,0,0,
        1979,1949,1,0,0,0,1979,1955,1,0,0,0,1979,1964,1,0,0,0,1980,111,1,
        0,0,0,1981,1984,5,157,0,0,1982,1985,3,818,409,0,1983,1985,5,30,0,
        0,1984,1982,1,0,0,0,1984,1983,1,0,0,0,1985,113,1,0,0,0,1986,1988,
        5,169,0,0,1987,1989,5,107,0,0,1988,1987,1,0,0,0,1988,1989,1,0,0,
        0,1989,1990,1,0,0,0,1990,1992,3,774,387,0,1991,1993,3,144,72,0,1992,
        1991,1,0,0,0,1992,1993,1,0,0,0,1993,1994,1,0,0,0,1994,1996,7,18,
        0,0,1995,1997,5,297,0,0,1996,1995,1,0,0,0,1996,1997,1,0,0,0,1997,
        2001,1,0,0,0,1998,2002,3,808,404,0,1999,2002,5,343,0,0,2000,2002,
        5,344,0,0,2001,1998,1,0,0,0,2001,1999,1,0,0,0,2001,2000,1,0,0,0,
        2002,2008,1,0,0,0,2003,2005,5,100,0,0,2004,2003,1,0,0,0,2004,2005,
        1,0,0,0,2005,2006,1,0,0,0,2006,2007,5,184,0,0,2007,2009,3,808,404,
        0,2008,2004,1,0,0,0,2008,2009,1,0,0,0,2009,2011,1,0,0,0,2010,2012,
        5,105,0,0,2011,2010,1,0,0,0,2011,2012,1,0,0,0,2012,2013,1,0,0,0,
        2013,2015,3,116,58,0,2014,2016,3,638,319,0,2015,2014,1,0,0,0,2015,
        2016,1,0,0,0,2016,2036,1,0,0,0,2017,2018,5,169,0,0,2018,2019,5,2,
        0,0,2019,2020,3,530,265,0,2020,2021,5,3,0,0,2021,2023,5,94,0,0,2022,
        2024,5,297,0,0,2023,2022,1,0,0,0,2023,2024,1,0,0,0,2024,2028,1,0,
        0,0,2025,2029,3,808,404,0,2026,2029,5,343,0,0,2027,2029,5,344,0,
        0,2028,2025,1,0,0,0,2028,2026,1,0,0,0,2028,2027,1,0,0,0,2029,2031,
        1,0,0,0,2030,2032,5,105,0,0,2031,2030,1,0,0,0,2031,2032,1,0,0,0,
        2032,2033,1,0,0,0,2033,2034,3,116,58,0,2034,2036,1,0,0,0,2035,1986,
        1,0,0,0,2035,2017,1,0,0,0,2036,115,1,0,0,0,2037,2061,5,107,0,0,2038,
        2061,5,112,0,0,2039,2041,7,19,0,0,2040,2042,5,36,0,0,2041,2040,1,
        0,0,0,2041,2042,1,0,0,0,2042,2043,1,0,0,0,2043,2061,3,808,404,0,
        2044,2061,5,171,0,0,2045,2061,5,216,0,0,2046,2047,5,209,0,0,2047,
        2050,5,298,0,0,2048,2051,3,148,74,0,2049,2051,5,9,0,0,2050,2048,
        1,0,0,0,2050,2049,1,0,0,0,2051,2061,1,0,0,0,2052,2054,5,209,0,0,
        2053,2055,5,77,0,0,2054,2053,1,0,0,0,2054,2055,1,0,0,0,2055,2056,
        1,0,0,0,2056,2057,5,78,0,0,2057,2061,3,148,74,0,2058,2059,5,194,
        0,0,2059,2061,3,808,404,0,2060,2037,1,0,0,0,2060,2038,1,0,0,0,2060,
        2039,1,0,0,0,2060,2044,1,0,0,0,2060,2045,1,0,0,0,2060,2046,1,0,0,
        0,2060,2052,1,0,0,0,2060,2058,1,0,0,0,2061,2064,1,0,0,0,2062,2060,
        1,0,0,0,2062,2063,1,0,0,0,2063,2077,1,0,0,0,2064,2062,1,0,0,0,2065,
        2066,5,2,0,0,2066,2071,3,118,59,0,2067,2068,5,6,0,0,2068,2070,3,
        118,59,0,2069,2067,1,0,0,0,2070,2073,1,0,0,0,2071,2069,1,0,0,0,2071,
        2072,1,0,0,0,2072,2074,1,0,0,0,2073,2071,1,0,0,0,2074,2075,5,3,0,
        0,2075,2077,1,0,0,0,2076,2062,1,0,0,0,2076,2065,1,0,0,0,2077,117,
        1,0,0,0,2078,2093,3,824,412,0,2079,2094,3,54,27,0,2080,2094,3,202,
        101,0,2081,2094,5,9,0,0,2082,2083,5,2,0,0,2083,2088,3,52,26,0,2084,
        2085,5,6,0,0,2085,2087,3,52,26,0,2086,2084,1,0,0,0,2087,2090,1,0,
        0,0,2088,2086,1,0,0,0,2088,2089,1,0,0,0,2089,2091,1,0,0,0,2090,2088,
        1,0,0,0,2091,2092,5,3,0,0,2092,2094,1,0,0,0,2093,2079,1,0,0,0,2093,
        2080,1,0,0,0,2093,2081,1,0,0,0,2093,2082,1,0,0,0,2093,2094,1,0,0,
        0,2094,119,1,0,0,0,2095,2097,5,46,0,0,2096,2098,3,122,61,0,2097,
        2096,1,0,0,0,2097,2098,1,0,0,0,2098,2099,1,0,0,0,2099,2101,5,92,
        0,0,2100,2102,3,294,147,0,2101,2100,1,0,0,0,2101,2102,1,0,0,0,2102,
        2103,1,0,0,0,2103,2169,3,772,386,0,2104,2106,5,2,0,0,2105,2107,3,
        126,63,0,2106,2105,1,0,0,0,2106,2107,1,0,0,0,2107,2108,1,0,0,0,2108,
        2110,5,3,0,0,2109,2111,3,164,82,0,2110,2109,1,0,0,0,2110,2111,1,
        0,0,0,2111,2113,1,0,0,0,2112,2114,3,166,83,0,2113,2112,1,0,0,0,2113,
        2114,1,0,0,0,2114,2116,1,0,0,0,2115,2117,3,170,85,0,2116,2115,1,
        0,0,0,2116,2117,1,0,0,0,2117,2119,1,0,0,0,2118,2120,3,172,86,0,2119,
        2118,1,0,0,0,2119,2120,1,0,0,0,2120,2122,1,0,0,0,2121,2123,3,174,
        87,0,2122,2121,1,0,0,0,2122,2123,1,0,0,0,2123,2125,1,0,0,0,2124,
        2126,3,176,88,0,2125,2124,1,0,0,0,2125,2126,1,0,0,0,2126,2170,1,
        0,0,0,2127,2128,5,275,0,0,2128,2130,3,316,158,0,2129,2131,3,124,
        62,0,2130,2129,1,0,0,0,2130,2131,1,0,0,0,2131,2133,1,0,0,0,2132,
        2134,3,166,83,0,2133,2132,1,0,0,0,2133,2134,1,0,0,0,2134,2136,1,
        0,0,0,2135,2137,3,170,85,0,2136,2135,1,0,0,0,2136,2137,1,0,0,0,2137,
        2139,1,0,0,0,2138,2140,3,172,86,0,2139,2138,1,0,0,0,2139,2140,1,
        0,0,0,2140,2142,1,0,0,0,2141,2143,3,174,87,0,2142,2141,1,0,0,0,2142,
        2143,1,0,0,0,2143,2145,1,0,0,0,2144,2146,3,176,88,0,2145,2144,1,
        0,0,0,2145,2146,1,0,0,0,2146,2170,1,0,0,0,2147,2148,5,285,0,0,2148,
        2149,5,275,0,0,2149,2151,3,780,390,0,2150,2152,3,124,62,0,2151,2150,
        1,0,0,0,2151,2152,1,0,0,0,2152,2153,1,0,0,0,2153,2155,3,106,53,0,
        2154,2156,3,166,83,0,2155,2154,1,0,0,0,2155,2156,1,0,0,0,2156,2158,
        1,0,0,0,2157,2159,3,170,85,0,2158,2157,1,0,0,0,2158,2159,1,0,0,0,
        2159,2161,1,0,0,0,2160,2162,3,172,86,0,2161,2160,1,0,0,0,2161,2162,
        1,0,0,0,2162,2164,1,0,0,0,2163,2165,3,174,87,0,2164,2163,1,0,0,0,
        2164,2165,1,0,0,0,2165,2167,1,0,0,0,2166,2168,3,176,88,0,2167,2166,
        1,0,0,0,2167,2168,1,0,0,0,2168,2170,1,0,0,0,2169,2104,1,0,0,0,2169,
        2127,1,0,0,0,2169,2147,1,0,0,0,2170,121,1,0,0,0,2171,2177,5,354,
        0,0,2172,2177,5,352,0,0,2173,2174,7,20,0,0,2174,2177,7,21,0,0,2175,
        2177,5,367,0,0,2176,2171,1,0,0,0,2176,2172,1,0,0,0,2176,2173,1,0,
        0,0,2176,2175,1,0,0,0,2177,123,1,0,0,0,2178,2179,5,2,0,0,2179,2184,
        3,130,65,0,2180,2181,5,6,0,0,2181,2183,3,130,65,0,2182,2180,1,0,
        0,0,2183,2186,1,0,0,0,2184,2182,1,0,0,0,2184,2185,1,0,0,0,2185,2187,
        1,0,0,0,2186,2184,1,0,0,0,2187,2188,5,3,0,0,2188,125,1,0,0,0,2189,
        2194,3,128,64,0,2190,2191,5,6,0,0,2191,2193,3,128,64,0,2192,2190,
        1,0,0,0,2193,2196,1,0,0,0,2194,2192,1,0,0,0,2194,2195,1,0,0,0,2195,
        127,1,0,0,0,2196,2194,1,0,0,0,2197,2198,5,45,0,0,2198,2200,3,818,
        409,0,2199,2197,1,0,0,0,2199,2200,1,0,0,0,2200,2201,1,0,0,0,2201,
        2213,3,142,71,0,2202,2213,3,132,66,0,2203,2204,5,120,0,0,2204,2209,
        3,780,390,0,2205,2206,7,22,0,0,2206,2208,3,140,70,0,2207,2205,1,
        0,0,0,2208,2211,1,0,0,0,2209,2207,1,0,0,0,2209,2210,1,0,0,0,2210,
        2213,1,0,0,0,2211,2209,1,0,0,0,2212,2199,1,0,0,0,2212,2202,1,0,0,
        0,2212,2203,1,0,0,0,2213,129,1,0,0,0,2214,2217,3,802,401,0,2215,
        2216,5,105,0,0,2216,2218,5,280,0,0,2217,2215,1,0,0,0,2217,2218,1,
        0,0,0,2218,2222,1,0,0,0,2219,2221,3,134,67,0,2220,2219,1,0,0,0,2221,
        2224,1,0,0,0,2222,2220,1,0,0,0,2222,2223,1,0,0,0,2223,2231,1,0,0,
        0,2224,2222,1,0,0,0,2225,2226,5,45,0,0,2226,2228,3,818,409,0,2227,
        2225,1,0,0,0,2227,2228,1,0,0,0,2228,2229,1,0,0,0,2229,2231,3,142,
        71,0,2230,2214,1,0,0,0,2230,2227,1,0,0,0,2231,131,1,0,0,0,2232,2233,
        3,802,401,0,2233,2235,3,652,326,0,2234,2236,3,220,110,0,2235,2234,
        1,0,0,0,2235,2236,1,0,0,0,2236,2246,1,0,0,0,2237,2244,5,345,0,0,
        2238,2245,5,544,0,0,2239,2245,5,205,0,0,2240,2245,5,545,0,0,2241,
        2245,5,546,0,0,2242,2245,5,53,0,0,2243,2245,3,818,409,0,2244,2238,
        1,0,0,0,2244,2239,1,0,0,0,2244,2240,1,0,0,0,2244,2241,1,0,0,0,2244,
        2242,1,0,0,0,2244,2243,1,0,0,0,2245,2247,1,0,0,0,2246,2237,1,0,0,
        0,2246,2247,1,0,0,0,2247,2250,1,0,0,0,2248,2249,5,543,0,0,2249,2251,
        3,818,409,0,2250,2248,1,0,0,0,2250,2251,1,0,0,0,2251,2253,1,0,0,
        0,2252,2254,3,98,49,0,2253,2252,1,0,0,0,2253,2254,1,0,0,0,2254,2257,
        1,0,0,0,2255,2256,5,105,0,0,2256,2258,5,280,0,0,2257,2255,1,0,0,
        0,2257,2258,1,0,0,0,2258,2262,1,0,0,0,2259,2261,3,134,67,0,2260,
        2259,1,0,0,0,2261,2264,1,0,0,0,2262,2260,1,0,0,0,2262,2263,1,0,0,
        0,2263,133,1,0,0,0,2264,2262,1,0,0,0,2265,2266,5,45,0,0,2266,2268,
        3,818,409,0,2267,2265,1,0,0,0,2267,2268,1,0,0,0,2268,2269,1,0,0,
        0,2269,2274,3,136,68,0,2270,2272,5,77,0,0,2271,2270,1,0,0,0,2271,
        2272,1,0,0,0,2272,2273,1,0,0,0,2273,2275,5,54,0,0,2274,2271,1,0,
        0,0,2274,2275,1,0,0,0,2275,2278,1,0,0,0,2276,2277,5,69,0,0,2277,
        2279,7,9,0,0,2278,2276,1,0,0,0,2278,2279,1,0,0,0,2279,135,1,0,0,
        0,2280,2282,5,77,0,0,2281,2280,1,0,0,0,2281,2282,1,0,0,0,2282,2283,
        1,0,0,0,2283,2361,5,78,0,0,2284,2286,5,98,0,0,2285,2287,3,400,200,
        0,2286,2285,1,0,0,0,2286,2287,1,0,0,0,2287,2289,1,0,0,0,2288,2290,
        3,178,89,0,2289,2288,1,0,0,0,2289,2290,1,0,0,0,2290,2361,1,0,0,0,
        2291,2297,5,98,0,0,2292,2294,5,273,0,0,2293,2295,5,77,0,0,2294,2293,
        1,0,0,0,2294,2295,1,0,0,0,2295,2296,1,0,0,0,2296,2298,5,56,0,0,2297,
        2292,1,0,0,0,2297,2298,1,0,0,0,2298,2301,1,0,0,0,2299,2300,5,441,
        0,0,2300,2302,3,360,180,0,2301,2299,1,0,0,0,2301,2302,1,0,0,0,2302,
        2304,1,0,0,0,2303,2305,3,572,286,0,2304,2303,1,0,0,0,2304,2305,1,
        0,0,0,2305,2307,1,0,0,0,2306,2308,3,178,89,0,2307,2306,1,0,0,0,2307,
        2308,1,0,0,0,2308,2361,1,0,0,0,2309,2310,5,85,0,0,2310,2312,5,245,
        0,0,2311,2313,3,400,200,0,2312,2311,1,0,0,0,2312,2313,1,0,0,0,2313,
        2315,1,0,0,0,2314,2316,3,178,89,0,2315,2314,1,0,0,0,2315,2316,1,
        0,0,0,2316,2361,1,0,0,0,2317,2318,5,42,0,0,2318,2319,5,2,0,0,2319,
        2320,3,674,337,0,2320,2323,5,3,0,0,2321,2322,5,269,0,0,2322,2324,
        5,228,0,0,2323,2321,1,0,0,0,2323,2324,1,0,0,0,2324,2361,1,0,0,0,
        2325,2326,5,53,0,0,2326,2361,3,682,341,0,2327,2328,5,438,0,0,2328,
        2329,3,138,69,0,2329,2346,5,36,0,0,2330,2339,5,219,0,0,2331,2333,
        5,2,0,0,2332,2334,3,200,100,0,2333,2332,1,0,0,0,2334,2335,1,0,0,
        0,2335,2333,1,0,0,0,2335,2336,1,0,0,0,2336,2337,1,0,0,0,2337,2338,
        5,3,0,0,2338,2340,1,0,0,0,2339,2331,1,0,0,0,2339,2340,1,0,0,0,2340,
        2347,1,0,0,0,2341,2342,5,2,0,0,2342,2343,3,674,337,0,2343,2344,5,
        3,0,0,2344,2345,5,440,0,0,2345,2347,1,0,0,0,2346,2330,1,0,0,0,2346,
        2341,1,0,0,0,2347,2361,1,0,0,0,2348,2349,5,86,0,0,2349,2351,3,780,
        390,0,2350,2352,3,144,72,0,2351,2350,1,0,0,0,2351,2352,1,0,0,0,2352,
        2354,1,0,0,0,2353,2355,3,152,76,0,2354,2353,1,0,0,0,2354,2355,1,
        0,0,0,2355,2357,1,0,0,0,2356,2358,3,156,78,0,2357,2356,1,0,0,0,2357,
        2358,1,0,0,0,2358,2361,1,0,0,0,2359,2361,3,98,49,0,2360,2281,1,0,
        0,0,2360,2284,1,0,0,0,2360,2291,1,0,0,0,2360,2309,1,0,0,0,2360,2317,
        1,0,0,0,2360,2325,1,0,0,0,2360,2327,1,0,0,0,2360,2348,1,0,0,0,2360,
        2359,1,0,0,0,2361,137,1,0,0,0,2362,2366,5,139,0,0,2363,2364,5,147,
        0,0,2364,2366,5,53,0,0,2365,2362,1,0,0,0,2365,2363,1,0,0,0,2366,
        139,1,0,0,0,2367,2368,7,23,0,0,2368,141,1,0,0,0,2369,2370,5,42,0,
        0,2370,2371,5,2,0,0,2371,2372,3,674,337,0,2372,2376,5,3,0,0,2373,
        2375,3,272,136,0,2374,2373,1,0,0,0,2375,2378,1,0,0,0,2376,2374,1,
        0,0,0,2376,2377,1,0,0,0,2377,2466,1,0,0,0,2378,2376,1,0,0,0,2379,
        2383,5,98,0,0,2380,2381,5,85,0,0,2381,2383,5,245,0,0,2382,2379,1,
        0,0,0,2382,2380,1,0,0,0,2383,2407,1,0,0,0,2384,2386,3,144,72,0,2385,
        2387,3,150,75,0,2386,2385,1,0,0,0,2386,2387,1,0,0,0,2387,2389,1,
        0,0,0,2388,2390,3,400,200,0,2389,2388,1,0,0,0,2389,2390,1,0,0,0,
        2390,2392,1,0,0,0,2391,2393,3,178,89,0,2392,2391,1,0,0,0,2392,2393,
        1,0,0,0,2393,2397,1,0,0,0,2394,2396,3,272,136,0,2395,2394,1,0,0,
        0,2396,2399,1,0,0,0,2397,2395,1,0,0,0,2397,2398,1,0,0,0,2398,2408,
        1,0,0,0,2399,2397,1,0,0,0,2400,2404,3,180,90,0,2401,2403,3,272,136,
        0,2402,2401,1,0,0,0,2403,2406,1,0,0,0,2404,2402,1,0,0,0,2404,2405,
        1,0,0,0,2405,2408,1,0,0,0,2406,2404,1,0,0,0,2407,2384,1,0,0,0,2407,
        2400,1,0,0,0,2408,2466,1,0,0,0,2409,2411,5,199,0,0,2410,2412,3,170,
        85,0,2411,2410,1,0,0,0,2411,2412,1,0,0,0,2412,2413,1,0,0,0,2413,
        2414,5,2,0,0,2414,2419,3,154,77,0,2415,2416,5,6,0,0,2416,2418,3,
        154,77,0,2417,2415,1,0,0,0,2418,2421,1,0,0,0,2419,2417,1,0,0,0,2419,
        2420,1,0,0,0,2420,2422,1,0,0,0,2421,2419,1,0,0,0,2422,2424,5,3,0,
        0,2423,2425,3,150,75,0,2424,2423,1,0,0,0,2424,2425,1,0,0,0,2425,
        2427,1,0,0,0,2426,2428,3,400,200,0,2427,2426,1,0,0,0,2427,2428,1,
        0,0,0,2428,2430,1,0,0,0,2429,2431,3,178,89,0,2430,2429,1,0,0,0,2430,
        2431,1,0,0,0,2431,2437,1,0,0,0,2432,2433,5,103,0,0,2433,2434,5,2,
        0,0,2434,2435,3,674,337,0,2435,2436,5,3,0,0,2436,2438,1,0,0,0,2437,
        2432,1,0,0,0,2437,2438,1,0,0,0,2438,2442,1,0,0,0,2439,2441,3,272,
        136,0,2440,2439,1,0,0,0,2441,2444,1,0,0,0,2442,2440,1,0,0,0,2442,
        2443,1,0,0,0,2443,2466,1,0,0,0,2444,2442,1,0,0,0,2445,2446,5,63,
        0,0,2446,2447,5,245,0,0,2447,2448,3,144,72,0,2448,2449,5,86,0,0,
        2449,2451,3,780,390,0,2450,2452,3,144,72,0,2451,2450,1,0,0,0,2451,
        2452,1,0,0,0,2452,2454,1,0,0,0,2453,2455,3,152,76,0,2454,2453,1,
        0,0,0,2454,2455,1,0,0,0,2455,2457,1,0,0,0,2456,2458,3,156,78,0,2457,
        2456,1,0,0,0,2457,2458,1,0,0,0,2458,2462,1,0,0,0,2459,2461,3,272,
        136,0,2460,2459,1,0,0,0,2461,2464,1,0,0,0,2462,2460,1,0,0,0,2462,
        2463,1,0,0,0,2463,2466,1,0,0,0,2464,2462,1,0,0,0,2465,2369,1,0,0,
        0,2465,2382,1,0,0,0,2465,2409,1,0,0,0,2465,2445,1,0,0,0,2466,143,
        1,0,0,0,2467,2468,5,2,0,0,2468,2469,3,148,74,0,2469,2470,5,3,0,0,
        2470,145,1,0,0,0,2471,2472,5,2,0,0,2472,2477,3,802,401,0,2473,2474,
        5,6,0,0,2474,2476,3,802,401,0,2475,2473,1,0,0,0,2476,2479,1,0,0,
        0,2477,2475,1,0,0,0,2477,2478,1,0,0,0,2478,2480,1,0,0,0,2479,2477,
        1,0,0,0,2480,2481,5,3,0,0,2481,147,1,0,0,0,2482,2487,3,800,400,0,
        2483,2484,5,6,0,0,2484,2486,3,800,400,0,2485,2483,1,0,0,0,2486,2489,
        1,0,0,0,2487,2485,1,0,0,0,2487,2488,1,0,0,0,2488,149,1,0,0,0,2489,
        2487,1,0,0,0,2490,2491,5,441,0,0,2491,2492,3,144,72,0,2492,151,1,
        0,0,0,2493,2494,5,258,0,0,2494,2495,7,24,0,0,2495,153,1,0,0,0,2496,
        2497,3,362,181,0,2497,2504,5,105,0,0,2498,2505,3,414,207,0,2499,
        2500,5,278,0,0,2500,2501,5,2,0,0,2501,2502,3,414,207,0,2502,2503,
        5,3,0,0,2503,2505,1,0,0,0,2504,2498,1,0,0,0,2504,2499,1,0,0,0,2505,
        155,1,0,0,0,2506,2508,3,158,79,0,2507,2509,3,160,80,0,2508,2507,
        1,0,0,0,2508,2509,1,0,0,0,2509,2515,1,0,0,0,2510,2512,3,160,80,0,
        2511,2513,3,158,79,0,2512,2511,1,0,0,0,2512,2513,1,0,0,0,2513,2515,
        1,0,0,0,2514,2506,1,0,0,0,2514,2510,1,0,0,0,2515,157,1,0,0,0,2516,
        2517,5,80,0,0,2517,2518,5,369,0,0,2518,2519,3,162,81,0,2519,159,
        1,0,0,0,2520,2521,5,80,0,0,2521,2522,5,182,0,0,2522,2523,3,162,81,
        0,2523,161,1,0,0,0,2524,2525,5,269,0,0,2525,2534,5,132,0,0,2526,
        2534,5,315,0,0,2527,2534,5,150,0,0,2528,2529,5,333,0,0,2529,2531,
        7,25,0,0,2530,2532,3,148,74,0,2531,2530,1,0,0,0,2531,2532,1,0,0,
        0,2532,2534,1,0,0,0,2533,2524,1,0,0,0,2533,2526,1,0,0,0,2533,2527,
        1,0,0,0,2533,2528,1,0,0,0,2534,163,1,0,0,0,2535,2536,5,238,0,0,2536,
        2537,5,2,0,0,2537,2538,3,760,380,0,2538,2539,5,3,0,0,2539,165,1,
        0,0,0,2540,2541,5,285,0,0,2541,2542,5,147,0,0,2542,2543,3,818,409,
        0,2543,2544,5,2,0,0,2544,2549,3,168,84,0,2545,2546,5,6,0,0,2546,
        2548,3,168,84,0,2547,2545,1,0,0,0,2548,2551,1,0,0,0,2549,2547,1,
        0,0,0,2549,2550,1,0,0,0,2550,2552,1,0,0,0,2551,2549,1,0,0,0,2552,
        2553,5,3,0,0,2553,167,1,0,0,0,2554,2561,3,800,400,0,2555,2561,3,
        688,344,0,2556,2557,5,2,0,0,2557,2558,3,674,337,0,2558,2559,5,3,
        0,0,2559,2561,1,0,0,0,2560,2554,1,0,0,0,2560,2555,1,0,0,0,2560,2556,
        1,0,0,0,2561,2563,1,0,0,0,2562,2564,3,98,49,0,2563,2562,1,0,0,0,
        2563,2564,1,0,0,0,2564,2566,1,0,0,0,2565,2567,3,316,158,0,2566,2565,
        1,0,0,0,2566,2567,1,0,0,0,2567,169,1,0,0,0,2568,2569,5,100,0,0,2569,
        2570,3,818,409,0,2570,171,1,0,0,0,2571,2572,5,105,0,0,2572,2576,
        3,100,50,0,2573,2574,7,26,0,0,2574,2576,5,277,0,0,2575,2571,1,0,
        0,0,2575,2573,1,0,0,0,2576,173,1,0,0,0,2577,2578,5,80,0,0,2578,2584,
        5,161,0,0,2579,2585,5,191,0,0,2580,2581,5,182,0,0,2581,2585,5,320,
        0,0,2582,2583,5,292,0,0,2583,2585,5,320,0,0,2584,2579,1,0,0,0,2584,
        2580,1,0,0,0,2584,2582,1,0,0,0,2585,175,1,0,0,0,2586,2587,5,351,
        0,0,2587,2588,3,770,385,0,2588,177,1,0,0,0,2589,2590,5,100,0,0,2590,
        2591,5,226,0,0,2591,2592,3,176,88,0,2592,179,1,0,0,0,2593,2594,5,
        100,0,0,2594,2595,5,226,0,0,2595,2596,3,818,409,0,2596,181,1,0,0,
        0,2597,2598,5,46,0,0,2598,2603,5,342,0,0,2599,2601,3,294,147,0,2600,
        2599,1,0,0,0,2600,2601,1,0,0,0,2601,2602,1,0,0,0,2602,2604,3,316,
        158,0,2603,2600,1,0,0,0,2603,2604,1,0,0,0,2604,2606,1,0,0,0,2605,
        2607,3,144,72,0,2606,2605,1,0,0,0,2606,2607,1,0,0,0,2607,2608,1,
        0,0,0,2608,2618,5,80,0,0,2609,2614,3,732,366,0,2610,2611,5,6,0,0,
        2611,2613,3,732,366,0,2612,2610,1,0,0,0,2613,2616,1,0,0,0,2614,2612,
        1,0,0,0,2614,2615,1,0,0,0,2615,2619,1,0,0,0,2616,2614,1,0,0,0,2617,
        2619,3,730,365,0,2618,2609,1,0,0,0,2618,2617,1,0,0,0,2619,2620,1,
        0,0,0,2620,2621,3,610,305,0,2621,183,1,0,0,0,2622,2623,5,138,0,0,
        2623,2625,5,342,0,0,2624,2626,3,422,211,0,2625,2624,1,0,0,0,2625,
        2626,1,0,0,0,2626,2627,1,0,0,0,2627,2628,3,316,158,0,2628,2629,5,
        333,0,0,2629,2630,5,342,0,0,2630,2631,3,812,406,0,2631,185,1,0,0,
        0,2632,2634,5,46,0,0,2633,2635,3,122,61,0,2634,2633,1,0,0,0,2634,
        2635,1,0,0,0,2635,2636,1,0,0,0,2636,2638,5,92,0,0,2637,2639,3,294,
        147,0,2638,2637,1,0,0,0,2638,2639,1,0,0,0,2639,2640,1,0,0,0,2640,
        2641,3,188,94,0,2641,2642,5,36,0,0,2642,2644,3,560,280,0,2643,2645,
        3,190,95,0,2644,2643,1,0,0,0,2644,2645,1,0,0,0,2645,187,1,0,0,0,
        2646,2648,3,772,386,0,2647,2649,3,146,73,0,2648,2647,1,0,0,0,2648,
        2649,1,0,0,0,2649,2651,1,0,0,0,2650,2652,3,170,85,0,2651,2650,1,
        0,0,0,2651,2652,1,0,0,0,2652,2654,1,0,0,0,2653,2655,3,172,86,0,2654,
        2653,1,0,0,0,2654,2655,1,0,0,0,2655,2657,1,0,0,0,2656,2658,3,174,
        87,0,2657,2656,1,0,0,0,2657,2658,1,0,0,0,2658,2660,1,0,0,0,2659,
        2661,3,176,88,0,2660,2659,1,0,0,0,2660,2661,1,0,0,0,2661,189,1,0,
        0,0,2662,2666,5,105,0,0,2663,2667,5,174,0,0,2664,2665,5,269,0,0,
        2665,2667,5,174,0,0,2666,2663,1,0,0,0,2666,2664,1,0,0,0,2667,191,
        1,0,0,0,2668,2670,5,46,0,0,2669,2671,5,367,0,0,2670,2669,1,0,0,0,
        2670,2671,1,0,0,0,2671,2672,1,0,0,0,2672,2673,5,259,0,0,2673,2675,
        5,376,0,0,2674,2676,3,294,147,0,2675,2674,1,0,0,0,2675,2676,1,0,
        0,0,2676,2677,1,0,0,0,2677,2679,3,776,388,0,2678,2680,3,146,73,0,
        2679,2678,1,0,0,0,2679,2680,1,0,0,0,2680,2682,1,0,0,0,2681,2683,
        3,170,85,0,2682,2681,1,0,0,0,2682,2683,1,0,0,0,2683,2685,1,0,0,0,
        2684,2686,3,102,51,0,2685,2684,1,0,0,0,2685,2686,1,0,0,0,2686,2688,
        1,0,0,0,2687,2689,3,176,88,0,2688,2687,1,0,0,0,2688,2689,1,0,0,0,
        2689,2690,1,0,0,0,2690,2691,5,36,0,0,2691,2693,3,560,280,0,2692,
        2694,3,190,95,0,2693,2692,1,0,0,0,2693,2694,1,0,0,0,2694,193,1,0,
        0,0,2695,2696,5,305,0,0,2696,2697,5,259,0,0,2697,2699,5,376,0,0,
        2698,2700,5,109,0,0,2699,2698,1,0,0,0,2699,2700,1,0,0,0,2700,2701,
        1,0,0,0,2701,2703,3,778,389,0,2702,2704,3,190,95,0,2703,2702,1,0,
        0,0,2703,2704,1,0,0,0,2704,195,1,0,0,0,2705,2707,5,46,0,0,2706,2708,
        3,122,61,0,2707,2706,1,0,0,0,2707,2708,1,0,0,0,2708,2709,1,0,0,0,
        2709,2711,5,328,0,0,2710,2712,3,294,147,0,2711,2710,1,0,0,0,2711,
        2712,1,0,0,0,2712,2713,1,0,0,0,2713,2719,3,780,390,0,2714,2716,3,
        200,100,0,2715,2714,1,0,0,0,2716,2717,1,0,0,0,2717,2715,1,0,0,0,
        2717,2718,1,0,0,0,2718,2720,1,0,0,0,2719,2715,1,0,0,0,2719,2720,
        1,0,0,0,2720,197,1,0,0,0,2721,2722,5,138,0,0,2722,2724,5,328,0,0,
        2723,2725,3,422,211,0,2724,2723,1,0,0,0,2724,2725,1,0,0,0,2725,2726,
        1,0,0,0,2726,2728,3,780,390,0,2727,2729,3,200,100,0,2728,2727,1,
        0,0,0,2729,2730,1,0,0,0,2730,2728,1,0,0,0,2730,2731,1,0,0,0,2731,
        199,1,0,0,0,2732,2733,5,36,0,0,2733,2766,3,654,327,0,2734,2736,5,
        148,0,0,2735,2737,3,202,101,0,2736,2735,1,0,0,0,2736,2737,1,0,0,
        0,2737,2766,1,0,0,0,2738,2740,5,225,0,0,2739,2741,5,147,0,0,2740,
        2739,1,0,0,0,2740,2741,1,0,0,0,2741,2742,1,0,0,0,2742,2766,3,202,
        101,0,2743,2744,7,27,0,0,2744,2766,3,202,101,0,2745,2746,5,269,0,
        0,2746,2766,7,28,0,0,2747,2748,5,281,0,0,2748,2749,5,147,0,0,2749,
        2766,3,800,400,0,2750,2751,5,328,0,0,2751,2752,5,266,0,0,2752,2766,
        3,316,158,0,2753,2755,5,340,0,0,2754,2756,5,105,0,0,2755,2754,1,
        0,0,0,2755,2756,1,0,0,0,2756,2757,1,0,0,0,2757,2766,3,202,101,0,
        2758,2760,5,314,0,0,2759,2761,5,105,0,0,2760,2759,1,0,0,0,2760,2761,
        1,0,0,0,2761,2763,1,0,0,0,2762,2764,3,202,101,0,2763,2762,1,0,0,
        0,2763,2764,1,0,0,0,2764,2766,1,0,0,0,2765,2732,1,0,0,0,2765,2734,
        1,0,0,0,2765,2738,1,0,0,0,2765,2743,1,0,0,0,2765,2745,1,0,0,0,2765,
        2747,1,0,0,0,2765,2750,1,0,0,0,2765,2753,1,0,0,0,2765,2758,1,0,0,
        0,2766,201,1,0,0,0,2767,2769,7,29,0,0,2768,2767,1,0,0,0,2768,2769,
        1,0,0,0,2769,2770,1,0,0,0,2770,2773,5,573,0,0,2771,2773,3,812,406,
        0,2772,2768,1,0,0,0,2772,2771,1,0,0,0,2773,203,1,0,0,0,2774,2776,
        5,46,0,0,2775,2777,3,366,183,0,2776,2775,1,0,0,0,2776,2777,1,0,0,
        0,2777,2779,1,0,0,0,2778,2780,5,359,0,0,2779,2778,1,0,0,0,2779,2780,
        1,0,0,0,2780,2782,1,0,0,0,2781,2783,5,295,0,0,2782,2781,1,0,0,0,
        2782,2783,1,0,0,0,2783,2784,1,0,0,0,2784,2785,5,247,0,0,2785,2798,
        3,818,409,0,2786,2787,5,215,0,0,2787,2790,3,316,158,0,2788,2789,
        5,239,0,0,2789,2791,3,316,158,0,2790,2788,1,0,0,0,2790,2791,1,0,
        0,0,2791,2796,1,0,0,0,2792,2793,5,373,0,0,2793,2797,3,316,158,0,
        2794,2795,5,269,0,0,2795,2797,5,373,0,0,2796,2792,1,0,0,0,2796,2794,
        1,0,0,0,2796,2797,1,0,0,0,2797,2799,1,0,0,0,2798,2786,1,0,0,0,2798,
        2799,1,0,0,0,2799,205,1,0,0,0,2800,2801,5,46,0,0,2801,2804,3,176,
        88,0,2802,2803,5,282,0,0,2803,2805,3,814,407,0,2804,2802,1,0,0,0,
        2804,2805,1,0,0,0,2805,2806,1,0,0,0,2806,2807,5,255,0,0,2807,2809,
        3,808,404,0,2808,2810,3,102,51,0,2809,2808,1,0,0,0,2809,2810,1,0,
        0,0,2810,207,1,0,0,0,2811,2812,5,46,0,0,2812,2814,5,204,0,0,2813,
        2815,3,294,147,0,2814,2813,1,0,0,0,2814,2815,1,0,0,0,2815,2816,1,
        0,0,0,2816,2818,3,818,409,0,2817,2819,5,105,0,0,2818,2817,1,0,0,
        0,2818,2819,1,0,0,0,2819,2827,1,0,0,0,2820,2821,5,323,0,0,2821,2826,
        3,790,395,0,2822,2823,7,30,0,0,2823,2826,3,58,29,0,2824,2826,5,150,
        0,0,2825,2820,1,0,0,0,2825,2822,1,0,0,0,2825,2824,1,0,0,0,2826,2829,
        1,0,0,0,2827,2825,1,0,0,0,2827,2828,1,0,0,0,2828,209,1,0,0,0,2829,
        2827,1,0,0,0,2830,2831,5,138,0,0,2831,2832,5,204,0,0,2832,2833,3,
        818,409,0,2833,2838,5,369,0,0,2834,2835,5,94,0,0,2835,2837,3,58,
        29,0,2836,2834,1,0,0,0,2837,2840,1,0,0,0,2838,2836,1,0,0,0,2838,
        2839,1,0,0,0,2839,211,1,0,0,0,2840,2838,1,0,0,0,2841,2842,5,138,
        0,0,2842,2843,5,204,0,0,2843,2844,3,818,409,0,2844,2877,7,6,0,0,
        2845,2846,5,443,0,0,2846,2847,5,62,0,0,2847,2848,3,652,326,0,2848,
        2849,5,247,0,0,2849,2850,3,818,409,0,2850,2878,1,0,0,0,2851,2852,
        5,442,0,0,2852,2878,3,374,187,0,2853,2854,5,296,0,0,2854,2878,3,
        378,189,0,2855,2856,5,278,0,0,2856,2857,7,31,0,0,2857,2858,3,316,
        158,0,2858,2859,3,170,85,0,2859,2878,1,0,0,0,2860,2861,5,278,0,0,
        2861,2878,3,416,208,0,2862,2863,5,211,0,0,2863,2878,3,382,191,0,
        2864,2865,7,32,0,0,2865,2878,3,652,326,0,2866,2867,5,41,0,0,2867,
        2868,5,2,0,0,2868,2869,3,652,326,0,2869,2870,5,36,0,0,2870,2871,
        3,652,326,0,2871,2872,5,3,0,0,2872,2878,1,0,0,0,2873,2874,5,136,
        0,0,2874,2878,3,394,197,0,2875,2878,3,312,156,0,2876,2878,3,310,
        155,0,2877,2845,1,0,0,0,2877,2851,1,0,0,0,2877,2853,1,0,0,0,2877,
        2855,1,0,0,0,2877,2860,1,0,0,0,2877,2862,1,0,0,0,2877,2864,1,0,0,
        0,2877,2866,1,0,0,0,2877,2873,1,0,0,0,2877,2875,1,0,0,0,2877,2876,
        1,0,0,0,2878,213,1,0,0,0,2879,2880,5,46,0,0,2880,2881,5,63,0,0,2881,
        2882,5,174,0,0,2882,2883,5,381,0,0,2883,2889,3,818,409,0,2884,2886,
        3,216,108,0,2885,2884,1,0,0,0,2886,2887,1,0,0,0,2887,2885,1,0,0,
        0,2887,2888,1,0,0,0,2888,2890,1,0,0,0,2889,2885,1,0,0,0,2889,2890,
        1,0,0,0,2890,2892,1,0,0,0,2891,2893,3,220,110,0,2892,2891,1,0,0,
        0,2892,2893,1,0,0,0,2893,215,1,0,0,0,2894,2896,7,33,0,0,2895,2897,
        3,316,158,0,2896,2895,1,0,0,0,2896,2897,1,0,0,0,2897,2901,1,0,0,
        0,2898,2899,5,269,0,0,2899,2901,7,33,0,0,2900,2894,1,0,0,0,2900,
        2898,1,0,0,0,2901,217,1,0,0,0,2902,2903,5,138,0,0,2903,2904,5,63,
        0,0,2904,2905,5,174,0,0,2905,2906,5,381,0,0,2906,2920,3,818,409,
        0,2907,2909,3,216,108,0,2908,2907,1,0,0,0,2909,2910,1,0,0,0,2910,
        2908,1,0,0,0,2910,2911,1,0,0,0,2911,2913,1,0,0,0,2912,2908,1,0,0,
        0,2912,2913,1,0,0,0,2913,2914,1,0,0,0,2914,2921,3,222,111,0,2915,
        2917,3,216,108,0,2916,2915,1,0,0,0,2917,2918,1,0,0,0,2918,2916,1,
        0,0,0,2918,2919,1,0,0,0,2919,2921,1,0,0,0,2920,2912,1,0,0,0,2920,
        2916,1,0,0,0,2921,219,1,0,0,0,2922,2923,5,280,0,0,2923,2924,5,2,
        0,0,2924,2929,3,226,113,0,2925,2926,5,6,0,0,2926,2928,3,226,113,
        0,2927,2925,1,0,0,0,2928,2931,1,0,0,0,2929,2927,1,0,0,0,2929,2930,
        1,0,0,0,2930,2932,1,0,0,0,2931,2929,1,0,0,0,2932,2933,5,3,0,0,2933,
        221,1,0,0,0,2934,2935,5,280,0,0,2935,2936,5,2,0,0,2936,2941,3,224,
        112,0,2937,2938,5,6,0,0,2938,2940,3,224,112,0,2939,2937,1,0,0,0,
        2940,2943,1,0,0,0,2941,2939,1,0,0,0,2941,2942,1,0,0,0,2942,2944,
        1,0,0,0,2943,2941,1,0,0,0,2944,2945,5,3,0,0,2945,223,1,0,0,0,2946,
        2947,7,34,0,0,2947,2948,3,226,113,0,2948,225,1,0,0,0,2949,2950,3,
        824,412,0,2950,2951,3,808,404,0,2951,227,1,0,0,0,2952,2953,5,46,
        0,0,2953,2955,5,331,0,0,2954,2956,3,294,147,0,2955,2954,1,0,0,0,
        2955,2956,1,0,0,0,2956,2957,1,0,0,0,2957,2960,3,818,409,0,2958,2959,
        5,360,0,0,2959,2961,3,808,404,0,2960,2958,1,0,0,0,2960,2961,1,0,
        0,0,2961,2963,1,0,0,0,2962,2964,3,230,115,0,2963,2962,1,0,0,0,2963,
        2964,1,0,0,0,2964,2965,1,0,0,0,2965,2966,5,63,0,0,2966,2967,5,174,
        0,0,2967,2968,5,381,0,0,2968,2970,3,818,409,0,2969,2971,3,220,110,
        0,2970,2969,1,0,0,0,2970,2971,1,0,0,0,2971,229,1,0,0,0,2972,2975,
        5,375,0,0,2973,2976,3,808,404,0,2974,2976,5,78,0,0,2975,2973,1,0,
        0,0,2975,2974,1,0,0,0,2976,231,1,0,0,0,2977,2978,5,138,0,0,2978,
        2979,5,331,0,0,2979,2985,3,818,409,0,2980,2986,3,222,111,0,2981,
        2983,3,230,115,0,2982,2984,3,222,111,0,2983,2982,1,0,0,0,2983,2984,
        1,0,0,0,2984,2986,1,0,0,0,2985,2980,1,0,0,0,2985,2981,1,0,0,0,2986,
        233,1,0,0,0,2987,2988,5,46,0,0,2988,2989,5,63,0,0,2989,2991,5,92,
        0,0,2990,2992,3,294,147,0,2991,2990,1,0,0,0,2991,2992,1,0,0,0,2992,
        2993,1,0,0,0,2993,2994,3,772,386,0,2994,2996,5,2,0,0,2995,2997,3,
        126,63,0,2996,2995,1,0,0,0,2996,2997,1,0,0,0,2997,2998,1,0,0,0,2998,
        3000,5,3,0,0,2999,3001,3,164,82,0,3000,2999,1,0,0,0,3000,3001,1,
        0,0,0,3001,3002,1,0,0,0,3002,3003,5,331,0,0,3003,3005,3,818,409,
        0,3004,3006,3,220,110,0,3005,3004,1,0,0,0,3005,3006,1,0,0,0,3006,
        3027,1,0,0,0,3007,3008,5,46,0,0,3008,3009,5,63,0,0,3009,3011,5,92,
        0,0,3010,3012,3,294,147,0,3011,3010,1,0,0,0,3011,3012,1,0,0,0,3012,
        3013,1,0,0,0,3013,3014,3,772,386,0,3014,3015,5,285,0,0,3015,3016,
        5,275,0,0,3016,3018,3,774,387,0,3017,3019,3,124,62,0,3018,3017,1,
        0,0,0,3018,3019,1,0,0,0,3019,3020,1,0,0,0,3020,3021,3,106,53,0,3021,
        3022,5,331,0,0,3022,3024,3,818,409,0,3023,3025,3,220,110,0,3024,
        3023,1,0,0,0,3024,3025,1,0,0,0,3025,3027,1,0,0,0,3026,2987,1,0,0,
        0,3026,3007,1,0,0,0,3027,235,1,0,0,0,3028,3029,5,444,0,0,3029,3030,
        5,63,0,0,3030,3031,5,323,0,0,3031,3041,3,790,395,0,3032,3033,5,74,
        0,0,3033,3036,5,94,0,0,3034,3036,5,59,0,0,3035,3032,1,0,0,0,3035,
        3034,1,0,0,0,3036,3037,1,0,0,0,3037,3038,5,2,0,0,3038,3039,3,628,
        314,0,3039,3040,5,3,0,0,3040,3042,1,0,0,0,3041,3035,1,0,0,0,3041,
        3042,1,0,0,0,3042,3043,1,0,0,0,3043,3044,5,64,0,0,3044,3045,5,331,
        0,0,3045,3046,3,818,409,0,3046,3047,5,71,0,0,3047,3049,3,818,409,
        0,3048,3050,3,220,110,0,3049,3048,1,0,0,0,3049,3050,1,0,0,0,3050,
        237,1,0,0,0,3051,3052,5,46,0,0,3052,3053,5,99,0,0,3053,3055,5,257,
        0,0,3054,3056,3,294,147,0,3055,3054,1,0,0,0,3055,3056,1,0,0,0,3056,
        3057,1,0,0,0,3057,3060,5,62,0,0,3058,3061,3,814,407,0,3059,3061,
        5,99,0,0,3060,3058,1,0,0,0,3060,3059,1,0,0,0,3061,3062,1,0,0,0,3062,
        3063,5,331,0,0,3063,3065,3,818,409,0,3064,3066,3,220,110,0,3065,
        3064,1,0,0,0,3065,3066,1,0,0,0,3066,239,1,0,0,0,3067,3068,5,138,
        0,0,3068,3069,5,99,0,0,3069,3070,5,257,0,0,3070,3073,5,62,0,0,3071,
        3074,3,814,407,0,3072,3074,5,99,0,0,3073,3071,1,0,0,0,3073,3072,
        1,0,0,0,3074,3075,1,0,0,0,3075,3076,5,331,0,0,3076,3077,3,818,409,
        0,3077,3078,3,222,111,0,3078,241,1,0,0,0,3079,3080,5,46,0,0,3080,
        3081,5,445,0,0,3081,3082,3,818,409,0,3082,3083,5,80,0,0,3083,3090,
        3,780,390,0,3084,3088,5,36,0,0,3085,3089,5,541,0,0,3086,3089,5,542,
        0,0,3087,3089,3,826,413,0,3088,3085,1,0,0,0,3088,3086,1,0,0,0,3088,
        3087,1,0,0,0,3089,3091,1,0,0,0,3090,3084,1,0,0,0,3090,3091,1,0,0,
        0,3091,3094,1,0,0,0,3092,3093,5,62,0,0,3093,3095,7,35,0,0,3094,3092,
        1,0,0,0,3094,3095,1,0,0,0,3095,3098,1,0,0,0,3096,3097,5,94,0,0,3097,
        3099,3,816,408,0,3098,3096,1,0,0,0,3098,3099,1,0,0,0,3099,3101,1,
        0,0,0,3100,3102,3,250,125,0,3101,3100,1,0,0,0,3101,3102,1,0,0,0,
        3102,3104,1,0,0,0,3103,3105,3,252,126,0,3104,3103,1,0,0,0,3104,3105,
        1,0,0,0,3105,243,1,0,0,0,3106,3107,5,138,0,0,3107,3108,5,445,0,0,
        3108,3109,3,818,409,0,3109,3110,5,80,0,0,3110,3113,3,780,390,0,3111,
        3112,5,94,0,0,3112,3114,3,816,408,0,3113,3111,1,0,0,0,3113,3114,
        1,0,0,0,3114,3116,1,0,0,0,3115,3117,3,250,125,0,3116,3115,1,0,0,
        0,3116,3117,1,0,0,0,3117,3119,1,0,0,0,3118,3120,3,252,126,0,3119,
        3118,1,0,0,0,3119,3120,1,0,0,0,3120,245,1,0,0,0,3121,3122,5,138,
        0,0,3122,3123,5,296,0,0,3123,3125,3,796,398,0,3124,3126,3,368,184,
        0,3125,3124,1,0,0,0,3125,3126,1,0,0,0,3126,3153,1,0,0,0,3127,3131,
        3,248,124,0,3128,3130,3,248,124,0,3129,3128,1,0,0,0,3130,3133,1,
        0,0,0,3131,3129,1,0,0,0,3131,3132,1,0,0,0,3132,3135,1,0,0,0,3133,
        3131,1,0,0,0,3134,3136,5,315,0,0,3135,3134,1,0,0,0,3135,3136,1,0,
        0,0,3136,3154,1,0,0,0,3137,3138,5,309,0,0,3138,3139,5,94,0,0,3139,
        3154,3,798,399,0,3140,3141,5,282,0,0,3141,3142,5,94,0,0,3142,3154,
        3,814,407,0,3143,3144,5,333,0,0,3144,3145,5,323,0,0,3145,3154,3,
        32,16,0,3146,3148,5,269,0,0,3147,3146,1,0,0,0,3147,3148,1,0,0,0,
        3148,3149,1,0,0,0,3149,3150,5,462,0,0,3150,3151,5,80,0,0,3151,3152,
        5,204,0,0,3152,3154,3,818,409,0,3153,3127,1,0,0,0,3153,3137,1,0,
        0,0,3153,3140,1,0,0,0,3153,3143,1,0,0,0,3153,3147,1,0,0,0,3154,247,
        1,0,0,0,3155,3157,5,205,0,0,3156,3155,1,0,0,0,3156,3157,1,0,0,0,
        3157,3158,1,0,0,0,3158,3159,5,327,0,0,3159,3166,5,243,0,0,3160,3162,
        5,205,0,0,3161,3160,1,0,0,0,3161,3162,1,0,0,0,3162,3163,1,0,0,0,
        3163,3164,5,327,0,0,3164,3166,5,181,0,0,3165,3156,1,0,0,0,3165,3161,
        1,0,0,0,3166,3185,1,0,0,0,3167,3168,5,333,0,0,3168,3169,3,818,409,
        0,3169,3172,7,36,0,0,3170,3173,3,818,409,0,3171,3173,5,53,0,0,3172,
        3170,1,0,0,0,3172,3171,1,0,0,0,3173,3185,1,0,0,0,3174,3175,5,333,
        0,0,3175,3176,3,818,409,0,3176,3177,5,64,0,0,3177,3178,5,434,0,0,
        3178,3185,1,0,0,0,3179,3182,5,313,0,0,3180,3183,3,818,409,0,3181,
        3183,5,30,0,0,3182,3180,1,0,0,0,3182,3181,1,0,0,0,3183,3185,1,0,
        0,0,3184,3165,1,0,0,0,3184,3167,1,0,0,0,3184,3174,1,0,0,0,3184,3179,
        1,0,0,0,3185,249,1,0,0,0,3186,3187,5,100,0,0,3187,3188,5,2,0,0,3188,
        3189,3,674,337,0,3189,3190,5,3,0,0,3190,251,1,0,0,0,3191,3192,5,
        105,0,0,3192,3193,5,42,0,0,3193,3194,5,2,0,0,3194,3195,3,674,337,
        0,3195,3196,5,3,0,0,3196,253,1,0,0,0,3197,3198,5,46,0,0,3198,3199,
        5,131,0,0,3199,3200,5,446,0,0,3200,3201,3,818,409,0,3201,3202,5,
        360,0,0,3202,3203,7,37,0,0,3203,3204,5,215,0,0,3204,3205,3,316,158,
        0,3205,255,1,0,0,0,3206,3208,5,46,0,0,3207,3209,3,366,183,0,3208,
        3207,1,0,0,0,3208,3209,1,0,0,0,3209,3210,1,0,0,0,3210,3211,5,357,
        0,0,3211,3212,3,818,409,0,3212,3213,3,258,129,0,3213,3214,3,260,
        130,0,3214,3215,5,80,0,0,3215,3227,3,774,387,0,3216,3223,5,447,0,
        0,3217,3218,7,38,0,0,3218,3220,7,39,0,0,3219,3221,5,36,0,0,3220,
        3219,1,0,0,0,3220,3221,1,0,0,0,3221,3222,1,0,0,0,3222,3224,3,818,
        409,0,3223,3217,1,0,0,0,3224,3225,1,0,0,0,3225,3223,1,0,0,0,3225,
        3226,1,0,0,0,3226,3228,1,0,0,0,3227,3216,1,0,0,0,3227,3228,1,0,0,
        0,3228,3234,1,0,0,0,3229,3231,5,62,0,0,3230,3232,5,192,0,0,3231,
        3230,1,0,0,0,3231,3232,1,0,0,0,3232,3233,1,0,0,0,3233,3235,7,40,
        0,0,3234,3229,1,0,0,0,3234,3235,1,0,0,0,3235,3237,1,0,0,0,3236,3238,
        3,264,132,0,3237,3236,1,0,0,0,3237,3238,1,0,0,0,3238,3239,1,0,0,
        0,3239,3240,5,202,0,0,3240,3241,3,266,133,0,3241,3242,5,2,0,0,3242,
        3243,3,268,134,0,3243,3244,5,3,0,0,3244,3285,1,0,0,0,3245,3247,5,
        46,0,0,3246,3248,3,366,183,0,3247,3246,1,0,0,0,3247,3248,1,0,0,0,
        3248,3250,1,0,0,0,3249,3251,5,45,0,0,3250,3249,1,0,0,0,3250,3251,
        1,0,0,0,3251,3252,1,0,0,0,3252,3253,5,357,0,0,3253,3254,3,818,409,
        0,3254,3255,3,258,129,0,3255,3256,3,260,130,0,3256,3257,5,80,0,0,
        3257,3260,3,774,387,0,3258,3259,5,64,0,0,3259,3261,3,780,390,0,3260,
        3258,1,0,0,0,3260,3261,1,0,0,0,3261,3265,1,0,0,0,3262,3264,3,272,
        136,0,3263,3262,1,0,0,0,3264,3267,1,0,0,0,3265,3263,1,0,0,0,3265,
        3266,1,0,0,0,3266,3273,1,0,0,0,3267,3265,1,0,0,0,3268,3270,5,62,
        0,0,3269,3271,5,192,0,0,3270,3269,1,0,0,0,3270,3271,1,0,0,0,3271,
        3272,1,0,0,0,3272,3274,7,40,0,0,3273,3268,1,0,0,0,3273,3274,1,0,
        0,0,3274,3276,1,0,0,0,3275,3277,3,264,132,0,3276,3275,1,0,0,0,3276,
        3277,1,0,0,0,3277,3278,1,0,0,0,3278,3279,5,202,0,0,3279,3280,3,266,
        133,0,3280,3281,5,2,0,0,3281,3282,3,268,134,0,3282,3283,5,3,0,0,
        3283,3285,1,0,0,0,3284,3206,1,0,0,0,3284,3245,1,0,0,0,3285,257,1,
        0,0,0,3286,3291,5,145,0,0,3287,3291,5,135,0,0,3288,3289,5,242,0,
        0,3289,3291,5,275,0,0,3290,3286,1,0,0,0,3290,3287,1,0,0,0,3290,3288,
        1,0,0,0,3291,259,1,0,0,0,3292,3297,3,262,131,0,3293,3294,5,82,0,
        0,3294,3296,3,262,131,0,3295,3293,1,0,0,0,3296,3299,1,0,0,0,3297,
        3295,1,0,0,0,3297,3298,1,0,0,0,3298,261,1,0,0,0,3299,3297,1,0,0,
        0,3300,3309,5,241,0,0,3301,3309,5,182,0,0,3302,3305,5,369,0,0,3303,
        3304,5,275,0,0,3304,3306,3,148,74,0,3305,3303,1,0,0,0,3305,3306,
        1,0,0,0,3306,3309,1,0,0,0,3307,3309,5,358,0,0,3308,3300,1,0,0,0,
        3308,3301,1,0,0,0,3308,3302,1,0,0,0,3308,3307,1,0,0,0,3309,263,1,
        0,0,0,3310,3311,5,102,0,0,3311,3312,5,2,0,0,3312,3313,3,674,337,
        0,3313,3314,5,3,0,0,3314,265,1,0,0,0,3315,3316,5,211,0,0,3316,3320,
        3,806,403,0,3317,3318,5,296,0,0,3318,3320,3,796,398,0,3319,3315,
        1,0,0,0,3319,3317,1,0,0,0,3320,267,1,0,0,0,3321,3324,3,270,135,0,
        3322,3324,1,0,0,0,3323,3321,1,0,0,0,3323,3322,1,0,0,0,3324,3329,
        1,0,0,0,3325,3326,5,6,0,0,3326,3328,3,270,135,0,3327,3325,1,0,0,
        0,3328,3331,1,0,0,0,3329,3327,1,0,0,0,3329,3330,1,0,0,0,3330,269,
        1,0,0,0,3331,3329,1,0,0,0,3332,3337,5,571,0,0,3333,3337,5,573,0,
        0,3334,3337,3,808,404,0,3335,3337,3,824,412,0,3336,3332,1,0,0,0,
        3336,3333,1,0,0,0,3336,3334,1,0,0,0,3336,3335,1,0,0,0,3337,271,1,
        0,0,0,3338,3340,5,77,0,0,3339,3338,1,0,0,0,3339,3340,1,0,0,0,3340,
        3341,1,0,0,0,3341,3349,5,54,0,0,3342,3343,5,69,0,0,3343,3349,7,9,
        0,0,3344,3345,5,77,0,0,3345,3349,5,371,0,0,3346,3347,5,269,0,0,3347,
        3349,5,228,0,0,3348,3339,1,0,0,0,3348,3342,1,0,0,0,3348,3344,1,0,
        0,0,3348,3346,1,0,0,0,3349,273,1,0,0,0,3350,3351,5,46,0,0,3351,3352,
        5,198,0,0,3352,3353,5,357,0,0,3353,3354,3,818,409,0,3354,3355,5,
        80,0,0,3355,3365,3,824,412,0,3356,3357,5,102,0,0,3357,3362,3,276,
        138,0,3358,3359,5,33,0,0,3359,3361,3,276,138,0,3360,3358,1,0,0,0,
        3361,3364,1,0,0,0,3362,3360,1,0,0,0,3362,3363,1,0,0,0,3363,3366,
        1,0,0,0,3364,3362,1,0,0,0,3365,3356,1,0,0,0,3365,3366,1,0,0,0,3366,
        3367,1,0,0,0,3367,3368,5,202,0,0,3368,3369,3,266,133,0,3369,3370,
        5,2,0,0,3370,3371,5,3,0,0,3371,275,1,0,0,0,3372,3373,3,818,409,0,
        3373,3374,5,68,0,0,3374,3375,5,2,0,0,3375,3379,3,808,404,0,3376,
        3378,3,462,231,0,3377,3376,1,0,0,0,3378,3381,1,0,0,0,3379,3377,1,
        0,0,0,3379,3380,1,0,0,0,3380,3382,1,0,0,0,3381,3379,1,0,0,0,3382,
        3383,5,3,0,0,3383,277,1,0,0,0,3384,3385,5,138,0,0,3385,3386,5,198,
        0,0,3386,3387,5,357,0,0,3387,3393,3,818,409,0,3388,3390,5,193,0,
        0,3389,3391,7,14,0,0,3390,3389,1,0,0,0,3390,3391,1,0,0,0,3391,3394,
        1,0,0,0,3392,3394,5,186,0,0,3393,3388,1,0,0,0,3393,3392,1,0,0,0,
        3394,279,1,0,0,0,3395,3396,5,46,0,0,3396,3397,5,140,0,0,3397,3398,
        3,316,158,0,3398,3399,5,42,0,0,3399,3400,5,2,0,0,3400,3401,3,674,
        337,0,3401,3405,5,3,0,0,3402,3404,3,272,136,0,3403,3402,1,0,0,0,
        3404,3407,1,0,0,0,3405,3403,1,0,0,0,3405,3406,1,0,0,0,3406,281,1,
        0,0,0,3407,3405,1,0,0,0,3408,3410,5,46,0,0,3409,3411,3,366,183,0,
        3410,3409,1,0,0,0,3410,3411,1,0,0,0,3411,3412,1,0,0,0,3412,3413,
        5,136,0,0,3413,3428,3,806,403,0,3414,3415,3,392,196,0,3415,3416,
        3,284,142,0,3416,3429,1,0,0,0,3417,3418,5,2,0,0,3418,3423,3,290,
        145,0,3419,3420,5,6,0,0,3420,3422,3,290,145,0,3421,3419,1,0,0,0,
        3422,3425,1,0,0,0,3423,3421,1,0,0,0,3423,3424,1,0,0,0,3424,3426,
        1,0,0,0,3425,3423,1,0,0,0,3426,3427,5,3,0,0,3427,3429,1,0,0,0,3428,
        3414,1,0,0,0,3428,3417,1,0,0,0,3429,3487,1,0,0,0,3430,3431,5,46,
        0,0,3431,3432,5,278,0,0,3432,3433,3,414,207,0,3433,3434,3,284,142,
        0,3434,3487,1,0,0,0,3435,3436,5,46,0,0,3436,3437,5,360,0,0,3437,
        3438,3,316,158,0,3438,3456,5,36,0,0,3439,3441,5,2,0,0,3440,3442,
        3,642,321,0,3441,3440,1,0,0,0,3441,3442,1,0,0,0,3442,3443,1,0,0,
        0,3443,3457,5,3,0,0,3444,3445,5,196,0,0,3445,3453,5,2,0,0,3446,3450,
        3,808,404,0,3447,3449,3,462,231,0,3448,3447,1,0,0,0,3449,3452,1,
        0,0,0,3450,3448,1,0,0,0,3450,3451,1,0,0,0,3451,3454,1,0,0,0,3452,
        3450,1,0,0,0,3453,3446,1,0,0,0,3453,3454,1,0,0,0,3454,3455,1,0,0,
        0,3455,3457,5,3,0,0,3456,3439,1,0,0,0,3456,3444,1,0,0,0,3457,3487,
        1,0,0,0,3458,3459,5,46,0,0,3459,3460,5,360,0,0,3460,3466,3,316,158,
        0,3461,3462,5,36,0,0,3462,3464,5,299,0,0,3463,3461,1,0,0,0,3463,
        3464,1,0,0,0,3464,3465,1,0,0,0,3465,3467,3,284,142,0,3466,3463,1,
        0,0,0,3466,3467,1,0,0,0,3467,3487,1,0,0,0,3468,3469,5,46,0,0,3469,
        3470,5,355,0,0,3470,3471,5,325,0,0,3471,3472,7,41,0,0,3472,3473,
        3,316,158,0,3473,3474,3,284,142,0,3474,3487,1,0,0,0,3475,3476,5,
        46,0,0,3476,3478,5,108,0,0,3477,3479,3,294,147,0,3478,3477,1,0,0,
        0,3478,3479,1,0,0,0,3479,3480,1,0,0,0,3480,3484,3,316,158,0,3481,
        3485,3,284,142,0,3482,3483,5,64,0,0,3483,3485,3,316,158,0,3484,3481,
        1,0,0,0,3484,3482,1,0,0,0,3485,3487,1,0,0,0,3486,3408,1,0,0,0,3486,
        3430,1,0,0,0,3486,3435,1,0,0,0,3486,3458,1,0,0,0,3486,3468,1,0,0,
        0,3486,3475,1,0,0,0,3487,283,1,0,0,0,3488,3489,5,2,0,0,3489,3494,
        3,286,143,0,3490,3491,5,6,0,0,3491,3493,3,286,143,0,3492,3490,1,
        0,0,0,3493,3496,1,0,0,0,3494,3492,1,0,0,0,3494,3495,1,0,0,0,3495,
        3497,1,0,0,0,3496,3494,1,0,0,0,3497,3498,5,3,0,0,3498,285,1,0,0,
        0,3499,3502,3,824,412,0,3500,3501,5,10,0,0,3501,3503,3,288,144,0,
        3502,3500,1,0,0,0,3502,3503,1,0,0,0,3503,287,1,0,0,0,3504,3511,3,
        388,194,0,3505,3511,3,834,417,0,3506,3511,3,726,363,0,3507,3511,
        3,202,101,0,3508,3511,3,808,404,0,3509,3511,5,407,0,0,3510,3504,
        1,0,0,0,3510,3505,1,0,0,0,3510,3506,1,0,0,0,3510,3507,1,0,0,0,3510,
        3508,1,0,0,0,3510,3509,1,0,0,0,3511,289,1,0,0,0,3512,3513,3,826,
        413,0,3513,3514,5,10,0,0,3514,3515,3,288,144,0,3515,291,1,0,0,0,
        3516,3517,5,138,0,0,3517,3518,5,360,0,0,3518,3519,3,316,158,0,3519,
        3520,5,133,0,0,3520,3522,5,450,0,0,3521,3523,3,294,147,0,3522,3521,
        1,0,0,0,3522,3523,1,0,0,0,3523,3524,1,0,0,0,3524,3527,3,808,404,
        0,3525,3526,7,42,0,0,3526,3528,3,808,404,0,3527,3525,1,0,0,0,3527,
        3528,1,0,0,0,3528,3539,1,0,0,0,3529,3530,5,138,0,0,3530,3531,5,360,
        0,0,3531,3532,3,316,158,0,3532,3533,5,309,0,0,3533,3534,5,450,0,
        0,3534,3535,3,808,404,0,3535,3536,5,94,0,0,3536,3537,3,808,404,0,
        3537,3539,1,0,0,0,3538,3516,1,0,0,0,3538,3529,1,0,0,0,3539,293,1,
        0,0,0,3540,3541,5,220,0,0,3541,3542,5,77,0,0,3542,3543,5,396,0,0,
        3543,295,1,0,0,0,3544,3545,5,46,0,0,3545,3546,5,278,0,0,3546,3547,
        5,156,0,0,3547,3549,3,316,158,0,3548,3550,5,53,0,0,3549,3548,1,0,
        0,0,3549,3550,1,0,0,0,3550,3551,1,0,0,0,3551,3552,5,62,0,0,3552,
        3553,5,360,0,0,3553,3554,3,652,326,0,3554,3557,3,170,85,0,3555,3556,
        5,206,0,0,3556,3558,3,316,158,0,3557,3555,1,0,0,0,3557,3558,1,0,
        0,0,3558,3559,1,0,0,0,3559,3560,5,36,0,0,3560,3565,3,298,149,0,3561,
        3562,5,6,0,0,3562,3564,3,298,149,0,3563,3561,1,0,0,0,3564,3567,1,
        0,0,0,3565,3563,1,0,0,0,3565,3566,1,0,0,0,3566,297,1,0,0,0,3567,
        3565,1,0,0,0,3568,3569,5,278,0,0,3569,3570,5,571,0,0,3570,3572,3,
        414,207,0,3571,3573,3,412,206,0,3572,3571,1,0,0,0,3572,3573,1,0,
        0,0,3573,3581,1,0,0,0,3574,3579,5,62,0,0,3575,3580,5,325,0,0,3576,
        3577,5,83,0,0,3577,3578,5,147,0,0,3578,3580,3,316,158,0,3579,3575,
        1,0,0,0,3579,3576,1,0,0,0,3580,3582,1,0,0,0,3581,3574,1,0,0,0,3581,
        3582,1,0,0,0,3582,3584,1,0,0,0,3583,3585,5,302,0,0,3584,3583,1,0,
        0,0,3584,3585,1,0,0,0,3585,3595,1,0,0,0,3586,3587,5,211,0,0,3587,
        3589,5,571,0,0,3588,3590,3,528,264,0,3589,3588,1,0,0,0,3589,3590,
        1,0,0,0,3590,3591,1,0,0,0,3591,3595,3,382,191,0,3592,3593,5,345,
        0,0,3593,3595,3,652,326,0,3594,3568,1,0,0,0,3594,3586,1,0,0,0,3594,
        3592,1,0,0,0,3595,299,1,0,0,0,3596,3597,5,46,0,0,3597,3598,5,278,
        0,0,3598,3599,5,206,0,0,3599,3600,3,316,158,0,3600,3601,3,170,85,
        0,3601,301,1,0,0,0,3602,3603,5,138,0,0,3603,3604,5,278,0,0,3604,
        3605,5,206,0,0,3605,3606,3,316,158,0,3606,3625,3,170,85,0,3607,3608,
        5,133,0,0,3608,3613,3,298,149,0,3609,3610,5,6,0,0,3610,3612,3,298,
        149,0,3611,3609,1,0,0,0,3612,3615,1,0,0,0,3613,3611,1,0,0,0,3613,
        3614,1,0,0,0,3614,3626,1,0,0,0,3615,3613,1,0,0,0,3616,3617,5,191,
        0,0,3617,3622,3,304,152,0,3618,3619,5,6,0,0,3619,3621,3,304,152,
        0,3620,3618,1,0,0,0,3621,3624,1,0,0,0,3622,3620,1,0,0,0,3622,3623,
        1,0,0,0,3623,3626,1,0,0,0,3624,3622,1,0,0,0,3625,3607,1,0,0,0,3625,
        3616,1,0,0,0,3626,303,1,0,0,0,3627,3628,7,43,0,0,3628,3629,5,571,
        0,0,3629,3630,3,528,264,0,3630,305,1,0,0,0,3631,3632,5,301,0,0,3632,
        3633,5,281,0,0,3633,3634,5,147,0,0,3634,3635,3,816,408,0,3635,3636,
        5,94,0,0,3636,3637,3,814,407,0,3637,307,1,0,0,0,3638,3661,5,191,
        0,0,3639,3662,5,328,0,0,3640,3662,5,226,0,0,3641,3662,5,108,0,0,
        3642,3662,5,168,0,0,3643,3662,5,342,0,0,3644,3662,5,452,0,0,3645,
        3662,5,331,0,0,3646,3647,5,131,0,0,3647,3662,5,446,0,0,3648,3649,
        5,198,0,0,3649,3662,5,357,0,0,3650,3662,5,204,0,0,3651,3653,5,295,
        0,0,3652,3651,1,0,0,0,3652,3653,1,0,0,0,3653,3654,1,0,0,0,3654,3662,
        5,247,0,0,3655,3656,5,63,0,0,3656,3657,5,174,0,0,3657,3662,5,381,
        0,0,3658,3659,5,355,0,0,3659,3660,5,325,0,0,3660,3662,7,41,0,0,3661,
        3639,1,0,0,0,3661,3640,1,0,0,0,3661,3641,1,0,0,0,3661,3642,1,0,0,
        0,3661,3643,1,0,0,0,3661,3644,1,0,0,0,3661,3645,1,0,0,0,3661,3646,
        1,0,0,0,3661,3648,1,0,0,0,3661,3650,1,0,0,0,3661,3652,1,0,0,0,3661,
        3655,1,0,0,0,3661,3658,1,0,0,0,3662,3664,1,0,0,0,3663,3665,3,422,
        211,0,3664,3663,1,0,0,0,3664,3665,1,0,0,0,3665,3666,1,0,0,0,3666,
        3668,3,784,392,0,3667,3669,3,96,48,0,3668,3667,1,0,0,0,3668,3669,
        1,0,0,0,3669,3846,1,0,0,0,3670,3672,5,191,0,0,3671,3673,5,259,0,
        0,3672,3671,1,0,0,0,3672,3673,1,0,0,0,3673,3674,1,0,0,0,3674,3676,
        5,376,0,0,3675,3677,3,422,211,0,3676,3675,1,0,0,0,3676,3677,1,0,
        0,0,3677,3678,1,0,0,0,3678,3683,3,778,389,0,3679,3680,5,6,0,0,3680,
        3682,3,778,389,0,3681,3679,1,0,0,0,3682,3685,1,0,0,0,3683,3681,1,
        0,0,0,3683,3684,1,0,0,0,3684,3687,1,0,0,0,3685,3683,1,0,0,0,3686,
        3688,3,96,48,0,3687,3686,1,0,0,0,3687,3688,1,0,0,0,3688,3846,1,0,
        0,0,3689,3691,5,191,0,0,3690,3692,5,63,0,0,3691,3690,1,0,0,0,3691,
        3692,1,0,0,0,3692,3693,1,0,0,0,3693,3695,5,92,0,0,3694,3696,3,422,
        211,0,3695,3694,1,0,0,0,3695,3696,1,0,0,0,3696,3697,1,0,0,0,3697,
        3699,3,762,381,0,3698,3700,3,96,48,0,3699,3698,1,0,0,0,3699,3700,
        1,0,0,0,3700,3846,1,0,0,0,3701,3702,5,191,0,0,3702,3704,5,323,0,
        0,3703,3705,3,422,211,0,3704,3703,1,0,0,0,3704,3705,1,0,0,0,3705,
        3706,1,0,0,0,3706,3708,3,764,382,0,3707,3709,3,96,48,0,3708,3707,
        1,0,0,0,3708,3709,1,0,0,0,3709,3846,1,0,0,0,3710,3711,5,191,0,0,
        3711,3713,7,44,0,0,3712,3714,3,422,211,0,3713,3712,1,0,0,0,3713,
        3714,1,0,0,0,3714,3715,1,0,0,0,3715,3716,3,818,409,0,3716,3717,5,
        80,0,0,3717,3719,3,316,158,0,3718,3720,3,96,48,0,3719,3718,1,0,0,
        0,3719,3720,1,0,0,0,3720,3846,1,0,0,0,3721,3722,5,191,0,0,3722,3724,
        7,32,0,0,3723,3725,3,422,211,0,3724,3723,1,0,0,0,3724,3725,1,0,0,
        0,3725,3726,1,0,0,0,3726,3731,3,652,326,0,3727,3728,5,6,0,0,3728,
        3730,3,652,326,0,3729,3727,1,0,0,0,3730,3733,1,0,0,0,3731,3729,1,
        0,0,0,3731,3732,1,0,0,0,3732,3735,1,0,0,0,3733,3731,1,0,0,0,3734,
        3736,3,96,48,0,3735,3734,1,0,0,0,3735,3736,1,0,0,0,3736,3846,1,0,
        0,0,3737,3738,5,191,0,0,3738,3739,5,226,0,0,3739,3741,5,109,0,0,
        3740,3742,3,422,211,0,3741,3740,1,0,0,0,3741,3742,1,0,0,0,3742,3743,
        1,0,0,0,3743,3745,3,314,157,0,3744,3746,3,96,48,0,3745,3744,1,0,
        0,0,3745,3746,1,0,0,0,3746,3846,1,0,0,0,3747,3748,5,191,0,0,3748,
        3750,5,41,0,0,3749,3751,3,422,211,0,3750,3749,1,0,0,0,3750,3751,
        1,0,0,0,3751,3752,1,0,0,0,3752,3753,5,2,0,0,3753,3754,3,652,326,
        0,3754,3755,5,36,0,0,3755,3756,3,652,326,0,3756,3758,5,3,0,0,3757,
        3759,3,96,48,0,3758,3757,1,0,0,0,3758,3759,1,0,0,0,3759,3846,1,0,
        0,0,3760,3761,5,191,0,0,3761,3762,5,278,0,0,3762,3764,7,31,0,0,3763,
        3765,3,422,211,0,3764,3763,1,0,0,0,3764,3765,1,0,0,0,3765,3766,1,
        0,0,0,3766,3767,3,316,158,0,3767,3769,3,170,85,0,3768,3770,3,96,
        48,0,3769,3768,1,0,0,0,3769,3770,1,0,0,0,3770,3846,1,0,0,0,3771,
        3772,5,191,0,0,3772,3773,5,281,0,0,3773,3774,5,147,0,0,3774,3776,
        3,816,408,0,3775,3777,3,96,48,0,3776,3775,1,0,0,0,3776,3777,1,0,
        0,0,3777,3846,1,0,0,0,3778,3779,5,191,0,0,3779,3781,5,451,0,0,3780,
        3782,3,422,211,0,3781,3780,1,0,0,0,3781,3782,1,0,0,0,3782,3783,1,
        0,0,0,3783,3785,3,818,409,0,3784,3786,3,96,48,0,3785,3784,1,0,0,
        0,3785,3786,1,0,0,0,3786,3846,1,0,0,0,3787,3788,5,191,0,0,3788,3790,
        5,351,0,0,3789,3791,3,422,211,0,3790,3789,1,0,0,0,3790,3791,1,0,
        0,0,3791,3792,1,0,0,0,3792,3846,3,770,385,0,3793,3794,5,191,0,0,
        3794,3796,5,443,0,0,3795,3797,3,422,211,0,3796,3795,1,0,0,0,3796,
        3797,1,0,0,0,3797,3798,1,0,0,0,3798,3799,5,62,0,0,3799,3800,3,652,
        326,0,3800,3801,5,247,0,0,3801,3803,3,818,409,0,3802,3804,3,96,48,
        0,3803,3802,1,0,0,0,3803,3804,1,0,0,0,3804,3846,1,0,0,0,3805,3806,
        5,191,0,0,3806,3808,7,45,0,0,3807,3809,3,422,211,0,3808,3807,1,0,
        0,0,3808,3809,1,0,0,0,3809,3810,1,0,0,0,3810,3846,3,816,408,0,3811,
        3812,5,191,0,0,3812,3813,5,99,0,0,3813,3815,5,257,0,0,3814,3816,
        3,422,211,0,3815,3814,1,0,0,0,3815,3816,1,0,0,0,3816,3817,1,0,0,
        0,3817,3820,5,62,0,0,3818,3821,3,814,407,0,3819,3821,5,99,0,0,3820,
        3818,1,0,0,0,3820,3819,1,0,0,0,3821,3822,1,0,0,0,3822,3823,5,331,
        0,0,3823,3846,3,818,409,0,3824,3825,5,191,0,0,3825,3827,5,175,0,
        0,3826,3828,3,422,211,0,3827,3826,1,0,0,0,3827,3828,1,0,0,0,3828,
        3829,1,0,0,0,3829,3843,3,788,394,0,3830,3832,5,105,0,0,3831,3830,
        1,0,0,0,3831,3832,1,0,0,0,3832,3833,1,0,0,0,3833,3834,5,2,0,0,3834,
        3839,5,209,0,0,3835,3836,5,6,0,0,3836,3838,5,209,0,0,3837,3835,1,
        0,0,0,3838,3841,1,0,0,0,3839,3837,1,0,0,0,3839,3840,1,0,0,0,3840,
        3842,1,0,0,0,3841,3839,1,0,0,0,3842,3844,5,3,0,0,3843,3831,1,0,0,
        0,3843,3844,1,0,0,0,3844,3846,1,0,0,0,3845,3638,1,0,0,0,3845,3670,
        1,0,0,0,3845,3689,1,0,0,0,3845,3701,1,0,0,0,3845,3710,1,0,0,0,3845,
        3721,1,0,0,0,3845,3737,1,0,0,0,3845,3747,1,0,0,0,3845,3760,1,0,0,
        0,3845,3771,1,0,0,0,3845,3778,1,0,0,0,3845,3787,1,0,0,0,3845,3793,
        1,0,0,0,3845,3805,1,0,0,0,3845,3811,1,0,0,0,3845,3824,1,0,0,0,3846,
        309,1,0,0,0,3847,3849,5,63,0,0,3848,3847,1,0,0,0,3848,3849,1,0,0,
        0,3849,3850,1,0,0,0,3850,3851,5,92,0,0,3851,3864,3,774,387,0,3852,
        3854,5,259,0,0,3853,3852,1,0,0,0,3853,3854,1,0,0,0,3854,3855,1,0,
        0,0,3855,3856,5,376,0,0,3856,3864,3,778,389,0,3857,3858,7,46,0,0,
        3858,3864,3,316,158,0,3859,3860,5,355,0,0,3860,3861,5,325,0,0,3861,
        3862,7,41,0,0,3862,3864,3,316,158,0,3863,3848,1,0,0,0,3863,3853,
        1,0,0,0,3863,3857,1,0,0,0,3863,3859,1,0,0,0,3864,311,1,0,0,0,3865,
        3866,5,198,0,0,3866,3882,5,357,0,0,3867,3868,5,131,0,0,3868,3882,
        5,446,0,0,3869,3882,5,204,0,0,3870,3882,5,452,0,0,3871,3882,5,331,
        0,0,3872,3882,5,318,0,0,3873,3882,5,451,0,0,3874,3875,5,63,0,0,3875,
        3876,5,174,0,0,3876,3882,5,381,0,0,3877,3879,5,295,0,0,3878,3877,
        1,0,0,0,3878,3879,1,0,0,0,3879,3880,1,0,0,0,3880,3882,5,247,0,0,
        3881,3865,1,0,0,0,3881,3867,1,0,0,0,3881,3869,1,0,0,0,3881,3870,
        1,0,0,0,3881,3871,1,0,0,0,3881,3872,1,0,0,0,3881,3873,1,0,0,0,3881,
        3874,1,0,0,0,3881,3878,1,0,0,0,3882,3883,1,0,0,0,3883,3890,3,818,
        409,0,3884,3885,5,323,0,0,3885,3890,3,790,395,0,3886,3887,5,175,
        0,0,3887,3890,3,788,394,0,3888,3890,3,176,88,0,3889,3881,1,0,0,0,
        3889,3884,1,0,0,0,3889,3886,1,0,0,0,3889,3888,1,0,0,0,3890,313,1,
        0,0,0,3891,3896,3,316,158,0,3892,3893,5,6,0,0,3893,3895,3,316,158,
        0,3894,3892,1,0,0,0,3895,3898,1,0,0,0,3896,3894,1,0,0,0,3896,3897,
        1,0,0,0,3897,315,1,0,0,0,3898,3896,1,0,0,0,3899,3901,3,818,409,0,
        3900,3902,3,318,159,0,3901,3900,1,0,0,0,3901,3902,1,0,0,0,3902,317,
        1,0,0,0,3903,3904,5,11,0,0,3904,3906,3,824,412,0,3905,3903,1,0,0,
        0,3906,3907,1,0,0,0,3907,3905,1,0,0,0,3907,3908,1,0,0,0,3908,319,
        1,0,0,0,3909,3911,5,358,0,0,3910,3912,5,92,0,0,3911,3910,1,0,0,0,
        3911,3912,1,0,0,0,3912,3913,1,0,0,0,3913,3918,3,322,161,0,3914,3915,
        5,6,0,0,3915,3917,3,322,161,0,3916,3914,1,0,0,0,3917,3920,1,0,0,
        0,3918,3916,1,0,0,0,3918,3919,1,0,0,0,3919,3923,1,0,0,0,3920,3918,
        1,0,0,0,3921,3922,7,47,0,0,3922,3924,5,219,0,0,3923,3921,1,0,0,0,
        3923,3924,1,0,0,0,3924,3926,1,0,0,0,3925,3927,3,96,48,0,3926,3925,
        1,0,0,0,3926,3927,1,0,0,0,3927,321,1,0,0,0,3928,3930,5,81,0,0,3929,
        3928,1,0,0,0,3929,3930,1,0,0,0,3930,3931,1,0,0,0,3931,3933,3,774,
        387,0,3932,3934,5,9,0,0,3933,3932,1,0,0,0,3933,3934,1,0,0,0,3934,
        323,1,0,0,0,3935,3936,5,159,0,0,3936,3995,5,80,0,0,3937,3996,3,310,
        155,0,3938,3996,3,312,156,0,3939,3940,5,44,0,0,3940,3942,3,818,409,
        0,3941,3943,3,318,159,0,3942,3941,1,0,0,0,3942,3943,1,0,0,0,3943,
        3944,1,0,0,0,3944,3945,5,11,0,0,3945,3946,3,800,400,0,3946,3996,
        1,0,0,0,3947,3948,7,32,0,0,3948,3996,3,652,326,0,3949,3950,5,136,
        0,0,3950,3996,3,394,197,0,3951,3952,5,211,0,0,3952,3996,3,382,191,
        0,3953,3954,5,278,0,0,3954,3996,3,416,208,0,3955,3956,5,45,0,0,3956,
        3957,3,818,409,0,3957,3963,5,80,0,0,3958,3964,3,774,387,0,3959,3961,
        5,189,0,0,3960,3959,1,0,0,0,3960,3961,1,0,0,0,3961,3962,1,0,0,0,
        3962,3964,3,316,158,0,3963,3958,1,0,0,0,3963,3960,1,0,0,0,3964,3996,
        1,0,0,0,3965,3966,7,44,0,0,3966,3967,3,818,409,0,3967,3968,5,80,
        0,0,3968,3969,3,316,158,0,3969,3996,1,0,0,0,3970,3971,5,296,0,0,
        3971,3996,3,378,189,0,3972,3973,5,442,0,0,3973,3996,3,374,187,0,
        3974,3975,5,443,0,0,3975,3976,5,62,0,0,3976,3977,3,652,326,0,3977,
        3978,5,247,0,0,3978,3979,3,818,409,0,3979,3996,1,0,0,0,3980,3981,
        5,278,0,0,3981,3982,7,31,0,0,3982,3983,3,316,158,0,3983,3984,3,170,
        85,0,3984,3996,1,0,0,0,3985,3986,5,248,0,0,3986,3987,5,274,0,0,3987,
        3996,3,202,101,0,3988,3989,5,41,0,0,3989,3990,5,2,0,0,3990,3991,
        3,652,326,0,3991,3992,5,36,0,0,3992,3993,3,652,326,0,3993,3994,5,
        3,0,0,3994,3996,1,0,0,0,3995,3937,1,0,0,0,3995,3938,1,0,0,0,3995,
        3939,1,0,0,0,3995,3947,1,0,0,0,3995,3949,1,0,0,0,3995,3951,1,0,0,
        0,3995,3953,1,0,0,0,3995,3955,1,0,0,0,3995,3965,1,0,0,0,3995,3970,
        1,0,0,0,3995,3972,1,0,0,0,3995,3974,1,0,0,0,3995,3980,1,0,0,0,3995,
        3985,1,0,0,0,3995,3988,1,0,0,0,3996,3997,1,0,0,0,3997,4000,5,116,
        0,0,3998,4001,3,808,404,0,3999,4001,5,78,0,0,4000,3998,1,0,0,0,4000,
        3999,1,0,0,0,4001,325,1,0,0,0,4002,4003,5,327,0,0,4003,4006,5,246,
        0,0,4004,4005,5,62,0,0,4005,4007,3,58,29,0,4006,4004,1,0,0,0,4006,
        4007,1,0,0,0,4007,4008,1,0,0,0,4008,4026,5,80,0,0,4009,4010,7,32,
        0,0,4010,4027,3,652,326,0,4011,4012,5,136,0,0,4012,4027,3,394,197,
        0,4013,4014,5,44,0,0,4014,4027,3,800,400,0,4015,4016,5,211,0,0,4016,
        4027,3,382,191,0,4017,4018,5,248,0,0,4018,4019,5,274,0,0,4019,4027,
        3,202,101,0,4020,4021,5,296,0,0,4021,4027,3,378,189,0,4022,4023,
        5,442,0,0,4023,4027,3,374,187,0,4024,4027,3,310,155,0,4025,4027,
        3,312,156,0,4026,4009,1,0,0,0,4026,4011,1,0,0,0,4026,4013,1,0,0,
        0,4026,4015,1,0,0,0,4026,4017,1,0,0,0,4026,4020,1,0,0,0,4026,4022,
        1,0,0,0,4026,4024,1,0,0,0,4026,4025,1,0,0,0,4027,4028,1,0,0,0,4028,
        4031,5,116,0,0,4029,4032,3,808,404,0,4030,4032,5,78,0,0,4031,4029,
        1,0,0,0,4031,4030,1,0,0,0,4032,327,1,0,0,0,4033,4034,7,48,0,0,4034,
        4035,3,330,165,0,4035,329,1,0,0,0,4036,4038,7,49,0,0,4037,4036,1,
        0,0,0,4037,4038,1,0,0,0,4038,4040,1,0,0,0,4039,4041,3,332,166,0,
        4040,4039,1,0,0,0,4040,4041,1,0,0,0,4041,4042,1,0,0,0,4042,4080,
        3,818,409,0,4043,4045,7,50,0,0,4044,4043,1,0,0,0,4044,4045,1,0,0,
        0,4045,4046,1,0,0,0,4046,4048,3,812,406,0,4047,4049,3,332,166,0,
        4048,4047,1,0,0,0,4048,4049,1,0,0,0,4049,4050,1,0,0,0,4050,4051,
        3,818,409,0,4051,4080,1,0,0,0,4052,4054,5,210,0,0,4053,4055,3,812,
        406,0,4054,4053,1,0,0,0,4054,4055,1,0,0,0,4055,4057,1,0,0,0,4056,
        4058,3,332,166,0,4057,4056,1,0,0,0,4057,4058,1,0,0,0,4058,4059,1,
        0,0,0,4059,4080,3,818,409,0,4060,4062,5,210,0,0,4061,4060,1,0,0,
        0,4061,4062,1,0,0,0,4062,4063,1,0,0,0,4063,4065,5,30,0,0,4064,4066,
        3,332,166,0,4065,4064,1,0,0,0,4065,4066,1,0,0,0,4066,4067,1,0,0,
        0,4067,4080,3,818,409,0,4068,4073,5,144,0,0,4069,4071,5,30,0,0,4070,
        4069,1,0,0,0,4070,4071,1,0,0,0,4071,4074,1,0,0,0,4072,4074,3,812,
        406,0,4073,4070,1,0,0,0,4073,4072,1,0,0,0,4074,4076,1,0,0,0,4075,
        4077,3,332,166,0,4076,4075,1,0,0,0,4076,4077,1,0,0,0,4077,4078,1,
        0,0,0,4078,4080,3,818,409,0,4079,4037,1,0,0,0,4079,4044,1,0,0,0,
        4079,4052,1,0,0,0,4079,4061,1,0,0,0,4079,4068,1,0,0,0,4080,331,1,
        0,0,0,4081,4082,7,51,0,0,4082,333,1,0,0,0,4083,4084,5,65,0,0,4084,
        4085,3,338,169,0,4085,4086,5,80,0,0,4086,4087,3,344,172,0,4087,4088,
        5,94,0,0,4088,4092,3,346,173,0,4089,4090,5,105,0,0,4090,4091,5,65,
        0,0,4091,4093,5,279,0,0,4092,4089,1,0,0,0,4092,4093,1,0,0,0,4093,
        335,1,0,0,0,4094,4098,5,317,0,0,4095,4096,5,65,0,0,4096,4097,5,279,
        0,0,4097,4099,5,62,0,0,4098,4095,1,0,0,0,4098,4099,1,0,0,0,4099,
        4100,1,0,0,0,4100,4101,3,338,169,0,4101,4102,5,80,0,0,4102,4103,
        3,344,172,0,4103,4104,5,64,0,0,4104,4106,3,346,173,0,4105,4107,3,
        96,48,0,4106,4105,1,0,0,0,4106,4107,1,0,0,0,4107,337,1,0,0,0,4108,
        4113,3,342,171,0,4109,4110,5,6,0,0,4110,4112,3,342,171,0,4111,4109,
        1,0,0,0,4112,4115,1,0,0,0,4113,4111,1,0,0,0,4113,4114,1,0,0,0,4114,
        4132,1,0,0,0,4115,4113,1,0,0,0,4116,4118,5,30,0,0,4117,4119,5,294,
        0,0,4118,4117,1,0,0,0,4118,4119,1,0,0,0,4119,4121,1,0,0,0,4120,4122,
        3,144,72,0,4121,4120,1,0,0,0,4121,4122,1,0,0,0,4122,4132,1,0,0,0,
        4123,4128,3,340,170,0,4124,4125,5,6,0,0,4125,4127,3,340,170,0,4126,
        4124,1,0,0,0,4127,4130,1,0,0,0,4128,4126,1,0,0,0,4128,4129,1,0,0,
        0,4129,4132,1,0,0,0,4130,4128,1,0,0,0,4131,4108,1,0,0,0,4131,4116,
        1,0,0,0,4131,4123,1,0,0,0,4132,339,1,0,0,0,4133,4134,7,52,0,0,4134,
        341,1,0,0,0,4135,4140,5,88,0,0,4136,4140,5,86,0,0,4137,4140,5,46,
        0,0,4138,4140,3,818,409,0,4139,4135,1,0,0,0,4139,4136,1,0,0,0,4139,
        4137,1,0,0,0,4139,4138,1,0,0,0,4140,4142,1,0,0,0,4141,4143,3,144,
        72,0,4142,4141,1,0,0,0,4142,4143,1,0,0,0,4143,343,1,0,0,0,4144,4145,
        5,92,0,0,4145,4190,3,762,381,0,4146,4148,5,328,0,0,4147,4146,1,0,
        0,0,4147,4148,1,0,0,0,4148,4149,1,0,0,0,4149,4190,3,760,380,0,4150,
        4154,5,63,0,0,4151,4152,5,174,0,0,4152,4155,5,381,0,0,4153,4155,
        5,331,0,0,4154,4151,1,0,0,0,4154,4153,1,0,0,0,4155,4158,1,0,0,0,
        4156,4158,5,247,0,0,4157,4150,1,0,0,0,4157,4156,1,0,0,0,4158,4159,
        1,0,0,0,4159,4190,3,784,392,0,4160,4161,5,211,0,0,4161,4190,3,380,
        190,0,4162,4163,5,296,0,0,4163,4190,3,376,188,0,4164,4165,5,442,
        0,0,4165,4190,3,372,186,0,4166,4167,5,175,0,0,4167,4190,3,766,383,
        0,4168,4169,7,32,0,0,4169,4190,3,314,157,0,4170,4171,5,248,0,0,4171,
        4172,5,274,0,0,4172,4177,3,202,101,0,4173,4174,5,6,0,0,4174,4176,
        3,202,101,0,4175,4173,1,0,0,0,4176,4179,1,0,0,0,4177,4175,1,0,0,
        0,4177,4178,1,0,0,0,4178,4190,1,0,0,0,4179,4177,1,0,0,0,4180,4181,
        5,323,0,0,4181,4190,3,764,382,0,4182,4183,5,351,0,0,4183,4190,3,
        782,391,0,4184,4185,5,30,0,0,4185,4186,7,53,0,0,4186,4187,5,68,0,
        0,4187,4188,5,323,0,0,4188,4190,3,764,382,0,4189,4144,1,0,0,0,4189,
        4147,1,0,0,0,4189,4157,1,0,0,0,4189,4160,1,0,0,0,4189,4162,1,0,0,
        0,4189,4164,1,0,0,0,4189,4166,1,0,0,0,4189,4168,1,0,0,0,4189,4170,
        1,0,0,0,4189,4180,1,0,0,0,4189,4182,1,0,0,0,4189,4184,1,0,0,0,4190,
        345,1,0,0,0,4191,4193,5,66,0,0,4192,4191,1,0,0,0,4192,4193,1,0,0,
        0,4193,4194,1,0,0,0,4194,4195,3,814,407,0,4195,4203,1,0,0,0,4196,
        4198,5,6,0,0,4197,4199,5,66,0,0,4198,4197,1,0,0,0,4198,4199,1,0,
        0,0,4199,4200,1,0,0,0,4200,4202,3,814,407,0,4201,4196,1,0,0,0,4202,
        4205,1,0,0,0,4203,4201,1,0,0,0,4203,4204,1,0,0,0,4204,347,1,0,0,
        0,4205,4203,1,0,0,0,4206,4207,5,65,0,0,4207,4212,3,342,171,0,4208,
        4209,5,6,0,0,4209,4211,3,342,171,0,4210,4208,1,0,0,0,4211,4214,1,
        0,0,0,4212,4210,1,0,0,0,4212,4213,1,0,0,0,4213,4215,1,0,0,0,4214,
        4212,1,0,0,0,4215,4216,5,94,0,0,4216,4220,3,816,408,0,4217,4218,
        5,105,0,0,4218,4219,5,134,0,0,4219,4221,5,279,0,0,4220,4217,1,0,
        0,0,4220,4221,1,0,0,0,4221,4225,1,0,0,0,4222,4223,5,214,0,0,4223,
        4224,5,147,0,0,4224,4226,3,814,407,0,4225,4222,1,0,0,0,4225,4226,
        1,0,0,0,4226,349,1,0,0,0,4227,4231,5,317,0,0,4228,4229,5,134,0,0,
        4229,4230,5,279,0,0,4230,4232,5,62,0,0,4231,4228,1,0,0,0,4231,4232,
        1,0,0,0,4232,4233,1,0,0,0,4233,4238,3,342,171,0,4234,4235,5,6,0,
        0,4235,4237,3,342,171,0,4236,4234,1,0,0,0,4237,4240,1,0,0,0,4238,
        4236,1,0,0,0,4238,4239,1,0,0,0,4239,4241,1,0,0,0,4240,4238,1,0,0,
        0,4241,4242,5,64,0,0,4242,4246,3,816,408,0,4243,4244,5,214,0,0,4244,
        4245,5,147,0,0,4245,4247,3,814,407,0,4246,4243,1,0,0,0,4246,4247,
        1,0,0,0,4247,4249,1,0,0,0,4248,4250,3,96,48,0,4249,4248,1,0,0,0,
        4249,4250,1,0,0,0,4250,351,1,0,0,0,4251,4252,5,138,0,0,4252,4253,
        5,53,0,0,4253,4262,5,294,0,0,4254,4255,5,68,0,0,4255,4256,5,323,
        0,0,4256,4261,3,764,382,0,4257,4258,5,62,0,0,4258,4259,7,2,0,0,4259,
        4261,3,816,408,0,4260,4254,1,0,0,0,4260,4257,1,0,0,0,4261,4264,1,
        0,0,0,4262,4260,1,0,0,0,4262,4263,1,0,0,0,4263,4265,1,0,0,0,4264,
        4262,1,0,0,0,4265,4266,3,354,177,0,4266,353,1,0,0,0,4267,4268,5,
        65,0,0,4268,4269,3,338,169,0,4269,4270,5,80,0,0,4270,4271,3,356,
        178,0,4271,4272,5,94,0,0,4272,4276,3,346,173,0,4273,4274,5,105,0,
        0,4274,4275,5,65,0,0,4275,4277,5,279,0,0,4276,4273,1,0,0,0,4276,
        4277,1,0,0,0,4277,4293,1,0,0,0,4278,4282,5,317,0,0,4279,4280,5,65,
        0,0,4280,4281,5,279,0,0,4281,4283,5,62,0,0,4282,4279,1,0,0,0,4282,
        4283,1,0,0,0,4283,4284,1,0,0,0,4284,4285,3,338,169,0,4285,4286,5,
        80,0,0,4286,4287,3,356,178,0,4287,4288,5,64,0,0,4288,4290,3,346,
        173,0,4289,4291,3,96,48,0,4290,4289,1,0,0,0,4290,4291,1,0,0,0,4291,
        4293,1,0,0,0,4292,4267,1,0,0,0,4292,4278,1,0,0,0,4293,355,1,0,0,
        0,4294,4295,7,54,0,0,4295,357,1,0,0,0,4296,4298,5,46,0,0,4297,4299,
        5,98,0,0,4298,4297,1,0,0,0,4298,4299,1,0,0,0,4299,4300,1,0,0,0,4300,
        4302,5,226,0,0,4301,4303,5,109,0,0,4302,4301,1,0,0,0,4302,4303,1,
        0,0,0,4303,4305,1,0,0,0,4304,4306,3,294,147,0,4305,4304,1,0,0,0,
        4305,4306,1,0,0,0,4306,4308,1,0,0,0,4307,4309,3,818,409,0,4308,4307,
        1,0,0,0,4308,4309,1,0,0,0,4309,4310,1,0,0,0,4310,4311,5,80,0,0,4311,
        4313,3,624,312,0,4312,4314,3,170,85,0,4313,4312,1,0,0,0,4313,4314,
        1,0,0,0,4314,4315,1,0,0,0,4315,4318,3,360,180,0,4316,4317,5,441,
        0,0,4317,4319,3,360,180,0,4318,4316,1,0,0,0,4318,4319,1,0,0,0,4319,
        4325,1,0,0,0,4320,4322,5,273,0,0,4321,4323,5,77,0,0,4322,4321,1,
        0,0,0,4322,4323,1,0,0,0,4323,4324,1,0,0,0,4324,4326,5,56,0,0,4325,
        4320,1,0,0,0,4325,4326,1,0,0,0,4326,4328,1,0,0,0,4327,4329,3,102,
        51,0,4328,4327,1,0,0,0,4328,4329,1,0,0,0,4329,4331,1,0,0,0,4330,
        4332,3,176,88,0,4331,4330,1,0,0,0,4331,4332,1,0,0,0,4332,4334,1,
        0,0,0,4333,4335,3,638,319,0,4334,4333,1,0,0,0,4334,4335,1,0,0,0,
        4335,359,1,0,0,0,4336,4337,5,2,0,0,4337,4342,3,362,181,0,4338,4339,
        5,6,0,0,4339,4341,3,362,181,0,4340,4338,1,0,0,0,4341,4344,1,0,0,
        0,4342,4340,1,0,0,0,4342,4343,1,0,0,0,4343,4345,1,0,0,0,4344,4342,
        1,0,0,0,4345,4346,5,3,0,0,4346,361,1,0,0,0,4347,4354,3,800,400,0,
        4348,4354,3,688,344,0,4349,4350,5,2,0,0,4350,4351,3,674,337,0,4351,
        4352,5,3,0,0,4352,4354,1,0,0,0,4353,4347,1,0,0,0,4353,4348,1,0,0,
        0,4353,4349,1,0,0,0,4354,4356,1,0,0,0,4355,4357,3,98,49,0,4356,4355,
        1,0,0,0,4356,4357,1,0,0,0,4357,4364,1,0,0,0,4358,4360,3,316,158,
        0,4359,4358,1,0,0,0,4359,4360,1,0,0,0,4360,4365,1,0,0,0,4361,4362,
        3,316,158,0,4362,4363,3,100,50,0,4363,4365,1,0,0,0,4364,4359,1,0,
        0,0,4364,4361,1,0,0,0,4365,4367,1,0,0,0,4366,4368,7,55,0,0,4367,
        4366,1,0,0,0,4367,4368,1,0,0,0,4368,4371,1,0,0,0,4369,4370,5,273,
        0,0,4370,4372,7,56,0,0,4371,4369,1,0,0,0,4371,4372,1,0,0,0,4372,
        363,1,0,0,0,4373,4375,5,46,0,0,4374,4376,3,366,183,0,4375,4374,1,
        0,0,0,4375,4376,1,0,0,0,4376,4381,1,0,0,0,4377,4378,5,211,0,0,4378,
        4382,3,804,402,0,4379,4380,5,296,0,0,4380,4382,3,798,399,0,4381,
        4377,1,0,0,0,4381,4379,1,0,0,0,4382,4383,1,0,0,0,4383,4392,5,2,0,
        0,4384,4389,3,390,195,0,4385,4386,5,6,0,0,4386,4388,3,390,195,0,
        4387,4385,1,0,0,0,4388,4391,1,0,0,0,4389,4387,1,0,0,0,4389,4390,
        1,0,0,0,4390,4393,1,0,0,0,4391,4389,1,0,0,0,4392,4384,1,0,0,0,4392,
        4393,1,0,0,0,4393,4394,1,0,0,0,4394,4395,5,3,0,0,4395,4412,1,0,0,
        0,4396,4410,5,316,0,0,4397,4411,3,388,194,0,4398,4399,5,92,0,0,4399,
        4400,5,2,0,0,4400,4405,3,402,201,0,4401,4402,5,6,0,0,4402,4404,3,
        402,201,0,4403,4401,1,0,0,0,4404,4407,1,0,0,0,4405,4403,1,0,0,0,
        4405,4406,1,0,0,0,4406,4408,1,0,0,0,4407,4405,1,0,0,0,4408,4409,
        5,3,0,0,4409,4411,1,0,0,0,4410,4397,1,0,0,0,4410,4398,1,0,0,0,4411,
        4413,1,0,0,0,4412,4396,1,0,0,0,4412,4413,1,0,0,0,4413,4415,1,0,0,
        0,4414,4416,3,398,199,0,4415,4414,1,0,0,0,4416,4417,1,0,0,0,4417,
        4415,1,0,0,0,4417,4418,1,0,0,0,4418,4424,1,0,0,0,4419,4420,5,105,
        0,0,4420,4421,5,2,0,0,4421,4422,3,784,392,0,4422,4423,5,3,0,0,4423,
        4425,1,0,0,0,4424,4419,1,0,0,0,4424,4425,1,0,0,0,4425,365,1,0,0,
        0,4426,4427,5,82,0,0,4427,4428,5,311,0,0,4428,367,1,0,0,0,4429,4431,
        5,2,0,0,4430,4432,3,370,185,0,4431,4430,1,0,0,0,4431,4432,1,0,0,
        0,4432,4433,1,0,0,0,4433,4434,5,3,0,0,4434,369,1,0,0,0,4435,4440,
        3,384,192,0,4436,4437,5,6,0,0,4437,4439,3,384,192,0,4438,4436,1,
        0,0,0,4439,4442,1,0,0,0,4440,4438,1,0,0,0,4440,4441,1,0,0,0,4441,
        371,1,0,0,0,4442,4440,1,0,0,0,4443,4448,3,374,187,0,4444,4445,5,
        6,0,0,4445,4447,3,374,187,0,4446,4444,1,0,0,0,4447,4450,1,0,0,0,
        4448,4446,1,0,0,0,4448,4449,1,0,0,0,4449,373,1,0,0,0,4450,4448,1,
        0,0,0,4451,4452,3,794,397,0,4452,4453,3,368,184,0,4453,4457,1,0,
        0,0,4454,4457,3,832,416,0,4455,4457,3,780,390,0,4456,4451,1,0,0,
        0,4456,4454,1,0,0,0,4456,4455,1,0,0,0,4457,375,1,0,0,0,4458,4463,
        3,378,189,0,4459,4460,5,6,0,0,4460,4462,3,378,189,0,4461,4459,1,
        0,0,0,4462,4465,1,0,0,0,4463,4461,1,0,0,0,4463,4464,1,0,0,0,4464,
        377,1,0,0,0,4465,4463,1,0,0,0,4466,4467,3,796,398,0,4467,4468,3,
        368,184,0,4468,4472,1,0,0,0,4469,4472,3,832,416,0,4470,4472,3,780,
        390,0,4471,4466,1,0,0,0,4471,4469,1,0,0,0,4471,4470,1,0,0,0,4472,
        379,1,0,0,0,4473,4478,3,382,191,0,4474,4475,5,6,0,0,4475,4477,3,
        382,191,0,4476,4474,1,0,0,0,4477,4480,1,0,0,0,4478,4476,1,0,0,0,
        4478,4479,1,0,0,0,4479,381,1,0,0,0,4480,4478,1,0,0,0,4481,4482,3,
        806,403,0,4482,4483,3,368,184,0,4483,4487,1,0,0,0,4484,4487,3,832,
        416,0,4485,4487,3,780,390,0,4486,4481,1,0,0,0,4486,4484,1,0,0,0,
        4486,4485,1,0,0,0,4487,383,1,0,0,0,4488,4490,3,386,193,0,4489,4491,
        3,820,410,0,4490,4489,1,0,0,0,4490,4491,1,0,0,0,4491,4497,1,0,0,
        0,4492,4494,3,820,410,0,4493,4495,3,386,193,0,4494,4493,1,0,0,0,
        4494,4495,1,0,0,0,4495,4497,1,0,0,0,4496,4488,1,0,0,0,4496,4492,
        1,0,0,0,4496,4497,1,0,0,0,4497,4498,1,0,0,0,4498,4499,3,388,194,
        0,4499,385,1,0,0,0,4500,4502,5,68,0,0,4501,4503,5,453,0,0,4502,4501,
        1,0,0,0,4502,4503,1,0,0,0,4503,4508,1,0,0,0,4504,4508,5,453,0,0,
        4505,4508,5,400,0,0,4506,4508,5,101,0,0,4507,4500,1,0,0,0,4507,4504,
        1,0,0,0,4507,4505,1,0,0,0,4507,4506,1,0,0,0,4508,387,1,0,0,0,4509,
        4519,3,652,326,0,4510,4512,5,415,0,0,4511,4510,1,0,0,0,4511,4512,
        1,0,0,0,4512,4513,1,0,0,0,4513,4514,3,820,410,0,4514,4515,3,318,
        159,0,4515,4516,5,27,0,0,4516,4517,5,360,0,0,4517,4519,1,0,0,0,4518,
        4509,1,0,0,0,4518,4511,1,0,0,0,4519,389,1,0,0,0,4520,4523,3,384,
        192,0,4521,4522,7,57,0,0,4522,4524,3,674,337,0,4523,4521,1,0,0,0,
        4523,4524,1,0,0,0,4524,391,1,0,0,0,4525,4535,5,2,0,0,4526,4536,5,
        9,0,0,4527,4529,3,370,185,0,4528,4527,1,0,0,0,4528,4529,1,0,0,0,
        4529,4533,1,0,0,0,4530,4531,5,83,0,0,4531,4532,5,147,0,0,4532,4534,
        3,370,185,0,4533,4530,1,0,0,0,4533,4534,1,0,0,0,4534,4536,1,0,0,
        0,4535,4526,1,0,0,0,4535,4528,1,0,0,0,4536,4537,1,0,0,0,4537,4538,
        5,3,0,0,4538,393,1,0,0,0,4539,4540,3,806,403,0,4540,4541,3,392,196,
        0,4541,395,1,0,0,0,4542,4543,5,316,0,0,4543,4546,5,78,0,0,4544,4546,
        5,149,0,0,4545,4542,1,0,0,0,4545,4544,1,0,0,0,4546,4547,1,0,0,0,
        4547,4548,5,80,0,0,4548,4549,5,78,0,0,4549,4572,5,458,0,0,4550,4572,
        5,346,0,0,4551,4572,5,222,0,0,4552,4572,5,338,0,0,4553,4572,5,377,
        0,0,4554,4556,5,205,0,0,4555,4554,1,0,0,0,4555,4556,1,0,0,0,4556,
        4557,1,0,0,0,4557,4558,5,327,0,0,4558,4572,7,58,0,0,4559,4572,5,
        250,0,0,4560,4561,5,77,0,0,4561,4572,5,250,0,0,4562,4563,7,59,0,
        0,4563,4572,3,202,101,0,4564,4565,5,459,0,0,4565,4572,3,316,158,
        0,4566,4567,5,333,0,0,4567,4572,3,42,21,0,4568,4572,3,60,30,0,4569,
        4570,5,460,0,0,4570,4572,3,818,409,0,4571,4545,1,0,0,0,4571,4550,
        1,0,0,0,4571,4551,1,0,0,0,4571,4552,1,0,0,0,4571,4553,1,0,0,0,4571,
        4555,1,0,0,0,4571,4559,1,0,0,0,4571,4560,1,0,0,0,4571,4562,1,0,0,
        0,4571,4564,1,0,0,0,4571,4566,1,0,0,0,4571,4568,1,0,0,0,4571,4569,
        1,0,0,0,4572,397,1,0,0,0,4573,4574,5,36,0,0,4574,4575,3,808,404,
        0,4575,4576,3,462,231,0,4576,4609,1,0,0,0,4577,4578,5,247,0,0,4578,
        4609,3,58,29,0,4579,4580,5,443,0,0,4580,4581,5,62,0,0,4581,4582,
        5,360,0,0,4582,4589,3,652,326,0,4583,4584,5,6,0,0,4584,4585,5,62,
        0,0,4585,4586,5,360,0,0,4586,4588,3,652,326,0,4587,4583,1,0,0,0,
        4588,4591,1,0,0,0,4589,4587,1,0,0,0,4589,4590,1,0,0,0,4590,4609,
        1,0,0,0,4591,4589,1,0,0,0,4592,4609,5,104,0,0,4593,4594,5,333,0,
        0,4594,4601,3,818,409,0,4595,4596,5,94,0,0,4596,4602,3,818,409,0,
        4597,4598,5,10,0,0,4598,4602,3,818,409,0,4599,4600,5,64,0,0,4600,
        4602,5,434,0,0,4601,4595,1,0,0,0,4601,4597,1,0,0,0,4601,4599,1,0,
        0,0,4602,4609,1,0,0,0,4603,4604,5,36,0,0,4604,4609,3,818,409,0,4605,
        4609,3,4,2,0,4606,4609,3,396,198,0,4607,4609,3,818,409,0,4608,4573,
        1,0,0,0,4608,4577,1,0,0,0,4608,4579,1,0,0,0,4608,4592,1,0,0,0,4608,
        4593,1,0,0,0,4608,4603,1,0,0,0,4608,4605,1,0,0,0,4608,4606,1,0,0,
        0,4608,4607,1,0,0,0,4609,399,1,0,0,0,4610,4611,5,105,0,0,4611,4612,
        3,284,142,0,4612,401,1,0,0,0,4613,4614,3,800,400,0,4614,4615,3,388,
        194,0,4615,403,1,0,0,0,4616,4623,5,138,0,0,4617,4618,5,211,0,0,4618,
        4624,3,382,191,0,4619,4620,5,296,0,0,4620,4624,3,378,189,0,4621,
        4622,5,442,0,0,4622,4624,3,374,187,0,4623,4617,1,0,0,0,4623,4619,
        1,0,0,0,4623,4621,1,0,0,0,4624,4626,1,0,0,0,4625,4627,3,396,198,
        0,4626,4625,1,0,0,0,4627,4628,1,0,0,0,4628,4626,1,0,0,0,4628,4629,
        1,0,0,0,4629,4631,1,0,0,0,4630,4632,5,315,0,0,4631,4630,1,0,0,0,
        4631,4632,1,0,0,0,4632,405,1,0,0,0,4633,4649,5,191,0,0,4634,4636,
        5,211,0,0,4635,4637,3,422,211,0,4636,4635,1,0,0,0,4636,4637,1,0,
        0,0,4637,4638,1,0,0,0,4638,4650,3,380,190,0,4639,4641,5,296,0,0,
        4640,4642,3,422,211,0,4641,4640,1,0,0,0,4641,4642,1,0,0,0,4642,4643,
        1,0,0,0,4643,4650,3,376,188,0,4644,4646,5,442,0,0,4645,4647,3,422,
        211,0,4646,4645,1,0,0,0,4646,4647,1,0,0,0,4647,4648,1,0,0,0,4648,
        4650,3,372,186,0,4649,4634,1,0,0,0,4649,4639,1,0,0,0,4649,4644,1,
        0,0,0,4650,4652,1,0,0,0,4651,4653,3,96,48,0,4652,4651,1,0,0,0,4652,
        4653,1,0,0,0,4653,407,1,0,0,0,4654,4655,5,191,0,0,4655,4657,5,136,
        0,0,4656,4658,3,422,211,0,4657,4656,1,0,0,0,4657,4658,1,0,0,0,4658,
        4659,1,0,0,0,4659,4664,3,394,197,0,4660,4661,5,6,0,0,4661,4663,3,
        394,197,0,4662,4660,1,0,0,0,4663,4666,1,0,0,0,4664,4662,1,0,0,0,
        4664,4665,1,0,0,0,4665,4668,1,0,0,0,4666,4664,1,0,0,0,4667,4669,
        3,96,48,0,4668,4667,1,0,0,0,4668,4669,1,0,0,0,4669,409,1,0,0,0,4670,
        4671,5,191,0,0,4671,4673,5,278,0,0,4672,4674,3,422,211,0,4673,4672,
        1,0,0,0,4673,4674,1,0,0,0,4674,4675,1,0,0,0,4675,4680,3,416,208,
        0,4676,4677,5,6,0,0,4677,4679,3,416,208,0,4678,4676,1,0,0,0,4679,
        4682,1,0,0,0,4680,4678,1,0,0,0,4680,4681,1,0,0,0,4681,4684,1,0,0,
        0,4682,4680,1,0,0,0,4683,4685,3,96,48,0,4684,4683,1,0,0,0,4684,4685,
        1,0,0,0,4685,411,1,0,0,0,4686,4699,5,2,0,0,4687,4690,3,652,326,0,
        4688,4689,5,6,0,0,4689,4691,3,652,326,0,4690,4688,1,0,0,0,4690,4691,
        1,0,0,0,4691,4700,1,0,0,0,4692,4693,5,407,0,0,4693,4694,5,6,0,0,
        4694,4700,3,652,326,0,4695,4696,3,652,326,0,4696,4697,5,6,0,0,4697,
        4698,5,407,0,0,4698,4700,1,0,0,0,4699,4687,1,0,0,0,4699,4692,1,0,
        0,0,4699,4695,1,0,0,0,4700,4701,1,0,0,0,4701,4702,5,3,0,0,4702,413,
        1,0,0,0,4703,4704,3,818,409,0,4704,4705,5,11,0,0,4705,4707,1,0,0,
        0,4706,4703,1,0,0,0,4707,4710,1,0,0,0,4708,4706,1,0,0,0,4708,4709,
        1,0,0,0,4709,4711,1,0,0,0,4710,4708,1,0,0,0,4711,4712,3,720,360,
        0,4712,415,1,0,0,0,4713,4714,3,414,207,0,4714,4715,3,412,206,0,4715,
        417,1,0,0,0,4716,4720,5,57,0,0,4717,4721,3,808,404,0,4718,4719,5,
        247,0,0,4719,4721,3,58,29,0,4720,4717,1,0,0,0,4720,4718,1,0,0,0,
        4721,4722,1,0,0,0,4722,4720,1,0,0,0,4722,4723,1,0,0,0,4723,419,1,
        0,0,0,4724,4725,5,46,0,0,4725,4726,5,41,0,0,4726,4727,5,2,0,0,4727,
        4728,3,652,326,0,4728,4729,5,36,0,0,4729,4730,3,652,326,0,4730,4747,
        5,3,0,0,4731,4732,5,379,0,0,4732,4735,5,211,0,0,4733,4734,5,36,0,
        0,4734,4736,7,60,0,0,4735,4733,1,0,0,0,4735,4736,1,0,0,0,4736,4748,
        1,0,0,0,4737,4741,5,105,0,0,4738,4739,5,211,0,0,4739,4742,3,382,
        191,0,4740,4742,5,400,0,0,4741,4738,1,0,0,0,4741,4740,1,0,0,0,4742,
        4745,1,0,0,0,4743,4744,5,36,0,0,4744,4746,7,60,0,0,4745,4743,1,0,
        0,0,4745,4746,1,0,0,0,4746,4748,1,0,0,0,4747,4731,1,0,0,0,4747,4737,
        1,0,0,0,4748,421,1,0,0,0,4749,4750,5,220,0,0,4750,4751,5,396,0,0,
        4751,423,1,0,0,0,4752,4754,5,46,0,0,4753,4755,3,366,183,0,4754,4753,
        1,0,0,0,4754,4755,1,0,0,0,4755,4756,1,0,0,0,4756,4757,5,443,0,0,
        4757,4758,5,62,0,0,4758,4759,3,652,326,0,4759,4760,5,247,0,0,4760,
        4761,3,818,409,0,4761,4776,5,2,0,0,4762,4763,5,64,0,0,4763,4767,
        3,426,213,0,4764,4765,5,6,0,0,4765,4766,5,94,0,0,4766,4768,3,426,
        213,0,4767,4764,1,0,0,0,4767,4768,1,0,0,0,4768,4777,1,0,0,0,4769,
        4770,5,94,0,0,4770,4774,3,426,213,0,4771,4772,5,6,0,0,4772,4773,
        5,64,0,0,4773,4775,3,426,213,0,4774,4771,1,0,0,0,4774,4775,1,0,0,
        0,4775,4777,1,0,0,0,4776,4762,1,0,0,0,4776,4769,1,0,0,0,4777,4778,
        1,0,0,0,4778,4779,5,3,0,0,4779,425,1,0,0,0,4780,4781,5,461,0,0,4781,
        4782,5,105,0,0,4782,4783,5,211,0,0,4783,4784,3,382,191,0,4784,427,
        1,0,0,0,4785,4796,5,306,0,0,4786,4787,5,2,0,0,4787,4792,5,128,0,
        0,4788,4789,5,6,0,0,4789,4791,5,128,0,0,4790,4788,1,0,0,0,4791,4794,
        1,0,0,0,4792,4790,1,0,0,0,4792,4793,1,0,0,0,4793,4795,1,0,0,0,4794,
        4792,1,0,0,0,4795,4797,5,3,0,0,4796,4786,1,0,0,0,4796,4797,1,0,0,
        0,4797,4823,1,0,0,0,4798,4800,5,226,0,0,4799,4801,5,109,0,0,4800,
        4799,1,0,0,0,4800,4801,1,0,0,0,4801,4802,1,0,0,0,4802,4824,3,780,
        390,0,4803,4805,5,92,0,0,4804,4806,5,109,0,0,4805,4804,1,0,0,0,4805,
        4806,1,0,0,0,4806,4807,1,0,0,0,4807,4824,3,774,387,0,4808,4810,5,
        323,0,0,4809,4811,5,109,0,0,4810,4809,1,0,0,0,4810,4811,1,0,0,0,
        4811,4812,1,0,0,0,4812,4824,3,790,395,0,4813,4815,5,349,0,0,4814,
        4816,5,109,0,0,4815,4814,1,0,0,0,4815,4816,1,0,0,0,4816,4817,1,0,
        0,0,4817,4824,3,818,409,0,4818,4820,5,175,0,0,4819,4821,5,109,0,
        0,4820,4819,1,0,0,0,4820,4821,1,0,0,0,4821,4822,1,0,0,0,4822,4824,
        3,788,394,0,4823,4798,1,0,0,0,4823,4803,1,0,0,0,4823,4808,1,0,0,
        0,4823,4813,1,0,0,0,4823,4818,1,0,0,0,4824,429,1,0,0,0,4825,4826,
        5,138,0,0,4826,4827,3,176,88,0,4827,4828,7,16,0,0,4828,4829,3,100,
        50,0,4829,431,1,0,0,0,4830,4835,5,138,0,0,4831,4832,5,136,0,0,4832,
        4836,3,394,197,0,4833,4834,5,442,0,0,4834,4836,3,374,187,0,4835,
        4831,1,0,0,0,4835,4833,1,0,0,0,4836,4837,1,0,0,0,4837,4838,5,309,
        0,0,4838,4839,5,94,0,0,4839,4840,3,818,409,0,4840,5038,1,0,0,0,4841,
        4842,5,138,0,0,4842,4843,5,175,0,0,4843,4844,3,788,394,0,4844,4845,
        5,309,0,0,4845,4846,5,94,0,0,4846,4847,3,786,393,0,4847,5038,1,0,
        0,0,4848,4849,5,138,0,0,4849,4850,7,61,0,0,4850,4851,3,316,158,0,
        4851,4852,5,309,0,0,4852,4853,5,94,0,0,4853,4854,3,818,409,0,4854,
        5038,1,0,0,0,4855,4856,5,138,0,0,4856,4857,5,211,0,0,4857,4858,3,
        382,191,0,4858,4859,5,309,0,0,4859,4860,5,94,0,0,4860,4861,3,804,
        402,0,4861,5038,1,0,0,0,4862,4863,5,138,0,0,4863,4864,5,278,0,0,
        4864,4865,7,31,0,0,4865,4866,3,316,158,0,4866,4867,3,170,85,0,4867,
        4868,5,309,0,0,4868,4869,5,94,0,0,4869,4870,3,818,409,0,4870,5038,
        1,0,0,0,4871,4872,5,138,0,0,4872,4873,5,296,0,0,4873,4874,3,378,
        189,0,4874,4875,5,309,0,0,4875,4876,5,94,0,0,4876,4877,3,798,399,
        0,4877,5038,1,0,0,0,4878,4879,5,138,0,0,4879,4880,5,323,0,0,4880,
        4881,3,790,395,0,4881,4882,5,309,0,0,4882,4883,5,94,0,0,4883,4884,
        3,32,16,0,4884,5038,1,0,0,0,4885,4886,5,138,0,0,4886,4888,7,62,0,
        0,4887,4889,3,422,211,0,4888,4887,1,0,0,0,4888,4889,1,0,0,0,4889,
        4890,1,0,0,0,4890,4891,3,780,390,0,4891,4892,5,309,0,0,4892,4893,
        5,94,0,0,4893,4894,3,818,409,0,4894,5038,1,0,0,0,4895,4897,5,138,
        0,0,4896,4898,5,259,0,0,4897,4896,1,0,0,0,4897,4898,1,0,0,0,4898,
        4899,1,0,0,0,4899,4901,5,376,0,0,4900,4902,3,422,211,0,4901,4900,
        1,0,0,0,4901,4902,1,0,0,0,4902,4903,1,0,0,0,4903,4904,3,778,389,
        0,4904,4905,5,309,0,0,4905,4906,5,94,0,0,4906,4907,3,776,388,0,4907,
        5038,1,0,0,0,4908,4910,5,138,0,0,4909,4911,5,63,0,0,4910,4909,1,
        0,0,0,4910,4911,1,0,0,0,4911,4912,1,0,0,0,4912,4914,5,92,0,0,4913,
        4915,3,422,211,0,4914,4913,1,0,0,0,4914,4915,1,0,0,0,4915,4916,1,
        0,0,0,4916,4917,3,624,312,0,4917,4918,5,309,0,0,4918,4919,5,94,0,
        0,4919,4920,3,772,386,0,4920,5038,1,0,0,0,4921,4946,5,138,0,0,4922,
        4924,5,63,0,0,4923,4922,1,0,0,0,4923,4924,1,0,0,0,4924,4925,1,0,
        0,0,4925,4927,5,92,0,0,4926,4928,3,422,211,0,4927,4926,1,0,0,0,4927,
        4928,1,0,0,0,4928,4929,1,0,0,0,4929,4930,3,624,312,0,4930,4932,5,
        309,0,0,4931,4933,5,44,0,0,4932,4931,1,0,0,0,4932,4933,1,0,0,0,4933,
        4947,1,0,0,0,4934,4936,5,259,0,0,4935,4934,1,0,0,0,4935,4936,1,0,
        0,0,4936,4937,1,0,0,0,4937,4939,5,376,0,0,4938,4940,3,422,211,0,
        4939,4938,1,0,0,0,4939,4940,1,0,0,0,4940,4941,1,0,0,0,4941,4942,
        3,778,389,0,4942,4944,5,309,0,0,4943,4945,5,44,0,0,4944,4943,1,0,
        0,0,4944,4945,1,0,0,0,4945,4947,1,0,0,0,4946,4923,1,0,0,0,4946,4935,
        1,0,0,0,4947,4948,1,0,0,0,4948,4949,3,800,400,0,4949,4950,5,94,0,
        0,4950,4951,3,802,401,0,4951,5038,1,0,0,0,4952,4960,5,138,0,0,4953,
        4955,5,92,0,0,4954,4956,3,422,211,0,4955,4954,1,0,0,0,4955,4956,
        1,0,0,0,4956,4957,1,0,0,0,4957,4961,3,624,312,0,4958,4959,5,189,
        0,0,4959,4961,3,316,158,0,4960,4953,1,0,0,0,4960,4958,1,0,0,0,4961,
        4962,1,0,0,0,4962,4963,5,309,0,0,4963,4964,5,45,0,0,4964,4965,3,
        818,409,0,4965,4966,5,94,0,0,4966,4967,3,818,409,0,4967,5038,1,0,
        0,0,4968,4975,5,138,0,0,4969,4971,5,445,0,0,4970,4972,3,422,211,
        0,4971,4970,1,0,0,0,4971,4972,1,0,0,0,4972,4976,1,0,0,0,4973,4976,
        5,321,0,0,4974,4976,5,357,0,0,4975,4969,1,0,0,0,4975,4973,1,0,0,
        0,4975,4974,1,0,0,0,4976,4977,1,0,0,0,4977,4978,3,818,409,0,4978,
        4979,5,80,0,0,4979,4980,3,780,390,0,4980,4981,5,309,0,0,4981,4982,
        5,94,0,0,4982,4983,3,818,409,0,4983,5038,1,0,0,0,4984,4997,5,138,
        0,0,4985,4986,5,63,0,0,4986,4987,5,174,0,0,4987,4998,5,381,0,0,4988,
        4990,5,295,0,0,4989,4988,1,0,0,0,4989,4990,1,0,0,0,4990,4991,1,0,
        0,0,4991,4998,5,247,0,0,4992,4998,5,452,0,0,4993,4998,5,331,0,0,
        4994,4998,5,451,0,0,4995,4996,5,198,0,0,4996,4998,5,357,0,0,4997,
        4985,1,0,0,0,4997,4989,1,0,0,0,4997,4992,1,0,0,0,4997,4993,1,0,0,
        0,4997,4994,1,0,0,0,4997,4995,1,0,0,0,4998,4999,1,0,0,0,4999,5000,
        3,818,409,0,5000,5001,5,309,0,0,5001,5002,5,94,0,0,5002,5003,3,818,
        409,0,5003,5038,1,0,0,0,5004,5005,5,138,0,0,5005,5006,7,45,0,0,5006,
        5007,3,814,407,0,5007,5008,5,309,0,0,5008,5009,5,94,0,0,5009,5010,
        3,814,407,0,5010,5038,1,0,0,0,5011,5012,5,138,0,0,5012,5013,3,176,
        88,0,5013,5014,5,309,0,0,5014,5015,5,94,0,0,5015,5016,3,768,384,
        0,5016,5038,1,0,0,0,5017,5018,5,138,0,0,5018,5019,5,355,0,0,5019,
        5020,5,325,0,0,5020,5021,7,41,0,0,5021,5022,3,316,158,0,5022,5023,
        5,309,0,0,5023,5024,5,94,0,0,5024,5025,3,818,409,0,5025,5038,1,0,
        0,0,5026,5027,5,138,0,0,5027,5028,5,360,0,0,5028,5029,3,316,158,
        0,5029,5030,5,309,0,0,5030,5031,5,143,0,0,5031,5032,3,818,409,0,
        5032,5033,5,94,0,0,5033,5035,3,818,409,0,5034,5036,3,96,48,0,5035,
        5034,1,0,0,0,5035,5036,1,0,0,0,5036,5038,1,0,0,0,5037,4830,1,0,0,
        0,5037,4841,1,0,0,0,5037,4848,1,0,0,0,5037,4855,1,0,0,0,5037,4862,
        1,0,0,0,5037,4871,1,0,0,0,5037,4878,1,0,0,0,5037,4885,1,0,0,0,5037,
        4895,1,0,0,0,5037,4908,1,0,0,0,5037,4921,1,0,0,0,5037,4952,1,0,0,
        0,5037,4968,1,0,0,0,5037,4984,1,0,0,0,5037,5004,1,0,0,0,5037,5011,
        1,0,0,0,5037,5017,1,0,0,0,5037,5026,1,0,0,0,5038,433,1,0,0,0,5039,
        5056,5,138,0,0,5040,5041,5,211,0,0,5041,5057,3,382,191,0,5042,5043,
        5,296,0,0,5043,5057,3,378,189,0,5044,5045,5,442,0,0,5045,5057,3,
        374,187,0,5046,5047,5,357,0,0,5047,5048,3,818,409,0,5048,5049,5,
        80,0,0,5049,5050,3,780,390,0,5050,5057,1,0,0,0,5051,5052,5,259,0,
        0,5052,5053,5,376,0,0,5053,5057,3,778,389,0,5054,5055,5,226,0,0,
        5055,5057,3,780,390,0,5056,5040,1,0,0,0,5056,5042,1,0,0,0,5056,5044,
        1,0,0,0,5056,5046,1,0,0,0,5056,5051,1,0,0,0,5056,5054,1,0,0,0,5057,
        5059,1,0,0,0,5058,5060,5,269,0,0,5059,5058,1,0,0,0,5059,5060,1,0,
        0,0,5060,5061,1,0,0,0,5061,5062,5,462,0,0,5062,5063,5,80,0,0,5063,
        5064,5,204,0,0,5064,5065,3,818,409,0,5065,435,1,0,0,0,5066,5105,
        5,138,0,0,5067,5068,5,136,0,0,5068,5106,3,394,197,0,5069,5070,5,
        204,0,0,5070,5106,3,818,409,0,5071,5072,5,211,0,0,5072,5106,3,382,
        191,0,5073,5074,5,278,0,0,5074,5106,3,416,208,0,5075,5076,5,278,
        0,0,5076,5077,7,31,0,0,5077,5078,3,316,158,0,5078,5079,3,170,85,
        0,5079,5106,1,0,0,0,5080,5081,5,296,0,0,5081,5106,3,378,189,0,5082,
        5083,5,442,0,0,5083,5106,3,374,187,0,5084,5086,5,328,0,0,5085,5087,
        3,422,211,0,5086,5085,1,0,0,0,5086,5087,1,0,0,0,5087,5088,1,0,0,
        0,5088,5106,3,780,390,0,5089,5091,5,259,0,0,5090,5089,1,0,0,0,5090,
        5091,1,0,0,0,5091,5092,1,0,0,0,5092,5094,5,376,0,0,5093,5095,3,422,
        211,0,5094,5093,1,0,0,0,5094,5095,1,0,0,0,5095,5096,1,0,0,0,5096,
        5106,3,778,389,0,5097,5099,5,63,0,0,5098,5097,1,0,0,0,5098,5099,
        1,0,0,0,5099,5100,1,0,0,0,5100,5102,5,92,0,0,5101,5103,3,422,211,
        0,5102,5101,1,0,0,0,5102,5103,1,0,0,0,5103,5104,1,0,0,0,5104,5106,
        3,624,312,0,5105,5067,1,0,0,0,5105,5069,1,0,0,0,5105,5071,1,0,0,
        0,5105,5073,1,0,0,0,5105,5075,1,0,0,0,5105,5080,1,0,0,0,5105,5082,
        1,0,0,0,5105,5084,1,0,0,0,5105,5090,1,0,0,0,5105,5098,1,0,0,0,5106,
        5107,1,0,0,0,5107,5108,5,333,0,0,5108,5109,5,323,0,0,5109,5110,3,
        790,395,0,5110,5128,1,0,0,0,5111,5120,5,138,0,0,5112,5113,5,355,
        0,0,5113,5114,5,325,0,0,5114,5121,7,41,0,0,5115,5121,5,108,0,0,5116,
        5121,5,168,0,0,5117,5121,5,189,0,0,5118,5121,5,342,0,0,5119,5121,
        5,360,0,0,5120,5112,1,0,0,0,5120,5115,1,0,0,0,5120,5116,1,0,0,0,
        5120,5117,1,0,0,0,5120,5118,1,0,0,0,5120,5119,1,0,0,0,5121,5122,
        1,0,0,0,5122,5123,3,316,158,0,5123,5124,5,333,0,0,5124,5125,5,323,
        0,0,5125,5126,3,790,395,0,5126,5128,1,0,0,0,5127,5066,1,0,0,0,5127,
        5111,1,0,0,0,5128,437,1,0,0,0,5129,5130,5,138,0,0,5130,5131,5,278,
        0,0,5131,5132,3,416,208,0,5132,5133,5,333,0,0,5133,5134,3,440,220,
        0,5134,439,1,0,0,0,5135,5136,5,2,0,0,5136,5141,3,442,221,0,5137,
        5138,5,6,0,0,5138,5140,3,442,221,0,5139,5137,1,0,0,0,5140,5143,1,
        0,0,0,5141,5139,1,0,0,0,5141,5142,1,0,0,0,5142,5144,1,0,0,0,5143,
        5141,1,0,0,0,5144,5145,5,3,0,0,5145,441,1,0,0,0,5146,5147,3,824,
        412,0,5147,5154,5,10,0,0,5148,5155,5,407,0,0,5149,5155,3,388,194,
        0,5150,5155,3,834,417,0,5151,5155,3,726,363,0,5152,5155,3,202,101,
        0,5153,5155,3,808,404,0,5154,5148,1,0,0,0,5154,5149,1,0,0,0,5154,
        5150,1,0,0,0,5154,5151,1,0,0,0,5154,5152,1,0,0,0,5154,5153,1,0,0,
        0,5155,443,1,0,0,0,5156,5157,5,138,0,0,5157,5158,5,360,0,0,5158,
        5159,3,316,158,0,5159,5160,5,333,0,0,5160,5161,3,440,220,0,5161,
        445,1,0,0,0,5162,5163,5,138,0,0,5163,5164,5,278,0,0,5164,5165,7,
        31,0,0,5165,5166,3,316,158,0,5166,5167,3,170,85,0,5167,5168,5,282,
        0,0,5168,5169,5,94,0,0,5169,5170,3,814,407,0,5170,5237,1,0,0,0,5171,
        5198,5,138,0,0,5172,5173,5,136,0,0,5173,5199,3,394,197,0,5174,5175,
        5,175,0,0,5175,5199,3,788,394,0,5176,5177,5,211,0,0,5177,5199,3,
        382,191,0,5178,5180,5,295,0,0,5179,5178,1,0,0,0,5179,5180,1,0,0,
        0,5180,5181,1,0,0,0,5181,5182,5,247,0,0,5182,5199,3,818,409,0,5183,
        5184,5,248,0,0,5184,5185,5,274,0,0,5185,5199,3,202,101,0,5186,5187,
        5,248,0,0,5187,5188,5,274,0,0,5188,5199,3,202,101,0,5189,5190,5,
        278,0,0,5190,5199,3,416,208,0,5191,5192,5,296,0,0,5192,5199,3,378,
        189,0,5193,5194,5,442,0,0,5194,5199,3,374,187,0,5195,5196,5,323,
        0,0,5196,5199,3,790,395,0,5197,5199,3,176,88,0,5198,5172,1,0,0,0,
        5198,5174,1,0,0,0,5198,5176,1,0,0,0,5198,5179,1,0,0,0,5198,5183,
        1,0,0,0,5198,5186,1,0,0,0,5198,5189,1,0,0,0,5198,5191,1,0,0,0,5198,
        5193,1,0,0,0,5198,5195,1,0,0,0,5198,5197,1,0,0,0,5199,5200,1,0,0,
        0,5200,5201,5,282,0,0,5201,5202,5,94,0,0,5202,5203,3,814,407,0,5203,
        5237,1,0,0,0,5204,5213,5,138,0,0,5205,5206,5,355,0,0,5206,5207,5,
        325,0,0,5207,5214,7,63,0,0,5208,5214,5,108,0,0,5209,5214,5,168,0,
        0,5210,5214,5,189,0,0,5211,5214,5,360,0,0,5212,5214,5,342,0,0,5213,
        5205,1,0,0,0,5213,5208,1,0,0,0,5213,5209,1,0,0,0,5213,5210,1,0,0,
        0,5213,5211,1,0,0,0,5213,5212,1,0,0,0,5214,5215,1,0,0,0,5215,5216,
        3,316,158,0,5216,5217,5,282,0,0,5217,5218,5,94,0,0,5218,5219,3,814,
        407,0,5219,5237,1,0,0,0,5220,5229,5,138,0,0,5221,5230,5,331,0,0,
        5222,5223,5,63,0,0,5223,5224,5,174,0,0,5224,5230,5,381,0,0,5225,
        5226,5,198,0,0,5226,5230,5,357,0,0,5227,5230,5,452,0,0,5228,5230,
        5,451,0,0,5229,5221,1,0,0,0,5229,5222,1,0,0,0,5229,5225,1,0,0,0,
        5229,5227,1,0,0,0,5229,5228,1,0,0,0,5230,5231,1,0,0,0,5231,5232,
        3,818,409,0,5232,5233,5,282,0,0,5233,5234,5,94,0,0,5234,5235,3,814,
        407,0,5235,5237,1,0,0,0,5236,5162,1,0,0,0,5236,5171,1,0,0,0,5236,
        5204,1,0,0,0,5236,5220,1,0,0,0,5237,447,1,0,0,0,5238,5239,5,46,0,
        0,5239,5240,5,452,0,0,5240,5247,3,818,409,0,5241,5242,5,62,0,0,5242,
        5243,5,92,0,0,5243,5248,3,628,314,0,5244,5245,5,62,0,0,5245,5246,
        5,30,0,0,5246,5248,5,350,0,0,5247,5241,1,0,0,0,5247,5244,1,0,0,0,
        5247,5248,1,0,0,0,5248,5250,1,0,0,0,5249,5251,3,400,200,0,5250,5249,
        1,0,0,0,5250,5251,1,0,0,0,5251,449,1,0,0,0,5252,5253,5,138,0,0,5253,
        5254,5,452,0,0,5254,5272,3,818,409,0,5255,5256,5,282,0,0,5256,5257,
        5,94,0,0,5257,5273,3,814,407,0,5258,5259,5,333,0,0,5259,5273,3,284,
        142,0,5260,5261,5,309,0,0,5261,5262,5,94,0,0,5262,5273,3,818,409,
        0,5263,5264,7,34,0,0,5264,5269,3,626,313,0,5265,5266,5,6,0,0,5266,
        5268,3,626,313,0,5267,5265,1,0,0,0,5268,5271,1,0,0,0,5269,5267,1,
        0,0,0,5269,5270,1,0,0,0,5270,5273,1,0,0,0,5271,5269,1,0,0,0,5272,
        5255,1,0,0,0,5272,5258,1,0,0,0,5272,5260,1,0,0,0,5272,5263,1,0,0,
        0,5273,451,1,0,0,0,5274,5275,5,46,0,0,5275,5276,5,451,0,0,5276,5277,
        3,818,409,0,5277,5278,5,164,0,0,5278,5279,3,808,404,0,5279,5280,
        5,452,0,0,5280,5285,3,824,412,0,5281,5282,5,6,0,0,5282,5284,3,824,
        412,0,5283,5281,1,0,0,0,5284,5287,1,0,0,0,5285,5283,1,0,0,0,5285,
        5286,1,0,0,0,5286,5289,1,0,0,0,5287,5285,1,0,0,0,5288,5290,3,400,
        200,0,5289,5288,1,0,0,0,5289,5290,1,0,0,0,5290,453,1,0,0,0,5291,
        5292,5,138,0,0,5292,5293,5,451,0,0,5293,5294,3,818,409,0,5294,5295,
        5,333,0,0,5295,5296,3,284,142,0,5296,5348,1,0,0,0,5297,5298,5,138,
        0,0,5298,5299,5,451,0,0,5299,5300,3,818,409,0,5300,5301,5,164,0,
        0,5301,5302,3,808,404,0,5302,5348,1,0,0,0,5303,5304,5,138,0,0,5304,
        5305,5,451,0,0,5305,5306,3,818,409,0,5306,5307,5,305,0,0,5307,5309,
        5,452,0,0,5308,5310,3,400,200,0,5309,5308,1,0,0,0,5309,5310,1,0,
        0,0,5310,5348,1,0,0,0,5311,5312,5,138,0,0,5312,5313,5,451,0,0,5313,
        5314,3,818,409,0,5314,5315,7,34,0,0,5315,5316,5,452,0,0,5316,5321,
        3,824,412,0,5317,5318,5,6,0,0,5318,5320,3,824,412,0,5319,5317,1,
        0,0,0,5320,5323,1,0,0,0,5321,5319,1,0,0,0,5321,5322,1,0,0,0,5322,
        5325,1,0,0,0,5323,5321,1,0,0,0,5324,5326,3,400,200,0,5325,5324,1,
        0,0,0,5325,5326,1,0,0,0,5326,5348,1,0,0,0,5327,5328,5,138,0,0,5328,
        5329,5,451,0,0,5329,5330,3,818,409,0,5330,5331,7,64,0,0,5331,5348,
        1,0,0,0,5332,5333,5,138,0,0,5333,5334,5,451,0,0,5334,5335,3,818,
        409,0,5335,5336,5,465,0,0,5336,5337,5,2,0,0,5337,5338,3,290,145,
        0,5338,5339,5,3,0,0,5339,5348,1,0,0,0,5340,5341,5,138,0,0,5341,5342,
        5,451,0,0,5342,5343,3,818,409,0,5343,5344,5,282,0,0,5344,5345,5,
        94,0,0,5345,5346,3,814,407,0,5346,5348,1,0,0,0,5347,5291,1,0,0,0,
        5347,5297,1,0,0,0,5347,5303,1,0,0,0,5347,5311,1,0,0,0,5347,5327,
        1,0,0,0,5347,5332,1,0,0,0,5347,5340,1,0,0,0,5348,455,1,0,0,0,5349,
        5351,5,46,0,0,5350,5352,3,366,183,0,5351,5350,1,0,0,0,5351,5352,
        1,0,0,0,5352,5353,1,0,0,0,5353,5354,5,321,0,0,5354,5355,3,818,409,
        0,5355,5356,5,36,0,0,5356,5357,5,80,0,0,5357,5358,7,65,0,0,5358,
        5359,5,94,0,0,5359,5361,3,780,390,0,5360,5362,3,638,319,0,5361,5360,
        1,0,0,0,5361,5362,1,0,0,0,5362,5363,1,0,0,0,5363,5365,5,57,0,0,5364,
        5366,7,66,0,0,5365,5364,1,0,0,0,5365,5366,1,0,0,0,5366,5383,1,0,
        0,0,5367,5384,5,270,0,0,5368,5384,3,458,229,0,5369,5371,5,2,0,0,
        5370,5372,3,458,229,0,5371,5370,1,0,0,0,5371,5372,1,0,0,0,5372,5379,
        1,0,0,0,5373,5375,5,7,0,0,5374,5376,3,458,229,0,5375,5374,1,0,0,
        0,5375,5376,1,0,0,0,5376,5378,1,0,0,0,5377,5373,1,0,0,0,5378,5381,
        1,0,0,0,5379,5377,1,0,0,0,5379,5380,1,0,0,0,5380,5382,1,0,0,0,5381,
        5379,1,0,0,0,5382,5384,5,3,0,0,5383,5367,1,0,0,0,5383,5368,1,0,0,
        0,5383,5369,1,0,0,0,5384,457,1,0,0,0,5385,5391,3,560,280,0,5386,
        5391,3,538,269,0,5387,5391,3,552,276,0,5388,5391,3,548,274,0,5389,
        5391,3,460,230,0,5390,5385,1,0,0,0,5390,5386,1,0,0,0,5390,5387,1,
        0,0,0,5390,5388,1,0,0,0,5390,5389,1,0,0,0,5391,459,1,0,0,0,5392,
        5393,5,271,0,0,5393,5395,3,818,409,0,5394,5396,3,462,231,0,5395,
        5394,1,0,0,0,5395,5396,1,0,0,0,5396,461,1,0,0,0,5397,5398,5,6,0,
        0,5398,5399,3,808,404,0,5399,463,1,0,0,0,5400,5401,5,252,0,0,5401,
        5402,3,818,409,0,5402,465,1,0,0,0,5403,5406,5,366,0,0,5404,5407,
        3,818,409,0,5405,5407,5,9,0,0,5406,5404,1,0,0,0,5406,5405,1,0,0,
        0,5407,467,1,0,0,0,5408,5410,5,146,0,0,5409,5411,3,470,235,0,5410,
        5409,1,0,0,0,5410,5411,1,0,0,0,5411,5413,1,0,0,0,5412,5414,3,474,
        237,0,5413,5412,1,0,0,0,5413,5414,1,0,0,0,5414,5454,1,0,0,0,5415,
        5416,5,340,0,0,5416,5418,5,356,0,0,5417,5419,3,474,237,0,5418,5417,
        1,0,0,0,5418,5419,1,0,0,0,5419,5454,1,0,0,0,5420,5421,5,322,0,0,
        5421,5454,3,818,409,0,5422,5424,5,308,0,0,5423,5425,5,322,0,0,5424,
        5423,1,0,0,0,5424,5425,1,0,0,0,5425,5426,1,0,0,0,5426,5454,3,818,
        409,0,5427,5428,5,290,0,0,5428,5429,5,356,0,0,5429,5454,3,808,404,
        0,5430,5431,7,67,0,0,5431,5432,5,291,0,0,5432,5454,3,808,404,0,5433,
        5435,7,68,0,0,5434,5436,3,470,235,0,5435,5434,1,0,0,0,5435,5436,
        1,0,0,0,5436,5442,1,0,0,0,5437,5439,5,33,0,0,5438,5440,5,269,0,0,
        5439,5438,1,0,0,0,5439,5440,1,0,0,0,5440,5441,1,0,0,0,5441,5443,
        5,153,0,0,5442,5437,1,0,0,0,5442,5443,1,0,0,0,5443,5454,1,0,0,0,
        5444,5446,5,319,0,0,5445,5447,3,470,235,0,5446,5445,1,0,0,0,5446,
        5447,1,0,0,0,5447,5448,1,0,0,0,5448,5450,5,94,0,0,5449,5451,5,322,
        0,0,5450,5449,1,0,0,0,5450,5451,1,0,0,0,5451,5452,1,0,0,0,5452,5454,
        3,818,409,0,5453,5408,1,0,0,0,5453,5415,1,0,0,0,5453,5420,1,0,0,
        0,5453,5422,1,0,0,0,5453,5427,1,0,0,0,5453,5430,1,0,0,0,5453,5433,
        1,0,0,0,5453,5444,1,0,0,0,5454,469,1,0,0,0,5455,5456,7,69,0,0,5456,
        471,1,0,0,0,5457,5458,5,244,0,0,5458,5459,5,251,0,0,5459,5467,3,
        50,25,0,5460,5461,5,300,0,0,5461,5467,7,70,0,0,5462,5464,5,77,0,
        0,5463,5462,1,0,0,0,5463,5464,1,0,0,0,5464,5465,1,0,0,0,5465,5467,
        5,54,0,0,5466,5457,1,0,0,0,5466,5460,1,0,0,0,5466,5463,1,0,0,0,5467,
        473,1,0,0,0,5468,5475,3,472,236,0,5469,5471,5,6,0,0,5470,5469,1,
        0,0,0,5470,5471,1,0,0,0,5471,5472,1,0,0,0,5472,5474,3,472,236,0,
        5473,5470,1,0,0,0,5474,5477,1,0,0,0,5475,5473,1,0,0,0,5475,5476,
        1,0,0,0,5476,475,1,0,0,0,5477,5475,1,0,0,0,5478,5481,5,46,0,0,5479,
        5480,5,82,0,0,5480,5482,5,311,0,0,5481,5479,1,0,0,0,5481,5482,1,
        0,0,0,5482,5484,1,0,0,0,5483,5485,3,122,61,0,5484,5483,1,0,0,0,5484,
        5485,1,0,0,0,5485,5501,1,0,0,0,5486,5487,5,376,0,0,5487,5489,3,776,
        388,0,5488,5490,3,146,73,0,5489,5488,1,0,0,0,5489,5490,1,0,0,0,5490,
        5492,1,0,0,0,5491,5493,3,102,51,0,5492,5491,1,0,0,0,5492,5493,1,
        0,0,0,5493,5502,1,0,0,0,5494,5495,5,303,0,0,5495,5496,5,376,0,0,
        5496,5497,3,776,388,0,5497,5499,3,144,72,0,5498,5500,3,102,51,0,
        5499,5498,1,0,0,0,5499,5500,1,0,0,0,5500,5502,1,0,0,0,5501,5486,
        1,0,0,0,5501,5494,1,0,0,0,5502,5503,1,0,0,0,5503,5504,5,36,0,0,5504,
        5511,3,560,280,0,5505,5507,5,105,0,0,5506,5508,7,71,0,0,5507,5506,
        1,0,0,0,5507,5508,1,0,0,0,5508,5509,1,0,0,0,5509,5510,5,42,0,0,5510,
        5512,5,279,0,0,5511,5505,1,0,0,0,5511,5512,1,0,0,0,5512,477,1,0,
        0,0,5513,5514,5,253,0,0,5514,5515,3,808,404,0,5515,479,1,0,0,0,5516,
        5517,5,46,0,0,5517,5518,5,175,0,0,5518,5520,3,786,393,0,5519,5521,
        5,105,0,0,5520,5519,1,0,0,0,5520,5521,1,0,0,0,5521,5527,1,0,0,0,
        5522,5524,3,482,241,0,5523,5522,1,0,0,0,5524,5525,1,0,0,0,5525,5523,
        1,0,0,0,5525,5526,1,0,0,0,5526,5528,1,0,0,0,5527,5523,1,0,0,0,5527,
        5528,1,0,0,0,5528,481,1,0,0,0,5529,5530,5,164,0,0,5530,5538,5,74,
        0,0,5531,5538,5,194,0,0,5532,5538,5,255,0,0,5533,5538,5,282,0,0,
        5534,5538,5,351,0,0,5535,5538,5,353,0,0,5536,5538,3,826,413,0,5537,
        5529,1,0,0,0,5537,5531,1,0,0,0,5537,5532,1,0,0,0,5537,5533,1,0,0,
        0,5537,5534,1,0,0,0,5537,5535,1,0,0,0,5537,5536,1,0,0,0,5538,5540,
        1,0,0,0,5539,5541,5,10,0,0,5540,5539,1,0,0,0,5540,5541,1,0,0,0,5541,
        5545,1,0,0,0,5542,5546,3,812,406,0,5543,5546,3,54,27,0,5544,5546,
        5,53,0,0,5545,5542,1,0,0,0,5545,5543,1,0,0,0,5545,5544,1,0,0,0,5546,
        483,1,0,0,0,5547,5548,5,138,0,0,5548,5549,5,175,0,0,5549,5565,3,
        788,394,0,5550,5551,5,333,0,0,5551,5552,5,351,0,0,5552,5554,3,768,
        384,0,5553,5550,1,0,0,0,5553,5554,1,0,0,0,5554,5566,1,0,0,0,5555,
        5557,5,105,0,0,5556,5555,1,0,0,0,5556,5557,1,0,0,0,5557,5559,1,0,
        0,0,5558,5560,3,482,241,0,5559,5558,1,0,0,0,5560,5561,1,0,0,0,5561,
        5559,1,0,0,0,5561,5562,1,0,0,0,5562,5564,1,0,0,0,5563,5556,1,0,0,
        0,5563,5564,1,0,0,0,5564,5566,1,0,0,0,5565,5553,1,0,0,0,5565,5563,
        1,0,0,0,5566,485,1,0,0,0,5567,5568,5,138,0,0,5568,5569,5,175,0,0,
        5569,5571,3,788,394,0,5570,5572,3,64,32,0,5571,5570,1,0,0,0,5571,
        5572,1,0,0,0,5572,487,1,0,0,0,5573,5574,5,138,0,0,5574,5575,5,108,
        0,0,5575,5576,3,316,158,0,5576,5577,5,305,0,0,5577,5578,5,375,0,
        0,5578,489,1,0,0,0,5579,5580,5,138,0,0,5580,5581,5,349,0,0,5581,
        5582,7,16,0,0,5582,5583,3,40,20,0,5583,491,1,0,0,0,5584,5585,5,46,
        0,0,5585,5586,5,189,0,0,5586,5588,3,316,158,0,5587,5589,5,36,0,0,
        5588,5587,1,0,0,0,5588,5589,1,0,0,0,5589,5590,1,0,0,0,5590,5594,
        3,652,326,0,5591,5593,3,134,67,0,5592,5591,1,0,0,0,5593,5596,1,0,
        0,0,5594,5592,1,0,0,0,5594,5595,1,0,0,0,5595,493,1,0,0,0,5596,5594,
        1,0,0,0,5597,5598,5,138,0,0,5598,5599,5,189,0,0,5599,5622,3,316,
        158,0,5600,5623,3,94,47,0,5601,5602,7,15,0,0,5602,5603,5,77,0,0,
        5603,5623,5,78,0,0,5604,5607,5,133,0,0,5605,5606,5,45,0,0,5606,5608,
        3,818,409,0,5607,5605,1,0,0,0,5607,5608,1,0,0,0,5608,5609,1,0,0,
        0,5609,5623,3,142,71,0,5610,5611,5,191,0,0,5611,5613,5,45,0,0,5612,
        5614,3,422,211,0,5613,5612,1,0,0,0,5613,5614,1,0,0,0,5614,5615,1,
        0,0,0,5615,5617,3,818,409,0,5616,5618,3,96,48,0,5617,5616,1,0,0,
        0,5617,5618,1,0,0,0,5618,5623,1,0,0,0,5619,5620,5,372,0,0,5620,5621,
        5,45,0,0,5621,5623,3,818,409,0,5622,5600,1,0,0,0,5622,5601,1,0,0,
        0,5622,5604,1,0,0,0,5622,5610,1,0,0,0,5622,5619,1,0,0,0,5623,495,
        1,0,0,0,5624,5625,5,138,0,0,5625,5626,5,355,0,0,5626,5627,5,325,
        0,0,5627,5628,5,185,0,0,5628,5629,3,316,158,0,5629,5630,3,284,142,
        0,5630,497,1,0,0,0,5631,5632,5,138,0,0,5632,5633,5,355,0,0,5633,
        5634,5,325,0,0,5634,5635,5,163,0,0,5635,5636,3,316,158,0,5636,5637,
        7,72,0,0,5637,5638,5,257,0,0,5638,5639,5,62,0,0,5639,5640,3,784,
        392,0,5640,5641,5,105,0,0,5641,5642,3,314,157,0,5642,5673,1,0,0,
        0,5643,5644,5,138,0,0,5644,5645,5,355,0,0,5645,5646,5,325,0,0,5646,
        5647,5,163,0,0,5647,5648,3,316,158,0,5648,5649,5,138,0,0,5649,5652,
        5,257,0,0,5650,5651,5,62,0,0,5651,5653,3,784,392,0,5652,5650,1,0,
        0,0,5652,5653,1,0,0,0,5653,5654,1,0,0,0,5654,5655,5,311,0,0,5655,
        5656,3,316,158,0,5656,5657,5,105,0,0,5657,5658,3,316,158,0,5658,
        5673,1,0,0,0,5659,5660,5,138,0,0,5660,5661,5,355,0,0,5661,5662,5,
        325,0,0,5662,5663,5,163,0,0,5663,5664,3,316,158,0,5664,5665,5,191,
        0,0,5665,5667,5,257,0,0,5666,5668,3,422,211,0,5667,5666,1,0,0,0,
        5667,5668,1,0,0,0,5668,5669,1,0,0,0,5669,5670,5,62,0,0,5670,5671,
        3,784,392,0,5671,5673,1,0,0,0,5672,5631,1,0,0,0,5672,5643,1,0,0,
        0,5672,5659,1,0,0,0,5673,499,1,0,0,0,5674,5676,5,46,0,0,5675,5677,
        5,53,0,0,5676,5675,1,0,0,0,5676,5677,1,0,0,0,5677,5678,1,0,0,0,5678,
        5679,5,168,0,0,5679,5680,3,316,158,0,5680,5681,5,62,0,0,5681,5682,
        3,808,404,0,5682,5683,5,94,0,0,5683,5684,3,808,404,0,5684,5685,5,
        64,0,0,5685,5686,3,316,158,0,5686,501,1,0,0,0,5687,5689,5,158,0,
        0,5688,5690,3,514,257,0,5689,5688,1,0,0,0,5689,5690,1,0,0,0,5690,
        5695,1,0,0,0,5691,5693,3,774,387,0,5692,5694,3,170,85,0,5693,5692,
        1,0,0,0,5693,5694,1,0,0,0,5694,5696,1,0,0,0,5695,5691,1,0,0,0,5695,
        5696,1,0,0,0,5696,5713,1,0,0,0,5697,5698,5,158,0,0,5698,5699,5,2,
        0,0,5699,5704,3,514,257,0,5700,5701,5,6,0,0,5701,5703,3,514,257,
        0,5702,5700,1,0,0,0,5703,5706,1,0,0,0,5704,5702,1,0,0,0,5704,5705,
        1,0,0,0,5705,5707,1,0,0,0,5706,5704,1,0,0,0,5707,5708,5,3,0,0,5708,
        5710,3,774,387,0,5709,5711,3,170,85,0,5710,5709,1,0,0,0,5710,5711,
        1,0,0,0,5711,5713,1,0,0,0,5712,5687,1,0,0,0,5712,5697,1,0,0,0,5713,
        503,1,0,0,0,5714,5730,5,370,0,0,5715,5717,5,113,0,0,5716,5715,1,
        0,0,0,5716,5717,1,0,0,0,5717,5719,1,0,0,0,5718,5720,5,112,0,0,5719,
        5718,1,0,0,0,5719,5720,1,0,0,0,5720,5722,1,0,0,0,5721,5723,3,514,
        257,0,5722,5721,1,0,0,0,5722,5723,1,0,0,0,5723,5725,1,0,0,0,5724,
        5726,3,508,254,0,5725,5724,1,0,0,0,5725,5726,1,0,0,0,5726,5731,1,
        0,0,0,5727,5729,3,524,262,0,5728,5727,1,0,0,0,5728,5729,1,0,0,0,
        5729,5731,1,0,0,0,5730,5716,1,0,0,0,5730,5728,1,0,0,0,5731,5733,
        1,0,0,0,5732,5734,3,518,259,0,5733,5732,1,0,0,0,5733,5734,1,0,0,
        0,5734,505,1,0,0,0,5735,5750,3,508,254,0,5736,5738,3,514,257,0,5737,
        5736,1,0,0,0,5737,5738,1,0,0,0,5738,5751,1,0,0,0,5739,5740,5,2,0,
        0,5740,5745,3,512,256,0,5741,5742,5,6,0,0,5742,5744,3,512,256,0,
        5743,5741,1,0,0,0,5744,5747,1,0,0,0,5745,5743,1,0,0,0,5745,5746,
        1,0,0,0,5746,5748,1,0,0,0,5747,5745,1,0,0,0,5748,5749,5,3,0,0,5749,
        5751,1,0,0,0,5750,5737,1,0,0,0,5750,5739,1,0,0,0,5751,5753,1,0,0,
        0,5752,5754,3,518,259,0,5753,5752,1,0,0,0,5753,5754,1,0,0,0,5754,
        507,1,0,0,0,5755,5756,7,73,0,0,5756,509,1,0,0,0,5757,5760,3,822,
        411,0,5758,5760,3,508,254,0,5759,5757,1,0,0,0,5759,5758,1,0,0,0,
        5760,5763,1,0,0,0,5761,5764,3,54,27,0,5762,5764,3,202,101,0,5763,
        5761,1,0,0,0,5763,5762,1,0,0,0,5763,5764,1,0,0,0,5764,511,1,0,0,
        0,5765,5767,7,74,0,0,5766,5768,7,75,0,0,5767,5766,1,0,0,0,5767,5768,
        1,0,0,0,5768,5775,1,0,0,0,5769,5772,5,548,0,0,5770,5773,3,202,101,
        0,5771,5773,3,808,404,0,5772,5770,1,0,0,0,5772,5771,1,0,0,0,5773,
        5775,1,0,0,0,5774,5765,1,0,0,0,5774,5769,1,0,0,0,5775,513,1,0,0,
        0,5776,5778,5,128,0,0,5777,5779,7,75,0,0,5778,5777,1,0,0,0,5778,
        5779,1,0,0,0,5779,515,1,0,0,0,5780,5782,3,774,387,0,5781,5783,3,
        144,72,0,5782,5781,1,0,0,0,5782,5783,1,0,0,0,5783,517,1,0,0,0,5784,
        5789,3,516,258,0,5785,5786,5,6,0,0,5786,5788,3,516,258,0,5787,5785,
        1,0,0,0,5788,5791,1,0,0,0,5789,5787,1,0,0,0,5789,5790,1,0,0,0,5790,
        519,1,0,0,0,5791,5789,1,0,0,0,5792,5803,5,203,0,0,5793,5804,3,524,
        262,0,5794,5796,5,128,0,0,5795,5794,1,0,0,0,5795,5796,1,0,0,0,5796,
        5804,1,0,0,0,5797,5799,3,508,254,0,5798,5800,3,514,257,0,5799,5798,
        1,0,0,0,5799,5800,1,0,0,0,5800,5802,1,0,0,0,5801,5797,1,0,0,0,5801,
        5802,1,0,0,0,5802,5804,1,0,0,0,5803,5793,1,0,0,0,5803,5795,1,0,0,
        0,5803,5801,1,0,0,0,5804,5805,1,0,0,0,5805,5806,3,522,261,0,5806,
        521,1,0,0,0,5807,5817,3,560,280,0,5808,5817,3,538,269,0,5809,5817,
        3,552,276,0,5810,5817,3,548,274,0,5811,5817,3,558,279,0,5812,5817,
        3,186,93,0,5813,5817,3,192,96,0,5814,5817,3,194,97,0,5815,5817,3,
        532,266,0,5816,5807,1,0,0,0,5816,5808,1,0,0,0,5816,5809,1,0,0,0,
        5816,5810,1,0,0,0,5816,5811,1,0,0,0,5816,5812,1,0,0,0,5816,5813,
        1,0,0,0,5816,5814,1,0,0,0,5816,5815,1,0,0,0,5817,523,1,0,0,0,5818,
        5819,5,2,0,0,5819,5824,3,510,255,0,5820,5821,5,6,0,0,5821,5823,3,
        510,255,0,5822,5820,1,0,0,0,5823,5826,1,0,0,0,5824,5822,1,0,0,0,
        5824,5825,1,0,0,0,5825,5827,1,0,0,0,5826,5824,1,0,0,0,5827,5828,
        5,3,0,0,5828,525,1,0,0,0,5829,5830,5,290,0,0,5830,5832,3,818,409,
        0,5831,5833,3,528,264,0,5832,5831,1,0,0,0,5832,5833,1,0,0,0,5833,
        5834,1,0,0,0,5834,5835,5,36,0,0,5835,5836,3,530,265,0,5836,527,1,
        0,0,0,5837,5838,5,2,0,0,5838,5843,3,652,326,0,5839,5840,5,6,0,0,
        5840,5842,3,652,326,0,5841,5839,1,0,0,0,5842,5845,1,0,0,0,5843,5841,
        1,0,0,0,5843,5844,1,0,0,0,5844,5846,1,0,0,0,5845,5843,1,0,0,0,5846,
        5847,5,3,0,0,5847,529,1,0,0,0,5848,5853,3,560,280,0,5849,5853,3,
        538,269,0,5850,5853,3,552,276,0,5851,5853,3,548,274,0,5852,5848,
        1,0,0,0,5852,5849,1,0,0,0,5852,5850,1,0,0,0,5852,5851,1,0,0,0,5853,
        531,1,0,0,0,5854,5855,5,202,0,0,5855,5857,3,818,409,0,5856,5858,
        3,534,267,0,5857,5856,1,0,0,0,5857,5858,1,0,0,0,5858,5878,1,0,0,
        0,5859,5861,5,46,0,0,5860,5862,3,122,61,0,5861,5860,1,0,0,0,5861,
        5862,1,0,0,0,5862,5863,1,0,0,0,5863,5865,5,92,0,0,5864,5866,3,294,
        147,0,5865,5864,1,0,0,0,5865,5866,1,0,0,0,5866,5867,1,0,0,0,5867,
        5868,3,188,94,0,5868,5869,5,36,0,0,5869,5870,5,202,0,0,5870,5872,
        3,818,409,0,5871,5873,3,534,267,0,5872,5871,1,0,0,0,5872,5873,1,
        0,0,0,5873,5875,1,0,0,0,5874,5876,3,190,95,0,5875,5874,1,0,0,0,5875,
        5876,1,0,0,0,5876,5878,1,0,0,0,5877,5854,1,0,0,0,5877,5859,1,0,0,
        0,5878,533,1,0,0,0,5879,5880,5,2,0,0,5880,5881,3,730,365,0,5881,
        5882,5,3,0,0,5882,535,1,0,0,0,5883,5885,5,177,0,0,5884,5886,5,290,
        0,0,5885,5884,1,0,0,0,5885,5886,1,0,0,0,5886,5889,1,0,0,0,5887,5890,
        3,818,409,0,5888,5890,5,30,0,0,5889,5887,1,0,0,0,5889,5888,1,0,0,
        0,5890,537,1,0,0,0,5891,5893,3,572,286,0,5892,5891,1,0,0,0,5892,
        5893,1,0,0,0,5893,5894,1,0,0,0,5894,5895,5,241,0,0,5895,5896,5,71,
        0,0,5896,5899,3,774,387,0,5897,5898,5,36,0,0,5898,5900,3,818,409,
        0,5899,5897,1,0,0,0,5899,5900,1,0,0,0,5900,5901,1,0,0,0,5901,5923,
        3,540,270,0,5902,5903,5,80,0,0,5903,5911,5,464,0,0,5904,5906,3,360,
        180,0,5905,5907,3,638,319,0,5906,5905,1,0,0,0,5906,5907,1,0,0,0,
        5907,5912,1,0,0,0,5908,5909,5,80,0,0,5909,5910,5,45,0,0,5910,5912,
        3,818,409,0,5911,5904,1,0,0,0,5911,5908,1,0,0,0,5911,5912,1,0,0,
        0,5912,5913,1,0,0,0,5913,5921,5,57,0,0,5914,5915,5,369,0,0,5915,
        5916,5,333,0,0,5916,5918,3,554,277,0,5917,5919,3,638,319,0,5918,
        5917,1,0,0,0,5918,5919,1,0,0,0,5919,5922,1,0,0,0,5920,5922,5,270,
        0,0,5921,5914,1,0,0,0,5921,5920,1,0,0,0,5922,5924,1,0,0,0,5923,5902,
        1,0,0,0,5923,5924,1,0,0,0,5924,5926,1,0,0,0,5925,5927,3,546,273,
        0,5926,5925,1,0,0,0,5926,5927,1,0,0,0,5927,539,1,0,0,0,5928,5929,
        5,2,0,0,5929,5930,3,542,271,0,5930,5931,5,3,0,0,5931,5933,1,0,0,
        0,5932,5928,1,0,0,0,5932,5933,1,0,0,0,5933,5937,1,0,0,0,5934,5935,
        5,463,0,0,5935,5936,7,76,0,0,5936,5938,5,450,0,0,5937,5934,1,0,0,
        0,5937,5938,1,0,0,0,5938,5941,1,0,0,0,5939,5942,3,910,455,0,5940,
        5942,3,560,280,0,5941,5939,1,0,0,0,5941,5940,1,0,0,0,5942,541,1,
        0,0,0,5943,5948,3,544,272,0,5944,5945,5,6,0,0,5945,5947,3,544,272,
        0,5946,5944,1,0,0,0,5947,5950,1,0,0,0,5948,5946,1,0,0,0,5948,5949,
        1,0,0,0,5949,543,1,0,0,0,5950,5948,1,0,0,0,5951,5952,3,800,400,0,
        5952,5953,3,754,377,0,5953,545,1,0,0,0,5954,5955,5,87,0,0,5955,5956,
        3,756,378,0,5956,547,1,0,0,0,5957,5959,3,572,286,0,5958,5957,1,0,
        0,0,5958,5959,1,0,0,0,5959,5960,1,0,0,0,5960,5961,5,182,0,0,5961,
        5962,5,64,0,0,5962,5965,3,630,315,0,5963,5964,5,100,0,0,5964,5966,
        3,612,306,0,5965,5963,1,0,0,0,5965,5966,1,0,0,0,5966,5968,1,0,0,
        0,5967,5969,3,640,320,0,5968,5967,1,0,0,0,5968,5969,1,0,0,0,5969,
        5971,1,0,0,0,5970,5972,3,546,273,0,5971,5970,1,0,0,0,5971,5972,1,
        0,0,0,5972,549,1,0,0,0,5973,5975,5,256,0,0,5974,5976,5,92,0,0,5975,
        5974,1,0,0,0,5975,5976,1,0,0,0,5976,5977,1,0,0,0,5977,5992,3,628,
        314,0,5978,5989,5,68,0,0,5979,5980,7,77,0,0,5980,5990,7,78,0,0,5981,
        5986,5,334,0,0,5982,5983,5,369,0,0,5983,5987,5,201,0,0,5984,5985,
        5,414,0,0,5985,5987,5,201,0,0,5986,5982,1,0,0,0,5986,5984,1,0,0,
        0,5986,5987,1,0,0,0,5987,5990,1,0,0,0,5988,5990,5,201,0,0,5989,5979,
        1,0,0,0,5989,5981,1,0,0,0,5989,5988,1,0,0,0,5990,5991,1,0,0,0,5991,
        5993,5,263,0,0,5992,5978,1,0,0,0,5992,5993,1,0,0,0,5993,5995,1,0,
        0,0,5994,5996,5,272,0,0,5995,5994,1,0,0,0,5995,5996,1,0,0,0,5996,
        551,1,0,0,0,5997,5999,3,572,286,0,5998,5997,1,0,0,0,5998,5999,1,
        0,0,0,5999,6000,1,0,0,0,6000,6001,5,369,0,0,6001,6002,3,630,315,
        0,6002,6003,5,333,0,0,6003,6005,3,554,277,0,6004,6006,3,610,305,
        0,6005,6004,1,0,0,0,6005,6006,1,0,0,0,6006,6008,1,0,0,0,6007,6009,
        3,640,320,0,6008,6007,1,0,0,0,6008,6009,1,0,0,0,6009,6011,1,0,0,
        0,6010,6012,3,546,273,0,6011,6010,1,0,0,0,6011,6012,1,0,0,0,6012,
        553,1,0,0,0,6013,6018,3,556,278,0,6014,6015,5,6,0,0,6015,6017,3,
        556,278,0,6016,6014,1,0,0,0,6017,6020,1,0,0,0,6018,6016,1,0,0,0,
        6018,6019,1,0,0,0,6019,555,1,0,0,0,6020,6018,1,0,0,0,6021,6022,3,
        544,272,0,6022,6023,5,10,0,0,6023,6024,3,674,337,0,6024,6040,1,0,
        0,0,6025,6026,5,2,0,0,6026,6027,3,542,271,0,6027,6028,5,3,0,0,6028,
        6037,5,10,0,0,6029,6031,5,414,0,0,6030,6029,1,0,0,0,6030,6031,1,
        0,0,0,6031,6032,1,0,0,0,6032,6038,3,674,337,0,6033,6034,5,2,0,0,
        6034,6035,3,566,283,0,6035,6036,5,3,0,0,6036,6038,1,0,0,0,6037,6030,
        1,0,0,0,6037,6033,1,0,0,0,6038,6040,1,0,0,0,6039,6021,1,0,0,0,6039,
        6025,1,0,0,0,6040,557,1,0,0,0,6041,6042,5,178,0,0,6042,6051,3,818,
        409,0,6043,6045,5,269,0,0,6044,6043,1,0,0,0,6044,6045,1,0,0,0,6045,
        6046,1,0,0,0,6046,6050,5,324,0,0,6047,6050,5,107,0,0,6048,6050,5,
        240,0,0,6049,6044,1,0,0,0,6049,6047,1,0,0,0,6049,6048,1,0,0,0,6050,
        6053,1,0,0,0,6051,6049,1,0,0,0,6051,6052,1,0,0,0,6052,6054,1,0,0,
        0,6053,6051,1,0,0,0,6054,6057,5,172,0,0,6055,6056,7,26,0,0,6056,
        6058,5,217,0,0,6057,6055,1,0,0,0,6057,6058,1,0,0,0,6058,6059,1,0,
        0,0,6059,6060,5,62,0,0,6060,6061,3,560,280,0,6061,559,1,0,0,0,6062,
        6065,3,564,282,0,6063,6065,3,562,281,0,6064,6062,1,0,0,0,6064,6063,
        1,0,0,0,6065,561,1,0,0,0,6066,6069,5,2,0,0,6067,6070,3,564,282,0,
        6068,6070,3,562,281,0,6069,6067,1,0,0,0,6069,6068,1,0,0,0,6070,6071,
        1,0,0,0,6071,6072,5,3,0,0,6072,563,1,0,0,0,6073,6075,3,572,286,0,
        6074,6073,1,0,0,0,6074,6075,1,0,0,0,6075,6076,1,0,0,0,6076,6078,
        3,566,283,0,6077,6079,3,586,293,0,6078,6077,1,0,0,0,6078,6079,1,
        0,0,0,6079,6088,1,0,0,0,6080,6082,3,606,303,0,6081,6083,3,590,295,
        0,6082,6081,1,0,0,0,6082,6083,1,0,0,0,6083,6089,1,0,0,0,6084,6086,
        3,590,295,0,6085,6087,3,606,303,0,6086,6085,1,0,0,0,6086,6087,1,
        0,0,0,6087,6089,1,0,0,0,6088,6080,1,0,0,0,6088,6084,1,0,0,0,6088,
        6089,1,0,0,0,6089,565,1,0,0,0,6090,6093,3,568,284,0,6091,6093,3,
        562,281,0,6092,6090,1,0,0,0,6092,6091,1,0,0,0,6093,567,1,0,0,0,6094,
        6104,5,88,0,0,6095,6097,5,30,0,0,6096,6095,1,0,0,0,6096,6097,1,0,
        0,0,6097,6099,1,0,0,0,6098,6100,3,580,290,0,6099,6098,1,0,0,0,6099,
        6100,1,0,0,0,6100,6105,1,0,0,0,6101,6103,3,584,292,0,6102,6101,1,
        0,0,0,6102,6103,1,0,0,0,6103,6105,1,0,0,0,6104,6096,1,0,0,0,6104,
        6102,1,0,0,0,6105,6106,1,0,0,0,6106,6117,3,930,465,0,6107,6117,3,
        608,304,0,6108,6109,5,92,0,0,6109,6117,3,624,312,0,6110,6111,3,562,
        281,0,6111,6114,3,570,285,0,6112,6115,3,568,284,0,6113,6115,3,562,
        281,0,6114,6112,1,0,0,0,6114,6113,1,0,0,0,6115,6117,1,0,0,0,6116,
        6094,1,0,0,0,6116,6107,1,0,0,0,6116,6108,1,0,0,0,6116,6110,1,0,0,
        0,6117,6125,1,0,0,0,6118,6121,3,570,285,0,6119,6122,3,568,284,0,
        6120,6122,3,562,281,0,6121,6119,1,0,0,0,6121,6120,1,0,0,0,6122,6124,
        1,0,0,0,6123,6118,1,0,0,0,6124,6127,1,0,0,0,6125,6123,1,0,0,0,6125,
        6126,1,0,0,0,6126,569,1,0,0,0,6127,6125,1,0,0,0,6128,6130,7,79,0,
        0,6129,6131,7,80,0,0,6130,6129,1,0,0,0,6130,6131,1,0,0,0,6131,571,
        1,0,0,0,6132,6134,5,105,0,0,6133,6135,5,303,0,0,6134,6133,1,0,0,
        0,6134,6135,1,0,0,0,6135,6136,1,0,0,0,6136,6141,3,574,287,0,6137,
        6138,5,6,0,0,6138,6140,3,574,287,0,6139,6137,1,0,0,0,6140,6143,1,
        0,0,0,6141,6139,1,0,0,0,6141,6142,1,0,0,0,6142,573,1,0,0,0,6143,
        6141,1,0,0,0,6144,6146,3,818,409,0,6145,6147,3,144,72,0,6146,6145,
        1,0,0,0,6146,6147,1,0,0,0,6147,6148,1,0,0,0,6148,6153,5,36,0,0,6149,
        6151,5,77,0,0,6150,6149,1,0,0,0,6150,6151,1,0,0,0,6151,6152,1,0,
        0,0,6152,6154,5,259,0,0,6153,6150,1,0,0,0,6153,6154,1,0,0,0,6154,
        6155,1,0,0,0,6155,6156,5,2,0,0,6156,6157,3,530,265,0,6157,6159,5,
        3,0,0,6158,6160,3,576,288,0,6159,6158,1,0,0,0,6159,6160,1,0,0,0,
        6160,6162,1,0,0,0,6161,6163,3,578,289,0,6162,6161,1,0,0,0,6162,6163,
        1,0,0,0,6163,575,1,0,0,0,6164,6165,5,325,0,0,6165,6166,7,81,0,0,
        6166,6167,5,207,0,0,6167,6168,5,147,0,0,6168,6169,3,148,74,0,6169,
        6170,5,333,0,0,6170,6171,3,800,400,0,6171,577,1,0,0,0,6172,6173,
        5,173,0,0,6173,6174,3,148,74,0,6174,6175,5,333,0,0,6175,6181,3,800,
        400,0,6176,6177,5,94,0,0,6177,6178,3,818,409,0,6178,6179,5,53,0,
        0,6179,6180,3,818,409,0,6180,6182,1,0,0,0,6181,6176,1,0,0,0,6181,
        6182,1,0,0,0,6182,6183,1,0,0,0,6183,6184,5,100,0,0,6184,6185,3,800,
        400,0,6185,579,1,0,0,0,6186,6192,5,71,0,0,6187,6189,5,346,0,0,6188,
        6187,1,0,0,0,6188,6189,1,0,0,0,6189,6190,1,0,0,0,6190,6193,3,582,
        291,0,6191,6193,3,730,365,0,6192,6188,1,0,0,0,6192,6191,1,0,0,0,
        6193,581,1,0,0,0,6194,6196,7,20,0,0,6195,6194,1,0,0,0,6195,6196,
        1,0,0,0,6196,6197,1,0,0,0,6197,6199,7,21,0,0,6198,6200,5,92,0,0,
        6199,6198,1,0,0,0,6199,6200,1,0,0,0,6200,6201,1,0,0,0,6201,6210,
        3,772,386,0,6202,6204,5,367,0,0,6203,6202,1,0,0,0,6203,6204,1,0,
        0,0,6204,6206,1,0,0,0,6205,6207,5,92,0,0,6206,6205,1,0,0,0,6206,
        6207,1,0,0,0,6207,6208,1,0,0,0,6208,6210,3,772,386,0,6209,6195,1,
        0,0,0,6209,6203,1,0,0,0,6210,583,1,0,0,0,6211,6214,5,56,0,0,6212,
        6213,5,80,0,0,6213,6215,3,534,267,0,6214,6212,1,0,0,0,6214,6215,
        1,0,0,0,6215,585,1,0,0,0,6216,6217,5,83,0,0,6217,6218,5,147,0,0,
        6218,6223,3,588,294,0,6219,6220,5,6,0,0,6220,6222,3,588,294,0,6221,
        6219,1,0,0,0,6222,6225,1,0,0,0,6223,6221,1,0,0,0,6223,6224,1,0,0,
        0,6224,587,1,0,0,0,6225,6223,1,0,0,0,6226,6230,3,734,367,0,6227,
        6228,5,100,0,0,6228,6231,3,726,363,0,6229,6231,7,55,0,0,6230,6227,
        1,0,0,0,6230,6229,1,0,0,0,6230,6231,1,0,0,0,6231,6234,1,0,0,0,6232,
        6233,5,273,0,0,6233,6235,7,56,0,0,6234,6232,1,0,0,0,6234,6235,1,
        0,0,0,6235,589,1,0,0,0,6236,6238,3,596,298,0,6237,6239,3,594,297,
        0,6238,6237,1,0,0,0,6238,6239,1,0,0,0,6239,6248,1,0,0,0,6240,6243,
        3,592,296,0,6241,6243,3,594,297,0,6242,6240,1,0,0,0,6242,6241,1,
        0,0,0,6243,6245,1,0,0,0,6244,6246,3,596,298,0,6245,6244,1,0,0,0,
        6245,6246,1,0,0,0,6246,6248,1,0,0,0,6247,6236,1,0,0,0,6247,6242,
        1,0,0,0,6248,591,1,0,0,0,6249,6252,5,74,0,0,6250,6253,3,674,337,
        0,6251,6253,5,30,0,0,6252,6250,1,0,0,0,6252,6251,1,0,0,0,6253,6256,
        1,0,0,0,6254,6255,5,6,0,0,6255,6257,3,674,337,0,6256,6254,1,0,0,
        0,6256,6257,1,0,0,0,6257,593,1,0,0,0,6258,6259,5,61,0,0,6259,6261,
        7,82,0,0,6260,6262,3,598,299,0,6261,6260,1,0,0,0,6261,6262,1,0,0,
        0,6262,6263,1,0,0,0,6263,6267,7,83,0,0,6264,6268,5,81,0,0,6265,6266,
        5,105,0,0,6266,6268,5,467,0,0,6267,6264,1,0,0,0,6267,6265,1,0,0,
        0,6268,595,1,0,0,0,6269,6274,5,79,0,0,6270,6271,3,598,299,0,6271,
        6272,7,83,0,0,6272,6275,1,0,0,0,6273,6275,3,674,337,0,6274,6270,
        1,0,0,0,6274,6273,1,0,0,0,6275,597,1,0,0,0,6276,6277,7,29,0,0,6277,
        6280,7,84,0,0,6278,6280,3,682,341,0,6279,6276,1,0,0,0,6279,6278,
        1,0,0,0,6280,599,1,0,0,0,6281,6282,5,66,0,0,6282,6284,5,147,0,0,
        6283,6285,7,80,0,0,6284,6283,1,0,0,0,6284,6285,1,0,0,0,6285,6286,
        1,0,0,0,6286,6287,3,602,301,0,6287,601,1,0,0,0,6288,6293,3,604,302,
        0,6289,6290,5,6,0,0,6290,6292,3,604,302,0,6291,6289,1,0,0,0,6292,
        6295,1,0,0,0,6293,6291,1,0,0,0,6293,6294,1,0,0,0,6294,603,1,0,0,
        0,6295,6293,1,0,0,0,6296,6320,3,734,367,0,6297,6298,5,2,0,0,6298,
        6320,5,3,0,0,6299,6301,7,85,0,0,6300,6299,1,0,0,0,6300,6301,1,0,
        0,0,6301,6302,1,0,0,0,6302,6303,5,2,0,0,6303,6308,3,734,367,0,6304,
        6305,5,6,0,0,6305,6307,3,734,367,0,6306,6304,1,0,0,0,6307,6310,1,
        0,0,0,6308,6306,1,0,0,0,6308,6309,1,0,0,0,6309,6311,1,0,0,0,6310,
        6308,1,0,0,0,6311,6312,5,3,0,0,6312,6320,1,0,0,0,6313,6314,5,470,
        0,0,6314,6315,5,471,0,0,6315,6316,5,2,0,0,6316,6317,3,602,301,0,
        6317,6318,5,3,0,0,6318,6320,1,0,0,0,6319,6296,1,0,0,0,6319,6297,
        1,0,0,0,6319,6300,1,0,0,0,6319,6313,1,0,0,0,6320,605,1,0,0,0,6321,
        6331,5,62,0,0,6322,6323,5,269,0,0,6323,6325,5,245,0,0,6324,6322,
        1,0,0,0,6324,6325,1,0,0,0,6325,6326,1,0,0,0,6326,6332,5,369,0,0,
        6327,6329,5,245,0,0,6328,6327,1,0,0,0,6328,6329,1,0,0,0,6329,6330,
        1,0,0,0,6330,6332,5,334,0,0,6331,6324,1,0,0,0,6331,6328,1,0,0,0,
        6332,6335,1,0,0,0,6333,6334,5,275,0,0,6334,6336,3,760,380,0,6335,
        6333,1,0,0,0,6335,6336,1,0,0,0,6336,6340,1,0,0,0,6337,6341,5,272,
        0,0,6338,6339,5,465,0,0,6339,6341,5,466,0,0,6340,6337,1,0,0,0,6340,
        6338,1,0,0,0,6340,6341,1,0,0,0,6341,6343,1,0,0,0,6342,6321,1,0,0,
        0,6343,6344,1,0,0,0,6344,6342,1,0,0,0,6344,6345,1,0,0,0,6345,6350,
        1,0,0,0,6346,6347,5,62,0,0,6347,6348,5,300,0,0,6348,6350,5,81,0,
        0,6349,6342,1,0,0,0,6349,6346,1,0,0,0,6350,607,1,0,0,0,6351,6352,
        5,422,0,0,6352,6357,3,534,267,0,6353,6354,5,6,0,0,6354,6356,3,534,
        267,0,6355,6353,1,0,0,0,6356,6359,1,0,0,0,6357,6355,1,0,0,0,6357,
        6358,1,0,0,0,6358,609,1,0,0,0,6359,6357,1,0,0,0,6360,6361,5,64,0,
        0,6361,6362,3,612,306,0,6362,611,1,0,0,0,6363,6368,3,614,307,0,6364,
        6365,5,6,0,0,6365,6367,3,614,307,0,6366,6364,1,0,0,0,6367,6370,1,
        0,0,0,6368,6366,1,0,0,0,6368,6369,1,0,0,0,6369,613,1,0,0,0,6370,
        6368,1,0,0,0,6371,6386,3,624,312,0,6372,6374,5,81,0,0,6373,6372,
        1,0,0,0,6373,6374,1,0,0,0,6374,6375,1,0,0,0,6375,6377,3,778,389,
        0,6376,6378,5,9,0,0,6377,6376,1,0,0,0,6377,6378,1,0,0,0,6378,6380,
        1,0,0,0,6379,6381,3,148,74,0,6380,6379,1,0,0,0,6380,6381,1,0,0,0,
        6381,6383,1,0,0,0,6382,6384,3,638,319,0,6383,6382,1,0,0,0,6383,6384,
        1,0,0,0,6384,6386,1,0,0,0,6385,6371,1,0,0,0,6385,6373,1,0,0,0,6386,
        6388,1,0,0,0,6387,6389,3,616,308,0,6388,6387,1,0,0,0,6388,6389,1,
        0,0,0,6389,6391,1,0,0,0,6390,6392,3,632,316,0,6391,6390,1,0,0,0,
        6391,6392,1,0,0,0,6392,6435,1,0,0,0,6393,6395,5,72,0,0,6394,6393,
        1,0,0,0,6394,6395,1,0,0,0,6395,6408,1,0,0,0,6396,6398,3,646,323,
        0,6397,6399,3,616,308,0,6398,6397,1,0,0,0,6398,6399,1,0,0,0,6399,
        6409,1,0,0,0,6400,6402,3,634,317,0,6401,6403,3,618,309,0,6402,6401,
        1,0,0,0,6402,6403,1,0,0,0,6403,6409,1,0,0,0,6404,6406,3,562,281,
        0,6405,6407,3,616,308,0,6406,6405,1,0,0,0,6406,6407,1,0,0,0,6407,
        6409,1,0,0,0,6408,6396,1,0,0,0,6408,6400,1,0,0,0,6408,6404,1,0,0,
        0,6409,6435,1,0,0,0,6410,6411,5,2,0,0,6411,6428,3,614,307,0,6412,
        6413,5,110,0,0,6413,6414,5,118,0,0,6414,6429,3,614,307,0,6415,6417,
        5,121,0,0,6416,6418,3,620,310,0,6417,6416,1,0,0,0,6417,6418,1,0,
        0,0,6418,6419,1,0,0,0,6419,6420,5,118,0,0,6420,6429,3,614,307,0,
        6421,6423,3,620,310,0,6422,6421,1,0,0,0,6422,6423,1,0,0,0,6423,6424,
        1,0,0,0,6424,6425,5,118,0,0,6425,6426,3,614,307,0,6426,6427,3,622,
        311,0,6427,6429,1,0,0,0,6428,6412,1,0,0,0,6428,6415,1,0,0,0,6428,
        6422,1,0,0,0,6428,6429,1,0,0,0,6429,6430,1,0,0,0,6430,6432,5,3,0,
        0,6431,6433,3,616,308,0,6432,6431,1,0,0,0,6432,6433,1,0,0,0,6433,
        6435,1,0,0,0,6434,6385,1,0,0,0,6434,6394,1,0,0,0,6434,6410,1,0,0,
        0,6435,6454,1,0,0,0,6436,6437,5,110,0,0,6437,6438,5,118,0,0,6438,
        6453,3,614,307,0,6439,6441,5,121,0,0,6440,6442,3,620,310,0,6441,
        6440,1,0,0,0,6441,6442,1,0,0,0,6442,6443,1,0,0,0,6443,6444,5,118,
        0,0,6444,6453,3,614,307,0,6445,6447,3,620,310,0,6446,6445,1,0,0,
        0,6446,6447,1,0,0,0,6447,6448,1,0,0,0,6448,6449,5,118,0,0,6449,6450,
        3,614,307,0,6450,6451,3,622,311,0,6451,6453,1,0,0,0,6452,6436,1,
        0,0,0,6452,6439,1,0,0,0,6452,6446,1,0,0,0,6453,6456,1,0,0,0,6454,
        6452,1,0,0,0,6454,6455,1,0,0,0,6455,615,1,0,0,0,6456,6454,1,0,0,
        0,6457,6459,5,36,0,0,6458,6457,1,0,0,0,6458,6459,1,0,0,0,6459,6460,
        1,0,0,0,6460,6465,3,818,409,0,6461,6462,5,2,0,0,6462,6463,3,784,
        392,0,6463,6464,5,3,0,0,6464,6466,1,0,0,0,6465,6461,1,0,0,0,6465,
        6466,1,0,0,0,6466,617,1,0,0,0,6467,6480,3,616,308,0,6468,6470,5,
        36,0,0,6469,6471,3,818,409,0,6470,6469,1,0,0,0,6470,6471,1,0,0,0,
        6471,6474,1,0,0,0,6472,6474,3,818,409,0,6473,6468,1,0,0,0,6473,6472,
        1,0,0,0,6474,6475,1,0,0,0,6475,6476,5,2,0,0,6476,6477,3,642,321,
        0,6477,6478,5,3,0,0,6478,6480,1,0,0,0,6479,6467,1,0,0,0,6479,6473,
        1,0,0,0,6480,619,1,0,0,0,6481,6483,7,86,0,0,6482,6484,5,123,0,0,
        6483,6482,1,0,0,0,6483,6484,1,0,0,0,6484,621,1,0,0,0,6485,6486,5,
        100,0,0,6486,6490,3,144,72,0,6487,6488,5,80,0,0,6488,6490,3,674,
        337,0,6489,6485,1,0,0,0,6489,6487,1,0,0,0,6490,623,1,0,0,0,6491,
        6507,3,322,161,0,6492,6498,5,81,0,0,6493,6499,3,774,387,0,6494,6495,
        5,2,0,0,6495,6496,3,774,387,0,6496,6497,5,3,0,0,6497,6499,1,0,0,
        0,6498,6493,1,0,0,0,6498,6494,1,0,0,0,6499,6507,1,0,0,0,6500,6501,
        5,68,0,0,6501,6504,5,323,0,0,6502,6505,3,790,395,0,6503,6505,5,111,
        0,0,6504,6502,1,0,0,0,6504,6503,1,0,0,0,6505,6507,1,0,0,0,6506,6491,
        1,0,0,0,6506,6492,1,0,0,0,6506,6500,1,0,0,0,6507,625,1,0,0,0,6508,
        6509,5,92,0,0,6509,6511,3,322,161,0,6510,6512,3,144,72,0,6511,6510,
        1,0,0,0,6511,6512,1,0,0,0,6512,6514,1,0,0,0,6513,6515,3,638,319,
        0,6514,6513,1,0,0,0,6514,6515,1,0,0,0,6515,6533,1,0,0,0,6516,6517,
        5,92,0,0,6517,6523,5,81,0,0,6518,6524,3,774,387,0,6519,6520,5,2,
        0,0,6520,6521,3,774,387,0,6521,6522,5,3,0,0,6522,6524,1,0,0,0,6523,
        6518,1,0,0,0,6523,6519,1,0,0,0,6524,6533,1,0,0,0,6525,6526,5,350,
        0,0,6526,6527,5,68,0,0,6527,6530,5,323,0,0,6528,6531,3,790,395,0,
        6529,6531,5,111,0,0,6530,6528,1,0,0,0,6530,6529,1,0,0,0,6531,6533,
        1,0,0,0,6532,6508,1,0,0,0,6532,6516,1,0,0,0,6532,6525,1,0,0,0,6533,
        627,1,0,0,0,6534,6539,3,624,312,0,6535,6536,5,6,0,0,6536,6538,3,
        624,312,0,6537,6535,1,0,0,0,6538,6541,1,0,0,0,6539,6537,1,0,0,0,
        6539,6540,1,0,0,0,6540,629,1,0,0,0,6541,6539,1,0,0,0,6542,6547,3,
        624,312,0,6543,6545,5,36,0,0,6544,6543,1,0,0,0,6544,6545,1,0,0,0,
        6545,6546,1,0,0,0,6546,6548,3,818,409,0,6547,6544,1,0,0,0,6547,6548,
        1,0,0,0,6548,631,1,0,0,0,6549,6550,5,472,0,0,6550,6551,3,806,403,
        0,6551,6557,3,534,267,0,6552,6553,5,310,0,0,6553,6554,5,2,0,0,6554,
        6555,3,674,337,0,6555,6556,5,3,0,0,6556,6558,1,0,0,0,6557,6552,1,
        0,0,0,6557,6558,1,0,0,0,6558,633,1,0,0,0,6559,6574,3,688,344,0,6560,
        6561,5,320,0,0,6561,6562,5,64,0,0,6562,6563,5,2,0,0,6563,6568,3,
        636,318,0,6564,6565,5,6,0,0,6565,6567,3,636,318,0,6566,6564,1,0,
        0,0,6567,6570,1,0,0,0,6568,6566,1,0,0,0,6568,6569,1,0,0,0,6569,6571,
        1,0,0,0,6570,6568,1,0,0,0,6571,6572,5,3,0,0,6572,6574,1,0,0,0,6573,
        6559,1,0,0,0,6573,6560,1,0,0,0,6574,6577,1,0,0,0,6575,6576,5,105,
        0,0,6576,6578,5,473,0,0,6577,6575,1,0,0,0,6577,6578,1,0,0,0,6578,
        635,1,0,0,0,6579,6585,3,688,344,0,6580,6581,5,36,0,0,6581,6582,5,
        2,0,0,6582,6583,3,642,321,0,6583,6584,5,3,0,0,6584,6586,1,0,0,0,
        6585,6580,1,0,0,0,6585,6586,1,0,0,0,6586,637,1,0,0,0,6587,6588,5,
        103,0,0,6588,6589,3,734,367,0,6589,639,1,0,0,0,6590,6595,5,103,0,
        0,6591,6592,5,434,0,0,6592,6593,5,275,0,0,6593,6596,3,818,409,0,
        6594,6596,3,674,337,0,6595,6591,1,0,0,0,6595,6594,1,0,0,0,6596,641,
        1,0,0,0,6597,6602,3,644,322,0,6598,6599,5,6,0,0,6599,6601,3,644,
        322,0,6600,6598,1,0,0,0,6601,6604,1,0,0,0,6602,6600,1,0,0,0,6602,
        6603,1,0,0,0,6603,643,1,0,0,0,6604,6602,1,0,0,0,6605,6606,3,818,
        409,0,6606,6608,3,652,326,0,6607,6609,3,98,49,0,6608,6607,1,0,0,
        0,6608,6609,1,0,0,0,6609,645,1,0,0,0,6610,6611,5,474,0,0,6611,6625,
        5,2,0,0,6612,6613,5,476,0,0,6613,6614,5,2,0,0,6614,6619,3,650,325,
        0,6615,6616,5,6,0,0,6616,6618,3,650,325,0,6617,6615,1,0,0,0,6618,
        6621,1,0,0,0,6619,6617,1,0,0,0,6619,6620,1,0,0,0,6620,6622,1,0,0,
        0,6621,6619,1,0,0,0,6622,6623,5,3,0,0,6623,6624,5,6,0,0,6624,6626,
        1,0,0,0,6625,6612,1,0,0,0,6625,6626,1,0,0,0,6626,6627,1,0,0,0,6627,
        6628,3,682,341,0,6628,6629,3,698,349,0,6629,6630,5,475,0,0,6630,
        6635,3,648,324,0,6631,6632,5,6,0,0,6632,6634,3,648,324,0,6633,6631,
        1,0,0,0,6634,6637,1,0,0,0,6635,6633,1,0,0,0,6635,6636,1,0,0,0,6636,
        6638,1,0,0,0,6637,6635,1,0,0,0,6638,6639,5,3,0,0,6639,647,1,0,0,
        0,6640,6659,3,818,409,0,6641,6655,3,652,326,0,6642,6645,5,53,0,0,
        6643,6645,3,826,413,0,6644,6642,1,0,0,0,6644,6643,1,0,0,0,6645,6646,
        1,0,0,0,6646,6652,3,674,337,0,6647,6649,5,77,0,0,6648,6647,1,0,0,
        0,6648,6649,1,0,0,0,6649,6650,1,0,0,0,6650,6652,5,78,0,0,6651,6644,
        1,0,0,0,6651,6648,1,0,0,0,6652,6653,1,0,0,0,6653,6651,1,0,0,0,6653,
        6654,1,0,0,0,6654,6656,1,0,0,0,6655,6651,1,0,0,0,6655,6656,1,0,0,
        0,6656,6660,1,0,0,0,6657,6658,5,62,0,0,6658,6660,5,473,0,0,6659,
        6641,1,0,0,0,6659,6657,1,0,0,0,6660,649,1,0,0,0,6661,6662,3,682,
        341,0,6662,6663,5,36,0,0,6663,6664,3,824,412,0,6664,6668,1,0,0,0,
        6665,6666,5,53,0,0,6666,6668,3,682,341,0,6667,6661,1,0,0,0,6667,
        6665,1,0,0,0,6668,651,1,0,0,0,6669,6671,5,415,0,0,6670,6669,1,0,
        0,0,6670,6671,1,0,0,0,6671,6672,1,0,0,0,6672,6689,3,654,327,0,6673,
        6675,5,4,0,0,6674,6676,5,571,0,0,6675,6674,1,0,0,0,6675,6676,1,0,
        0,0,6676,6677,1,0,0,0,6677,6679,5,5,0,0,6678,6673,1,0,0,0,6679,6682,
        1,0,0,0,6680,6678,1,0,0,0,6680,6681,1,0,0,0,6681,6690,1,0,0,0,6682,
        6680,1,0,0,0,6683,6687,5,35,0,0,6684,6685,5,4,0,0,6685,6686,5,571,
        0,0,6686,6688,5,5,0,0,6687,6684,1,0,0,0,6687,6688,1,0,0,0,6688,6690,
        1,0,0,0,6689,6680,1,0,0,0,6689,6683,1,0,0,0,6690,6696,1,0,0,0,6691,
        6692,3,780,390,0,6692,6693,5,27,0,0,6693,6694,7,87,0,0,6694,6696,
        1,0,0,0,6695,6670,1,0,0,0,6695,6691,1,0,0,0,6696,653,1,0,0,0,6697,
        6699,3,820,410,0,6698,6700,3,318,159,0,6699,6698,1,0,0,0,6699,6700,
        1,0,0,0,6700,6702,1,0,0,0,6701,6703,3,534,267,0,6702,6701,1,0,0,
        0,6702,6703,1,0,0,0,6703,6713,1,0,0,0,6704,6713,3,656,328,0,6705,
        6710,5,403,0,0,6706,6708,3,668,334,0,6707,6706,1,0,0,0,6707,6708,
        1,0,0,0,6708,6711,1,0,0,0,6709,6711,3,660,330,0,6710,6707,1,0,0,
        0,6710,6709,1,0,0,0,6711,6713,1,0,0,0,6712,6697,1,0,0,0,6712,6704,
        1,0,0,0,6712,6705,1,0,0,0,6713,655,1,0,0,0,6714,6719,3,658,329,0,
        6715,6719,3,662,331,0,6716,6719,3,664,332,0,6717,6719,3,666,333,
        0,6718,6714,1,0,0,0,6718,6715,1,0,0,0,6718,6716,1,0,0,0,6718,6717,
        1,0,0,0,6719,657,1,0,0,0,6720,6737,5,401,0,0,6721,6737,5,402,0,0,
        6722,6737,5,416,0,0,6723,6737,5,388,0,0,6724,6737,5,413,0,0,6725,
        6727,5,398,0,0,6726,6728,3,660,330,0,6727,6726,1,0,0,0,6727,6728,
        1,0,0,0,6728,6737,1,0,0,0,6729,6730,5,190,0,0,6730,6737,5,412,0,
        0,6731,6733,7,88,0,0,6732,6734,3,534,267,0,6733,6732,1,0,0,0,6733,
        6734,1,0,0,0,6734,6737,1,0,0,0,6735,6737,5,390,0,0,6736,6720,1,0,
        0,0,6736,6721,1,0,0,0,6736,6722,1,0,0,0,6736,6723,1,0,0,0,6736,6724,
        1,0,0,0,6736,6725,1,0,0,0,6736,6729,1,0,0,0,6736,6731,1,0,0,0,6736,
        6735,1,0,0,0,6737,659,1,0,0,0,6738,6739,5,2,0,0,6739,6740,5,571,
        0,0,6740,6741,5,3,0,0,6741,661,1,0,0,0,6742,6744,5,389,0,0,6743,
        6745,5,374,0,0,6744,6743,1,0,0,0,6744,6745,1,0,0,0,6745,6747,1,0,
        0,0,6746,6748,3,534,267,0,6747,6746,1,0,0,0,6747,6748,1,0,0,0,6748,
        663,1,0,0,0,6749,6751,7,89,0,0,6750,6752,5,374,0,0,6751,6750,1,0,
        0,0,6751,6752,1,0,0,0,6752,6760,1,0,0,0,6753,6760,5,423,0,0,6754,
        6755,5,405,0,0,6755,6757,7,90,0,0,6756,6758,5,374,0,0,6757,6756,
        1,0,0,0,6757,6758,1,0,0,0,6758,6760,1,0,0,0,6759,6749,1,0,0,0,6759,
        6753,1,0,0,0,6759,6754,1,0,0,0,6760,6762,1,0,0,0,6761,6763,3,660,
        330,0,6762,6761,1,0,0,0,6762,6763,1,0,0,0,6763,665,1,0,0,0,6764,
        6766,7,91,0,0,6765,6767,3,660,330,0,6766,6765,1,0,0,0,6766,6767,
        1,0,0,0,6767,6771,1,0,0,0,6768,6769,7,26,0,0,6769,6770,5,418,0,0,
        6770,6772,5,386,0,0,6771,6768,1,0,0,0,6771,6772,1,0,0,0,6772,667,
        1,0,0,0,6773,6803,5,264,0,0,6774,6803,3,670,335,0,6775,6778,5,384,
        0,0,6776,6777,5,94,0,0,6777,6779,5,264,0,0,6778,6776,1,0,0,0,6778,
        6779,1,0,0,0,6779,6803,1,0,0,0,6780,6787,5,176,0,0,6781,6785,5,94,
        0,0,6782,6786,5,218,0,0,6783,6786,5,261,0,0,6784,6786,3,670,335,
        0,6785,6782,1,0,0,0,6785,6783,1,0,0,0,6785,6784,1,0,0,0,6786,6788,
        1,0,0,0,6787,6781,1,0,0,0,6787,6788,1,0,0,0,6788,6803,1,0,0,0,6789,
        6795,5,218,0,0,6790,6793,5,94,0,0,6791,6794,5,261,0,0,6792,6794,
        3,670,335,0,6793,6791,1,0,0,0,6793,6792,1,0,0,0,6794,6796,1,0,0,
        0,6795,6790,1,0,0,0,6795,6796,1,0,0,0,6796,6803,1,0,0,0,6797,6800,
        5,261,0,0,6798,6799,5,94,0,0,6799,6801,3,670,335,0,6800,6798,1,0,
        0,0,6800,6801,1,0,0,0,6801,6803,1,0,0,0,6802,6773,1,0,0,0,6802,6774,
        1,0,0,0,6802,6775,1,0,0,0,6802,6780,1,0,0,0,6802,6789,1,0,0,0,6802,
        6797,1,0,0,0,6803,669,1,0,0,0,6804,6806,5,326,0,0,6805,6807,3,660,
        330,0,6806,6805,1,0,0,0,6806,6807,1,0,0,0,6807,671,1,0,0,0,6808,
        6809,7,92,0,0,6809,673,1,0,0,0,6810,6811,3,676,338,0,6811,675,1,
        0,0,0,6812,6813,6,338,-1,0,6813,6815,3,680,340,0,6814,6816,3,678,
        339,0,6815,6814,1,0,0,0,6815,6816,1,0,0,0,6816,6820,1,0,0,0,6817,
        6818,5,77,0,0,6818,6820,3,676,338,3,6819,6812,1,0,0,0,6819,6817,
        1,0,0,0,6820,6829,1,0,0,0,6821,6822,10,2,0,0,6822,6823,5,33,0,0,
        6823,6828,3,676,338,3,6824,6825,10,1,0,0,6825,6826,5,82,0,0,6826,
        6828,3,676,338,2,6827,6821,1,0,0,0,6827,6824,1,0,0,0,6828,6831,1,
        0,0,0,6829,6827,1,0,0,0,6829,6830,1,0,0,0,6830,677,1,0,0,0,6831,
        6829,1,0,0,0,6832,6833,3,672,336,0,6833,6834,3,680,340,0,6834,6904,
        1,0,0,0,6835,6836,3,672,336,0,6836,6837,3,728,364,0,6837,6843,3,
        718,359,0,6838,6844,3,562,281,0,6839,6840,5,2,0,0,6840,6841,3,674,
        337,0,6841,6842,5,3,0,0,6842,6844,1,0,0,0,6843,6838,1,0,0,0,6843,
        6839,1,0,0,0,6844,6904,1,0,0,0,6845,6847,5,77,0,0,6846,6845,1,0,
        0,0,6846,6847,1,0,0,0,6847,6848,1,0,0,0,6848,6849,5,387,0,0,6849,
        6850,3,680,340,0,6850,6851,5,33,0,0,6851,6852,3,680,340,0,6852,6904,
        1,0,0,0,6853,6855,5,77,0,0,6854,6853,1,0,0,0,6854,6855,1,0,0,0,6855,
        6856,1,0,0,0,6856,6857,5,68,0,0,6857,6858,5,2,0,0,6858,6863,3,674,
        337,0,6859,6860,5,6,0,0,6860,6862,3,674,337,0,6861,6859,1,0,0,0,
        6862,6865,1,0,0,0,6863,6861,1,0,0,0,6863,6864,1,0,0,0,6864,6866,
        1,0,0,0,6865,6863,1,0,0,0,6866,6867,5,3,0,0,6867,6904,1,0,0,0,6868,
        6870,5,77,0,0,6869,6868,1,0,0,0,6869,6870,1,0,0,0,6870,6871,1,0,
        0,0,6871,6872,5,68,0,0,6872,6904,3,562,281,0,6873,6875,5,77,0,0,
        6874,6873,1,0,0,0,6874,6875,1,0,0,0,6875,6884,1,0,0,0,6876,6885,
        5,120,0,0,6877,6885,5,114,0,0,6878,6879,5,127,0,0,6879,6885,5,94,
        0,0,6880,6882,5,387,0,0,6881,6883,5,91,0,0,6882,6881,1,0,0,0,6882,
        6883,1,0,0,0,6883,6885,1,0,0,0,6884,6876,1,0,0,0,6884,6877,1,0,0,
        0,6884,6878,1,0,0,0,6884,6880,1,0,0,0,6885,6886,1,0,0,0,6886,6889,
        3,680,340,0,6887,6888,5,197,0,0,6888,6890,3,680,340,0,6889,6887,
        1,0,0,0,6889,6890,1,0,0,0,6890,6904,1,0,0,0,6891,6893,5,116,0,0,
        6892,6894,5,77,0,0,6893,6892,1,0,0,0,6893,6894,1,0,0,0,6894,6895,
        1,0,0,0,6895,6904,5,78,0,0,6896,6898,5,116,0,0,6897,6899,5,77,0,
        0,6898,6897,1,0,0,0,6898,6899,1,0,0,0,6899,6900,1,0,0,0,6900,6901,
        5,56,0,0,6901,6902,5,64,0,0,6902,6904,3,680,340,0,6903,6832,1,0,
        0,0,6903,6835,1,0,0,0,6903,6846,1,0,0,0,6903,6854,1,0,0,0,6903,6869,
        1,0,0,0,6903,6874,1,0,0,0,6903,6891,1,0,0,0,6903,6896,1,0,0,0,6904,
        679,1,0,0,0,6905,6906,6,340,-1,0,6906,6910,3,682,341,0,6907,6908,
        7,29,0,0,6908,6910,3,680,340,4,6909,6905,1,0,0,0,6909,6907,1,0,0,
        0,6910,6927,1,0,0,0,6911,6912,10,3,0,0,6912,6913,7,93,0,0,6913,6926,
        3,680,340,4,6914,6915,10,2,0,0,6915,6916,7,29,0,0,6916,6926,3,680,
        340,3,6917,6918,10,1,0,0,6918,6919,5,15,0,0,6919,6926,3,680,340,
        2,6920,6921,10,5,0,0,6921,6922,5,142,0,0,6922,6923,5,418,0,0,6923,
        6924,5,386,0,0,6924,6926,3,674,337,0,6925,6911,1,0,0,0,6925,6914,
        1,0,0,0,6925,6917,1,0,0,0,6925,6920,1,0,0,0,6926,6929,1,0,0,0,6927,
        6925,1,0,0,0,6927,6928,1,0,0,0,6928,681,1,0,0,0,6929,6927,1,0,0,
        0,6930,6931,6,341,-1,0,6931,6932,7,94,0,0,6932,7019,3,562,281,0,
        6933,6936,5,35,0,0,6934,6937,3,562,281,0,6935,6937,3,740,370,0,6936,
        6934,1,0,0,0,6936,6935,1,0,0,0,6937,7019,1,0,0,0,6938,6939,5,28,
        0,0,6939,7019,3,754,377,0,6940,6941,5,470,0,0,6941,7019,3,534,267,
        0,6942,7019,5,571,0,0,6943,7019,5,573,0,0,6944,7019,5,563,0,0,6945,
        7019,5,567,0,0,6946,6956,3,806,403,0,6947,6957,3,808,404,0,6948,
        6949,5,2,0,0,6949,6951,3,736,368,0,6950,6952,3,586,293,0,6951,6950,
        1,0,0,0,6951,6952,1,0,0,0,6952,6953,1,0,0,0,6953,6954,5,3,0,0,6954,
        6955,3,808,404,0,6955,6957,1,0,0,0,6956,6947,1,0,0,0,6956,6948,1,
        0,0,0,6957,7019,1,0,0,0,6958,6960,3,656,328,0,6959,6958,1,0,0,0,
        6959,6960,1,0,0,0,6960,6961,1,0,0,0,6961,7019,3,808,404,0,6962,6970,
        5,403,0,0,6963,6965,3,808,404,0,6964,6966,3,668,334,0,6965,6964,
        1,0,0,0,6965,6966,1,0,0,0,6966,6971,1,0,0,0,6967,6968,3,660,330,
        0,6968,6969,3,808,404,0,6969,6971,1,0,0,0,6970,6963,1,0,0,0,6970,
        6967,1,0,0,0,6971,7019,1,0,0,0,6972,7019,5,96,0,0,6973,7019,5,60,
        0,0,6974,7019,5,78,0,0,6975,7019,5,574,0,0,6976,6977,5,2,0,0,6977,
        6978,3,674,337,0,6978,6979,5,3,0,0,6979,6980,3,754,377,0,6980,7019,
        1,0,0,0,6981,6983,5,40,0,0,6982,6984,3,674,337,0,6983,6982,1,0,0,
        0,6983,6984,1,0,0,0,6984,6986,1,0,0,0,6985,6987,3,748,374,0,6986,
        6985,1,0,0,0,6987,6988,1,0,0,0,6988,6986,1,0,0,0,6988,6989,1,0,0,
        0,6989,6992,1,0,0,0,6990,6991,5,58,0,0,6991,6993,3,674,337,0,6992,
        6990,1,0,0,0,6992,6993,1,0,0,0,6993,6994,1,0,0,0,6994,6995,5,454,
        0,0,6995,7019,1,0,0,0,6996,7019,3,686,343,0,6997,6999,3,562,281,
        0,6998,7000,3,752,376,0,6999,6998,1,0,0,0,6999,7000,1,0,0,0,7000,
        7019,1,0,0,0,7001,7019,3,716,358,0,7002,7003,5,2,0,0,7003,7004,3,
        674,337,0,7004,7005,5,6,0,0,7005,7006,3,730,365,0,7006,7007,5,3,
        0,0,7007,7019,1,0,0,0,7008,7009,3,714,357,0,7009,7010,5,125,0,0,
        7010,7011,3,714,357,0,7011,7019,1,0,0,0,7012,7019,3,780,390,0,7013,
        7014,7,29,0,0,7014,7019,3,682,341,5,7015,7016,3,724,362,0,7016,7017,
        3,682,341,2,7017,7019,1,0,0,0,7018,6930,1,0,0,0,7018,6933,1,0,0,
        0,7018,6938,1,0,0,0,7018,6940,1,0,0,0,7018,6942,1,0,0,0,7018,6943,
        1,0,0,0,7018,6944,1,0,0,0,7018,6945,1,0,0,0,7018,6946,1,0,0,0,7018,
        6959,1,0,0,0,7018,6962,1,0,0,0,7018,6972,1,0,0,0,7018,6973,1,0,0,
        0,7018,6974,1,0,0,0,7018,6975,1,0,0,0,7018,6976,1,0,0,0,7018,6981,
        1,0,0,0,7018,6996,1,0,0,0,7018,6997,1,0,0,0,7018,7001,1,0,0,0,7018,
        7002,1,0,0,0,7018,7008,1,0,0,0,7018,7012,1,0,0,0,7018,7013,1,0,0,
        0,7018,7015,1,0,0,0,7019,7047,1,0,0,0,7020,7021,10,3,0,0,7021,7022,
        3,722,361,0,7022,7023,3,682,341,4,7023,7046,1,0,0,0,7024,7025,10,
        6,0,0,7025,7026,5,26,0,0,7026,7046,3,652,326,0,7027,7028,10,4,0,
        0,7028,7030,3,724,362,0,7029,7031,3,682,341,0,7030,7029,1,0,0,0,
        7030,7031,1,0,0,0,7031,7046,1,0,0,0,7032,7033,10,1,0,0,7033,7035,
        5,116,0,0,7034,7036,5,77,0,0,7035,7034,1,0,0,0,7035,7036,1,0,0,0,
        7036,7043,1,0,0,0,7037,7038,5,56,0,0,7038,7039,5,64,0,0,7039,7044,
        3,682,341,0,7040,7041,5,275,0,0,7041,7044,3,528,264,0,7042,7044,
        5,188,0,0,7043,7037,1,0,0,0,7043,7040,1,0,0,0,7043,7042,1,0,0,0,
        7044,7046,1,0,0,0,7045,7020,1,0,0,0,7045,7024,1,0,0,0,7045,7027,
        1,0,0,0,7045,7032,1,0,0,0,7046,7049,1,0,0,0,7047,7045,1,0,0,0,7047,
        7048,1,0,0,0,7048,683,1,0,0,0,7049,7047,1,0,0,0,7050,7076,3,806,
        403,0,7051,7073,5,2,0,0,7052,7056,3,736,368,0,7053,7054,5,6,0,0,
        7054,7055,5,101,0,0,7055,7057,3,738,369,0,7056,7053,1,0,0,0,7056,
        7057,1,0,0,0,7057,7059,1,0,0,0,7058,7060,3,586,293,0,7059,7058,1,
        0,0,0,7059,7060,1,0,0,0,7060,7074,1,0,0,0,7061,7062,5,101,0,0,7062,
        7064,3,738,369,0,7063,7065,3,586,293,0,7064,7063,1,0,0,0,7064,7065,
        1,0,0,0,7065,7074,1,0,0,0,7066,7067,7,80,0,0,7067,7069,3,736,368,
        0,7068,7070,3,586,293,0,7069,7068,1,0,0,0,7069,7070,1,0,0,0,7070,
        7074,1,0,0,0,7071,7074,5,9,0,0,7072,7074,1,0,0,0,7073,7052,1,0,0,
        0,7073,7061,1,0,0,0,7073,7066,1,0,0,0,7073,7071,1,0,0,0,7073,7072,
        1,0,0,0,7074,7075,1,0,0,0,7075,7077,5,3,0,0,7076,7051,1,0,0,0,7076,
        7077,1,0,0,0,7077,685,1,0,0,0,7078,7085,3,684,342,0,7079,7080,5,
        479,0,0,7080,7081,5,66,0,0,7081,7082,5,2,0,0,7082,7083,3,586,293,
        0,7083,7084,5,3,0,0,7084,7086,1,0,0,0,7085,7079,1,0,0,0,7085,7086,
        1,0,0,0,7086,7093,1,0,0,0,7087,7088,5,480,0,0,7088,7089,5,2,0,0,
        7089,7090,5,103,0,0,7090,7091,3,674,337,0,7091,7092,5,3,0,0,7092,
        7094,1,0,0,0,7093,7087,1,0,0,0,7093,7094,1,0,0,0,7094,7100,1,0,0,
        0,7095,7098,5,124,0,0,7096,7099,3,708,354,0,7097,7099,3,818,409,
        0,7098,7096,1,0,0,0,7098,7097,1,0,0,0,7099,7101,1,0,0,0,7100,7095,
        1,0,0,0,7100,7101,1,0,0,0,7101,7104,1,0,0,0,7102,7104,3,690,345,
        0,7103,7078,1,0,0,0,7103,7102,1,0,0,0,7104,687,1,0,0,0,7105,7108,
        3,684,342,0,7106,7108,3,690,345,0,7107,7105,1,0,0,0,7107,7106,1,
        0,0,0,7108,689,1,0,0,0,7109,7110,5,108,0,0,7110,7111,5,62,0,0,7111,
        7112,5,2,0,0,7112,7113,3,674,337,0,7113,7114,5,3,0,0,7114,7284,1,
        0,0,0,7115,7284,5,48,0,0,7116,7118,7,95,0,0,7117,7119,3,660,330,
        0,7118,7117,1,0,0,0,7118,7119,1,0,0,0,7119,7284,1,0,0,0,7120,7284,
        5,49,0,0,7121,7284,5,52,0,0,7122,7284,5,89,0,0,7123,7284,5,99,0,
        0,7124,7284,5,47,0,0,7125,7284,5,111,0,0,7126,7127,7,96,0,0,7127,
        7128,5,2,0,0,7128,7129,3,674,337,0,7129,7130,5,36,0,0,7130,7131,
        3,652,326,0,7131,7132,5,3,0,0,7132,7284,1,0,0,0,7133,7134,5,397,
        0,0,7134,7139,5,2,0,0,7135,7136,3,742,371,0,7136,7137,5,64,0,0,7137,
        7138,3,674,337,0,7138,7140,1,0,0,0,7139,7135,1,0,0,0,7139,7140,1,
        0,0,0,7140,7141,1,0,0,0,7141,7284,5,3,0,0,7142,7143,5,489,0,0,7143,
        7144,5,2,0,0,7144,7147,3,674,337,0,7145,7146,5,6,0,0,7146,7148,3,
        744,372,0,7147,7145,1,0,0,0,7147,7148,1,0,0,0,7148,7149,1,0,0,0,
        7149,7150,5,3,0,0,7150,7284,1,0,0,0,7151,7152,5,410,0,0,7152,7153,
        5,2,0,0,7153,7154,3,674,337,0,7154,7155,5,84,0,0,7155,7156,3,674,
        337,0,7156,7157,5,64,0,0,7157,7160,3,674,337,0,7158,7159,5,62,0,
        0,7159,7161,3,674,337,0,7160,7158,1,0,0,0,7160,7161,1,0,0,0,7161,
        7162,1,0,0,0,7162,7163,5,3,0,0,7163,7284,1,0,0,0,7164,7165,5,411,
        0,0,7165,7170,5,2,0,0,7166,7167,3,682,341,0,7167,7168,5,68,0,0,7168,
        7169,3,682,341,0,7169,7171,1,0,0,0,7170,7166,1,0,0,0,7170,7171,1,
        0,0,0,7171,7172,1,0,0,0,7172,7284,5,3,0,0,7173,7174,5,417,0,0,7174,
        7176,5,2,0,0,7175,7177,3,746,373,0,7176,7175,1,0,0,0,7176,7177,1,
        0,0,0,7177,7178,1,0,0,0,7178,7284,5,3,0,0,7179,7180,5,421,0,0,7180,
        7182,5,2,0,0,7181,7183,7,97,0,0,7182,7181,1,0,0,0,7182,7183,1,0,
        0,0,7183,7188,1,0,0,0,7184,7186,3,674,337,0,7185,7184,1,0,0,0,7185,
        7186,1,0,0,0,7186,7187,1,0,0,0,7187,7189,5,64,0,0,7188,7185,1,0,
        0,0,7188,7189,1,0,0,0,7189,7190,1,0,0,0,7190,7191,3,730,365,0,7191,
        7192,1,0,0,0,7192,7193,5,3,0,0,7193,7284,1,0,0,0,7194,7195,5,408,
        0,0,7195,7196,5,2,0,0,7196,7197,3,674,337,0,7197,7198,5,6,0,0,7198,
        7199,3,674,337,0,7199,7200,5,3,0,0,7200,7284,1,0,0,0,7201,7202,7,
        98,0,0,7202,7284,3,534,267,0,7203,7204,5,426,0,0,7204,7205,5,2,0,
        0,7205,7206,5,266,0,0,7206,7216,3,824,412,0,7207,7214,5,6,0,0,7208,
        7209,5,424,0,0,7209,7210,5,2,0,0,7210,7211,3,692,346,0,7211,7212,
        5,3,0,0,7212,7215,1,0,0,0,7213,7215,3,730,365,0,7214,7208,1,0,0,
        0,7214,7213,1,0,0,0,7215,7217,1,0,0,0,7216,7207,1,0,0,0,7216,7217,
        1,0,0,0,7217,7218,1,0,0,0,7218,7219,5,3,0,0,7219,7284,1,0,0,0,7220,
        7221,5,427,0,0,7221,7222,5,2,0,0,7222,7223,3,682,341,0,7223,7224,
        3,698,349,0,7224,7225,5,3,0,0,7225,7284,1,0,0,0,7226,7227,5,428,
        0,0,7227,7228,5,2,0,0,7228,7229,3,692,346,0,7229,7230,5,3,0,0,7230,
        7284,1,0,0,0,7231,7232,5,429,0,0,7232,7233,5,2,0,0,7233,7234,3,696,
        348,0,7234,7237,3,674,337,0,7235,7236,7,99,0,0,7236,7238,5,378,0,
        0,7237,7235,1,0,0,0,7237,7238,1,0,0,0,7238,7239,1,0,0,0,7239,7240,
        5,3,0,0,7240,7284,1,0,0,0,7241,7242,5,430,0,0,7242,7243,5,2,0,0,
        7243,7244,5,266,0,0,7244,7247,3,824,412,0,7245,7246,5,6,0,0,7246,
        7248,3,674,337,0,7247,7245,1,0,0,0,7247,7248,1,0,0,0,7248,7249,1,
        0,0,0,7249,7250,5,3,0,0,7250,7284,1,0,0,0,7251,7252,5,431,0,0,7252,
        7253,5,2,0,0,7253,7254,5,383,0,0,7254,7255,3,674,337,0,7255,7256,
        5,6,0,0,7256,7260,5,375,0,0,7257,7258,5,269,0,0,7258,7261,5,450,
        0,0,7259,7261,3,674,337,0,7260,7257,1,0,0,0,7260,7259,1,0,0,0,7261,
        7271,1,0,0,0,7262,7263,5,6,0,0,7263,7269,5,339,0,0,7264,7266,5,269,
        0,0,7265,7264,1,0,0,0,7265,7266,1,0,0,0,7266,7267,1,0,0,0,7267,7270,
        5,450,0,0,7268,7270,5,385,0,0,7269,7265,1,0,0,0,7269,7268,1,0,0,
        0,7270,7272,1,0,0,0,7271,7262,1,0,0,0,7271,7272,1,0,0,0,7272,7273,
        1,0,0,0,7273,7274,5,3,0,0,7274,7284,1,0,0,0,7275,7276,5,432,0,0,
        7276,7277,5,2,0,0,7277,7278,3,696,348,0,7278,7279,3,674,337,0,7279,
        7280,5,36,0,0,7280,7281,3,654,327,0,7281,7282,5,3,0,0,7282,7284,
        1,0,0,0,7283,7109,1,0,0,0,7283,7115,1,0,0,0,7283,7116,1,0,0,0,7283,
        7120,1,0,0,0,7283,7121,1,0,0,0,7283,7122,1,0,0,0,7283,7123,1,0,0,
        0,7283,7124,1,0,0,0,7283,7125,1,0,0,0,7283,7126,1,0,0,0,7283,7133,
        1,0,0,0,7283,7142,1,0,0,0,7283,7151,1,0,0,0,7283,7164,1,0,0,0,7283,
        7173,1,0,0,0,7283,7179,1,0,0,0,7283,7194,1,0,0,0,7283,7201,1,0,0,
        0,7283,7203,1,0,0,0,7283,7220,1,0,0,0,7283,7226,1,0,0,0,7283,7231,
        1,0,0,0,7283,7241,1,0,0,0,7283,7251,1,0,0,0,7283,7275,1,0,0,0,7284,
        691,1,0,0,0,7285,7290,3,694,347,0,7286,7287,5,6,0,0,7287,7289,3,
        694,347,0,7288,7286,1,0,0,0,7289,7292,1,0,0,0,7290,7288,1,0,0,0,
        7290,7291,1,0,0,0,7291,693,1,0,0,0,7292,7290,1,0,0,0,7293,7296,3,
        674,337,0,7294,7295,5,36,0,0,7295,7297,3,824,412,0,7296,7294,1,0,
        0,0,7296,7297,1,0,0,0,7297,695,1,0,0,0,7298,7299,7,100,0,0,7299,
        697,1,0,0,0,7300,7302,5,286,0,0,7301,7303,3,700,350,0,7302,7301,
        1,0,0,0,7302,7303,1,0,0,0,7303,7304,1,0,0,0,7304,7306,3,682,341,
        0,7305,7307,3,700,350,0,7306,7305,1,0,0,0,7306,7307,1,0,0,0,7307,
        699,1,0,0,0,7308,7309,5,147,0,0,7309,7310,7,101,0,0,7310,701,1,0,
        0,0,7311,7312,5,104,0,0,7312,7317,3,704,352,0,7313,7314,5,6,0,0,
        7314,7316,3,704,352,0,7315,7313,1,0,0,0,7316,7319,1,0,0,0,7317,7315,
        1,0,0,0,7317,7318,1,0,0,0,7318,703,1,0,0,0,7319,7317,1,0,0,0,7320,
        7321,3,818,409,0,7321,7322,5,36,0,0,7322,7323,3,708,354,0,7323,705,
        1,0,0,0,7324,7327,5,124,0,0,7325,7328,3,708,354,0,7326,7328,3,818,
        409,0,7327,7325,1,0,0,0,7327,7326,1,0,0,0,7328,707,1,0,0,0,7329,
        7331,5,2,0,0,7330,7332,3,818,409,0,7331,7330,1,0,0,0,7331,7332,1,
        0,0,0,7332,7336,1,0,0,0,7333,7334,5,285,0,0,7334,7335,5,147,0,0,
        7335,7337,3,730,365,0,7336,7333,1,0,0,0,7336,7337,1,0,0,0,7337,7339,
        1,0,0,0,7338,7340,3,586,293,0,7339,7338,1,0,0,0,7339,7340,1,0,0,
        0,7340,7342,1,0,0,0,7341,7343,3,710,355,0,7342,7341,1,0,0,0,7342,
        7343,1,0,0,0,7343,7344,1,0,0,0,7344,7345,5,3,0,0,7345,709,1,0,0,
        0,7346,7351,7,102,0,0,7347,7348,5,387,0,0,7348,7349,3,712,356,0,
        7349,7350,5,33,0,0,7350,7352,1,0,0,0,7351,7347,1,0,0,0,7351,7352,
        1,0,0,0,7352,7353,1,0,0,0,7353,7354,3,712,356,0,7354,7364,1,0,0,
        0,7355,7362,5,199,0,0,7356,7357,5,434,0,0,7357,7363,5,414,0,0,7358,
        7363,5,66,0,0,7359,7363,5,467,0,0,7360,7361,5,269,0,0,7361,7363,
        5,482,0,0,7362,7356,1,0,0,0,7362,7358,1,0,0,0,7362,7359,1,0,0,0,
        7362,7360,1,0,0,0,7363,7365,1,0,0,0,7364,7355,1,0,0,0,7364,7365,
        1,0,0,0,7365,711,1,0,0,0,7366,7369,5,362,0,0,7367,7369,3,674,337,
        0,7368,7366,1,0,0,0,7368,7367,1,0,0,0,7369,7370,1,0,0,0,7370,7374,
        7,103,0,0,7371,7372,5,434,0,0,7372,7374,5,414,0,0,7373,7368,1,0,
        0,0,7373,7371,1,0,0,0,7374,713,1,0,0,0,7375,7383,3,716,358,0,7376,
        7377,5,2,0,0,7377,7378,3,730,365,0,7378,7379,5,6,0,0,7379,7380,3,
        674,337,0,7380,7381,5,3,0,0,7381,7383,1,0,0,0,7382,7375,1,0,0,0,
        7382,7376,1,0,0,0,7383,715,1,0,0,0,7384,7385,5,414,0,0,7385,7387,
        5,2,0,0,7386,7388,3,730,365,0,7387,7386,1,0,0,0,7387,7388,1,0,0,
        0,7388,7389,1,0,0,0,7389,7390,5,3,0,0,7390,717,1,0,0,0,7391,7392,
        7,104,0,0,7392,719,1,0,0,0,7393,7396,5,29,0,0,7394,7396,3,722,361,
        0,7395,7393,1,0,0,0,7395,7394,1,0,0,0,7396,721,1,0,0,0,7397,7398,
        7,105,0,0,7398,723,1,0,0,0,7399,7406,5,29,0,0,7400,7401,5,278,0,
        0,7401,7402,5,2,0,0,7402,7403,3,414,207,0,7403,7404,5,3,0,0,7404,
        7406,1,0,0,0,7405,7399,1,0,0,0,7405,7400,1,0,0,0,7406,725,1,0,0,
        0,7407,7414,3,720,360,0,7408,7409,5,278,0,0,7409,7410,5,2,0,0,7410,
        7411,3,414,207,0,7411,7412,5,3,0,0,7412,7414,1,0,0,0,7413,7407,1,
        0,0,0,7413,7408,1,0,0,0,7414,727,1,0,0,0,7415,7421,3,726,363,0,7416,
        7418,5,77,0,0,7417,7416,1,0,0,0,7417,7418,1,0,0,0,7418,7419,1,0,
        0,0,7419,7421,7,106,0,0,7420,7415,1,0,0,0,7420,7417,1,0,0,0,7421,
        729,1,0,0,0,7422,7427,3,674,337,0,7423,7424,5,6,0,0,7424,7426,3,
        674,337,0,7425,7423,1,0,0,0,7426,7429,1,0,0,0,7427,7425,1,0,0,0,
        7427,7428,1,0,0,0,7428,731,1,0,0,0,7429,7427,1,0,0,0,7430,7431,5,
        2,0,0,7431,7432,3,674,337,0,7432,7433,5,3,0,0,7433,7436,1,0,0,0,
        7434,7436,3,800,400,0,7435,7430,1,0,0,0,7435,7434,1,0,0,0,7436,733,
        1,0,0,0,7437,7440,3,674,337,0,7438,7440,3,800,400,0,7439,7437,1,
        0,0,0,7439,7438,1,0,0,0,7440,735,1,0,0,0,7441,7446,3,738,369,0,7442,
        7443,5,6,0,0,7443,7445,3,738,369,0,7444,7442,1,0,0,0,7445,7448,1,
        0,0,0,7446,7444,1,0,0,0,7446,7447,1,0,0,0,7447,737,1,0,0,0,7448,
        7446,1,0,0,0,7449,7456,3,674,337,0,7450,7453,3,820,410,0,7451,7452,
        7,107,0,0,7452,7454,3,674,337,0,7453,7451,1,0,0,0,7453,7454,1,0,
        0,0,7454,7456,1,0,0,0,7455,7449,1,0,0,0,7455,7450,1,0,0,0,7456,739,
        1,0,0,0,7457,7467,5,4,0,0,7458,7468,3,730,365,0,7459,7464,3,740,
        370,0,7460,7461,5,6,0,0,7461,7463,3,740,370,0,7462,7460,1,0,0,0,
        7463,7466,1,0,0,0,7464,7462,1,0,0,0,7464,7465,1,0,0,0,7465,7468,
        1,0,0,0,7466,7464,1,0,0,0,7467,7458,1,0,0,0,7467,7459,1,0,0,0,7467,
        7468,1,0,0,0,7468,7469,1,0,0,0,7469,7470,5,5,0,0,7470,741,1,0,0,
        0,7471,7480,3,826,413,0,7472,7480,5,384,0,0,7473,7480,5,264,0,0,
        7474,7480,5,176,0,0,7475,7480,5,218,0,0,7476,7480,5,261,0,0,7477,
        7480,5,326,0,0,7478,7480,3,808,404,0,7479,7471,1,0,0,0,7479,7472,
        1,0,0,0,7479,7473,1,0,0,0,7479,7474,1,0,0,0,7479,7475,1,0,0,0,7479,
        7476,1,0,0,0,7479,7477,1,0,0,0,7479,7478,1,0,0,0,7480,743,1,0,0,
        0,7481,7482,7,108,0,0,7482,745,1,0,0,0,7483,7484,3,674,337,0,7484,
        7485,5,64,0,0,7485,7488,3,674,337,0,7486,7487,5,62,0,0,7487,7489,
        3,674,337,0,7488,7486,1,0,0,0,7488,7489,1,0,0,0,7489,7505,1,0,0,
        0,7490,7491,3,674,337,0,7491,7492,5,62,0,0,7492,7495,3,674,337,0,
        7493,7494,5,64,0,0,7494,7496,3,674,337,0,7495,7493,1,0,0,0,7495,
        7496,1,0,0,0,7496,7505,1,0,0,0,7497,7498,3,674,337,0,7498,7499,5,
        127,0,0,7499,7500,3,674,337,0,7500,7501,5,197,0,0,7501,7502,3,674,
        337,0,7502,7505,1,0,0,0,7503,7505,3,730,365,0,7504,7483,1,0,0,0,
        7504,7490,1,0,0,0,7504,7497,1,0,0,0,7504,7503,1,0,0,0,7505,747,1,
        0,0,0,7506,7507,5,102,0,0,7507,7508,3,674,337,0,7508,7509,5,93,0,
        0,7509,7510,3,674,337,0,7510,749,1,0,0,0,7511,7514,5,11,0,0,7512,
        7515,3,824,412,0,7513,7515,5,9,0,0,7514,7512,1,0,0,0,7514,7513,1,
        0,0,0,7515,7529,1,0,0,0,7516,7525,5,4,0,0,7517,7526,3,674,337,0,
        7518,7520,3,674,337,0,7519,7518,1,0,0,0,7519,7520,1,0,0,0,7520,7521,
        1,0,0,0,7521,7523,5,8,0,0,7522,7524,3,674,337,0,7523,7522,1,0,0,
        0,7523,7524,1,0,0,0,7524,7526,1,0,0,0,7525,7517,1,0,0,0,7525,7519,
        1,0,0,0,7526,7527,1,0,0,0,7527,7529,5,5,0,0,7528,7511,1,0,0,0,7528,
        7516,1,0,0,0,7529,751,1,0,0,0,7530,7532,3,750,375,0,7531,7530,1,
        0,0,0,7532,7533,1,0,0,0,7533,7531,1,0,0,0,7533,7534,1,0,0,0,7534,
        753,1,0,0,0,7535,7537,3,750,375,0,7536,7535,1,0,0,0,7537,7540,1,
        0,0,0,7538,7536,1,0,0,0,7538,7539,1,0,0,0,7539,755,1,0,0,0,7540,
        7538,1,0,0,0,7541,7546,3,758,379,0,7542,7543,5,6,0,0,7543,7545,3,
        758,379,0,7544,7542,1,0,0,0,7545,7548,1,0,0,0,7546,7544,1,0,0,0,
        7546,7547,1,0,0,0,7547,757,1,0,0,0,7548,7546,1,0,0,0,7549,7554,3,
        734,367,0,7550,7551,5,36,0,0,7551,7555,3,824,412,0,7552,7555,3,826,
        413,0,7553,7555,1,0,0,0,7554,7550,1,0,0,0,7554,7552,1,0,0,0,7554,
        7553,1,0,0,0,7555,7558,1,0,0,0,7556,7558,5,9,0,0,7557,7549,1,0,0,
        0,7557,7556,1,0,0,0,7558,759,1,0,0,0,7559,7564,3,780,390,0,7560,
        7561,5,6,0,0,7561,7563,3,780,390,0,7562,7560,1,0,0,0,7563,7566,1,
        0,0,0,7564,7562,1,0,0,0,7564,7565,1,0,0,0,7565,761,1,0,0,0,7566,
        7564,1,0,0,0,7567,7572,3,774,387,0,7568,7569,5,6,0,0,7569,7571,3,
        774,387,0,7570,7568,1,0,0,0,7571,7574,1,0,0,0,7572,7570,1,0,0,0,
        7572,7573,1,0,0,0,7573,763,1,0,0,0,7574,7572,1,0,0,0,7575,7580,3,
        790,395,0,7576,7577,5,6,0,0,7577,7579,3,790,395,0,7578,7576,1,0,
        0,0,7579,7582,1,0,0,0,7580,7578,1,0,0,0,7580,7581,1,0,0,0,7581,765,
        1,0,0,0,7582,7580,1,0,0,0,7583,7588,3,788,394,0,7584,7585,5,6,0,
        0,7585,7587,3,788,394,0,7586,7584,1,0,0,0,7587,7590,1,0,0,0,7588,
        7586,1,0,0,0,7588,7589,1,0,0,0,7589,767,1,0,0,0,7590,7588,1,0,0,
        0,7591,7592,3,780,390,0,7592,769,1,0,0,0,7593,7594,3,780,390,0,7594,
        771,1,0,0,0,7595,7596,3,780,390,0,7596,773,1,0,0,0,7597,7598,3,780,
        390,0,7598,775,1,0,0,0,7599,7600,3,780,390,0,7600,777,1,0,0,0,7601,
        7602,3,316,158,0,7602,779,1,0,0,0,7603,7605,3,818,409,0,7604,7606,
        3,752,376,0,7605,7604,1,0,0,0,7605,7606,1,0,0,0,7606,781,1,0,0,0,
        7607,7612,3,770,385,0,7608,7609,5,6,0,0,7609,7611,3,770,385,0,7610,
        7608,1,0,0,0,7611,7614,1,0,0,0,7612,7610,1,0,0,0,7612,7613,1,0,0,
        0,7613,783,1,0,0,0,7614,7612,1,0,0,0,7615,7620,3,818,409,0,7616,
        7617,5,6,0,0,7617,7619,3,818,409,0,7618,7616,1,0,0,0,7619,7622,1,
        0,0,0,7620,7618,1,0,0,0,7620,7621,1,0,0,0,7621,785,1,0,0,0,7622,
        7620,1,0,0,0,7623,7624,3,316,158,0,7624,787,1,0,0,0,7625,7626,3,
        316,158,0,7626,789,1,0,0,0,7627,7628,3,316,158,0,7628,791,1,0,0,
        0,7629,7630,3,818,409,0,7630,793,1,0,0,0,7631,7632,3,818,409,0,7632,
        795,1,0,0,0,7633,7638,3,820,410,0,7634,7635,3,818,409,0,7635,7636,
        3,752,376,0,7636,7638,1,0,0,0,7637,7633,1,0,0,0,7637,7634,1,0,0,
        0,7638,797,1,0,0,0,7639,7644,3,820,410,0,7640,7641,3,818,409,0,7641,
        7642,3,752,376,0,7642,7644,1,0,0,0,7643,7639,1,0,0,0,7643,7640,1,
        0,0,0,7644,799,1,0,0,0,7645,7646,3,818,409,0,7646,7647,3,754,377,
        0,7647,7650,1,0,0,0,7648,7650,4,400,10,0,7649,7645,1,0,0,0,7649,
        7648,1,0,0,0,7650,801,1,0,0,0,7651,7652,3,818,409,0,7652,803,1,0,
        0,0,7653,7658,3,820,410,0,7654,7655,3,818,409,0,7655,7656,3,752,
        376,0,7656,7658,1,0,0,0,7657,7653,1,0,0,0,7657,7654,1,0,0,0,7658,
        805,1,0,0,0,7659,7664,3,820,410,0,7660,7661,3,818,409,0,7661,7662,
        3,752,376,0,7662,7664,1,0,0,0,7663,7659,1,0,0,0,7663,7660,1,0,0,
        0,7664,807,1,0,0,0,7665,7668,3,810,405,0,7666,7667,5,487,0,0,7667,
        7669,3,810,405,0,7668,7666,1,0,0,0,7668,7669,1,0,0,0,7669,809,1,
        0,0,0,7670,7682,5,558,0,0,7671,7682,5,560,0,0,7672,7676,5,562,0,
        0,7673,7675,5,588,0,0,7674,7673,1,0,0,0,7675,7678,1,0,0,0,7676,7674,
        1,0,0,0,7676,7677,1,0,0,0,7677,7679,1,0,0,0,7678,7676,1,0,0,0,7679,
        7682,5,589,0,0,7680,7682,5,584,0,0,7681,7670,1,0,0,0,7681,7671,1,
        0,0,0,7681,7672,1,0,0,0,7681,7680,1,0,0,0,7682,811,1,0,0,0,7683,
        7685,7,29,0,0,7684,7683,1,0,0,0,7684,7685,1,0,0,0,7685,7686,1,0,
        0,0,7686,7687,5,571,0,0,7687,813,1,0,0,0,7688,7694,3,822,411,0,7689,
        7694,5,52,0,0,7690,7694,5,49,0,0,7691,7694,5,89,0,0,7692,7694,5,
        524,0,0,7693,7688,1,0,0,0,7693,7689,1,0,0,0,7693,7690,1,0,0,0,7693,
        7691,1,0,0,0,7693,7692,1,0,0,0,7694,815,1,0,0,0,7695,7700,3,814,
        407,0,7696,7697,5,6,0,0,7697,7699,3,814,407,0,7698,7696,1,0,0,0,
        7699,7702,1,0,0,0,7700,7698,1,0,0,0,7700,7701,1,0,0,0,7701,817,1,
        0,0,0,7702,7700,1,0,0,0,7703,7706,3,826,413,0,7704,7706,3,830,415,
        0,7705,7703,1,0,0,0,7705,7704,1,0,0,0,7706,819,1,0,0,0,7707,7710,
        3,826,413,0,7708,7710,3,832,416,0,7709,7707,1,0,0,0,7709,7708,1,
        0,0,0,7710,821,1,0,0,0,7711,7715,3,826,413,0,7712,7715,3,830,415,
        0,7713,7715,3,832,416,0,7714,7711,1,0,0,0,7714,7712,1,0,0,0,7714,
        7713,1,0,0,0,7715,823,1,0,0,0,7716,7721,3,826,413,0,7717,7721,3,
        830,415,0,7718,7721,3,832,416,0,7719,7721,3,834,417,0,7720,7716,
        1,0,0,0,7720,7717,1,0,0,0,7720,7718,1,0,0,0,7720,7719,1,0,0,0,7721,
        825,1,0,0,0,7722,7725,5,549,0,0,7723,7724,5,487,0,0,7724,7726,3,
        810,405,0,7725,7723,1,0,0,0,7725,7726,1,0,0,0,7726,7734,1,0,0,0,
        7727,7734,3,808,404,0,7728,7734,5,550,0,0,7729,7734,5,554,0,0,7730,
        7734,5,574,0,0,7731,7734,5,575,0,0,7732,7734,3,828,414,0,7733,7722,
        1,0,0,0,7733,7727,1,0,0,0,7733,7728,1,0,0,0,7733,7729,1,0,0,0,7733,
        7730,1,0,0,0,7733,7731,1,0,0,0,7733,7732,1,0,0,0,7734,827,1,0,0,
        0,7735,7736,7,109,0,0,7736,829,1,0,0,0,7737,7789,5,387,0,0,7738,
        7789,5,388,0,0,7739,7789,3,662,331,0,7740,7789,5,390,0,0,7741,7789,
        5,391,0,0,7742,7789,3,664,332,0,7743,7789,5,393,0,0,7744,7789,5,
        394,0,0,7745,7789,5,395,0,0,7746,7789,5,396,0,0,7747,7789,5,397,
        0,0,7748,7789,5,398,0,0,7749,7789,5,399,0,0,7750,7789,5,470,0,0,
        7751,7789,5,400,0,0,7752,7789,5,401,0,0,7753,7789,5,402,0,0,7754,
        7789,5,403,0,0,7755,7789,5,404,0,0,7756,7789,5,405,0,0,7757,7789,
        5,406,0,0,7758,7789,5,407,0,0,7759,7789,5,489,0,0,7760,7789,5,408,
        0,0,7761,7789,3,658,329,0,7762,7789,5,453,0,0,7763,7789,5,410,0,
        0,7764,7789,5,411,0,0,7765,7789,5,412,0,0,7766,7789,5,413,0,0,7767,
        7789,5,414,0,0,7768,7789,5,415,0,0,7769,7789,5,416,0,0,7770,7789,
        5,417,0,0,7771,7789,5,418,0,0,7772,7789,5,419,0,0,7773,7789,5,420,
        0,0,7774,7789,5,421,0,0,7775,7789,5,422,0,0,7776,7789,5,423,0,0,
        7777,7789,5,424,0,0,7778,7789,5,425,0,0,7779,7789,5,426,0,0,7780,
        7789,5,427,0,0,7781,7789,5,428,0,0,7782,7789,5,476,0,0,7783,7789,
        5,429,0,0,7784,7789,5,430,0,0,7785,7789,5,431,0,0,7786,7789,5,432,
        0,0,7787,7789,5,474,0,0,7788,7737,1,0,0,0,7788,7738,1,0,0,0,7788,
        7739,1,0,0,0,7788,7740,1,0,0,0,7788,7741,1,0,0,0,7788,7742,1,0,0,
        0,7788,7743,1,0,0,0,7788,7744,1,0,0,0,7788,7745,1,0,0,0,7788,7746,
        1,0,0,0,7788,7747,1,0,0,0,7788,7748,1,0,0,0,7788,7749,1,0,0,0,7788,
        7750,1,0,0,0,7788,7751,1,0,0,0,7788,7752,1,0,0,0,7788,7753,1,0,0,
        0,7788,7754,1,0,0,0,7788,7755,1,0,0,0,7788,7756,1,0,0,0,7788,7757,
        1,0,0,0,7788,7758,1,0,0,0,7788,7759,1,0,0,0,7788,7760,1,0,0,0,7788,
        7761,1,0,0,0,7788,7762,1,0,0,0,7788,7763,1,0,0,0,7788,7764,1,0,0,
        0,7788,7765,1,0,0,0,7788,7766,1,0,0,0,7788,7767,1,0,0,0,7788,7768,
        1,0,0,0,7788,7769,1,0,0,0,7788,7770,1,0,0,0,7788,7771,1,0,0,0,7788,
        7772,1,0,0,0,7788,7773,1,0,0,0,7788,7774,1,0,0,0,7788,7775,1,0,0,
        0,7788,7776,1,0,0,0,7788,7777,1,0,0,0,7788,7778,1,0,0,0,7788,7779,
        1,0,0,0,7788,7780,1,0,0,0,7788,7781,1,0,0,0,7788,7782,1,0,0,0,7788,
        7783,1,0,0,0,7788,7784,1,0,0,0,7788,7785,1,0,0,0,7788,7786,1,0,0,
        0,7788,7787,1,0,0,0,7789,831,1,0,0,0,7790,7791,7,110,0,0,7791,833,
        1,0,0,0,7792,7793,7,111,0,0,7793,835,1,0,0,0,7794,7796,3,838,419,
        0,7795,7794,1,0,0,0,7795,7796,1,0,0,0,7796,7807,1,0,0,0,7797,7805,
        5,178,0,0,7798,7802,3,840,420,0,7799,7802,5,178,0,0,7800,7802,3,
        838,419,0,7801,7798,1,0,0,0,7801,7799,1,0,0,0,7801,7800,1,0,0,0,
        7802,7803,1,0,0,0,7803,7801,1,0,0,0,7803,7804,1,0,0,0,7804,7806,
        1,0,0,0,7805,7801,1,0,0,0,7805,7806,1,0,0,0,7806,7808,1,0,0,0,7807,
        7797,1,0,0,0,7807,7808,1,0,0,0,7808,7809,1,0,0,0,7809,7813,5,146,
        0,0,7810,7812,3,846,423,0,7811,7810,1,0,0,0,7812,7815,1,0,0,0,7813,
        7811,1,0,0,0,7813,7814,1,0,0,0,7814,7817,1,0,0,0,7815,7813,1,0,0,
        0,7816,7818,3,924,462,0,7817,7816,1,0,0,0,7817,7818,1,0,0,0,7818,
        7819,1,0,0,0,7819,7821,5,454,0,0,7820,7822,3,928,464,0,7821,7820,
        1,0,0,0,7821,7822,1,0,0,0,7822,837,1,0,0,0,7823,7824,5,18,0,0,7824,
        7825,3,928,464,0,7825,7826,5,19,0,0,7826,839,1,0,0,0,7827,7874,3,
        928,464,0,7828,7829,5,496,0,0,7829,7832,5,62,0,0,7830,7833,5,28,
        0,0,7831,7833,3,818,409,0,7832,7830,1,0,0,0,7832,7831,1,0,0,0,7833,
        7875,1,0,0,0,7834,7836,5,497,0,0,7835,7834,1,0,0,0,7835,7836,1,0,
        0,0,7836,7837,1,0,0,0,7837,7839,3,652,326,0,7838,7840,3,98,49,0,
        7839,7838,1,0,0,0,7839,7840,1,0,0,0,7840,7843,1,0,0,0,7841,7842,
        5,77,0,0,7842,7844,5,78,0,0,7843,7841,1,0,0,0,7843,7844,1,0,0,0,
        7844,7850,1,0,0,0,7845,7848,3,844,422,0,7846,7848,5,53,0,0,7847,
        7845,1,0,0,0,7847,7846,1,0,0,0,7848,7849,1,0,0,0,7849,7851,3,930,
        465,0,7850,7847,1,0,0,0,7850,7851,1,0,0,0,7851,7875,1,0,0,0,7852,
        7854,5,269,0,0,7853,7852,1,0,0,0,7853,7854,1,0,0,0,7854,7855,1,0,
        0,0,7855,7857,5,324,0,0,7856,7853,1,0,0,0,7856,7857,1,0,0,0,7857,
        7858,1,0,0,0,7858,7870,5,172,0,0,7859,7860,5,2,0,0,7860,7865,3,842,
        421,0,7861,7862,5,6,0,0,7862,7864,3,842,421,0,7863,7861,1,0,0,0,
        7864,7867,1,0,0,0,7865,7863,1,0,0,0,7865,7866,1,0,0,0,7866,7868,
        1,0,0,0,7867,7865,1,0,0,0,7868,7869,5,3,0,0,7869,7871,1,0,0,0,7870,
        7859,1,0,0,0,7870,7871,1,0,0,0,7871,7872,1,0,0,0,7872,7873,7,112,
        0,0,7873,7875,3,560,280,0,7874,7828,1,0,0,0,7874,7835,1,0,0,0,7874,
        7856,1,0,0,0,7875,7876,1,0,0,0,7876,7877,5,7,0,0,7877,841,1,0,0,
        0,7878,7879,3,928,464,0,7879,7880,3,652,326,0,7880,843,1,0,0,0,7881,
        7882,7,113,0,0,7882,845,1,0,0,0,7883,7884,3,836,418,0,7884,7885,
        5,7,0,0,7885,7908,1,0,0,0,7886,7908,3,874,437,0,7887,7908,3,876,
        438,0,7888,7908,3,852,426,0,7889,7908,3,860,430,0,7890,7908,3,864,
        432,0,7891,7908,3,866,433,0,7892,7908,3,870,435,0,7893,7908,3,872,
        436,0,7894,7908,3,880,440,0,7895,7908,3,884,442,0,7896,7908,3,886,
        443,0,7897,7908,3,848,424,0,7898,7908,3,850,425,0,7899,7908,3,854,
        427,0,7900,7908,3,890,445,0,7901,7908,3,894,447,0,7902,7908,3,898,
        449,0,7903,7908,3,914,457,0,7904,7908,3,916,458,0,7905,7908,3,918,
        459,0,7906,7908,3,920,460,0,7907,7883,1,0,0,0,7907,7886,1,0,0,0,
        7907,7887,1,0,0,0,7907,7888,1,0,0,0,7907,7889,1,0,0,0,7907,7890,
        1,0,0,0,7907,7891,1,0,0,0,7907,7892,1,0,0,0,7907,7893,1,0,0,0,7907,
        7894,1,0,0,0,7907,7895,1,0,0,0,7907,7896,1,0,0,0,7907,7897,1,0,0,
        0,7907,7898,1,0,0,0,7907,7899,1,0,0,0,7907,7900,1,0,0,0,7907,7901,
        1,0,0,0,7907,7902,1,0,0,0,7907,7903,1,0,0,0,7907,7904,1,0,0,0,7907,
        7905,1,0,0,0,7907,7906,1,0,0,0,7908,847,1,0,0,0,7909,7910,5,498,
        0,0,7910,7911,3,930,465,0,7911,7912,5,7,0,0,7912,849,1,0,0,0,7913,
        7914,5,433,0,0,7914,7921,3,928,464,0,7915,7917,5,2,0,0,7916,7918,
        3,730,365,0,7917,7916,1,0,0,0,7917,7918,1,0,0,0,7918,7919,1,0,0,
        0,7919,7920,5,3,0,0,7920,7922,5,7,0,0,7921,7915,1,0,0,0,7921,7922,
        1,0,0,0,7922,7933,1,0,0,0,7923,7924,5,57,0,0,7924,7925,3,928,464,
        0,7925,7927,5,2,0,0,7926,7928,3,730,365,0,7927,7926,1,0,0,0,7927,
        7928,1,0,0,0,7928,7929,1,0,0,0,7929,7930,5,3,0,0,7930,7931,5,7,0,
        0,7931,7933,1,0,0,0,7932,7913,1,0,0,0,7932,7923,1,0,0,0,7933,851,
        1,0,0,0,7934,7935,3,858,429,0,7935,7936,3,844,422,0,7936,7937,3,
        930,465,0,7937,7938,5,7,0,0,7938,853,1,0,0,0,7939,7941,5,499,0,0,
        7940,7942,7,114,0,0,7941,7940,1,0,0,0,7941,7942,1,0,0,0,7942,7943,
        1,0,0,0,7943,7944,5,500,0,0,7944,7949,3,856,428,0,7945,7946,5,6,
        0,0,7946,7948,3,856,428,0,7947,7945,1,0,0,0,7948,7951,1,0,0,0,7949,
        7947,1,0,0,0,7949,7950,1,0,0,0,7950,7952,1,0,0,0,7951,7949,1,0,0,
        0,7952,7953,5,7,0,0,7953,855,1,0,0,0,7954,7955,3,858,429,0,7955,
        7956,3,844,422,0,7956,7957,3,818,409,0,7957,857,1,0,0,0,7958,7961,
        3,316,158,0,7959,7961,5,28,0,0,7960,7958,1,0,0,0,7960,7959,1,0,0,
        0,7961,7968,1,0,0,0,7962,7963,5,4,0,0,7963,7964,3,674,337,0,7964,
        7965,5,5,0,0,7965,7967,1,0,0,0,7966,7962,1,0,0,0,7967,7970,1,0,0,
        0,7968,7966,1,0,0,0,7968,7969,1,0,0,0,7969,859,1,0,0,0,7970,7968,
        1,0,0,0,7971,7972,5,220,0,0,7972,7973,3,930,465,0,7973,7977,5,93,
        0,0,7974,7976,3,846,423,0,7975,7974,1,0,0,0,7976,7979,1,0,0,0,7977,
        7975,1,0,0,0,7977,7978,1,0,0,0,7978,7991,1,0,0,0,7979,7977,1,0,0,
        0,7980,7981,5,502,0,0,7981,7982,3,674,337,0,7982,7986,5,93,0,0,7983,
        7985,3,846,423,0,7984,7983,1,0,0,0,7985,7988,1,0,0,0,7986,7984,1,
        0,0,0,7986,7987,1,0,0,0,7987,7990,1,0,0,0,7988,7986,1,0,0,0,7989,
        7980,1,0,0,0,7990,7993,1,0,0,0,7991,7989,1,0,0,0,7991,7992,1,0,0,
        0,7992,7995,1,0,0,0,7993,7991,1,0,0,0,7994,7996,3,862,431,0,7995,
        7994,1,0,0,0,7995,7996,1,0,0,0,7996,7997,1,0,0,0,7997,7998,5,454,
        0,0,7998,7999,5,220,0,0,7999,8000,5,7,0,0,8000,861,1,0,0,0,8001,
        8005,5,58,0,0,8002,8004,3,846,423,0,8003,8002,1,0,0,0,8004,8007,
        1,0,0,0,8005,8003,1,0,0,0,8005,8006,1,0,0,0,8006,863,1,0,0,0,8007,
        8005,1,0,0,0,8008,8010,5,40,0,0,8009,8011,3,930,465,0,8010,8009,
        1,0,0,0,8010,8011,1,0,0,0,8011,8021,1,0,0,0,8012,8013,5,102,0,0,
        8013,8014,3,730,365,0,8014,8018,5,93,0,0,8015,8017,3,846,423,0,8016,
        8015,1,0,0,0,8017,8020,1,0,0,0,8018,8016,1,0,0,0,8018,8019,1,0,0,
        0,8019,8022,1,0,0,0,8020,8018,1,0,0,0,8021,8012,1,0,0,0,8022,8023,
        1,0,0,0,8023,8021,1,0,0,0,8023,8024,1,0,0,0,8024,8026,1,0,0,0,8025,
        8027,3,862,431,0,8026,8025,1,0,0,0,8026,8027,1,0,0,0,8027,8028,1,
        0,0,0,8028,8029,5,454,0,0,8029,8030,5,40,0,0,8030,8031,5,7,0,0,8031,
        865,1,0,0,0,8032,8034,3,838,419,0,8033,8032,1,0,0,0,8033,8034,1,
        0,0,0,8034,8039,1,0,0,0,8035,8036,5,503,0,0,8036,8040,3,674,337,
        0,8037,8038,5,62,0,0,8038,8040,3,868,434,0,8039,8035,1,0,0,0,8039,
        8037,1,0,0,0,8039,8040,1,0,0,0,8040,8041,1,0,0,0,8041,8042,3,882,
        441,0,8042,867,1,0,0,0,8043,8044,3,314,157,0,8044,8067,5,68,0,0,
        8045,8047,3,818,409,0,8046,8048,3,534,267,0,8047,8046,1,0,0,0,8047,
        8048,1,0,0,0,8048,8068,1,0,0,0,8049,8068,3,560,280,0,8050,8068,3,
        520,260,0,8051,8052,5,202,0,0,8052,8055,3,674,337,0,8053,8054,5,
        100,0,0,8054,8056,3,730,365,0,8055,8053,1,0,0,0,8055,8056,1,0,0,
        0,8056,8068,1,0,0,0,8057,8059,5,504,0,0,8058,8057,1,0,0,0,8058,8059,
        1,0,0,0,8059,8060,1,0,0,0,8060,8061,3,674,337,0,8061,8062,5,24,0,
        0,8062,8065,3,674,337,0,8063,8064,5,147,0,0,8064,8066,3,674,337,
        0,8065,8063,1,0,0,0,8065,8066,1,0,0,0,8066,8068,1,0,0,0,8067,8045,
        1,0,0,0,8067,8049,1,0,0,0,8067,8050,1,0,0,0,8067,8051,1,0,0,0,8067,
        8058,1,0,0,0,8068,869,1,0,0,0,8069,8071,3,838,419,0,8070,8069,1,
        0,0,0,8070,8071,1,0,0,0,8071,8072,1,0,0,0,8072,8073,5,505,0,0,8073,
        8076,3,314,157,0,8074,8075,5,506,0,0,8075,8077,5,571,0,0,8076,8074,
        1,0,0,0,8076,8077,1,0,0,0,8077,8078,1,0,0,0,8078,8079,5,68,0,0,8079,
        8080,5,35,0,0,8080,8081,3,674,337,0,8081,8082,3,882,441,0,8082,871,
        1,0,0,0,8083,8085,7,115,0,0,8084,8086,3,928,464,0,8085,8084,1,0,
        0,0,8085,8086,1,0,0,0,8086,8089,1,0,0,0,8087,8088,5,102,0,0,8088,
        8090,3,930,465,0,8089,8087,1,0,0,0,8089,8090,1,0,0,0,8090,8091,1,
        0,0,0,8091,8092,5,7,0,0,8092,873,1,0,0,0,8093,8108,5,508,0,0,8094,
        8095,5,268,0,0,8095,8109,3,930,465,0,8096,8103,5,509,0,0,8097,8098,
        5,202,0,0,8098,8099,3,674,337,0,8099,8100,5,100,0,0,8100,8101,3,
        730,365,0,8101,8104,1,0,0,0,8102,8104,3,560,280,0,8103,8097,1,0,
        0,0,8103,8102,1,0,0,0,8104,8109,1,0,0,0,8105,8107,3,930,465,0,8106,
        8105,1,0,0,0,8106,8107,1,0,0,0,8107,8109,1,0,0,0,8108,8094,1,0,0,
        0,8108,8096,1,0,0,0,8108,8106,1,0,0,0,8109,8110,1,0,0,0,8110,8111,
        5,7,0,0,8111,875,1,0,0,0,8112,8142,5,510,0,0,8113,8115,7,116,0,0,
        8114,8113,1,0,0,0,8114,8115,1,0,0,0,8115,8128,1,0,0,0,8116,8129,
        3,826,413,0,8117,8118,5,511,0,0,8118,8129,3,808,404,0,8119,8126,
        3,808,404,0,8120,8121,5,6,0,0,8121,8123,3,674,337,0,8122,8120,1,
        0,0,0,8123,8124,1,0,0,0,8124,8122,1,0,0,0,8124,8125,1,0,0,0,8125,
        8127,1,0,0,0,8126,8122,1,0,0,0,8126,8127,1,0,0,0,8127,8129,1,0,0,
        0,8128,8116,1,0,0,0,8128,8117,1,0,0,0,8128,8119,1,0,0,0,8128,8129,
        1,0,0,0,8129,8139,1,0,0,0,8130,8131,5,100,0,0,8131,8136,3,878,439,
        0,8132,8133,5,6,0,0,8133,8135,3,878,439,0,8134,8132,1,0,0,0,8135,
        8138,1,0,0,0,8136,8134,1,0,0,0,8136,8137,1,0,0,0,8137,8140,1,0,0,
        0,8138,8136,1,0,0,0,8139,8130,1,0,0,0,8139,8140,1,0,0,0,8140,8141,
        1,0,0,0,8141,8143,5,7,0,0,8142,8114,1,0,0,0,8142,8143,1,0,0,0,8143,
        877,1,0,0,0,8144,8145,3,826,413,0,8145,8146,5,10,0,0,8146,8147,3,
        674,337,0,8147,879,1,0,0,0,8148,8149,5,518,0,0,8149,8152,3,930,465,
        0,8150,8151,5,6,0,0,8151,8153,3,930,465,0,8152,8150,1,0,0,0,8152,
        8153,1,0,0,0,8153,8154,1,0,0,0,8154,8155,5,7,0,0,8155,881,1,0,0,
        0,8156,8160,5,519,0,0,8157,8159,3,846,423,0,8158,8157,1,0,0,0,8159,
        8162,1,0,0,0,8160,8158,1,0,0,0,8160,8161,1,0,0,0,8161,8163,1,0,0,
        0,8162,8160,1,0,0,0,8163,8164,5,454,0,0,8164,8166,5,519,0,0,8165,
        8167,3,928,464,0,8166,8165,1,0,0,0,8166,8167,1,0,0,0,8167,8168,1,
        0,0,0,8168,8169,5,7,0,0,8169,883,1,0,0,0,8170,8172,3,4,2,0,8171,
        8173,3,888,444,0,8172,8171,1,0,0,0,8172,8173,1,0,0,0,8173,8174,1,
        0,0,0,8174,8175,5,7,0,0,8175,885,1,0,0,0,8176,8177,5,202,0,0,8177,
        8193,3,674,337,0,8178,8180,3,888,444,0,8179,8178,1,0,0,0,8179,8180,
        1,0,0,0,8180,8183,1,0,0,0,8181,8182,5,100,0,0,8182,8184,3,730,365,
        0,8183,8181,1,0,0,0,8183,8184,1,0,0,0,8184,8194,1,0,0,0,8185,8186,
        5,100,0,0,8186,8188,3,730,365,0,8187,8185,1,0,0,0,8187,8188,1,0,
        0,0,8188,8190,1,0,0,0,8189,8191,3,888,444,0,8190,8189,1,0,0,0,8190,
        8191,1,0,0,0,8191,8194,1,0,0,0,8192,8194,1,0,0,0,8193,8179,1,0,0,
        0,8193,8187,1,0,0,0,8193,8192,1,0,0,0,8194,8195,1,0,0,0,8195,8196,
        5,7,0,0,8196,887,1,0,0,0,8197,8199,5,71,0,0,8198,8200,5,346,0,0,
        8199,8198,1,0,0,0,8199,8200,1,0,0,0,8200,8201,1,0,0,0,8201,8202,
        3,730,365,0,8202,889,1,0,0,0,8203,8235,5,520,0,0,8204,8209,3,922,
        461,0,8205,8207,5,269,0,0,8206,8205,1,0,0,0,8206,8207,1,0,0,0,8207,
        8208,1,0,0,0,8208,8210,5,324,0,0,8209,8206,1,0,0,0,8209,8210,1,0,
        0,0,8210,8211,1,0,0,0,8211,8219,5,62,0,0,8212,8220,3,560,280,0,8213,
        8214,5,202,0,0,8214,8217,3,930,465,0,8215,8216,5,100,0,0,8216,8218,
        3,730,365,0,8217,8215,1,0,0,0,8217,8218,1,0,0,0,8218,8220,1,0,0,
        0,8219,8212,1,0,0,0,8219,8213,1,0,0,0,8220,8236,1,0,0,0,8221,8233,
        3,818,409,0,8222,8223,5,2,0,0,8223,8228,3,892,446,0,8224,8225,5,
        6,0,0,8225,8227,3,892,446,0,8226,8224,1,0,0,0,8227,8230,1,0,0,0,
        8228,8226,1,0,0,0,8228,8229,1,0,0,0,8229,8231,1,0,0,0,8230,8228,
        1,0,0,0,8231,8232,5,3,0,0,8232,8234,1,0,0,0,8233,8222,1,0,0,0,8233,
        8234,1,0,0,0,8234,8236,1,0,0,0,8235,8204,1,0,0,0,8235,8221,1,0,0,
        0,8236,8237,1,0,0,0,8237,8238,5,7,0,0,8238,891,1,0,0,0,8239,8240,
        3,818,409,0,8240,8241,5,20,0,0,8241,8243,1,0,0,0,8242,8239,1,0,0,
        0,8242,8243,1,0,0,0,8243,8244,1,0,0,0,8244,8245,3,674,337,0,8245,
        893,1,0,0,0,8246,8248,5,61,0,0,8247,8249,3,896,448,0,8248,8247,1,
        0,0,0,8248,8249,1,0,0,0,8249,8251,1,0,0,0,8250,8252,3,332,166,0,
        8251,8250,1,0,0,0,8251,8252,1,0,0,0,8252,8253,1,0,0,0,8253,8254,
        3,922,461,0,8254,8255,5,71,0,0,8255,8256,3,730,365,0,8256,8257,5,
        7,0,0,8257,895,1,0,0,0,8258,8273,5,268,0,0,8259,8273,5,293,0,0,8260,
        8273,5,207,0,0,8261,8273,5,249,0,0,8262,8264,7,50,0,0,8263,8262,
        1,0,0,0,8263,8264,1,0,0,0,8264,8265,1,0,0,0,8265,8273,3,674,337,
        0,8266,8273,5,30,0,0,8267,8270,7,117,0,0,8268,8271,3,674,337,0,8269,
        8271,5,30,0,0,8270,8268,1,0,0,0,8270,8269,1,0,0,0,8270,8271,1,0,
        0,0,8271,8273,1,0,0,0,8272,8258,1,0,0,0,8272,8259,1,0,0,0,8272,8260,
        1,0,0,0,8272,8261,1,0,0,0,8272,8263,1,0,0,0,8272,8266,1,0,0,0,8272,
        8267,1,0,0,0,8273,897,1,0,0,0,8274,8276,5,265,0,0,8275,8277,3,896,
        448,0,8276,8275,1,0,0,0,8276,8277,1,0,0,0,8277,8278,1,0,0,0,8278,
        8279,3,922,461,0,8279,8280,5,7,0,0,8280,899,1,0,0,0,8281,8283,3,
        572,286,0,8282,8281,1,0,0,0,8282,8283,1,0,0,0,8283,8284,1,0,0,0,
        8284,8285,5,525,0,0,8285,8287,5,71,0,0,8286,8288,5,81,0,0,8287,8286,
        1,0,0,0,8287,8288,1,0,0,0,8288,8289,1,0,0,0,8289,8291,3,774,387,
        0,8290,8292,5,9,0,0,8291,8290,1,0,0,0,8291,8292,1,0,0,0,8292,8297,
        1,0,0,0,8293,8295,5,36,0,0,8294,8293,1,0,0,0,8294,8295,1,0,0,0,8295,
        8296,1,0,0,0,8296,8298,3,818,409,0,8297,8294,1,0,0,0,8297,8298,1,
        0,0,0,8298,8299,1,0,0,0,8299,8300,5,100,0,0,8300,8301,3,902,451,
        0,8301,8302,5,80,0,0,8302,8304,3,674,337,0,8303,8305,3,904,452,0,
        8304,8303,1,0,0,0,8305,8306,1,0,0,0,8306,8304,1,0,0,0,8306,8307,
        1,0,0,0,8307,901,1,0,0,0,8308,8310,5,81,0,0,8309,8308,1,0,0,0,8309,
        8310,1,0,0,0,8310,8311,1,0,0,0,8311,8313,3,774,387,0,8312,8314,5,
        9,0,0,8313,8312,1,0,0,0,8313,8314,1,0,0,0,8314,8320,1,0,0,0,8315,
        8318,3,564,282,0,8316,8318,3,608,304,0,8317,8315,1,0,0,0,8317,8316,
        1,0,0,0,8318,8320,1,0,0,0,8319,8309,1,0,0,0,8319,8317,1,0,0,0,8320,
        8325,1,0,0,0,8321,8323,5,36,0,0,8322,8321,1,0,0,0,8322,8323,1,0,
        0,0,8323,8324,1,0,0,0,8324,8326,3,818,409,0,8325,8322,1,0,0,0,8325,
        8326,1,0,0,0,8326,903,1,0,0,0,8327,8328,5,102,0,0,8328,8331,5,526,
        0,0,8329,8330,5,33,0,0,8330,8332,3,674,337,0,8331,8329,1,0,0,0,8331,
        8332,1,0,0,0,8332,8333,1,0,0,0,8333,8338,5,93,0,0,8334,8339,3,908,
        454,0,8335,8339,5,182,0,0,8336,8337,5,57,0,0,8337,8339,5,270,0,0,
        8338,8334,1,0,0,0,8338,8335,1,0,0,0,8338,8336,1,0,0,0,8339,8354,
        1,0,0,0,8340,8341,5,102,0,0,8341,8342,5,77,0,0,8342,8345,5,526,0,
        0,8343,8344,5,33,0,0,8344,8346,3,674,337,0,8345,8343,1,0,0,0,8345,
        8346,1,0,0,0,8346,8347,1,0,0,0,8347,8351,5,93,0,0,8348,8352,3,906,
        453,0,8349,8350,5,57,0,0,8350,8352,5,270,0,0,8351,8348,1,0,0,0,8351,
        8349,1,0,0,0,8352,8354,1,0,0,0,8353,8327,1,0,0,0,8353,8340,1,0,0,
        0,8354,905,1,0,0,0,8355,8357,5,241,0,0,8356,8358,3,144,72,0,8357,
        8356,1,0,0,0,8357,8358,1,0,0,0,8358,8362,1,0,0,0,8359,8360,5,463,
        0,0,8360,8361,7,76,0,0,8361,8363,5,450,0,0,8362,8359,1,0,0,0,8362,
        8363,1,0,0,0,8363,8364,1,0,0,0,8364,8365,3,910,455,0,8365,907,1,
        0,0,0,8366,8367,5,369,0,0,8367,8385,5,333,0,0,8368,8369,3,800,400,
        0,8369,8370,5,10,0,0,8370,8371,3,912,456,0,8371,8386,1,0,0,0,8372,
        8373,3,144,72,0,8373,8374,5,10,0,0,8374,8375,5,2,0,0,8375,8380,3,
        912,456,0,8376,8377,5,6,0,0,8377,8379,3,912,456,0,8378,8376,1,0,
        0,0,8379,8382,1,0,0,0,8380,8378,1,0,0,0,8380,8381,1,0,0,0,8381,8383,
        1,0,0,0,8382,8380,1,0,0,0,8383,8384,5,3,0,0,8384,8386,1,0,0,0,8385,
        8368,1,0,0,0,8385,8372,1,0,0,0,8386,8387,1,0,0,0,8387,8385,1,0,0,
        0,8387,8388,1,0,0,0,8388,909,1,0,0,0,8389,8390,5,422,0,0,8390,8391,
        5,2,0,0,8391,8396,3,912,456,0,8392,8393,5,6,0,0,8393,8395,3,912,
        456,0,8394,8392,1,0,0,0,8395,8398,1,0,0,0,8396,8394,1,0,0,0,8396,
        8397,1,0,0,0,8397,8399,1,0,0,0,8398,8396,1,0,0,0,8399,8400,5,3,0,
        0,8400,8404,1,0,0,0,8401,8402,5,53,0,0,8402,8404,5,422,0,0,8403,
        8389,1,0,0,0,8403,8401,1,0,0,0,8404,911,1,0,0,0,8405,8408,3,588,
        294,0,8406,8408,5,53,0,0,8407,8405,1,0,0,0,8407,8406,1,0,0,0,8408,
        913,1,0,0,0,8409,8410,5,157,0,0,8410,8411,3,922,461,0,8411,8412,
        5,7,0,0,8412,915,1,0,0,0,8413,8414,5,78,0,0,8414,8415,5,7,0,0,8415,
        917,1,0,0,0,8416,8422,7,67,0,0,8417,8419,5,33,0,0,8418,8420,5,269,
        0,0,8419,8418,1,0,0,0,8419,8420,1,0,0,0,8420,8421,1,0,0,0,8421,8423,
        5,153,0,0,8422,8417,1,0,0,0,8422,8423,1,0,0,0,8423,8424,1,0,0,0,
        8424,8425,5,7,0,0,8425,919,1,0,0,0,8426,8427,5,333,0,0,8427,8428,
        3,316,158,0,8428,8429,5,94,0,0,8429,8430,5,53,0,0,8430,8431,5,7,
        0,0,8431,8439,1,0,0,0,8432,8435,5,313,0,0,8433,8436,3,316,158,0,
        8434,8436,5,30,0,0,8435,8433,1,0,0,0,8435,8434,1,0,0,0,8436,8437,
        1,0,0,0,8437,8439,5,7,0,0,8438,8426,1,0,0,0,8438,8432,1,0,0,0,8439,
        921,1,0,0,0,8440,8443,3,818,409,0,8441,8443,5,28,0,0,8442,8440,1,
        0,0,0,8442,8441,1,0,0,0,8443,923,1,0,0,0,8444,8461,5,517,0,0,8445,
        8446,5,102,0,0,8446,8451,3,926,463,0,8447,8448,5,82,0,0,8448,8450,
        3,926,463,0,8449,8447,1,0,0,0,8450,8453,1,0,0,0,8451,8449,1,0,0,
        0,8451,8452,1,0,0,0,8452,8454,1,0,0,0,8453,8451,1,0,0,0,8454,8458,
        5,93,0,0,8455,8457,3,846,423,0,8456,8455,1,0,0,0,8457,8460,1,0,0,
        0,8458,8456,1,0,0,0,8458,8459,1,0,0,0,8459,8462,1,0,0,0,8460,8458,
        1,0,0,0,8461,8445,1,0,0,0,8462,8463,1,0,0,0,8463,8461,1,0,0,0,8463,
        8464,1,0,0,0,8464,925,1,0,0,0,8465,8469,3,928,464,0,8466,8467,5,
        511,0,0,8467,8469,3,808,404,0,8468,8465,1,0,0,0,8468,8466,1,0,0,
        0,8469,927,1,0,0,0,8470,8473,3,818,409,0,8471,8473,3,828,414,0,8472,
        8470,1,0,0,0,8472,8471,1,0,0,0,8473,929,1,0,0,0,8474,8476,3,756,
        378,0,8475,8474,1,0,0,0,8475,8476,1,0,0,0,8476,8478,1,0,0,0,8477,
        8479,3,580,290,0,8478,8477,1,0,0,0,8478,8479,1,0,0,0,8479,8481,1,
        0,0,0,8480,8482,3,610,305,0,8481,8480,1,0,0,0,8481,8482,1,0,0,0,
        8482,8484,1,0,0,0,8483,8485,3,638,319,0,8484,8483,1,0,0,0,8484,8485,
        1,0,0,0,8485,8487,1,0,0,0,8486,8488,3,600,300,0,8487,8486,1,0,0,
        0,8487,8488,1,0,0,0,8488,8491,1,0,0,0,8489,8490,5,67,0,0,8490,8492,
        3,674,337,0,8491,8489,1,0,0,0,8491,8492,1,0,0,0,8492,8494,1,0,0,
        0,8493,8495,3,702,351,0,8494,8493,1,0,0,0,8494,8495,1,0,0,0,8495,
        931,1,0,0,0,1189,935,942,1062,1064,1073,1078,1084,1119,1129,1135,
        1140,1147,1152,1159,1170,1178,1182,1194,1200,1206,1210,1215,1219,
        1232,1242,1244,1250,1255,1268,1271,1276,1281,1292,1296,1308,1312,
        1315,1319,1331,1349,1356,1364,1369,1376,1384,1390,1398,1406,1410,
        1424,1429,1434,1446,1452,1464,1469,1479,1485,1490,1498,1503,1510,
        1515,1520,1530,1535,1540,1547,1551,1565,1571,1577,1582,1589,1601,
        1609,1617,1633,1642,1651,1660,1664,1676,1684,1694,1714,1719,1722,
        1729,1732,1736,1740,1743,1748,1753,1757,1766,1772,1776,1785,1788,
        1794,1803,1815,1819,1823,1828,1831,1837,1839,1841,1845,1851,1855,
        1860,1865,1869,1872,1879,1892,1905,1919,1936,1946,1953,1958,1962,
        1969,1974,1977,1979,1984,1988,1992,1996,2001,2004,2008,2011,2015,
        2023,2028,2031,2035,2041,2050,2054,2060,2062,2071,2076,2088,2093,
        2097,2101,2106,2110,2113,2116,2119,2122,2125,2130,2133,2136,2139,
        2142,2145,2151,2155,2158,2161,2164,2167,2169,2176,2184,2194,2199,
        2209,2212,2217,2222,2227,2230,2235,2244,2246,2250,2253,2257,2262,
        2267,2271,2274,2278,2281,2286,2289,2294,2297,2301,2304,2307,2312,
        2315,2323,2335,2339,2346,2351,2354,2357,2360,2365,2376,2382,2386,
        2389,2392,2397,2404,2407,2411,2419,2424,2427,2430,2437,2442,2451,
        2454,2457,2462,2465,2477,2487,2504,2508,2512,2514,2531,2533,2549,
        2560,2563,2566,2575,2584,2600,2603,2606,2614,2618,2625,2634,2638,
        2644,2648,2651,2654,2657,2660,2666,2670,2675,2679,2682,2685,2688,
        2693,2699,2703,2707,2711,2717,2719,2724,2730,2736,2740,2755,2760,
        2763,2765,2768,2772,2776,2779,2782,2790,2796,2798,2804,2809,2814,
        2818,2825,2827,2838,2877,2887,2889,2892,2896,2900,2910,2912,2918,
        2920,2929,2941,2955,2960,2963,2970,2975,2983,2985,2991,2996,3000,
        3005,3011,3018,3024,3026,3035,3041,3049,3055,3060,3065,3073,3088,
        3090,3094,3098,3101,3104,3113,3116,3119,3125,3131,3135,3147,3153,
        3156,3161,3165,3172,3182,3184,3208,3220,3225,3227,3231,3234,3237,
        3247,3250,3260,3265,3270,3273,3276,3284,3290,3297,3305,3308,3319,
        3323,3329,3336,3339,3348,3362,3365,3379,3390,3393,3405,3410,3423,
        3428,3441,3450,3453,3456,3463,3466,3478,3484,3486,3494,3502,3510,
        3522,3527,3538,3549,3557,3565,3572,3579,3581,3584,3589,3594,3613,
        3622,3625,3652,3661,3664,3668,3672,3676,3683,3687,3691,3695,3699,
        3704,3708,3713,3719,3724,3731,3735,3741,3745,3750,3758,3764,3769,
        3776,3781,3785,3790,3796,3803,3808,3815,3820,3827,3831,3839,3843,
        3845,3848,3853,3863,3878,3881,3889,3896,3901,3907,3911,3918,3923,
        3926,3929,3933,3942,3960,3963,3995,4000,4006,4026,4031,4037,4040,
        4044,4048,4054,4057,4061,4065,4070,4073,4076,4079,4092,4098,4106,
        4113,4118,4121,4128,4131,4139,4142,4147,4154,4157,4177,4189,4192,
        4198,4203,4212,4220,4225,4231,4238,4246,4249,4260,4262,4276,4282,
        4290,4292,4298,4302,4305,4308,4313,4318,4322,4325,4328,4331,4334,
        4342,4353,4356,4359,4364,4367,4371,4375,4381,4389,4392,4405,4410,
        4412,4417,4424,4431,4440,4448,4456,4463,4471,4478,4486,4490,4494,
        4496,4502,4507,4511,4518,4523,4528,4533,4535,4545,4555,4571,4589,
        4601,4608,4623,4628,4631,4636,4641,4646,4649,4652,4657,4664,4668,
        4673,4680,4684,4690,4699,4708,4720,4722,4735,4741,4745,4747,4754,
        4767,4774,4776,4792,4796,4800,4805,4810,4815,4820,4823,4835,4888,
        4897,4901,4910,4914,4923,4927,4932,4935,4939,4944,4946,4955,4960,
        4971,4975,4989,4997,5035,5037,5056,5059,5086,5090,5094,5098,5102,
        5105,5120,5127,5141,5154,5179,5198,5213,5229,5236,5247,5250,5269,
        5272,5285,5289,5309,5321,5325,5347,5351,5361,5365,5371,5375,5379,
        5383,5390,5395,5406,5410,5413,5418,5424,5435,5439,5442,5446,5450,
        5453,5463,5466,5470,5475,5481,5484,5489,5492,5499,5501,5507,5511,
        5520,5525,5527,5537,5540,5545,5553,5556,5561,5563,5565,5571,5588,
        5594,5607,5613,5617,5622,5652,5667,5672,5676,5689,5693,5695,5704,
        5710,5712,5716,5719,5722,5725,5728,5730,5733,5737,5745,5750,5753,
        5759,5763,5767,5772,5774,5778,5782,5789,5795,5799,5801,5803,5816,
        5824,5832,5843,5852,5857,5861,5865,5872,5875,5877,5885,5889,5892,
        5899,5906,5911,5918,5921,5923,5926,5932,5937,5941,5948,5958,5965,
        5968,5971,5975,5986,5989,5992,5995,5998,6005,6008,6011,6018,6030,
        6037,6039,6044,6049,6051,6057,6064,6069,6074,6078,6082,6086,6088,
        6092,6096,6099,6102,6104,6114,6116,6121,6125,6130,6134,6141,6146,
        6150,6153,6159,6162,6181,6188,6192,6195,6199,6203,6206,6209,6214,
        6223,6230,6234,6238,6242,6245,6247,6252,6256,6261,6267,6274,6279,
        6284,6293,6300,6308,6319,6324,6328,6331,6335,6340,6344,6349,6357,
        6368,6373,6377,6380,6383,6385,6388,6391,6394,6398,6402,6406,6408,
        6417,6422,6428,6432,6434,6441,6446,6452,6454,6458,6465,6470,6473,
        6479,6483,6489,6498,6504,6506,6511,6514,6523,6530,6532,6539,6544,
        6547,6557,6568,6573,6577,6585,6595,6602,6608,6619,6625,6635,6644,
        6648,6651,6653,6655,6659,6667,6670,6675,6680,6687,6689,6695,6699,
        6702,6707,6710,6712,6718,6727,6733,6736,6744,6747,6751,6757,6759,
        6762,6766,6771,6778,6785,6787,6793,6795,6800,6802,6806,6815,6819,
        6827,6829,6843,6846,6854,6863,6869,6874,6882,6884,6889,6893,6898,
        6903,6909,6925,6927,6936,6951,6956,6959,6965,6970,6983,6988,6992,
        6999,7018,7030,7035,7043,7045,7047,7056,7059,7064,7069,7073,7076,
        7085,7093,7098,7100,7103,7107,7118,7139,7147,7160,7170,7176,7182,
        7185,7188,7214,7216,7237,7247,7260,7265,7269,7271,7283,7290,7296,
        7302,7306,7317,7327,7331,7336,7339,7342,7351,7362,7364,7368,7373,
        7382,7387,7395,7405,7413,7417,7420,7427,7435,7439,7446,7453,7455,
        7464,7467,7479,7488,7495,7504,7514,7519,7523,7525,7528,7533,7538,
        7546,7554,7557,7564,7572,7580,7588,7605,7612,7620,7637,7643,7649,
        7657,7663,7668,7676,7681,7684,7693,7700,7705,7709,7714,7720,7725,
        7733,7788,7795,7801,7803,7805,7807,7813,7817,7821,7832,7835,7839,
        7843,7847,7850,7853,7856,7865,7870,7874,7907,7917,7921,7927,7932,
        7941,7949,7960,7968,7977,7986,7991,7995,8005,8010,8018,8023,8026,
        8033,8039,8047,8055,8058,8065,8067,8070,8076,8085,8089,8103,8106,
        8108,8114,8124,8126,8128,8136,8139,8142,8152,8160,8166,8172,8179,
        8183,8187,8190,8193,8199,8206,8209,8217,8219,8228,8233,8235,8242,
        8248,8251,8263,8270,8272,8276,8282,8287,8291,8294,8297,8306,8309,
        8313,8317,8319,8322,8325,8331,8338,8345,8351,8353,8357,8362,8380,
        8385,8387,8396,8403,8407,8419,8422,8435,8438,8442,8451,8458,8463,
        8468,8472,8475,8478,8481,8484,8487,8491,8494
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!PostgreSqlParser.__ATN) {
            PostgreSqlParser.__ATN = new antlr.ATNDeserializer().deserialize(PostgreSqlParser._serializedATN);
        }

        return PostgreSqlParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(PostgreSqlParser.literalNames, PostgreSqlParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return PostgreSqlParser.vocabulary;
    }

    private static readonly decisionsToDFA = PostgreSqlParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class ProgramContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.EOF, 0)!;
    }
    public singleStmt(): SingleStmtContext[];
    public singleStmt(i: number): SingleStmtContext | null;
    public singleStmt(i?: number): SingleStmtContext[] | SingleStmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SingleStmtContext);
        }

        return this.getRuleContext(i, SingleStmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_program;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProgram) {
             listener.enterProgram(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProgram) {
             listener.exitProgram(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProgram) {
            return visitor.visitProgram(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleStmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stmt(): StmtContext {
        return this.getRuleContext(0, StmtContext)!;
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SEMI, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_singleStmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSingleStmt) {
             listener.enterSingleStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSingleStmt) {
             listener.exitSingleStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSingleStmt) {
            return visitor.visitSingleStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public altereventtrigstmt(): AltereventtrigstmtContext | null {
        return this.getRuleContext(0, AltereventtrigstmtContext);
    }
    public altercollationstmt(): AltercollationstmtContext | null {
        return this.getRuleContext(0, AltercollationstmtContext);
    }
    public alterdatabasestmt(): AlterdatabasestmtContext | null {
        return this.getRuleContext(0, AlterdatabasestmtContext);
    }
    public alterdatabasesetstmt(): AlterdatabasesetstmtContext | null {
        return this.getRuleContext(0, AlterdatabasesetstmtContext);
    }
    public alterdefaultprivilegesstmt(): AlterdefaultprivilegesstmtContext | null {
        return this.getRuleContext(0, AlterdefaultprivilegesstmtContext);
    }
    public alterdomainstmt(): AlterdomainstmtContext | null {
        return this.getRuleContext(0, AlterdomainstmtContext);
    }
    public alterenumstmt(): AlterenumstmtContext | null {
        return this.getRuleContext(0, AlterenumstmtContext);
    }
    public alterextensionstmt(): AlterextensionstmtContext | null {
        return this.getRuleContext(0, AlterextensionstmtContext);
    }
    public alterextensioncontentsstmt(): AlterextensioncontentsstmtContext | null {
        return this.getRuleContext(0, AlterextensioncontentsstmtContext);
    }
    public alterfdwstmt(): AlterfdwstmtContext | null {
        return this.getRuleContext(0, AlterfdwstmtContext);
    }
    public alterforeignserverstmt(): AlterforeignserverstmtContext | null {
        return this.getRuleContext(0, AlterforeignserverstmtContext);
    }
    public alterfunctionstmt(): AlterfunctionstmtContext | null {
        return this.getRuleContext(0, AlterfunctionstmtContext);
    }
    public altergroupstmt(): AltergroupstmtContext | null {
        return this.getRuleContext(0, AltergroupstmtContext);
    }
    public alterobjectdependsstmt(): AlterobjectdependsstmtContext | null {
        return this.getRuleContext(0, AlterobjectdependsstmtContext);
    }
    public alterobjectschemastmt(): AlterobjectschemastmtContext | null {
        return this.getRuleContext(0, AlterobjectschemastmtContext);
    }
    public alterownerstmt(): AlterownerstmtContext | null {
        return this.getRuleContext(0, AlterownerstmtContext);
    }
    public alteroperatorstmt(): AlteroperatorstmtContext | null {
        return this.getRuleContext(0, AlteroperatorstmtContext);
    }
    public altertypestmt(): AltertypestmtContext | null {
        return this.getRuleContext(0, AltertypestmtContext);
    }
    public alterpolicystmt(): AlterpolicystmtContext | null {
        return this.getRuleContext(0, AlterpolicystmtContext);
    }
    public alterprocedurestmt(): AlterprocedurestmtContext | null {
        return this.getRuleContext(0, AlterprocedurestmtContext);
    }
    public alterseqstmt(): AlterseqstmtContext | null {
        return this.getRuleContext(0, AlterseqstmtContext);
    }
    public altersystemstmt(): AltersystemstmtContext | null {
        return this.getRuleContext(0, AltersystemstmtContext);
    }
    public altertablestmt(): AltertablestmtContext | null {
        return this.getRuleContext(0, AltertablestmtContext);
    }
    public altertblspcstmt(): AltertblspcstmtContext | null {
        return this.getRuleContext(0, AltertblspcstmtContext);
    }
    public altercompositetypestmt(): AltercompositetypestmtContext | null {
        return this.getRuleContext(0, AltercompositetypestmtContext);
    }
    public alterpublicationstmt(): AlterpublicationstmtContext | null {
        return this.getRuleContext(0, AlterpublicationstmtContext);
    }
    public alterrolesetstmt(): AlterrolesetstmtContext | null {
        return this.getRuleContext(0, AlterrolesetstmtContext);
    }
    public alterroutinestmt(): AlterroutinestmtContext | null {
        return this.getRuleContext(0, AlterroutinestmtContext);
    }
    public alterrolestmt(): AlterrolestmtContext | null {
        return this.getRuleContext(0, AlterrolestmtContext);
    }
    public altersubscriptionstmt(): AltersubscriptionstmtContext | null {
        return this.getRuleContext(0, AltersubscriptionstmtContext);
    }
    public alterstatsstmt(): AlterstatsstmtContext | null {
        return this.getRuleContext(0, AlterstatsstmtContext);
    }
    public altertsconfigurationstmt(): AltertsconfigurationstmtContext | null {
        return this.getRuleContext(0, AltertsconfigurationstmtContext);
    }
    public altertsdictionarystmt(): AltertsdictionarystmtContext | null {
        return this.getRuleContext(0, AltertsdictionarystmtContext);
    }
    public alterusermappingstmt(): AlterusermappingstmtContext | null {
        return this.getRuleContext(0, AlterusermappingstmtContext);
    }
    public analyzestmt(): AnalyzestmtContext | null {
        return this.getRuleContext(0, AnalyzestmtContext);
    }
    public callstmt(): CallstmtContext | null {
        return this.getRuleContext(0, CallstmtContext);
    }
    public checkpointstmt(): CheckpointstmtContext | null {
        return this.getRuleContext(0, CheckpointstmtContext);
    }
    public closeportalstmt(): CloseportalstmtContext | null {
        return this.getRuleContext(0, CloseportalstmtContext);
    }
    public clusterstmt(): ClusterstmtContext | null {
        return this.getRuleContext(0, ClusterstmtContext);
    }
    public commentstmt(): CommentstmtContext | null {
        return this.getRuleContext(0, CommentstmtContext);
    }
    public constraintssetstmt(): ConstraintssetstmtContext | null {
        return this.getRuleContext(0, ConstraintssetstmtContext);
    }
    public copystmt(): CopystmtContext | null {
        return this.getRuleContext(0, CopystmtContext);
    }
    public createamstmt(): CreateamstmtContext | null {
        return this.getRuleContext(0, CreateamstmtContext);
    }
    public createasstmt(): CreateasstmtContext | null {
        return this.getRuleContext(0, CreateasstmtContext);
    }
    public createassertionstmt(): CreateassertionstmtContext | null {
        return this.getRuleContext(0, CreateassertionstmtContext);
    }
    public createcaststmt(): CreatecaststmtContext | null {
        return this.getRuleContext(0, CreatecaststmtContext);
    }
    public createconversionstmt(): CreateconversionstmtContext | null {
        return this.getRuleContext(0, CreateconversionstmtContext);
    }
    public createdomainstmt(): CreatedomainstmtContext | null {
        return this.getRuleContext(0, CreatedomainstmtContext);
    }
    public createextensionstmt(): CreateextensionstmtContext | null {
        return this.getRuleContext(0, CreateextensionstmtContext);
    }
    public createfdwstmt(): CreatefdwstmtContext | null {
        return this.getRuleContext(0, CreatefdwstmtContext);
    }
    public createforeignserverstmt(): CreateforeignserverstmtContext | null {
        return this.getRuleContext(0, CreateforeignserverstmtContext);
    }
    public createforeigntablestmt(): CreateforeigntablestmtContext | null {
        return this.getRuleContext(0, CreateforeigntablestmtContext);
    }
    public createfunctionstmt(): CreatefunctionstmtContext | null {
        return this.getRuleContext(0, CreatefunctionstmtContext);
    }
    public creategroupstmt(): CreategroupstmtContext | null {
        return this.getRuleContext(0, CreategroupstmtContext);
    }
    public creatematviewstmt(): CreatematviewstmtContext | null {
        return this.getRuleContext(0, CreatematviewstmtContext);
    }
    public createopclassstmt(): CreateopclassstmtContext | null {
        return this.getRuleContext(0, CreateopclassstmtContext);
    }
    public createopfamilystmt(): CreateopfamilystmtContext | null {
        return this.getRuleContext(0, CreateopfamilystmtContext);
    }
    public createpublicationstmt(): CreatepublicationstmtContext | null {
        return this.getRuleContext(0, CreatepublicationstmtContext);
    }
    public alteropfamilystmt(): AlteropfamilystmtContext | null {
        return this.getRuleContext(0, AlteropfamilystmtContext);
    }
    public createpolicystmt(): CreatepolicystmtContext | null {
        return this.getRuleContext(0, CreatepolicystmtContext);
    }
    public createplangstmt(): CreateplangstmtContext | null {
        return this.getRuleContext(0, CreateplangstmtContext);
    }
    public createschemastmt(): CreateschemastmtContext | null {
        return this.getRuleContext(0, CreateschemastmtContext);
    }
    public createseqstmt(): CreateseqstmtContext | null {
        return this.getRuleContext(0, CreateseqstmtContext);
    }
    public createstmt(): CreatestmtContext | null {
        return this.getRuleContext(0, CreatestmtContext);
    }
    public createsubscriptionstmt(): CreatesubscriptionstmtContext | null {
        return this.getRuleContext(0, CreatesubscriptionstmtContext);
    }
    public createstatsstmt(): CreatestatsstmtContext | null {
        return this.getRuleContext(0, CreatestatsstmtContext);
    }
    public createtablespacestmt(): CreatetablespacestmtContext | null {
        return this.getRuleContext(0, CreatetablespacestmtContext);
    }
    public createtransformstmt(): CreatetransformstmtContext | null {
        return this.getRuleContext(0, CreatetransformstmtContext);
    }
    public createtrigstmt(): CreatetrigstmtContext | null {
        return this.getRuleContext(0, CreatetrigstmtContext);
    }
    public createeventtrigstmt(): CreateeventtrigstmtContext | null {
        return this.getRuleContext(0, CreateeventtrigstmtContext);
    }
    public createrolestmt(): CreaterolestmtContext | null {
        return this.getRuleContext(0, CreaterolestmtContext);
    }
    public createuserstmt(): CreateuserstmtContext | null {
        return this.getRuleContext(0, CreateuserstmtContext);
    }
    public createusermappingstmt(): CreateusermappingstmtContext | null {
        return this.getRuleContext(0, CreateusermappingstmtContext);
    }
    public createdbstmt(): CreatedbstmtContext | null {
        return this.getRuleContext(0, CreatedbstmtContext);
    }
    public deallocatestmt(): DeallocatestmtContext | null {
        return this.getRuleContext(0, DeallocatestmtContext);
    }
    public declarecursorstmt(): DeclarecursorstmtContext | null {
        return this.getRuleContext(0, DeclarecursorstmtContext);
    }
    public definestmt(): DefinestmtContext | null {
        return this.getRuleContext(0, DefinestmtContext);
    }
    public deletestmt(): DeletestmtContext | null {
        return this.getRuleContext(0, DeletestmtContext);
    }
    public discardstmt(): DiscardstmtContext | null {
        return this.getRuleContext(0, DiscardstmtContext);
    }
    public dostmt(): DostmtContext | null {
        return this.getRuleContext(0, DostmtContext);
    }
    public dropstmt(): DropstmtContext | null {
        return this.getRuleContext(0, DropstmtContext);
    }
    public executestmt(): ExecutestmtContext | null {
        return this.getRuleContext(0, ExecutestmtContext);
    }
    public explainstmt(): ExplainstmtContext | null {
        return this.getRuleContext(0, ExplainstmtContext);
    }
    public fetchstmt(): FetchstmtContext | null {
        return this.getRuleContext(0, FetchstmtContext);
    }
    public grantstmt(): GrantstmtContext | null {
        return this.getRuleContext(0, GrantstmtContext);
    }
    public grantrolestmt(): GrantrolestmtContext | null {
        return this.getRuleContext(0, GrantrolestmtContext);
    }
    public mergestmt(): MergestmtContext | null {
        return this.getRuleContext(0, MergestmtContext);
    }
    public importforeignschemastmt(): ImportforeignschemastmtContext | null {
        return this.getRuleContext(0, ImportforeignschemastmtContext);
    }
    public indexstmt(): IndexstmtContext | null {
        return this.getRuleContext(0, IndexstmtContext);
    }
    public insertstmt(): InsertstmtContext | null {
        return this.getRuleContext(0, InsertstmtContext);
    }
    public listenstmt(): ListenstmtContext | null {
        return this.getRuleContext(0, ListenstmtContext);
    }
    public refreshmatviewstmt(): RefreshmatviewstmtContext | null {
        return this.getRuleContext(0, RefreshmatviewstmtContext);
    }
    public loadstmt(): LoadstmtContext | null {
        return this.getRuleContext(0, LoadstmtContext);
    }
    public lockstmt(): LockstmtContext | null {
        return this.getRuleContext(0, LockstmtContext);
    }
    public notifystmt(): NotifystmtContext | null {
        return this.getRuleContext(0, NotifystmtContext);
    }
    public preparestmt(): PreparestmtContext | null {
        return this.getRuleContext(0, PreparestmtContext);
    }
    public reassignownedstmt(): ReassignownedstmtContext | null {
        return this.getRuleContext(0, ReassignownedstmtContext);
    }
    public reindexstmt(): ReindexstmtContext | null {
        return this.getRuleContext(0, ReindexstmtContext);
    }
    public removeaggrstmt(): RemoveaggrstmtContext | null {
        return this.getRuleContext(0, RemoveaggrstmtContext);
    }
    public removefuncstmt(): RemovefuncstmtContext | null {
        return this.getRuleContext(0, RemovefuncstmtContext);
    }
    public removeoperstmt(): RemoveoperstmtContext | null {
        return this.getRuleContext(0, RemoveoperstmtContext);
    }
    public renamestmt(): RenamestmtContext | null {
        return this.getRuleContext(0, RenamestmtContext);
    }
    public revokestmt(): RevokestmtContext | null {
        return this.getRuleContext(0, RevokestmtContext);
    }
    public revokerolestmt(): RevokerolestmtContext | null {
        return this.getRuleContext(0, RevokerolestmtContext);
    }
    public rulestmt(): RulestmtContext | null {
        return this.getRuleContext(0, RulestmtContext);
    }
    public seclabelstmt(): SeclabelstmtContext | null {
        return this.getRuleContext(0, SeclabelstmtContext);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public transactionstmt(): TransactionstmtContext | null {
        return this.getRuleContext(0, TransactionstmtContext);
    }
    public truncatestmt(): TruncatestmtContext | null {
        return this.getRuleContext(0, TruncatestmtContext);
    }
    public unlistenstmt(): UnlistenstmtContext | null {
        return this.getRuleContext(0, UnlistenstmtContext);
    }
    public updatestmt(): UpdatestmtContext | null {
        return this.getRuleContext(0, UpdatestmtContext);
    }
    public vacuumstmt(): VacuumstmtContext | null {
        return this.getRuleContext(0, VacuumstmtContext);
    }
    public variableresetstmt(): VariableresetstmtContext | null {
        return this.getRuleContext(0, VariableresetstmtContext);
    }
    public variablesetstmt(): VariablesetstmtContext | null {
        return this.getRuleContext(0, VariablesetstmtContext);
    }
    public variableshowstmt(): VariableshowstmtContext | null {
        return this.getRuleContext(0, VariableshowstmtContext);
    }
    public viewstmt(): ViewstmtContext | null {
        return this.getRuleContext(0, ViewstmtContext);
    }
    public MetaCommand(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MetaCommand, 0);
    }
    public EndMetaCommand(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EndMetaCommand, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt) {
             listener.enterStmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt) {
             listener.exitStmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt) {
            return visitor.visitStmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CallstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CALL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CALL, 0)!;
    }
    public func_application(): Func_applicationContext {
        return this.getRuleContext(0, Func_applicationContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_callstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCallstmt) {
             listener.enterCallstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCallstmt) {
             listener.exitCallstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCallstmt) {
            return visitor.visitCallstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreaterolestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_ROLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public createoptroleelem(): CreateoptroleelemContext[];
    public createoptroleelem(i: number): CreateoptroleelemContext | null;
    public createoptroleelem(i?: number): CreateoptroleelemContext[] | CreateoptroleelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateoptroleelemContext);
        }

        return this.getRuleContext(i, CreateoptroleelemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createrolestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreaterolestmt) {
             listener.enterCreaterolestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreaterolestmt) {
             listener.exitCreaterolestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreaterolestmt) {
            return visitor.visitCreaterolestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlteroptroleelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PASSWORD, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENCRYPTED, 0);
    }
    public KW_UNENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNENCRYPTED, 0);
    }
    public KW_INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERIT, 0);
    }
    public KW_NOINHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOINHERIT, 0);
    }
    public KW_CREATEUSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATEUSER, 0);
    }
    public KW_NOCREATEUSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOCREATEUSER, 0);
    }
    public KW_CREATEROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATEROLE, 0);
    }
    public KW_NOCREATEROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOCREATEROLE, 0);
    }
    public KW_CREATEDB(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATEDB, 0);
    }
    public KW_NOCREATEDB(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOCREATEDB, 0);
    }
    public KW_SUPERUSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUPERUSER, 0);
    }
    public KW_NOSUPERUSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOSUPERUSER, 0);
    }
    public KW_LOGIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOGIN, 0);
    }
    public KW_NOLOGIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOLOGIN, 0);
    }
    public KW_REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLICATION, 0);
    }
    public KW_NOREPLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOREPLICATION, 0);
    }
    public KW_BYPASSRLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BYPASSRLS, 0);
    }
    public KW_NOBYPASSRLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOBYPASSRLS, 0);
    }
    public KW_CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONNECTION, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIMIT, 0);
    }
    public signediconst(): SignediconstContext | null {
        return this.getRuleContext(0, SignediconstContext);
    }
    public KW_VALID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALID, 0);
    }
    public KW_UNTIL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNTIL, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public role_list(): Role_listContext | null {
        return this.getRuleContext(0, Role_listContext);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADMIN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alteroptroleelem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlteroptroleelem) {
             listener.enterAlteroptroleelem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlteroptroleelem) {
             listener.exitAlteroptroleelem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlteroptroleelem) {
            return visitor.visitAlteroptroleelem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateoptroleelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alteroptroleelem(): AlteroptroleelemContext | null {
        return this.getRuleContext(0, AlteroptroleelemContext);
    }
    public KW_SYSID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSID, 0);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public role_list(): Role_listContext | null {
        return this.getRuleContext(0, Role_listContext);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADMIN, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createoptroleelem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateoptroleelem) {
             listener.enterCreateoptroleelem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateoptroleelem) {
             listener.exitCreateoptroleelem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateoptroleelem) {
            return visitor.visitCreateoptroleelem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateuserstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_USER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USER, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public createoptroleelem(): CreateoptroleelemContext[];
    public createoptroleelem(i: number): CreateoptroleelemContext | null;
    public createoptroleelem(i?: number): CreateoptroleelemContext[] | CreateoptroleelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateoptroleelemContext);
        }

        return this.getRuleContext(i, CreateoptroleelemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createuserstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateuserstmt) {
             listener.enterCreateuserstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateuserstmt) {
             listener.exitCreateuserstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateuserstmt) {
            return visitor.visitCreateuserstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterrolestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public alteroptroleelem(): AlteroptroleelemContext[];
    public alteroptroleelem(i: number): AlteroptroleelemContext | null;
    public alteroptroleelem(i?: number): AlteroptroleelemContext[] | AlteroptroleelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlteroptroleelemContext);
        }

        return this.getRuleContext(i, AlteroptroleelemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterrolestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterrolestmt) {
             listener.enterAlterrolestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterrolestmt) {
             listener.exitAlterrolestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterrolestmt) {
            return visitor.visitAlterrolestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterrolesetstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0)!;
    }
    public database_name(): Database_nameContext {
        return this.getRuleContext(0, Database_nameContext)!;
    }
    public setresetclause(): SetresetclauseContext {
        return this.getRuleContext(0, SetresetclauseContext)!;
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterrolesetstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterrolesetstmt) {
             listener.enterAlterrolesetstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterrolesetstmt) {
             listener.exitAlterrolesetstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterrolesetstmt) {
            return visitor.visitAlterrolesetstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterroutinestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_ROUTINE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0)!;
    }
    public routine_name(): Routine_nameContext {
        return this.getRuleContext(0, Routine_nameContext)!;
    }
    public alter_routine_cluase(): Alter_routine_cluaseContext {
        return this.getRuleContext(0, Alter_routine_cluaseContext)!;
    }
    public func_args(): Func_argsContext | null {
        return this.getRuleContext(0, Func_argsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterroutinestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterroutinestmt) {
             listener.enterAlterroutinestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterroutinestmt) {
             listener.exitAlterroutinestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterroutinestmt) {
            return visitor.visitAlterroutinestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_routine_cluaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public routine_action(): Routine_actionContext[];
    public routine_action(i: number): Routine_actionContext | null;
    public routine_action(i?: number): Routine_actionContext[] | Routine_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Routine_actionContext);
        }

        return this.getRuleContext(i, Routine_actionContext);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public routine_name_create(): Routine_name_createContext | null {
        return this.getRuleContext(0, Routine_name_createContext);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name_create(): Schema_name_createContext | null {
        return this.getRuleContext(0, Schema_name_createContext);
    }
    public KW_DEPENDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEPENDS, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_routine_cluase;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_routine_cluase) {
             listener.enterAlter_routine_cluase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_routine_cluase) {
             listener.exitAlter_routine_cluase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_routine_cluase) {
            return visitor.visitAlter_routine_cluase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Routine_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IMMUTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMUTABLE, 0);
    }
    public KW_STABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STABLE, 0);
    }
    public KW_VOLATILE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VOLATILE, 0);
    }
    public KW_LEAKPROOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEAKPROOF, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INVOKER, 0);
    }
    public KW_DEFINER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFINER, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTERNAL, 0);
    }
    public KW_PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARALLEL, 0);
    }
    public KW_UNSAFE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNSAFE, 0);
    }
    public KW_RESTRICTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICTED, 0);
    }
    public KW_SAFE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SAFE, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COST, 0);
    }
    public collabel(): CollabelContext | null {
        return this.getRuleContext(0, CollabelContext);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_routine_action;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoutine_action) {
             listener.enterRoutine_action(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoutine_action) {
             listener.exitRoutine_action(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutine_action) {
            return visitor.visitRoutine_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreategroupstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public createoptroleelem(): CreateoptroleelemContext[];
    public createoptroleelem(i: number): CreateoptroleelemContext | null;
    public createoptroleelem(i?: number): CreateoptroleelemContext[] | CreateoptroleelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateoptroleelemContext);
        }

        return this.getRuleContext(i, CreateoptroleelemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_creategroupstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreategroupstmt) {
             listener.enterCreategroupstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreategroupstmt) {
             listener.exitCreategroupstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreategroupstmt) {
            return visitor.visitCreategroupstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltergroupstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public KW_USER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USER, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altergroupstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltergroupstmt) {
             listener.enterAltergroupstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltergroupstmt) {
             listener.exitAltergroupstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltergroupstmt) {
            return visitor.visitAltergroupstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateschemastmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_SCHEMA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0)!;
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AUTHORIZATION, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public schema_name_create(): Schema_name_createContext | null {
        return this.getRuleContext(0, Schema_name_createContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public schema_stmt(): Schema_stmtContext[];
    public schema_stmt(i: number): Schema_stmtContext | null;
    public schema_stmt(i?: number): Schema_stmtContext[] | Schema_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Schema_stmtContext);
        }

        return this.getRuleContext(i, Schema_stmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createschemastmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateschemastmt) {
             listener.enterCreateschemastmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateschemastmt) {
             listener.exitCreateschemastmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateschemastmt) {
            return visitor.visitCreateschemastmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Schema_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_schema_name_create;
    }
    public override copyFrom(ctx: Schema_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class SchemaNameCreateContext extends Schema_name_createContext {
    public constructor(ctx: Schema_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSchemaNameCreate) {
             listener.enterSchemaNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSchemaNameCreate) {
             listener.exitSchemaNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaNameCreate) {
            return visitor.visitSchemaNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Schema_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createstmt(): CreatestmtContext | null {
        return this.getRuleContext(0, CreatestmtContext);
    }
    public indexstmt(): IndexstmtContext | null {
        return this.getRuleContext(0, IndexstmtContext);
    }
    public createseqstmt(): CreateseqstmtContext | null {
        return this.getRuleContext(0, CreateseqstmtContext);
    }
    public createtrigstmt(): CreatetrigstmtContext | null {
        return this.getRuleContext(0, CreatetrigstmtContext);
    }
    public grantstmt(): GrantstmtContext | null {
        return this.getRuleContext(0, GrantstmtContext);
    }
    public viewstmt(): ViewstmtContext | null {
        return this.getRuleContext(0, ViewstmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_schema_stmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSchema_stmt) {
             listener.enterSchema_stmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSchema_stmt) {
             listener.exitSchema_stmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSchema_stmt) {
            return visitor.visitSchema_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariablesetstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public set_rest(): Set_restContext {
        return this.getRuleContext(0, Set_restContext)!;
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_variablesetstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVariablesetstmt) {
             listener.enterVariablesetstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVariablesetstmt) {
             listener.exitVariablesetstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVariablesetstmt) {
            return visitor.visitVariablesetstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_restContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public transaction_mode_list(): Transaction_mode_listContext | null {
        return this.getRuleContext(0, Transaction_mode_listContext);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public KW_CHARACTERISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHARACTERISTICS, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public set_rest_more(): Set_rest_moreContext | null {
        return this.getRuleContext(0, Set_rest_moreContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_set_rest;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSet_rest) {
             listener.enterSet_rest(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSet_rest) {
             listener.exitSet_rest(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSet_rest) {
            return visitor.visitSet_rest(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Generic_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public var_name(): Var_nameContext | null {
        return this.getRuleContext(0, Var_nameContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public var_list(): Var_listContext | null {
        return this.getRuleContext(0, Var_listContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_generic_set;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGeneric_set) {
             listener.enterGeneric_set(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGeneric_set) {
             listener.exitGeneric_set(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGeneric_set) {
            return visitor.visitGeneric_set(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_rest_moreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIME, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0);
    }
    public zone_value(): Zone_valueContext | null {
        return this.getRuleContext(0, Zone_valueContext);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CATALOG, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name(): Schema_nameContext | null {
        return this.getRuleContext(0, Schema_nameContext);
    }
    public KW_NAMES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NAMES, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | null {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_XML(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XML, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public document_or_content(): Document_or_contentContext | null {
        return this.getRuleContext(0, Document_or_contentContext);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public KW_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SNAPSHOT, 0);
    }
    public var_name(): Var_nameContext | null {
        return this.getRuleContext(0, Var_nameContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public generic_set(): Generic_setContext | null {
        return this.getRuleContext(0, Generic_setContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_set_rest_more;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSet_rest_more) {
             listener.enterSet_rest_more(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSet_rest_more) {
             listener.exitSet_rest_more(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSet_rest_more) {
            return visitor.visitSet_rest_more(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Var_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.DOT);
    	} else {
    		return this.getToken(PostgreSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_var_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVar_name) {
             listener.enterVar_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVar_name) {
             listener.exitVar_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVar_name) {
            return visitor.visitVar_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Var_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public var_value(): Var_valueContext[];
    public var_value(i: number): Var_valueContext | null;
    public var_value(i?: number): Var_valueContext[] | Var_valueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Var_valueContext);
        }

        return this.getRuleContext(i, Var_valueContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_var_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVar_list) {
             listener.enterVar_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVar_list) {
             listener.exitVar_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVar_list) {
            return visitor.visitVar_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Var_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opt_boolean_or_string(): Opt_boolean_or_stringContext | null {
        return this.getRuleContext(0, Opt_boolean_or_stringContext);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_var_value;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVar_value) {
             listener.enterVar_value(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVar_value) {
             listener.exitVar_value(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVar_value) {
            return visitor.visitVar_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Iso_levelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_READ, 0);
    }
    public KW_UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNCOMMITTED, 0);
    }
    public KW_COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMITTED, 0);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPEATABLE, 0);
    }
    public KW_SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERIALIZABLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_iso_level;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIso_level) {
             listener.enterIso_level(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIso_level) {
             listener.exitIso_level(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIso_level) {
            return visitor.visitIso_level(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_boolean_or_string_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_boolean_or_string_column;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_boolean_or_string_column) {
             listener.enterOpt_boolean_or_string_column(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_boolean_or_string_column) {
             listener.exitOpt_boolean_or_string_column(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_boolean_or_string_column) {
            return visitor.visitOpt_boolean_or_string_column(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_boolean_or_stringContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | null {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_boolean_or_string;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_boolean_or_string) {
             listener.enterOpt_boolean_or_string(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_boolean_or_string) {
             listener.exitOpt_boolean_or_string(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_boolean_or_string) {
            return visitor.visitOpt_boolean_or_string(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Zone_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERVAL, 0);
    }
    public opt_interval(): Opt_intervalContext | null {
        return this.getRuleContext(0, Opt_intervalContext);
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_zone_value;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterZone_value) {
             listener.enterZone_value(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitZone_value) {
             listener.exitZone_value(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitZone_value) {
            return visitor.visitZone_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Nonreservedword_or_sconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonreservedword(): NonreservedwordContext | null {
        return this.getRuleContext(0, NonreservedwordContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_nonreservedword_or_sconst;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNonreservedword_or_sconst) {
             listener.enterNonreservedword_or_sconst(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNonreservedword_or_sconst) {
             listener.exitNonreservedword_or_sconst(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNonreservedword_or_sconst) {
            return visitor.visitNonreservedword_or_sconst(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableresetstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RESET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_RESET, 0)!;
    }
    public reset_rest(): Reset_restContext {
        return this.getRuleContext(0, Reset_restContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_variableresetstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVariableresetstmt) {
             listener.enterVariableresetstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVariableresetstmt) {
             listener.exitVariableresetstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVariableresetstmt) {
            return visitor.visitVariableresetstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Reset_restContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIME, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ISOLATION, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEVEL, 0);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public var_name(): Var_nameContext | null {
        return this.getRuleContext(0, Var_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reset_rest;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReset_rest) {
             listener.enterReset_rest(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReset_rest) {
             listener.exitReset_rest(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReset_rest) {
            return visitor.visitReset_rest(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetresetclauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public set_rest(): Set_restContext | null {
        return this.getRuleContext(0, Set_restContext);
    }
    public variableresetstmt(): VariableresetstmtContext | null {
        return this.getRuleContext(0, VariableresetstmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_setresetclause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSetresetclause) {
             listener.enterSetresetclause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSetresetclause) {
             listener.exitSetresetclause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSetresetclause) {
            return visitor.visitSetresetclause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionsetresetclauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public set_rest_more(): Set_rest_moreContext | null {
        return this.getRuleContext(0, Set_rest_moreContext);
    }
    public variableresetstmt(): VariableresetstmtContext | null {
        return this.getRuleContext(0, VariableresetstmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_functionsetresetclause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunctionsetresetclause) {
             listener.enterFunctionsetresetclause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunctionsetresetclause) {
             listener.exitFunctionsetresetclause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionsetresetclause) {
            return visitor.visitFunctionsetresetclause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VariableshowstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SHOW(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SHOW, 0)!;
    }
    public var_name(): Var_nameContext | null {
        return this.getRuleContext(0, Var_nameContext);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIME, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ISOLATION, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEVEL, 0);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_variableshowstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVariableshowstmt) {
             listener.enterVariableshowstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVariableshowstmt) {
             listener.exitVariableshowstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVariableshowstmt) {
            return visitor.visitVariableshowstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintssetstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public KW_CONSTRAINTS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINTS, 0)!;
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRED, 0);
    }
    public KW_IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMEDIATE, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public qualified_name_list(): Qualified_name_listContext | null {
        return this.getRuleContext(0, Qualified_name_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_constraintssetstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConstraintssetstmt) {
             listener.enterConstraintssetstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConstraintssetstmt) {
             listener.exitConstraintssetstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintssetstmt) {
            return visitor.visitConstraintssetstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckpointstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CHECKPOINT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CHECKPOINT, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_checkpointstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCheckpointstmt) {
             listener.enterCheckpointstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCheckpointstmt) {
             listener.exitCheckpointstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCheckpointstmt) {
            return visitor.visitCheckpointstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DiscardstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISCARD(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DISCARD, 0)!;
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMP, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPORARY, 0);
    }
    public KW_PLANS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PLANS, 0);
    }
    public KW_SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCES, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_discardstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDiscardstmt) {
             listener.enterDiscardstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDiscardstmt) {
             listener.exitDiscardstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDiscardstmt) {
            return visitor.visitDiscardstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltertablestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public relation_expr(): Relation_exprContext | null {
        return this.getRuleContext(0, Relation_exprContext);
    }
    public alter_table_cmds(): Alter_table_cmdsContext | null {
        return this.getRuleContext(0, Alter_table_cmdsContext);
    }
    public partition_cmd(): Partition_cmdContext | null {
        return this.getRuleContext(0, Partition_cmdContext);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public opttablespace(): OpttablespaceContext[];
    public opttablespace(i: number): OpttablespaceContext | null;
    public opttablespace(i?: number): OpttablespaceContext[] | OpttablespaceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OpttablespaceContext);
        }

        return this.getRuleContext(i, OpttablespaceContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public tablespace_name_create(): Tablespace_name_createContext | null {
        return this.getRuleContext(0, Tablespace_name_createContext);
    }
    public KW_OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public role_list(): Role_listContext | null {
        return this.getRuleContext(0, Role_listContext);
    }
    public KW_NOWAIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOWAIT, 0);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public index_partition_cmd(): Index_partition_cmdContext | null {
        return this.getRuleContext(0, Index_partition_cmdContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUES, 0);
    }
    public partition_bound_spec(): Partition_bound_specContext | null {
        return this.getRuleContext(0, Partition_bound_specContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_DETACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DETACH, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public KW_FINALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FINALIZE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altertablestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltertablestmt) {
             listener.enterAltertablestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltertablestmt) {
             listener.exitAltertablestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltertablestmt) {
            return visitor.visitAltertablestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_cmdsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_cmd(): Alter_table_cmdContext[];
    public alter_table_cmd(i: number): Alter_table_cmdContext | null;
    public alter_table_cmd(i?: number): Alter_table_cmdContext[] | Alter_table_cmdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_table_cmdContext);
        }

        return this.getRuleContext(i, Alter_table_cmdContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_table_cmds;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_table_cmds) {
             listener.enterAlter_table_cmds(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_table_cmds) {
             listener.exitAlter_table_cmds(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_cmds) {
            return visitor.visitAlter_table_cmds(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Partition_bound_specContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public partition_bound_cluase(): Partition_bound_cluaseContext[];
    public partition_bound_cluase(i: number): Partition_bound_cluaseContext | null;
    public partition_bound_cluase(i?: number): Partition_bound_cluaseContext[] | Partition_bound_cluaseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Partition_bound_cluaseContext);
        }

        return this.getRuleContext(i, Partition_bound_cluaseContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public partition_with_cluase(): Partition_with_cluaseContext | null {
        return this.getRuleContext(0, Partition_with_cluaseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partition_bound_spec;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartition_bound_spec) {
             listener.enterPartition_bound_spec(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartition_bound_spec) {
             listener.exitPartition_bound_spec(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartition_bound_spec) {
            return visitor.visitPartition_bound_spec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Partition_bound_cluaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public partition_bound_choose(): Partition_bound_chooseContext[];
    public partition_bound_choose(i: number): Partition_bound_chooseContext | null;
    public partition_bound_choose(i?: number): Partition_bound_chooseContext[] | Partition_bound_chooseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Partition_bound_chooseContext);
        }

        return this.getRuleContext(i, Partition_bound_chooseContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partition_bound_cluase;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartition_bound_cluase) {
             listener.enterPartition_bound_cluase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartition_bound_cluase) {
             listener.exitPartition_bound_cluase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartition_bound_cluase) {
            return visitor.visitPartition_bound_cluase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Partition_bound_chooseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public KW_MINVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINVALUE, 0);
    }
    public KW_MAXVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAXVALUE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partition_bound_choose;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartition_bound_choose) {
             listener.enterPartition_bound_choose(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartition_bound_choose) {
             listener.exitPartition_bound_choose(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartition_bound_choose) {
            return visitor.visitPartition_bound_choose(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Partition_with_cluaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public KW_MODULUS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MODULUS, 0)!;
    }
    public numericonly(): NumericonlyContext[];
    public numericonly(i: number): NumericonlyContext | null;
    public numericonly(i?: number): NumericonlyContext[] | NumericonlyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumericonlyContext);
        }

        return this.getRuleContext(i, NumericonlyContext);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.COMMA, 0)!;
    }
    public KW_REMAINDER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REMAINDER, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partition_with_cluase;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartition_with_cluase) {
             listener.enterPartition_with_cluase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartition_with_cluase) {
             listener.exitPartition_with_cluase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartition_with_cluase) {
            return visitor.visitPartition_with_cluase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Partition_cmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public index_partition_cmd(): Index_partition_cmdContext | null {
        return this.getRuleContext(0, Index_partition_cmdContext);
    }
    public partitionboundspec(): PartitionboundspecContext | null {
        return this.getRuleContext(0, PartitionboundspecContext);
    }
    public KW_DETACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DETACH, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partition_cmd;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartition_cmd) {
             listener.enterPartition_cmd(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartition_cmd) {
             listener.exitPartition_cmd(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartition_cmd) {
            return visitor.visitPartition_cmd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Index_partition_cmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ATTACH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ATTACH, 0)!;
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_index_partition_cmd;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndex_partition_cmd) {
             listener.enterIndex_partition_cmd(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndex_partition_cmd) {
             listener.exitIndex_partition_cmd(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndex_partition_cmd) {
            return visitor.visitIndex_partition_cmd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_table_cmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public constraintelem(): ConstraintelemContext | null {
        return this.getRuleContext(0, ConstraintelemContext);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0);
    }
    public constraintattributeElem(): ConstraintattributeElemContext[];
    public constraintattributeElem(i: number): ConstraintattributeElemContext | null;
    public constraintattributeElem(i?: number): ConstraintattributeElemContext[] | ConstraintattributeElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstraintattributeElemContext);
        }

        return this.getRuleContext(i, ConstraintattributeElemContext);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public KW_SET(): antlr.TerminalNode[];
    public KW_SET(i: number): antlr.TerminalNode | null;
    public KW_SET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_SET);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_SET, i);
    	}
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public KW_OIDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OIDS, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLUSTER, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_LOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOGGED, 0);
    }
    public KW_UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLOGGED, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENABLE, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_REPLICA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLICA, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALWAYS, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISABLE, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public KW_INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERIT, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public tablespace_name_create(): Tablespace_name_createContext | null {
        return this.getRuleContext(0, Tablespace_name_createContext);
    }
    public KW_IDENTITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IDENTITY, 0);
    }
    public KW_NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTHING, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FULL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public existingindex(): ExistingindexContext | null {
        return this.getRuleContext(0, ExistingindexContext);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEVEL, 0);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0);
    }
    public KW_FORCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORCE, 0);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMN, 0);
    }
    public column_def(): Column_defContext | null {
        return this.getRuleContext(0, Column_defContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public alter_column_default(): Alter_column_defaultContext | null {
        return this.getRuleContext(0, Alter_column_defaultContext);
    }
    public alter_generic_options(): Alter_generic_optionsContext | null {
        return this.getRuleContext(0, Alter_generic_optionsContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXPRESSION, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public signediconst(): SignediconstContext | null {
        return this.getRuleContext(0, SignediconstContext);
    }
    public reloptions(): ReloptionsContext | null {
        return this.getRuleContext(0, ReloptionsContext);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORAGE, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode[];
    public KW_GENERATED(i: number): antlr.TerminalNode | null;
    public KW_GENERATED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_GENERATED);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_GENERATED, i);
    	}
    }
    public generated_when(): Generated_whenContext[];
    public generated_when(i: number): Generated_whenContext | null;
    public generated_when(i?: number): Generated_whenContext[] | Generated_whenContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Generated_whenContext);
        }

        return this.getRuleContext(i, Generated_whenContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public seqoptelem(): SeqoptelemContext[];
    public seqoptelem(i: number): SeqoptelemContext | null;
    public seqoptelem(i?: number): SeqoptelemContext[] | SeqoptelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SeqoptelemContext);
        }

        return this.getRuleContext(i, SeqoptelemContext);
    }
    public KW_RESTART(): antlr.TerminalNode[];
    public KW_RESTART(i: number): antlr.TerminalNode | null;
    public KW_RESTART(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_RESTART);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_RESTART, i);
    	}
    }
    public numericonly(): NumericonlyContext[];
    public numericonly(i: number): NumericonlyContext | null;
    public numericonly(i?: number): NumericonlyContext[] | NumericonlyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumericonlyContext);
        }

        return this.getRuleContext(i, NumericonlyContext);
    }
    public KW_WITH(): antlr.TerminalNode[];
    public KW_WITH(i: number): antlr.TerminalNode | null;
    public KW_WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_WITH);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_WITH, i);
    	}
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_table_cmd;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_table_cmd) {
             listener.enterAlter_table_cmd(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_table_cmd) {
             listener.exitAlter_table_cmd(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_table_cmd) {
            return visitor.visitAlter_table_cmd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_column_defaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_column_default;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_column_default) {
             listener.enterAlter_column_default(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_column_default) {
             listener.exitAlter_column_default(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_column_default) {
            return visitor.visitAlter_column_default(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_drop_behaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADE, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_drop_behavior;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_drop_behavior) {
             listener.enterOpt_drop_behavior(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_drop_behavior) {
             listener.exitOpt_drop_behavior(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_drop_behavior) {
            return visitor.visitOpt_drop_behavior(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_collate_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COLLATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_COLLATE, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_collate_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_collate_clause) {
             listener.enterOpt_collate_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_collate_clause) {
             listener.exitOpt_collate_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_collate_clause) {
            return visitor.visitOpt_collate_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReloptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public reloption_elem(): Reloption_elemContext[];
    public reloption_elem(i: number): Reloption_elemContext | null;
    public reloption_elem(i?: number): Reloption_elemContext[] | Reloption_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Reloption_elemContext);
        }

        return this.getRuleContext(i, Reloption_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reloptions;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReloptions) {
             listener.enterReloptions(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReloptions) {
             listener.exitReloptions(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReloptions) {
            return visitor.visitReloptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_reloptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public reloptions(): ReloptionsContext {
        return this.getRuleContext(0, ReloptionsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_reloptions;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_reloptions) {
             listener.enterOpt_reloptions(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_reloptions) {
             listener.exitOpt_reloptions(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_reloptions) {
            return visitor.visitOpt_reloptions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Reloption_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collabel(): CollabelContext {
        return this.getRuleContext(0, CollabelContext)!;
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public def_arg(): Def_argContext | null {
        return this.getRuleContext(0, Def_argContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.DOT, 0);
    }
    public def_elem(): Def_elemContext | null {
        return this.getRuleContext(0, Def_elemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reloption_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReloption_elem) {
             listener.enterReloption_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReloption_elem) {
             listener.exitReloption_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReloption_elem) {
            return visitor.visitReloption_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionboundspecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUES, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public nonreservedword(): NonreservedwordContext[];
    public nonreservedword(i: number): NonreservedwordContext | null;
    public nonreservedword(i?: number): NonreservedwordContext[] | NonreservedwordContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NonreservedwordContext);
        }

        return this.getRuleContext(i, NonreservedwordContext);
    }
    public Integral(): antlr.TerminalNode[];
    public Integral(i: number): antlr.TerminalNode | null;
    public Integral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.Integral);
    	} else {
    		return this.getToken(PostgreSqlParser.Integral, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext[];
    public execute_param_clause(i: number): Execute_param_clauseContext | null;
    public execute_param_clause(i?: number): Execute_param_clauseContext[] | Execute_param_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Execute_param_clauseContext);
        }

        return this.getRuleContext(i, Execute_param_clauseContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partitionboundspec;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartitionboundspec) {
             listener.enterPartitionboundspec(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartitionboundspec) {
             listener.exitPartitionboundspec(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionboundspec) {
            return visitor.visitPartitionboundspec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltercompositetypestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public alter_type_cmd(): Alter_type_cmdContext[];
    public alter_type_cmd(i: number): Alter_type_cmdContext | null;
    public alter_type_cmd(i?: number): Alter_type_cmdContext[] | Alter_type_cmdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_type_cmdContext);
        }

        return this.getRuleContext(i, Alter_type_cmdContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altercompositetypestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltercompositetypestmt) {
             listener.enterAltercompositetypestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltercompositetypestmt) {
             listener.exitAltercompositetypestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltercompositetypestmt) {
            return visitor.visitAltercompositetypestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_type_cmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_ATTRIBUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ATTRIBUTE, 0)!;
    }
    public tablefuncelement(): TablefuncelementContext | null {
        return this.getRuleContext(0, TablefuncelementContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_type_cmd;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_type_cmd) {
             listener.enterAlter_type_cmd(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_type_cmd) {
             listener.exitAlter_type_cmd(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_type_cmd) {
            return visitor.visitAlter_type_cmd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CloseportalstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLOSE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CLOSE, 0)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_closeportalstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCloseportalstmt) {
             listener.enterCloseportalstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCloseportalstmt) {
             listener.exitCloseportalstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCloseportalstmt) {
            return visitor.visitCloseportalstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CopystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COPY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_COPY, 0)!;
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public copy_options(): Copy_optionsContext {
        return this.getRuleContext(0, Copy_optionsContext)!;
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public sconst(): SconstContext[];
    public sconst(i: number): SconstContext | null;
    public sconst(i?: number): SconstContext[] | SconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SconstContext);
        }

        return this.getRuleContext(i, SconstContext);
    }
    public KW_STDIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STDIN, 0);
    }
    public KW_STDOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STDOUT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BINARY, 0);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public KW_PROGRAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROGRAM, 0);
    }
    public KW_DELIMITERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELIMITERS, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public preparablestmt(): PreparablestmtContext | null {
        return this.getRuleContext(0, PreparablestmtContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_copystmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCopystmt) {
             listener.enterCopystmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCopystmt) {
             listener.exitCopystmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopystmt) {
            return visitor.visitCopystmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Copy_optionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BINARY(): antlr.TerminalNode[];
    public KW_BINARY(i: number): antlr.TerminalNode | null;
    public KW_BINARY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_BINARY);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_BINARY, i);
    	}
    }
    public KW_FREEZE(): antlr.TerminalNode[];
    public KW_FREEZE(i: number): antlr.TerminalNode | null;
    public KW_FREEZE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FREEZE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FREEZE, i);
    	}
    }
    public sconst(): SconstContext[];
    public sconst(i: number): SconstContext | null;
    public sconst(i?: number): SconstContext[] | SconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SconstContext);
        }

        return this.getRuleContext(i, SconstContext);
    }
    public KW_CSV(): antlr.TerminalNode[];
    public KW_CSV(i: number): antlr.TerminalNode | null;
    public KW_CSV(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_CSV);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_CSV, i);
    	}
    }
    public KW_HEADER(): antlr.TerminalNode[];
    public KW_HEADER(i: number): antlr.TerminalNode | null;
    public KW_HEADER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_HEADER);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_HEADER, i);
    	}
    }
    public KW_FORCE(): antlr.TerminalNode[];
    public KW_FORCE(i: number): antlr.TerminalNode | null;
    public KW_FORCE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FORCE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FORCE, i);
    	}
    }
    public KW_QUOTE(): antlr.TerminalNode[];
    public KW_QUOTE(i: number): antlr.TerminalNode | null;
    public KW_QUOTE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_QUOTE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_QUOTE, i);
    	}
    }
    public KW_NULL(): antlr.TerminalNode[];
    public KW_NULL(i: number): antlr.TerminalNode | null;
    public KW_NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NULL);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NULL, i);
    	}
    }
    public column_list(): Column_listContext[];
    public column_list(i: number): Column_listContext | null;
    public column_list(i?: number): Column_listContext[] | Column_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_listContext);
        }

        return this.getRuleContext(i, Column_listContext);
    }
    public KW_ENCODING(): antlr.TerminalNode[];
    public KW_ENCODING(i: number): antlr.TerminalNode | null;
    public KW_ENCODING(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ENCODING);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ENCODING, i);
    	}
    }
    public KW_DELIMITER(): antlr.TerminalNode[];
    public KW_DELIMITER(i: number): antlr.TerminalNode | null;
    public KW_DELIMITER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_DELIMITER);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_DELIMITER, i);
    	}
    }
    public KW_ESCAPE(): antlr.TerminalNode[];
    public KW_ESCAPE(i: number): antlr.TerminalNode | null;
    public KW_ESCAPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ESCAPE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ESCAPE, i);
    	}
    }
    public STAR(): antlr.TerminalNode[];
    public STAR(i: number): antlr.TerminalNode | null;
    public STAR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.STAR);
    	} else {
    		return this.getToken(PostgreSqlParser.STAR, i);
    	}
    }
    public KW_AS(): antlr.TerminalNode[];
    public KW_AS(i: number): antlr.TerminalNode | null;
    public KW_AS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_AS);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_AS, i);
    	}
    }
    public KW_NOT(): antlr.TerminalNode[];
    public KW_NOT(i: number): antlr.TerminalNode | null;
    public KW_NOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NOT);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NOT, i);
    	}
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public copy_generic_opt_elem(): Copy_generic_opt_elemContext[];
    public copy_generic_opt_elem(i: number): Copy_generic_opt_elemContext | null;
    public copy_generic_opt_elem(i?: number): Copy_generic_opt_elemContext[] | Copy_generic_opt_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Copy_generic_opt_elemContext);
        }

        return this.getRuleContext(i, Copy_generic_opt_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_copy_options;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCopy_options) {
             listener.enterCopy_options(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCopy_options) {
             listener.exitCopy_options(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopy_options) {
            return visitor.visitCopy_options(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Copy_generic_opt_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collabel(): CollabelContext {
        return this.getRuleContext(0, CollabelContext)!;
    }
    public opt_boolean_or_string(): Opt_boolean_or_stringContext | null {
        return this.getRuleContext(0, Opt_boolean_or_stringContext);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public opt_boolean_or_string_column(): Opt_boolean_or_string_columnContext[];
    public opt_boolean_or_string_column(i: number): Opt_boolean_or_string_columnContext | null;
    public opt_boolean_or_string_column(i?: number): Opt_boolean_or_string_columnContext[] | Opt_boolean_or_string_columnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_boolean_or_string_columnContext);
        }

        return this.getRuleContext(i, Opt_boolean_or_string_columnContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_copy_generic_opt_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCopy_generic_opt_elem) {
             listener.enterCopy_generic_opt_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCopy_generic_opt_elem) {
             listener.exitCopy_generic_opt_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCopy_generic_opt_elem) {
            return visitor.visitCopy_generic_opt_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createstmt;
    }
    public override copyFrom(ctx: CreatestmtContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnCreateTableContext extends CreatestmtContext {
    public constructor(ctx: CreatestmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0)!;
    }
    public table_name_create(): Table_name_createContext {
        return this.getRuleContext(0, Table_name_createContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public partitionboundspec(): PartitionboundspecContext | null {
        return this.getRuleContext(0, PartitionboundspecContext);
    }
    public opttemp(): OpttempContext | null {
        return this.getRuleContext(0, OpttempContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public tableelementlist(): TableelementlistContext | null {
        return this.getRuleContext(0, TableelementlistContext);
    }
    public optinherit(): OptinheritContext | null {
        return this.getRuleContext(0, OptinheritContext);
    }
    public partitionspec(): PartitionspecContext | null {
        return this.getRuleContext(0, PartitionspecContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public optwith(): OptwithContext | null {
        return this.getRuleContext(0, OptwithContext);
    }
    public oncommitoption(): OncommitoptionContext | null {
        return this.getRuleContext(0, OncommitoptionContext);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public opttypedtableelementlist(): OpttypedtableelementlistContext | null {
        return this.getRuleContext(0, OpttypedtableelementlistContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnCreateTable) {
             listener.enterColumnCreateTable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnCreateTable) {
             listener.exitColumnCreateTable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnCreateTable) {
            return visitor.visitColumnCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OpttempContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMP, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GLOBAL, 0);
    }
    public KW_UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLOGGED, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opttemp;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpttemp) {
             listener.enterOpttemp(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpttemp) {
             listener.exitOpttemp(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpttemp) {
            return visitor.visitOpttemp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OpttypedtableelementlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public typedtableelement(): TypedtableelementContext[];
    public typedtableelement(i: number): TypedtableelementContext | null;
    public typedtableelement(i?: number): TypedtableelementContext[] | TypedtableelementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypedtableelementContext);
        }

        return this.getRuleContext(i, TypedtableelementContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opttypedtableelementlist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpttypedtableelementlist) {
             listener.enterOpttypedtableelementlist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpttypedtableelementlist) {
             listener.exitOpttypedtableelementlist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpttypedtableelementlist) {
            return visitor.visitOpttypedtableelementlist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableelementlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableelement(): TableelementContext[];
    public tableelement(i: number): TableelementContext | null;
    public tableelement(i?: number): TableelementContext[] | TableelementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableelementContext);
        }

        return this.getRuleContext(i, TableelementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableelementlist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableelementlist) {
             listener.enterTableelementlist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableelementlist) {
             listener.exitTableelementlist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableelementlist) {
            return visitor.visitTableelementlist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableelementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constraintelem(): ConstraintelemContext | null {
        return this.getRuleContext(0, ConstraintelemContext);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public column_def(): Column_defContext | null {
        return this.getRuleContext(0, Column_defContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIKE, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public tablelikeoption(): TablelikeoptionContext[];
    public tablelikeoption(i: number): TablelikeoptionContext | null;
    public tablelikeoption(i?: number): TablelikeoptionContext[] | TablelikeoptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablelikeoptionContext);
        }

        return this.getRuleContext(i, TablelikeoptionContext);
    }
    public KW_INCLUDING(): antlr.TerminalNode[];
    public KW_INCLUDING(i: number): antlr.TerminalNode | null;
    public KW_INCLUDING(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_INCLUDING);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_INCLUDING, i);
    	}
    }
    public KW_EXCLUDING(): antlr.TerminalNode[];
    public KW_EXCLUDING(i: number): antlr.TerminalNode | null;
    public KW_EXCLUDING(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_EXCLUDING);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_EXCLUDING, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tableelement;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableelement) {
             listener.enterTableelement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableelement) {
             listener.exitTableelement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableelement) {
            return visitor.visitTableelement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypedtableelementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name_create(): Column_name_createContext | null {
        return this.getRuleContext(0, Column_name_createContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTIONS, 0);
    }
    public colconstraint(): ColconstraintContext[];
    public colconstraint(i: number): ColconstraintContext | null;
    public colconstraint(i?: number): ColconstraintContext[] | ColconstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColconstraintContext);
        }

        return this.getRuleContext(i, ColconstraintContext);
    }
    public constraintelem(): ConstraintelemContext | null {
        return this.getRuleContext(0, ConstraintelemContext);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_typedtableelement;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTypedtableelement) {
             listener.enterTypedtableelement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTypedtableelement) {
             listener.exitTypedtableelement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTypedtableelement) {
            return visitor.visitTypedtableelement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_defContext extends antlr.ParserRuleContext {
    public _colType?: TypenameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name_create(): Column_name_createContext {
        return this.getRuleContext(0, Column_name_createContext)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public KW_STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORAGE, 0);
    }
    public KW_COMPRESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMPRESSION, 0);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTIONS, 0);
    }
    public colconstraint(): ColconstraintContext[];
    public colconstraint(i: number): ColconstraintContext | null;
    public colconstraint(i?: number): ColconstraintContext[] | ColconstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColconstraintContext);
        }

        return this.getRuleContext(i, ColconstraintContext);
    }
    public KW_PLAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PLAIN, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTERNAL, 0);
    }
    public KW_EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENDED, 0);
    }
    public KW_MAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAIN, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_column_def;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumn_def) {
             listener.enterColumn_def(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumn_def) {
             listener.exitColumn_def(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumn_def) {
            return visitor.visitColumn_def(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColconstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colconstraintelem(): ColconstraintelemContext {
        return this.getRuleContext(0, ColconstraintelemContext)!;
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRABLE, 0);
    }
    public KW_INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INITIALLY, 0);
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRED, 0);
    }
    public KW_IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMEDIATE, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_colconstraint;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColconstraint) {
             listener.enterColconstraint(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColconstraint) {
             listener.exitColconstraint(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColconstraint) {
            return visitor.visitColconstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColconstraintelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNIQUE, 0);
    }
    public opt_definition(): Opt_definitionContext | null {
        return this.getRuleContext(0, Opt_definitionContext);
    }
    public optconstablespace(): OptconstablespaceContext | null {
        return this.getRuleContext(0, OptconstablespaceContext);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLS, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCLUDE, 0);
    }
    public index_params(): Index_paramsContext | null {
        return this.getRuleContext(0, Index_paramsContext);
    }
    public with_clause(): With_clauseContext | null {
        return this.getRuleContext(0, With_clauseContext);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIMARY, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_KEY, 0);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERIT, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GENERATED, 0);
    }
    public generated_when(): Generated_whenContext | null {
        return this.getRuleContext(0, Generated_whenContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public KW_IDENTITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IDENTITY, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORED, 0);
    }
    public seqoptelem(): SeqoptelemContext[];
    public seqoptelem(i: number): SeqoptelemContext | null;
    public seqoptelem(i?: number): SeqoptelemContext[] | SeqoptelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SeqoptelemContext);
        }

        return this.getRuleContext(i, SeqoptelemContext);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCES, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public key_match(): Key_matchContext | null {
        return this.getRuleContext(0, Key_matchContext);
    }
    public key_actions(): Key_actionsContext | null {
        return this.getRuleContext(0, Key_actionsContext);
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_colconstraintelem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColconstraintelem) {
             listener.enterColconstraintelem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColconstraintelem) {
             listener.exitColconstraintelem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColconstraintelem) {
            return visitor.visitColconstraintelem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Generated_whenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALWAYS, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_generated_when;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGenerated_when) {
             listener.enterGenerated_when(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGenerated_when) {
             listener.exitGenerated_when(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGenerated_when) {
            return visitor.visitGenerated_when(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablelikeoptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMENTS, 0);
    }
    public KW_CONSTRAINTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINTS, 0);
    }
    public KW_DEFAULTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULTS, 0);
    }
    public KW_IDENTITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IDENTITY, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GENERATED, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEXES, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORAGE, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tablelikeoption;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTablelikeoption) {
             listener.enterTablelikeoption(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTablelikeoption) {
             listener.exitTablelikeoption(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablelikeoption) {
            return visitor.visitTablelikeoption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public constraintattributeElem(): ConstraintattributeElemContext[];
    public constraintattributeElem(i: number): ConstraintattributeElemContext | null;
    public constraintattributeElem(i?: number): ConstraintattributeElemContext[] | ConstraintattributeElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstraintattributeElemContext);
        }

        return this.getRuleContext(i, ConstraintattributeElemContext);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNIQUE, 0);
    }
    public opt_column_list(): Opt_column_listContext[];
    public opt_column_list(i: number): Opt_column_listContext | null;
    public opt_column_list(i?: number): Opt_column_listContext[] | Opt_column_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_column_listContext);
        }

        return this.getRuleContext(i, Opt_column_listContext);
    }
    public existingindex(): ExistingindexContext | null {
        return this.getRuleContext(0, ExistingindexContext);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIMARY, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_KEY, 0);
    }
    public opt_c_include(): Opt_c_includeContext | null {
        return this.getRuleContext(0, Opt_c_includeContext);
    }
    public opt_definition(): Opt_definitionContext | null {
        return this.getRuleContext(0, Opt_definitionContext);
    }
    public optconstablespace(): OptconstablespaceContext | null {
        return this.getRuleContext(0, OptconstablespaceContext);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUDE, 0);
    }
    public exclusionconstraintelem(): ExclusionconstraintelemContext[];
    public exclusionconstraintelem(i: number): ExclusionconstraintelemContext | null;
    public exclusionconstraintelem(i?: number): ExclusionconstraintelemContext[] | ExclusionconstraintelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExclusionconstraintelemContext);
        }

        return this.getRuleContext(i, ExclusionconstraintelemContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHERE, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCES, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public key_match(): Key_matchContext | null {
        return this.getRuleContext(0, Key_matchContext);
    }
    public key_actions(): Key_actionsContext | null {
        return this.getRuleContext(0, Key_actionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_constraintelem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConstraintelem) {
             listener.enterConstraintelem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConstraintelem) {
             listener.exitConstraintelem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintelem) {
            return visitor.visitConstraintelem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public column_list(): Column_listContext {
        return this.getRuleContext(0, Column_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_column_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_column_list) {
             listener.enterOpt_column_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_column_list) {
             listener.exitOpt_column_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_column_list) {
            return visitor.visitOpt_column_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_column_list_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public column_name_create(): Column_name_createContext[];
    public column_name_create(i: number): Column_name_createContext | null;
    public column_name_create(i?: number): Column_name_createContext[] | Column_name_createContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_name_createContext);
        }

        return this.getRuleContext(i, Column_name_createContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_column_list_create;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_column_list_create) {
             listener.enterOpt_column_list_create(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_column_list_create) {
             listener.exitOpt_column_list_create(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_column_list_create) {
            return visitor.visitOpt_column_list_create(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext[];
    public column_name(i: number): Column_nameContext | null;
    public column_name(i?: number): Column_nameContext[] | Column_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_nameContext);
        }

        return this.getRuleContext(i, Column_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_column_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumn_list) {
             listener.enterColumn_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumn_list) {
             listener.exitColumn_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumn_list) {
            return visitor.visitColumn_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_c_includeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INCLUDE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INCLUDE, 0)!;
    }
    public opt_column_list(): Opt_column_listContext {
        return this.getRuleContext(0, Opt_column_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_c_include;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_c_include) {
             listener.enterOpt_c_include(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_c_include) {
             listener.exitOpt_c_include(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_c_include) {
            return visitor.visitOpt_c_include(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Key_matchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MATCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MATCH, 0)!;
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FULL, 0);
    }
    public KW_PARTIAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTIAL, 0);
    }
    public KW_SIMPLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SIMPLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_key_match;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterKey_match) {
             listener.enterKey_match(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitKey_match) {
             listener.exitKey_match(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKey_match) {
            return visitor.visitKey_match(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExclusionconstraintelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public index_elem(): Index_elemContext {
        return this.getRuleContext(0, Index_elemContext)!;
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_exclusionconstraintelem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExclusionconstraintelem) {
             listener.enterExclusionconstraintelem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExclusionconstraintelem) {
             listener.exitExclusionconstraintelem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExclusionconstraintelem) {
            return visitor.visitExclusionconstraintelem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Key_actionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public key_update(): Key_updateContext | null {
        return this.getRuleContext(0, Key_updateContext);
    }
    public key_delete(): Key_deleteContext | null {
        return this.getRuleContext(0, Key_deleteContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_key_actions;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterKey_actions) {
             listener.enterKey_actions(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitKey_actions) {
             listener.exitKey_actions(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKey_actions) {
            return visitor.visitKey_actions(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Key_updateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0)!;
    }
    public key_action(): Key_actionContext {
        return this.getRuleContext(0, Key_actionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_key_update;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterKey_update) {
             listener.enterKey_update(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitKey_update) {
             listener.exitKey_update(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKey_update) {
            return visitor.visitKey_update(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Key_deleteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public KW_DELETE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0)!;
    }
    public key_action(): Key_actionContext {
        return this.getRuleContext(0, Key_actionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_key_delete;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterKey_delete) {
             listener.enterKey_delete(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitKey_delete) {
             listener.exitKey_delete(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKey_delete) {
            return visitor.visitKey_delete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Key_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_ACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACTION, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public column_list(): Column_listContext | null {
        return this.getRuleContext(0, Column_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_key_action;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterKey_action) {
             listener.enterKey_action(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitKey_action) {
             listener.exitKey_action(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitKey_action) {
            return visitor.visitKey_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptinheritContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INHERITS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INHERITS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public qualified_name_list(): Qualified_name_listContext {
        return this.getRuleContext(0, Qualified_name_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optinherit;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptinherit) {
             listener.enterOptinherit(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptinherit) {
             listener.exitOptinherit(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptinherit) {
            return visitor.visitOptinherit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionspecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public part_elem(): Part_elemContext[];
    public part_elem(i: number): Part_elemContext | null;
    public part_elem(i?: number): Part_elemContext[] | Part_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Part_elemContext);
        }

        return this.getRuleContext(i, Part_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_partitionspec;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPartitionspec) {
             listener.enterPartitionspec(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPartitionspec) {
             listener.exitPartitionspec(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionspec) {
            return visitor.visitPartitionspec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Part_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public func_expr_windowless(): Func_expr_windowlessContext | null {
        return this.getRuleContext(0, Func_expr_windowlessContext);
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_part_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPart_elem) {
             listener.enterPart_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPart_elem) {
             listener.exitPart_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPart_elem) {
            return visitor.visitPart_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_access_method_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_table_access_method_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTable_access_method_clause) {
             listener.enterTable_access_method_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTable_access_method_clause) {
             listener.exitTable_access_method_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTable_access_method_clause) {
            return visitor.visitTable_access_method_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptwithContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public reloptions(): ReloptionsContext | null {
        return this.getRuleContext(0, ReloptionsContext);
    }
    public KW_OIDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OIDS, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optwith;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptwith) {
             listener.enterOptwith(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptwith) {
             listener.exitOptwith(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptwith) {
            return visitor.visitOptwith(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OncommitoptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public KW_COMMIT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_COMMIT, 0)!;
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRESERVE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_oncommitoption;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOncommitoption) {
             listener.enterOncommitoption(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOncommitoption) {
             listener.exitOncommitoption(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOncommitoption) {
            return visitor.visitOncommitoption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OpttablespaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLESPACE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0)!;
    }
    public tablespace_name(): Tablespace_nameContext {
        return this.getRuleContext(0, Tablespace_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opttablespace;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpttablespace) {
             listener.enterOpttablespace(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpttablespace) {
             listener.exitOpttablespace(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpttablespace) {
            return visitor.visitOpttablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptconstablespaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0)!;
    }
    public opttablespace(): OpttablespaceContext {
        return this.getRuleContext(0, OpttablespaceContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_optconstablespace;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOptconstablespace) {
             listener.enterOptconstablespace(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOptconstablespace) {
             listener.exitOptconstablespace(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOptconstablespace) {
            return visitor.visitOptconstablespace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExistingindexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_existingindex;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExistingindex) {
             listener.enterExistingindex(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExistingindex) {
             listener.exitExistingindex(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExistingindex) {
            return visitor.visitExistingindex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatestatsstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public from_clause(): From_clauseContext {
        return this.getRuleContext(0, From_clauseContext)!;
    }
    public column_expr(): Column_exprContext[];
    public column_expr(i: number): Column_exprContext | null;
    public column_expr(i?: number): Column_exprContext[] | Column_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_exprContext);
        }

        return this.getRuleContext(i, Column_exprContext);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createstatsstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatestatsstmt) {
             listener.enterCreatestatsstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatestatsstmt) {
             listener.exitCreatestatsstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatestatsstmt) {
            return visitor.visitCreatestatsstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterstatsstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_STATISTICS(): antlr.TerminalNode[];
    public KW_STATISTICS(i: number): antlr.TerminalNode | null;
    public KW_STATISTICS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_STATISTICS);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_STATISTICS, i);
    	}
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public signediconst(): SignediconstContext {
        return this.getRuleContext(0, SignediconstContext)!;
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterstatsstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterstatsstmt) {
             listener.enterAlterstatsstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterstatsstmt) {
             listener.exitAlterstatsstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterstatsstmt) {
            return visitor.visitAlterstatsstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateasstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createasstmt;
    }
    public override copyFrom(ctx: CreateasstmtContext): void {
        super.copyFrom(ctx);
    }
}
export class QueryCreateTableContext extends CreateasstmtContext {
    public constructor(ctx: CreateasstmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0)!;
    }
    public create_as_target(): Create_as_targetContext {
        return this.getRuleContext(0, Create_as_targetContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public selectstmt(): SelectstmtContext {
        return this.getRuleContext(0, SelectstmtContext)!;
    }
    public opttemp(): OpttempContext | null {
        return this.getRuleContext(0, OpttempContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public opt_with_data(): Opt_with_dataContext | null {
        return this.getRuleContext(0, Opt_with_dataContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQueryCreateTable) {
             listener.enterQueryCreateTable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQueryCreateTable) {
             listener.exitQueryCreateTable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQueryCreateTable) {
            return visitor.visitQueryCreateTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_as_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_name_create(): Table_name_createContext {
        return this.getRuleContext(0, Table_name_createContext)!;
    }
    public opt_column_list_create(): Opt_column_list_createContext | null {
        return this.getRuleContext(0, Opt_column_list_createContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public optwith(): OptwithContext | null {
        return this.getRuleContext(0, OptwithContext);
    }
    public oncommitoption(): OncommitoptionContext | null {
        return this.getRuleContext(0, OncommitoptionContext);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_create_as_target;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreate_as_target) {
             listener.enterCreate_as_target(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreate_as_target) {
             listener.exitCreate_as_target(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreate_as_target) {
            return visitor.visitCreate_as_target(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_with_dataContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_with_data;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_with_data) {
             listener.enterOpt_with_data(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_with_data) {
             listener.exitOpt_with_data(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_with_data) {
            return visitor.visitOpt_with_data(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatematviewstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_creatematviewstmt;
    }
    public override copyFrom(ctx: CreatematviewstmtContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateMaterializedViewContext extends CreatematviewstmtContext {
    public constructor(ctx: CreatematviewstmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0)!;
    }
    public view_name_create(): View_name_createContext {
        return this.getRuleContext(0, View_name_createContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public selectstmt(): SelectstmtContext {
        return this.getRuleContext(0, SelectstmtContext)!;
    }
    public KW_UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLOGGED, 0);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public opt_column_list_create(): Opt_column_list_createContext | null {
        return this.getRuleContext(0, Opt_column_list_createContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public opt_reloptions(): Opt_reloptionsContext | null {
        return this.getRuleContext(0, Opt_reloptionsContext);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public opt_with_data(): Opt_with_dataContext | null {
        return this.getRuleContext(0, Opt_with_dataContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateMaterializedView) {
             listener.enterCreateMaterializedView(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateMaterializedView) {
             listener.exitCreateMaterializedView(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedView) {
            return visitor.visitCreateMaterializedView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RefreshmatviewstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REFRESH, 0)!;
    }
    public KW_MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0)!;
    }
    public KW_VIEW(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0)!;
    }
    public view_name(): View_nameContext {
        return this.getRuleContext(0, View_nameContext)!;
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public opt_with_data(): Opt_with_dataContext | null {
        return this.getRuleContext(0, Opt_with_dataContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_refreshmatviewstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRefreshmatviewstmt) {
             listener.enterRefreshmatviewstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRefreshmatviewstmt) {
             listener.exitRefreshmatviewstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRefreshmatviewstmt) {
            return visitor.visitRefreshmatviewstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateseqstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_SEQUENCE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public opttemp(): OpttempContext | null {
        return this.getRuleContext(0, OpttempContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public seqoptelem(): SeqoptelemContext[];
    public seqoptelem(i: number): SeqoptelemContext | null;
    public seqoptelem(i?: number): SeqoptelemContext[] | SeqoptelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SeqoptelemContext);
        }

        return this.getRuleContext(i, SeqoptelemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createseqstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateseqstmt) {
             listener.enterCreateseqstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateseqstmt) {
             listener.exitCreateseqstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateseqstmt) {
            return visitor.visitCreateseqstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterseqstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_SEQUENCE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public seqoptelem(): SeqoptelemContext[];
    public seqoptelem(i: number): SeqoptelemContext | null;
    public seqoptelem(i?: number): SeqoptelemContext[] | SeqoptelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SeqoptelemContext);
        }

        return this.getRuleContext(i, SeqoptelemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterseqstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterseqstmt) {
             listener.enterAlterseqstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterseqstmt) {
             listener.exitAlterseqstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterseqstmt) {
            return visitor.visitAlterseqstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SeqoptelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public simpletypename(): SimpletypenameContext | null {
        return this.getRuleContext(0, SimpletypenameContext);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CACHE, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public KW_INCREMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCREMENT, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public KW_MAXVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAXVALUE, 0);
    }
    public KW_MINVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINVALUE, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_CYCLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CYCLE, 0);
    }
    public KW_OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNED, 0);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NAME, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_START, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_RESTART(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTART, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_seqoptelem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSeqoptelem) {
             listener.enterSeqoptelem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSeqoptelem) {
             listener.exitSeqoptelem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSeqoptelem) {
            return visitor.visitSeqoptelem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumericonlyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Numeric(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Numeric, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public signediconst(): SignediconstContext | null {
        return this.getRuleContext(0, SignediconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_numericonly;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNumericonly) {
             listener.enterNumericonly(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNumericonly) {
             listener.exitNumericonly(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNumericonly) {
            return visitor.visitNumericonly(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateplangstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_LANGUAGE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public opt_or_replace(): Opt_or_replaceContext | null {
        return this.getRuleContext(0, Opt_or_replaceContext);
    }
    public KW_TRUSTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUSTED, 0);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public KW_HANDLER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HANDLER, 0);
    }
    public any_name(): Any_nameContext[];
    public any_name(i: number): Any_nameContext | null;
    public any_name(i?: number): Any_nameContext[] | Any_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Any_nameContext);
        }

        return this.getRuleContext(i, Any_nameContext);
    }
    public KW_INLINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INLINE, 0);
    }
    public KW_VALIDATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATOR, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createplangstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateplangstmt) {
             listener.enterCreateplangstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateplangstmt) {
             listener.exitCreateplangstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateplangstmt) {
            return visitor.visitCreateplangstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatetablespacestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public opttablespace(): OpttablespaceContext {
        return this.getRuleContext(0, OpttablespaceContext)!;
    }
    public KW_LOCATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LOCATION, 0)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public opt_reloptions(): Opt_reloptionsContext | null {
        return this.getRuleContext(0, Opt_reloptionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createtablespacestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatetablespacestmt) {
             listener.enterCreatetablespacestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatetablespacestmt) {
             listener.exitCreatetablespacestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatetablespacestmt) {
            return visitor.visitCreatetablespacestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateextensionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode[];
    public KW_SCHEMA(i: number): antlr.TerminalNode | null;
    public KW_SCHEMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_SCHEMA);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_SCHEMA, i);
    	}
    }
    public schema_name(): Schema_nameContext[];
    public schema_name(i: number): Schema_nameContext | null;
    public schema_name(i?: number): Schema_nameContext[] | Schema_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Schema_nameContext);
        }

        return this.getRuleContext(i, Schema_nameContext);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext[];
    public nonreservedword_or_sconst(i: number): Nonreservedword_or_sconstContext | null;
    public nonreservedword_or_sconst(i?: number): Nonreservedword_or_sconstContext[] | Nonreservedword_or_sconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Nonreservedword_or_sconstContext);
        }

        return this.getRuleContext(i, Nonreservedword_or_sconstContext);
    }
    public KW_CASCADE(): antlr.TerminalNode[];
    public KW_CASCADE(i: number): antlr.TerminalNode | null;
    public KW_CASCADE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_CASCADE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_CASCADE, i);
    	}
    }
    public KW_VERSION(): antlr.TerminalNode[];
    public KW_VERSION(i: number): antlr.TerminalNode | null;
    public KW_VERSION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_VERSION);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_VERSION, i);
    	}
    }
    public KW_FROM(): antlr.TerminalNode[];
    public KW_FROM(i: number): antlr.TerminalNode | null;
    public KW_FROM(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FROM);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FROM, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createextensionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateextensionstmt) {
             listener.enterCreateextensionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateextensionstmt) {
             listener.exitCreateextensionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateextensionstmt) {
            return visitor.visitCreateextensionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterextensionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0)!;
    }
    public KW_TO(): antlr.TerminalNode[];
    public KW_TO(i: number): antlr.TerminalNode | null;
    public KW_TO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_TO);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_TO, i);
    	}
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext[];
    public nonreservedword_or_sconst(i: number): Nonreservedword_or_sconstContext | null;
    public nonreservedword_or_sconst(i?: number): Nonreservedword_or_sconstContext[] | Nonreservedword_or_sconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Nonreservedword_or_sconstContext);
        }

        return this.getRuleContext(i, Nonreservedword_or_sconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterextensionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterextensionstmt) {
             listener.enterAlterextensionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterextensionstmt) {
             listener.exitAlterextensionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterextensionstmt) {
            return visitor.visitAlterextensionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterextensioncontentsstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public operator_with_argtypes(): Operator_with_argtypesContext | null {
        return this.getRuleContext(0, Operator_with_argtypesContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CAST, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public object_type_name(): Object_type_nameContext | null {
        return this.getRuleContext(0, Object_type_nameContext);
    }
    public object_type_any_name(): Object_type_any_nameContext | null {
        return this.getRuleContext(0, Object_type_any_nameContext);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterextensioncontentsstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterextensioncontentsstmt) {
             listener.enterAlterextensioncontentsstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterextensioncontentsstmt) {
             listener.exitAlterextensioncontentsstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterextensioncontentsstmt) {
            return visitor.visitAlterextensioncontentsstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatefdwstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATA, 0)!;
    }
    public KW_WRAPPER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public fdw_option(): Fdw_optionContext[];
    public fdw_option(i: number): Fdw_optionContext | null;
    public fdw_option(i?: number): Fdw_optionContext[] | Fdw_optionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Fdw_optionContext);
        }

        return this.getRuleContext(i, Fdw_optionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createfdwstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatefdwstmt) {
             listener.enterCreatefdwstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatefdwstmt) {
             listener.exitCreatefdwstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatefdwstmt) {
            return visitor.visitCreatefdwstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Fdw_optionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_HANDLER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HANDLER, 0);
    }
    public KW_VALIDATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATOR, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fdw_option;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFdw_option) {
             listener.enterFdw_option(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFdw_option) {
             listener.exitFdw_option(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFdw_option) {
            return visitor.visitFdw_option(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterfdwstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATA, 0)!;
    }
    public KW_WRAPPER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public alter_generic_options(): Alter_generic_optionsContext | null {
        return this.getRuleContext(0, Alter_generic_optionsContext);
    }
    public fdw_option(): Fdw_optionContext[];
    public fdw_option(i: number): Fdw_optionContext | null;
    public fdw_option(i?: number): Fdw_optionContext[] | Fdw_optionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Fdw_optionContext);
        }

        return this.getRuleContext(i, Fdw_optionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterfdwstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterfdwstmt) {
             listener.enterAlterfdwstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterfdwstmt) {
             listener.exitAlterfdwstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterfdwstmt) {
            return visitor.visitAlterfdwstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Create_generic_optionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OPTIONS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPTIONS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public generic_option_elem(): Generic_option_elemContext[];
    public generic_option_elem(i: number): Generic_option_elemContext | null;
    public generic_option_elem(i?: number): Generic_option_elemContext[] | Generic_option_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Generic_option_elemContext);
        }

        return this.getRuleContext(i, Generic_option_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_create_generic_options;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreate_generic_options) {
             listener.enterCreate_generic_options(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreate_generic_options) {
             listener.exitCreate_generic_options(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreate_generic_options) {
            return visitor.visitCreate_generic_options(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_generic_optionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OPTIONS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPTIONS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public alter_generic_option_elem(): Alter_generic_option_elemContext[];
    public alter_generic_option_elem(i: number): Alter_generic_option_elemContext | null;
    public alter_generic_option_elem(i?: number): Alter_generic_option_elemContext[] | Alter_generic_option_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_generic_option_elemContext);
        }

        return this.getRuleContext(i, Alter_generic_option_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_generic_options;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_generic_options) {
             listener.enterAlter_generic_options(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_generic_options) {
             listener.exitAlter_generic_options(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_generic_options) {
            return visitor.visitAlter_generic_options(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alter_generic_option_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public generic_option_elem(): Generic_option_elemContext {
        return this.getRuleContext(0, Generic_option_elemContext)!;
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alter_generic_option_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlter_generic_option_elem) {
             listener.enterAlter_generic_option_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlter_generic_option_elem) {
             listener.exitAlter_generic_option_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlter_generic_option_elem) {
            return visitor.visitAlter_generic_option_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Generic_option_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collabel(): CollabelContext {
        return this.getRuleContext(0, CollabelContext)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_generic_option_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGeneric_option_elem) {
             listener.enterGeneric_option_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGeneric_option_elem) {
             listener.exitGeneric_option_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGeneric_option_elem) {
            return visitor.visitGeneric_option_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateforeignserverstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_DATA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATA, 0)!;
    }
    public KW_WRAPPER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0)!;
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public foreign_server_version(): Foreign_server_versionContext | null {
        return this.getRuleContext(0, Foreign_server_versionContext);
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createforeignserverstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateforeignserverstmt) {
             listener.enterCreateforeignserverstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateforeignserverstmt) {
             listener.exitCreateforeignserverstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateforeignserverstmt) {
            return visitor.visitCreateforeignserverstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Foreign_server_versionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VERSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VERSION, 0)!;
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_foreign_server_version;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterForeign_server_version) {
             listener.enterForeign_server_version(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitForeign_server_version) {
             listener.exitForeign_server_version(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitForeign_server_version) {
            return visitor.visitForeign_server_version(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterforeignserverstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public alter_generic_options(): Alter_generic_optionsContext | null {
        return this.getRuleContext(0, Alter_generic_optionsContext);
    }
    public foreign_server_version(): Foreign_server_versionContext | null {
        return this.getRuleContext(0, Foreign_server_versionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterforeignserverstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterforeignserverstmt) {
             listener.enterAlterforeignserverstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterforeignserverstmt) {
             listener.exitAlterforeignserverstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterforeignserverstmt) {
            return visitor.visitAlterforeignserverstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateforeigntablestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createforeigntablestmt;
    }
    public override copyFrom(ctx: CreateforeigntablestmtContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateForeignTableContext extends CreateforeigntablestmtContext {
    public constructor(ctx: CreateforeigntablestmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0)!;
    }
    public table_name_create(): Table_name_createContext {
        return this.getRuleContext(0, Table_name_createContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public tableelementlist(): TableelementlistContext | null {
        return this.getRuleContext(0, TableelementlistContext);
    }
    public optinherit(): OptinheritContext | null {
        return this.getRuleContext(0, OptinheritContext);
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateForeignTable) {
             listener.enterCreateForeignTable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateForeignTable) {
             listener.exitCreateForeignTable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateForeignTable) {
            return visitor.visitCreateForeignTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CreatePartitionForeignTableContext extends CreateforeigntablestmtContext {
    public constructor(ctx: CreateforeigntablestmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0)!;
    }
    public table_name_create(): Table_name_createContext {
        return this.getRuleContext(0, Table_name_createContext)!;
    }
    public KW_PARTITION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0)!;
    }
    public KW_OF(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OF, 0)!;
    }
    public table_name(): Table_nameContext {
        return this.getRuleContext(0, Table_nameContext)!;
    }
    public partitionboundspec(): PartitionboundspecContext {
        return this.getRuleContext(0, PartitionboundspecContext)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public opttypedtableelementlist(): OpttypedtableelementlistContext | null {
        return this.getRuleContext(0, OpttypedtableelementlistContext);
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatePartitionForeignTable) {
             listener.enterCreatePartitionForeignTable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatePartitionForeignTable) {
             listener.exitCreatePartitionForeignTable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatePartitionForeignTable) {
            return visitor.visitCreatePartitionForeignTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ImportforeignschemastmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IMPORT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IMPORT, 0)!;
    }
    public KW_FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0)!;
    }
    public KW_SCHEMA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0)!;
    }
    public schema_name(): Schema_nameContext {
        return this.getRuleContext(0, Schema_nameContext)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public relation_expr_list(): Relation_expr_listContext | null {
        return this.getRuleContext(0, Relation_expr_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIMIT, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCEPT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_importforeignschemastmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterImportforeignschemastmt) {
             listener.enterImportforeignschemastmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitImportforeignschemastmt) {
             listener.exitImportforeignschemastmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitImportforeignschemastmt) {
            return visitor.visitImportforeignschemastmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateusermappingstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_USER(): antlr.TerminalNode[];
    public KW_USER(i: number): antlr.TerminalNode | null;
    public KW_USER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_USER);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_USER, i);
    	}
    }
    public KW_MAPPING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MAPPING, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createusermappingstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateusermappingstmt) {
             listener.enterCreateusermappingstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateusermappingstmt) {
             listener.exitCreateusermappingstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateusermappingstmt) {
            return visitor.visitCreateusermappingstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterusermappingstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_USER(): antlr.TerminalNode[];
    public KW_USER(i: number): antlr.TerminalNode | null;
    public KW_USER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_USER);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_USER, i);
    	}
    }
    public KW_MAPPING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MAPPING, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public KW_SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public alter_generic_options(): Alter_generic_optionsContext {
        return this.getRuleContext(0, Alter_generic_optionsContext)!;
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterusermappingstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterusermappingstmt) {
             listener.enterAlterusermappingstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterusermappingstmt) {
             listener.exitAlterusermappingstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterusermappingstmt) {
            return visitor.visitAlterusermappingstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatepolicystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_POLICY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public role_list(): Role_listContext | null {
        return this.getRuleContext(0, Role_listContext);
    }
    public rowsecurityoptionalexpr(): RowsecurityoptionalexprContext | null {
        return this.getRuleContext(0, RowsecurityoptionalexprContext);
    }
    public rowsecurityoptionalwithcheck(): RowsecurityoptionalwithcheckContext | null {
        return this.getRuleContext(0, RowsecurityoptionalwithcheckContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_PERMISSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PERMISSIVE, 0);
    }
    public KW_RESTRICTIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICTIVE, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createpolicystmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatepolicystmt) {
             listener.enterCreatepolicystmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatepolicystmt) {
             listener.exitCreatepolicystmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatepolicystmt) {
            return visitor.visitCreatepolicystmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterpolicystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_POLICY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public role_list(): Role_listContext | null {
        return this.getRuleContext(0, Role_listContext);
    }
    public rowsecurityoptionalexpr(): RowsecurityoptionalexprContext | null {
        return this.getRuleContext(0, RowsecurityoptionalexprContext);
    }
    public rowsecurityoptionalwithcheck(): RowsecurityoptionalwithcheckContext | null {
        return this.getRuleContext(0, RowsecurityoptionalwithcheckContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterpolicystmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterpolicystmt) {
             listener.enterAlterpolicystmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterpolicystmt) {
             listener.exitAlterpolicystmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterpolicystmt) {
            return visitor.visitAlterpolicystmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterprocedurestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_PROCEDURE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0)!;
    }
    public procedure_name(): Procedure_nameContext {
        return this.getRuleContext(0, Procedure_nameContext)!;
    }
    public procedure_action(): Procedure_actionContext[];
    public procedure_action(i: number): Procedure_actionContext | null;
    public procedure_action(i?: number): Procedure_actionContext[] | Procedure_actionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Procedure_actionContext);
        }

        return this.getRuleContext(i, Procedure_actionContext);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public procedure_name_create(): Procedure_name_createContext | null {
        return this.getRuleContext(0, Procedure_name_createContext);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name_create(): Schema_name_createContext | null {
        return this.getRuleContext(0, Schema_name_createContext);
    }
    public KW_DEPENDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEPENDS, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public func_args(): Func_argsContext | null {
        return this.getRuleContext(0, Func_argsContext);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterprocedurestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterprocedurestmt) {
             listener.enterAlterprocedurestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterprocedurestmt) {
             listener.exitAlterprocedurestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterprocedurestmt) {
            return visitor.visitAlterprocedurestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Procedure_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INVOKER, 0);
    }
    public KW_DEFINER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFINER, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTERNAL, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedure_action;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedure_action) {
             listener.enterProcedure_action(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedure_action) {
             listener.exitProcedure_action(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedure_action) {
            return visitor.visitProcedure_action(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowsecurityoptionalexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rowsecurityoptionalexpr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRowsecurityoptionalexpr) {
             listener.enterRowsecurityoptionalexpr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRowsecurityoptionalexpr) {
             listener.exitRowsecurityoptionalexpr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowsecurityoptionalexpr) {
            return visitor.visitRowsecurityoptionalexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowsecurityoptionalwithcheckContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public KW_CHECK(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rowsecurityoptionalwithcheck;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRowsecurityoptionalwithcheck) {
             listener.enterRowsecurityoptionalwithcheck(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRowsecurityoptionalwithcheck) {
             listener.exitRowsecurityoptionalwithcheck(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowsecurityoptionalwithcheck) {
            return visitor.visitRowsecurityoptionalwithcheck(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateamstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_ACCESS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ACCESS, 0)!;
    }
    public KW_METHOD(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_METHOD, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0)!;
    }
    public KW_HANDLER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_HANDLER, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createamstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateamstmt) {
             listener.enterCreateamstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateamstmt) {
             listener.exitCreateamstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateamstmt) {
            return visitor.visitCreateamstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatetrigstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_TRIGGER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public triggeractiontime(): TriggeractiontimeContext {
        return this.getRuleContext(0, TriggeractiontimeContext)!;
    }
    public triggerevents(): TriggereventsContext {
        return this.getRuleContext(0, TriggereventsContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public table_name(): Table_nameContext {
        return this.getRuleContext(0, Table_nameContext)!;
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0)!;
    }
    public function_or_procedure(): Function_or_procedureContext {
        return this.getRuleContext(0, Function_or_procedureContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public triggerfuncargs(): TriggerfuncargsContext {
        return this.getRuleContext(0, TriggerfuncargsContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public opt_or_replace(): Opt_or_replaceContext | null {
        return this.getRuleContext(0, Opt_or_replaceContext);
    }
    public KW_REFERENCING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCING, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public triggerwhen(): TriggerwhenContext | null {
        return this.getRuleContext(0, TriggerwhenContext);
    }
    public KW_ROW(): antlr.TerminalNode[];
    public KW_ROW(i: number): antlr.TerminalNode | null;
    public KW_ROW(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ROW);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ROW, i);
    	}
    }
    public KW_STATEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATEMENT, 0);
    }
    public KW_EACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EACH, 0);
    }
    public KW_NEW(): antlr.TerminalNode[];
    public KW_NEW(i: number): antlr.TerminalNode | null;
    public KW_NEW(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NEW);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NEW, i);
    	}
    }
    public KW_OLD(): antlr.TerminalNode[];
    public KW_OLD(i: number): antlr.TerminalNode | null;
    public KW_OLD(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_OLD);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_OLD, i);
    	}
    }
    public KW_TABLE(): antlr.TerminalNode[];
    public KW_TABLE(i: number): antlr.TerminalNode | null;
    public KW_TABLE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_TABLE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_TABLE, i);
    	}
    }
    public KW_AS(): antlr.TerminalNode[];
    public KW_AS(i: number): antlr.TerminalNode | null;
    public KW_AS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_AS);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_AS, i);
    	}
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public constraintattributeElem(): ConstraintattributeElemContext[];
    public constraintattributeElem(i: number): ConstraintattributeElemContext | null;
    public constraintattributeElem(i?: number): ConstraintattributeElemContext[] | ConstraintattributeElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstraintattributeElemContext);
        }

        return this.getRuleContext(i, ConstraintattributeElemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createtrigstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatetrigstmt) {
             listener.enterCreatetrigstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatetrigstmt) {
             listener.exitCreatetrigstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatetrigstmt) {
            return visitor.visitCreatetrigstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggeractiontimeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BEFORE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BEFORE, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AFTER, 0);
    }
    public KW_INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSTEAD, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggeractiontime;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggeractiontime) {
             listener.enterTriggeractiontime(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggeractiontime) {
             listener.exitTriggeractiontime(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggeractiontime) {
            return visitor.visitTriggeractiontime(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggereventsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public triggeroneevent(): TriggeroneeventContext[];
    public triggeroneevent(i: number): TriggeroneeventContext | null;
    public triggeroneevent(i?: number): TriggeroneeventContext[] | TriggeroneeventContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TriggeroneeventContext);
        }

        return this.getRuleContext(i, TriggeroneeventContext);
    }
    public KW_OR(): antlr.TerminalNode[];
    public KW_OR(i: number): antlr.TerminalNode | null;
    public KW_OR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_OR);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_OR, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerevents;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerevents) {
             listener.enterTriggerevents(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerevents) {
             listener.exitTriggerevents(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerevents) {
            return visitor.visitTriggerevents(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggeroneeventContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public column_list(): Column_listContext | null {
        return this.getRuleContext(0, Column_listContext);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUNCATE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggeroneevent;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggeroneevent) {
             listener.enterTriggeroneevent(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggeroneevent) {
             listener.exitTriggeroneevent(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggeroneevent) {
            return visitor.visitTriggeroneevent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerwhenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerwhen;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerwhen) {
             listener.enterTriggerwhen(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerwhen) {
             listener.exitTriggerwhen(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerwhen) {
            return visitor.visitTriggerwhen(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Function_or_procedureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_name(): Function_nameContext | null {
        return this.getRuleContext(0, Function_nameContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_name(): Procedure_nameContext | null {
        return this.getRuleContext(0, Procedure_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_function_or_procedure;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunction_or_procedure) {
             listener.enterFunction_or_procedure(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunction_or_procedure) {
             listener.exitFunction_or_procedure(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunction_or_procedure) {
            return visitor.visitFunction_or_procedure(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerfuncargsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public triggerfuncarg(): TriggerfuncargContext[];
    public triggerfuncarg(i: number): TriggerfuncargContext | null;
    public triggerfuncarg(i?: number): TriggerfuncargContext[] | TriggerfuncargContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TriggerfuncargContext);
        }

        return this.getRuleContext(i, TriggerfuncargContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerfuncargs;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerfuncargs) {
             listener.enterTriggerfuncargs(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerfuncargs) {
             listener.exitTriggerfuncargs(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerfuncargs) {
            return visitor.visitTriggerfuncargs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TriggerfuncargContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public Numeric(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Numeric, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public collabel(): CollabelContext | null {
        return this.getRuleContext(0, CollabelContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_triggerfuncarg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTriggerfuncarg) {
             listener.enterTriggerfuncarg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTriggerfuncarg) {
             listener.exitTriggerfuncarg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTriggerfuncarg) {
            return visitor.visitTriggerfuncarg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstraintattributeElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRABLE, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INITIALLY, 0);
    }
    public KW_IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMEDIATE, 0);
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRED, 0);
    }
    public KW_VALID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALID, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERIT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_constraintattributeElem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConstraintattributeElem) {
             listener.enterConstraintattributeElem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConstraintattributeElem) {
             listener.exitConstraintattributeElem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstraintattributeElem) {
            return visitor.visitConstraintattributeElem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateeventtrigstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_EVENT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0)!;
    }
    public KW_TRIGGER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public collabel(): CollabelContext {
        return this.getRuleContext(0, CollabelContext)!;
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0)!;
    }
    public function_or_procedure(): Function_or_procedureContext {
        return this.getRuleContext(0, Function_or_procedureContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0);
    }
    public event_trigger_when_item(): Event_trigger_when_itemContext[];
    public event_trigger_when_item(i: number): Event_trigger_when_itemContext | null;
    public event_trigger_when_item(i?: number): Event_trigger_when_itemContext[] | Event_trigger_when_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Event_trigger_when_itemContext);
        }

        return this.getRuleContext(i, Event_trigger_when_itemContext);
    }
    public KW_AND(): antlr.TerminalNode[];
    public KW_AND(i: number): antlr.TerminalNode | null;
    public KW_AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_AND);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_AND, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createeventtrigstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateeventtrigstmt) {
             listener.enterCreateeventtrigstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateeventtrigstmt) {
             listener.exitCreateeventtrigstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateeventtrigstmt) {
            return visitor.visitCreateeventtrigstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Event_trigger_when_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public notify_payload(): Notify_payloadContext[];
    public notify_payload(i: number): Notify_payloadContext | null;
    public notify_payload(i?: number): Notify_payloadContext[] | Notify_payloadContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Notify_payloadContext);
        }

        return this.getRuleContext(i, Notify_payloadContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_event_trigger_when_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterEvent_trigger_when_item) {
             listener.enterEvent_trigger_when_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitEvent_trigger_when_item) {
             listener.exitEvent_trigger_when_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitEvent_trigger_when_item) {
            return visitor.visitEvent_trigger_when_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltereventtrigstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_EVENT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0)!;
    }
    public KW_TRIGGER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENABLE, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISABLE, 0);
    }
    public KW_REPLICA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLICA, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALWAYS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altereventtrigstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltereventtrigstmt) {
             listener.enterAltereventtrigstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltereventtrigstmt) {
             listener.exitAltereventtrigstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltereventtrigstmt) {
            return visitor.visitAltereventtrigstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateassertionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_ASSERTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ASSERTION, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public KW_CHECK(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public constraintattributeElem(): ConstraintattributeElemContext[];
    public constraintattributeElem(i: number): ConstraintattributeElemContext | null;
    public constraintattributeElem(i?: number): ConstraintattributeElemContext[] | ConstraintattributeElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstraintattributeElemContext);
        }

        return this.getRuleContext(i, ConstraintattributeElemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createassertionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateassertionstmt) {
             listener.enterCreateassertionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateassertionstmt) {
             listener.exitCreateassertionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateassertionstmt) {
            return visitor.visitCreateassertionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefinestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public function_name(): Function_nameContext | null {
        return this.getRuleContext(0, Function_nameContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public old_aggr_elem(): Old_aggr_elemContext[];
    public old_aggr_elem(i: number): Old_aggr_elemContext | null;
    public old_aggr_elem(i?: number): Old_aggr_elemContext[] | Old_aggr_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Old_aggr_elemContext);
        }

        return this.getRuleContext(i, Old_aggr_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public opt_or_replace(): Opt_or_replaceContext | null {
        return this.getRuleContext(0, Opt_or_replaceContext);
    }
    public aggr_args(): Aggr_argsContext | null {
        return this.getRuleContext(0, Aggr_argsContext);
    }
    public definition(): DefinitionContext | null {
        return this.getRuleContext(0, DefinitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public any_name(): Any_nameContext[];
    public any_name(i: number): Any_nameContext | null;
    public any_name(i?: number): Any_nameContext[] | Any_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Any_nameContext);
        }

        return this.getRuleContext(i, Any_nameContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public KW_ENUM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENUM, 0);
    }
    public tablefuncelementlist(): TablefuncelementlistContext | null {
        return this.getRuleContext(0, TablefuncelementlistContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public notify_payload(): Notify_payloadContext[];
    public notify_payload(i: number): Notify_payloadContext | null;
    public notify_payload(i?: number): Notify_payloadContext[] | Notify_payloadContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Notify_payloadContext);
        }

        return this.getRuleContext(i, Notify_payloadContext);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RANGE, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_definestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefinestmt) {
             listener.enterDefinestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefinestmt) {
             listener.exitDefinestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefinestmt) {
            return visitor.visitDefinestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public def_elem(): Def_elemContext[];
    public def_elem(i: number): Def_elemContext | null;
    public def_elem(i?: number): Def_elemContext[] | Def_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Def_elemContext);
        }

        return this.getRuleContext(i, Def_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_definition;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefinition) {
             listener.enterDefinition(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefinition) {
             listener.exitDefinition(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefinition) {
            return visitor.visitDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Def_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collabel(): CollabelContext {
        return this.getRuleContext(0, CollabelContext)!;
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public def_arg(): Def_argContext | null {
        return this.getRuleContext(0, Def_argContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_def_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDef_elem) {
             listener.enterDef_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDef_elem) {
             listener.exitDef_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDef_elem) {
            return visitor.visitDef_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Def_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_type(): Func_typeContext | null {
        return this.getRuleContext(0, Func_typeContext);
    }
    public reserved_keyword(): Reserved_keywordContext | null {
        return this.getRuleContext(0, Reserved_keywordContext);
    }
    public qual_all_op(): Qual_all_opContext | null {
        return this.getRuleContext(0, Qual_all_opContext);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NONE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_def_arg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDef_arg) {
             listener.enterDef_arg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDef_arg) {
             listener.exitDef_arg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDef_arg) {
            return visitor.visitDef_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Old_aggr_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.EQUAL, 0)!;
    }
    public def_arg(): Def_argContext {
        return this.getRuleContext(0, Def_argContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_old_aggr_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOld_aggr_elem) {
             listener.enterOld_aggr_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOld_aggr_elem) {
             listener.exitOld_aggr_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOld_aggr_elem) {
            return visitor.visitOld_aggr_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterenumstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_VALUE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0)!;
    }
    public sconst(): SconstContext[];
    public sconst(i: number): SconstContext | null;
    public sconst(i?: number): SconstContext[] | SconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SconstContext);
        }

        return this.getRuleContext(i, SconstContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public KW_BEFORE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BEFORE, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AFTER, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterenumstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterenumstmt) {
             listener.enterAlterenumstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterenumstmt) {
             listener.exitAlterenumstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterenumstmt) {
            return visitor.visitAlterenumstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_if_not_existsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IF, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NOT, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_if_not_exists;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_if_not_exists) {
             listener.enterOpt_if_not_exists(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_if_not_exists) {
             listener.exitOpt_if_not_exists(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_if_not_exists) {
            return visitor.visitOpt_if_not_exists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateopclassstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0)!;
    }
    public KW_CLASS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0)!;
    }
    public any_name(): Any_nameContext[];
    public any_name(i: number): Any_nameContext | null;
    public any_name(i?: number): Any_nameContext[] | Any_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Any_nameContext);
        }

        return this.getRuleContext(i, Any_nameContext);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public table_access_method_clause(): Table_access_method_clauseContext {
        return this.getRuleContext(0, Table_access_method_clauseContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public opclass_item(): Opclass_itemContext[];
    public opclass_item(i: number): Opclass_itemContext | null;
    public opclass_item(i?: number): Opclass_itemContext[] | Opclass_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opclass_itemContext);
        }

        return this.getRuleContext(i, Opclass_itemContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createopclassstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateopclassstmt) {
             listener.enterCreateopclassstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateopclassstmt) {
             listener.exitCreateopclassstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateopclassstmt) {
            return visitor.visitCreateopclassstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opclass_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public oper_argtypes(): Oper_argtypesContext | null {
        return this.getRuleContext(0, Oper_argtypesContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_RECHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RECHECK, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public prep_type_clause(): Prep_type_clauseContext | null {
        return this.getRuleContext(0, Prep_type_clauseContext);
    }
    public KW_STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORAGE, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opclass_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpclass_item) {
             listener.enterOpclass_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpclass_item) {
             listener.exitOpclass_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpclass_item) {
            return visitor.visitOpclass_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateopfamilystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0)!;
    }
    public KW_FAMILY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public table_access_method_clause(): Table_access_method_clauseContext {
        return this.getRuleContext(0, Table_access_method_clauseContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createopfamilystmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateopfamilystmt) {
             listener.enterCreateopfamilystmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateopfamilystmt) {
             listener.exitCreateopfamilystmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateopfamilystmt) {
            return visitor.visitCreateopfamilystmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlteropfamilystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0)!;
    }
    public KW_FAMILY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public table_access_method_clause(): Table_access_method_clauseContext {
        return this.getRuleContext(0, Table_access_method_clauseContext)!;
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public opclass_item(): Opclass_itemContext[];
    public opclass_item(i: number): Opclass_itemContext | null;
    public opclass_item(i?: number): Opclass_itemContext[] | Opclass_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opclass_itemContext);
        }

        return this.getRuleContext(i, Opclass_itemContext);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public opclass_drop(): Opclass_dropContext[];
    public opclass_drop(i: number): Opclass_dropContext | null;
    public opclass_drop(i?: number): Opclass_dropContext[] | Opclass_dropContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opclass_dropContext);
        }

        return this.getRuleContext(i, Opclass_dropContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alteropfamilystmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlteropfamilystmt) {
             listener.enterAlteropfamilystmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlteropfamilystmt) {
             listener.exitAlteropfamilystmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlteropfamilystmt) {
            return visitor.visitAlteropfamilystmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opclass_dropContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Integral(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.Integral, 0)!;
    }
    public prep_type_clause(): Prep_type_clauseContext {
        return this.getRuleContext(0, Prep_type_clauseContext)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opclass_drop;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpclass_drop) {
             listener.enterOpclass_drop(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpclass_drop) {
             listener.exitOpclass_drop(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpclass_drop) {
            return visitor.visitOpclass_drop(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReassignownedstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REASSIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REASSIGN, 0)!;
    }
    public KW_OWNED(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OWNED, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reassignownedstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReassignownedstmt) {
             listener.enterReassignownedstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReassignownedstmt) {
             listener.exitReassignownedstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReassignownedstmt) {
            return visitor.visitReassignownedstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DROP, 0)!;
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACCESS, 0);
    }
    public KW_METHOD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_METHOD, 0);
    }
    public KW_EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public view_name(): View_nameContext[];
    public view_name(i: number): View_nameContext | null;
    public view_name(i?: number): View_nameContext[] | View_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(View_nameContext);
        }

        return this.getRuleContext(i, View_nameContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public table_name_list(): Table_name_listContext | null {
        return this.getRuleContext(0, Table_name_listContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name_list(): Schema_name_listContext | null {
        return this.getRuleContext(0, Schema_name_listContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public any_name_list(): Any_name_listContext | null {
        return this.getRuleContext(0, Any_name_listContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CAST, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public KW_OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public role_list(): Role_listContext | null {
        return this.getRuleContext(0, Role_listContext);
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public tablespace_name(): Tablespace_nameContext | null {
        return this.getRuleContext(0, Tablespace_nameContext);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_USER(): antlr.TerminalNode[];
    public KW_USER(i: number): antlr.TerminalNode | null;
    public KW_USER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_USER);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_USER, i);
    	}
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public KW_MAPPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAPPING, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public database_name(): Database_nameContext | null {
        return this.getRuleContext(0, Database_nameContext);
    }
    public KW_FORCE(): antlr.TerminalNode[];
    public KW_FORCE(i: number): antlr.TerminalNode | null;
    public KW_FORCE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FORCE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FORCE, i);
    	}
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_dropstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDropstmt) {
             listener.enterDropstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDropstmt) {
             listener.exitDropstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDropstmt) {
            return visitor.visitDropstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_type_any_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_object_type_any_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterObject_type_any_name) {
             listener.enterObject_type_any_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitObject_type_any_name) {
             listener.exitObject_type_any_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitObject_type_any_name) {
            return visitor.visitObject_type_any_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Object_type_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACCESS, 0);
    }
    public KW_METHOD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_METHOD, 0);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name(): Schema_nameContext | null {
        return this.getRuleContext(0, Schema_nameContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public database_name(): Database_nameContext | null {
        return this.getRuleContext(0, Database_nameContext);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_object_type_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterObject_type_name) {
             listener.enterObject_type_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitObject_type_name) {
             listener.exitObject_type_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitObject_type_name) {
            return visitor.visitObject_type_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Any_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_name(): Any_nameContext[];
    public any_name(i: number): Any_nameContext | null;
    public any_name(i?: number): Any_nameContext[] | Any_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Any_nameContext);
        }

        return this.getRuleContext(i, Any_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_any_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAny_name_list) {
             listener.enterAny_name_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAny_name_list) {
             listener.exitAny_name_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAny_name_list) {
            return visitor.visitAny_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Any_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_any_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAny_name) {
             listener.enterAny_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAny_name) {
             listener.exitAny_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAny_name) {
            return visitor.visitAny_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AttrsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.DOT);
    	} else {
    		return this.getToken(PostgreSqlParser.DOT, i);
    	}
    }
    public collabel(): CollabelContext[];
    public collabel(i: number): CollabelContext | null;
    public collabel(i?: number): CollabelContext[] | CollabelContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CollabelContext);
        }

        return this.getRuleContext(i, CollabelContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_attrs;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAttrs) {
             listener.enterAttrs(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAttrs) {
             listener.exitAttrs(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAttrs) {
            return visitor.visitAttrs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruncatestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TRUNCATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TRUNCATE, 0)!;
    }
    public truncate_table(): Truncate_tableContext[];
    public truncate_table(i: number): Truncate_tableContext | null;
    public truncate_table(i?: number): Truncate_tableContext[] | Truncate_tableContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Truncate_tableContext);
        }

        return this.getRuleContext(i, Truncate_tableContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_IDENTITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IDENTITY, 0);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public KW_CONTINUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTINUE, 0);
    }
    public KW_RESTART(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTART, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_truncatestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTruncatestmt) {
             listener.enterTruncatestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTruncatestmt) {
             listener.exitTruncatestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTruncatestmt) {
            return visitor.visitTruncatestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Truncate_tableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_name(): Table_nameContext {
        return this.getRuleContext(0, Table_nameContext)!;
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_truncate_table;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTruncate_table) {
             listener.enterTruncate_table(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTruncate_table) {
             listener.exitTruncate_table(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTruncate_table) {
            return visitor.visitTruncate_table(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommentstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COMMENT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_COMMENT, 0)!;
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ON);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ON, i);
    	}
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IS, 0)!;
    }
    public object_type_any_name(): Object_type_any_nameContext | null {
        return this.getRuleContext(0, Object_type_any_nameContext);
    }
    public object_type_name(): Object_type_nameContext | null {
        return this.getRuleContext(0, Object_type_nameContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMN, 0);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.DOT, 0);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public operator_with_argtypes(): Operator_with_argtypesContext | null {
        return this.getRuleContext(0, Operator_with_argtypesContext);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public KW_LARGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LARGE, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OBJECT, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CAST, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_commentstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCommentstmt) {
             listener.enterCommentstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCommentstmt) {
             listener.exitCommentstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommentstmt) {
            return visitor.visitCommentstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SeclabelstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SECURITY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0)!;
    }
    public KW_LABEL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LABEL, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IS, 0)!;
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMN, 0);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_LARGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LARGE, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OBJECT, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public object_type_any_name(): Object_type_any_nameContext | null {
        return this.getRuleContext(0, Object_type_any_nameContext);
    }
    public object_type_name(): Object_type_nameContext | null {
        return this.getRuleContext(0, Object_type_nameContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | null {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_seclabelstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSeclabelstmt) {
             listener.enterSeclabelstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSeclabelstmt) {
             listener.exitSeclabelstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSeclabelstmt) {
            return visitor.visitSeclabelstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FetchstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fetch_args(): Fetch_argsContext {
        return this.getRuleContext(0, Fetch_argsContext)!;
    }
    public KW_FETCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FETCH, 0);
    }
    public KW_MOVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MOVE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fetchstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFetchstmt) {
             listener.enterFetchstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFetchstmt) {
             listener.exitFetchstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFetchstmt) {
            return visitor.visitFetchstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Fetch_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public from_in(): From_inContext | null {
        return this.getRuleContext(0, From_inContext);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public KW_PRIOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIOR, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LAST, 0);
    }
    public signediconst(): SignediconstContext | null {
        return this.getRuleContext(0, SignediconstContext);
    }
    public KW_ABSOLUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABSOLUTE, 0);
    }
    public KW_RELATIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELATIVE, 0);
    }
    public KW_FORWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORWARD, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_BACKWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BACKWARD, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fetch_args;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFetch_args) {
             listener.enterFetch_args(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFetch_args) {
             listener.exitFetch_args(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFetch_args) {
            return visitor.visitFetch_args(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class From_inContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_from_in;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFrom_in) {
             listener.enterFrom_in(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFrom_in) {
             listener.exitFrom_in(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrom_in) {
            return visitor.visitFrom_in(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode[];
    public KW_GRANT(i: number): antlr.TerminalNode | null;
    public KW_GRANT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_GRANT);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_GRANT, i);
    	}
    }
    public privileges(): PrivilegesContext {
        return this.getRuleContext(0, PrivilegesContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public privilege_target(): Privilege_targetContext {
        return this.getRuleContext(0, Privilege_targetContext)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public grantee_list(): Grantee_listContext {
        return this.getRuleContext(0, Grantee_listContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_grantstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGrantstmt) {
             listener.enterGrantstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGrantstmt) {
             listener.exitGrantstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantstmt) {
            return visitor.visitGrantstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REVOKE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REVOKE, 0)!;
    }
    public privileges(): PrivilegesContext {
        return this.getRuleContext(0, PrivilegesContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public privilege_target(): Privilege_targetContext {
        return this.getRuleContext(0, Privilege_targetContext)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public grantee_list(): Grantee_listContext {
        return this.getRuleContext(0, Grantee_listContext)!;
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GRANT, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_revokestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRevokestmt) {
             listener.enterRevokestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRevokestmt) {
             listener.exitRevokestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRevokestmt) {
            return visitor.visitRevokestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIVILEGES, 0);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public beforeprivilegeselect(): BeforeprivilegeselectContext[];
    public beforeprivilegeselect(i: number): BeforeprivilegeselectContext | null;
    public beforeprivilegeselect(i?: number): BeforeprivilegeselectContext[] | BeforeprivilegeselectContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BeforeprivilegeselectContext);
        }

        return this.getRuleContext(i, BeforeprivilegeselectContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_privileges;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrivileges) {
             listener.enterPrivileges(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrivileges) {
             listener.exitPrivileges(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivileges) {
            return visitor.visitPrivileges(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BeforeprivilegeselectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUNCATE, 0);
    }
    public KW_PEFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PEFERENCES, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_USAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USAGE, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0);
    }
    public KW_CONNECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONNECT, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMP, 0);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_beforeprivilegeselect;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterBeforeprivilegeselect) {
             listener.enterBeforeprivilegeselect(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitBeforeprivilegeselect) {
             listener.exitBeforeprivilegeselect(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBeforeprivilegeselect) {
            return visitor.visitBeforeprivilegeselect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCES, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_privilege;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrivilege) {
             listener.enterPrivilege(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrivilege) {
             listener.exitPrivilege(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilege) {
            return visitor.visitPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Privilege_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public table_name_list(): Table_name_listContext | null {
        return this.getRuleContext(0, Table_name_listContext);
    }
    public qualified_name_list(): Qualified_name_listContext | null {
        return this.getRuleContext(0, Qualified_name_listContext);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes_list(): Function_with_argtypes_listContext | null {
        return this.getRuleContext(0, Function_with_argtypes_listContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes_list(): Procedure_with_argtypes_listContext | null {
        return this.getRuleContext(0, Procedure_with_argtypes_listContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes_list(): Routine_with_argtypes_listContext | null {
        return this.getRuleContext(0, Routine_with_argtypes_listContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public database_nameList(): Database_nameListContext | null {
        return this.getRuleContext(0, Database_nameListContext);
    }
    public any_name_list(): Any_name_listContext | null {
        return this.getRuleContext(0, Any_name_listContext);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_LARGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LARGE, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OBJECT, 0);
    }
    public numericonly(): NumericonlyContext[];
    public numericonly(i: number): NumericonlyContext | null;
    public numericonly(i?: number): NumericonlyContext[] | NumericonlyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumericonlyContext);
        }

        return this.getRuleContext(i, NumericonlyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name_list(): Schema_name_listContext | null {
        return this.getRuleContext(0, Schema_name_listContext);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public tablespace_name_list(): Tablespace_name_listContext | null {
        return this.getRuleContext(0, Tablespace_name_listContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLES, 0);
    }
    public KW_SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCES, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_PROCEDURES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURES, 0);
    }
    public KW_ROUTINES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINES, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_privilege_target;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrivilege_target) {
             listener.enterPrivilege_target(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrivilege_target) {
             listener.exitPrivilege_target(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilege_target) {
            return visitor.visitPrivilege_target(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Grantee_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rolespec(): RolespecContext[];
    public rolespec(i: number): RolespecContext | null;
    public rolespec(i?: number): RolespecContext[] | RolespecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RolespecContext);
        }

        return this.getRuleContext(i, RolespecContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_GROUP(): antlr.TerminalNode[];
    public KW_GROUP(i: number): antlr.TerminalNode | null;
    public KW_GROUP(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_GROUP);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_GROUP, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_grantee_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGrantee_list) {
             listener.enterGrantee_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGrantee_list) {
             listener.exitGrantee_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantee_list) {
            return visitor.visitGrantee_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantrolestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GRANT, 0)!;
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADMIN, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_GRANTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GRANTED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_grantrolestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGrantrolestmt) {
             listener.enterGrantrolestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGrantrolestmt) {
             listener.exitGrantrolestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGrantrolestmt) {
            return visitor.visitGrantrolestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokerolestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REVOKE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REVOKE, 0)!;
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADMIN, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_GRANTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GRANTED, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_revokerolestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRevokerolestmt) {
             listener.enterRevokerolestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRevokerolestmt) {
             listener.exitRevokerolestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRevokerolestmt) {
            return visitor.visitRevokerolestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterdefaultprivilegesstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_DEFAULT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0)!;
    }
    public KW_PRIVILEGES(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PRIVILEGES, 0)!;
    }
    public defaclaction(): DefaclactionContext {
        return this.getRuleContext(0, DefaclactionContext)!;
    }
    public KW_IN(): antlr.TerminalNode[];
    public KW_IN(i: number): antlr.TerminalNode | null;
    public KW_IN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_IN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_IN, i);
    	}
    }
    public KW_SCHEMA(): antlr.TerminalNode[];
    public KW_SCHEMA(i: number): antlr.TerminalNode | null;
    public KW_SCHEMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_SCHEMA);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_SCHEMA, i);
    	}
    }
    public schema_name_list(): Schema_name_listContext[];
    public schema_name_list(i: number): Schema_name_listContext | null;
    public schema_name_list(i?: number): Schema_name_listContext[] | Schema_name_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Schema_name_listContext);
        }

        return this.getRuleContext(i, Schema_name_listContext);
    }
    public KW_FOR(): antlr.TerminalNode[];
    public KW_FOR(i: number): antlr.TerminalNode | null;
    public KW_FOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FOR);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FOR, i);
    	}
    }
    public role_list(): Role_listContext[];
    public role_list(i: number): Role_listContext | null;
    public role_list(i?: number): Role_listContext[] | Role_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Role_listContext);
        }

        return this.getRuleContext(i, Role_listContext);
    }
    public KW_ROLE(): antlr.TerminalNode[];
    public KW_ROLE(i: number): antlr.TerminalNode | null;
    public KW_ROLE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ROLE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ROLE, i);
    	}
    }
    public KW_USER(): antlr.TerminalNode[];
    public KW_USER(i: number): antlr.TerminalNode | null;
    public KW_USER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_USER);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_USER, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterdefaultprivilegesstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterdefaultprivilegesstmt) {
             listener.enterAlterdefaultprivilegesstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterdefaultprivilegesstmt) {
             listener.exitAlterdefaultprivilegesstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterdefaultprivilegesstmt) {
            return visitor.visitAlterdefaultprivilegesstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaclactionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GRANT(): antlr.TerminalNode[];
    public KW_GRANT(i: number): antlr.TerminalNode | null;
    public KW_GRANT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_GRANT);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_GRANT, i);
    	}
    }
    public privileges(): PrivilegesContext {
        return this.getRuleContext(0, PrivilegesContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public defacl_privilege_target(): Defacl_privilege_targetContext {
        return this.getRuleContext(0, Defacl_privilege_targetContext)!;
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public grantee_list(): Grantee_listContext {
        return this.getRuleContext(0, Grantee_listContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REVOKE, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_defaclaction;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefaclaction) {
             listener.enterDefaclaction(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefaclaction) {
             listener.exitDefaclaction(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefaclaction) {
            return visitor.visitDefaclaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Defacl_privilege_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLES, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_ROUTINES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINES, 0);
    }
    public KW_SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCES, 0);
    }
    public KW_TYPES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPES, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMAS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_defacl_privilege_target;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefacl_privilege_target) {
             listener.enterDefacl_privilege_target(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefacl_privilege_target) {
             listener.exitDefacl_privilege_target(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefacl_privilege_target) {
            return visitor.visitDefacl_privilege_target(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_INDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public relation_expr(): Relation_exprContext {
        return this.getRuleContext(0, Relation_exprContext)!;
    }
    public index_params(): Index_paramsContext[];
    public index_params(i: number): Index_paramsContext | null;
    public index_params(i?: number): Index_paramsContext[] | Index_paramsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Index_paramsContext);
        }

        return this.getRuleContext(i, Index_paramsContext);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNIQUE, 0);
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCLUDE, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLS, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public opt_reloptions(): Opt_reloptionsContext | null {
        return this.getRuleContext(0, Opt_reloptionsContext);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_indexstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndexstmt) {
             listener.enterIndexstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndexstmt) {
             listener.exitIndexstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndexstmt) {
            return visitor.visitIndexstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Index_paramsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public index_elem(): Index_elemContext[];
    public index_elem(i: number): Index_elemContext | null;
    public index_elem(i?: number): Index_elemContext[] | Index_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Index_elemContext);
        }

        return this.getRuleContext(i, Index_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_index_params;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndex_params) {
             listener.enterIndex_params(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndex_params) {
             listener.exitIndex_params(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndex_params) {
            return visitor.visitIndex_params(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Index_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public func_expr_windowless(): Func_expr_windowlessContext | null {
        return this.getRuleContext(0, Func_expr_windowlessContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public reloptions(): ReloptionsContext | null {
        return this.getRuleContext(0, ReloptionsContext);
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DESC, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LAST, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_index_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndex_elem) {
             listener.enterIndex_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndex_elem) {
             listener.exitIndex_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndex_elem) {
            return visitor.visitIndex_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatefunctionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_name_create(): Function_name_createContext | null {
        return this.getRuleContext(0, Function_name_createContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_name_create(): Procedure_name_createContext | null {
        return this.getRuleContext(0, Procedure_name_createContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public opt_or_replace(): Opt_or_replaceContext | null {
        return this.getRuleContext(0, Opt_or_replaceContext);
    }
    public KW_RETURNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RETURNS, 0);
    }
    public createfunc_opt_item(): Createfunc_opt_itemContext[];
    public createfunc_opt_item(i: number): Createfunc_opt_itemContext | null;
    public createfunc_opt_item(i?: number): Createfunc_opt_itemContext[] | Createfunc_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Createfunc_opt_itemContext);
        }

        return this.getRuleContext(i, Createfunc_opt_itemContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public func_arg_with_default(): Func_arg_with_defaultContext[];
    public func_arg_with_default(i: number): Func_arg_with_defaultContext | null;
    public func_arg_with_default(i?: number): Func_arg_with_defaultContext[] | Func_arg_with_defaultContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Func_arg_with_defaultContext);
        }

        return this.getRuleContext(i, Func_arg_with_defaultContext);
    }
    public func_type(): Func_typeContext | null {
        return this.getRuleContext(0, Func_typeContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public table_func_column(): Table_func_columnContext[];
    public table_func_column(i: number): Table_func_columnContext | null;
    public table_func_column(i?: number): Table_func_columnContext[] | Table_func_columnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_func_columnContext);
        }

        return this.getRuleContext(i, Table_func_columnContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createfunctionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatefunctionstmt) {
             listener.enterCreatefunctionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatefunctionstmt) {
             listener.exitCreatefunctionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatefunctionstmt) {
            return visitor.visitCreatefunctionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_or_replaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OR, 0)!;
    }
    public KW_REPLACE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REPLACE, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_or_replace;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_or_replace) {
             listener.enterOpt_or_replace(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_or_replace) {
             listener.exitOpt_or_replace(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_or_replace) {
            return visitor.visitOpt_or_replace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public func_args_list(): Func_args_listContext | null {
        return this.getRuleContext(0, Func_args_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_args;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_args) {
             listener.enterFunc_args(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_args) {
             listener.exitFunc_args(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_args) {
            return visitor.visitFunc_args(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_args_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_arg(): Func_argContext[];
    public func_arg(i: number): Func_argContext | null;
    public func_arg(i?: number): Func_argContext[] | Func_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Func_argContext);
        }

        return this.getRuleContext(i, Func_argContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_args_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_args_list) {
             listener.enterFunc_args_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_args_list) {
             listener.exitFunc_args_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_args_list) {
            return visitor.visitFunc_args_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Routine_with_argtypes_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext[];
    public routine_with_argtypes(i: number): Routine_with_argtypesContext | null;
    public routine_with_argtypes(i?: number): Routine_with_argtypesContext[] | Routine_with_argtypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Routine_with_argtypesContext);
        }

        return this.getRuleContext(i, Routine_with_argtypesContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_routine_with_argtypes_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoutine_with_argtypes_list) {
             listener.enterRoutine_with_argtypes_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoutine_with_argtypes_list) {
             listener.exitRoutine_with_argtypes_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutine_with_argtypes_list) {
            return visitor.visitRoutine_with_argtypes_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Routine_with_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public routine_name(): Routine_nameContext | null {
        return this.getRuleContext(0, Routine_nameContext);
    }
    public func_args(): Func_argsContext | null {
        return this.getRuleContext(0, Func_argsContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_routine_with_argtypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoutine_with_argtypes) {
             listener.enterRoutine_with_argtypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoutine_with_argtypes) {
             listener.exitRoutine_with_argtypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutine_with_argtypes) {
            return visitor.visitRoutine_with_argtypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Procedure_with_argtypes_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext[];
    public procedure_with_argtypes(i: number): Procedure_with_argtypesContext | null;
    public procedure_with_argtypes(i?: number): Procedure_with_argtypesContext[] | Procedure_with_argtypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Procedure_with_argtypesContext);
        }

        return this.getRuleContext(i, Procedure_with_argtypesContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedure_with_argtypes_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedure_with_argtypes_list) {
             listener.enterProcedure_with_argtypes_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedure_with_argtypes_list) {
             listener.exitProcedure_with_argtypes_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedure_with_argtypes_list) {
            return visitor.visitProcedure_with_argtypes_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Procedure_with_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public procedure_name(): Procedure_nameContext | null {
        return this.getRuleContext(0, Procedure_nameContext);
    }
    public func_args(): Func_argsContext | null {
        return this.getRuleContext(0, Func_argsContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedure_with_argtypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedure_with_argtypes) {
             listener.enterProcedure_with_argtypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedure_with_argtypes) {
             listener.exitProcedure_with_argtypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedure_with_argtypes) {
            return visitor.visitProcedure_with_argtypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Function_with_argtypes_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public function_with_argtypes(): Function_with_argtypesContext[];
    public function_with_argtypes(i: number): Function_with_argtypesContext | null;
    public function_with_argtypes(i?: number): Function_with_argtypesContext[] | Function_with_argtypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Function_with_argtypesContext);
        }

        return this.getRuleContext(i, Function_with_argtypesContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_function_with_argtypes_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunction_with_argtypes_list) {
             listener.enterFunction_with_argtypes_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunction_with_argtypes_list) {
             listener.exitFunction_with_argtypes_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunction_with_argtypes_list) {
            return visitor.visitFunction_with_argtypes_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Function_with_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public function_name(): Function_nameContext | null {
        return this.getRuleContext(0, Function_nameContext);
    }
    public func_args(): Func_argsContext | null {
        return this.getRuleContext(0, Func_argsContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_function_with_argtypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunction_with_argtypes) {
             listener.enterFunction_with_argtypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunction_with_argtypes) {
             listener.exitFunction_with_argtypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunction_with_argtypes) {
            return visitor.visitFunction_with_argtypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_type(): Func_typeContext {
        return this.getRuleContext(0, Func_typeContext)!;
    }
    public arg_class(): Arg_classContext | null {
        return this.getRuleContext(0, Arg_classContext);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_arg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_arg) {
             listener.enterFunc_arg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_arg) {
             listener.exitFunc_arg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_arg) {
            return visitor.visitFunc_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Arg_classContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OUT, 0);
    }
    public KW_INOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INOUT, 0);
    }
    public KW_VARIADIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARIADIC, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_arg_class;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterArg_class) {
             listener.enterArg_class(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitArg_class) {
             listener.exitArg_class(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArg_class) {
            return visitor.visitArg_class(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PERCENT, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_SETOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SETOF, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_type;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_type) {
             listener.enterFunc_type(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_type) {
             listener.exitFunc_type(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_type) {
            return visitor.visitFunc_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_arg_with_defaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_arg(): Func_argContext {
        return this.getRuleContext(0, Func_argContext)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_arg_with_default;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_arg_with_default) {
             listener.enterFunc_arg_with_default(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_arg_with_default) {
             listener.exitFunc_arg_with_default(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_arg_with_default) {
            return visitor.visitFunc_arg_with_default(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Aggr_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public func_args_list(): Func_args_listContext[];
    public func_args_list(i: number): Func_args_listContext | null;
    public func_args_list(i?: number): Func_args_listContext[] | Func_args_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Func_args_listContext);
        }

        return this.getRuleContext(i, Func_args_listContext);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDER, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_aggr_args;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAggr_args) {
             listener.enterAggr_args(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAggr_args) {
             listener.exitAggr_args(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAggr_args) {
            return visitor.visitAggr_args(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Aggregate_with_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public function_name(): Function_nameContext {
        return this.getRuleContext(0, Function_nameContext)!;
    }
    public aggr_args(): Aggr_argsContext {
        return this.getRuleContext(0, Aggr_argsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_aggregate_with_argtypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAggregate_with_argtypes) {
             listener.enterAggregate_with_argtypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAggregate_with_argtypes) {
             listener.exitAggregate_with_argtypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAggregate_with_argtypes) {
            return visitor.visitAggregate_with_argtypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Common_func_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_NULL(): antlr.TerminalNode[];
    public KW_NULL(i: number): antlr.TerminalNode | null;
    public KW_NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NULL);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NULL, i);
    	}
    }
    public KW_INPUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INPUT, 0);
    }
    public KW_RETURNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RETURNS, 0);
    }
    public KW_CALLED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CALLED, 0);
    }
    public KW_STRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRICT, 0);
    }
    public KW_IMMUTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMUTABLE, 0);
    }
    public KW_STABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STABLE, 0);
    }
    public KW_VOLATILE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VOLATILE, 0);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0);
    }
    public KW_DEFINER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFINER, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INVOKER, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTERNAL, 0);
    }
    public KW_LEAKPROOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEAKPROOF, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COST, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_SUPPORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUPPORT, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public set_rest_more(): Set_rest_moreContext | null {
        return this.getRuleContext(0, Set_rest_moreContext);
    }
    public variableresetstmt(): VariableresetstmtContext | null {
        return this.getRuleContext(0, VariableresetstmtContext);
    }
    public KW_PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARALLEL, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_common_func_opt_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCommon_func_opt_item) {
             listener.enterCommon_func_opt_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCommon_func_opt_item) {
             listener.exitCommon_func_opt_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommon_func_opt_item) {
            return visitor.visitCommon_func_opt_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Createfunc_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public notify_payload(): Notify_payloadContext | null {
        return this.getRuleContext(0, Notify_payloadContext);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | null {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0);
    }
    public KW_FOR(): antlr.TerminalNode[];
    public KW_FOR(i: number): antlr.TerminalNode | null;
    public KW_FOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FOR);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FOR, i);
    	}
    }
    public KW_TYPE(): antlr.TerminalNode[];
    public KW_TYPE(i: number): antlr.TerminalNode | null;
    public KW_TYPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_TYPE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_TYPE, i);
    	}
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WINDOW, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public stmt(): StmtContext | null {
        return this.getRuleContext(0, StmtContext);
    }
    public common_func_opt_item(): Common_func_opt_itemContext | null {
        return this.getRuleContext(0, Common_func_opt_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createfunc_opt_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatefunc_opt_item) {
             listener.enterCreatefunc_opt_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatefunc_opt_item) {
             listener.exitCreatefunc_opt_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatefunc_opt_item) {
            return visitor.visitCreatefunc_opt_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_definitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public definition(): DefinitionContext {
        return this.getRuleContext(0, DefinitionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_definition;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_definition) {
             listener.enterOpt_definition(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_definition) {
             listener.exitOpt_definition(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_definition) {
            return visitor.visitOpt_definition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_func_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext {
        return this.getRuleContext(0, Column_nameContext)!;
    }
    public func_type(): Func_typeContext {
        return this.getRuleContext(0, Func_typeContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_table_func_column;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTable_func_column) {
             listener.enterTable_func_column(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTable_func_column) {
             listener.exitTable_func_column(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTable_func_column) {
            return visitor.visitTable_func_column(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterfunctionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public common_func_opt_item(): Common_func_opt_itemContext[];
    public common_func_opt_item(i: number): Common_func_opt_itemContext | null;
    public common_func_opt_item(i?: number): Common_func_opt_itemContext[] | Common_func_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Common_func_opt_itemContext);
        }

        return this.getRuleContext(i, Common_func_opt_itemContext);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterfunctionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterfunctionstmt) {
             listener.enterAlterfunctionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterfunctionstmt) {
             listener.exitAlterfunctionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterfunctionstmt) {
            return visitor.visitAlterfunctionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemovefuncstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DROP, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes_list(): Function_with_argtypes_listContext | null {
        return this.getRuleContext(0, Function_with_argtypes_listContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes_list(): Procedure_with_argtypes_listContext | null {
        return this.getRuleContext(0, Procedure_with_argtypes_listContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes_list(): Routine_with_argtypes_listContext | null {
        return this.getRuleContext(0, Routine_with_argtypes_listContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_removefuncstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRemovefuncstmt) {
             listener.enterRemovefuncstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRemovefuncstmt) {
             listener.exitRemovefuncstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRemovefuncstmt) {
            return visitor.visitRemovefuncstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemoveaggrstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DROP, 0)!;
    }
    public KW_AGGREGATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0)!;
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext[];
    public aggregate_with_argtypes(i: number): Aggregate_with_argtypesContext | null;
    public aggregate_with_argtypes(i?: number): Aggregate_with_argtypesContext[] | Aggregate_with_argtypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Aggregate_with_argtypesContext);
        }

        return this.getRuleContext(i, Aggregate_with_argtypesContext);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_removeaggrstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRemoveaggrstmt) {
             listener.enterRemoveaggrstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRemoveaggrstmt) {
             listener.exitRemoveaggrstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRemoveaggrstmt) {
            return visitor.visitRemoveaggrstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RemoveoperstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DROP, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0)!;
    }
    public operator_with_argtypes(): Operator_with_argtypesContext[];
    public operator_with_argtypes(i: number): Operator_with_argtypesContext | null;
    public operator_with_argtypes(i?: number): Operator_with_argtypesContext[] | Operator_with_argtypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Operator_with_argtypesContext);
        }

        return this.getRuleContext(i, Operator_with_argtypesContext);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_removeoperstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRemoveoperstmt) {
             listener.enterRemoveoperstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRemoveoperstmt) {
             listener.exitRemoveoperstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRemoveoperstmt) {
            return visitor.visitRemoveoperstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Oper_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NONE, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_oper_argtypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOper_argtypes) {
             listener.enterOper_argtypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOper_argtypes) {
             listener.exitOper_argtypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOper_argtypes) {
            return visitor.visitOper_argtypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Any_operatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public all_op(): All_opContext {
        return this.getRuleContext(0, All_opContext)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.DOT);
    	} else {
    		return this.getToken(PostgreSqlParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_any_operator;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAny_operator) {
             listener.enterAny_operator(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAny_operator) {
             listener.exitAny_operator(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAny_operator) {
            return visitor.visitAny_operator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Operator_with_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_operator(): Any_operatorContext {
        return this.getRuleContext(0, Any_operatorContext)!;
    }
    public oper_argtypes(): Oper_argtypesContext {
        return this.getRuleContext(0, Oper_argtypesContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_operator_with_argtypes;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOperator_with_argtypes) {
             listener.enterOperator_with_argtypes(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOperator_with_argtypes) {
             listener.exitOperator_with_argtypes(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOperator_with_argtypes) {
            return visitor.visitOperator_with_argtypes(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DostmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DO, 0)!;
    }
    public sconst(): SconstContext[];
    public sconst(i: number): SconstContext | null;
    public sconst(i?: number): SconstContext[] | SconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SconstContext);
        }

        return this.getRuleContext(i, SconstContext);
    }
    public KW_LANGUAGE(): antlr.TerminalNode[];
    public KW_LANGUAGE(i: number): antlr.TerminalNode | null;
    public KW_LANGUAGE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_LANGUAGE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_LANGUAGE, i);
    	}
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext[];
    public nonreservedword_or_sconst(i: number): Nonreservedword_or_sconstContext | null;
    public nonreservedword_or_sconst(i?: number): Nonreservedword_or_sconstContext[] | Nonreservedword_or_sconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Nonreservedword_or_sconstContext);
        }

        return this.getRuleContext(i, Nonreservedword_or_sconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_dostmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDostmt) {
             listener.enterDostmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDostmt) {
             listener.exitDostmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDostmt) {
            return visitor.visitDostmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatecaststmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_CAST(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CAST, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public KW_AS(): antlr.TerminalNode[];
    public KW_AS(i: number): antlr.TerminalNode | null;
    public KW_AS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_AS);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_AS, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_INOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INOUT, 0);
    }
    public KW_ASSIGNMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASSIGNMENT, 0);
    }
    public KW_IMPLICIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMPLICIT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createcaststmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatecaststmt) {
             listener.enterCreatecaststmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatecaststmt) {
             listener.exitCreatecaststmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatecaststmt) {
            return visitor.visitCreatecaststmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_if_existsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IF, 0)!;
    }
    public KW_EXISTS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_if_exists;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_if_exists) {
             listener.enterOpt_if_exists(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_if_exists) {
             listener.exitOpt_if_exists(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_if_exists) {
            return visitor.visitOpt_if_exists(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatetransformstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_TRANSFORM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public KW_LANGUAGE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public sql_with_function(): Sql_with_functionContext[];
    public sql_with_function(i: number): Sql_with_functionContext | null;
    public sql_with_function(i?: number): Sql_with_functionContext[] | Sql_with_functionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Sql_with_functionContext);
        }

        return this.getRuleContext(i, Sql_with_functionContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public opt_or_replace(): Opt_or_replaceContext | null {
        return this.getRuleContext(0, Opt_or_replaceContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createtransformstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatetransformstmt) {
             listener.enterCreatetransformstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatetransformstmt) {
             listener.exitCreatetransformstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatetransformstmt) {
            return visitor.visitCreatetransformstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_with_functionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SQL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SQL, 0)!;
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public KW_FUNCTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0)!;
    }
    public function_with_argtypes(): Function_with_argtypesContext {
        return this.getRuleContext(0, Function_with_argtypesContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sql_with_function;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSql_with_function) {
             listener.enterSql_with_function(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSql_with_function) {
             listener.exitSql_with_function(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSql_with_function) {
            return visitor.visitSql_with_function(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReindexstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_REINDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REINDEX, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public KW_VERBOSE(): antlr.TerminalNode[];
    public KW_VERBOSE(i: number): antlr.TerminalNode | null;
    public KW_VERBOSE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_VERBOSE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_VERBOSE, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name(): Schema_nameContext | null {
        return this.getRuleContext(0, Schema_nameContext);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSTEM, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public database_name(): Database_nameContext | null {
        return this.getRuleContext(0, Database_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reindexstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReindexstmt) {
             listener.enterReindexstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReindexstmt) {
             listener.exitReindexstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReindexstmt) {
            return visitor.visitReindexstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltertblspcstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public opttablespace(): OpttablespaceContext {
        return this.getRuleContext(0, OpttablespaceContext)!;
    }
    public reloptions(): ReloptionsContext {
        return this.getRuleContext(0, ReloptionsContext)!;
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altertblspcstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltertblspcstmt) {
             listener.enterAltertblspcstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltertblspcstmt) {
             listener.exitAltertblspcstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltertblspcstmt) {
            return visitor.visitAltertblspcstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenamestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public database_name(): Database_nameContext | null {
        return this.getRuleContext(0, Database_nameContext);
    }
    public database_name_create(): Database_name_createContext | null {
        return this.getRuleContext(0, Database_name_createContext);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public function_name_create(): Function_name_createContext | null {
        return this.getRuleContext(0, Function_name_createContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public procedure_name_create(): Procedure_name_createContext | null {
        return this.getRuleContext(0, Procedure_name_createContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name(): Schema_nameContext | null {
        return this.getRuleContext(0, Schema_nameContext);
    }
    public schema_name_create(): Schema_name_createContext | null {
        return this.getRuleContext(0, Schema_name_createContext);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public view_name_create(): View_name_createContext | null {
        return this.getRuleContext(0, View_name_createContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public relation_expr(): Relation_exprContext | null {
        return this.getRuleContext(0, Relation_exprContext);
    }
    public table_name_create(): Table_name_createContext | null {
        return this.getRuleContext(0, Table_name_createContext);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public column_name_create(): Column_name_createContext | null {
        return this.getRuleContext(0, Column_name_createContext);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMN, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0);
    }
    public KW_EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public rolespec(): RolespecContext[];
    public rolespec(i: number): RolespecContext | null;
    public rolespec(i?: number): RolespecContext[] | RolespecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RolespecContext);
        }

        return this.getRuleContext(i, RolespecContext);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public tablespace_name_create(): Tablespace_name_createContext | null {
        return this.getRuleContext(0, Tablespace_name_createContext);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public KW_ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ATTRIBUTE, 0);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_renamestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRenamestmt) {
             listener.enterRenamestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRenamestmt) {
             listener.exitRenamestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRenamestmt) {
            return visitor.visitRenamestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterobjectdependsstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_DEPENDS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DEPENDS, 0)!;
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ON);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ON, i);
    	}
    }
    public KW_EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterobjectdependsstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterobjectdependsstmt) {
             listener.enterAlterobjectdependsstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterobjectdependsstmt) {
             listener.exitAlterobjectdependsstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterobjectdependsstmt) {
            return visitor.visitAlterobjectdependsstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterobjectschemastmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public KW_SCHEMA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0)!;
    }
    public schema_name(): Schema_nameContext {
        return this.getRuleContext(0, Schema_nameContext)!;
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public operator_with_argtypes(): Operator_with_argtypesContext | null {
        return this.getRuleContext(0, Operator_with_argtypesContext);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public relation_expr(): Relation_exprContext | null {
        return this.getRuleContext(0, Relation_exprContext);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterobjectschemastmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterobjectschemastmt) {
             listener.enterAlterobjectschemastmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterobjectschemastmt) {
             listener.exitAlterobjectschemastmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterobjectschemastmt) {
            return visitor.visitAlterobjectschemastmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlteroperatorstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0)!;
    }
    public operator_with_argtypes(): Operator_with_argtypesContext {
        return this.getRuleContext(0, Operator_with_argtypesContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public operator_def_list(): Operator_def_listContext {
        return this.getRuleContext(0, Operator_def_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alteroperatorstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlteroperatorstmt) {
             listener.enterAlteroperatorstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlteroperatorstmt) {
             listener.exitAlteroperatorstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlteroperatorstmt) {
            return visitor.visitAlteroperatorstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Operator_def_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public operator_def_elem(): Operator_def_elemContext[];
    public operator_def_elem(i: number): Operator_def_elemContext | null;
    public operator_def_elem(i?: number): Operator_def_elemContext[] | Operator_def_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Operator_def_elemContext);
        }

        return this.getRuleContext(i, Operator_def_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_operator_def_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOperator_def_list) {
             listener.enterOperator_def_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOperator_def_list) {
             listener.exitOperator_def_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOperator_def_list) {
            return visitor.visitOperator_def_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Operator_def_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collabel(): CollabelContext {
        return this.getRuleContext(0, CollabelContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.EQUAL, 0)!;
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NONE, 0);
    }
    public func_type(): Func_typeContext | null {
        return this.getRuleContext(0, Func_typeContext);
    }
    public reserved_keyword(): Reserved_keywordContext | null {
        return this.getRuleContext(0, Reserved_keywordContext);
    }
    public qual_all_op(): Qual_all_opContext | null {
        return this.getRuleContext(0, Qual_all_opContext);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_operator_def_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOperator_def_elem) {
             listener.enterOperator_def_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOperator_def_elem) {
             listener.exitOperator_def_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOperator_def_elem) {
            return visitor.visitOperator_def_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltertypestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_TYPE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public operator_def_list(): Operator_def_listContext {
        return this.getRuleContext(0, Operator_def_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altertypestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltertypestmt) {
             listener.enterAltertypestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltertypestmt) {
             listener.exitAltertypestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltertypestmt) {
            return visitor.visitAltertypestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterownerstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public KW_OWNER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public database_name(): Database_nameContext | null {
        return this.getRuleContext(0, Database_nameContext);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_LARGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LARGE, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OBJECT, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public operator_with_argtypes(): Operator_with_argtypesContext | null {
        return this.getRuleContext(0, Operator_with_argtypesContext);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public procedure_with_argtypes(): Procedure_with_argtypesContext | null {
        return this.getRuleContext(0, Procedure_with_argtypesContext);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public routine_with_argtypes(): Routine_with_argtypesContext | null {
        return this.getRuleContext(0, Routine_with_argtypesContext);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name(): Schema_nameContext | null {
        return this.getRuleContext(0, Schema_nameContext);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterownerstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterownerstmt) {
             listener.enterAlterownerstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterownerstmt) {
             listener.exitAlterownerstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterownerstmt) {
            return visitor.visitAlterownerstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatepublicationstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_PUBLICATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public relation_expr_list(): Relation_expr_listContext | null {
        return this.getRuleContext(0, Relation_expr_listContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLES, 0);
    }
    public opt_definition(): Opt_definitionContext | null {
        return this.getRuleContext(0, Opt_definitionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createpublicationstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatepublicationstmt) {
             listener.enterCreatepublicationstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatepublicationstmt) {
             listener.exitCreatepublicationstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatepublicationstmt) {
            return visitor.visitCreatepublicationstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterpublicationstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_PUBLICATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public publication_relation_expr(): Publication_relation_exprContext[];
    public publication_relation_expr(i: number): Publication_relation_exprContext | null;
    public publication_relation_expr(i?: number): Publication_relation_exprContext[] | Publication_relation_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Publication_relation_exprContext);
        }

        return this.getRuleContext(i, Publication_relation_exprContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public definition(): DefinitionContext | null {
        return this.getRuleContext(0, DefinitionContext);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterpublicationstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterpublicationstmt) {
             listener.enterAlterpublicationstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterpublicationstmt) {
             listener.exitAlterpublicationstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterpublicationstmt) {
            return visitor.visitAlterpublicationstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatesubscriptionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_CONNECTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CONNECTION, 0)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public KW_PUBLICATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0)!;
    }
    public collabel(): CollabelContext[];
    public collabel(i: number): CollabelContext | null;
    public collabel(i?: number): CollabelContext[] | CollabelContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CollabelContext);
        }

        return this.getRuleContext(i, CollabelContext);
    }
    public opt_definition(): Opt_definitionContext | null {
        return this.getRuleContext(0, Opt_definitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createsubscriptionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatesubscriptionstmt) {
             listener.enterCreatesubscriptionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatesubscriptionstmt) {
             listener.exitCreatesubscriptionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatesubscriptionstmt) {
            return visitor.visitCreatesubscriptionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltersubscriptionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public definition(): DefinitionContext | null {
        return this.getRuleContext(0, DefinitionContext);
    }
    public KW_CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONNECTION, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFRESH, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public opt_definition(): Opt_definitionContext | null {
        return this.getRuleContext(0, Opt_definitionContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public collabel(): CollabelContext[];
    public collabel(i: number): CollabelContext | null;
    public collabel(i?: number): CollabelContext[] | CollabelContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CollabelContext);
        }

        return this.getRuleContext(i, CollabelContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENABLE, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISABLE, 0);
    }
    public KW_SKIP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SKIP, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public old_aggr_elem(): Old_aggr_elemContext | null {
        return this.getRuleContext(0, Old_aggr_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altersubscriptionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltersubscriptionstmt) {
             listener.enterAltersubscriptionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltersubscriptionstmt) {
             listener.exitAltersubscriptionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltersubscriptionstmt) {
            return visitor.visitAltersubscriptionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RulestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_RULE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_RULE, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public KW_DO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DO, 0)!;
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public KW_NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTHING, 0);
    }
    public ruleactionstmt(): RuleactionstmtContext[];
    public ruleactionstmt(i: number): RuleactionstmtContext | null;
    public ruleactionstmt(i?: number): RuleactionstmtContext[] | RuleactionstmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RuleactionstmtContext);
        }

        return this.getRuleContext(i, RuleactionstmtContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public opt_or_replace(): Opt_or_replaceContext | null {
        return this.getRuleContext(0, Opt_or_replaceContext);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public KW_INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSTEAD, 0);
    }
    public KW_ALSO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALSO, 0);
    }
    public SEMI(): antlr.TerminalNode[];
    public SEMI(i: number): antlr.TerminalNode | null;
    public SEMI(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.SEMI);
    	} else {
    		return this.getToken(PostgreSqlParser.SEMI, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rulestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRulestmt) {
             listener.enterRulestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRulestmt) {
             listener.exitRulestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRulestmt) {
            return visitor.visitRulestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RuleactionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public insertstmt(): InsertstmtContext | null {
        return this.getRuleContext(0, InsertstmtContext);
    }
    public updatestmt(): UpdatestmtContext | null {
        return this.getRuleContext(0, UpdatestmtContext);
    }
    public deletestmt(): DeletestmtContext | null {
        return this.getRuleContext(0, DeletestmtContext);
    }
    public notifystmt(): NotifystmtContext | null {
        return this.getRuleContext(0, NotifystmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_ruleactionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRuleactionstmt) {
             listener.enterRuleactionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRuleactionstmt) {
             listener.exitRuleactionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRuleactionstmt) {
            return visitor.visitRuleactionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotifystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NOTIFY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NOTIFY, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public notify_payload(): Notify_payloadContext | null {
        return this.getRuleContext(0, Notify_payloadContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_notifystmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNotifystmt) {
             listener.enterNotifystmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNotifystmt) {
             listener.exitNotifystmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotifystmt) {
            return visitor.visitNotifystmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Notify_payloadContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.COMMA, 0)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_notify_payload;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNotify_payload) {
             listener.enterNotify_payload(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNotify_payload) {
             listener.exitNotify_payload(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNotify_payload) {
            return visitor.visitNotify_payload(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ListenstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LISTEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LISTEN, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_listenstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterListenstmt) {
             listener.enterListenstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitListenstmt) {
             listener.exitListenstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitListenstmt) {
            return visitor.visitListenstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UnlistenstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNLISTEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_UNLISTEN, 0)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_unlistenstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterUnlistenstmt) {
             listener.enterUnlistenstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitUnlistenstmt) {
             listener.exitUnlistenstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnlistenstmt) {
            return visitor.visitUnlistenstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TransactionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BEGIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BEGIN, 0);
    }
    public opt_transaction(): Opt_transactionContext | null {
        return this.getRuleContext(0, Opt_transactionContext);
    }
    public transaction_mode_list(): Transaction_mode_listContext | null {
        return this.getRuleContext(0, Transaction_mode_listContext);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_START, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public KW_SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SAVEPOINT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_RELEASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELEASE, 0);
    }
    public KW_PREPARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PREPARE, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public KW_PREPARED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PREPARED, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMIT, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLBACK, 0);
    }
    public KW_ABORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABORT, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_END, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_CHAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAIN, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_transactionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTransactionstmt) {
             listener.enterTransactionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTransactionstmt) {
             listener.exitTransactionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransactionstmt) {
            return visitor.visitTransactionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_transactionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WORK, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_transaction;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_transaction) {
             listener.enterOpt_transaction(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_transaction) {
             listener.exitOpt_transaction(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_transaction) {
            return visitor.visitOpt_transaction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Transaction_mode_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ISOLATION, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEVEL, 0);
    }
    public iso_level(): Iso_levelContext | null {
        return this.getRuleContext(0, Iso_levelContext);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_READ, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public KW_WRITE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRITE, 0);
    }
    public KW_DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRABLE, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_transaction_mode_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTransaction_mode_item) {
             listener.enterTransaction_mode_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTransaction_mode_item) {
             listener.exitTransaction_mode_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransaction_mode_item) {
            return visitor.visitTransaction_mode_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Transaction_mode_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transaction_mode_item(): Transaction_mode_itemContext[];
    public transaction_mode_item(i: number): Transaction_mode_itemContext | null;
    public transaction_mode_item(i?: number): Transaction_mode_itemContext[] | Transaction_mode_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Transaction_mode_itemContext);
        }

        return this.getRuleContext(i, Transaction_mode_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_transaction_mode_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTransaction_mode_list) {
             listener.enterTransaction_mode_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTransaction_mode_list) {
             listener.exitTransaction_mode_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTransaction_mode_list) {
            return visitor.visitTransaction_mode_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ViewstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_viewstmt;
    }
    public override copyFrom(ctx: ViewstmtContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateViewContext extends ViewstmtContext {
    public constructor(ctx: ViewstmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public selectstmt(): SelectstmtContext {
        return this.getRuleContext(0, SelectstmtContext)!;
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public view_name_create(): View_name_createContext | null {
        return this.getRuleContext(0, View_name_createContext);
    }
    public KW_RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RECURSIVE, 0);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OR, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLACE, 0);
    }
    public opttemp(): OpttempContext | null {
        return this.getRuleContext(0, OpttempContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public opt_column_list_create(): Opt_column_list_createContext | null {
        return this.getRuleContext(0, Opt_column_list_createContext);
    }
    public opt_reloptions(): Opt_reloptionsContext | null {
        return this.getRuleContext(0, Opt_reloptionsContext);
    }
    public KW_CASCADED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADED, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateView) {
             listener.enterCreateView(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateView) {
             listener.exitCreateView(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateView) {
            return visitor.visitCreateView(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LoadstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOAD(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LOAD, 0)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_loadstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLoadstmt) {
             listener.enterLoadstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLoadstmt) {
             listener.exitLoadstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoadstmt) {
            return visitor.visitLoadstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatedbstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createdbstmt;
    }
    public override copyFrom(ctx: CreatedbstmtContext): void {
        super.copyFrom(ctx);
    }
}
export class CreateDatabaseContext extends CreatedbstmtContext {
    public constructor(ctx: CreatedbstmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0)!;
    }
    public database_name_create(): Database_name_createContext {
        return this.getRuleContext(0, Database_name_createContext)!;
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public createdb_opt_item(): Createdb_opt_itemContext[];
    public createdb_opt_item(i: number): Createdb_opt_itemContext | null;
    public createdb_opt_item(i?: number): Createdb_opt_itemContext[] | Createdb_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Createdb_opt_itemContext);
        }

        return this.getRuleContext(i, Createdb_opt_itemContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateDatabase) {
             listener.enterCreateDatabase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateDatabase) {
             listener.exitCreateDatabase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDatabase) {
            return visitor.visitCreateDatabase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Createdb_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONNECTION, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIMIT, 0);
    }
    public KW_ENCODING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENCODING, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCATION, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public signediconst(): SignediconstContext | null {
        return this.getRuleContext(0, SignediconstContext);
    }
    public opt_boolean_or_string(): Opt_boolean_or_stringContext | null {
        return this.getRuleContext(0, Opt_boolean_or_stringContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createdb_opt_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatedb_opt_item) {
             listener.enterCreatedb_opt_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatedb_opt_item) {
             listener.exitCreatedb_opt_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatedb_opt_item) {
            return visitor.visitCreatedb_opt_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterdatabasestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0)!;
    }
    public database_name(): Database_nameContext {
        return this.getRuleContext(0, Database_nameContext)!;
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public tablespace_name_create(): Tablespace_name_createContext | null {
        return this.getRuleContext(0, Tablespace_name_createContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public createdb_opt_item(): Createdb_opt_itemContext[];
    public createdb_opt_item(i: number): Createdb_opt_itemContext | null;
    public createdb_opt_item(i?: number): Createdb_opt_itemContext[] | Createdb_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Createdb_opt_itemContext);
        }

        return this.getRuleContext(i, Createdb_opt_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterdatabasestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterdatabasestmt) {
             listener.enterAlterdatabasestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterdatabasestmt) {
             listener.exitAlterdatabasestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterdatabasestmt) {
            return visitor.visitAlterdatabasestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterdatabasesetstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0)!;
    }
    public database_name(): Database_nameContext {
        return this.getRuleContext(0, Database_nameContext)!;
    }
    public setresetclause(): SetresetclauseContext | null {
        return this.getRuleContext(0, SetresetclauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterdatabasesetstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterdatabasesetstmt) {
             listener.enterAlterdatabasesetstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterdatabasesetstmt) {
             listener.exitAlterdatabasesetstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterdatabasesetstmt) {
            return visitor.visitAlterdatabasesetstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltercollationstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_COLLATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public KW_REFRESH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_REFRESH, 0)!;
    }
    public KW_VERSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VERSION, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altercollationstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltercollationstmt) {
             listener.enterAltercollationstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltercollationstmt) {
             listener.exitAltercollationstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltercollationstmt) {
            return visitor.visitAltercollationstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltersystemstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_SYSTEM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SYSTEM, 0)!;
    }
    public generic_set(): Generic_setContext {
        return this.getRuleContext(0, Generic_setContext)!;
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altersystemstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltersystemstmt) {
             listener.enterAltersystemstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltersystemstmt) {
             listener.exitAltersystemstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltersystemstmt) {
            return visitor.visitAltersystemstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatedomainstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_DOMAIN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public colconstraint(): ColconstraintContext[];
    public colconstraint(i: number): ColconstraintContext | null;
    public colconstraint(i?: number): ColconstraintContext[] | ColconstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColconstraintContext);
        }

        return this.getRuleContext(i, ColconstraintContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createdomainstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreatedomainstmt) {
             listener.enterCreatedomainstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreatedomainstmt) {
             listener.exitCreatedomainstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreatedomainstmt) {
            return visitor.visitCreatedomainstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterdomainstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_DOMAIN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public alter_column_default(): Alter_column_defaultContext | null {
        return this.getRuleContext(0, Alter_column_defaultContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public constraintelem(): ConstraintelemContext | null {
        return this.getRuleContext(0, ConstraintelemContext);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public opt_drop_behavior(): Opt_drop_behaviorContext | null {
        return this.getRuleContext(0, Opt_drop_behaviorContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alterdomainstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlterdomainstmt) {
             listener.enterAlterdomainstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlterdomainstmt) {
             listener.exitAlterdomainstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlterdomainstmt) {
            return visitor.visitAlterdomainstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltertsdictionarystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0)!;
    }
    public KW_TEXT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0)!;
    }
    public KW_SEARCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0)!;
    }
    public KW_DICTIONARY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public definition(): DefinitionContext {
        return this.getRuleContext(0, DefinitionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altertsdictionarystmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltertsdictionarystmt) {
             listener.enterAltertsdictionarystmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltertsdictionarystmt) {
             listener.exitAltertsdictionarystmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltertsdictionarystmt) {
            return visitor.visitAltertsdictionarystmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AltertsconfigurationstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALTER(): antlr.TerminalNode[];
    public KW_ALTER(i: number): antlr.TerminalNode | null;
    public KW_ALTER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ALTER);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ALTER, i);
    	}
    }
    public KW_TEXT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0)!;
    }
    public KW_SEARCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0)!;
    }
    public KW_CONFIGURATION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0)!;
    }
    public any_name(): Any_nameContext[];
    public any_name(i: number): Any_nameContext | null;
    public any_name(i?: number): Any_nameContext[] | Any_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Any_nameContext);
        }

        return this.getRuleContext(i, Any_nameContext);
    }
    public KW_MAPPING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MAPPING, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public any_name_list(): Any_name_listContext | null {
        return this.getRuleContext(0, Any_name_listContext);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLACE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public opt_if_exists(): Opt_if_existsContext | null {
        return this.getRuleContext(0, Opt_if_existsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_altertsconfigurationstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAltertsconfigurationstmt) {
             listener.enterAltertsconfigurationstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAltertsconfigurationstmt) {
             listener.exitAltertsconfigurationstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAltertsconfigurationstmt) {
            return visitor.visitAltertsconfigurationstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateconversionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0)!;
    }
    public KW_CONVERSION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0)!;
    }
    public any_name(): Any_nameContext[];
    public any_name(i: number): Any_nameContext | null;
    public any_name(i?: number): Any_nameContext[] | Any_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Any_nameContext);
        }

        return this.getRuleContext(i, Any_nameContext);
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public sconst(): SconstContext[];
    public sconst(i: number): SconstContext | null;
    public sconst(i?: number): SconstContext[] | SconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SconstContext);
        }

        return this.getRuleContext(i, SconstContext);
    }
    public KW_TO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TO, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_createconversionstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCreateconversionstmt) {
             listener.enterCreateconversionstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCreateconversionstmt) {
             listener.exitCreateconversionstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCreateconversionstmt) {
            return visitor.visitCreateconversionstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClusterstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLUSTER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CLUSTER, 0)!;
    }
    public opt_verbose(): Opt_verboseContext[];
    public opt_verbose(i: number): Opt_verboseContext | null;
    public opt_verbose(i?: number): Opt_verboseContext[] | Opt_verboseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_verboseContext);
        }

        return this.getRuleContext(i, Opt_verboseContext);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_clusterstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterClusterstmt) {
             listener.enterClusterstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitClusterstmt) {
             listener.exitClusterstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitClusterstmt) {
            return visitor.visitClusterstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class VacuumstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VACUUM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VACUUM, 0)!;
    }
    public vacuum_relation_list(): Vacuum_relation_listContext | null {
        return this.getRuleContext(0, Vacuum_relation_listContext);
    }
    public explain_option_list(): Explain_option_listContext | null {
        return this.getRuleContext(0, Explain_option_listContext);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FULL, 0);
    }
    public KW_FREEZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FREEZE, 0);
    }
    public opt_verbose(): Opt_verboseContext | null {
        return this.getRuleContext(0, Opt_verboseContext);
    }
    public analyze_keyword(): Analyze_keywordContext | null {
        return this.getRuleContext(0, Analyze_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_vacuumstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVacuumstmt) {
             listener.enterVacuumstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVacuumstmt) {
             listener.exitVacuumstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVacuumstmt) {
            return visitor.visitVacuumstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnalyzestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public analyze_keyword(): Analyze_keywordContext {
        return this.getRuleContext(0, Analyze_keywordContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public analyze_option_elem(): Analyze_option_elemContext[];
    public analyze_option_elem(i: number): Analyze_option_elemContext | null;
    public analyze_option_elem(i?: number): Analyze_option_elemContext[] | Analyze_option_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Analyze_option_elemContext);
        }

        return this.getRuleContext(i, Analyze_option_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public vacuum_relation_list(): Vacuum_relation_listContext | null {
        return this.getRuleContext(0, Vacuum_relation_listContext);
    }
    public opt_verbose(): Opt_verboseContext | null {
        return this.getRuleContext(0, Opt_verboseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_analyzestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnalyzestmt) {
             listener.enterAnalyzestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnalyzestmt) {
             listener.exitAnalyzestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyzestmt) {
            return visitor.visitAnalyzestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Analyze_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANALYZE, 0);
    }
    public KW_ANALYSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANALYSE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_analyze_keyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnalyze_keyword) {
             listener.enterAnalyze_keyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnalyze_keyword) {
             listener.exitAnalyze_keyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyze_keyword) {
            return visitor.visitAnalyze_keyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Vac_analyze_option_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonreservedword(): NonreservedwordContext | null {
        return this.getRuleContext(0, NonreservedwordContext);
    }
    public analyze_keyword(): Analyze_keywordContext | null {
        return this.getRuleContext(0, Analyze_keywordContext);
    }
    public opt_boolean_or_string(): Opt_boolean_or_stringContext | null {
        return this.getRuleContext(0, Opt_boolean_or_stringContext);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_vac_analyze_option_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVac_analyze_option_elem) {
             listener.enterVac_analyze_option_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVac_analyze_option_elem) {
             listener.exitVac_analyze_option_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVac_analyze_option_elem) {
            return visitor.visitVac_analyze_option_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Analyze_option_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SKIP_LOCKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SKIP_LOCKED, 0);
    }
    public KW_VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VERBOSE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public KW_BUFFER_USAGE_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BUFFER_USAGE_LIMIT, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_analyze_option_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnalyze_option_elem) {
             listener.enterAnalyze_option_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnalyze_option_elem) {
             listener.exitAnalyze_option_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnalyze_option_elem) {
            return visitor.visitAnalyze_option_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_verboseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VERBOSE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VERBOSE, 0)!;
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_verbose;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_verbose) {
             listener.enterOpt_verbose(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_verbose) {
             listener.exitOpt_verbose(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_verbose) {
            return visitor.visitOpt_verbose(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Vacuum_relationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_name(): Table_nameContext {
        return this.getRuleContext(0, Table_nameContext)!;
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_vacuum_relation;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVacuum_relation) {
             listener.enterVacuum_relation(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVacuum_relation) {
             listener.exitVacuum_relation(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVacuum_relation) {
            return visitor.visitVacuum_relation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Vacuum_relation_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public vacuum_relation(): Vacuum_relationContext[];
    public vacuum_relation(i: number): Vacuum_relationContext | null;
    public vacuum_relation(i?: number): Vacuum_relationContext[] | Vacuum_relationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Vacuum_relationContext);
        }

        return this.getRuleContext(i, Vacuum_relationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_vacuum_relation_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterVacuum_relation_list) {
             listener.enterVacuum_relation_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitVacuum_relation_list) {
             listener.exitVacuum_relation_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitVacuum_relation_list) {
            return visitor.visitVacuum_relation_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXPLAIN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXPLAIN, 0)!;
    }
    public explainablestmt(): ExplainablestmtContext {
        return this.getRuleContext(0, ExplainablestmtContext)!;
    }
    public explain_option_list(): Explain_option_listContext | null {
        return this.getRuleContext(0, Explain_option_listContext);
    }
    public KW_VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VERBOSE, 0);
    }
    public analyze_keyword(): Analyze_keywordContext | null {
        return this.getRuleContext(0, Analyze_keywordContext);
    }
    public opt_verbose(): Opt_verboseContext | null {
        return this.getRuleContext(0, Opt_verboseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_explainstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExplainstmt) {
             listener.enterExplainstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExplainstmt) {
             listener.exitExplainstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplainstmt) {
            return visitor.visitExplainstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainablestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public insertstmt(): InsertstmtContext | null {
        return this.getRuleContext(0, InsertstmtContext);
    }
    public updatestmt(): UpdatestmtContext | null {
        return this.getRuleContext(0, UpdatestmtContext);
    }
    public deletestmt(): DeletestmtContext | null {
        return this.getRuleContext(0, DeletestmtContext);
    }
    public declarecursorstmt(): DeclarecursorstmtContext | null {
        return this.getRuleContext(0, DeclarecursorstmtContext);
    }
    public createasstmt(): CreateasstmtContext | null {
        return this.getRuleContext(0, CreateasstmtContext);
    }
    public creatematviewstmt(): CreatematviewstmtContext | null {
        return this.getRuleContext(0, CreatematviewstmtContext);
    }
    public refreshmatviewstmt(): RefreshmatviewstmtContext | null {
        return this.getRuleContext(0, RefreshmatviewstmtContext);
    }
    public executestmt(): ExecutestmtContext | null {
        return this.getRuleContext(0, ExecutestmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_explainablestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExplainablestmt) {
             listener.enterExplainablestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExplainablestmt) {
             listener.exitExplainablestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplainablestmt) {
            return visitor.visitExplainablestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Explain_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public vac_analyze_option_elem(): Vac_analyze_option_elemContext[];
    public vac_analyze_option_elem(i: number): Vac_analyze_option_elemContext | null;
    public vac_analyze_option_elem(i?: number): Vac_analyze_option_elemContext[] | Vac_analyze_option_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Vac_analyze_option_elemContext);
        }

        return this.getRuleContext(i, Vac_analyze_option_elemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_explain_option_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExplain_option_list) {
             listener.enterExplain_option_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExplain_option_list) {
             listener.exitExplain_option_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplain_option_list) {
            return visitor.visitExplain_option_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PreparestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PREPARE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PREPARE, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public preparablestmt(): PreparablestmtContext {
        return this.getRuleContext(0, PreparablestmtContext)!;
    }
    public prep_type_clause(): Prep_type_clauseContext | null {
        return this.getRuleContext(0, Prep_type_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_preparestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPreparestmt) {
             listener.enterPreparestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPreparestmt) {
             listener.exitPreparestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPreparestmt) {
            return visitor.visitPreparestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Prep_type_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_prep_type_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrep_type_clause) {
             listener.enterPrep_type_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrep_type_clause) {
             listener.exitPrep_type_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrep_type_clause) {
            return visitor.visitPrep_type_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PreparablestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public insertstmt(): InsertstmtContext | null {
        return this.getRuleContext(0, InsertstmtContext);
    }
    public updatestmt(): UpdatestmtContext | null {
        return this.getRuleContext(0, UpdatestmtContext);
    }
    public deletestmt(): DeletestmtContext | null {
        return this.getRuleContext(0, DeletestmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_preparablestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPreparablestmt) {
             listener.enterPreparablestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPreparablestmt) {
             listener.exitPreparablestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPreparablestmt) {
            return visitor.visitPreparablestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExecutestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public create_as_target(): Create_as_targetContext | null {
        return this.getRuleContext(0, Create_as_targetContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public opttemp(): OpttempContext | null {
        return this.getRuleContext(0, OpttempContext);
    }
    public opt_if_not_exists(): Opt_if_not_existsContext | null {
        return this.getRuleContext(0, Opt_if_not_existsContext);
    }
    public opt_with_data(): Opt_with_dataContext | null {
        return this.getRuleContext(0, Opt_with_dataContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_executestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExecutestmt) {
             listener.enterExecutestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExecutestmt) {
             listener.exitExecutestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExecutestmt) {
            return visitor.visitExecutestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Execute_param_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_execute_param_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExecute_param_clause) {
             listener.enterExecute_param_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExecute_param_clause) {
             listener.exitExecute_param_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExecute_param_clause) {
            return visitor.visitExecute_param_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeallocatestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DEALLOCATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DEALLOCATE, 0)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_PREPARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PREPARE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_deallocatestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDeallocatestmt) {
             listener.enterDeallocatestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDeallocatestmt) {
             listener.exitDeallocatestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeallocatestmt) {
            return visitor.visitDeallocatestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_insertstmt;
    }
    public override copyFrom(ctx: InsertstmtContext): void {
        super.copyFrom(ctx);
    }
}
export class InsertStatementContext extends InsertstmtContext {
    public constructor(ctx: InsertstmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public table_name(): Table_nameContext {
        return this.getRuleContext(0, Table_nameContext)!;
    }
    public insert_rest(): Insert_restContext {
        return this.getRuleContext(0, Insert_restContext)!;
    }
    public with_clause(): With_clauseContext | null {
        return this.getRuleContext(0, With_clauseContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_ON(): antlr.TerminalNode[];
    public KW_ON(i: number): antlr.TerminalNode | null;
    public KW_ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ON);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ON, i);
    	}
    }
    public KW_CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFLICT, 0);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DO, 0);
    }
    public returning_clause(): Returning_clauseContext | null {
        return this.getRuleContext(0, Returning_clauseContext);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public set_clause_list(): Set_clause_listContext | null {
        return this.getRuleContext(0, Set_clause_listContext);
    }
    public KW_NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTHING, 0);
    }
    public index_params(): Index_paramsContext | null {
        return this.getRuleContext(0, Index_paramsContext);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public where_clause(): Where_clauseContext[];
    public where_clause(i: number): Where_clauseContext | null;
    public where_clause(i?: number): Where_clauseContext[] | Where_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Where_clauseContext);
        }

        return this.getRuleContext(i, Where_clauseContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInsertStatement) {
             listener.enterInsertStatement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInsertStatement) {
             listener.exitInsertStatement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsertStatement) {
            return visitor.visitInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Insert_restContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public default_values_or_values(): Default_values_or_valuesContext | null {
        return this.getRuleContext(0, Default_values_or_valuesContext);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public insert_column_list(): Insert_column_listContext | null {
        return this.getRuleContext(0, Insert_column_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_OVERRIDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERRIDING, 0);
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSTEM, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_insert_rest;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInsert_rest) {
             listener.enterInsert_rest(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInsert_rest) {
             listener.exitInsert_rest(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsert_rest) {
            return visitor.visitInsert_rest(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Insert_column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insert_column_item(): Insert_column_itemContext[];
    public insert_column_item(i: number): Insert_column_itemContext | null;
    public insert_column_item(i?: number): Insert_column_itemContext[] | Insert_column_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Insert_column_itemContext);
        }

        return this.getRuleContext(i, Insert_column_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_insert_column_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInsert_column_list) {
             listener.enterInsert_column_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInsert_column_list) {
             listener.exitInsert_column_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsert_column_list) {
            return visitor.visitInsert_column_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Insert_column_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_name(): Column_nameContext {
        return this.getRuleContext(0, Column_nameContext)!;
    }
    public opt_indirection(): Opt_indirectionContext {
        return this.getRuleContext(0, Opt_indirectionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_insert_column_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInsert_column_item) {
             listener.enterInsert_column_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInsert_column_item) {
             listener.exitInsert_column_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInsert_column_item) {
            return visitor.visitInsert_column_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Returning_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RETURNING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_RETURNING, 0)!;
    }
    public target_list(): Target_listContext {
        return this.getRuleContext(0, Target_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_returning_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReturning_clause) {
             listener.enterReturning_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReturning_clause) {
             listener.exitReturning_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReturning_clause) {
            return visitor.visitReturning_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeletestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DELETE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public relation_expr_opt_alias(): Relation_expr_opt_aliasContext {
        return this.getRuleContext(0, Relation_expr_opt_aliasContext)!;
    }
    public with_clause(): With_clauseContext | null {
        return this.getRuleContext(0, With_clauseContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public from_list(): From_listContext | null {
        return this.getRuleContext(0, From_listContext);
    }
    public where_or_current_clause(): Where_or_current_clauseContext | null {
        return this.getRuleContext(0, Where_or_current_clauseContext);
    }
    public returning_clause(): Returning_clauseContext | null {
        return this.getRuleContext(0, Returning_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_deletestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDeletestmt) {
             listener.enterDeletestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDeletestmt) {
             listener.exitDeletestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeletestmt) {
            return visitor.visitDeletestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LockstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOCK(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LOCK, 0)!;
    }
    public relation_expr_list(): Relation_expr_listContext {
        return this.getRuleContext(0, Relation_expr_listContext)!;
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_MODE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MODE, 0);
    }
    public KW_NOWAIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOWAIT, 0);
    }
    public KW_SHARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SHARE, 0);
    }
    public KW_EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUSIVE, 0);
    }
    public KW_ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACCESS, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_lockstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLockstmt) {
             listener.enterLockstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLockstmt) {
             listener.exitLockstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLockstmt) {
            return visitor.visitLockstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UpdatestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0)!;
    }
    public relation_expr_opt_alias(): Relation_expr_opt_aliasContext {
        return this.getRuleContext(0, Relation_expr_opt_aliasContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public set_clause_list(): Set_clause_listContext {
        return this.getRuleContext(0, Set_clause_listContext)!;
    }
    public with_clause(): With_clauseContext | null {
        return this.getRuleContext(0, With_clauseContext);
    }
    public from_clause(): From_clauseContext | null {
        return this.getRuleContext(0, From_clauseContext);
    }
    public where_or_current_clause(): Where_or_current_clauseContext | null {
        return this.getRuleContext(0, Where_or_current_clauseContext);
    }
    public returning_clause(): Returning_clauseContext | null {
        return this.getRuleContext(0, Returning_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_updatestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterUpdatestmt) {
             listener.enterUpdatestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitUpdatestmt) {
             listener.exitUpdatestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUpdatestmt) {
            return visitor.visitUpdatestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_clause_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_clause(): Set_clauseContext[];
    public set_clause(i: number): Set_clauseContext | null;
    public set_clause(i?: number): Set_clauseContext[] | Set_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Set_clauseContext);
        }

        return this.getRuleContext(i, Set_clauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_set_clause_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSet_clause_list) {
             listener.enterSet_clause_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSet_clause_list) {
             listener.exitSet_clause_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSet_clause_list) {
            return visitor.visitSet_clause_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insert_column_item(): Insert_column_itemContext | null {
        return this.getRuleContext(0, Insert_column_itemContext);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.EQUAL, 0)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public insert_column_list(): Insert_column_listContext | null {
        return this.getRuleContext(0, Insert_column_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public select_clause(): Select_clauseContext | null {
        return this.getRuleContext(0, Select_clauseContext);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_set_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSet_clause) {
             listener.enterSet_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSet_clause) {
             listener.exitSet_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSet_clause) {
            return visitor.visitSet_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeclarecursorstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DECLARE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DECLARE, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_CURSOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CURSOR, 0)!;
    }
    public KW_FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOR, 0)!;
    }
    public selectstmt(): SelectstmtContext {
        return this.getRuleContext(0, SelectstmtContext)!;
    }
    public KW_HOLD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HOLD, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public KW_BINARY(): antlr.TerminalNode[];
    public KW_BINARY(i: number): antlr.TerminalNode | null;
    public KW_BINARY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_BINARY);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_BINARY, i);
    	}
    }
    public KW_INSENSITIVE(): antlr.TerminalNode[];
    public KW_INSENSITIVE(i: number): antlr.TerminalNode | null;
    public KW_INSENSITIVE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_INSENSITIVE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_INSENSITIVE, i);
    	}
    }
    public KW_SCROLL(): antlr.TerminalNode[];
    public KW_SCROLL(i: number): antlr.TerminalNode | null;
    public KW_SCROLL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_SCROLL);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_SCROLL, i);
    	}
    }
    public KW_NO(): antlr.TerminalNode[];
    public KW_NO(i: number): antlr.TerminalNode | null;
    public KW_NO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NO);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NO, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_declarecursorstmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDeclarecursorstmt) {
             listener.enterDeclarecursorstmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDeclarecursorstmt) {
             listener.exitDeclarecursorstmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDeclarecursorstmt) {
            return visitor.visitDeclarecursorstmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_selectstmt;
    }
    public override copyFrom(ctx: SelectstmtContext): void {
        super.copyFrom(ctx);
    }
}
export class SelectStatementContext extends SelectstmtContext {
    public constructor(ctx: SelectstmtContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public select_no_parens(): Select_no_parensContext | null {
        return this.getRuleContext(0, Select_no_parensContext);
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelectStatement) {
             listener.enterSelectStatement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelectStatement) {
             listener.exitSelectStatement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStatement) {
            return visitor.visitSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_with_parensContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public select_no_parens(): Select_no_parensContext | null {
        return this.getRuleContext(0, Select_no_parensContext);
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_select_with_parens;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelect_with_parens) {
             listener.enterSelect_with_parens(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelect_with_parens) {
             listener.exitSelect_with_parens(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelect_with_parens) {
            return visitor.visitSelect_with_parens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_no_parensContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_clause(): Select_clauseContext {
        return this.getRuleContext(0, Select_clauseContext)!;
    }
    public with_clause(): With_clauseContext | null {
        return this.getRuleContext(0, With_clauseContext);
    }
    public sort_clause(): Sort_clauseContext | null {
        return this.getRuleContext(0, Sort_clauseContext);
    }
    public for_locking_clause(): For_locking_clauseContext | null {
        return this.getRuleContext(0, For_locking_clauseContext);
    }
    public select_limit(): Select_limitContext | null {
        return this.getRuleContext(0, Select_limitContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_select_no_parens;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelect_no_parens) {
             listener.enterSelect_no_parens(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelect_no_parens) {
             listener.exitSelect_no_parens(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelect_no_parens) {
            return visitor.visitSelect_no_parens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simple_select(): Simple_selectContext | null {
        return this.getRuleContext(0, Simple_selectContext);
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_select_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelect_clause) {
             listener.enterSelect_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelect_clause) {
             listener.exitSelect_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelect_clause) {
            return visitor.visitSelect_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Simple_selectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public sql_expression(): Sql_expressionContext | null {
        return this.getRuleContext(0, Sql_expressionContext);
    }
    public values_clause(): Values_clauseContext | null {
        return this.getRuleContext(0, Values_clauseContext);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public relation_expr(): Relation_exprContext | null {
        return this.getRuleContext(0, Relation_exprContext);
    }
    public select_with_parens(): Select_with_parensContext[];
    public select_with_parens(i: number): Select_with_parensContext | null;
    public select_with_parens(i?: number): Select_with_parensContext[] | Select_with_parensContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Select_with_parensContext);
        }

        return this.getRuleContext(i, Select_with_parensContext);
    }
    public set_operator_with_all_or_distinct(): Set_operator_with_all_or_distinctContext[];
    public set_operator_with_all_or_distinct(i: number): Set_operator_with_all_or_distinctContext | null;
    public set_operator_with_all_or_distinct(i?: number): Set_operator_with_all_or_distinctContext[] | Set_operator_with_all_or_distinctContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Set_operator_with_all_or_distinctContext);
        }

        return this.getRuleContext(i, Set_operator_with_all_or_distinctContext);
    }
    public simple_select(): Simple_selectContext[];
    public simple_select(i: number): Simple_selectContext | null;
    public simple_select(i?: number): Simple_selectContext[] | Simple_selectContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Simple_selectContext);
        }

        return this.getRuleContext(i, Simple_selectContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public into_clause(): Into_clauseContext | null {
        return this.getRuleContext(0, Into_clauseContext);
    }
    public distinct_clause(): Distinct_clauseContext | null {
        return this.getRuleContext(0, Distinct_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_simple_select;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSimple_select) {
             listener.enterSimple_select(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSimple_select) {
             listener.exitSimple_select(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimple_select) {
            return visitor.visitSimple_select(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Set_operator_with_all_or_distinctContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNION, 0);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERSECT, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCEPT, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_set_operator_with_all_or_distinct;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSet_operator_with_all_or_distinct) {
             listener.enterSet_operator_with_all_or_distinct(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSet_operator_with_all_or_distinct) {
             listener.exitSet_operator_with_all_or_distinct(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSet_operator_with_all_or_distinct) {
            return visitor.visitSet_operator_with_all_or_distinct(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class With_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WITH, 0)!;
    }
    public common_table_expr(): Common_table_exprContext[];
    public common_table_expr(i: number): Common_table_exprContext | null;
    public common_table_expr(i?: number): Common_table_exprContext[] | Common_table_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Common_table_exprContext);
        }

        return this.getRuleContext(i, Common_table_exprContext);
    }
    public KW_RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RECURSIVE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_with_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWith_clause) {
             listener.enterWith_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWith_clause) {
             listener.exitWith_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWith_clause) {
            return visitor.visitWith_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Common_table_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public preparablestmt(): PreparablestmtContext {
        return this.getRuleContext(0, PreparablestmtContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public search_cluase(): Search_cluaseContext | null {
        return this.getRuleContext(0, Search_cluaseContext);
    }
    public cycle_cluase(): Cycle_cluaseContext | null {
        return this.getRuleContext(0, Cycle_cluaseContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_common_table_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCommon_table_expr) {
             listener.enterCommon_table_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCommon_table_expr) {
             listener.exitCommon_table_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCommon_table_expr) {
            return visitor.visitCommon_table_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Search_cluaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SEARCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0)!;
    }
    public KW_FIRST(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public column_list(): Column_listContext {
        return this.getRuleContext(0, Column_listContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public column_name(): Column_nameContext {
        return this.getRuleContext(0, Column_nameContext)!;
    }
    public KW_BREADTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BREADTH, 0);
    }
    public KW_DEPTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEPTH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_search_cluase;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSearch_cluase) {
             listener.enterSearch_cluase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSearch_cluase) {
             listener.exitSearch_cluase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSearch_cluase) {
            return visitor.visitSearch_cluase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Cycle_cluaseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CYCLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CYCLE, 0)!;
    }
    public column_list(): Column_listContext {
        return this.getRuleContext(0, Column_listContext)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public column_name(): Column_nameContext[];
    public column_name(i: number): Column_nameContext | null;
    public column_name(i?: number): Column_nameContext[] | Column_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_nameContext);
        }

        return this.getRuleContext(i, Column_nameContext);
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_cycle_cluase;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCycle_cluase) {
             listener.enterCycle_cluase(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCycle_cluase) {
             listener.exitCycle_cluase(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCycle_cluase) {
            return visitor.visitCycle_cluase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Into_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public opttempTableName(): OpttempTableNameContext | null {
        return this.getRuleContext(0, OpttempTableNameContext);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public KW_STRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRICT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_into_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInto_clause) {
             listener.enterInto_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInto_clause) {
             listener.exitInto_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInto_clause) {
            return visitor.visitInto_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OpttempTableNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_name_create(): Table_name_createContext {
        return this.getRuleContext(0, Table_name_createContext)!;
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMP, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GLOBAL, 0);
    }
    public KW_UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLOGGED, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opttempTableName;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpttempTableName) {
             listener.enterOpttempTableName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpttempTableName) {
             listener.exitOpttempTableName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpttempTableName) {
            return visitor.visitOpttempTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Distinct_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DISTINCT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0)!;
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_distinct_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDistinct_clause) {
             listener.enterDistinct_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDistinct_clause) {
             listener.exitDistinct_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDistinct_clause) {
            return visitor.visitDistinct_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sort_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ORDER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ORDER, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public sortby(): SortbyContext[];
    public sortby(i: number): SortbyContext | null;
    public sortby(i?: number): SortbyContext[] | SortbyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortbyContext);
        }

        return this.getRuleContext(i, SortbyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sort_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSort_clause) {
             listener.enterSort_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSort_clause) {
             listener.exitSort_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSort_clause) {
            return visitor.visitSort_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortbyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_expr_noparen(): Column_expr_noparenContext {
        return this.getRuleContext(0, Column_expr_noparenContext)!;
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public qual_all_op(): Qual_all_opContext | null {
        return this.getRuleContext(0, Qual_all_opContext);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASC, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DESC, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LAST, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sortby;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSortby) {
             listener.enterSortby(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSortby) {
             listener.exitSortby(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSortby) {
            return visitor.visitSortby(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_limitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public offset_clause(): Offset_clauseContext | null {
        return this.getRuleContext(0, Offset_clauseContext);
    }
    public fetch_clause(): Fetch_clauseContext | null {
        return this.getRuleContext(0, Fetch_clauseContext);
    }
    public limit_clause(): Limit_clauseContext | null {
        return this.getRuleContext(0, Limit_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_select_limit;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelect_limit) {
             listener.enterSelect_limit(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelect_limit) {
             listener.exitSelect_limit(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelect_limit) {
            return visitor.visitSelect_limit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Limit_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LIMIT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_LIMIT, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_limit_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLimit_clause) {
             listener.enterLimit_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLimit_clause) {
             listener.exitLimit_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLimit_clause) {
            return visitor.visitLimit_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Fetch_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FETCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FETCH, 0)!;
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_TIES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIES, 0);
    }
    public select_fetch_first_value(): Select_fetch_first_valueContext | null {
        return this.getRuleContext(0, Select_fetch_first_valueContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_fetch_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFetch_clause) {
             listener.enterFetch_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFetch_clause) {
             listener.exitFetch_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFetch_clause) {
            return visitor.visitFetch_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Offset_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OFFSET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OFFSET, 0)!;
    }
    public select_fetch_first_value(): Select_fetch_first_valueContext | null {
        return this.getRuleContext(0, Select_fetch_first_valueContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_offset_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOffset_clause) {
             listener.enterOffset_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOffset_clause) {
             listener.exitOffset_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOffset_clause) {
            return visitor.visitOffset_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Select_fetch_first_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public Numeric(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Numeric, 0);
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_select_fetch_first_value;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSelect_fetch_first_value) {
             listener.enterSelect_fetch_first_value(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSelect_fetch_first_value) {
             listener.exitSelect_fetch_first_value(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSelect_fetch_first_value) {
            return visitor.visitSelect_fetch_first_value(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Group_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GROUP(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0)!;
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public group_by_list(): Group_by_listContext {
        return this.getRuleContext(0, Group_by_listContext)!;
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_group_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGroup_clause) {
             listener.enterGroup_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGroup_clause) {
             listener.exitGroup_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroup_clause) {
            return visitor.visitGroup_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Group_by_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public group_by_item(): Group_by_itemContext[];
    public group_by_item(i: number): Group_by_itemContext | null;
    public group_by_item(i?: number): Group_by_itemContext[] | Group_by_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Group_by_itemContext);
        }

        return this.getRuleContext(i, Group_by_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_group_by_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGroup_by_list) {
             listener.enterGroup_by_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGroup_by_list) {
             listener.exitGroup_by_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroup_by_list) {
            return visitor.visitGroup_by_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Group_by_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public column_expr_noparen(): Column_expr_noparenContext[];
    public column_expr_noparen(i: number): Column_expr_noparenContext | null;
    public column_expr_noparen(i?: number): Column_expr_noparenContext[] | Column_expr_noparenContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_expr_noparenContext);
        }

        return this.getRuleContext(i, Column_expr_noparenContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CUBE, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLUP, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUPING, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SETS, 0);
    }
    public group_by_list(): Group_by_listContext | null {
        return this.getRuleContext(0, Group_by_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_group_by_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGroup_by_item) {
             listener.enterGroup_by_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGroup_by_item) {
             listener.exitGroup_by_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGroup_by_item) {
            return visitor.visitGroup_by_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class For_locking_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOR(): antlr.TerminalNode[];
    public KW_FOR(i: number): antlr.TerminalNode | null;
    public KW_FOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_FOR);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_FOR, i);
    	}
    }
    public KW_UPDATE(): antlr.TerminalNode[];
    public KW_UPDATE(i: number): antlr.TerminalNode | null;
    public KW_UPDATE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_UPDATE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_UPDATE, i);
    	}
    }
    public KW_SHARE(): antlr.TerminalNode[];
    public KW_SHARE(i: number): antlr.TerminalNode | null;
    public KW_SHARE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_SHARE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_SHARE, i);
    	}
    }
    public KW_OF(): antlr.TerminalNode[];
    public KW_OF(i: number): antlr.TerminalNode | null;
    public KW_OF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_OF);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_OF, i);
    	}
    }
    public qualified_name_list(): Qualified_name_listContext[];
    public qualified_name_list(i: number): Qualified_name_listContext | null;
    public qualified_name_list(i?: number): Qualified_name_listContext[] | Qualified_name_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Qualified_name_listContext);
        }

        return this.getRuleContext(i, Qualified_name_listContext);
    }
    public KW_NOWAIT(): antlr.TerminalNode[];
    public KW_NOWAIT(i: number): antlr.TerminalNode | null;
    public KW_NOWAIT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NOWAIT);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NOWAIT, i);
    	}
    }
    public KW_SKIP(): antlr.TerminalNode[];
    public KW_SKIP(i: number): antlr.TerminalNode | null;
    public KW_SKIP(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_SKIP);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_SKIP, i);
    	}
    }
    public KW_LOCKED(): antlr.TerminalNode[];
    public KW_LOCKED(i: number): antlr.TerminalNode | null;
    public KW_LOCKED(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_LOCKED);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_LOCKED, i);
    	}
    }
    public KW_NO(): antlr.TerminalNode[];
    public KW_NO(i: number): antlr.TerminalNode | null;
    public KW_NO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NO);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NO, i);
    	}
    }
    public KW_KEY(): antlr.TerminalNode[];
    public KW_KEY(i: number): antlr.TerminalNode | null;
    public KW_KEY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_KEY);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_KEY, i);
    	}
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_READ, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_for_locking_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFor_locking_clause) {
             listener.enterFor_locking_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFor_locking_clause) {
             listener.exitFor_locking_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFor_locking_clause) {
            return visitor.visitFor_locking_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Values_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VALUES, 0)!;
    }
    public execute_param_clause(): Execute_param_clauseContext[];
    public execute_param_clause(i: number): Execute_param_clauseContext | null;
    public execute_param_clause(i?: number): Execute_param_clauseContext[] | Execute_param_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Execute_param_clauseContext);
        }

        return this.getRuleContext(i, Execute_param_clauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_values_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterValues_clause) {
             listener.enterValues_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitValues_clause) {
             listener.exitValues_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitValues_clause) {
            return visitor.visitValues_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class From_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public from_list(): From_listContext {
        return this.getRuleContext(0, From_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_from_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFrom_clause) {
             listener.enterFrom_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFrom_clause) {
             listener.exitFrom_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrom_clause) {
            return visitor.visitFrom_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class From_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_ref(): Table_refContext[];
    public table_ref(i: number): Table_refContext | null;
    public table_ref(i?: number): Table_refContext[] | Table_refContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_refContext);
        }

        return this.getRuleContext(i, Table_refContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_from_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFrom_list) {
             listener.enterFrom_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFrom_list) {
             listener.exitFrom_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrom_list) {
            return visitor.visitFrom_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public table_ref(): Table_refContext[];
    public table_ref(i: number): Table_refContext | null;
    public table_ref(i?: number): Table_refContext[] | Table_refContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_refContext);
        }

        return this.getRuleContext(i, Table_refContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_CROSS(): antlr.TerminalNode[];
    public KW_CROSS(i: number): antlr.TerminalNode | null;
    public KW_CROSS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_CROSS);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_CROSS, i);
    	}
    }
    public KW_JOIN(): antlr.TerminalNode[];
    public KW_JOIN(i: number): antlr.TerminalNode | null;
    public KW_JOIN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_JOIN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_JOIN, i);
    	}
    }
    public KW_NATURAL(): antlr.TerminalNode[];
    public KW_NATURAL(i: number): antlr.TerminalNode | null;
    public KW_NATURAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NATURAL);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NATURAL, i);
    	}
    }
    public join_qual(): Join_qualContext[];
    public join_qual(i: number): Join_qualContext | null;
    public join_qual(i?: number): Join_qualContext[] | Join_qualContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Join_qualContext);
        }

        return this.getRuleContext(i, Join_qualContext);
    }
    public relation_expr(): Relation_exprContext | null {
        return this.getRuleContext(0, Relation_exprContext);
    }
    public xmltable(): XmltableContext | null {
        return this.getRuleContext(0, XmltableContext);
    }
    public func_table(): Func_tableContext | null {
        return this.getRuleContext(0, Func_tableContext);
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public alias_clause(): Alias_clauseContext | null {
        return this.getRuleContext(0, Alias_clauseContext);
    }
    public tablesample_clause(): Tablesample_clauseContext | null {
        return this.getRuleContext(0, Tablesample_clauseContext);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LATERAL, 0);
    }
    public view_name(): View_nameContext | null {
        return this.getRuleContext(0, View_nameContext);
    }
    public join_type(): Join_typeContext[];
    public join_type(i: number): Join_typeContext | null;
    public join_type(i?: number): Join_typeContext[] | Join_typeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Join_typeContext);
        }

        return this.getRuleContext(i, Join_typeContext);
    }
    public func_alias_clause(): Func_alias_clauseContext | null {
        return this.getRuleContext(0, Func_alias_clauseContext);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public column_list(): Column_listContext | null {
        return this.getRuleContext(0, Column_listContext);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_table_ref;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTable_ref) {
             listener.enterTable_ref(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTable_ref) {
             listener.exitTable_ref(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTable_ref) {
            return visitor.visitTable_ref(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Alias_clauseContext extends antlr.ParserRuleContext {
    public _alias?: ColidContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_alias_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAlias_clause) {
             listener.enterAlias_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAlias_clause) {
             listener.exitAlias_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAlias_clause) {
            return visitor.visitAlias_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_alias_clauseContext extends antlr.ParserRuleContext {
    public _alias?: ColidContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alias_clause(): Alias_clauseContext | null {
        return this.getRuleContext(0, Alias_clauseContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public tablefuncelementlist(): TablefuncelementlistContext | null {
        return this.getRuleContext(0, TablefuncelementlistContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_alias_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_alias_clause) {
             listener.enterFunc_alias_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_alias_clause) {
             listener.exitFunc_alias_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_alias_clause) {
            return visitor.visitFunc_alias_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Join_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FULL, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEFT, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RIGHT, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INNER, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OUTER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_join_type;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterJoin_type) {
             listener.enterJoin_type(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitJoin_type) {
             listener.exitJoin_type(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoin_type) {
            return visitor.visitJoin_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Join_qualContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_join_qual;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterJoin_qual) {
             listener.enterJoin_qual(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitJoin_qual) {
             listener.exitJoin_qual(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitJoin_qual) {
            return visitor.visitJoin_qual(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Relation_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public truncate_table(): Truncate_tableContext | null {
        return this.getRuleContext(0, Truncate_tableContext);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name(): Schema_nameContext | null {
        return this.getRuleContext(0, Schema_nameContext);
    }
    public KW_CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_SCHEMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_relation_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRelation_expr) {
             listener.enterRelation_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRelation_expr) {
             listener.exitRelation_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelation_expr) {
            return visitor.visitRelation_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Publication_relation_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public truncate_table(): Truncate_tableContext | null {
        return this.getRuleContext(0, Truncate_tableContext);
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLES, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public schema_name(): Schema_nameContext | null {
        return this.getRuleContext(0, Schema_nameContext);
    }
    public KW_CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_SCHEMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_publication_relation_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPublication_relation_expr) {
             listener.enterPublication_relation_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPublication_relation_expr) {
             listener.exitPublication_relation_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPublication_relation_expr) {
            return visitor.visitPublication_relation_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Relation_expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relation_expr(): Relation_exprContext[];
    public relation_expr(i: number): Relation_exprContext | null;
    public relation_expr(i?: number): Relation_exprContext[] | Relation_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Relation_exprContext);
        }

        return this.getRuleContext(i, Relation_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_relation_expr_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRelation_expr_list) {
             listener.enterRelation_expr_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRelation_expr_list) {
             listener.exitRelation_expr_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelation_expr_list) {
            return visitor.visitRelation_expr_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Relation_expr_opt_aliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relation_expr(): Relation_exprContext {
        return this.getRuleContext(0, Relation_exprContext)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_relation_expr_opt_alias;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRelation_expr_opt_alias) {
             listener.enterRelation_expr_opt_alias(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRelation_expr_opt_alias) {
             listener.exitRelation_expr_opt_alias(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRelation_expr_opt_alias) {
            return visitor.visitRelation_expr_opt_alias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Tablesample_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TABLESAMPLE, 0)!;
    }
    public function_name(): Function_nameContext {
        return this.getRuleContext(0, Function_nameContext)!;
    }
    public execute_param_clause(): Execute_param_clauseContext {
        return this.getRuleContext(0, Execute_param_clauseContext)!;
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPEATABLE, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tablesample_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTablesample_clause) {
             listener.enterTablesample_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTablesample_clause) {
             listener.exitTablesample_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablesample_clause) {
            return visitor.visitTablesample_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_tableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_expr_windowless(): Func_expr_windowlessContext | null {
        return this.getRuleContext(0, Func_expr_windowlessContext);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDINALITY, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public rowsfrom_item(): Rowsfrom_itemContext[];
    public rowsfrom_item(i: number): Rowsfrom_itemContext | null;
    public rowsfrom_item(i?: number): Rowsfrom_itemContext[] | Rowsfrom_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Rowsfrom_itemContext);
        }

        return this.getRuleContext(i, Rowsfrom_itemContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_table;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_table) {
             listener.enterFunc_table(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_table) {
             listener.exitFunc_table(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_table) {
            return visitor.visitFunc_table(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Rowsfrom_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_expr_windowless(): Func_expr_windowlessContext {
        return this.getRuleContext(0, Func_expr_windowlessContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public tablefuncelementlist(): TablefuncelementlistContext | null {
        return this.getRuleContext(0, TablefuncelementlistContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rowsfrom_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRowsfrom_item) {
             listener.enterRowsfrom_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRowsfrom_item) {
             listener.exitRowsfrom_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRowsfrom_item) {
            return visitor.visitRowsfrom_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Where_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHERE, 0)!;
    }
    public column_expr_noparen(): Column_expr_noparenContext {
        return this.getRuleContext(0, Column_expr_noparenContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_where_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWhere_clause) {
             listener.enterWhere_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWhere_clause) {
             listener.exitWhere_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhere_clause) {
            return visitor.visitWhere_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Where_or_current_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHERE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHERE, 0)!;
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_where_or_current_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWhere_or_current_clause) {
             listener.enterWhere_or_current_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWhere_or_current_clause) {
             listener.exitWhere_or_current_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhere_or_current_clause) {
            return visitor.visitWhere_or_current_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablefuncelementlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tablefuncelement(): TablefuncelementContext[];
    public tablefuncelement(i: number): TablefuncelementContext | null;
    public tablefuncelement(i?: number): TablefuncelementContext[] | TablefuncelementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablefuncelementContext);
        }

        return this.getRuleContext(i, TablefuncelementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tablefuncelementlist;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTablefuncelementlist) {
             listener.enterTablefuncelementlist(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTablefuncelementlist) {
             listener.exitTablefuncelementlist(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablefuncelementlist) {
            return visitor.visitTablefuncelementlist(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TablefuncelementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tablefuncelement;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTablefuncelement) {
             listener.enterTablefuncelement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTablefuncelement) {
             listener.exitTablefuncelement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablefuncelement) {
            return visitor.visitTablefuncelement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class XmltableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_XMLTABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_XMLTABLE, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public primaryExpression(): PrimaryExpressionContext | null {
        return this.getRuleContext(0, PrimaryExpressionContext);
    }
    public xmlexists_argument(): Xmlexists_argumentContext | null {
        return this.getRuleContext(0, Xmlexists_argumentContext);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMNS, 0);
    }
    public xmltable_column_el(): Xmltable_column_elContext[];
    public xmltable_column_el(i: number): Xmltable_column_elContext | null;
    public xmltable_column_el(i?: number): Xmltable_column_elContext[] | Xmltable_column_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xmltable_column_elContext);
        }

        return this.getRuleContext(i, Xmltable_column_elContext);
    }
    public KW_XMLNAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLNAMESPACES, 0);
    }
    public xml_namespace_el(): Xml_namespace_elContext[];
    public xml_namespace_el(i: number): Xml_namespace_elContext | null;
    public xml_namespace_el(i?: number): Xml_namespace_elContext[] | Xml_namespace_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xml_namespace_elContext);
        }

        return this.getRuleContext(i, Xml_namespace_elContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmltable;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmltable) {
             listener.enterXmltable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmltable) {
             listener.exitXmltable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmltable) {
            return visitor.visitXmltable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xmltable_column_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDINALITY, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_NULL(): antlr.TerminalNode[];
    public KW_NULL(i: number): antlr.TerminalNode | null;
    public KW_NULL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NULL);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NULL, i);
    	}
    }
    public KW_DEFAULT(): antlr.TerminalNode[];
    public KW_DEFAULT(i: number): antlr.TerminalNode | null;
    public KW_DEFAULT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_DEFAULT);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_DEFAULT, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public KW_NOT(): antlr.TerminalNode[];
    public KW_NOT(i: number): antlr.TerminalNode | null;
    public KW_NOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NOT);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmltable_column_el;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmltable_column_el) {
             listener.enterXmltable_column_el(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmltable_column_el) {
             listener.exitXmltable_column_el(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmltable_column_el) {
            return visitor.visitXmltable_column_el(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xml_namespace_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public collabel(): CollabelContext | null {
        return this.getRuleContext(0, CollabelContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xml_namespace_el;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXml_namespace_el) {
             listener.enterXml_namespace_el(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXml_namespace_el) {
             listener.exitXml_namespace_el(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXml_namespace_el) {
            return visitor.visitXml_namespace_el(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TypenameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpletypename(): SimpletypenameContext | null {
        return this.getRuleContext(0, SimpletypenameContext);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ARRAY, 0);
    }
    public KW_SETOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SETOF, 0);
    }
    public OPEN_BRACKET(): antlr.TerminalNode[];
    public OPEN_BRACKET(i: number): antlr.TerminalNode | null;
    public OPEN_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_BRACKET);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_BRACKET, i);
    	}
    }
    public Integral(): antlr.TerminalNode[];
    public Integral(i: number): antlr.TerminalNode | null;
    public Integral(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.Integral);
    	} else {
    		return this.getToken(PostgreSqlParser.Integral, i);
    	}
    }
    public CLOSE_BRACKET(): antlr.TerminalNode[];
    public CLOSE_BRACKET(i: number): antlr.TerminalNode | null;
    public CLOSE_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_BRACKET);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_BRACKET, i);
    	}
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PERCENT, 0);
    }
    public KW_ROWTYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWTYPE, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_typename;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTypename) {
             listener.enterTypename(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTypename) {
             listener.exitTypename(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTypename) {
            return visitor.visitTypename(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpletypenameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public consttypename(): ConsttypenameContext | null {
        return this.getRuleContext(0, ConsttypenameContext);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERVAL, 0);
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public opt_interval(): Opt_intervalContext | null {
        return this.getRuleContext(0, Opt_intervalContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_simpletypename;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSimpletypename) {
             listener.enterSimpletypename(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSimpletypename) {
             listener.exitSimpletypename(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSimpletypename) {
            return visitor.visitSimpletypename(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConsttypenameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numeric(): NumericContext | null {
        return this.getRuleContext(0, NumericContext);
    }
    public bit(): BitContext | null {
        return this.getRuleContext(0, BitContext);
    }
    public character(): CharacterContext | null {
        return this.getRuleContext(0, CharacterContext);
    }
    public constdatetime(): ConstdatetimeContext | null {
        return this.getRuleContext(0, ConstdatetimeContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_consttypename;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConsttypename) {
             listener.enterConsttypename(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConsttypename) {
             listener.exitConsttypename(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConsttypename) {
            return visitor.visitConsttypename(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumericContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTEGER, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SMALLINT, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BIGINT, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REAL, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FLOAT, 0);
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOUBLE, 0);
    }
    public KW_PRECISION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRECISION, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DECIMAL, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEC, 0);
    }
    public KW_NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NUMERIC, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BOOLEAN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_numeric;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNumeric) {
             listener.enterNumeric(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNumeric) {
             listener.exitNumeric(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNumeric) {
            return visitor.visitNumeric(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_floatContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public Integral(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.Integral, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_float;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_float) {
             listener.enterOpt_float(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_float) {
             listener.exitOpt_float(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_float) {
            return visitor.visitOpt_float(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BIT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BIT, 0)!;
    }
    public KW_VARYING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARYING, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_bit;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterBit) {
             listener.enterBit(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitBit) {
             listener.exitBit(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBit) {
            return visitor.visitBit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CharacterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARCHAR, 0);
    }
    public KW_NATIONAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NATIONAL, 0);
    }
    public KW_CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHARACTER, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAR, 0);
    }
    public KW_NCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NCHAR, 0);
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public KW_VARYING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARYING, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_character;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCharacter) {
             listener.enterCharacter(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCharacter) {
             listener.exitCharacter(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCharacter) {
            return visitor.visitCharacter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConstdatetimeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TIME(): antlr.TerminalNode[];
    public KW_TIME(i: number): antlr.TerminalNode | null;
    public KW_TIME(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_TIME);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_TIME, i);
    	}
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_constdatetime;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConstdatetime) {
             listener.enterConstdatetime(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConstdatetime) {
             listener.exitConstdatetime(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConstdatetime) {
            return visitor.visitConstdatetime(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_intervalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MONTH, 0);
    }
    public interval_second(): Interval_secondContext | null {
        return this.getRuleContext(0, Interval_secondContext);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_YEAR, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DAY, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HOUR, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINUTE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_interval;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_interval) {
             listener.enterOpt_interval(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_interval) {
             listener.exitOpt_interval(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_interval) {
            return visitor.visitOpt_interval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Interval_secondContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SECOND(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SECOND, 0)!;
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_interval_second;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInterval_second) {
             listener.enterInterval_second(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInterval_second) {
             listener.exitInterval_second(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInterval_second) {
            return visitor.visitInterval_second(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.LT, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.GT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public LESS_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.LESS_EQUALS, 0);
    }
    public GREATER_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.GREATER_EQUALS, 0);
    }
    public NOT_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.NOT_EQUALS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_comparisonOperator;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterComparisonOperator) {
             listener.enterComparisonOperator(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitComparisonOperator) {
             listener.exitComparisonOperator(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_expression;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExpression) {
             listener.enterExpression(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExpression) {
             listener.exitExpression(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_booleanExpression;
    }
    public override copyFrom(ctx: BooleanExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class LogicalNotContext extends BooleanExpressionContext {
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KW_NOT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NOT, 0)!;
    }
    public booleanExpression(): BooleanExpressionContext {
        return this.getRuleContext(0, BooleanExpressionContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLogicalNot) {
             listener.enterLogicalNot(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLogicalNot) {
             listener.exitLogicalNot(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalNot) {
            return visitor.visitLogicalNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PredicatedContext extends BooleanExpressionContext {
    public _valueExpression?: ValueExpressionContext;
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public predicate(): PredicateContext | null {
        return this.getRuleContext(0, PredicateContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPredicated) {
             listener.enterPredicated(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPredicated) {
             listener.exitPredicated(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPredicated) {
            return visitor.visitPredicated(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LogicalBinaryContext extends BooleanExpressionContext {
    public _left?: BooleanExpressionContext;
    public _operator?: Token | null;
    public _right?: BooleanExpressionContext;
    public constructor(ctx: BooleanExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public booleanExpression(): BooleanExpressionContext[];
    public booleanExpression(i: number): BooleanExpressionContext | null;
    public booleanExpression(i?: number): BooleanExpressionContext[] | BooleanExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanExpressionContext);
        }

        return this.getRuleContext(i, BooleanExpressionContext);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OR, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLogicalBinary) {
             listener.enterLogicalBinary(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLogicalBinary) {
             listener.exitLogicalBinary(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalBinary) {
            return visitor.visitLogicalBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PredicateContext extends antlr.ParserRuleContext {
    public value: antlr.ParserRuleContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number, value: antlr.ParserRuleContext) {
        super(parent, invokingState);
        this.value = value;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_predicate;
    }
    public override copyFrom(ctx: PredicateContext): void {
        super.copyFrom(ctx);
        this.value = ctx.value;
    }
}
export class ComparisonContext extends PredicateContext {
    public _right?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterComparison) {
             listener.enterComparison(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitComparison) {
             listener.exitComparison(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitComparison) {
            return visitor.visitComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LikeContext extends PredicateContext {
    public _pattern?: ValueExpressionContext;
    public _escape?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIKE, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ILIKE, 0);
    }
    public KW_SIMILAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SIMILAR, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BETWEEN, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ESCAPE, 0);
    }
    public KW_SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYMMETRIC, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLike) {
             listener.enterLike(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLike) {
             listener.exitLike(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLike) {
            return visitor.visitLike(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InSubqueryContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public select_with_parens(): Select_with_parensContext {
        return this.getRuleContext(0, Select_with_parensContext)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInSubquery) {
             listener.enterInSubquery(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInSubquery) {
             listener.exitInSubquery(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInSubquery) {
            return visitor.visitInSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DistinctFromContext extends PredicateContext {
    public _right?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IS, 0)!;
    }
    public KW_DISTINCT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0)!;
    }
    public KW_FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FROM, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDistinctFrom) {
             listener.enterDistinctFrom(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDistinctFrom) {
             listener.exitDistinctFrom(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDistinctFrom) {
            return visitor.visitDistinctFrom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InListContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterInList) {
             listener.enterInList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitInList) {
             listener.exitInList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitInList) {
            return visitor.visitInList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NullPredicateContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_IS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IS, 0)!;
    }
    public KW_NULL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NULL, 0)!;
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNullPredicate) {
             listener.enterNullPredicate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNullPredicate) {
             listener.exitNullPredicate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNullPredicate) {
            return visitor.visitNullPredicate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BetweenContext extends PredicateContext {
    public _lower?: ValueExpressionContext;
    public _upper?: ValueExpressionContext;
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public KW_BETWEEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BETWEEN, 0)!;
    }
    public KW_AND(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AND, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterBetween) {
             listener.enterBetween(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitBetween) {
             listener.exitBetween(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitBetween) {
            return visitor.visitBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class QuantifiedComparisonContext extends PredicateContext {
    public constructor(ctx: PredicateContext) {
        super(ctx.parent, ctx.invokingState, ctx.value);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public subquery_Op(): Subquery_OpContext {
        return this.getRuleContext(0, Subquery_OpContext)!;
    }
    public sub_type(): Sub_typeContext {
        return this.getRuleContext(0, Sub_typeContext)!;
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQuantifiedComparison) {
             listener.enterQuantifiedComparison(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQuantifiedComparison) {
             listener.exitQuantifiedComparison(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQuantifiedComparison) {
            return visitor.visitQuantifiedComparison(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_valueExpression;
    }
    public override copyFrom(ctx: ValueExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ValueExpressionDefaultContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterValueExpressionDefault) {
             listener.enterValueExpressionDefault(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitValueExpressionDefault) {
             listener.exitValueExpressionDefault(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitValueExpressionDefault) {
            return visitor.visitValueExpressionDefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ConcatenationContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CARET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CARET, 0)!;
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterConcatenation) {
             listener.enterConcatenation(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitConcatenation) {
             listener.exitConcatenation(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitConcatenation) {
            return visitor.visitConcatenation(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticBinaryContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _operator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PERCENT, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterArithmeticBinary) {
             listener.enterArithmeticBinary(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitArithmeticBinary) {
             listener.exitArithmeticBinary(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticBinary) {
            return visitor.visitArithmeticBinary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ArithmeticUnaryContext extends ValueExpressionContext {
    public _operator?: Token | null;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterArithmeticUnary) {
             listener.enterArithmeticUnary(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitArithmeticUnary) {
             listener.exitArithmeticUnary(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArithmeticUnary) {
            return visitor.visitArithmeticUnary(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AtTimeZoneContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public KW_AT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AT, 0)!;
    }
    public KW_TIME(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_TIME, 0)!;
    }
    public KW_ZONE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAtTimeZone) {
             listener.enterAtTimeZone(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAtTimeZone) {
             listener.exitAtTimeZone(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAtTimeZone) {
            return visitor.visitAtTimeZone(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryExpressionContext extends antlr.ParserRuleContext {
    public _a_expr_in_parens?: ExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXISTS, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNIQUE, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ARRAY, 0);
    }
    public array_expr(): Array_exprContext | null {
        return this.getRuleContext(0, Array_exprContext);
    }
    public PARAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PARAM, 0);
    }
    public opt_indirection(): Opt_indirectionContext | null {
        return this.getRuleContext(0, Opt_indirectionContext);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUPING, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public Numeric(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Numeric, 0);
    }
    public BinaryStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.BinaryStringConstant, 0);
    }
    public HexadecimalStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.HexadecimalStringConstant, 0);
    }
    public function_name(): Function_nameContext | null {
        return this.getRuleContext(0, Function_nameContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public func_arg_list(): Func_arg_listContext | null {
        return this.getRuleContext(0, Func_arg_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public sort_clause(): Sort_clauseContext | null {
        return this.getRuleContext(0, Sort_clauseContext);
    }
    public consttypename(): ConsttypenameContext | null {
        return this.getRuleContext(0, ConsttypenameContext);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERVAL, 0);
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public opt_interval(): Opt_intervalContext | null {
        return this.getRuleContext(0, Opt_intervalContext);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public PLSQLVARIABLENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLSQLVARIABLENAME, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASE, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_END, 0);
    }
    public when_clause(): When_clauseContext[];
    public when_clause(i: number): When_clauseContext | null;
    public when_clause(i?: number): When_clauseContext[] | When_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(When_clauseContext);
        }

        return this.getRuleContext(i, When_clauseContext);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ELSE, 0);
    }
    public func_expr(): Func_exprContext | null {
        return this.getRuleContext(0, Func_exprContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public explicit_row(): Explicit_rowContext | null {
        return this.getRuleContext(0, Explicit_rowContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public row(): RowContext[];
    public row(i: number): RowContext | null;
    public row(i?: number): RowContext[] | RowContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowContext);
        }

        return this.getRuleContext(i, RowContext);
    }
    public KW_OVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERLAPS, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public primaryExpression(): PrimaryExpressionContext[];
    public primaryExpression(i: number): PrimaryExpressionContext | null;
    public primaryExpression(i?: number): PrimaryExpressionContext[] | PrimaryExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryExpressionContext);
        }

        return this.getRuleContext(i, PrimaryExpressionContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public qual_op(): Qual_opContext | null {
        return this.getRuleContext(0, Qual_opContext);
    }
    public mathop(): MathopContext | null {
        return this.getRuleContext(0, MathopContext);
    }
    public TYPECAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.TYPECAST, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IS, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public prep_type_clause(): Prep_type_clauseContext | null {
        return this.getRuleContext(0, Prep_type_clauseContext);
    }
    public KW_DOCUMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOCUMENT, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_primaryExpression;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPrimaryExpression) {
             listener.enterPrimaryExpression(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPrimaryExpression) {
             listener.exitPrimaryExpression(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPrimaryExpression) {
            return visitor.visitPrimaryExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_applicationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public function_name(): Function_nameContext {
        return this.getRuleContext(0, Function_nameContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public func_arg_list(): Func_arg_listContext | null {
        return this.getRuleContext(0, Func_arg_listContext);
    }
    public KW_VARIADIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARIADIC, 0);
    }
    public func_arg_expr(): Func_arg_exprContext | null {
        return this.getRuleContext(0, Func_arg_exprContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public sort_clause(): Sort_clauseContext | null {
        return this.getRuleContext(0, Sort_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_application;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_application) {
             listener.enterFunc_application(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_application) {
             listener.exitFunc_application(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_application) {
            return visitor.visitFunc_application(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_application(): Func_applicationContext | null {
        return this.getRuleContext(0, Func_applicationContext);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHIN, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public sort_clause(): Sort_clauseContext | null {
        return this.getRuleContext(0, Sort_clauseContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FILTER, 0);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHERE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVER, 0);
    }
    public window_specification(): Window_specificationContext | null {
        return this.getRuleContext(0, Window_specificationContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public func_expr_common_subexpr(): Func_expr_common_subexprContext | null {
        return this.getRuleContext(0, Func_expr_common_subexprContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_expr) {
             listener.enterFunc_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_expr) {
             listener.exitFunc_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_expr) {
            return visitor.visitFunc_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_expr_windowlessContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_application(): Func_applicationContext | null {
        return this.getRuleContext(0, Func_applicationContext);
    }
    public func_expr_common_subexpr(): Func_expr_common_subexprContext | null {
        return this.getRuleContext(0, Func_expr_common_subexprContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_expr_windowless;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_expr_windowless) {
             listener.enterFunc_expr_windowless(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_expr_windowless) {
             listener.exitFunc_expr_windowless(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_expr_windowless) {
            return visitor.visitFunc_expr_windowless(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_expr_common_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_TIME, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_LOCALTIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCALTIME, 0);
    }
    public KW_LOCALTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCALTIMESTAMP, 0);
    }
    public opt_float(): Opt_floatContext | null {
        return this.getRuleContext(0, Opt_floatContext);
    }
    public KW_CURRENT_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_ROLE, 0);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_USER, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION_USER, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_CURRENT_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_CATALOG, 0);
    }
    public KW_CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_SCHEMA, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CAST, 0);
    }
    public KW_TREAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TREAT, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTRACT, 0);
    }
    public extract_arg(): Extract_argContext | null {
        return this.getRuleContext(0, Extract_argContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_NORMALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NORMALIZE, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public unicode_normal_form(): Unicode_normal_formContext | null {
        return this.getRuleContext(0, Unicode_normal_formContext);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERLAY, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PLACING, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POSITION, 0);
    }
    public primaryExpression(): PrimaryExpressionContext[];
    public primaryExpression(i: number): PrimaryExpressionContext | null;
    public primaryExpression(i?: number): PrimaryExpressionContext[] | PrimaryExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryExpressionContext);
        }

        return this.getRuleContext(i, PrimaryExpressionContext);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSTRING, 0);
    }
    public substr_list(): Substr_listContext | null {
        return this.getRuleContext(0, Substr_listContext);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIM, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BOTH, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEADING, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRAILING, 0);
    }
    public KW_NULLIF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLIF, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public KW_COALESCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COALESCE, 0);
    }
    public KW_GREATEST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GREATEST, 0);
    }
    public KW_LEAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEAST, 0);
    }
    public KW_XMLCONCAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLCONCAT, 0);
    }
    public KW_XMLELEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLELEMENT, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NAME, 0);
    }
    public collabel(): CollabelContext | null {
        return this.getRuleContext(0, CollabelContext);
    }
    public KW_XMLATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLATTRIBUTES, 0);
    }
    public xml_attribute_list(): Xml_attribute_listContext | null {
        return this.getRuleContext(0, Xml_attribute_listContext);
    }
    public KW_XMLEXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLEXISTS, 0);
    }
    public xmlexists_argument(): Xmlexists_argumentContext | null {
        return this.getRuleContext(0, Xmlexists_argumentContext);
    }
    public KW_XMLFOREST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLFOREST, 0);
    }
    public KW_XMLPARSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLPARSE, 0);
    }
    public document_or_content(): Document_or_contentContext | null {
        return this.getRuleContext(0, Document_or_contentContext);
    }
    public KW_WHITESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHITESPACE, 0);
    }
    public KW_PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRESERVE, 0);
    }
    public KW_STRIP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRIP, 0);
    }
    public KW_XMLPI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLPI, 0);
    }
    public KW_XMLROOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLROOT, 0);
    }
    public KW_XML(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XML, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VERSION, 0);
    }
    public KW_STANDALONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STANDALONE, 0);
    }
    public KW_NO(): antlr.TerminalNode[];
    public KW_NO(i: number): antlr.TerminalNode | null;
    public KW_NO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_NO);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_NO, i);
    	}
    }
    public KW_VALUE(): antlr.TerminalNode[];
    public KW_VALUE(i: number): antlr.TerminalNode | null;
    public KW_VALUE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_VALUE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_VALUE, i);
    	}
    }
    public KW_YES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_YES, 0);
    }
    public KW_XMLSERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLSERIALIZE, 0);
    }
    public simpletypename(): SimpletypenameContext | null {
        return this.getRuleContext(0, SimpletypenameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_expr_common_subexpr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_expr_common_subexpr) {
             listener.enterFunc_expr_common_subexpr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_expr_common_subexpr) {
             listener.exitFunc_expr_common_subexpr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_expr_common_subexpr) {
            return visitor.visitFunc_expr_common_subexpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xml_attribute_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public xml_attribute_el(): Xml_attribute_elContext[];
    public xml_attribute_el(i: number): Xml_attribute_elContext | null;
    public xml_attribute_el(i?: number): Xml_attribute_elContext[] | Xml_attribute_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xml_attribute_elContext);
        }

        return this.getRuleContext(i, Xml_attribute_elContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xml_attribute_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXml_attribute_list) {
             listener.enterXml_attribute_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXml_attribute_list) {
             listener.exitXml_attribute_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXml_attribute_list) {
            return visitor.visitXml_attribute_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xml_attribute_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public collabel(): CollabelContext | null {
        return this.getRuleContext(0, CollabelContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xml_attribute_el;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXml_attribute_el) {
             listener.enterXml_attribute_el(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXml_attribute_el) {
             listener.exitXml_attribute_el(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXml_attribute_el) {
            return visitor.visitXml_attribute_el(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Document_or_contentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_DOCUMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOCUMENT, 0);
    }
    public KW_CONTENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTENT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_document_or_content;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDocument_or_content) {
             listener.enterDocument_or_content(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDocument_or_content) {
             listener.exitDocument_or_content(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDocument_or_content) {
            return visitor.visitDocument_or_content(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xmlexists_argumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PASSING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PASSING, 0)!;
    }
    public primaryExpression(): PrimaryExpressionContext {
        return this.getRuleContext(0, PrimaryExpressionContext)!;
    }
    public xml_passing_mech(): Xml_passing_mechContext[];
    public xml_passing_mech(i: number): Xml_passing_mechContext | null;
    public xml_passing_mech(i?: number): Xml_passing_mechContext[] | Xml_passing_mechContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xml_passing_mechContext);
        }

        return this.getRuleContext(i, Xml_passing_mechContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xmlexists_argument;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXmlexists_argument) {
             listener.enterXmlexists_argument(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXmlexists_argument) {
             listener.exitXmlexists_argument(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXmlexists_argument) {
            return visitor.visitXmlexists_argument(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Xml_passing_mechContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BY, 0)!;
    }
    public KW_REF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REF, 0);
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_xml_passing_mech;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterXml_passing_mech) {
             listener.enterXml_passing_mech(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitXml_passing_mech) {
             listener.exitXml_passing_mech(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitXml_passing_mech) {
            return visitor.visitXml_passing_mech(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WINDOW(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WINDOW, 0)!;
    }
    public window_definition(): Window_definitionContext[];
    public window_definition(i: number): Window_definitionContext | null;
    public window_definition(i?: number): Window_definitionContext[] | Window_definitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_definitionContext);
        }

        return this.getRuleContext(i, Window_definitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_window_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWindow_clause) {
             listener.enterWindow_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWindow_clause) {
             listener.exitWindow_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindow_clause) {
            return visitor.visitWindow_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_definitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public KW_AS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_AS, 0)!;
    }
    public window_specification(): Window_specificationContext {
        return this.getRuleContext(0, Window_specificationContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_window_definition;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWindow_definition) {
             listener.enterWindow_definition(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWindow_definition) {
             listener.exitWindow_definition(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindow_definition) {
            return visitor.visitWindow_definition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Over_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OVER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OVER, 0)!;
    }
    public window_specification(): Window_specificationContext | null {
        return this.getRuleContext(0, Window_specificationContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_over_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOver_clause) {
             listener.enterOver_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOver_clause) {
             listener.exitOver_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOver_clause) {
            return visitor.visitOver_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Window_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public sort_clause(): Sort_clauseContext | null {
        return this.getRuleContext(0, Sort_clauseContext);
    }
    public opt_frame_clause(): Opt_frame_clauseContext | null {
        return this.getRuleContext(0, Opt_frame_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_window_specification;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWindow_specification) {
             listener.enterWindow_specification(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWindow_specification) {
             listener.exitWindow_specification(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWindow_specification) {
            return visitor.visitWindow_specification(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_frame_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RANGE, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_GROUPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUPS, 0);
    }
    public frame_bound(): Frame_boundContext[];
    public frame_bound(i: number): Frame_boundContext | null;
    public frame_bound(i?: number): Frame_boundContext[] | Frame_boundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Frame_boundContext);
        }

        return this.getRuleContext(i, Frame_boundContext);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUDE, 0);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BETWEEN, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public KW_TIES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIES, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_OTHERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OTHERS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_frame_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_frame_clause) {
             listener.enterOpt_frame_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_frame_clause) {
             listener.exitOpt_frame_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_frame_clause) {
            return visitor.visitOpt_frame_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Frame_boundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRECEDING, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOLLOWING, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNBOUNDED, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_frame_bound;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFrame_bound) {
             listener.enterFrame_bound(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFrame_bound) {
             listener.exitFrame_bound(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFrame_bound) {
            return visitor.visitFrame_bound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public explicit_row(): Explicit_rowContext | null {
        return this.getRuleContext(0, Explicit_rowContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_row;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRow) {
             listener.enterRow(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRow) {
             listener.exitRow(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRow) {
            return visitor.visitRow(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Explicit_rowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ROW(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ROW, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0)!;
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_explicit_row;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExplicit_row) {
             listener.enterExplicit_row(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExplicit_row) {
             listener.exitExplicit_row(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExplicit_row) {
            return visitor.visitExplicit_row(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sub_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANY, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SOME, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sub_type;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSub_type) {
             listener.enterSub_type(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSub_type) {
             listener.exitSub_type(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSub_type) {
            return visitor.visitSub_type(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class All_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Operator(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Operator, 0);
    }
    public mathop(): MathopContext | null {
        return this.getRuleContext(0, MathopContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_all_op;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAll_op) {
             listener.enterAll_op(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAll_op) {
             listener.exitAll_op(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAll_op) {
            return visitor.visitAll_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MathopContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PERCENT, 0);
    }
    public CARET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CARET, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.LT, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.GT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public LESS_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.LESS_EQUALS, 0);
    }
    public GREATER_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.GREATER_EQUALS, 0);
    }
    public NOT_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.NOT_EQUALS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_mathop;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterMathop) {
             listener.enterMathop(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitMathop) {
             listener.exitMathop(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMathop) {
            return visitor.visitMathop(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Qual_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Operator(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Operator, 0);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_qual_op;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQual_op) {
             listener.enterQual_op(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQual_op) {
             listener.exitQual_op(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQual_op) {
            return visitor.visitQual_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Qual_all_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public all_op(): All_opContext | null {
        return this.getRuleContext(0, All_opContext);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_qual_all_op;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQual_all_op) {
             listener.enterQual_all_op(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQual_all_op) {
             listener.exitQual_all_op(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQual_all_op) {
            return visitor.visitQual_all_op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Subquery_OpContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qual_all_op(): Qual_all_opContext | null {
        return this.getRuleContext(0, Qual_all_opContext);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIKE, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ILIKE, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_subquery_Op;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSubquery_Op) {
             listener.enterSubquery_Op(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSubquery_Op) {
             listener.exitSubquery_Op(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubquery_Op) {
            return visitor.visitSubquery_Op(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_expr_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExpr_list) {
             listener.enterExpr_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExpr_list) {
             listener.exitExpr_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExpr_list) {
            return visitor.visitExpr_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_column_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumn_expr) {
             listener.enterColumn_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumn_expr) {
             listener.exitColumn_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumn_expr) {
            return visitor.visitColumn_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_expr_noparenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public column_name(): Column_nameContext | null {
        return this.getRuleContext(0, Column_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_column_expr_noparen;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumn_expr_noparen) {
             listener.enterColumn_expr_noparen(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumn_expr_noparen) {
             listener.exitColumn_expr_noparen(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumn_expr_noparen) {
            return visitor.visitColumn_expr_noparen(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_arg_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_arg_expr(): Func_arg_exprContext[];
    public func_arg_expr(i: number): Func_arg_exprContext | null;
    public func_arg_expr(i?: number): Func_arg_exprContext[] | Func_arg_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Func_arg_exprContext);
        }

        return this.getRuleContext(i, Func_arg_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_arg_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_arg_list) {
             listener.enterFunc_arg_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_arg_list) {
             listener.exitFunc_arg_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_arg_list) {
            return visitor.visitFunc_arg_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Func_arg_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public COLON_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COLON_EQUALS, 0);
    }
    public EQUALS_GREATER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUALS_GREATER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_func_arg_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunc_arg_expr) {
             listener.enterFunc_arg_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunc_arg_expr) {
             listener.exitFunc_arg_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunc_arg_expr) {
            return visitor.visitFunc_arg_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Array_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_BRACKET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.OPEN_BRACKET, 0)!;
    }
    public CLOSE_BRACKET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.CLOSE_BRACKET, 0)!;
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public array_expr(): Array_exprContext[];
    public array_expr(i: number): Array_exprContext | null;
    public array_expr(i?: number): Array_exprContext[] | Array_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Array_exprContext);
        }

        return this.getRuleContext(i, Array_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_array_expr;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterArray_expr) {
             listener.enterArray_expr(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitArray_expr) {
             listener.exitArray_expr(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitArray_expr) {
            return visitor.visitArray_expr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Extract_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_YEAR, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MONTH, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DAY, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HOUR, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINUTE, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECOND, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_extract_arg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExtract_arg) {
             listener.enterExtract_arg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExtract_arg) {
             listener.exitExtract_arg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExtract_arg) {
            return visitor.visitExtract_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Unicode_normal_formContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NFC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFC, 0);
    }
    public KW_NFD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFD, 0);
    }
    public KW_NFKC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFKC, 0);
    }
    public KW_NFKD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFKD, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_unicode_normal_form;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterUnicode_normal_form) {
             listener.enterUnicode_normal_form(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitUnicode_normal_form) {
             listener.exitUnicode_normal_form(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnicode_normal_form) {
            return visitor.visitUnicode_normal_form(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Substr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_SIMILAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SIMILAR, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ESCAPE, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_substr_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSubstr_list) {
             listener.enterSubstr_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSubstr_list) {
             listener.exitSubstr_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSubstr_list) {
            return visitor.visitSubstr_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class When_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_THEN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_when_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterWhen_clause) {
             listener.enterWhen_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitWhen_clause) {
             listener.exitWhen_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitWhen_clause) {
            return visitor.visitWhen_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Indirection_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.DOT, 0);
    }
    public collabel(): CollabelContext | null {
        return this.getRuleContext(0, CollabelContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public OPEN_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_BRACKET, 0);
    }
    public CLOSE_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_BRACKET, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COLON, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_indirection_el;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndirection_el) {
             listener.enterIndirection_el(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndirection_el) {
             listener.exitIndirection_el(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndirection_el) {
            return visitor.visitIndirection_el(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndirectionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indirection_el(): Indirection_elContext[];
    public indirection_el(i: number): Indirection_elContext | null;
    public indirection_el(i?: number): Indirection_elContext[] | Indirection_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Indirection_elContext);
        }

        return this.getRuleContext(i, Indirection_elContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_indirection;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIndirection) {
             listener.enterIndirection(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIndirection) {
             listener.exitIndirection(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIndirection) {
            return visitor.visitIndirection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_indirectionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indirection_el(): Indirection_elContext[];
    public indirection_el(i: number): Indirection_elContext | null;
    public indirection_el(i?: number): Indirection_elContext[] | Indirection_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Indirection_elContext);
        }

        return this.getRuleContext(i, Indirection_elContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_indirection;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_indirection) {
             listener.enterOpt_indirection(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_indirection) {
             listener.exitOpt_indirection(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_indirection) {
            return visitor.visitOpt_indirection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Target_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public target_el(): Target_elContext[];
    public target_el(i: number): Target_elContext | null;
    public target_el(i?: number): Target_elContext[] | Target_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Target_elContext);
        }

        return this.getRuleContext(i, Target_elContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_target_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTarget_list) {
             listener.enterTarget_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTarget_list) {
             listener.exitTarget_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTarget_list) {
            return visitor.visitTarget_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Target_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_target_el;
    }
    public override copyFrom(ctx: Target_elContext): void {
        super.copyFrom(ctx);
    }
}
export class Target_labelContext extends Target_elContext {
    public constructor(ctx: Target_elContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public column_expr_noparen(): Column_expr_noparenContext {
        return this.getRuleContext(0, Column_expr_noparenContext)!;
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public collabel(): CollabelContext | null {
        return this.getRuleContext(0, CollabelContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTarget_label) {
             listener.enterTarget_label(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTarget_label) {
             listener.exitTarget_label(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTarget_label) {
            return visitor.visitTarget_label(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class Target_starContext extends Target_elContext {
    public constructor(ctx: Target_elContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STAR(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.STAR, 0)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTarget_star) {
             listener.enterTarget_star(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTarget_star) {
             listener.exitTarget_star(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTarget_star) {
            return visitor.visitTarget_star(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Qualified_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualified_name(): Qualified_nameContext[];
    public qualified_name(i: number): Qualified_nameContext | null;
    public qualified_name(i?: number): Qualified_nameContext[] | Qualified_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Qualified_nameContext);
        }

        return this.getRuleContext(i, Qualified_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_qualified_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQualified_name_list) {
             listener.enterQualified_name_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQualified_name_list) {
             listener.exitQualified_name_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualified_name_list) {
            return visitor.visitQualified_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_name(): Table_nameContext[];
    public table_name(i: number): Table_nameContext | null;
    public table_name(i?: number): Table_nameContext[] | Table_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_nameContext);
        }

        return this.getRuleContext(i, Table_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_table_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTable_name_list) {
             listener.enterTable_name_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTable_name_list) {
             listener.exitTable_name_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTable_name_list) {
            return visitor.visitTable_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Schema_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public schema_name(): Schema_nameContext[];
    public schema_name(i: number): Schema_nameContext | null;
    public schema_name(i?: number): Schema_nameContext[] | Schema_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Schema_nameContext);
        }

        return this.getRuleContext(i, Schema_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_schema_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSchema_name_list) {
             listener.enterSchema_name_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSchema_name_list) {
             listener.exitSchema_name_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSchema_name_list) {
            return visitor.visitSchema_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Database_nameListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public database_name(): Database_nameContext[];
    public database_name(i: number): Database_nameContext | null;
    public database_name(i?: number): Database_nameContext[] | Database_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Database_nameContext);
        }

        return this.getRuleContext(i, Database_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_database_nameList;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDatabase_nameList) {
             listener.enterDatabase_nameList(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDatabase_nameList) {
             listener.exitDatabase_nameList(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDatabase_nameList) {
            return visitor.visitDatabase_nameList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Tablespace_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tablespace_name_create;
    }
    public override copyFrom(ctx: Tablespace_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class TablespaceNameCreateContext extends Tablespace_name_createContext {
    public constructor(ctx: Tablespace_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTablespaceNameCreate) {
             listener.enterTablespaceNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTablespaceNameCreate) {
             listener.exitTablespaceNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablespaceNameCreate) {
            return visitor.visitTablespaceNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Tablespace_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tablespace_name;
    }
    public override copyFrom(ctx: Tablespace_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class TablespaceNameContext extends Tablespace_nameContext {
    public constructor(ctx: Tablespace_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTablespaceName) {
             listener.enterTablespaceName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTablespaceName) {
             listener.exitTablespaceName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablespaceName) {
            return visitor.visitTablespaceName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_table_name_create;
    }
    public override copyFrom(ctx: Table_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class TableNameCreateContext extends Table_name_createContext {
    public constructor(ctx: Table_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableNameCreate) {
             listener.enterTableNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableNameCreate) {
             listener.exitTableNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableNameCreate) {
            return visitor.visitTableNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Table_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_table_name;
    }
    public override copyFrom(ctx: Table_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class TableNameContext extends Table_nameContext {
    public constructor(ctx: Table_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTableName) {
             listener.enterTableName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTableName) {
             listener.exitTableName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTableName) {
            return visitor.visitTableName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class View_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_view_name_create;
    }
    public override copyFrom(ctx: View_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class ViewNameCreateContext extends View_name_createContext {
    public constructor(ctx: View_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterViewNameCreate) {
             listener.enterViewNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitViewNameCreate) {
             listener.exitViewNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewNameCreate) {
            return visitor.visitViewNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class View_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_view_name;
    }
    public override copyFrom(ctx: View_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class ViewNameContext extends View_nameContext {
    public constructor(ctx: View_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterViewName) {
             listener.enterViewName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitViewName) {
             listener.exitViewName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitViewName) {
            return visitor.visitViewName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Qualified_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_qualified_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterQualified_name) {
             listener.enterQualified_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitQualified_name) {
             listener.exitQualified_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitQualified_name) {
            return visitor.visitQualified_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Tablespace_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tablespace_name(): Tablespace_nameContext[];
    public tablespace_name(i: number): Tablespace_nameContext | null;
    public tablespace_name(i?: number): Tablespace_nameContext[] | Tablespace_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Tablespace_nameContext);
        }

        return this.getRuleContext(i, Tablespace_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_tablespace_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterTablespace_name_list) {
             listener.enterTablespace_name_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitTablespace_name_list) {
             listener.exitTablespace_name_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitTablespace_name_list) {
            return visitor.visitTablespace_name_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_name_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterName_list) {
             listener.enterName_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitName_list) {
             listener.exitName_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitName_list) {
            return visitor.visitName_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Database_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_database_name_create;
    }
    public override copyFrom(ctx: Database_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class DatabaseNameCreateContext extends Database_name_createContext {
    public constructor(ctx: Database_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDatabaseNameCreate) {
             listener.enterDatabaseNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDatabaseNameCreate) {
             listener.exitDatabaseNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseNameCreate) {
            return visitor.visitDatabaseNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Database_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_database_name;
    }
    public override copyFrom(ctx: Database_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class DatabaseNameContext extends Database_nameContext {
    public constructor(ctx: Database_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDatabaseName) {
             listener.enterDatabaseName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDatabaseName) {
             listener.exitDatabaseName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseName) {
            return visitor.visitDatabaseName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Schema_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_schema_name;
    }
    public override copyFrom(ctx: Schema_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class SchemaNameContext extends Schema_nameContext {
    public constructor(ctx: Schema_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSchemaName) {
             listener.enterSchemaName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSchemaName) {
             listener.exitSchemaName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaName) {
            return visitor.visitSchemaName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Routine_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_routine_name_create;
    }
    public override copyFrom(ctx: Routine_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class RoutineNameCreateContext extends Routine_name_createContext {
    public constructor(ctx: Routine_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoutineNameCreate) {
             listener.enterRoutineNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoutineNameCreate) {
             listener.exitRoutineNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutineNameCreate) {
            return visitor.visitRoutineNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Routine_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_routine_name;
    }
    public override copyFrom(ctx: Routine_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class RoutineNameContext extends Routine_nameContext {
    public constructor(ctx: Routine_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRoutineName) {
             listener.enterRoutineName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRoutineName) {
             listener.exitRoutineName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRoutineName) {
            return visitor.visitRoutineName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Procedure_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedure_name;
    }
    public override copyFrom(ctx: Procedure_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class ProcedureNameContext extends Procedure_nameContext {
    public constructor(ctx: Procedure_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedureName) {
             listener.enterProcedureName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedureName) {
             listener.exitProcedureName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedureName) {
            return visitor.visitProcedureName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Procedure_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_procedure_name_create;
    }
    public override copyFrom(ctx: Procedure_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class ProcedureNameCreateContext extends Procedure_name_createContext {
    public constructor(ctx: Procedure_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProcedureNameCreate) {
             listener.enterProcedureNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProcedureNameCreate) {
             listener.exitProcedureNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProcedureNameCreate) {
            return visitor.visitProcedureNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_column_name;
    }
    public override copyFrom(ctx: Column_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnNameMatchContext extends Column_nameContext {
    public constructor(ctx: Column_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnNameMatch) {
             listener.enterColumnNameMatch(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnNameMatch) {
             listener.exitColumnNameMatch(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameMatch) {
            return visitor.visitColumnNameMatch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnNameContext extends Column_nameContext {
    public constructor(ctx: Column_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public opt_indirection(): Opt_indirectionContext {
        return this.getRuleContext(0, Opt_indirectionContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnName) {
             listener.enterColumnName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnName) {
             listener.exitColumnName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnName) {
            return visitor.visitColumnName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Column_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_column_name_create;
    }
    public override copyFrom(ctx: Column_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnNameCreateContext extends Column_name_createContext {
    public constructor(ctx: Column_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColumnNameCreate) {
             listener.enterColumnNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColumnNameCreate) {
             listener.exitColumnNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColumnNameCreate) {
            return visitor.visitColumnNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Function_name_createContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_function_name_create;
    }
    public override copyFrom(ctx: Function_name_createContext): void {
        super.copyFrom(ctx);
    }
}
export class FunctionNameCreateContext extends Function_name_createContext {
    public constructor(ctx: Function_name_createContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunctionNameCreate) {
             listener.enterFunctionNameCreate(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunctionNameCreate) {
             listener.exitFunctionNameCreate(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionNameCreate) {
            return visitor.visitFunctionNameCreate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Function_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_function_name;
    }
    public override copyFrom(ctx: Function_nameContext): void {
        super.copyFrom(ctx);
    }
}
export class FunctionNameContext extends Function_nameContext {
    public constructor(ctx: Function_nameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFunctionName) {
             listener.enterFunctionName(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFunctionName) {
             listener.exitFunctionName(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionName) {
            return visitor.visitFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anysconst(): AnysconstContext[];
    public anysconst(i: number): AnysconstContext | null;
    public anysconst(i?: number): AnysconstContext[] | AnysconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AnysconstContext);
        }

        return this.getRuleContext(i, AnysconstContext);
    }
    public KW_UESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UESCAPE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sconst;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSconst) {
             listener.enterSconst(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSconst) {
             listener.exitSconst(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSconst) {
            return visitor.visitSconst(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AnysconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public StringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.StringConstant, 0);
    }
    public UnicodeEscapeStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.UnicodeEscapeStringConstant, 0);
    }
    public BeginDollarStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.BeginDollarStringConstant, 0);
    }
    public EndDollarStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EndDollarStringConstant, 0);
    }
    public DollarText(): antlr.TerminalNode[];
    public DollarText(i: number): antlr.TerminalNode | null;
    public DollarText(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.DollarText);
    	} else {
    		return this.getToken(PostgreSqlParser.DollarText, i);
    	}
    }
    public EscapeStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EscapeStringConstant, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_anysconst;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAnysconst) {
             listener.enterAnysconst(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAnysconst) {
             listener.exitAnysconst(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAnysconst) {
            return visitor.visitAnysconst(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SignediconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Integral(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.Integral, 0)!;
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_signediconst;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSignediconst) {
             listener.enterSignediconst(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSignediconst) {
             listener.exitSignediconst(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSignediconst) {
            return visitor.visitSignediconst(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RolespecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonreservedword(): NonreservedwordContext | null {
        return this.getRuleContext(0, NonreservedwordContext);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_USER, 0);
    }
    public KW_CURRENT_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_ROLE, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION_USER, 0);
    }
    public KW_PUBLIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLIC, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_rolespec;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRolespec) {
             listener.enterRolespec(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRolespec) {
             listener.exitRolespec(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRolespec) {
            return visitor.visitRolespec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Role_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rolespec(): RolespecContext[];
    public rolespec(i: number): RolespecContext | null;
    public rolespec(i?: number): RolespecContext[] | RolespecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RolespecContext);
        }

        return this.getRuleContext(i, RolespecContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_role_list;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterRole_list) {
             listener.enterRole_list(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitRole_list) {
             listener.exitRole_list(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitRole_list) {
            return visitor.visitRole_list(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColidContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public col_name_keyword(): Col_name_keywordContext | null {
        return this.getRuleContext(0, Col_name_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_colid;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterColid) {
             listener.enterColid(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitColid) {
             listener.exitColid(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitColid) {
            return visitor.visitColid(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_function_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_type_function_name;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterType_function_name) {
             listener.enterType_function_name(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitType_function_name) {
             listener.exitType_function_name(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitType_function_name) {
            return visitor.visitType_function_name(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NonreservedwordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public col_name_keyword(): Col_name_keywordContext | null {
        return this.getRuleContext(0, Col_name_keywordContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_nonreservedword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterNonreservedword) {
             listener.enterNonreservedword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitNonreservedword) {
             listener.exitNonreservedword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitNonreservedword) {
            return visitor.visitNonreservedword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollabelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public col_name_keyword(): Col_name_keywordContext | null {
        return this.getRuleContext(0, Col_name_keywordContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public reserved_keyword(): Reserved_keywordContext | null {
        return this.getRuleContext(0, Reserved_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_collabel;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCollabel) {
             listener.enterCollabel(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCollabel) {
             listener.exitCollabel(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCollabel) {
            return visitor.visitCollabel(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Identifier(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Identifier, 0);
    }
    public KW_UESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UESCAPE, 0);
    }
    public anysconst(): AnysconstContext | null {
        return this.getRuleContext(0, AnysconstContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public QuotedIdentifier(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.QuotedIdentifier, 0);
    }
    public UnicodeQuotedIdentifier(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.UnicodeQuotedIdentifier, 0);
    }
    public PLSQLVARIABLENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLSQLVARIABLENAME, 0);
    }
    public PLSQLIDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PLSQLIDENTIFIER, 0);
    }
    public unreserved_keyword(): Unreserved_keywordContext | null {
        return this.getRuleContext(0, Unreserved_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_identifier;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterIdentifier) {
             listener.enterIdentifier(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitIdentifier) {
             listener.exitIdentifier(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Unreserved_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ABORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABORT, 0);
    }
    public KW_ABSOLUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABSOLUTE, 0);
    }
    public KW_ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACCESS, 0);
    }
    public KW_ACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ACTION, 0);
    }
    public KW_ADD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADD, 0);
    }
    public KW_ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ADMIN, 0);
    }
    public KW_AFTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AFTER, 0);
    }
    public KW_AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AGGREGATE, 0);
    }
    public KW_ALSO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALSO, 0);
    }
    public KW_ALTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALTER, 0);
    }
    public KW_ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALWAYS, 0);
    }
    public KW_ASSERTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASSERTION, 0);
    }
    public KW_ASSIGNMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASSIGNMENT, 0);
    }
    public KW_AT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AT, 0);
    }
    public KW_ATTACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ATTACH, 0);
    }
    public KW_ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ATTRIBUTE, 0);
    }
    public KW_BACKWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BACKWARD, 0);
    }
    public KW_BEFORE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BEFORE, 0);
    }
    public KW_BEGIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BEGIN, 0);
    }
    public KW_BUFFER_USAGE_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BUFFER_USAGE_LIMIT, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public KW_CACHE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CACHE, 0);
    }
    public KW_CALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CALL, 0);
    }
    public KW_CALLED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CALLED, 0);
    }
    public KW_CASCADE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADE, 0);
    }
    public KW_CASCADED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASCADED, 0);
    }
    public KW_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CATALOG, 0);
    }
    public KW_CHAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAIN, 0);
    }
    public KW_CHARACTERISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHARACTERISTICS, 0);
    }
    public KW_CHECKPOINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHECKPOINT, 0);
    }
    public KW_CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLASS, 0);
    }
    public KW_CLOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLOSE, 0);
    }
    public KW_CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CLUSTER, 0);
    }
    public KW_COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMNS, 0);
    }
    public KW_COMMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMENT, 0);
    }
    public KW_COMMENTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMENTS, 0);
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMIT, 0);
    }
    public KW_COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMITTED, 0);
    }
    public KW_CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFIGURATION, 0);
    }
    public KW_CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONFLICT, 0);
    }
    public KW_CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONNECTION, 0);
    }
    public KW_CONSTRAINTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINTS, 0);
    }
    public KW_CONTENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTENT, 0);
    }
    public KW_CONTINUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTINUE, 0);
    }
    public KW_CONVERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONVERSION, 0);
    }
    public KW_COPY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COPY, 0);
    }
    public KW_COST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COST, 0);
    }
    public KW_CSV(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CSV, 0);
    }
    public KW_CUBE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CUBE, 0);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_CURSOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURSOR, 0);
    }
    public KW_CYCLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CYCLE, 0);
    }
    public KW_DATA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATA, 0);
    }
    public KW_DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DATABASE, 0);
    }
    public KW_DAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DAY, 0);
    }
    public KW_DEALLOCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEALLOCATE, 0);
    }
    public KW_DECLARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DECLARE, 0);
    }
    public KW_DEFAULTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULTS, 0);
    }
    public KW_DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRED, 0);
    }
    public KW_DEFINER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFINER, 0);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_DELIMITER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELIMITER, 0);
    }
    public KW_DELIMITERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELIMITERS, 0);
    }
    public KW_DEPENDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEPENDS, 0);
    }
    public KW_DETACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DETACH, 0);
    }
    public KW_DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DICTIONARY, 0);
    }
    public KW_DISABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISABLE, 0);
    }
    public KW_DISCARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISCARD, 0);
    }
    public KW_DOCUMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOCUMENT, 0);
    }
    public KW_DOMAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOMAIN, 0);
    }
    public KW_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DOUBLE, 0);
    }
    public KW_DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DROP, 0);
    }
    public KW_EACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EACH, 0);
    }
    public KW_ENABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENABLE, 0);
    }
    public KW_ENCODING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENCODING, 0);
    }
    public KW_ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENCRYPTED, 0);
    }
    public KW_ENUM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ENUM, 0);
    }
    public KW_ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ESCAPE, 0);
    }
    public KW_EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EVENT, 0);
    }
    public KW_EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUDE, 0);
    }
    public KW_EXCLUDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUDING, 0);
    }
    public KW_EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCLUSIVE, 0);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0);
    }
    public KW_EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXPLAIN, 0);
    }
    public KW_EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXPRESSION, 0);
    }
    public KW_EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTENSION, 0);
    }
    public KW_EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTERNAL, 0);
    }
    public KW_FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FAMILY, 0);
    }
    public KW_FILTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FILTER, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOLLOWING, 0);
    }
    public KW_FORCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORCE, 0);
    }
    public KW_FORWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORWARD, 0);
    }
    public KW_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTION, 0);
    }
    public KW_FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FUNCTIONS, 0);
    }
    public KW_GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GENERATED, 0);
    }
    public KW_GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GLOBAL, 0);
    }
    public KW_GRANTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GRANTED, 0);
    }
    public KW_GROUPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUPS, 0);
    }
    public KW_HANDLER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HANDLER, 0);
    }
    public KW_HEADER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HEADER, 0);
    }
    public KW_HOLD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HOLD, 0);
    }
    public KW_HOUR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HOUR, 0);
    }
    public KW_IDENTITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IDENTITY, 0);
    }
    public KW_IF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IF, 0);
    }
    public KW_IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMEDIATE, 0);
    }
    public KW_IMMUTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMMUTABLE, 0);
    }
    public KW_IMPLICIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMPLICIT, 0);
    }
    public KW_IMPORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IMPORT, 0);
    }
    public KW_INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCLUDE, 0);
    }
    public KW_INCLUDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCLUDING, 0);
    }
    public KW_INCREMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INCREMENT, 0);
    }
    public KW_INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEX, 0);
    }
    public KW_INDEXES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INDEXES, 0);
    }
    public KW_INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERIT, 0);
    }
    public KW_INHERITS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INHERITS, 0);
    }
    public KW_INLINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INLINE, 0);
    }
    public KW_INPUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INPUT, 0);
    }
    public KW_INSENSITIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSENSITIVE, 0);
    }
    public KW_INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0);
    }
    public KW_INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INSTEAD, 0);
    }
    public KW_INVOKER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INVOKER, 0);
    }
    public KW_ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ISOLATION, 0);
    }
    public KW_KEY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_KEY, 0);
    }
    public KW_LABEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LABEL, 0);
    }
    public KW_LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LANGUAGE, 0);
    }
    public KW_LARGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LARGE, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LAST, 0);
    }
    public KW_LEAKPROOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEAKPROOF, 0);
    }
    public KW_LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEVEL, 0);
    }
    public KW_LISTEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LISTEN, 0);
    }
    public KW_LOAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOAD, 0);
    }
    public KW_LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCAL, 0);
    }
    public KW_LOCATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCATION, 0);
    }
    public KW_LOCK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCK, 0);
    }
    public KW_LOCKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCKED, 0);
    }
    public KW_LOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOGGED, 0);
    }
    public KW_MAPPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAPPING, 0);
    }
    public KW_MATCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATCH, 0);
    }
    public KW_MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MATERIALIZED, 0);
    }
    public KW_MAXVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MAXVALUE, 0);
    }
    public KW_METHOD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_METHOD, 0);
    }
    public KW_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINUTE, 0);
    }
    public KW_MINVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MINVALUE, 0);
    }
    public KW_MODE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MODE, 0);
    }
    public KW_MONTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MONTH, 0);
    }
    public KW_MOVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_MOVE, 0);
    }
    public KW_NAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NAME, 0);
    }
    public KW_NAMES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NAMES, 0);
    }
    public KW_NEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEW, 0);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public KW_NFC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFC, 0);
    }
    public KW_NFD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFD, 0);
    }
    public KW_NFKC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFKC, 0);
    }
    public KW_NFKD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NFKD, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public KW_NORMALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NORMALIZED, 0);
    }
    public KW_NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTHING, 0);
    }
    public KW_NOTIFY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTIFY, 0);
    }
    public KW_NOWAIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOWAIT, 0);
    }
    public KW_NULLS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLS, 0);
    }
    public KW_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OBJECT, 0);
    }
    public KW_OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OF, 0);
    }
    public KW_OFF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OFF, 0);
    }
    public KW_OIDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OIDS, 0);
    }
    public KW_OLD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OLD, 0);
    }
    public KW_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPERATOR, 0);
    }
    public KW_OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTION, 0);
    }
    public KW_OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPTIONS, 0);
    }
    public KW_ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDINALITY, 0);
    }
    public KW_OTHERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OTHERS, 0);
    }
    public KW_OVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVER, 0);
    }
    public KW_OVERRIDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERRIDING, 0);
    }
    public KW_OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNED, 0);
    }
    public KW_OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OWNER, 0);
    }
    public KW_PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARALLEL, 0);
    }
    public KW_PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARSER, 0);
    }
    public KW_PARTIAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTIAL, 0);
    }
    public KW_PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PARTITION, 0);
    }
    public KW_PASSING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PASSING, 0);
    }
    public KW_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PASSWORD, 0);
    }
    public KW_PLANS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PLANS, 0);
    }
    public KW_POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POLICY, 0);
    }
    public KW_PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRECEDING, 0);
    }
    public KW_PREPARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PREPARE, 0);
    }
    public KW_PREPARED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PREPARED, 0);
    }
    public KW_PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRESERVE, 0);
    }
    public KW_PRIOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIOR, 0);
    }
    public KW_PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIVILEGES, 0);
    }
    public KW_PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURAL, 0);
    }
    public KW_PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURE, 0);
    }
    public KW_PROCEDURES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROCEDURES, 0);
    }
    public KW_PROGRAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PROGRAM, 0);
    }
    public KW_PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLICATION, 0);
    }
    public KW_QUOTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_QUOTE, 0);
    }
    public KW_RANGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RANGE, 0);
    }
    public KW_READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_READ, 0);
    }
    public KW_REASSIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REASSIGN, 0);
    }
    public KW_RECHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RECHECK, 0);
    }
    public KW_RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RECURSIVE, 0);
    }
    public KW_REF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REF, 0);
    }
    public KW_REFERENCING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCING, 0);
    }
    public KW_REFRESH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFRESH, 0);
    }
    public KW_REINDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REINDEX, 0);
    }
    public KW_RELATIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELATIVE, 0);
    }
    public KW_RELEASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELEASE, 0);
    }
    public KW_RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RENAME, 0);
    }
    public KW_REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPEATABLE, 0);
    }
    public KW_REPLACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLACE, 0);
    }
    public KW_REPLICA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REPLICA, 0);
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_RESTART(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTART, 0);
    }
    public KW_RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESTRICT, 0);
    }
    public KW_RETURNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RETURNS, 0);
    }
    public KW_REVOKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REVOKE, 0);
    }
    public KW_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLE, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLBACK, 0);
    }
    public KW_ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLUP, 0);
    }
    public KW_ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINE, 0);
    }
    public KW_ROUTINES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROUTINES, 0);
    }
    public KW_ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWS, 0);
    }
    public KW_RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RULE, 0);
    }
    public KW_SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SAVEPOINT, 0);
    }
    public KW_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMA, 0);
    }
    public KW_SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCHEMAS, 0);
    }
    public KW_SCROLL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCROLL, 0);
    }
    public KW_SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEARCH, 0);
    }
    public KW_SECOND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECOND, 0);
    }
    public KW_SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SECURITY, 0);
    }
    public KW_SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCE, 0);
    }
    public KW_SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SEQUENCES, 0);
    }
    public KW_SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERIALIZABLE, 0);
    }
    public KW_SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SERVER, 0);
    }
    public KW_SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION, 0);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public KW_SETS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SETS, 0);
    }
    public KW_SHARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SHARE, 0);
    }
    public KW_SHOW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SHOW, 0);
    }
    public KW_SIMPLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SIMPLE, 0);
    }
    public KW_SKIP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SKIP, 0);
    }
    public KW_SKIP_LOCKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SKIP_LOCKED, 0);
    }
    public KW_SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SNAPSHOT, 0);
    }
    public KW_SQL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SQL, 0);
    }
    public KW_STABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STABLE, 0);
    }
    public KW_STANDALONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STANDALONE, 0);
    }
    public KW_START(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_START, 0);
    }
    public KW_STATEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATEMENT, 0);
    }
    public KW_STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STATISTICS, 0);
    }
    public KW_STDIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STDIN, 0);
    }
    public KW_STDOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STDOUT, 0);
    }
    public KW_STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORAGE, 0);
    }
    public KW_STORED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STORED, 0);
    }
    public KW_STRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRICT, 0);
    }
    public KW_STRIP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRIP, 0);
    }
    public KW_SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSCRIPTION, 0);
    }
    public KW_SUPPORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUPPORT, 0);
    }
    public KW_SYSID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSID, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSTEM, 0);
    }
    public KW_TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLES, 0);
    }
    public KW_TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESPACE, 0);
    }
    public KW_TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMP, 0);
    }
    public KW_TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPLATE, 0);
    }
    public KW_TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEMPORARY, 0);
    }
    public KW_TEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TEXT, 0);
    }
    public KW_TIES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIES, 0);
    }
    public KW_TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSACTION, 0);
    }
    public KW_TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRANSFORM, 0);
    }
    public KW_TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIGGER, 0);
    }
    public KW_TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUNCATE, 0);
    }
    public KW_TRUSTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUSTED, 0);
    }
    public KW_TYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPE, 0);
    }
    public KW_TYPES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TYPES, 0);
    }
    public KW_UESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UESCAPE, 0);
    }
    public KW_UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNBOUNDED, 0);
    }
    public KW_UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNCOMMITTED, 0);
    }
    public KW_UNENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNENCRYPTED, 0);
    }
    public KW_UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNKNOWN, 0);
    }
    public KW_UNLISTEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLISTEN, 0);
    }
    public KW_UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNLOGGED, 0);
    }
    public KW_UNTIL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNTIL, 0);
    }
    public KW_UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0);
    }
    public KW_VACUUM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VACUUM, 0);
    }
    public KW_VALID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALID, 0);
    }
    public KW_VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATE, 0);
    }
    public KW_VALIDATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALIDATOR, 0);
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0);
    }
    public KW_VARYING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARYING, 0);
    }
    public KW_VERSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VERSION, 0);
    }
    public KW_VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEW, 0);
    }
    public KW_VIEWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VIEWS, 0);
    }
    public KW_VOLATILE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VOLATILE, 0);
    }
    public KW_WHITESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHITESPACE, 0);
    }
    public KW_WITHIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHIN, 0);
    }
    public KW_WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITHOUT, 0);
    }
    public KW_WORK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WORK, 0);
    }
    public KW_WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRAPPER, 0);
    }
    public KW_WRITE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WRITE, 0);
    }
    public KW_XML(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XML, 0);
    }
    public KW_YEAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_YEAR, 0);
    }
    public KW_YES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_YES, 0);
    }
    public KW_ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ZONE, 0);
    }
    public KW_ALIAS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALIAS, 0);
    }
    public KW_ASSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASSERT, 0);
    }
    public KW_CONSTANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTANT, 0);
    }
    public KW_DEBUG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEBUG, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_DIAGNOSTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DIAGNOSTICS, 0);
    }
    public KW_DUMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DUMP, 0);
    }
    public KW_ELSIF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ELSIF, 0);
    }
    public KW_ERROR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ERROR, 0);
    }
    public KW_EXCEPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCEPTION, 0);
    }
    public KW_EXIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXIT, 0);
    }
    public KW_GET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GET, 0);
    }
    public KW_INFO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INFO, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IS, 0);
    }
    public KW_LOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOG, 0);
    }
    public KW_NOTICE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTICE, 0);
    }
    public KW_OPEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OPEN, 0);
    }
    public KW_PUBLIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PUBLIC, 0);
    }
    public KW_PERFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PERFORM, 0);
    }
    public KW_PRINT_STRICT_PARAMS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRINT_STRICT_PARAMS, 0);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_QUERY, 0);
    }
    public KW_RAISE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RAISE, 0);
    }
    public KW_RETURN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RETURN, 0);
    }
    public KW_REVERSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REVERSE, 0);
    }
    public KW_ROWTYPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROWTYPE, 0);
    }
    public KW_SLICE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SLICE, 0);
    }
    public KW_SQLSTATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SQLSTATE, 0);
    }
    public KW_STACKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STACKED, 0);
    }
    public KW_USE_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USE_COLUMN, 0);
    }
    public KW_USE_VARIABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USE_VARIABLE, 0);
    }
    public KW_VARIABLE_CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARIABLE_CONFLICT, 0);
    }
    public KW_WARNING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WARNING, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OUTER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_unreserved_keyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterUnreserved_keyword) {
             listener.enterUnreserved_keyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitUnreserved_keyword) {
             listener.exitUnreserved_keyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitUnreserved_keyword) {
            return visitor.visitUnreserved_keyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Col_name_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BETWEEN, 0);
    }
    public KW_BIGINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BIGINT, 0);
    }
    public bit(): BitContext | null {
        return this.getRuleContext(0, BitContext);
    }
    public KW_BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BOOLEAN, 0);
    }
    public KW_CHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAR, 0);
    }
    public character(): CharacterContext | null {
        return this.getRuleContext(0, CharacterContext);
    }
    public KW_COALESCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COALESCE, 0);
    }
    public KW_DEC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEC, 0);
    }
    public KW_DECIMAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DECIMAL, 0);
    }
    public KW_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXISTS, 0);
    }
    public KW_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXTRACT, 0);
    }
    public KW_FLOAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FLOAT, 0);
    }
    public KW_GREATEST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GREATEST, 0);
    }
    public KW_GROUPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUPING, 0);
    }
    public KW_INOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INOUT, 0);
    }
    public KW_INT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INT, 0);
    }
    public KW_INTEGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTEGER, 0);
    }
    public KW_INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERVAL, 0);
    }
    public KW_LEAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEAST, 0);
    }
    public KW_NATIONAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NATIONAL, 0);
    }
    public KW_NCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NCHAR, 0);
    }
    public KW_NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NONE, 0);
    }
    public KW_NORMALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NORMALIZE, 0);
    }
    public KW_NULLIF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULLIF, 0);
    }
    public numeric(): NumericContext | null {
        return this.getRuleContext(0, NumericContext);
    }
    public KW_OUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OUT, 0);
    }
    public KW_OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERLAY, 0);
    }
    public KW_POSITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_POSITION, 0);
    }
    public KW_PRECISION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRECISION, 0);
    }
    public KW_REAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REAL, 0);
    }
    public KW_ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROW, 0);
    }
    public KW_SETOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SETOF, 0);
    }
    public KW_SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SMALLINT, 0);
    }
    public KW_SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SUBSTRING, 0);
    }
    public KW_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIME, 0);
    }
    public KW_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TIMESTAMP, 0);
    }
    public KW_TREAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TREAT, 0);
    }
    public KW_TRIM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRIM, 0);
    }
    public KW_VALUES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUES, 0);
    }
    public KW_VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARCHAR, 0);
    }
    public KW_XMLATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLATTRIBUTES, 0);
    }
    public KW_XMLCONCAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLCONCAT, 0);
    }
    public KW_XMLELEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLELEMENT, 0);
    }
    public KW_XMLEXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLEXISTS, 0);
    }
    public KW_XMLFOREST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLFOREST, 0);
    }
    public KW_XMLNAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLNAMESPACES, 0);
    }
    public KW_XMLPARSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLPARSE, 0);
    }
    public KW_XMLPI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLPI, 0);
    }
    public KW_XMLROOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLROOT, 0);
    }
    public KW_XMLSERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLSERIALIZE, 0);
    }
    public KW_XMLTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_XMLTABLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_col_name_keyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCol_name_keyword) {
             listener.enterCol_name_keyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCol_name_keyword) {
             listener.exitCol_name_keyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCol_name_keyword) {
            return visitor.visitCol_name_keyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Type_func_name_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AUTHORIZATION, 0);
    }
    public KW_BINARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BINARY, 0);
    }
    public KW_COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATION, 0);
    }
    public KW_CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONCURRENTLY, 0);
    }
    public KW_CROSS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CROSS, 0);
    }
    public KW_CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_SCHEMA, 0);
    }
    public KW_FREEZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FREEZE, 0);
    }
    public KW_FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FULL, 0);
    }
    public KW_ILIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ILIKE, 0);
    }
    public KW_INNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INNER, 0);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IS, 0);
    }
    public KW_ISNULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ISNULL, 0);
    }
    public KW_JOIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_JOIN, 0);
    }
    public KW_LEFT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEFT, 0);
    }
    public KW_LIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIKE, 0);
    }
    public KW_NATURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NATURAL, 0);
    }
    public KW_NOTNULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTNULL, 0);
    }
    public KW_OUTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OUTER, 0);
    }
    public KW_OVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERLAPS, 0);
    }
    public KW_RIGHT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RIGHT, 0);
    }
    public KW_SIMILAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SIMILAR, 0);
    }
    public KW_TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLESAMPLE, 0);
    }
    public KW_VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VERBOSE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_type_func_name_keyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterType_func_name_keyword) {
             listener.enterType_func_name_keyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitType_func_name_keyword) {
             listener.exitType_func_name_keyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitType_func_name_keyword) {
            return visitor.visitType_func_name_keyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Reserved_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_ANALYSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANALYSE, 0);
    }
    public KW_ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANALYZE, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_ANY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ANY, 0);
    }
    public KW_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ARRAY, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public KW_ASC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASC, 0);
    }
    public KW_ASYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ASYMMETRIC, 0);
    }
    public KW_BOTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BOTH, 0);
    }
    public KW_CASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CASE, 0);
    }
    public KW_CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CAST, 0);
    }
    public KW_CHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHECK, 0);
    }
    public KW_COLLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLLATE, 0);
    }
    public KW_COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COLUMN, 0);
    }
    public KW_CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTRAINT, 0);
    }
    public KW_CREATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CREATE, 0);
    }
    public KW_CURRENT_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_CATALOG, 0);
    }
    public KW_CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_DATE, 0);
    }
    public KW_CURRENT_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_ROLE, 0);
    }
    public KW_CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_TIME, 0);
    }
    public KW_CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_TIMESTAMP, 0);
    }
    public KW_CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT_USER, 0);
    }
    public KW_DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFERRABLE, 0);
    }
    public KW_DESC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DESC, 0);
    }
    public KW_DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DISTINCT, 0);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DO, 0);
    }
    public KW_ELSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ELSE, 0);
    }
    public KW_END(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_END, 0);
    }
    public KW_EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCEPT, 0);
    }
    public KW_FALSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FALSE, 0);
    }
    public KW_FETCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FETCH, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public KW_FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOREIGN, 0);
    }
    public KW_FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FROM, 0);
    }
    public KW_GRANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GRANT, 0);
    }
    public KW_GROUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_GROUP, 0);
    }
    public KW_HAVING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HAVING, 0);
    }
    public KW_IN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IN, 0);
    }
    public KW_INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INITIALLY, 0);
    }
    public KW_INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INTERSECT, 0);
    }
    public KW_LATERAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LATERAL, 0);
    }
    public KW_LEADING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LEADING, 0);
    }
    public KW_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LIMIT, 0);
    }
    public KW_LOCALTIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCALTIME, 0);
    }
    public KW_LOCALTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOCALTIMESTAMP, 0);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public KW_OFFSET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OFFSET, 0);
    }
    public KW_ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ON, 0);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public KW_OR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OR, 0);
    }
    public KW_ORDER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ORDER, 0);
    }
    public KW_PLACING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PLACING, 0);
    }
    public KW_PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIMARY, 0);
    }
    public KW_REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REFERENCES, 0);
    }
    public KW_RETURNING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RETURNING, 0);
    }
    public KW_SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SELECT, 0);
    }
    public KW_SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SESSION_USER, 0);
    }
    public KW_SOME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SOME, 0);
    }
    public KW_SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYMMETRIC, 0);
    }
    public KW_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TABLE, 0);
    }
    public KW_THEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_THEN, 0);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_TRAILING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRAILING, 0);
    }
    public KW_TRUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TRUE, 0);
    }
    public KW_UNION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNION, 0);
    }
    public KW_UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_UNIQUE, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public KW_VARIADIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VARIADIC, 0);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0);
    }
    public KW_WHERE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHERE, 0);
    }
    public KW_WINDOW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WINDOW, 0);
    }
    public KW_WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WITH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_reserved_keyword;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterReserved_keyword) {
             listener.enterReserved_keyword(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitReserved_keyword) {
             listener.exitReserved_keyword(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitReserved_keyword) {
            return visitor.visitReserved_keyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Pl_blockContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_BEGIN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_BEGIN, 0)!;
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_END, 0)!;
    }
    public proc_stmt(): Proc_stmtContext[];
    public proc_stmt(i: number): Proc_stmtContext | null;
    public proc_stmt(i?: number): Proc_stmtContext[] | Proc_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Proc_stmtContext);
        }

        return this.getRuleContext(i, Proc_stmtContext);
    }
    public exception_sect(): Exception_sectContext | null {
        return this.getRuleContext(0, Exception_sectContext);
    }
    public any_identifier(): Any_identifierContext | null {
        return this.getRuleContext(0, Any_identifierContext);
    }
    public label_decl(): Label_declContext[];
    public label_decl(i: number): Label_declContext | null;
    public label_decl(i?: number): Label_declContext[] | Label_declContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Label_declContext);
        }

        return this.getRuleContext(i, Label_declContext);
    }
    public KW_DECLARE(): antlr.TerminalNode[];
    public KW_DECLARE(i: number): antlr.TerminalNode | null;
    public KW_DECLARE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_DECLARE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_DECLARE, i);
    	}
    }
    public decl_statement(): Decl_statementContext[];
    public decl_statement(i: number): Decl_statementContext | null;
    public decl_statement(i?: number): Decl_statementContext[] | Decl_statementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Decl_statementContext);
        }

        return this.getRuleContext(i, Decl_statementContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_pl_block;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterPl_block) {
             listener.enterPl_block(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitPl_block) {
             listener.exitPl_block(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitPl_block) {
            return visitor.visitPl_block(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Label_declContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LESS_LESS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.LESS_LESS, 0)!;
    }
    public any_identifier(): Any_identifierContext {
        return this.getRuleContext(0, Any_identifierContext)!;
    }
    public GREATER_GREATER(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.GREATER_GREATER, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_label_decl;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLabel_decl) {
             listener.enterLabel_decl(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLabel_decl) {
             listener.exitLabel_decl(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLabel_decl) {
            return visitor.visitLabel_decl(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Decl_statementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_identifier(): Any_identifierContext {
        return this.getRuleContext(0, Any_identifierContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_ALIAS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALIAS, 0);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public KW_CURSOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURSOR, 0);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public KW_IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_IS, 0);
    }
    public PARAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PARAM, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public KW_CONSTANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONSTANT, 0);
    }
    public opt_collate_clause(): Opt_collate_clauseContext | null {
        return this.getRuleContext(0, Opt_collate_clauseContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public KW_NULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NULL, 0);
    }
    public sql_expression(): Sql_expressionContext | null {
        return this.getRuleContext(0, Sql_expressionContext);
    }
    public KW_SCROLL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCROLL, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public decl_cursor_arg(): Decl_cursor_argContext[];
    public decl_cursor_arg(i: number): Decl_cursor_argContext | null;
    public decl_cursor_arg(i?: number): Decl_cursor_argContext[] | Decl_cursor_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Decl_cursor_argContext);
        }

        return this.getRuleContext(i, Decl_cursor_argContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public assign_operator(): Assign_operatorContext | null {
        return this.getRuleContext(0, Assign_operatorContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_decl_statement;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDecl_statement) {
             listener.enterDecl_statement(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDecl_statement) {
             listener.exitDecl_statement(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDecl_statement) {
            return visitor.visitDecl_statement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Decl_cursor_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_identifier(): Any_identifierContext {
        return this.getRuleContext(0, Any_identifierContext)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_decl_cursor_arg;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDecl_cursor_arg) {
             listener.enterDecl_cursor_arg(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDecl_cursor_arg) {
             listener.exitDecl_cursor_arg(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDecl_cursor_arg) {
            return visitor.visitDecl_cursor_arg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Assign_operatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.EQUAL, 0);
    }
    public COLON_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COLON_EQUALS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_assign_operator;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAssign_operator) {
             listener.enterAssign_operator(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAssign_operator) {
             listener.exitAssign_operator(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAssign_operator) {
            return visitor.visitAssign_operator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Proc_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pl_block(): Pl_blockContext | null {
        return this.getRuleContext(0, Pl_blockContext);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SEMI, 0);
    }
    public stmt_return(): Stmt_returnContext | null {
        return this.getRuleContext(0, Stmt_returnContext);
    }
    public stmt_raise(): Stmt_raiseContext | null {
        return this.getRuleContext(0, Stmt_raiseContext);
    }
    public stmt_assign(): Stmt_assignContext | null {
        return this.getRuleContext(0, Stmt_assignContext);
    }
    public stmt_if(): Stmt_ifContext | null {
        return this.getRuleContext(0, Stmt_ifContext);
    }
    public stmt_case(): Stmt_caseContext | null {
        return this.getRuleContext(0, Stmt_caseContext);
    }
    public stmt_loop_while_for(): Stmt_loop_while_forContext | null {
        return this.getRuleContext(0, Stmt_loop_while_forContext);
    }
    public stmt_foreach_a(): Stmt_foreach_aContext | null {
        return this.getRuleContext(0, Stmt_foreach_aContext);
    }
    public stmt_exit(): Stmt_exitContext | null {
        return this.getRuleContext(0, Stmt_exitContext);
    }
    public stmt_assert(): Stmt_assertContext | null {
        return this.getRuleContext(0, Stmt_assertContext);
    }
    public stmt_execsql(): Stmt_execsqlContext | null {
        return this.getRuleContext(0, Stmt_execsqlContext);
    }
    public stmt_dynexecute(): Stmt_dynexecuteContext | null {
        return this.getRuleContext(0, Stmt_dynexecuteContext);
    }
    public stmt_perform(): Stmt_performContext | null {
        return this.getRuleContext(0, Stmt_performContext);
    }
    public stmt_call(): Stmt_callContext | null {
        return this.getRuleContext(0, Stmt_callContext);
    }
    public stmt_getdiag(): Stmt_getdiagContext | null {
        return this.getRuleContext(0, Stmt_getdiagContext);
    }
    public stmt_open(): Stmt_openContext | null {
        return this.getRuleContext(0, Stmt_openContext);
    }
    public stmt_fetch(): Stmt_fetchContext | null {
        return this.getRuleContext(0, Stmt_fetchContext);
    }
    public stmt_move(): Stmt_moveContext | null {
        return this.getRuleContext(0, Stmt_moveContext);
    }
    public stmt_close(): Stmt_closeContext | null {
        return this.getRuleContext(0, Stmt_closeContext);
    }
    public stmt_null(): Stmt_nullContext | null {
        return this.getRuleContext(0, Stmt_nullContext);
    }
    public stmt_commit_or_rollback(): Stmt_commit_or_rollbackContext | null {
        return this.getRuleContext(0, Stmt_commit_or_rollbackContext);
    }
    public stmt_set(): Stmt_setContext | null {
        return this.getRuleContext(0, Stmt_setContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_proc_stmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProc_stmt) {
             listener.enterProc_stmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProc_stmt) {
             listener.exitProc_stmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProc_stmt) {
            return visitor.visitProc_stmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_performContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_PERFORM(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_PERFORM, 0)!;
    }
    public sql_expression(): Sql_expressionContext {
        return this.getRuleContext(0, Sql_expressionContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_perform;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_perform) {
             listener.enterStmt_perform(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_perform) {
             listener.exitStmt_perform(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_perform) {
            return visitor.visitStmt_perform(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_callContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CALL, 0);
    }
    public any_identifier(): Any_identifierContext {
        return this.getRuleContext(0, Any_identifierContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SEMI, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_call;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_call) {
             listener.enterStmt_call(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_call) {
             listener.exitStmt_call(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_call) {
            return visitor.visitStmt_call(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_assignContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assign_var(): Assign_varContext {
        return this.getRuleContext(0, Assign_varContext)!;
    }
    public assign_operator(): Assign_operatorContext {
        return this.getRuleContext(0, Assign_operatorContext)!;
    }
    public sql_expression(): Sql_expressionContext {
        return this.getRuleContext(0, Sql_expressionContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_assign;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_assign) {
             listener.enterStmt_assign(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_assign) {
             listener.exitStmt_assign(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_assign) {
            return visitor.visitStmt_assign(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_getdiagContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_GET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_GET, 0)!;
    }
    public KW_DIAGNOSTICS(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_DIAGNOSTICS, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public getdiag_list_item(): Getdiag_list_itemContext[];
    public getdiag_list_item(i: number): Getdiag_list_itemContext | null;
    public getdiag_list_item(i?: number): Getdiag_list_itemContext[] | Getdiag_list_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Getdiag_list_itemContext);
        }

        return this.getRuleContext(i, Getdiag_list_itemContext);
    }
    public KW_CURRENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CURRENT, 0);
    }
    public KW_STACKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STACKED, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_getdiag;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_getdiag) {
             listener.enterStmt_getdiag(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_getdiag) {
             listener.exitStmt_getdiag(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_getdiag) {
            return visitor.visitStmt_getdiag(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Getdiag_list_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assign_var(): Assign_varContext {
        return this.getRuleContext(0, Assign_varContext)!;
    }
    public assign_operator(): Assign_operatorContext {
        return this.getRuleContext(0, Assign_operatorContext)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_getdiag_list_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterGetdiag_list_item) {
             listener.enterGetdiag_list_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitGetdiag_list_item) {
             listener.exitGetdiag_list_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitGetdiag_list_item) {
            return visitor.visitGetdiag_list_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Assign_varContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public PARAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PARAM, 0);
    }
    public OPEN_BRACKET(): antlr.TerminalNode[];
    public OPEN_BRACKET(i: number): antlr.TerminalNode | null;
    public OPEN_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_BRACKET);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_BRACKET, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public CLOSE_BRACKET(): antlr.TerminalNode[];
    public CLOSE_BRACKET(i: number): antlr.TerminalNode | null;
    public CLOSE_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_BRACKET);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_BRACKET, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_assign_var;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAssign_var) {
             listener.enterAssign_var(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAssign_var) {
             listener.exitAssign_var(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAssign_var) {
            return visitor.visitAssign_var(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_ifContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_IF(): antlr.TerminalNode[];
    public KW_IF(i: number): antlr.TerminalNode | null;
    public KW_IF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_IF);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_IF, i);
    	}
    }
    public sql_expression(): Sql_expressionContext {
        return this.getRuleContext(0, Sql_expressionContext)!;
    }
    public KW_THEN(): antlr.TerminalNode[];
    public KW_THEN(i: number): antlr.TerminalNode | null;
    public KW_THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_THEN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_THEN, i);
    	}
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_END, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public proc_stmt(): Proc_stmtContext[];
    public proc_stmt(i: number): Proc_stmtContext | null;
    public proc_stmt(i?: number): Proc_stmtContext[] | Proc_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Proc_stmtContext);
        }

        return this.getRuleContext(i, Proc_stmtContext);
    }
    public stmt_else(): Stmt_elseContext | null {
        return this.getRuleContext(0, Stmt_elseContext);
    }
    public KW_ELSIF(): antlr.TerminalNode[];
    public KW_ELSIF(i: number): antlr.TerminalNode | null;
    public KW_ELSIF(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_ELSIF);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_ELSIF, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_if;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_if) {
             listener.enterStmt_if(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_if) {
             listener.exitStmt_if(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_if) {
            return visitor.visitStmt_if(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_elseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ELSE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ELSE, 0)!;
    }
    public proc_stmt(): Proc_stmtContext[];
    public proc_stmt(i: number): Proc_stmtContext | null;
    public proc_stmt(i?: number): Proc_stmtContext[] | Proc_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Proc_stmtContext);
        }

        return this.getRuleContext(i, Proc_stmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_else;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_else) {
             listener.enterStmt_else(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_else) {
             listener.exitStmt_else(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_else) {
            return visitor.visitStmt_else(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_caseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CASE(): antlr.TerminalNode[];
    public KW_CASE(i: number): antlr.TerminalNode | null;
    public KW_CASE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_CASE);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_CASE, i);
    	}
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_END, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public sql_expression(): Sql_expressionContext | null {
        return this.getRuleContext(0, Sql_expressionContext);
    }
    public KW_WHEN(): antlr.TerminalNode[];
    public KW_WHEN(i: number): antlr.TerminalNode | null;
    public KW_WHEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_WHEN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_WHEN, i);
    	}
    }
    public expr_list(): Expr_listContext[];
    public expr_list(i: number): Expr_listContext | null;
    public expr_list(i?: number): Expr_listContext[] | Expr_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Expr_listContext);
        }

        return this.getRuleContext(i, Expr_listContext);
    }
    public KW_THEN(): antlr.TerminalNode[];
    public KW_THEN(i: number): antlr.TerminalNode | null;
    public KW_THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_THEN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_THEN, i);
    	}
    }
    public stmt_else(): Stmt_elseContext | null {
        return this.getRuleContext(0, Stmt_elseContext);
    }
    public proc_stmt(): Proc_stmtContext[];
    public proc_stmt(i: number): Proc_stmtContext | null;
    public proc_stmt(i?: number): Proc_stmtContext[] | Proc_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Proc_stmtContext);
        }

        return this.getRuleContext(i, Proc_stmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_case;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_case) {
             listener.enterStmt_case(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_case) {
             listener.exitStmt_case(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_case) {
            return visitor.visitStmt_case(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_loop_while_forContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public loop_body(): Loop_bodyContext {
        return this.getRuleContext(0, Loop_bodyContext)!;
    }
    public label_decl(): Label_declContext | null {
        return this.getRuleContext(0, Label_declContext);
    }
    public KW_WHILE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHILE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public for_control(): For_controlContext | null {
        return this.getRuleContext(0, For_controlContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_loop_while_for;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_loop_while_for) {
             listener.enterStmt_loop_while_for(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_loop_while_for) {
             listener.exitStmt_loop_while_for(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_loop_while_for) {
            return visitor.visitStmt_loop_while_for(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class For_controlContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_name_list(): Any_name_listContext {
        return this.getRuleContext(0, Any_name_listContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public explainstmt(): ExplainstmtContext | null {
        return this.getRuleContext(0, ExplainstmtContext);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public DOT_DOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.DOT_DOT, 0);
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public KW_REVERSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_REVERSE, 0);
    }
    public KW_BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_for_control;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterFor_control) {
             listener.enterFor_control(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitFor_control) {
             listener.exitFor_control(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitFor_control) {
            return visitor.visitFor_control(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_foreach_aContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FOREACH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FOREACH, 0)!;
    }
    public any_name_list(): Any_name_listContext {
        return this.getRuleContext(0, Any_name_listContext)!;
    }
    public KW_IN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_IN, 0)!;
    }
    public KW_ARRAY(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ARRAY, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public loop_body(): Loop_bodyContext {
        return this.getRuleContext(0, Loop_bodyContext)!;
    }
    public label_decl(): Label_declContext | null {
        return this.getRuleContext(0, Label_declContext);
    }
    public KW_SLICE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SLICE, 0);
    }
    public Integral(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.Integral, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_foreach_a;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_foreach_a) {
             listener.enterStmt_foreach_a(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_foreach_a) {
             listener.exitStmt_foreach_a(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_foreach_a) {
            return visitor.visitStmt_foreach_a(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_exitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_EXIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXIT, 0);
    }
    public KW_CONTINUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CONTINUE, 0);
    }
    public any_identifier(): Any_identifierContext | null {
        return this.getRuleContext(0, Any_identifierContext);
    }
    public KW_WHEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0);
    }
    public sql_expression(): Sql_expressionContext | null {
        return this.getRuleContext(0, Sql_expressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_exit;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_exit) {
             listener.enterStmt_exit(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_exit) {
             listener.exitStmt_exit(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_exit) {
            return visitor.visitStmt_exit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_returnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RETURN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_RETURN, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public sql_expression(): Sql_expressionContext | null {
        return this.getRuleContext(0, Sql_expressionContext);
    }
    public KW_QUERY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_QUERY, 0);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_return;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_return) {
             listener.enterStmt_return(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_return) {
             listener.exitStmt_return(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_return) {
            return visitor.visitStmt_return(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_raiseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_RAISE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_RAISE, 0)!;
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.SEMI, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public KW_DEBUG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEBUG, 0);
    }
    public KW_LOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LOG, 0);
    }
    public KW_INFO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_INFO, 0);
    }
    public KW_NOTICE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTICE, 0);
    }
    public KW_WARNING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_WARNING, 0);
    }
    public KW_EXCEPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXCEPTION, 0);
    }
    public KW_SQLSTATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SQLSTATE, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public opt_raise_using_elem(): Opt_raise_using_elemContext[];
    public opt_raise_using_elem(i: number): Opt_raise_using_elemContext | null;
    public opt_raise_using_elem(i?: number): Opt_raise_using_elemContext[] | Opt_raise_using_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_raise_using_elemContext);
        }

        return this.getRuleContext(i, Opt_raise_using_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_raise;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_raise) {
             listener.enterStmt_raise(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_raise) {
             listener.exitStmt_raise(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_raise) {
            return visitor.visitStmt_raise(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_raise_using_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.EQUAL, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_raise_using_elem;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_raise_using_elem) {
             listener.enterOpt_raise_using_elem(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_raise_using_elem) {
             listener.exitOpt_raise_using_elem(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_raise_using_elem) {
            return visitor.visitOpt_raise_using_elem(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_assertContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_ASSERT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ASSERT, 0)!;
    }
    public sql_expression(): Sql_expressionContext[];
    public sql_expression(i: number): Sql_expressionContext | null;
    public sql_expression(i?: number): Sql_expressionContext[] | Sql_expressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Sql_expressionContext);
        }

        return this.getRuleContext(i, Sql_expressionContext);
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_assert;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_assert) {
             listener.enterStmt_assert(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_assert) {
             listener.exitStmt_assert(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_assert) {
            return visitor.visitStmt_assert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Loop_bodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_LOOP(): antlr.TerminalNode[];
    public KW_LOOP(i: number): antlr.TerminalNode | null;
    public KW_LOOP(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_LOOP);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_LOOP, i);
    	}
    }
    public KW_END(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_END, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public proc_stmt(): Proc_stmtContext[];
    public proc_stmt(i: number): Proc_stmtContext | null;
    public proc_stmt(i?: number): Proc_stmtContext[] | Proc_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Proc_stmtContext);
        }

        return this.getRuleContext(i, Proc_stmtContext);
    }
    public any_identifier(): Any_identifierContext | null {
        return this.getRuleContext(0, Any_identifierContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_loop_body;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterLoop_body) {
             listener.enterLoop_body(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitLoop_body) {
             listener.exitLoop_body(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitLoop_body) {
            return visitor.visitLoop_body(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_execsqlContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stmt(): StmtContext {
        return this.getRuleContext(0, StmtContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public opt_execute_into(): Opt_execute_intoContext | null {
        return this.getRuleContext(0, Opt_execute_intoContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_execsql;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_execsql) {
             listener.enterStmt_execsql(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_execsql) {
             listener.exitStmt_execsql(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_execsql) {
            return visitor.visitStmt_execsql(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_dynexecuteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXECUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public opt_execute_into(): Opt_execute_intoContext | null {
        return this.getRuleContext(0, Opt_execute_intoContext);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_dynexecute;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_dynexecute) {
             listener.enterStmt_dynexecute(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_dynexecute) {
             listener.exitStmt_dynexecute(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_dynexecute) {
            return visitor.visitStmt_dynexecute(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_execute_intoContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public KW_STRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_STRICT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_execute_into;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_execute_into) {
             listener.enterOpt_execute_into(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_execute_into) {
             listener.exitOpt_execute_into(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_execute_into) {
            return visitor.visitOpt_execute_into(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_openContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_OPEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_OPEN, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public cursor_variable(): Cursor_variableContext | null {
        return this.getRuleContext(0, Cursor_variableContext);
    }
    public KW_FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FOR, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public KW_EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_EXECUTE, 0);
    }
    public sql_expression(): Sql_expressionContext | null {
        return this.getRuleContext(0, Sql_expressionContext);
    }
    public KW_SCROLL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SCROLL, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public KW_USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USING, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public opt_open_bound_list_item(): Opt_open_bound_list_itemContext[];
    public opt_open_bound_list_item(i: number): Opt_open_bound_list_itemContext | null;
    public opt_open_bound_list_item(i?: number): Opt_open_bound_list_itemContext[] | Opt_open_bound_list_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_open_bound_list_itemContext);
        }

        return this.getRuleContext(i, Opt_open_bound_list_itemContext);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_open;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_open) {
             listener.enterStmt_open(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_open) {
             listener.exitStmt_open(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_open) {
            return visitor.visitStmt_open(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_open_bound_list_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public COLON_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.COLON_EQUALS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_open_bound_list_item;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_open_bound_list_item) {
             listener.enterOpt_open_bound_list_item(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_open_bound_list_item) {
             listener.exitOpt_open_bound_list_item(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_open_bound_list_item) {
            return visitor.visitOpt_open_bound_list_item(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_fetchContext extends antlr.ParserRuleContext {
    public _direction?: Opt_fetch_directionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_FETCH(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_FETCH, 0)!;
    }
    public cursor_variable(): Cursor_variableContext {
        return this.getRuleContext(0, Cursor_variableContext)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public from_in(): From_inContext | null {
        return this.getRuleContext(0, From_inContext);
    }
    public opt_fetch_direction(): Opt_fetch_directionContext | null {
        return this.getRuleContext(0, Opt_fetch_directionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_fetch;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_fetch) {
             listener.enterStmt_fetch(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_fetch) {
             listener.exitStmt_fetch(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_fetch) {
            return visitor.visitStmt_fetch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Opt_fetch_directionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NEXT, 0);
    }
    public KW_PRIOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_PRIOR, 0);
    }
    public KW_FIRST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FIRST, 0);
    }
    public KW_LAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_LAST, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_ABSOLUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ABSOLUTE, 0);
    }
    public KW_RELATIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RELATIVE, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public KW_FORWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_FORWARD, 0);
    }
    public KW_BACKWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_BACKWARD, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_opt_fetch_direction;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterOpt_fetch_direction) {
             listener.enterOpt_fetch_direction(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitOpt_fetch_direction) {
             listener.exitOpt_fetch_direction(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitOpt_fetch_direction) {
            return visitor.visitOpt_fetch_direction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_moveContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MOVE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MOVE, 0)!;
    }
    public cursor_variable(): Cursor_variableContext {
        return this.getRuleContext(0, Cursor_variableContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public opt_fetch_direction(): Opt_fetch_directionContext | null {
        return this.getRuleContext(0, Opt_fetch_directionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_move;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_move) {
             listener.enterStmt_move(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_move) {
             listener.exitStmt_move(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_move) {
            return visitor.visitStmt_move(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MergestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_MERGE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MERGE, 0)!;
    }
    public KW_INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INTO, 0)!;
    }
    public table_name(): Table_nameContext {
        return this.getRuleContext(0, Table_nameContext)!;
    }
    public KW_USING(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_USING, 0)!;
    }
    public data_source(): Data_sourceContext {
        return this.getRuleContext(0, Data_sourceContext)!;
    }
    public KW_ON(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_ON, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public with_clause(): With_clauseContext | null {
        return this.getRuleContext(0, With_clauseContext);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public merge_when_clause(): Merge_when_clauseContext[];
    public merge_when_clause(i: number): Merge_when_clauseContext | null;
    public merge_when_clause(i?: number): Merge_when_clauseContext[] | Merge_when_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Merge_when_clauseContext);
        }

        return this.getRuleContext(i, Merge_when_clauseContext);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_mergestmt;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterMergestmt) {
             listener.enterMergestmt(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitMergestmt) {
             listener.exitMergestmt(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMergestmt) {
            return visitor.visitMergestmt(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Data_sourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_name(): Table_nameContext | null {
        return this.getRuleContext(0, Table_nameContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public select_no_parens(): Select_no_parensContext | null {
        return this.getRuleContext(0, Select_no_parensContext);
    }
    public values_clause(): Values_clauseContext | null {
        return this.getRuleContext(0, Values_clauseContext);
    }
    public KW_ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ONLY, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.STAR, 0);
    }
    public KW_AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_data_source;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterData_source) {
             listener.enterData_source(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitData_source) {
             listener.exitData_source(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitData_source) {
            return visitor.visitData_source(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Merge_when_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_WHEN, 0)!;
    }
    public KW_MATCHED(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_MATCHED, 0)!;
    }
    public KW_THEN(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_THEN, 0)!;
    }
    public merge_update(): Merge_updateContext | null {
        return this.getRuleContext(0, Merge_updateContext);
    }
    public KW_DELETE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DELETE, 0);
    }
    public KW_DO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DO, 0);
    }
    public KW_NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOTHING, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public KW_NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NOT, 0);
    }
    public merge_insert(): Merge_insertContext | null {
        return this.getRuleContext(0, Merge_insertContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_merge_when_clause;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterMerge_when_clause) {
             listener.enterMerge_when_clause(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitMerge_when_clause) {
             listener.exitMerge_when_clause(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMerge_when_clause) {
            return visitor.visitMerge_when_clause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Merge_insertContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_INSERT(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_INSERT, 0)!;
    }
    public default_values_or_values(): Default_values_or_valuesContext {
        return this.getRuleContext(0, Default_values_or_valuesContext)!;
    }
    public opt_column_list(): Opt_column_listContext | null {
        return this.getRuleContext(0, Opt_column_listContext);
    }
    public KW_OVERRIDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_OVERRIDING, 0);
    }
    public KW_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_VALUE, 0);
    }
    public KW_SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SYSTEM, 0);
    }
    public KW_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_USER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_merge_insert;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterMerge_insert) {
             listener.enterMerge_insert(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitMerge_insert) {
             listener.exitMerge_insert(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMerge_insert) {
            return visitor.visitMerge_insert(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Merge_updateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_UPDATE, 0)!;
    }
    public KW_SET(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_SET, 0)!;
    }
    public column_name(): Column_nameContext[];
    public column_name(i: number): Column_nameContext | null;
    public column_name(i?: number): Column_nameContext[] | Column_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Column_nameContext);
        }

        return this.getRuleContext(i, Column_nameContext);
    }
    public EQUAL(): antlr.TerminalNode[];
    public EQUAL(i: number): antlr.TerminalNode | null;
    public EQUAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.EQUAL);
    	} else {
    		return this.getToken(PostgreSqlParser.EQUAL, i);
    	}
    }
    public exprofdefault(): ExprofdefaultContext[];
    public exprofdefault(i: number): ExprofdefaultContext | null;
    public exprofdefault(i?: number): ExprofdefaultContext[] | ExprofdefaultContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprofdefaultContext);
        }

        return this.getRuleContext(i, ExprofdefaultContext);
    }
    public opt_column_list(): Opt_column_listContext[];
    public opt_column_list(i: number): Opt_column_listContext | null;
    public opt_column_list(i?: number): Opt_column_listContext[] | Opt_column_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opt_column_listContext);
        }

        return this.getRuleContext(i, Opt_column_listContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.OPEN_PAREN, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSqlParser.CLOSE_PAREN, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_merge_update;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterMerge_update) {
             listener.enterMerge_update(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitMerge_update) {
             listener.exitMerge_update(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitMerge_update) {
            return visitor.visitMerge_update(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Default_values_or_valuesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_VALUES(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_VALUES, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.OPEN_PAREN, 0);
    }
    public exprofdefault(): ExprofdefaultContext[];
    public exprofdefault(i: number): ExprofdefaultContext | null;
    public exprofdefault(i?: number): ExprofdefaultContext[] | ExprofdefaultContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExprofdefaultContext);
        }

        return this.getRuleContext(i, ExprofdefaultContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.CLOSE_PAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.COMMA);
    	} else {
    		return this.getToken(PostgreSqlParser.COMMA, i);
    	}
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_default_values_or_values;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterDefault_values_or_values) {
             listener.enterDefault_values_or_values(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitDefault_values_or_values) {
             listener.exitDefault_values_or_values(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitDefault_values_or_values) {
            return visitor.visitDefault_values_or_values(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExprofdefaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sortby(): SortbyContext | null {
        return this.getRuleContext(0, SortbyContext);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_exprofdefault;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterExprofdefault) {
             listener.enterExprofdefault(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitExprofdefault) {
             listener.exitExprofdefault(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitExprofdefault) {
            return visitor.visitExprofdefault(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_closeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_CLOSE(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_CLOSE, 0)!;
    }
    public cursor_variable(): Cursor_variableContext {
        return this.getRuleContext(0, Cursor_variableContext)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_close;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_close) {
             listener.enterStmt_close(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_close) {
             listener.exitStmt_close(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_close) {
            return visitor.visitStmt_close(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_nullContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_NULL(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_NULL, 0)!;
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_null;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_null) {
             listener.enterStmt_null(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_null) {
             listener.exitStmt_null(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_null) {
            return visitor.visitStmt_null(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_commit_or_rollbackContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_COMMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_COMMIT, 0);
    }
    public KW_ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ROLLBACK, 0);
    }
    public KW_AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_AND, 0);
    }
    public KW_CHAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_CHAIN, 0);
    }
    public KW_NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_commit_or_rollback;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_commit_or_rollback) {
             listener.enterStmt_commit_or_rollback(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_commit_or_rollback) {
             listener.exitStmt_commit_or_rollback(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_commit_or_rollback) {
            return visitor.visitStmt_commit_or_rollback(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Stmt_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SET, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public KW_TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_TO, 0);
    }
    public KW_DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_DEFAULT, 0);
    }
    public SEMI(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.SEMI, 0)!;
    }
    public KW_RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_RESET, 0);
    }
    public KW_ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_stmt_set;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterStmt_set) {
             listener.enterStmt_set(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitStmt_set) {
             listener.exitStmt_set(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitStmt_set) {
            return visitor.visitStmt_set(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Cursor_variableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public PARAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.PARAM, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_cursor_variable;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterCursor_variable) {
             listener.enterCursor_variable(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitCursor_variable) {
             listener.exitCursor_variable(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitCursor_variable) {
            return visitor.visitCursor_variable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Exception_sectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KW_EXCEPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSqlParser.KW_EXCEPTION, 0)!;
    }
    public KW_WHEN(): antlr.TerminalNode[];
    public KW_WHEN(i: number): antlr.TerminalNode | null;
    public KW_WHEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_WHEN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_WHEN, i);
    	}
    }
    public KW_THEN(): antlr.TerminalNode[];
    public KW_THEN(i: number): antlr.TerminalNode | null;
    public KW_THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_THEN);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_THEN, i);
    	}
    }
    public proc_condition(): Proc_conditionContext[];
    public proc_condition(i: number): Proc_conditionContext | null;
    public proc_condition(i?: number): Proc_conditionContext[] | Proc_conditionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Proc_conditionContext);
        }

        return this.getRuleContext(i, Proc_conditionContext);
    }
    public proc_stmt(): Proc_stmtContext[];
    public proc_stmt(i: number): Proc_stmtContext | null;
    public proc_stmt(i?: number): Proc_stmtContext[] | Proc_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Proc_stmtContext);
        }

        return this.getRuleContext(i, Proc_stmtContext);
    }
    public KW_OR(): antlr.TerminalNode[];
    public KW_OR(i: number): antlr.TerminalNode | null;
    public KW_OR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSqlParser.KW_OR);
    	} else {
    		return this.getToken(PostgreSqlParser.KW_OR, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_exception_sect;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterException_sect) {
             listener.enterException_sect(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitException_sect) {
             listener.exitException_sect(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitException_sect) {
            return visitor.visitException_sect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Proc_conditionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_identifier(): Any_identifierContext | null {
        return this.getRuleContext(0, Any_identifierContext);
    }
    public KW_SQLSTATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_SQLSTATE, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_proc_condition;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterProc_condition) {
             listener.enterProc_condition(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitProc_condition) {
             listener.exitProc_condition(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitProc_condition) {
            return visitor.visitProc_condition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Any_identifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public unreserved_keyword(): Unreserved_keywordContext | null {
        return this.getRuleContext(0, Unreserved_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_any_identifier;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterAny_identifier) {
             listener.enterAny_identifier(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitAny_identifier) {
             listener.exitAny_identifier(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitAny_identifier) {
            return visitor.visitAny_identifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class Sql_expressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public target_list(): Target_listContext | null {
        return this.getRuleContext(0, Target_listContext);
    }
    public into_clause(): Into_clauseContext | null {
        return this.getRuleContext(0, Into_clauseContext);
    }
    public from_clause(): From_clauseContext | null {
        return this.getRuleContext(0, From_clauseContext);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public group_clause(): Group_clauseContext | null {
        return this.getRuleContext(0, Group_clauseContext);
    }
    public KW_HAVING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSqlParser.KW_HAVING, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public window_clause(): Window_clauseContext | null {
        return this.getRuleContext(0, Window_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSqlParser.RULE_sql_expression;
    }
    public override enterRule(listener: PostgreSqlParserListener): void {
        if(listener.enterSql_expression) {
             listener.enterSql_expression(this);
        }
    }
    public override exitRule(listener: PostgreSqlParserListener): void {
        if(listener.exitSql_expression) {
             listener.exitSql_expression(this);
        }
    }
    public override accept<Result>(visitor: PostgreSqlParserVisitor<Result>): Result | null {
        if (visitor.visitSql_expression) {
            return visitor.visitSql_expression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
